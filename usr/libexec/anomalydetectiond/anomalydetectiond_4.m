CMMsl *CMMsl::KappaRolloverCrashResult::operator=(CMMsl *a1, const CMMsl::KappaRolloverCrashResult *a2)
{
  CMMsl::KappaRolloverCrashResult *v3;
  _BYTE v5[328];

  if (a1 != a2)
  {
    CMMsl::KappaRolloverCrashResult::KappaRolloverCrashResult((CMMsl::KappaRolloverCrashResult *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaRolloverCrashResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaRolloverCrashResult *a2, CMMsl::KappaRolloverCrashResult *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  float result;

  v3 = *((_DWORD *)this + 81);
  v4 = *(_QWORD *)((char *)this + 316);
  v5 = *((_DWORD *)a2 + 81);
  *(_QWORD *)((char *)this + 316) = *(_QWORD *)((char *)a2 + 316);
  *((_DWORD *)this + 81) = v5;
  *(_QWORD *)((char *)a2 + 316) = v4;
  *((_DWORD *)a2 + 81) = v3;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 310);
  *((_BYTE *)this + 310) = *((_BYTE *)a2 + 310);
  *((_BYTE *)a2 + 310) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 311);
  *((_BYTE *)this + 311) = *((_BYTE *)a2 + 311);
  *((_BYTE *)a2 + 311) = v6;
  v7 = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v7;
  v8 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v8;
  v9 = *((_DWORD *)this + 70);
  *((_DWORD *)this + 70) = *((_DWORD *)a2 + 70);
  *((_DWORD *)a2 + 70) = v9;
  LOBYTE(v6) = *((_BYTE *)this + 308);
  *((_BYTE *)this + 308) = *((_BYTE *)a2 + 308);
  *((_BYTE *)a2 + 308) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 305);
  *((_BYTE *)this + 305) = *((_BYTE *)a2 + 305);
  *((_BYTE *)a2 + 305) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 304);
  *((_BYTE *)this + 304) = *((_BYTE *)a2 + 304);
  *((_BYTE *)a2 + 304) = v6;
  LODWORD(v6) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 307);
  *((_BYTE *)this + 307) = *((_BYTE *)a2 + 307);
  *((_BYTE *)a2 + 307) = v6;
  v10 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v10;
  v11 = *((_DWORD *)this + 52);
  *((_DWORD *)this + 52) = *((_DWORD *)a2 + 52);
  *((_DWORD *)a2 + 52) = v11;
  v12 = *((_DWORD *)this + 51);
  *((_DWORD *)this + 51) = *((_DWORD *)a2 + 51);
  *((_DWORD *)a2 + 51) = v12;
  v13 = *((_DWORD *)this + 53);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 53);
  *((_DWORD *)a2 + 53) = v13;
  v14 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v14;
  v15 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v15;
  v16 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v16;
  LOBYTE(v6) = *((_BYTE *)this + 313);
  *((_BYTE *)this + 313) = *((_BYTE *)a2 + 313);
  *((_BYTE *)a2 + 313) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 306);
  *((_BYTE *)this + 306) = *((_BYTE *)a2 + 306);
  *((_BYTE *)a2 + 306) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 309);
  *((_BYTE *)this + 309) = *((_BYTE *)a2 + 309);
  *((_BYTE *)a2 + 309) = v6;
  v17 = *((_DWORD *)this + 56);
  *((_DWORD *)this + 56) = *((_DWORD *)a2 + 56);
  *((_DWORD *)a2 + 56) = v17;
  v18 = *((_DWORD *)this + 54);
  *((_DWORD *)this + 54) = *((_DWORD *)a2 + 54);
  *((_DWORD *)a2 + 54) = v18;
  LODWORD(v6) = *((_DWORD *)this + 55);
  *((_DWORD *)this + 55) = *((_DWORD *)a2 + 55);
  *((_DWORD *)a2 + 55) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 312);
  *((_BYTE *)this + 312) = *((_BYTE *)a2 + 312);
  *((_BYTE *)a2 + 312) = v6;
  v19 = *((_DWORD *)this + 57);
  *((_DWORD *)this + 57) = *((_DWORD *)a2 + 57);
  *((_DWORD *)a2 + 57) = v19;
  v20 = *((_DWORD *)this + 62);
  *((_DWORD *)this + 62) = *((_DWORD *)a2 + 62);
  *((_DWORD *)a2 + 62) = v20;
  v21 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v21;
  v22 = *((_DWORD *)this + 46);
  *((_DWORD *)this + 46) = *((_DWORD *)a2 + 46);
  *((_DWORD *)a2 + 46) = v22;
  v23 = *((_DWORD *)this + 71);
  *((_DWORD *)this + 71) = *((_DWORD *)a2 + 71);
  *((_DWORD *)a2 + 71) = v23;
  v24 = *((_DWORD *)this + 58);
  *((_DWORD *)this + 58) = *((_DWORD *)a2 + 58);
  *((_DWORD *)a2 + 58) = v24;
  v25 = *((_DWORD *)this + 63);
  *((_DWORD *)this + 63) = *((_DWORD *)a2 + 63);
  *((_DWORD *)a2 + 63) = v25;
  v26 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v26;
  v27 = *((_DWORD *)this + 47);
  *((_DWORD *)this + 47) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = v27;
  v28 = *((_DWORD *)this + 72);
  *((_DWORD *)this + 72) = *((_DWORD *)a2 + 72);
  *((_DWORD *)a2 + 72) = v28;
  v29 = *((_DWORD *)this + 59);
  *((_DWORD *)this + 59) = *((_DWORD *)a2 + 59);
  *((_DWORD *)a2 + 59) = v29;
  v30 = *((_DWORD *)this + 64);
  *((_DWORD *)this + 64) = *((_DWORD *)a2 + 64);
  *((_DWORD *)a2 + 64) = v30;
  v31 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v31;
  v32 = *((_DWORD *)this + 48);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_DWORD *)a2 + 48) = v32;
  v33 = *((_DWORD *)this + 73);
  *((_DWORD *)this + 73) = *((_DWORD *)a2 + 73);
  *((_DWORD *)a2 + 73) = v33;
  v34 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v34;
  v35 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v35;
  v36 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v36;
  v37 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v37;
  v38 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v38;
  v39 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v39;
  v40 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v40;
  v41 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v41;
  v42 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v42;
  v43 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v43;
  v44 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v44;
  v45 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v45;
  v46 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v46;
  v47 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v47;
  v48 = *((_DWORD *)this + 60);
  *((_DWORD *)this + 60) = *((_DWORD *)a2 + 60);
  *((_DWORD *)a2 + 60) = v48;
  v49 = *((_DWORD *)this + 65);
  *((_DWORD *)this + 65) = *((_DWORD *)a2 + 65);
  *((_DWORD *)a2 + 65) = v49;
  v50 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v50;
  v51 = *((_DWORD *)this + 49);
  *((_DWORD *)this + 49) = *((_DWORD *)a2 + 49);
  *((_DWORD *)a2 + 49) = v51;
  v52 = *((_DWORD *)this + 74);
  *((_DWORD *)this + 74) = *((_DWORD *)a2 + 74);
  *((_DWORD *)a2 + 74) = v52;
  v53 = *((_DWORD *)this + 61);
  *((_DWORD *)this + 61) = *((_DWORD *)a2 + 61);
  *((_DWORD *)a2 + 61) = v53;
  v54 = *((_DWORD *)this + 66);
  *((_DWORD *)this + 66) = *((_DWORD *)a2 + 66);
  *((_DWORD *)a2 + 66) = v54;
  v55 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v55;
  v56 = *((_DWORD *)this + 50);
  *((_DWORD *)this + 50) = *((_DWORD *)a2 + 50);
  *((_DWORD *)a2 + 50) = v56;
  v57 = *((_DWORD *)this + 75);
  *((_DWORD *)this + 75) = *((_DWORD *)a2 + 75);
  *((_DWORD *)a2 + 75) = v57;
  v58 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v58;
  v59 = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v59;
  v60 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v60;
  v61 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v61;
  v62 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v62;
  v63 = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v63;
  v64 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v64;
  v65 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v65;
  v66 = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v66;
  v67 = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v67;
  v68 = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v68;
  v69 = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v69;
  v70 = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v70;
  v71 = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v71;
  v72 = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v72;
  v73 = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v73;
  v74 = *((_DWORD *)this + 68);
  *((_DWORD *)this + 68) = *((_DWORD *)a2 + 68);
  *((_DWORD *)a2 + 68) = v74;
  v75 = *((_DWORD *)this + 69);
  *((_DWORD *)this + 69) = *((_DWORD *)a2 + 69);
  *((_DWORD *)a2 + 69) = v75;
  result = *((float *)this + 67);
  *((_DWORD *)this + 67) = *((_DWORD *)a2 + 67);
  *((float *)a2 + 67) = result;
  return result;
}

float CMMsl::KappaRolloverCrashResult::KappaRolloverCrashResult(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float result;

  *(_QWORD *)a1 = off_100352390;
  v2 = *(_QWORD *)(a2 + 316);
  *(_DWORD *)(a1 + 324) = *(_DWORD *)(a2 + 324);
  *(_QWORD *)(a1 + 316) = v2;
  *(_DWORD *)(a2 + 324) = 0;
  *(_QWORD *)(a2 + 316) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 310) = *(_BYTE *)(a2 + 310);
  *(_BYTE *)(a1 + 311) = *(_BYTE *)(a2 + 311);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(_BYTE *)(a1 + 308) = *(_BYTE *)(a2 + 308);
  *(_BYTE *)(a1 + 305) = *(_BYTE *)(a2 + 305);
  *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 307) = *(_BYTE *)(a2 + 307);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 313) = *(_BYTE *)(a2 + 313);
  *(_BYTE *)(a1 + 306) = *(_BYTE *)(a2 + 306);
  *(_BYTE *)(a1 + 309) = *(_BYTE *)(a2 + 309);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 284) = *(_DWORD *)(a2 + 284);
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
  *(_DWORD *)(a1 + 252) = *(_DWORD *)(a2 + 252);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  *(_DWORD *)(a1 + 236) = *(_DWORD *)(a2 + 236);
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_DWORD *)(a1 + 292) = *(_DWORD *)(a2 + 292);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 260);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(_DWORD *)(a1 + 300) = *(_DWORD *)(a2 + 300);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  result = *(float *)(a2 + 268);
  *(float *)(a1 + 268) = result;
  return result;
}

CMMsl *CMMsl::KappaRolloverCrashResult::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::KappaRolloverCrashResult *v3;
  _BYTE v5[328];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaRolloverCrashResult::KappaRolloverCrashResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaRolloverCrashResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaRolloverCrashResult::formatText(CMMsl::KappaRolloverCrashResult *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t v6;
  int v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)((char *)this + 316);
  v6 = *(_QWORD *)((char *)this + 316);
  if ((v6 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "audioRolloverDvChaosThreshold", *((float *)this + 4));
    v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
    v6 = *v5;
    if ((*v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  if ((v6 & 4) != 0)
  {
LABEL_5:
    PB::TextFormatter::format(a2, "audioRolloverDvChaosThresholdCenter", *((float *)this + 5));
    v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
    v6 = *v5;
  }
LABEL_6:
  if ((v6 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "audioRolloverDvChaosThresholdMax", *((float *)this + 6));
    v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
    v6 = *v5;
    if ((*v5 & 0x10) == 0)
    {
LABEL_8:
      if ((v6 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_91;
    }
  }
  else if ((v6 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  PB::TextFormatter::format(a2, "audioRolloverDvChaosThresholdMin", *((float *)this + 7));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v6 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(a2, "audioRolloverDvChaosThresholdStretch", *((float *)this + 8));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v6 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_93;
  }
LABEL_92:
  PB::TextFormatter::format(a2, "audioRolloverDvEnergyThreshold", *((float *)this + 9));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v6 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_94;
  }
LABEL_93:
  PB::TextFormatter::format(a2, "audioRolloverDvEnergyThresholdCenter", *((float *)this + 10));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x100) == 0)
  {
LABEL_12:
    if ((v6 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_95;
  }
LABEL_94:
  PB::TextFormatter::format(a2, "audioRolloverDvEnergyThresholdMax", *((float *)this + 11));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v6 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_96;
  }
LABEL_95:
  PB::TextFormatter::format(a2, "audioRolloverDvEnergyThresholdMin", *((float *)this + 12));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v6 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_97;
  }
LABEL_96:
  PB::TextFormatter::format(a2, "audioRolloverDvEnergyThresholdStretch", *((float *)this + 13));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x800) == 0)
  {
LABEL_15:
    if ((v6 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_98;
  }
LABEL_97:
  PB::TextFormatter::format(a2, "audioRolloverDvMaxRmsThresholdCenter", *((float *)this + 14));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v6 & 0x2000) == 0)
      goto LABEL_17;
    goto LABEL_99;
  }
LABEL_98:
  PB::TextFormatter::format(a2, "audioRolloverDvMaxRmsThresholdMax", *((float *)this + 15));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x2000) == 0)
  {
LABEL_17:
    if ((v6 & 0x4000) == 0)
      goto LABEL_18;
    goto LABEL_100;
  }
LABEL_99:
  PB::TextFormatter::format(a2, "audioRolloverDvMaxRmsThresholdMin", *((float *)this + 16));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x4000) == 0)
  {
LABEL_18:
    if ((v6 & 0x8000) == 0)
      goto LABEL_19;
    goto LABEL_101;
  }
LABEL_100:
  PB::TextFormatter::format(a2, "audioRolloverDvMaxRmsThresholdStretch", *((float *)this + 17));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x8000) == 0)
  {
LABEL_19:
    if ((v6 & 0x10000) == 0)
      goto LABEL_20;
    goto LABEL_102;
  }
LABEL_101:
  PB::TextFormatter::format(a2, "audioRolloverDvRmsThreshold", *((float *)this + 18));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x10000) == 0)
  {
LABEL_20:
    if ((v6 & 0x20000) == 0)
      goto LABEL_21;
    goto LABEL_103;
  }
LABEL_102:
  PB::TextFormatter::format(a2, "baroEscalateMaxAccelNormThreshold", *((float *)this + 19));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x20000) == 0)
  {
LABEL_21:
    if ((v6 & 0x40000) == 0)
      goto LABEL_22;
    goto LABEL_104;
  }
LABEL_103:
  PB::TextFormatter::format(a2, "baroEscalateSpinNormThreshold", *((float *)this + 20));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x40000) == 0)
  {
LABEL_22:
    if ((v6 & 0x80000) == 0)
      goto LABEL_23;
    goto LABEL_105;
  }
LABEL_104:
  PB::TextFormatter::format(a2, "cumulativeRotation", *((float *)this + 21));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x80000) == 0)
  {
LABEL_23:
    if ((v6 & 0x100000) == 0)
      goto LABEL_24;
    goto LABEL_106;
  }
LABEL_105:
  PB::TextFormatter::format(a2, "cumulativeRotationThreshold", *((float *)this + 22));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x100000) == 0)
  {
LABEL_24:
    if ((v6 & 0x200000) == 0)
      goto LABEL_25;
    goto LABEL_107;
  }
LABEL_106:
  PB::TextFormatter::format(a2, "cumulativeRotationThresholdWithAudio", *((float *)this + 23));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x200000) == 0)
  {
LABEL_25:
    if ((v6 & 0x400000) == 0)
      goto LABEL_26;
    goto LABEL_108;
  }
LABEL_107:
  PB::TextFormatter::format(a2, "cumulativeRotationThresholdWithoutAudio", *((float *)this + 24));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x400000) == 0)
  {
LABEL_26:
    if ((v6 & 0x800000) == 0)
      goto LABEL_27;
    goto LABEL_109;
  }
LABEL_108:
  PB::TextFormatter::format(a2, "cumulativeRotationThresholdWithoutAudioStandaloneBaroNeeded", *((float *)this + 25));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x800000) == 0)
  {
LABEL_27:
    if ((v6 & 0x1000000) == 0)
      goto LABEL_28;
    goto LABEL_110;
  }
LABEL_109:
  PB::TextFormatter::format(a2, "cumulativeRotationThresholdWithoutAudioStandaloneFull", *((float *)this + 26));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x1000000) == 0)
  {
LABEL_28:
    if ((v6 & 0x2000000) == 0)
      goto LABEL_29;
    goto LABEL_111;
  }
LABEL_110:
  PB::TextFormatter::format(a2, "deltaVXYOverEpoch", *((float *)this + 27));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x2000000) == 0)
  {
LABEL_29:
    if ((v7 & 0x200) == 0)
      goto LABEL_30;
    goto LABEL_112;
  }
LABEL_111:
  PB::TextFormatter::format(a2, "detectorRegime", *((_DWORD *)this + 28));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*((_WORD *)this + 162) & 0x200) == 0)
  {
LABEL_30:
    if ((v7 & 0x400) == 0)
      goto LABEL_31;
    goto LABEL_113;
  }
LABEL_112:
  PB::TextFormatter::format(a2, "hasAudioInEpoch", *((_BYTE *)this + 304));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*((_WORD *)this + 162) & 0x400) == 0)
  {
LABEL_31:
    if ((v7 & 0x800) == 0)
      goto LABEL_32;
    goto LABEL_114;
  }
LABEL_113:
  PB::TextFormatter::format(a2, "isAudioRollover", *((_BYTE *)this + 305));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*((_WORD *)this + 162) & 0x800) == 0)
  {
LABEL_32:
    if ((v7 & 0x1000) == 0)
      goto LABEL_33;
    goto LABEL_115;
  }
LABEL_114:
  PB::TextFormatter::format(a2, "isAudioRolloverDv", *((_BYTE *)this + 306));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*((_WORD *)this + 162) & 0x1000) == 0)
  {
LABEL_33:
    if ((v7 & 0x2000) == 0)
      goto LABEL_34;
    goto LABEL_116;
  }
LABEL_115:
  PB::TextFormatter::format(a2, "isAudioSupported", *((_BYTE *)this + 307));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*((_WORD *)this + 162) & 0x2000) == 0)
  {
LABEL_34:
    if ((v7 & 0x4000) == 0)
      goto LABEL_35;
    goto LABEL_117;
  }
LABEL_116:
  PB::TextFormatter::format(a2, "isBaro", *((_BYTE *)this + 308));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*((_WORD *)this + 162) & 0x4000) == 0)
  {
LABEL_35:
    if ((v6 & 0x4000000) == 0)
      goto LABEL_36;
    goto LABEL_118;
  }
LABEL_117:
  PB::TextFormatter::format(a2, "isCompanionConnected", *((_BYTE *)this + 309));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x4000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x8000000) == 0)
      goto LABEL_37;
    goto LABEL_119;
  }
LABEL_118:
  PB::TextFormatter::format(a2, "lowSenseWithAudioCumulativeRotationThreshold", *((float *)this + 29));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x8000000) == 0)
  {
LABEL_37:
    if ((v6 & 0x10000000) == 0)
      goto LABEL_38;
    goto LABEL_120;
  }
LABEL_119:
  PB::TextFormatter::format(a2, "lowSenseWithAudioMaxAccelNormThreshold", *((float *)this + 30));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x10000000) == 0)
  {
LABEL_38:
    if ((v6 & 0x20000000) == 0)
      goto LABEL_39;
    goto LABEL_121;
  }
LABEL_120:
  PB::TextFormatter::format(a2, "lowSenseWithAudioParBaroCumulativeRotationThreshold", *((float *)this + 31));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x20000000) == 0)
  {
LABEL_39:
    if ((v6 & 0x40000000) == 0)
      goto LABEL_40;
    goto LABEL_122;
  }
LABEL_121:
  PB::TextFormatter::format(a2, "lowSenseWithAudioParBaroNormThreshold", *((float *)this + 32));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x40000000) == 0)
  {
LABEL_40:
    if ((v6 & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_123;
  }
LABEL_122:
  PB::TextFormatter::format(a2, "lowSenseWithAudioPeakPressureThreshold", *((float *)this + 33));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v6 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_124;
  }
LABEL_123:
  PB::TextFormatter::format(a2, "lowSenseWithAudioZgtimeThreshold", *((float *)this + 34));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x100000000) == 0)
  {
LABEL_42:
    if ((v6 & 0x200000000) == 0)
      goto LABEL_43;
    goto LABEL_125;
  }
LABEL_124:
  PB::TextFormatter::format(a2, "lowSenseWithAudiodvThreshold1", *((float *)this + 35));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x200000000) == 0)
  {
LABEL_43:
    if ((v6 & 0x400000000) == 0)
      goto LABEL_44;
    goto LABEL_126;
  }
LABEL_125:
  PB::TextFormatter::format(a2, "lowSenseWithAudiodvThreshold2", *((float *)this + 36));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x400000000) == 0)
  {
LABEL_44:
    if ((v6 & 0x800000000) == 0)
      goto LABEL_45;
    goto LABEL_127;
  }
LABEL_126:
  PB::TextFormatter::format(a2, "lowSenseWithoutAudioCumulativeRotationThreshold", *((float *)this + 37));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x800000000) == 0)
  {
LABEL_45:
    if ((v6 & 0x1000000000) == 0)
      goto LABEL_46;
    goto LABEL_128;
  }
LABEL_127:
  PB::TextFormatter::format(a2, "lowSenseWithoutAudioMaxAccelNormThreshold", *((float *)this + 38));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x1000000000) == 0)
  {
LABEL_46:
    if ((v6 & 0x2000000000) == 0)
      goto LABEL_47;
    goto LABEL_129;
  }
LABEL_128:
  PB::TextFormatter::format(a2, "lowSenseWithoutAudioParBaroCumulativeRotationThreshold", *((float *)this + 39));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x2000000000) == 0)
  {
LABEL_47:
    if ((v6 & 0x4000000000) == 0)
      goto LABEL_48;
    goto LABEL_130;
  }
LABEL_129:
  PB::TextFormatter::format(a2, "lowSenseWithoutAudioParBaroNormThreshold", *((float *)this + 40));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x4000000000) == 0)
  {
LABEL_48:
    if ((v6 & 0x8000000000) == 0)
      goto LABEL_49;
    goto LABEL_131;
  }
LABEL_130:
  PB::TextFormatter::format(a2, "lowSenseWithoutAudioPeakPressureThreshold", *((float *)this + 41));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x8000000000) == 0)
  {
LABEL_49:
    if ((v6 & 0x10000000000) == 0)
      goto LABEL_50;
    goto LABEL_132;
  }
LABEL_131:
  PB::TextFormatter::format(a2, "lowSenseWithoutAudioZgtimeThreshold", *((float *)this + 42));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x10000000000) == 0)
  {
LABEL_50:
    if ((v6 & 0x20000000000) == 0)
      goto LABEL_51;
    goto LABEL_133;
  }
LABEL_132:
  PB::TextFormatter::format(a2, "lowSenseWithoutAudiodvThreshold1", *((float *)this + 43));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x20000000000) == 0)
  {
LABEL_51:
    if ((v6 & 0x40000000000) == 0)
      goto LABEL_52;
    goto LABEL_134;
  }
LABEL_133:
  PB::TextFormatter::format(a2, "lowSenseWithoutAudiodvThreshold2", *((float *)this + 44));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x40000000000) == 0)
  {
LABEL_52:
    if ((v6 & 0x80000000000) == 0)
      goto LABEL_53;
    goto LABEL_135;
  }
LABEL_134:
  PB::TextFormatter::format(a2, "maxAccelNorm", *((float *)this + 45));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x80000000000) == 0)
  {
LABEL_53:
    if ((v6 & 0x100000000000) == 0)
      goto LABEL_54;
    goto LABEL_136;
  }
LABEL_135:
  PB::TextFormatter::format(a2, "maxAccelNormThreshold", *((float *)this + 46));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x100000000000) == 0)
  {
LABEL_54:
    if ((v6 & 0x200000000000) == 0)
      goto LABEL_55;
    goto LABEL_137;
  }
LABEL_136:
  PB::TextFormatter::format(a2, "maxAccelNormThresholdWithAudio", *((float *)this + 47));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x200000000000) == 0)
  {
LABEL_55:
    if ((v6 & 0x400000000000) == 0)
      goto LABEL_56;
    goto LABEL_138;
  }
LABEL_137:
  PB::TextFormatter::format(a2, "maxAccelNormThresholdWithoutAudio", *((float *)this + 48));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x400000000000) == 0)
  {
LABEL_56:
    if ((v6 & 0x800000000000) == 0)
      goto LABEL_57;
    goto LABEL_139;
  }
LABEL_138:
  PB::TextFormatter::format(a2, "maxAccelNormThresholdWithoutAudioStandaloneBaroNeeded", *((float *)this + 49));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x800000000000) == 0)
  {
LABEL_57:
    if ((v6 & 0x1000000000000) == 0)
      goto LABEL_58;
    goto LABEL_140;
  }
LABEL_139:
  PB::TextFormatter::format(a2, "maxAccelNormThresholdWithoutAudioStandaloneFull", *((float *)this + 50));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x1000000000000) == 0)
  {
LABEL_58:
    if ((v6 & 0x2000000000000) == 0)
      goto LABEL_59;
    goto LABEL_141;
  }
LABEL_140:
  PB::TextFormatter::format(a2, "maxAudioRolloverChaos", *((float *)this + 51));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x2000000000000) == 0)
  {
LABEL_59:
    if ((v6 & 0x4000000000000) == 0)
      goto LABEL_60;
    goto LABEL_142;
  }
LABEL_141:
  PB::TextFormatter::format(a2, "maxAudioRolloverEnergy", *((float *)this + 52));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x4000000000000) == 0)
  {
LABEL_60:
    if ((v6 & 0x8000000000000) == 0)
      goto LABEL_61;
    goto LABEL_143;
  }
LABEL_142:
  PB::TextFormatter::format(a2, "maxAudioRolloverRms", *((float *)this + 53));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x8000000000000) == 0)
  {
LABEL_61:
    if ((v6 & 0x10000000000000) == 0)
      goto LABEL_62;
    goto LABEL_144;
  }
LABEL_143:
  PB::TextFormatter::format(a2, "maxPulse", *((float *)this + 54));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x10000000000000) == 0)
  {
LABEL_62:
    if ((v6 & 0x20000000000000) == 0)
      goto LABEL_63;
    goto LABEL_145;
  }
LABEL_144:
  PB::TextFormatter::format(a2, "numShortAudio", *((_DWORD *)this + 55));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x20000000000000) == 0)
  {
LABEL_63:
    if ((v7 & 0x8000) == 0)
      goto LABEL_64;
    goto LABEL_146;
  }
LABEL_145:
  PB::TextFormatter::format(a2, "peakPressure", *((float *)this + 56));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*((_WORD *)this + 162) & 0x8000) == 0)
  {
LABEL_64:
    if ((v7 & 0x10000) == 0)
      goto LABEL_65;
    goto LABEL_147;
  }
LABEL_146:
  PB::TextFormatter::format(a2, "rolloverCrashDetectorDecision", *((_BYTE *)this + 310));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((v7 & 0x10000) == 0)
  {
LABEL_65:
    if ((v6 & 0x40000000000000) == 0)
      goto LABEL_66;
    goto LABEL_148;
  }
LABEL_147:
  PB::TextFormatter::format(a2, "rolloverCrashDetectorDecisionLowSense", *((_BYTE *)this + 311));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x40000000000000) == 0)
  {
LABEL_66:
    if ((v6 & 0x80000000000000) == 0)
      goto LABEL_67;
    goto LABEL_149;
  }
LABEL_148:
  PB::TextFormatter::format(a2, "rolloverDetectorRegimeDeltaVThreshold1", *((float *)this + 57));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x80000000000000) == 0)
  {
LABEL_67:
    if ((v6 & 0x100000000000000) == 0)
      goto LABEL_68;
    goto LABEL_150;
  }
LABEL_149:
  PB::TextFormatter::format(a2, "rolloverDetectorRegimeDeltaVThreshold1WithAudio", *((float *)this + 58));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x100000000000000) == 0)
  {
LABEL_68:
    if ((v6 & 0x200000000000000) == 0)
      goto LABEL_69;
    goto LABEL_151;
  }
LABEL_150:
  PB::TextFormatter::format(a2, "rolloverDetectorRegimeDeltaVThreshold1WithoutAudio", *((float *)this + 59));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x200000000000000) == 0)
  {
LABEL_69:
    if ((v6 & 0x400000000000000) == 0)
      goto LABEL_70;
    goto LABEL_152;
  }
LABEL_151:
  PB::TextFormatter::format(a2, "rolloverDetectorRegimeDeltaVThreshold1WithoutAudioStandaloneBaroNeeded", *((float *)this + 60));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x400000000000000) == 0)
  {
LABEL_70:
    if ((v6 & 0x800000000000000) == 0)
      goto LABEL_71;
    goto LABEL_153;
  }
LABEL_152:
  PB::TextFormatter::format(a2, "rolloverDetectorRegimeDeltaVThreshold1WithoutAudioStandaloneFull", *((float *)this + 61));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x800000000000000) == 0)
  {
LABEL_71:
    if ((v6 & 0x1000000000000000) == 0)
      goto LABEL_72;
    goto LABEL_154;
  }
LABEL_153:
  PB::TextFormatter::format(a2, "rolloverDetectorRegimeDeltaVThreshold2", *((float *)this + 62));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x1000000000000000) == 0)
  {
LABEL_72:
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_73;
    goto LABEL_155;
  }
LABEL_154:
  PB::TextFormatter::format(a2, "rolloverDetectorRegimeDeltaVThreshold2WithAudio", *((float *)this + 63));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x2000000000000000) == 0)
  {
LABEL_73:
    if ((v6 & 0x4000000000000000) == 0)
      goto LABEL_74;
    goto LABEL_156;
  }
LABEL_155:
  PB::TextFormatter::format(a2, "rolloverDetectorRegimeDeltaVThreshold2WithoutAudio", *((float *)this + 64));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x4000000000000000) == 0)
  {
LABEL_74:
    if ((v6 & 0x8000000000000000) == 0)
      goto LABEL_75;
    goto LABEL_157;
  }
LABEL_156:
  PB::TextFormatter::format(a2, "rolloverDetectorRegimeDeltaVThreshold2WithoutAudioStandaloneBaroNeeded", *((float *)this + 65));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x8000000000000000) == 0)
  {
LABEL_75:
    if ((v7 & 1) == 0)
      goto LABEL_76;
    goto LABEL_158;
  }
LABEL_157:
  PB::TextFormatter::format(a2, "rolloverDetectorRegimeDeltaVThreshold2WithoutAudioStandaloneFull", *((float *)this + 66));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*((_WORD *)this + 162) & 1) == 0)
  {
LABEL_76:
    if ((v7 & 0x20000) == 0)
      goto LABEL_77;
    goto LABEL_159;
  }
LABEL_158:
  PB::TextFormatter::format(a2, "shortAudioMaxPulseThreshold", *((float *)this + 67));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((v7 & 0x20000) == 0)
  {
LABEL_77:
    if ((v7 & 2) == 0)
      goto LABEL_78;
    goto LABEL_160;
  }
LABEL_159:
  PB::TextFormatter::format(a2, "shortAudioMet", *((_BYTE *)this + 312));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*((_WORD *)this + 162) & 2) == 0)
  {
LABEL_78:
    if ((v7 & 4) == 0)
      goto LABEL_79;
    goto LABEL_161;
  }
LABEL_160:
  PB::TextFormatter::format(a2, "shortAudioNumThreshold", *((float *)this + 68));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((*((_WORD *)this + 162) & 4) == 0)
  {
LABEL_79:
    if ((v7 & 0x40000) == 0)
      goto LABEL_80;
    goto LABEL_162;
  }
LABEL_161:
  PB::TextFormatter::format(a2, "shortAudioPeakPressureThreshold", *((float *)this + 69));
  v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v6 = *v5;
  if ((v7 & 0x40000) == 0)
  {
LABEL_80:
    if ((v6 & 1) == 0)
      goto LABEL_81;
    goto LABEL_163;
  }
LABEL_162:
  PB::TextFormatter::format(a2, "strongerAudioRollover", *((_BYTE *)this + 313));
  LOWORD(v7) = *((_WORD *)this + 162);
  if ((*v5 & 1) == 0)
  {
LABEL_81:
    if ((v7 & 8) == 0)
      goto LABEL_82;
    goto LABEL_164;
  }
LABEL_163:
  PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 1));
  LOWORD(v7) = *((_WORD *)this + 162);
  if ((v7 & 8) == 0)
  {
LABEL_82:
    if ((v7 & 0x10) == 0)
      goto LABEL_83;
    goto LABEL_165;
  }
LABEL_164:
  PB::TextFormatter::format(a2, "zgTime", *((float *)this + 70));
  LOWORD(v7) = *((_WORD *)this + 162);
  if ((v7 & 0x10) == 0)
  {
LABEL_83:
    if ((v7 & 0x20) == 0)
      goto LABEL_84;
    goto LABEL_166;
  }
LABEL_165:
  PB::TextFormatter::format(a2, "zgTimeThreshold", *((float *)this + 71));
  LOWORD(v7) = *((_WORD *)this + 162);
  if ((v7 & 0x20) == 0)
  {
LABEL_84:
    if ((v7 & 0x40) == 0)
      goto LABEL_85;
    goto LABEL_167;
  }
LABEL_166:
  PB::TextFormatter::format(a2, "zgTimeThresholdWithAudio", *((float *)this + 72));
  LOWORD(v7) = *((_WORD *)this + 162);
  if ((v7 & 0x40) == 0)
  {
LABEL_85:
    if ((v7 & 0x80) == 0)
      goto LABEL_86;
LABEL_168:
    PB::TextFormatter::format(a2, "zgTimeThresholdWithoutAudioStandaloneBaroNeeded", *((float *)this + 74));
    if ((*((_WORD *)this + 162) & 0x100) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_87;
  }
LABEL_167:
  PB::TextFormatter::format(a2, "zgTimeThresholdWithoutAudio", *((float *)this + 73));
  LOWORD(v7) = *((_WORD *)this + 162);
  if ((v7 & 0x80) != 0)
    goto LABEL_168;
LABEL_86:
  if ((v7 & 0x100) != 0)
LABEL_87:
    PB::TextFormatter::format(a2, "zgTimeThresholdWithoutAudioStandaloneFull", *((float *)this + 75));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaRolloverCrashResult::readFrom(CMMsl::KappaRolloverCrashResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  char *v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  unint64_t v21;
  unint64_t v22;
  int v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  BOOL v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  BOOL v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  BOOL v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  BOOL v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  char v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  BOOL v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  unsigned int v68;
  unint64_t v69;
  unint64_t v70;
  int v71;
  BOOL v72;
  char v73;
  unint64_t v74;
  unint64_t v75;
  int v76;
  BOOL v77;
  char v78;
  unint64_t v79;
  unint64_t v80;
  int v81;
  BOOL v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  int v93;
  unsigned int v94;
  unint64_t v95;
  unint64_t v96;
  int v97;
  BOOL v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  char v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  char v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  char v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  char v159;
  unint64_t v160;
  char v161;
  unint64_t v162;
  char v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  char v168;
  unsigned int v169;
  uint64_t v170;
  unint64_t v171;
  char v172;
  char v173;
  unint64_t v174;
  unint64_t v175;
  int v176;
  BOOL v177;
  uint64_t result;
  char v179;
  unsigned int v180;
  unint64_t v181;
  char v182;
  char v183;
  unsigned int v184;
  unint64_t v185;
  char v186;
  char v187;
  unsigned int v188;
  unint64_t v189;
  char v190;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (char *)this + 316;
    while (1)
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_20;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v21 = v12 >> 3;
      if ((int)(v12 >> 3) <= 100)
      {
        switch((_DWORD)v21)
        {
          case 1:
            *(_QWORD *)v8 |= 1uLL;
            v165 = *((_QWORD *)a2 + 1);
            v166 = *((_QWORD *)a2 + 2);
            v167 = *(_QWORD *)a2;
            if (v165 > 0xFFFFFFFFFFFFFFF5 || v165 + 10 > v166)
            {
              v187 = 0;
              v188 = 0;
              v170 = 0;
              if (v166 <= v165)
                v166 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v166 == v165)
                {
                  v170 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_339;
                }
                v189 = v165 + 1;
                v190 = *(_BYTE *)(v167 + v165);
                *((_QWORD *)a2 + 1) = v189;
                v170 |= (unint64_t)(v190 & 0x7F) << v187;
                if ((v190 & 0x80) == 0)
                  break;
                v187 += 7;
                v165 = v189;
                v15 = v188++ > 8;
                if (v15)
                {
LABEL_318:
                  v170 = 0;
                  goto LABEL_339;
                }
              }
              if (*((_BYTE *)a2 + 24))
                v170 = 0;
            }
            else
            {
              v168 = 0;
              v169 = 0;
              v170 = 0;
              while (1)
              {
                v171 = v165 + 1;
                *((_QWORD *)a2 + 1) = v165 + 1;
                v172 = *(_BYTE *)(v167 + v165);
                v170 |= (unint64_t)(v172 & 0x7F) << v168;
                if ((v172 & 0x80) == 0)
                  break;
                v168 += 7;
                v165 = v171;
                v15 = v169++ > 8;
                if (v15)
                  goto LABEL_318;
              }
            }
LABEL_339:
            *((_QWORD *)this + 1) = v170;
            break;
          case 2:
            v173 = v8[10];
            *((_WORD *)v8 + 4) |= 0x8000u;
            v8[10] = v173;
            v174 = *((_QWORD *)a2 + 1);
            if (v174 >= *((_QWORD *)a2 + 2))
            {
              v177 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v175 = v174 + 1;
              v176 = *(unsigned __int8 *)(*(_QWORD *)a2 + v174);
              *((_QWORD *)a2 + 1) = v175;
              v177 = v176 != 0;
            }
            *((_BYTE *)this + 310) = v177;
            break;
          case 3:
            v23 = *((unsigned __int16 *)v8 + 4);
            v24 = (v23 | (v8[10] << 16) | 0x10000u) >> 16;
            *((_WORD *)v8 + 4) = v23;
            v8[10] = v24;
            v25 = *((_QWORD *)a2 + 1);
            if (v25 >= *((_QWORD *)a2 + 2))
            {
              v28 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v26 = v25 + 1;
              v27 = *(unsigned __int8 *)(*(_QWORD *)a2 + v25);
              *((_QWORD *)a2 + 1) = v26;
              v28 = v27 != 0;
            }
            *((_BYTE *)this + 311) = v28;
            break;
          default:
LABEL_278:
            result = PB::Reader::skip(a2, v21, v12 & 7, 0);
            if (!(_DWORD)result)
              return result;
            break;
        }
      }
      else
      {
        switch((int)v21)
        {
          case 101:
            *(_QWORD *)v8 |= 0x40000000000uLL;
            v22 = *((_QWORD *)a2 + 1);
            if (v22 > 0xFFFFFFFFFFFFFFFBLL || v22 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 45) = *(_DWORD *)(*(_QWORD *)a2 + v22);
            goto LABEL_322;
          case 102:
            *(_QWORD *)v8 |= 0x40000uLL;
            v29 = *((_QWORD *)a2 + 1);
            if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v29);
            goto LABEL_322;
          case 103:
            v30 = v8[10];
            *((_WORD *)v8 + 4) |= 8u;
            v8[10] = v30;
            v31 = *((_QWORD *)a2 + 1);
            if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 70) = *(_DWORD *)(*(_QWORD *)a2 + v31);
            goto LABEL_322;
          case 104:
            v32 = v8[10];
            *((_WORD *)v8 + 4) |= 0x2000u;
            v8[10] = v32;
            v33 = *((_QWORD *)a2 + 1);
            if (v33 >= *((_QWORD *)a2 + 2))
            {
              v36 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v34 = v33 + 1;
              v35 = *(unsigned __int8 *)(*(_QWORD *)a2 + v33);
              *((_QWORD *)a2 + 1) = v34;
              v36 = v35 != 0;
            }
            *((_BYTE *)this + 308) = v36;
            goto LABEL_323;
          case 105:
            v37 = v8[10];
            *((_WORD *)v8 + 4) |= 0x400u;
            v8[10] = v37;
            v38 = *((_QWORD *)a2 + 1);
            if (v38 >= *((_QWORD *)a2 + 2))
            {
              v41 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v39 = v38 + 1;
              v40 = *(unsigned __int8 *)(*(_QWORD *)a2 + v38);
              *((_QWORD *)a2 + 1) = v39;
              v41 = v40 != 0;
            }
            *((_BYTE *)this + 305) = v41;
            goto LABEL_323;
          case 106:
            v42 = v8[10];
            *((_WORD *)v8 + 4) |= 0x200u;
            v8[10] = v42;
            v43 = *((_QWORD *)a2 + 1);
            if (v43 >= *((_QWORD *)a2 + 2))
            {
              v46 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v44 = v43 + 1;
              v45 = *(unsigned __int8 *)(*(_QWORD *)a2 + v43);
              *((_QWORD *)a2 + 1) = v44;
              v46 = v45 != 0;
            }
            *((_BYTE *)this + 304) = v46;
            goto LABEL_323;
          case 107:
            *(_QWORD *)v8 |= 0x2000000uLL;
            v47 = *((_QWORD *)a2 + 1);
            v48 = *((_QWORD *)a2 + 2);
            v49 = *(_QWORD *)a2;
            if (v47 <= 0xFFFFFFFFFFFFFFF5 && v47 + 10 <= v48)
            {
              v50 = 0;
              v51 = 0;
              v52 = 0;
              do
              {
                v53 = v47 + 1;
                *((_QWORD *)a2 + 1) = v47 + 1;
                v54 = *(_BYTE *)(v49 + v47);
                v52 |= (unint64_t)(v54 & 0x7F) << v50;
                if ((v54 & 0x80) == 0)
                  goto LABEL_331;
                v50 += 7;
                v47 = v53;
                v15 = v51++ > 8;
              }
              while (!v15);
LABEL_294:
              LODWORD(v52) = 0;
              goto LABEL_331;
            }
            v179 = 0;
            v180 = 0;
            v52 = 0;
            if (v48 <= v47)
              v48 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v48 == v47)
              {
                LODWORD(v52) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v181 = v47 + 1;
                v182 = *(_BYTE *)(v49 + v47);
                *((_QWORD *)a2 + 1) = v181;
                v52 |= (unint64_t)(v182 & 0x7F) << v179;
                if (v182 < 0)
                {
                  v179 += 7;
                  v47 = v181;
                  v15 = v180++ > 8;
                  if (v15)
                    goto LABEL_294;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v52) = 0;
              }
              break;
            }
LABEL_331:
            *((_DWORD *)this + 28) = v52;
            goto LABEL_323;
          case 108:
            v55 = v8[10];
            *((_WORD *)v8 + 4) |= 0x1000u;
            v8[10] = v55;
            v56 = *((_QWORD *)a2 + 1);
            if (v56 >= *((_QWORD *)a2 + 2))
            {
              v59 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v57 = v56 + 1;
              v58 = *(unsigned __int8 *)(*(_QWORD *)a2 + v56);
              *((_QWORD *)a2 + 1) = v57;
              v59 = v58 != 0;
            }
            *((_BYTE *)this + 307) = v59;
            goto LABEL_323;
          case 109:
            *(_QWORD *)v8 |= 0x1000000uLL;
            v60 = *((_QWORD *)a2 + 1);
            if (v60 > 0xFFFFFFFFFFFFFFFBLL || v60 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v60);
            goto LABEL_322;
          case 110:
            *(_QWORD *)v8 |= 0x2000000000000uLL;
            v61 = *((_QWORD *)a2 + 1);
            if (v61 > 0xFFFFFFFFFFFFFFFBLL || v61 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 52) = *(_DWORD *)(*(_QWORD *)a2 + v61);
            goto LABEL_322;
          case 111:
            *(_QWORD *)v8 |= 0x1000000000000uLL;
            v62 = *((_QWORD *)a2 + 1);
            if (v62 > 0xFFFFFFFFFFFFFFFBLL || v62 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 51) = *(_DWORD *)(*(_QWORD *)a2 + v62);
            goto LABEL_322;
          case 112:
            *(_QWORD *)v8 |= 0x4000000000000uLL;
            v63 = *((_QWORD *)a2 + 1);
            if (v63 > 0xFFFFFFFFFFFFFFFBLL || v63 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 53) = *(_DWORD *)(*(_QWORD *)a2 + v63);
            goto LABEL_322;
          case 113:
            *(_QWORD *)v8 |= 0x40uLL;
            v64 = *((_QWORD *)a2 + 1);
            if (v64 > 0xFFFFFFFFFFFFFFFBLL || v64 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v64);
            goto LABEL_322;
          case 114:
            *(_QWORD *)v8 |= 2uLL;
            v65 = *((_QWORD *)a2 + 1);
            if (v65 > 0xFFFFFFFFFFFFFFFBLL || v65 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v65);
            goto LABEL_322;
          case 115:
            *(_QWORD *)v8 |= 0x8000uLL;
            v66 = *((_QWORD *)a2 + 1);
            if (v66 > 0xFFFFFFFFFFFFFFFBLL || v66 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v66);
            goto LABEL_322;
          case 116:
            v67 = *((unsigned __int16 *)v8 + 4);
            v68 = (v67 | (v8[10] << 16) | 0x40000u) >> 16;
            *((_WORD *)v8 + 4) = v67;
            v8[10] = v68;
            v69 = *((_QWORD *)a2 + 1);
            if (v69 >= *((_QWORD *)a2 + 2))
            {
              v72 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v70 = v69 + 1;
              v71 = *(unsigned __int8 *)(*(_QWORD *)a2 + v69);
              *((_QWORD *)a2 + 1) = v70;
              v72 = v71 != 0;
            }
            *((_BYTE *)this + 313) = v72;
            goto LABEL_323;
          case 117:
            v73 = v8[10];
            *((_WORD *)v8 + 4) |= 0x800u;
            v8[10] = v73;
            v74 = *((_QWORD *)a2 + 1);
            if (v74 >= *((_QWORD *)a2 + 2))
            {
              v77 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v75 = v74 + 1;
              v76 = *(unsigned __int8 *)(*(_QWORD *)a2 + v74);
              *((_QWORD *)a2 + 1) = v75;
              v77 = v76 != 0;
            }
            *((_BYTE *)this + 306) = v77;
            goto LABEL_323;
          case 118:
            v78 = v8[10];
            *((_WORD *)v8 + 4) |= 0x4000u;
            v8[10] = v78;
            v79 = *((_QWORD *)a2 + 1);
            if (v79 >= *((_QWORD *)a2 + 2))
            {
              v82 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v80 = v79 + 1;
              v81 = *(unsigned __int8 *)(*(_QWORD *)a2 + v79);
              *((_QWORD *)a2 + 1) = v80;
              v82 = v81 != 0;
            }
            *((_BYTE *)this + 309) = v82;
            goto LABEL_323;
          case 119:
            *(_QWORD *)v8 |= 0x20000000000000uLL;
            v83 = *((_QWORD *)a2 + 1);
            if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 56) = *(_DWORD *)(*(_QWORD *)a2 + v83);
            goto LABEL_322;
          case 120:
            *(_QWORD *)v8 |= 0x8000000000000uLL;
            v84 = *((_QWORD *)a2 + 1);
            if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 54) = *(_DWORD *)(*(_QWORD *)a2 + v84);
            goto LABEL_322;
          case 121:
            *(_QWORD *)v8 |= 0x10000000000000uLL;
            v85 = *((_QWORD *)a2 + 1);
            v86 = *((_QWORD *)a2 + 2);
            v87 = *(_QWORD *)a2;
            if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
            {
              v88 = 0;
              v89 = 0;
              v90 = 0;
              do
              {
                v91 = v85 + 1;
                *((_QWORD *)a2 + 1) = v85 + 1;
                v92 = *(_BYTE *)(v87 + v85);
                v90 |= (unint64_t)(v92 & 0x7F) << v88;
                if ((v92 & 0x80) == 0)
                  goto LABEL_335;
                v88 += 7;
                v85 = v91;
                v15 = v89++ > 8;
              }
              while (!v15);
LABEL_309:
              LODWORD(v90) = 0;
              goto LABEL_335;
            }
            v183 = 0;
            v184 = 0;
            v90 = 0;
            if (v86 <= v85)
              v86 = *((_QWORD *)a2 + 1);
            break;
          case 122:
            v93 = *((unsigned __int16 *)v8 + 4);
            v94 = (v93 | (v8[10] << 16) | 0x20000u) >> 16;
            *((_WORD *)v8 + 4) = v93;
            v8[10] = v94;
            v95 = *((_QWORD *)a2 + 1);
            if (v95 >= *((_QWORD *)a2 + 2))
            {
              v98 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v96 = v95 + 1;
              v97 = *(unsigned __int8 *)(*(_QWORD *)a2 + v95);
              *((_QWORD *)a2 + 1) = v96;
              v98 = v97 != 0;
            }
            *((_BYTE *)this + 312) = v98;
            goto LABEL_323;
          case 201:
            *(_QWORD *)v8 |= 0x40000000000000uLL;
            v99 = *((_QWORD *)a2 + 1);
            if (v99 > 0xFFFFFFFFFFFFFFFBLL || v99 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 57) = *(_DWORD *)(*(_QWORD *)a2 + v99);
            goto LABEL_322;
          case 202:
            *(_QWORD *)v8 |= 0x800000000000000uLL;
            v100 = *((_QWORD *)a2 + 1);
            if (v100 > 0xFFFFFFFFFFFFFFFBLL || v100 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 62) = *(_DWORD *)(*(_QWORD *)a2 + v100);
            goto LABEL_322;
          case 203:
            *(_QWORD *)v8 |= 0x80000uLL;
            v101 = *((_QWORD *)a2 + 1);
            if (v101 > 0xFFFFFFFFFFFFFFFBLL || v101 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v101);
            goto LABEL_322;
          case 204:
            *(_QWORD *)v8 |= 0x80000000000uLL;
            v102 = *((_QWORD *)a2 + 1);
            if (v102 > 0xFFFFFFFFFFFFFFFBLL || v102 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 46) = *(_DWORD *)(*(_QWORD *)a2 + v102);
            goto LABEL_322;
          case 205:
            v103 = v8[10];
            *((_WORD *)v8 + 4) |= 0x10u;
            v8[10] = v103;
            v104 = *((_QWORD *)a2 + 1);
            if (v104 > 0xFFFFFFFFFFFFFFFBLL || v104 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 71) = *(_DWORD *)(*(_QWORD *)a2 + v104);
            goto LABEL_322;
          case 206:
            *(_QWORD *)v8 |= 0x80000000000000uLL;
            v105 = *((_QWORD *)a2 + 1);
            if (v105 > 0xFFFFFFFFFFFFFFFBLL || v105 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 58) = *(_DWORD *)(*(_QWORD *)a2 + v105);
            goto LABEL_322;
          case 207:
            *(_QWORD *)v8 |= 0x1000000000000000uLL;
            v106 = *((_QWORD *)a2 + 1);
            if (v106 > 0xFFFFFFFFFFFFFFFBLL || v106 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 63) = *(_DWORD *)(*(_QWORD *)a2 + v106);
            goto LABEL_322;
          case 208:
            *(_QWORD *)v8 |= 0x100000uLL;
            v107 = *((_QWORD *)a2 + 1);
            if (v107 > 0xFFFFFFFFFFFFFFFBLL || v107 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v107);
            goto LABEL_322;
          case 209:
            *(_QWORD *)v8 |= 0x100000000000uLL;
            v108 = *((_QWORD *)a2 + 1);
            if (v108 > 0xFFFFFFFFFFFFFFFBLL || v108 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 47) = *(_DWORD *)(*(_QWORD *)a2 + v108);
            goto LABEL_322;
          case 210:
            v109 = v8[10];
            *((_WORD *)v8 + 4) |= 0x20u;
            v8[10] = v109;
            v110 = *((_QWORD *)a2 + 1);
            if (v110 > 0xFFFFFFFFFFFFFFFBLL || v110 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 72) = *(_DWORD *)(*(_QWORD *)a2 + v110);
            goto LABEL_322;
          case 231:
            *(_QWORD *)v8 |= 0x100000000000000uLL;
            v111 = *((_QWORD *)a2 + 1);
            if (v111 > 0xFFFFFFFFFFFFFFFBLL || v111 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 59) = *(_DWORD *)(*(_QWORD *)a2 + v111);
            goto LABEL_322;
          case 232:
            *(_QWORD *)v8 |= 0x2000000000000000uLL;
            v112 = *((_QWORD *)a2 + 1);
            if (v112 > 0xFFFFFFFFFFFFFFFBLL || v112 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 64) = *(_DWORD *)(*(_QWORD *)a2 + v112);
            goto LABEL_322;
          case 233:
            *(_QWORD *)v8 |= 0x200000uLL;
            v113 = *((_QWORD *)a2 + 1);
            if (v113 > 0xFFFFFFFFFFFFFFFBLL || v113 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v113);
            goto LABEL_322;
          case 234:
            *(_QWORD *)v8 |= 0x200000000000uLL;
            v114 = *((_QWORD *)a2 + 1);
            if (v114 > 0xFFFFFFFFFFFFFFFBLL || v114 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 48) = *(_DWORD *)(*(_QWORD *)a2 + v114);
            goto LABEL_322;
          case 235:
            v115 = v8[10];
            *((_WORD *)v8 + 4) |= 0x40u;
            v8[10] = v115;
            v116 = *((_QWORD *)a2 + 1);
            if (v116 > 0xFFFFFFFFFFFFFFFBLL || v116 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 73) = *(_DWORD *)(*(_QWORD *)a2 + v116);
            goto LABEL_322;
          case 236:
            *(_QWORD *)v8 |= 0x80uLL;
            v117 = *((_QWORD *)a2 + 1);
            if (v117 > 0xFFFFFFFFFFFFFFFBLL || v117 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v117);
            goto LABEL_322;
          case 237:
            *(_QWORD *)v8 |= 0x400uLL;
            v118 = *((_QWORD *)a2 + 1);
            if (v118 > 0xFFFFFFFFFFFFFFFBLL || v118 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v118);
            goto LABEL_322;
          case 238:
            *(_QWORD *)v8 |= 0x200uLL;
            v119 = *((_QWORD *)a2 + 1);
            if (v119 > 0xFFFFFFFFFFFFFFFBLL || v119 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v119);
            goto LABEL_322;
          case 239:
            *(_QWORD *)v8 |= 0x100uLL;
            v120 = *((_QWORD *)a2 + 1);
            if (v120 > 0xFFFFFFFFFFFFFFFBLL || v120 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v120);
            goto LABEL_322;
          case 240:
            *(_QWORD *)v8 |= 4uLL;
            v121 = *((_QWORD *)a2 + 1);
            if (v121 > 0xFFFFFFFFFFFFFFFBLL || v121 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v121);
            goto LABEL_322;
          case 241:
            *(_QWORD *)v8 |= 0x20uLL;
            v122 = *((_QWORD *)a2 + 1);
            if (v122 > 0xFFFFFFFFFFFFFFFBLL || v122 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v122);
            goto LABEL_322;
          case 242:
            *(_QWORD *)v8 |= 0x10uLL;
            v123 = *((_QWORD *)a2 + 1);
            if (v123 > 0xFFFFFFFFFFFFFFFBLL || v123 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v123);
            goto LABEL_322;
          case 243:
            *(_QWORD *)v8 |= 8uLL;
            v124 = *((_QWORD *)a2 + 1);
            if (v124 > 0xFFFFFFFFFFFFFFFBLL || v124 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v124);
            goto LABEL_322;
          case 244:
            *(_QWORD *)v8 |= 0x800uLL;
            v125 = *((_QWORD *)a2 + 1);
            if (v125 > 0xFFFFFFFFFFFFFFFBLL || v125 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v125);
            goto LABEL_322;
          case 245:
            *(_QWORD *)v8 |= 0x4000uLL;
            v126 = *((_QWORD *)a2 + 1);
            if (v126 > 0xFFFFFFFFFFFFFFFBLL || v126 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v126);
            goto LABEL_322;
          case 246:
            *(_QWORD *)v8 |= 0x2000uLL;
            v127 = *((_QWORD *)a2 + 1);
            if (v127 > 0xFFFFFFFFFFFFFFFBLL || v127 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v127);
            goto LABEL_322;
          case 247:
            *(_QWORD *)v8 |= 0x1000uLL;
            v128 = *((_QWORD *)a2 + 1);
            if (v128 > 0xFFFFFFFFFFFFFFFBLL || v128 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v128);
            goto LABEL_322;
          case 248:
            *(_QWORD *)v8 |= 0x10000uLL;
            v129 = *((_QWORD *)a2 + 1);
            if (v129 > 0xFFFFFFFFFFFFFFFBLL || v129 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v129);
            goto LABEL_322;
          case 249:
            *(_QWORD *)v8 |= 0x20000uLL;
            v130 = *((_QWORD *)a2 + 1);
            if (v130 > 0xFFFFFFFFFFFFFFFBLL || v130 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v130);
            goto LABEL_322;
          case 250:
            *(_QWORD *)v8 |= 0x200000000000000uLL;
            v131 = *((_QWORD *)a2 + 1);
            if (v131 > 0xFFFFFFFFFFFFFFFBLL || v131 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 60) = *(_DWORD *)(*(_QWORD *)a2 + v131);
            goto LABEL_322;
          case 251:
            *(_QWORD *)v8 |= 0x4000000000000000uLL;
            v132 = *((_QWORD *)a2 + 1);
            if (v132 > 0xFFFFFFFFFFFFFFFBLL || v132 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 65) = *(_DWORD *)(*(_QWORD *)a2 + v132);
            goto LABEL_322;
          case 252:
            *(_QWORD *)v8 |= 0x400000uLL;
            v133 = *((_QWORD *)a2 + 1);
            if (v133 > 0xFFFFFFFFFFFFFFFBLL || v133 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v133);
            goto LABEL_322;
          case 253:
            *(_QWORD *)v8 |= 0x400000000000uLL;
            v134 = *((_QWORD *)a2 + 1);
            if (v134 > 0xFFFFFFFFFFFFFFFBLL || v134 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 49) = *(_DWORD *)(*(_QWORD *)a2 + v134);
            goto LABEL_322;
          case 254:
            v135 = v8[10];
            *((_WORD *)v8 + 4) |= 0x80u;
            v8[10] = v135;
            v136 = *((_QWORD *)a2 + 1);
            if (v136 > 0xFFFFFFFFFFFFFFFBLL || v136 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 74) = *(_DWORD *)(*(_QWORD *)a2 + v136);
            goto LABEL_322;
          case 255:
            *(_QWORD *)v8 |= 0x400000000000000uLL;
            v137 = *((_QWORD *)a2 + 1);
            if (v137 > 0xFFFFFFFFFFFFFFFBLL || v137 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 61) = *(_DWORD *)(*(_QWORD *)a2 + v137);
            goto LABEL_322;
          case 256:
            *(_QWORD *)v8 |= 0x8000000000000000;
            v138 = *((_QWORD *)a2 + 1);
            if (v138 > 0xFFFFFFFFFFFFFFFBLL || v138 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 66) = *(_DWORD *)(*(_QWORD *)a2 + v138);
            goto LABEL_322;
          case 257:
            *(_QWORD *)v8 |= 0x800000uLL;
            v139 = *((_QWORD *)a2 + 1);
            if (v139 > 0xFFFFFFFFFFFFFFFBLL || v139 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v139);
            goto LABEL_322;
          case 258:
            *(_QWORD *)v8 |= 0x800000000000uLL;
            v140 = *((_QWORD *)a2 + 1);
            if (v140 > 0xFFFFFFFFFFFFFFFBLL || v140 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 50) = *(_DWORD *)(*(_QWORD *)a2 + v140);
            goto LABEL_322;
          case 259:
            v141 = v8[10];
            *((_WORD *)v8 + 4) |= 0x100u;
            v8[10] = v141;
            v142 = *((_QWORD *)a2 + 1);
            if (v142 > 0xFFFFFFFFFFFFFFFBLL || v142 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 75) = *(_DWORD *)(*(_QWORD *)a2 + v142);
            goto LABEL_322;
          case 260:
            *(_QWORD *)v8 |= (unint64_t)&_mh_execute_header;
            v143 = *((_QWORD *)a2 + 1);
            if (v143 > 0xFFFFFFFFFFFFFFFBLL || v143 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 35) = *(_DWORD *)(*(_QWORD *)a2 + v143);
            goto LABEL_322;
          case 261:
            *(_QWORD *)v8 |= 0x200000000uLL;
            v144 = *((_QWORD *)a2 + 1);
            if (v144 > 0xFFFFFFFFFFFFFFFBLL || v144 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 36) = *(_DWORD *)(*(_QWORD *)a2 + v144);
            goto LABEL_322;
          case 262:
            *(_QWORD *)v8 |= 0x8000000uLL;
            v145 = *((_QWORD *)a2 + 1);
            if (v145 > 0xFFFFFFFFFFFFFFFBLL || v145 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 30) = *(_DWORD *)(*(_QWORD *)a2 + v145);
            goto LABEL_322;
          case 263:
            *(_QWORD *)v8 |= 0x4000000uLL;
            v146 = *((_QWORD *)a2 + 1);
            if (v146 > 0xFFFFFFFFFFFFFFFBLL || v146 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v146);
            goto LABEL_322;
          case 264:
            *(_QWORD *)v8 |= 0x80000000uLL;
            v147 = *((_QWORD *)a2 + 1);
            if (v147 > 0xFFFFFFFFFFFFFFFBLL || v147 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 34) = *(_DWORD *)(*(_QWORD *)a2 + v147);
            goto LABEL_322;
          case 265:
            *(_QWORD *)v8 |= 0x40000000uLL;
            v148 = *((_QWORD *)a2 + 1);
            if (v148 > 0xFFFFFFFFFFFFFFFBLL || v148 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 33) = *(_DWORD *)(*(_QWORD *)a2 + v148);
            goto LABEL_322;
          case 266:
            *(_QWORD *)v8 |= 0x20000000uLL;
            v149 = *((_QWORD *)a2 + 1);
            if (v149 > 0xFFFFFFFFFFFFFFFBLL || v149 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 32) = *(_DWORD *)(*(_QWORD *)a2 + v149);
            goto LABEL_322;
          case 267:
            *(_QWORD *)v8 |= 0x10000000uLL;
            v150 = *((_QWORD *)a2 + 1);
            if (v150 > 0xFFFFFFFFFFFFFFFBLL || v150 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 31) = *(_DWORD *)(*(_QWORD *)a2 + v150);
            goto LABEL_322;
          case 268:
            *(_QWORD *)v8 |= 0x10000000000uLL;
            v151 = *((_QWORD *)a2 + 1);
            if (v151 > 0xFFFFFFFFFFFFFFFBLL || v151 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 43) = *(_DWORD *)(*(_QWORD *)a2 + v151);
            goto LABEL_322;
          case 269:
            *(_QWORD *)v8 |= 0x20000000000uLL;
            v152 = *((_QWORD *)a2 + 1);
            if (v152 > 0xFFFFFFFFFFFFFFFBLL || v152 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 44) = *(_DWORD *)(*(_QWORD *)a2 + v152);
            goto LABEL_322;
          case 270:
            *(_QWORD *)v8 |= 0x800000000uLL;
            v153 = *((_QWORD *)a2 + 1);
            if (v153 > 0xFFFFFFFFFFFFFFFBLL || v153 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 38) = *(_DWORD *)(*(_QWORD *)a2 + v153);
            goto LABEL_322;
          case 271:
            *(_QWORD *)v8 |= 0x400000000uLL;
            v154 = *((_QWORD *)a2 + 1);
            if (v154 > 0xFFFFFFFFFFFFFFFBLL || v154 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 37) = *(_DWORD *)(*(_QWORD *)a2 + v154);
            goto LABEL_322;
          case 272:
            *(_QWORD *)v8 |= 0x8000000000uLL;
            v155 = *((_QWORD *)a2 + 1);
            if (v155 > 0xFFFFFFFFFFFFFFFBLL || v155 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 42) = *(_DWORD *)(*(_QWORD *)a2 + v155);
            goto LABEL_322;
          case 273:
            *(_QWORD *)v8 |= 0x4000000000uLL;
            v156 = *((_QWORD *)a2 + 1);
            if (v156 > 0xFFFFFFFFFFFFFFFBLL || v156 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 41) = *(_DWORD *)(*(_QWORD *)a2 + v156);
            goto LABEL_322;
          case 274:
            *(_QWORD *)v8 |= 0x2000000000uLL;
            v157 = *((_QWORD *)a2 + 1);
            if (v157 > 0xFFFFFFFFFFFFFFFBLL || v157 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 40) = *(_DWORD *)(*(_QWORD *)a2 + v157);
            goto LABEL_322;
          case 275:
            *(_QWORD *)v8 |= 0x1000000000uLL;
            v158 = *((_QWORD *)a2 + 1);
            if (v158 > 0xFFFFFFFFFFFFFFFBLL || v158 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 39) = *(_DWORD *)(*(_QWORD *)a2 + v158);
            goto LABEL_322;
          case 276:
            v159 = v8[10];
            *((_WORD *)v8 + 4) |= 2u;
            v8[10] = v159;
            v160 = *((_QWORD *)a2 + 1);
            if (v160 > 0xFFFFFFFFFFFFFFFBLL || v160 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 68) = *(_DWORD *)(*(_QWORD *)a2 + v160);
            goto LABEL_322;
          case 277:
            v161 = v8[10];
            *((_WORD *)v8 + 4) |= 4u;
            v8[10] = v161;
            v162 = *((_QWORD *)a2 + 1);
            if (v162 > 0xFFFFFFFFFFFFFFFBLL || v162 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_268;
            *((_DWORD *)this + 69) = *(_DWORD *)(*(_QWORD *)a2 + v162);
            goto LABEL_322;
          case 278:
            v163 = v8[10];
            *((_WORD *)v8 + 4) |= 1u;
            v8[10] = v163;
            v164 = *((_QWORD *)a2 + 1);
            if (v164 <= 0xFFFFFFFFFFFFFFFBLL && v164 + 4 <= *((_QWORD *)a2 + 2))
            {
              *((_DWORD *)this + 67) = *(_DWORD *)(*(_QWORD *)a2 + v164);
LABEL_322:
              *((_QWORD *)a2 + 1) += 4;
            }
            else
            {
LABEL_268:
              *((_BYTE *)a2 + 24) = 1;
            }
            goto LABEL_323;
          default:
            goto LABEL_278;
        }
        while (1)
        {
          if (v86 == v85)
          {
            LODWORD(v90) = 0;
            *((_BYTE *)a2 + 24) = 1;
            goto LABEL_335;
          }
          v185 = v85 + 1;
          v186 = *(_BYTE *)(v87 + v85);
          *((_QWORD *)a2 + 1) = v185;
          v90 |= (unint64_t)(v186 & 0x7F) << v183;
          if ((v186 & 0x80) == 0)
            break;
          v183 += 7;
          v85 = v185;
          v15 = v184++ > 8;
          if (v15)
            goto LABEL_309;
        }
        if (*((_BYTE *)a2 + 24))
          LODWORD(v90) = 0;
LABEL_335:
        *((_DWORD *)this + 55) = v90;
      }
LABEL_323:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)a2 + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        v12 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaRolloverCrashResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  int v7;

  v3 = this;
  v4 = (uint64_t *)(this + 316);
  v5 = *(_QWORD *)(this + 316);
  if ((v5 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 8), 1u);
    v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
    v5 = *v4;
    if ((v4[1] & 0x8000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = *(unsigned __int16 *)(this + 324);
  v7 = v6 | (*(unsigned __int8 *)(this + 326) << 16);
  if ((v6 & 0x8000) != 0)
  {
LABEL_5:
    this = PB::Writer::write(a2, *(_BYTE *)(v3 + 310), 2u);
    v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
    v5 = *v4;
  }
LABEL_6:
  if ((v7 & 0x10000) != 0)
  {
    this = PB::Writer::write(a2, *(_BYTE *)(v3 + 311), 3u);
    v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
    v5 = *v4;
    if ((*v4 & 0x40000000000) == 0)
    {
LABEL_8:
      if ((v5 & 0x40000) == 0)
        goto LABEL_9;
      goto LABEL_90;
    }
  }
  else if ((v5 & 0x40000000000) == 0)
  {
    goto LABEL_8;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 180), 0x65u);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 0x40000) == 0)
  {
LABEL_9:
    if ((v7 & 8) == 0)
      goto LABEL_10;
    goto LABEL_91;
  }
LABEL_90:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 0x66u);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((v4[1] & 8) == 0)
  {
LABEL_10:
    if ((v7 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_92;
  }
LABEL_91:
  this = PB::Writer::write(a2, *(float *)(v3 + 280), 0x67u);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((v4[1] & 0x2000) == 0)
  {
LABEL_11:
    if ((v7 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_93;
  }
LABEL_92:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 308), 0x68u);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((v4[1] & 0x400) == 0)
  {
LABEL_12:
    if ((v7 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_94;
  }
LABEL_93:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 305), 0x69u);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((v4[1] & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_14;
    goto LABEL_95;
  }
LABEL_94:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 304), 0x6Au);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 0x2000000) == 0)
  {
LABEL_14:
    if ((v7 & 0x1000) == 0)
      goto LABEL_15;
    goto LABEL_96;
  }
LABEL_95:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 112), 0x6Bu);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((v4[1] & 0x1000) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_16;
    goto LABEL_97;
  }
LABEL_96:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 307), 0x6Cu);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000000000000) == 0)
      goto LABEL_17;
    goto LABEL_98;
  }
LABEL_97:
  this = PB::Writer::write(a2, *(float *)(v3 + 108), 0x6Du);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 0x2000000000000) == 0)
  {
LABEL_17:
    if ((v5 & 0x1000000000000) == 0)
      goto LABEL_18;
    goto LABEL_99;
  }
LABEL_98:
  this = PB::Writer::write(a2, *(float *)(v3 + 208), 0x6Eu);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 0x1000000000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000000000000) == 0)
      goto LABEL_19;
    goto LABEL_100;
  }
LABEL_99:
  this = PB::Writer::write(a2, *(float *)(v3 + 204), 0x6Fu);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 0x4000000000000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40) == 0)
      goto LABEL_20;
    goto LABEL_101;
  }
LABEL_100:
  this = PB::Writer::write(a2, *(float *)(v3 + 212), 0x70u);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 0x40) == 0)
  {
LABEL_20:
    if ((v5 & 2) == 0)
      goto LABEL_21;
    goto LABEL_102;
  }
LABEL_101:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 0x71u);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 2) == 0)
  {
LABEL_21:
    if ((v5 & 0x8000) == 0)
      goto LABEL_22;
    goto LABEL_103;
  }
LABEL_102:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 0x72u);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 0x8000) == 0)
  {
LABEL_22:
    if ((v7 & 0x40000) == 0)
      goto LABEL_23;
    goto LABEL_104;
  }
LABEL_103:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0x73u);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((v7 & 0x40000) == 0)
  {
LABEL_23:
    if ((v7 & 0x800) == 0)
      goto LABEL_24;
    goto LABEL_105;
  }
LABEL_104:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 313), 0x74u);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((v4[1] & 0x800) == 0)
  {
LABEL_24:
    if ((v7 & 0x4000) == 0)
      goto LABEL_25;
    goto LABEL_106;
  }
LABEL_105:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 306), 0x75u);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((v4[1] & 0x4000) == 0)
  {
LABEL_25:
    if ((v5 & 0x20000000000000) == 0)
      goto LABEL_26;
    goto LABEL_107;
  }
LABEL_106:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 309), 0x76u);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 0x20000000000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x8000000000000) == 0)
      goto LABEL_27;
    goto LABEL_108;
  }
LABEL_107:
  this = PB::Writer::write(a2, *(float *)(v3 + 224), 0x77u);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 0x8000000000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x10000000000000) == 0)
      goto LABEL_28;
    goto LABEL_109;
  }
LABEL_108:
  this = PB::Writer::write(a2, *(float *)(v3 + 216), 0x78u);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 0x10000000000000) == 0)
  {
LABEL_28:
    if ((v7 & 0x20000) == 0)
      goto LABEL_29;
    goto LABEL_110;
  }
LABEL_109:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 220), 0x79u);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((v7 & 0x20000) == 0)
  {
LABEL_29:
    if ((v5 & 0x40000000000000) == 0)
      goto LABEL_30;
    goto LABEL_111;
  }
LABEL_110:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 312), 0x7Au);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x40000000000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x800000000000000) == 0)
      goto LABEL_31;
    goto LABEL_112;
  }
LABEL_111:
  this = PB::Writer::write(a2, *(float *)(v3 + 228), 0xC9u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x800000000000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x80000) == 0)
      goto LABEL_32;
    goto LABEL_113;
  }
LABEL_112:
  this = PB::Writer::write(a2, *(float *)(v3 + 248), 0xCAu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x80000) == 0)
  {
LABEL_32:
    if ((v5 & 0x80000000000) == 0)
      goto LABEL_33;
    goto LABEL_114;
  }
LABEL_113:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 0xCBu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x80000000000) == 0)
  {
LABEL_33:
    if ((v7 & 0x10) == 0)
      goto LABEL_34;
    goto LABEL_115;
  }
LABEL_114:
  this = PB::Writer::write(a2, *(float *)(v3 + 184), 0xCCu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((v7 & 0x10) == 0)
  {
LABEL_34:
    if ((v5 & 0x80000000000000) == 0)
      goto LABEL_35;
    goto LABEL_116;
  }
LABEL_115:
  this = PB::Writer::write(a2, *(float *)(v3 + 284), 0xCDu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x80000000000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x1000000000000000) == 0)
      goto LABEL_36;
    goto LABEL_117;
  }
LABEL_116:
  this = PB::Writer::write(a2, *(float *)(v3 + 232), 0xCEu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x1000000000000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x100000) == 0)
      goto LABEL_37;
    goto LABEL_118;
  }
LABEL_117:
  this = PB::Writer::write(a2, *(float *)(v3 + 252), 0xCFu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x100000) == 0)
  {
LABEL_37:
    if ((v5 & 0x100000000000) == 0)
      goto LABEL_38;
    goto LABEL_119;
  }
LABEL_118:
  this = PB::Writer::write(a2, *(float *)(v3 + 92), 0xD0u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x100000000000) == 0)
  {
LABEL_38:
    if ((v7 & 0x20) == 0)
      goto LABEL_39;
    goto LABEL_120;
  }
LABEL_119:
  this = PB::Writer::write(a2, *(float *)(v3 + 188), 0xD1u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((v7 & 0x20) == 0)
  {
LABEL_39:
    if ((v5 & 0x100000000000000) == 0)
      goto LABEL_40;
    goto LABEL_121;
  }
LABEL_120:
  this = PB::Writer::write(a2, *(float *)(v3 + 288), 0xD2u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x100000000000000) == 0)
  {
LABEL_40:
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_41;
    goto LABEL_122;
  }
LABEL_121:
  this = PB::Writer::write(a2, *(float *)(v3 + 236), 0xE7u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x2000000000000000) == 0)
  {
LABEL_41:
    if ((v5 & 0x200000) == 0)
      goto LABEL_42;
    goto LABEL_123;
  }
LABEL_122:
  this = PB::Writer::write(a2, *(float *)(v3 + 256), 0xE8u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x200000) == 0)
  {
LABEL_42:
    if ((v5 & 0x200000000000) == 0)
      goto LABEL_43;
    goto LABEL_124;
  }
LABEL_123:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 0xE9u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x200000000000) == 0)
  {
LABEL_43:
    if ((v7 & 0x40) == 0)
      goto LABEL_44;
    goto LABEL_125;
  }
LABEL_124:
  this = PB::Writer::write(a2, *(float *)(v3 + 192), 0xEAu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((v7 & 0x40) == 0)
  {
LABEL_44:
    if ((v5 & 0x80) == 0)
      goto LABEL_45;
    goto LABEL_126;
  }
LABEL_125:
  this = PB::Writer::write(a2, *(float *)(v3 + 292), 0xEBu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x80) == 0)
  {
LABEL_45:
    if ((v5 & 0x400) == 0)
      goto LABEL_46;
    goto LABEL_127;
  }
LABEL_126:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 0xECu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x400) == 0)
  {
LABEL_46:
    if ((v5 & 0x200) == 0)
      goto LABEL_47;
    goto LABEL_128;
  }
LABEL_127:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0xEDu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x200) == 0)
  {
LABEL_47:
    if ((v5 & 0x100) == 0)
      goto LABEL_48;
    goto LABEL_129;
  }
LABEL_128:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 0xEEu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x100) == 0)
  {
LABEL_48:
    if ((v5 & 4) == 0)
      goto LABEL_49;
    goto LABEL_130;
  }
LABEL_129:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 0xEFu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 4) == 0)
  {
LABEL_49:
    if ((v5 & 0x20) == 0)
      goto LABEL_50;
    goto LABEL_131;
  }
LABEL_130:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 0xF0u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x20) == 0)
  {
LABEL_50:
    if ((v5 & 0x10) == 0)
      goto LABEL_51;
    goto LABEL_132;
  }
LABEL_131:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 0xF1u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x10) == 0)
  {
LABEL_51:
    if ((v5 & 8) == 0)
      goto LABEL_52;
    goto LABEL_133;
  }
LABEL_132:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 0xF2u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 8) == 0)
  {
LABEL_52:
    if ((v5 & 0x800) == 0)
      goto LABEL_53;
    goto LABEL_134;
  }
LABEL_133:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 0xF3u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x800) == 0)
  {
LABEL_53:
    if ((v5 & 0x4000) == 0)
      goto LABEL_54;
    goto LABEL_135;
  }
LABEL_134:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 0xF4u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x4000) == 0)
  {
LABEL_54:
    if ((v5 & 0x2000) == 0)
      goto LABEL_55;
    goto LABEL_136;
  }
LABEL_135:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 0xF5u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x2000) == 0)
  {
LABEL_55:
    if ((v5 & 0x1000) == 0)
      goto LABEL_56;
    goto LABEL_137;
  }
LABEL_136:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 0xF6u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x1000) == 0)
  {
LABEL_56:
    if ((v5 & 0x10000) == 0)
      goto LABEL_57;
    goto LABEL_138;
  }
LABEL_137:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 0xF7u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x10000) == 0)
  {
LABEL_57:
    if ((v5 & 0x20000) == 0)
      goto LABEL_58;
    goto LABEL_139;
  }
LABEL_138:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 0xF8u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x20000) == 0)
  {
LABEL_58:
    if ((v5 & 0x200000000000000) == 0)
      goto LABEL_59;
    goto LABEL_140;
  }
LABEL_139:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0xF9u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x200000000000000) == 0)
  {
LABEL_59:
    if ((v5 & 0x4000000000000000) == 0)
      goto LABEL_60;
    goto LABEL_141;
  }
LABEL_140:
  this = PB::Writer::write(a2, *(float *)(v3 + 240), 0xFAu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x4000000000000000) == 0)
  {
LABEL_60:
    if ((v5 & 0x400000) == 0)
      goto LABEL_61;
    goto LABEL_142;
  }
LABEL_141:
  this = PB::Writer::write(a2, *(float *)(v3 + 260), 0xFBu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x400000) == 0)
  {
LABEL_61:
    if ((v5 & 0x400000000000) == 0)
      goto LABEL_62;
    goto LABEL_143;
  }
LABEL_142:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 0xFCu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x400000000000) == 0)
  {
LABEL_62:
    if ((v7 & 0x80) == 0)
      goto LABEL_63;
    goto LABEL_144;
  }
LABEL_143:
  this = PB::Writer::write(a2, *(float *)(v3 + 196), 0xFDu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((v7 & 0x80) == 0)
  {
LABEL_63:
    if ((v5 & 0x400000000000000) == 0)
      goto LABEL_64;
    goto LABEL_145;
  }
LABEL_144:
  this = PB::Writer::write(a2, *(float *)(v3 + 296), 0xFEu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x400000000000000) == 0)
  {
LABEL_64:
    if ((v5 & 0x8000000000000000) == 0)
      goto LABEL_65;
    goto LABEL_146;
  }
LABEL_145:
  this = PB::Writer::write(a2, *(float *)(v3 + 244), 0xFFu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x8000000000000000) == 0)
  {
LABEL_65:
    if ((v5 & 0x800000) == 0)
      goto LABEL_66;
    goto LABEL_147;
  }
LABEL_146:
  this = PB::Writer::write(a2, *(float *)(v3 + 264), 0x100u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x800000) == 0)
  {
LABEL_66:
    if ((v5 & 0x800000000000) == 0)
      goto LABEL_67;
    goto LABEL_148;
  }
LABEL_147:
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 0x101u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x800000000000) == 0)
  {
LABEL_67:
    if ((v7 & 0x100) == 0)
      goto LABEL_68;
    goto LABEL_149;
  }
LABEL_148:
  this = PB::Writer::write(a2, *(float *)(v3 + 200), 0x102u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((v7 & 0x100) == 0)
  {
LABEL_68:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_69;
    goto LABEL_150;
  }
LABEL_149:
  this = PB::Writer::write(a2, *(float *)(v3 + 300), 0x103u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x100000000) == 0)
  {
LABEL_69:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_70;
    goto LABEL_151;
  }
LABEL_150:
  this = PB::Writer::write(a2, *(float *)(v3 + 140), 0x104u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x200000000) == 0)
  {
LABEL_70:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_71;
    goto LABEL_152;
  }
LABEL_151:
  this = PB::Writer::write(a2, *(float *)(v3 + 144), 0x105u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x8000000) == 0)
  {
LABEL_71:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_72;
    goto LABEL_153;
  }
LABEL_152:
  this = PB::Writer::write(a2, *(float *)(v3 + 120), 0x106u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x4000000) == 0)
  {
LABEL_72:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_73;
    goto LABEL_154;
  }
LABEL_153:
  this = PB::Writer::write(a2, *(float *)(v3 + 116), 0x107u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x80000000) == 0)
  {
LABEL_73:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_74;
    goto LABEL_155;
  }
LABEL_154:
  this = PB::Writer::write(a2, *(float *)(v3 + 136), 0x108u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x40000000) == 0)
  {
LABEL_74:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_75;
    goto LABEL_156;
  }
LABEL_155:
  this = PB::Writer::write(a2, *(float *)(v3 + 132), 0x109u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x20000000) == 0)
  {
LABEL_75:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_76;
    goto LABEL_157;
  }
LABEL_156:
  this = PB::Writer::write(a2, *(float *)(v3 + 128), 0x10Au);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x10000000) == 0)
  {
LABEL_76:
    if ((v5 & 0x10000000000) == 0)
      goto LABEL_77;
    goto LABEL_158;
  }
LABEL_157:
  this = PB::Writer::write(a2, *(float *)(v3 + 124), 0x10Bu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x10000000000) == 0)
  {
LABEL_77:
    if ((v5 & 0x20000000000) == 0)
      goto LABEL_78;
    goto LABEL_159;
  }
LABEL_158:
  this = PB::Writer::write(a2, *(float *)(v3 + 172), 0x10Cu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x20000000000) == 0)
  {
LABEL_78:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_79;
    goto LABEL_160;
  }
LABEL_159:
  this = PB::Writer::write(a2, *(float *)(v3 + 176), 0x10Du);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x800000000) == 0)
  {
LABEL_79:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_80;
    goto LABEL_161;
  }
LABEL_160:
  this = PB::Writer::write(a2, *(float *)(v3 + 152), 0x10Eu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x400000000) == 0)
  {
LABEL_80:
    if ((v5 & 0x8000000000) == 0)
      goto LABEL_81;
    goto LABEL_162;
  }
LABEL_161:
  this = PB::Writer::write(a2, *(float *)(v3 + 148), 0x10Fu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x8000000000) == 0)
  {
LABEL_81:
    if ((v5 & 0x4000000000) == 0)
      goto LABEL_82;
    goto LABEL_163;
  }
LABEL_162:
  this = PB::Writer::write(a2, *(float *)(v3 + 168), 0x110u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x4000000000) == 0)
  {
LABEL_82:
    if ((v5 & 0x2000000000) == 0)
      goto LABEL_83;
    goto LABEL_164;
  }
LABEL_163:
  this = PB::Writer::write(a2, *(float *)(v3 + 164), 0x111u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x2000000000) == 0)
  {
LABEL_83:
    if ((v5 & 0x1000000000) == 0)
      goto LABEL_84;
    goto LABEL_165;
  }
LABEL_164:
  this = PB::Writer::write(a2, *(float *)(v3 + 160), 0x112u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  if ((*v4 & 0x1000000000) == 0)
  {
LABEL_84:
    if ((v7 & 2) == 0)
      goto LABEL_85;
    goto LABEL_166;
  }
LABEL_165:
  this = PB::Writer::write(a2, *(float *)(v3 + 156), 0x113u);
  LOBYTE(v7) = *((_WORD *)v4 + 4);
  if ((v4[1] & 2) == 0)
  {
LABEL_85:
    if ((v7 & 4) == 0)
      goto LABEL_86;
    goto LABEL_167;
  }
LABEL_166:
  this = PB::Writer::write(a2, *(float *)(v3 + 272), 0x114u);
  LOBYTE(v7) = *((_WORD *)v4 + 4);
  if ((v4[1] & 4) == 0)
  {
LABEL_86:
    if ((v7 & 1) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 268), 0x116u);
  }
LABEL_167:
  this = PB::Writer::write(a2, *(float *)(v3 + 276), 0x115u);
  if ((v4[1] & 1) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 268), 0x116u);
  return this;
}

uint64_t CMMsl::KappaRolloverCrashResult::hash_value(CMMsl::KappaRolloverCrashResult *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  float v46;
  uint64_t v47;
  float v48;
  uint64_t v49;
  float v50;
  uint64_t v51;
  float v52;
  uint64_t v53;
  float v54;
  uint64_t v55;
  float v56;
  uint64_t v57;
  float v58;
  uint64_t v59;
  float v60;
  uint64_t v61;
  float v62;
  uint64_t v63;
  float v64;
  uint64_t v65;
  float v66;
  uint64_t v67;
  float v68;
  uint64_t v69;
  float v70;
  uint64_t v71;
  float v72;
  uint64_t v73;
  float v74;
  uint64_t v75;
  float v76;
  uint64_t v77;
  float v78;
  uint64_t v79;
  float v80;
  uint64_t v81;
  float v82;
  uint64_t v83;
  float v84;
  uint64_t v85;
  float v86;
  uint64_t v87;
  float v88;
  uint64_t v89;
  float v90;
  uint64_t v91;
  float v92;
  uint64_t v93;
  float v94;
  uint64_t v95;
  float v96;
  uint64_t v97;
  float v98;
  uint64_t v99;
  float v100;
  uint64_t v101;
  float v102;
  uint64_t v103;
  float v104;
  uint64_t v105;
  float v106;
  uint64_t v107;
  float v108;
  uint64_t v109;
  float v110;
  uint64_t v111;
  float v112;
  uint64_t v113;
  float v114;
  uint64_t v115;
  float v116;
  uint64_t v117;
  float v118;
  uint64_t v119;
  float v120;
  uint64_t v121;
  float v122;
  uint64_t v123;
  float v124;
  uint64_t v125;
  float v126;
  uint64_t v127;
  float v128;
  uint64_t v129;
  float v130;
  uint64_t v131;
  float v132;
  uint64_t v133;
  float v134;
  uint64_t v135;
  float v136;
  uint64_t v137;
  float v138;
  uint64_t v139;
  float v140;
  uint64_t v141;
  float v142;
  uint64_t v143;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;

  v1 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  v2 = *(_QWORD *)((char *)this + 316);
  if ((v2 & 1) != 0)
  {
    v3 = *((_QWORD *)this + 1);
    if ((*((_WORD *)this + 162) & 0x8000) != 0)
    {
LABEL_3:
      v200 = *((unsigned __int8 *)this + 310);
      if ((v1 & 0x10000) != 0)
        goto LABEL_4;
      goto LABEL_249;
    }
  }
  else
  {
    v3 = 0;
    if ((*((_WORD *)this + 162) & 0x8000) != 0)
      goto LABEL_3;
  }
  v200 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_4:
    v199 = *((unsigned __int8 *)this + 311);
    if ((v2 & 0x40000000000) != 0)
      goto LABEL_5;
LABEL_250:
    v198 = 0;
    if ((v2 & 0x40000) != 0)
      goto LABEL_8;
LABEL_251:
    v197 = 0;
    if ((*((_WORD *)this + 162) & 8) != 0)
      goto LABEL_11;
LABEL_252:
    v196 = 0;
    if ((*((_WORD *)this + 162) & 0x2000) != 0)
      goto LABEL_14;
    goto LABEL_253;
  }
LABEL_249:
  v199 = 0;
  if ((v2 & 0x40000000000) == 0)
    goto LABEL_250;
LABEL_5:
  v4 = *((float *)this + 45);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  v198 = v5;
  if ((v2 & 0x40000) == 0)
    goto LABEL_251;
LABEL_8:
  v6 = *((float *)this + 21);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  v197 = v7;
  if ((*((_WORD *)this + 162) & 8) == 0)
    goto LABEL_252;
LABEL_11:
  v8 = *((float *)this + 70);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  v196 = v9;
  if ((*((_WORD *)this + 162) & 0x2000) != 0)
  {
LABEL_14:
    v195 = *((unsigned __int8 *)this + 308);
    if ((*((_WORD *)this + 162) & 0x400) != 0)
      goto LABEL_15;
    goto LABEL_254;
  }
LABEL_253:
  v195 = 0;
  if ((*((_WORD *)this + 162) & 0x400) != 0)
  {
LABEL_15:
    v194 = *((unsigned __int8 *)this + 305);
    if ((*((_WORD *)this + 162) & 0x200) != 0)
      goto LABEL_16;
    goto LABEL_255;
  }
LABEL_254:
  v194 = 0;
  if ((*((_WORD *)this + 162) & 0x200) != 0)
  {
LABEL_16:
    v193 = *((unsigned __int8 *)this + 304);
    if ((v2 & 0x2000000) != 0)
      goto LABEL_17;
    goto LABEL_256;
  }
LABEL_255:
  v193 = 0;
  if ((v2 & 0x2000000) != 0)
  {
LABEL_17:
    v192 = *((int *)this + 28);
    if ((*((_WORD *)this + 162) & 0x1000) != 0)
      goto LABEL_18;
    goto LABEL_257;
  }
LABEL_256:
  v192 = 0;
  if ((*((_WORD *)this + 162) & 0x1000) != 0)
  {
LABEL_18:
    v191 = *((unsigned __int8 *)this + 307);
    if ((v2 & 0x1000000) != 0)
      goto LABEL_19;
LABEL_258:
    v190 = 0;
    if ((v2 & 0x2000000000000) != 0)
      goto LABEL_22;
LABEL_259:
    v189 = 0;
    if ((v2 & 0x1000000000000) != 0)
      goto LABEL_25;
LABEL_260:
    v188 = 0;
    if ((v2 & 0x4000000000000) != 0)
      goto LABEL_28;
LABEL_261:
    v187 = 0;
    if ((v2 & 0x40) != 0)
      goto LABEL_31;
LABEL_262:
    v186 = 0;
    if ((v2 & 2) != 0)
      goto LABEL_34;
LABEL_263:
    v185 = 0;
    if ((v2 & 0x8000) != 0)
      goto LABEL_37;
LABEL_264:
    v184 = 0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_40;
    goto LABEL_265;
  }
LABEL_257:
  v191 = 0;
  if ((v2 & 0x1000000) == 0)
    goto LABEL_258;
LABEL_19:
  v10 = *((float *)this + 27);
  v11 = LODWORD(v10);
  if (v10 == 0.0)
    v11 = 0;
  v190 = v11;
  if ((v2 & 0x2000000000000) == 0)
    goto LABEL_259;
LABEL_22:
  v12 = *((float *)this + 52);
  v13 = LODWORD(v12);
  if (v12 == 0.0)
    v13 = 0;
  v189 = v13;
  if ((v2 & 0x1000000000000) == 0)
    goto LABEL_260;
LABEL_25:
  v14 = *((float *)this + 51);
  v15 = LODWORD(v14);
  if (v14 == 0.0)
    v15 = 0;
  v188 = v15;
  if ((v2 & 0x4000000000000) == 0)
    goto LABEL_261;
LABEL_28:
  v16 = *((float *)this + 53);
  v17 = LODWORD(v16);
  if (v16 == 0.0)
    v17 = 0;
  v187 = v17;
  if ((v2 & 0x40) == 0)
    goto LABEL_262;
LABEL_31:
  v18 = *((float *)this + 9);
  v19 = LODWORD(v18);
  if (v18 == 0.0)
    v19 = 0;
  v186 = v19;
  if ((v2 & 2) == 0)
    goto LABEL_263;
LABEL_34:
  v20 = *((float *)this + 4);
  v21 = LODWORD(v20);
  if (v20 == 0.0)
    v21 = 0;
  v185 = v21;
  if ((v2 & 0x8000) == 0)
    goto LABEL_264;
LABEL_37:
  v22 = *((float *)this + 18);
  v23 = LODWORD(v22);
  if (v22 == 0.0)
    v23 = 0;
  v184 = v23;
  if ((v1 & 0x40000) != 0)
  {
LABEL_40:
    v183 = *((unsigned __int8 *)this + 313);
    if ((*((_WORD *)this + 162) & 0x800) != 0)
      goto LABEL_41;
    goto LABEL_266;
  }
LABEL_265:
  v183 = 0;
  if ((*((_WORD *)this + 162) & 0x800) != 0)
  {
LABEL_41:
    v182 = *((unsigned __int8 *)this + 306);
    if ((*((_WORD *)this + 162) & 0x4000) != 0)
      goto LABEL_42;
    goto LABEL_267;
  }
LABEL_266:
  v182 = 0;
  if ((*((_WORD *)this + 162) & 0x4000) != 0)
  {
LABEL_42:
    v181 = *((unsigned __int8 *)this + 309);
    if ((v2 & 0x20000000000000) != 0)
      goto LABEL_43;
LABEL_268:
    v180 = 0;
    if ((v2 & 0x8000000000000) != 0)
      goto LABEL_46;
LABEL_269:
    v179 = 0;
    if ((v2 & 0x10000000000000) != 0)
      goto LABEL_49;
    goto LABEL_270;
  }
LABEL_267:
  v181 = 0;
  if ((v2 & 0x20000000000000) == 0)
    goto LABEL_268;
LABEL_43:
  v24 = *((float *)this + 56);
  v25 = LODWORD(v24);
  if (v24 == 0.0)
    v25 = 0;
  v180 = v25;
  if ((v2 & 0x8000000000000) == 0)
    goto LABEL_269;
LABEL_46:
  v26 = *((float *)this + 54);
  v27 = LODWORD(v26);
  if (v26 == 0.0)
    v27 = 0;
  v179 = v27;
  if ((v2 & 0x10000000000000) != 0)
  {
LABEL_49:
    v178 = *((int *)this + 55);
    if ((v1 & 0x20000) != 0)
      goto LABEL_50;
    goto LABEL_271;
  }
LABEL_270:
  v178 = 0;
  if ((v1 & 0x20000) != 0)
  {
LABEL_50:
    v177 = *((unsigned __int8 *)this + 312);
    if ((v2 & 0x40000000000000) != 0)
      goto LABEL_51;
LABEL_272:
    v176 = 0;
    if ((v2 & 0x800000000000000) != 0)
      goto LABEL_54;
LABEL_273:
    v175 = 0;
    if ((v2 & 0x80000) != 0)
      goto LABEL_57;
LABEL_274:
    v174 = 0;
    if ((v2 & 0x80000000000) != 0)
      goto LABEL_60;
LABEL_275:
    v173 = 0;
    if ((*((_WORD *)this + 162) & 0x10) != 0)
      goto LABEL_63;
LABEL_276:
    v172 = 0;
    if ((v2 & 0x80000000000000) != 0)
      goto LABEL_66;
LABEL_277:
    v171 = 0;
    if ((v2 & 0x1000000000000000) != 0)
      goto LABEL_69;
LABEL_278:
    v170 = 0;
    if ((v2 & 0x100000) != 0)
      goto LABEL_72;
LABEL_279:
    v169 = 0;
    if ((v2 & 0x100000000000) != 0)
      goto LABEL_75;
LABEL_280:
    v168 = 0;
    if ((*((_WORD *)this + 162) & 0x20) != 0)
      goto LABEL_78;
LABEL_281:
    v167 = 0;
    if ((v2 & 0x100000000000000) != 0)
      goto LABEL_81;
LABEL_282:
    v166 = 0;
    if ((v2 & 0x2000000000000000) != 0)
      goto LABEL_84;
LABEL_283:
    v165 = 0;
    if ((v2 & 0x200000) != 0)
      goto LABEL_87;
LABEL_284:
    v164 = 0;
    if ((v2 & 0x200000000000) != 0)
      goto LABEL_90;
LABEL_285:
    v163 = 0;
    if ((*((_WORD *)this + 162) & 0x40) != 0)
      goto LABEL_93;
LABEL_286:
    v162 = 0;
    if ((v2 & 0x80) != 0)
      goto LABEL_96;
LABEL_287:
    v161 = 0;
    if ((v2 & 0x400) != 0)
      goto LABEL_99;
LABEL_288:
    v160 = 0;
    if ((v2 & 0x200) != 0)
      goto LABEL_102;
LABEL_289:
    v159 = 0;
    if ((v2 & 0x100) != 0)
      goto LABEL_105;
LABEL_290:
    v158 = 0;
    if ((v2 & 4) != 0)
      goto LABEL_108;
LABEL_291:
    v157 = 0;
    if ((v2 & 0x20) != 0)
      goto LABEL_111;
LABEL_292:
    v156 = 0;
    if ((v2 & 0x10) != 0)
      goto LABEL_114;
LABEL_293:
    v155 = 0;
    if ((v2 & 8) != 0)
      goto LABEL_117;
LABEL_294:
    v154 = 0;
    if ((v2 & 0x800) != 0)
      goto LABEL_120;
LABEL_295:
    v153 = 0;
    if ((v2 & 0x4000) != 0)
      goto LABEL_123;
LABEL_296:
    v152 = 0;
    if ((v2 & 0x2000) != 0)
      goto LABEL_126;
LABEL_297:
    v151 = 0;
    if ((v2 & 0x1000) != 0)
      goto LABEL_129;
LABEL_298:
    v150 = 0;
    if ((v2 & 0x10000) != 0)
      goto LABEL_132;
LABEL_299:
    v149 = 0;
    if ((v2 & 0x20000) != 0)
      goto LABEL_135;
LABEL_300:
    v148 = 0;
    if ((v2 & 0x200000000000000) != 0)
      goto LABEL_138;
LABEL_301:
    v147 = 0;
    if ((v2 & 0x4000000000000000) != 0)
      goto LABEL_141;
LABEL_302:
    v146 = 0;
    if ((v2 & 0x400000) != 0)
      goto LABEL_144;
LABEL_303:
    v145 = 0;
    if ((v2 & 0x400000000000) != 0)
      goto LABEL_147;
LABEL_304:
    v93 = 0;
    if ((*((_WORD *)this + 162) & 0x80) != 0)
      goto LABEL_151;
LABEL_305:
    v95 = 0;
    if ((v2 & 0x400000000000000) != 0)
      goto LABEL_155;
LABEL_306:
    v97 = 0;
    if (v2 < 0)
      goto LABEL_159;
LABEL_307:
    v99 = 0;
    if ((v2 & 0x800000) != 0)
      goto LABEL_163;
LABEL_308:
    v101 = 0;
    if ((v2 & 0x800000000000) != 0)
      goto LABEL_167;
LABEL_309:
    v103 = 0;
    if ((*((_WORD *)this + 162) & 0x100) != 0)
      goto LABEL_171;
LABEL_310:
    v105 = 0;
    if ((v2 & 0x100000000) != 0)
      goto LABEL_175;
LABEL_311:
    v107 = 0;
    if ((v2 & 0x200000000) != 0)
      goto LABEL_179;
LABEL_312:
    v109 = 0;
    if ((v2 & 0x8000000) != 0)
      goto LABEL_183;
LABEL_313:
    v111 = 0;
    if ((v2 & 0x4000000) != 0)
      goto LABEL_187;
LABEL_314:
    v113 = 0;
    if ((v2 & 0x80000000) != 0)
      goto LABEL_191;
LABEL_315:
    v115 = 0;
    if ((v2 & 0x40000000) != 0)
      goto LABEL_195;
LABEL_316:
    v117 = 0;
    if ((v2 & 0x20000000) != 0)
      goto LABEL_199;
LABEL_317:
    v119 = 0;
    if ((v2 & 0x10000000) != 0)
      goto LABEL_203;
LABEL_318:
    v121 = 0;
    if ((v2 & 0x10000000000) != 0)
      goto LABEL_207;
LABEL_319:
    v123 = 0;
    if ((v2 & 0x20000000000) != 0)
      goto LABEL_211;
LABEL_320:
    v125 = 0;
    if ((v2 & 0x800000000) != 0)
      goto LABEL_215;
LABEL_321:
    v127 = 0;
    if ((v2 & 0x400000000) != 0)
      goto LABEL_219;
LABEL_322:
    v129 = 0;
    if ((v2 & 0x8000000000) != 0)
      goto LABEL_223;
LABEL_323:
    v131 = 0;
    if ((v2 & 0x4000000000) != 0)
      goto LABEL_227;
LABEL_324:
    v133 = 0;
    if ((v2 & 0x2000000000) != 0)
      goto LABEL_231;
LABEL_325:
    v135 = 0;
    if ((v2 & 0x1000000000) != 0)
      goto LABEL_234;
LABEL_326:
    v137 = 0;
    if ((*((_WORD *)this + 162) & 2) != 0)
      goto LABEL_238;
LABEL_327:
    v139 = 0;
    if ((*((_WORD *)this + 162) & 4) != 0)
      goto LABEL_241;
    goto LABEL_328;
  }
LABEL_271:
  v177 = 0;
  if ((v2 & 0x40000000000000) == 0)
    goto LABEL_272;
LABEL_51:
  v28 = *((float *)this + 57);
  v29 = LODWORD(v28);
  if (v28 == 0.0)
    v29 = 0;
  v176 = v29;
  if ((v2 & 0x800000000000000) == 0)
    goto LABEL_273;
LABEL_54:
  v30 = *((float *)this + 62);
  v31 = LODWORD(v30);
  if (v30 == 0.0)
    v31 = 0;
  v175 = v31;
  if ((v2 & 0x80000) == 0)
    goto LABEL_274;
LABEL_57:
  v32 = *((float *)this + 22);
  v33 = LODWORD(v32);
  if (v32 == 0.0)
    v33 = 0;
  v174 = v33;
  if ((v2 & 0x80000000000) == 0)
    goto LABEL_275;
LABEL_60:
  v34 = *((float *)this + 46);
  v35 = LODWORD(v34);
  if (v34 == 0.0)
    v35 = 0;
  v173 = v35;
  if ((*((_WORD *)this + 162) & 0x10) == 0)
    goto LABEL_276;
LABEL_63:
  v36 = *((float *)this + 71);
  v37 = LODWORD(v36);
  if (v36 == 0.0)
    v37 = 0;
  v172 = v37;
  if ((v2 & 0x80000000000000) == 0)
    goto LABEL_277;
LABEL_66:
  v38 = *((float *)this + 58);
  v39 = LODWORD(v38);
  if (v38 == 0.0)
    v39 = 0;
  v171 = v39;
  if ((v2 & 0x1000000000000000) == 0)
    goto LABEL_278;
LABEL_69:
  v40 = *((float *)this + 63);
  v41 = LODWORD(v40);
  if (v40 == 0.0)
    v41 = 0;
  v170 = v41;
  if ((v2 & 0x100000) == 0)
    goto LABEL_279;
LABEL_72:
  v42 = *((float *)this + 23);
  v43 = LODWORD(v42);
  if (v42 == 0.0)
    v43 = 0;
  v169 = v43;
  if ((v2 & 0x100000000000) == 0)
    goto LABEL_280;
LABEL_75:
  v44 = *((float *)this + 47);
  v45 = LODWORD(v44);
  if (v44 == 0.0)
    v45 = 0;
  v168 = v45;
  if ((*((_WORD *)this + 162) & 0x20) == 0)
    goto LABEL_281;
LABEL_78:
  v46 = *((float *)this + 72);
  v47 = LODWORD(v46);
  if (v46 == 0.0)
    v47 = 0;
  v167 = v47;
  if ((v2 & 0x100000000000000) == 0)
    goto LABEL_282;
LABEL_81:
  v48 = *((float *)this + 59);
  v49 = LODWORD(v48);
  if (v48 == 0.0)
    v49 = 0;
  v166 = v49;
  if ((v2 & 0x2000000000000000) == 0)
    goto LABEL_283;
LABEL_84:
  v50 = *((float *)this + 64);
  v51 = LODWORD(v50);
  if (v50 == 0.0)
    v51 = 0;
  v165 = v51;
  if ((v2 & 0x200000) == 0)
    goto LABEL_284;
LABEL_87:
  v52 = *((float *)this + 24);
  v53 = LODWORD(v52);
  if (v52 == 0.0)
    v53 = 0;
  v164 = v53;
  if ((v2 & 0x200000000000) == 0)
    goto LABEL_285;
LABEL_90:
  v54 = *((float *)this + 48);
  v55 = LODWORD(v54);
  if (v54 == 0.0)
    v55 = 0;
  v163 = v55;
  if ((*((_WORD *)this + 162) & 0x40) == 0)
    goto LABEL_286;
LABEL_93:
  v56 = *((float *)this + 73);
  v57 = LODWORD(v56);
  if (v56 == 0.0)
    v57 = 0;
  v162 = v57;
  if ((v2 & 0x80) == 0)
    goto LABEL_287;
LABEL_96:
  v58 = *((float *)this + 10);
  v59 = LODWORD(v58);
  if (v58 == 0.0)
    v59 = 0;
  v161 = v59;
  if ((v2 & 0x400) == 0)
    goto LABEL_288;
LABEL_99:
  v60 = *((float *)this + 13);
  v61 = LODWORD(v60);
  if (v60 == 0.0)
    v61 = 0;
  v160 = v61;
  if ((v2 & 0x200) == 0)
    goto LABEL_289;
LABEL_102:
  v62 = *((float *)this + 12);
  v63 = LODWORD(v62);
  if (v62 == 0.0)
    v63 = 0;
  v159 = v63;
  if ((v2 & 0x100) == 0)
    goto LABEL_290;
LABEL_105:
  v64 = *((float *)this + 11);
  v65 = LODWORD(v64);
  if (v64 == 0.0)
    v65 = 0;
  v158 = v65;
  if ((v2 & 4) == 0)
    goto LABEL_291;
LABEL_108:
  v66 = *((float *)this + 5);
  v67 = LODWORD(v66);
  if (v66 == 0.0)
    v67 = 0;
  v157 = v67;
  if ((v2 & 0x20) == 0)
    goto LABEL_292;
LABEL_111:
  v68 = *((float *)this + 8);
  v69 = LODWORD(v68);
  if (v68 == 0.0)
    v69 = 0;
  v156 = v69;
  if ((v2 & 0x10) == 0)
    goto LABEL_293;
LABEL_114:
  v70 = *((float *)this + 7);
  v71 = LODWORD(v70);
  if (v70 == 0.0)
    v71 = 0;
  v155 = v71;
  if ((v2 & 8) == 0)
    goto LABEL_294;
LABEL_117:
  v72 = *((float *)this + 6);
  v73 = LODWORD(v72);
  if (v72 == 0.0)
    v73 = 0;
  v154 = v73;
  if ((v2 & 0x800) == 0)
    goto LABEL_295;
LABEL_120:
  v74 = *((float *)this + 14);
  v75 = LODWORD(v74);
  if (v74 == 0.0)
    v75 = 0;
  v153 = v75;
  if ((v2 & 0x4000) == 0)
    goto LABEL_296;
LABEL_123:
  v76 = *((float *)this + 17);
  v77 = LODWORD(v76);
  if (v76 == 0.0)
    v77 = 0;
  v152 = v77;
  if ((v2 & 0x2000) == 0)
    goto LABEL_297;
LABEL_126:
  v78 = *((float *)this + 16);
  v79 = LODWORD(v78);
  if (v78 == 0.0)
    v79 = 0;
  v151 = v79;
  if ((v2 & 0x1000) == 0)
    goto LABEL_298;
LABEL_129:
  v80 = *((float *)this + 15);
  v81 = LODWORD(v80);
  if (v80 == 0.0)
    v81 = 0;
  v150 = v81;
  if ((v2 & 0x10000) == 0)
    goto LABEL_299;
LABEL_132:
  v82 = *((float *)this + 19);
  v83 = LODWORD(v82);
  if (v82 == 0.0)
    v83 = 0;
  v149 = v83;
  if ((v2 & 0x20000) == 0)
    goto LABEL_300;
LABEL_135:
  v84 = *((float *)this + 20);
  v85 = LODWORD(v84);
  if (v84 == 0.0)
    v85 = 0;
  v148 = v85;
  if ((v2 & 0x200000000000000) == 0)
    goto LABEL_301;
LABEL_138:
  v86 = *((float *)this + 60);
  v87 = LODWORD(v86);
  if (v86 == 0.0)
    v87 = 0;
  v147 = v87;
  if ((v2 & 0x4000000000000000) == 0)
    goto LABEL_302;
LABEL_141:
  v88 = *((float *)this + 65);
  v89 = LODWORD(v88);
  if (v88 == 0.0)
    v89 = 0;
  v146 = v89;
  if ((v2 & 0x400000) == 0)
    goto LABEL_303;
LABEL_144:
  v90 = *((float *)this + 25);
  v91 = LODWORD(v90);
  if (v90 == 0.0)
    v91 = 0;
  v145 = v91;
  if ((v2 & 0x400000000000) == 0)
    goto LABEL_304;
LABEL_147:
  v92 = *((float *)this + 49);
  if (v92 == 0.0)
    v93 = 0;
  else
    v93 = LODWORD(v92);
  if ((*((_WORD *)this + 162) & 0x80) == 0)
    goto LABEL_305;
LABEL_151:
  v94 = *((float *)this + 74);
  if (v94 == 0.0)
    v95 = 0;
  else
    v95 = LODWORD(v94);
  if ((v2 & 0x400000000000000) == 0)
    goto LABEL_306;
LABEL_155:
  v96 = *((float *)this + 61);
  if (v96 == 0.0)
    v97 = 0;
  else
    v97 = LODWORD(v96);
  if ((v2 & 0x8000000000000000) == 0)
    goto LABEL_307;
LABEL_159:
  v98 = *((float *)this + 66);
  if (v98 == 0.0)
    v99 = 0;
  else
    v99 = LODWORD(v98);
  if ((v2 & 0x800000) == 0)
    goto LABEL_308;
LABEL_163:
  v100 = *((float *)this + 26);
  if (v100 == 0.0)
    v101 = 0;
  else
    v101 = LODWORD(v100);
  if ((v2 & 0x800000000000) == 0)
    goto LABEL_309;
LABEL_167:
  v102 = *((float *)this + 50);
  if (v102 == 0.0)
    v103 = 0;
  else
    v103 = LODWORD(v102);
  if ((*((_WORD *)this + 162) & 0x100) == 0)
    goto LABEL_310;
LABEL_171:
  v104 = *((float *)this + 75);
  if (v104 == 0.0)
    v105 = 0;
  else
    v105 = LODWORD(v104);
  if ((v2 & 0x100000000) == 0)
    goto LABEL_311;
LABEL_175:
  v106 = *((float *)this + 35);
  if (v106 == 0.0)
    v107 = 0;
  else
    v107 = LODWORD(v106);
  if ((v2 & 0x200000000) == 0)
    goto LABEL_312;
LABEL_179:
  v108 = *((float *)this + 36);
  if (v108 == 0.0)
    v109 = 0;
  else
    v109 = LODWORD(v108);
  if ((v2 & 0x8000000) == 0)
    goto LABEL_313;
LABEL_183:
  v110 = *((float *)this + 30);
  if (v110 == 0.0)
    v111 = 0;
  else
    v111 = LODWORD(v110);
  if ((v2 & 0x4000000) == 0)
    goto LABEL_314;
LABEL_187:
  v112 = *((float *)this + 29);
  if (v112 == 0.0)
    v113 = 0;
  else
    v113 = LODWORD(v112);
  if ((v2 & 0x80000000) == 0)
    goto LABEL_315;
LABEL_191:
  v114 = *((float *)this + 34);
  if (v114 == 0.0)
    v115 = 0;
  else
    v115 = LODWORD(v114);
  if ((v2 & 0x40000000) == 0)
    goto LABEL_316;
LABEL_195:
  v116 = *((float *)this + 33);
  if (v116 == 0.0)
    v117 = 0;
  else
    v117 = LODWORD(v116);
  if ((v2 & 0x20000000) == 0)
    goto LABEL_317;
LABEL_199:
  v118 = *((float *)this + 32);
  if (v118 == 0.0)
    v119 = 0;
  else
    v119 = LODWORD(v118);
  if ((v2 & 0x10000000) == 0)
    goto LABEL_318;
LABEL_203:
  v120 = *((float *)this + 31);
  if (v120 == 0.0)
    v121 = 0;
  else
    v121 = LODWORD(v120);
  if ((v2 & 0x10000000000) == 0)
    goto LABEL_319;
LABEL_207:
  v122 = *((float *)this + 43);
  if (v122 == 0.0)
    v123 = 0;
  else
    v123 = LODWORD(v122);
  if ((v2 & 0x20000000000) == 0)
    goto LABEL_320;
LABEL_211:
  v124 = *((float *)this + 44);
  if (v124 == 0.0)
    v125 = 0;
  else
    v125 = LODWORD(v124);
  if ((v2 & 0x800000000) == 0)
    goto LABEL_321;
LABEL_215:
  v126 = *((float *)this + 38);
  if (v126 == 0.0)
    v127 = 0;
  else
    v127 = LODWORD(v126);
  if ((v2 & 0x400000000) == 0)
    goto LABEL_322;
LABEL_219:
  v128 = *((float *)this + 37);
  if (v128 == 0.0)
    v129 = 0;
  else
    v129 = LODWORD(v128);
  if ((v2 & 0x8000000000) == 0)
    goto LABEL_323;
LABEL_223:
  v130 = *((float *)this + 42);
  if (v130 == 0.0)
    v131 = 0;
  else
    v131 = LODWORD(v130);
  if ((v2 & 0x4000000000) == 0)
    goto LABEL_324;
LABEL_227:
  v132 = *((float *)this + 41);
  if (v132 == 0.0)
    v133 = 0;
  else
    v133 = LODWORD(v132);
  if ((v2 & 0x2000000000) == 0)
    goto LABEL_325;
LABEL_231:
  v134 = *((float *)this + 40);
  v135 = LODWORD(v134);
  if (v134 == 0.0)
    v135 = 0;
  if ((v2 & 0x1000000000) == 0)
    goto LABEL_326;
LABEL_234:
  v136 = *((float *)this + 39);
  if (v136 == 0.0)
    v137 = 0;
  else
    v137 = LODWORD(v136);
  if ((*((_WORD *)this + 162) & 2) == 0)
    goto LABEL_327;
LABEL_238:
  v138 = *((float *)this + 68);
  v139 = LODWORD(v138);
  if (v138 == 0.0)
    v139 = 0;
  if ((*((_WORD *)this + 162) & 4) != 0)
  {
LABEL_241:
    v140 = *((float *)this + 69);
    v141 = LODWORD(v140);
    if (v140 == 0.0)
      v141 = 0;
    if ((*((_WORD *)this + 162) & 1) != 0)
      goto LABEL_244;
LABEL_329:
    v143 = 0;
    return v200 ^ v3 ^ v199 ^ v198 ^ v197 ^ v196 ^ v195 ^ v194 ^ v193 ^ v192 ^ v191 ^ v190 ^ v189 ^ v188 ^ v187 ^ v186 ^ v185 ^ v184 ^ v183 ^ v182 ^ v181 ^ v180 ^ v179 ^ v178 ^ v177 ^ v176 ^ v175 ^ v174 ^ v173 ^ v172 ^ v171 ^ v170 ^ v169 ^ v168 ^ v167 ^ v166 ^ v165 ^ v164 ^ v163 ^ v162 ^ v161 ^ v160 ^ v159 ^ v158 ^ v157 ^ v156 ^ v155 ^ v154 ^ v153 ^ v152 ^ v151 ^ v150 ^ v149 ^ v148 ^ v147 ^ v146 ^ v145 ^ v93 ^ v95 ^ v97 ^ v99 ^ v101 ^ v103 ^ v105 ^ v107 ^ v109 ^ v111 ^ v113 ^ v115 ^ v117 ^ v119 ^ v121 ^ v123 ^ v125 ^ v127 ^ v129 ^ v131 ^ v133 ^ v135 ^ v137 ^ v139 ^ v141 ^ v143;
  }
LABEL_328:
  v141 = 0;
  if ((*((_WORD *)this + 162) & 1) == 0)
    goto LABEL_329;
LABEL_244:
  v142 = *((float *)this + 67);
  v143 = LODWORD(v142);
  if (v142 == 0.0)
    v143 = 0;
  return v200 ^ v3 ^ v199 ^ v198 ^ v197 ^ v196 ^ v195 ^ v194 ^ v193 ^ v192 ^ v191 ^ v190 ^ v189 ^ v188 ^ v187 ^ v186 ^ v185 ^ v184 ^ v183 ^ v182 ^ v181 ^ v180 ^ v179 ^ v178 ^ v177 ^ v176 ^ v175 ^ v174 ^ v173 ^ v172 ^ v171 ^ v170 ^ v169 ^ v168 ^ v167 ^ v166 ^ v165 ^ v164 ^ v163 ^ v162 ^ v161 ^ v160 ^ v159 ^ v158 ^ v157 ^ v156 ^ v155 ^ v154 ^ v153 ^ v152 ^ v151 ^ v150 ^ v149 ^ v148 ^ v147 ^ v146 ^ v145 ^ v93 ^ v95 ^ v97 ^ v99 ^ v101 ^ v103 ^ v105 ^ v107 ^ v109 ^ v111 ^ v113 ^ v115 ^ v117 ^ v119 ^ v121 ^ v123 ^ v125 ^ v127 ^ v129 ^ v131 ^ v133 ^ v135 ^ v137 ^ v139 ^ v141 ^ v143;
}

void CMMsl::KappaSevereCrashResult::~KappaSevereCrashResult(CMMsl::KappaSevereCrashResult *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::KappaSevereCrashResult::KappaSevereCrashResult(CMMsl::KappaSevereCrashResult *this, const CMMsl::KappaSevereCrashResult *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float result;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  int v44;
  char v45;
  char v46;
  char v47;
  int v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  int v54;
  int v55;
  int v56;
  int v57;
  char v58;
  char v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  char v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  char v72;
  int v73;
  int v74;
  int v75;
  char v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  char v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;

  *(_QWORD *)this = off_1003523C8;
  v2 = (uint64_t *)((char *)this + 356);
  *(_QWORD *)((char *)this + 364) = 0;
  *(_QWORD *)((char *)this + 356) = 0;
  v3 = (uint64_t *)((char *)a2 + 356);
  v4 = *(_QWORD *)((char *)a2 + 356);
  if ((v4 & 0x800000) != 0)
  {
    v6 = 0;
    result = *((float *)a2 + 33);
    v5 = 0x800000;
    *v2 = 0x800000;
    *(_QWORD *)((char *)this + 364) = 0;
    *((float *)this + 33) = result;
    v4 = *v3;
    v7 = *(_QWORD *)((char *)a2 + 364);
    if ((*v3 & 0x400000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 0;
  v6 = 0;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v4 & 0x400000) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 32);
    v5 |= 0x400000uLL;
    *v2 = v5;
    *(_QWORD *)((char *)this + 364) = 0;
    *((float *)this + 32) = result;
    v4 = *v3;
    v7 = *(_QWORD *)((char *)a2 + 364);
  }
LABEL_6:
  if ((v4 & 0x1000000) != 0)
  {
    v11 = *((_DWORD *)a2 + 34);
    v5 |= 0x1000000uLL;
    *v2 = v5;
    *(_QWORD *)((char *)this + 364) = 0;
    *((_DWORD *)this + 34) = v11;
    v4 = *v3;
    v7 = *(_QWORD *)((char *)a2 + 364);
    if ((*v3 & 0x10000000000000) == 0)
    {
LABEL_8:
      if ((v7 & 1) == 0)
        goto LABEL_9;
      goto LABEL_115;
    }
  }
  else if ((v4 & 0x10000000000000) == 0)
  {
    goto LABEL_8;
  }
  v12 = *((_DWORD *)a2 + 62);
  v5 |= 0x10000000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = 0;
  *((_DWORD *)this + 62) = v12;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x400000000000000) == 0)
      goto LABEL_10;
    goto LABEL_116;
  }
LABEL_115:
  result = *((float *)a2 + 74);
  v6 = 1;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = 1;
  *((float *)this + 74) = result;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x400000000000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x400000000000) == 0)
      goto LABEL_11;
    goto LABEL_117;
  }
LABEL_116:
  result = *((float *)a2 + 68);
  v5 |= 0x400000000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((float *)this + 68) = result;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x400000000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x200000000000) == 0)
      goto LABEL_12;
    goto LABEL_118;
  }
LABEL_117:
  result = *((float *)a2 + 56);
  v5 |= 0x400000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((float *)this + 56) = result;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x200000000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_119;
  }
LABEL_118:
  result = *((float *)a2 + 55);
  v5 |= 0x200000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((float *)this + 55) = result;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x200) == 0)
  {
LABEL_13:
    if ((v4 & 0x80000000000000) == 0)
      goto LABEL_14;
    goto LABEL_120;
  }
LABEL_119:
  result = *((float *)a2 + 19);
  v5 |= 0x200uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((float *)this + 19) = result;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x80000000000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_15;
    goto LABEL_121;
  }
LABEL_120:
  v13 = *((_DWORD *)a2 + 65);
  v5 |= 0x80000000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 65) = v13;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x10000) == 0)
      goto LABEL_16;
    goto LABEL_122;
  }
LABEL_121:
  v14 = *((_DWORD *)a2 + 35);
  v5 |= 0x2000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 35) = v14;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x10000) == 0)
  {
LABEL_16:
    if ((v7 & 8) == 0)
      goto LABEL_17;
    goto LABEL_123;
  }
LABEL_122:
  result = *((float *)a2 + 26);
  v5 |= 0x10000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((float *)this + 26) = result;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 8) == 0)
  {
LABEL_17:
    if ((v7 & 0x10) == 0)
      goto LABEL_18;
    goto LABEL_124;
  }
LABEL_123:
  result = *((float *)a2 + 77);
  v6 |= 8uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((float *)this + 77) = result;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x10) == 0)
  {
LABEL_18:
    if ((v4 & 0x80000000000) == 0)
      goto LABEL_19;
    goto LABEL_125;
  }
LABEL_124:
  result = *((float *)a2 + 78);
  v6 |= 0x10uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((float *)this + 78) = result;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x80000000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x20000000000) == 0)
      goto LABEL_20;
    goto LABEL_126;
  }
LABEL_125:
  v15 = *((_DWORD *)a2 + 53);
  v5 |= 0x80000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 53) = v15;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x20000000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x4000000000000) == 0)
      goto LABEL_21;
    goto LABEL_127;
  }
LABEL_126:
  v16 = *((_DWORD *)a2 + 51);
  v5 |= 0x20000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 51) = v16;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x4000000000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x1000000000000000) == 0)
      goto LABEL_22;
    goto LABEL_128;
  }
LABEL_127:
  result = *((float *)a2 + 60);
  v5 |= 0x4000000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((float *)this + 60) = result;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x1000000000000000) == 0)
  {
LABEL_22:
    if ((v7 & 2) == 0)
      goto LABEL_23;
    goto LABEL_129;
  }
LABEL_128:
  v17 = *((_DWORD *)a2 + 70);
  v5 |= 0x1000000000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 70) = v17;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 2) == 0)
  {
LABEL_23:
    if ((v4 & 0x80) == 0)
      goto LABEL_24;
    goto LABEL_130;
  }
LABEL_129:
  v18 = *((_DWORD *)a2 + 75);
  v6 |= 2uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 75) = v18;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x80) == 0)
  {
LABEL_24:
    if ((v4 & 1) == 0)
      goto LABEL_25;
    goto LABEL_131;
  }
LABEL_130:
  v19 = *((_QWORD *)a2 + 8);
  v5 |= 0x80uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_QWORD *)this + 8) = v19;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 1) == 0)
  {
LABEL_25:
    if ((v7 & 0x40) == 0)
      goto LABEL_26;
    goto LABEL_132;
  }
LABEL_131:
  v20 = *((_QWORD *)a2 + 1);
  v5 |= 1uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_QWORD *)this + 1) = v20;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x40) == 0)
  {
LABEL_26:
    if ((v7 & 0x80) == 0)
      goto LABEL_27;
    goto LABEL_133;
  }
LABEL_132:
  v21 = *((_BYTE *)a2 + 317);
  v6 |= 0x40uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 317) = v21;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x80) == 0)
  {
LABEL_27:
    if ((v7 & 0x8000) == 0)
      goto LABEL_28;
    goto LABEL_134;
  }
LABEL_133:
  v22 = *((_BYTE *)a2 + 318);
  v6 |= 0x80uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 318) = v22;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x8000) == 0)
  {
LABEL_28:
    if ((v7 & 0x10000) == 0)
      goto LABEL_29;
    goto LABEL_135;
  }
LABEL_134:
  v23 = *((_BYTE *)a2 + 326);
  v6 |= 0x8000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 326) = v23;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x10000) == 0)
  {
LABEL_29:
    if ((v7 & 0x8000000) == 0)
      goto LABEL_30;
    goto LABEL_136;
  }
LABEL_135:
  v24 = *((_BYTE *)a2 + 327);
  v6 |= 0x10000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 327) = v24;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x8000000) == 0)
  {
LABEL_30:
    if ((v7 & 0x2000000) == 0)
      goto LABEL_31;
    goto LABEL_137;
  }
LABEL_136:
  v25 = *((_BYTE *)a2 + 338);
  v6 |= 0x8000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 338) = v25;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x2000000) == 0)
  {
LABEL_31:
    if ((v7 & 0x1000) == 0)
      goto LABEL_32;
    goto LABEL_138;
  }
LABEL_137:
  v26 = *((_BYTE *)a2 + 336);
  v6 |= 0x2000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 336) = v26;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x1000) == 0)
  {
LABEL_32:
    if ((v7 & 0x10000000) == 0)
      goto LABEL_33;
    goto LABEL_139;
  }
LABEL_138:
  v27 = *((_BYTE *)a2 + 323);
  v6 |= 0x1000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 323) = v27;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x10000000) == 0)
  {
LABEL_33:
    if ((v7 & 0x20000000) == 0)
      goto LABEL_34;
    goto LABEL_140;
  }
LABEL_139:
  v28 = *((_BYTE *)a2 + 339);
  v6 |= 0x10000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 339) = v28;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x20000000) == 0)
  {
LABEL_34:
    if ((v7 & 0x200) == 0)
      goto LABEL_35;
    goto LABEL_141;
  }
LABEL_140:
  v29 = *((_BYTE *)a2 + 340);
  v6 |= 0x20000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 340) = v29;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x200) == 0)
  {
LABEL_35:
    if ((v7 & 0x1000000) == 0)
      goto LABEL_36;
    goto LABEL_142;
  }
LABEL_141:
  v30 = *((_BYTE *)a2 + 320);
  v6 |= 0x200uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 320) = v30;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x1000000) == 0)
  {
LABEL_36:
    if ((v7 & 0x2000) == 0)
      goto LABEL_37;
    goto LABEL_143;
  }
LABEL_142:
  v31 = *((_BYTE *)a2 + 335);
  v6 |= 0x1000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 335) = v31;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x2000) == 0)
  {
LABEL_37:
    if ((v7 & 0x4000000) == 0)
      goto LABEL_38;
    goto LABEL_144;
  }
LABEL_143:
  v32 = *((_BYTE *)a2 + 324);
  v6 |= 0x2000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 324) = v32;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x4000000) == 0)
  {
LABEL_38:
    if ((v7 & 0x80000) == 0)
      goto LABEL_39;
    goto LABEL_145;
  }
LABEL_144:
  v33 = *((_BYTE *)a2 + 337);
  v6 |= 0x4000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 337) = v33;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x80000) == 0)
  {
LABEL_39:
    if ((v7 & 0x2000000000) == 0)
      goto LABEL_40;
    goto LABEL_146;
  }
LABEL_145:
  v34 = *((_BYTE *)a2 + 330);
  v6 |= 0x80000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 330) = v34;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x2000000000) == 0)
  {
LABEL_40:
    if ((v7 & 0x200000000) == 0)
      goto LABEL_41;
    goto LABEL_147;
  }
LABEL_146:
  v35 = *((_BYTE *)a2 + 348);
  v6 |= 0x2000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 348) = v35;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x200000000) == 0)
  {
LABEL_41:
    if ((v7 & 0x4000000000) == 0)
      goto LABEL_42;
    goto LABEL_148;
  }
LABEL_147:
  v36 = *((_BYTE *)a2 + 344);
  v6 |= 0x200000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 344) = v36;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x4000000000) == 0)
  {
LABEL_42:
    if ((v7 & 0x400000000) == 0)
      goto LABEL_43;
    goto LABEL_149;
  }
LABEL_148:
  v37 = *((_BYTE *)a2 + 349);
  v6 |= 0x4000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 349) = v37;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x400000000) == 0)
  {
LABEL_43:
    if ((v7 & 0x40000000) == 0)
      goto LABEL_44;
    goto LABEL_150;
  }
LABEL_149:
  v38 = *((_BYTE *)a2 + 345);
  v6 |= 0x400000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 345) = v38;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x40000000) == 0)
  {
LABEL_44:
    if ((v7 & 0x800) == 0)
      goto LABEL_45;
    goto LABEL_151;
  }
LABEL_150:
  v39 = *((_BYTE *)a2 + 341);
  v6 |= 0x40000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 341) = v39;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x800) == 0)
  {
LABEL_45:
    if ((v7 & 0x100000) == 0)
      goto LABEL_46;
    goto LABEL_152;
  }
LABEL_151:
  v40 = *((_BYTE *)a2 + 322);
  v6 |= 0x800uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 322) = v40;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x100000) == 0)
  {
LABEL_46:
    if ((v7 & 0x8000000000) == 0)
      goto LABEL_47;
    goto LABEL_153;
  }
LABEL_152:
  v41 = *((_BYTE *)a2 + 331);
  v6 |= 0x100000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 331) = v41;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x8000000000) == 0)
  {
LABEL_47:
    if ((v7 & 0x800000000) == 0)
      goto LABEL_48;
    goto LABEL_154;
  }
LABEL_153:
  v42 = *((_BYTE *)a2 + 350);
  v6 |= 0x8000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 350) = v42;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x800000000) == 0)
  {
LABEL_48:
    if ((v4 & 0x20000) == 0)
      goto LABEL_49;
    goto LABEL_155;
  }
LABEL_154:
  v43 = *((_BYTE *)a2 + 346);
  v6 |= 0x800000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 346) = v43;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x20000) == 0)
  {
LABEL_49:
    if ((v7 & 0x400000) == 0)
      goto LABEL_50;
    goto LABEL_156;
  }
LABEL_155:
  v44 = *((_DWORD *)a2 + 27);
  v5 |= 0x20000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 27) = v44;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x400000) == 0)
  {
LABEL_50:
    if ((v7 & 0x800000) == 0)
      goto LABEL_51;
    goto LABEL_157;
  }
LABEL_156:
  v45 = *((_BYTE *)a2 + 333);
  v6 |= 0x400000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 333) = v45;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x800000) == 0)
  {
LABEL_51:
    if ((v7 & 0x20) == 0)
      goto LABEL_52;
    goto LABEL_158;
  }
LABEL_157:
  v46 = *((_BYTE *)a2 + 334);
  v6 |= 0x800000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 334) = v46;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x20) == 0)
  {
LABEL_52:
    if ((v4 & 0x40000) == 0)
      goto LABEL_53;
    goto LABEL_159;
  }
LABEL_158:
  v47 = *((_BYTE *)a2 + 316);
  v6 |= 0x20uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 316) = v47;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x40000) == 0)
  {
LABEL_53:
    if ((v7 & 0x40000000000) == 0)
      goto LABEL_54;
    goto LABEL_160;
  }
LABEL_159:
  v48 = *((_DWORD *)a2 + 28);
  v5 |= 0x40000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 28) = v48;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x40000000000) == 0)
  {
LABEL_54:
    if ((v7 & 0x10000000000) == 0)
      goto LABEL_55;
    goto LABEL_161;
  }
LABEL_160:
  v49 = *((_BYTE *)a2 + 353);
  v6 |= 0x40000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 353) = v49;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x10000000000) == 0)
  {
LABEL_55:
    if ((v7 & 0x20000000000) == 0)
      goto LABEL_56;
    goto LABEL_162;
  }
LABEL_161:
  v50 = *((_BYTE *)a2 + 351);
  v6 |= 0x10000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 351) = v50;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x20000000000) == 0)
  {
LABEL_56:
    if ((v7 & 0x100000000) == 0)
      goto LABEL_57;
    goto LABEL_163;
  }
LABEL_162:
  v51 = *((_BYTE *)a2 + 352);
  v6 |= 0x20000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 352) = v51;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x100000000) == 0)
  {
LABEL_57:
    if ((v7 & 0x80000000) == 0)
      goto LABEL_58;
    goto LABEL_164;
  }
LABEL_163:
  v52 = *((_BYTE *)a2 + 343);
  v6 |= (unint64_t)&_mh_execute_header;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 343) = v52;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x80000000) == 0)
  {
LABEL_58:
    if ((v4 & 0x20000000000000) == 0)
      goto LABEL_59;
    goto LABEL_165;
  }
LABEL_164:
  v53 = *((_BYTE *)a2 + 342);
  v6 |= 0x80000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 342) = v53;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x20000000000000) == 0)
  {
LABEL_59:
    if ((v4 & 0x40000000000000) == 0)
      goto LABEL_60;
    goto LABEL_166;
  }
LABEL_165:
  v54 = *((_DWORD *)a2 + 63);
  v5 |= 0x20000000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 63) = v54;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x40000000000000) == 0)
  {
LABEL_60:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_61;
    goto LABEL_167;
  }
LABEL_166:
  v55 = *((_DWORD *)a2 + 64);
  v5 |= 0x40000000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 64) = v55;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x4000000) == 0)
  {
LABEL_61:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_62;
    goto LABEL_168;
  }
LABEL_167:
  v56 = *((_DWORD *)a2 + 36);
  v5 |= 0x4000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 36) = v56;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x8000000) == 0)
  {
LABEL_62:
    if ((v7 & 0x20000) == 0)
      goto LABEL_63;
    goto LABEL_169;
  }
LABEL_168:
  v57 = *((_DWORD *)a2 + 37);
  v5 |= 0x8000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 37) = v57;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x20000) == 0)
  {
LABEL_63:
    if ((v7 & 0x4000) == 0)
      goto LABEL_64;
    goto LABEL_170;
  }
LABEL_169:
  v58 = *((_BYTE *)a2 + 328);
  v6 |= 0x20000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 328) = v58;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x4000) == 0)
  {
LABEL_64:
    if ((v4 & 0x2000000000) == 0)
      goto LABEL_65;
    goto LABEL_171;
  }
LABEL_170:
  v59 = *((_BYTE *)a2 + 325);
  v6 |= 0x4000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 325) = v59;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x2000000000) == 0)
  {
LABEL_65:
    if ((v4 & 0x80000) == 0)
      goto LABEL_66;
    goto LABEL_172;
  }
LABEL_171:
  v60 = *((_DWORD *)a2 + 47);
  v5 |= 0x2000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 47) = v60;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x80000) == 0)
  {
LABEL_66:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_67;
    goto LABEL_173;
  }
LABEL_172:
  v61 = *((_DWORD *)a2 + 29);
  v5 |= 0x80000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 29) = v61;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x1000000000) == 0)
  {
LABEL_67:
    if ((v4 & 0x4000000000000000) == 0)
      goto LABEL_68;
    goto LABEL_174;
  }
LABEL_173:
  v62 = *((_DWORD *)a2 + 46);
  v5 |= 0x1000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 46) = v62;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x4000000000000000) == 0)
  {
LABEL_68:
    if ((v4 & 0x8000000000000000) == 0)
      goto LABEL_69;
    goto LABEL_175;
  }
LABEL_174:
  result = *((float *)a2 + 72);
  v5 |= 0x4000000000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((float *)this + 72) = result;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x8000000000000000) == 0)
  {
LABEL_69:
    if ((v4 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_176;
  }
LABEL_175:
  result = *((float *)a2 + 73);
  v5 |= 0x8000000000000000;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((float *)this + 73) = result;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v4 & 0x800000000000000) == 0)
      goto LABEL_71;
    goto LABEL_177;
  }
LABEL_176:
  result = *((float *)a2 + 67);
  v5 |= 0x200000000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((float *)this + 67) = result;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x800000000000000) == 0)
  {
LABEL_71:
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_72;
    goto LABEL_178;
  }
LABEL_177:
  v63 = *((_DWORD *)a2 + 69);
  v5 |= 0x800000000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 69) = v63;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x2000000000000000) == 0)
  {
LABEL_72:
    if ((v7 & 0x400) == 0)
      goto LABEL_73;
    goto LABEL_179;
  }
LABEL_178:
  v64 = *((_DWORD *)a2 + 71);
  v5 |= 0x2000000000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 71) = v64;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x400) == 0)
  {
LABEL_73:
    if ((v4 & 0x4000) == 0)
      goto LABEL_74;
    goto LABEL_180;
  }
LABEL_179:
  v65 = *((_BYTE *)a2 + 321);
  v6 |= 0x400uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 321) = v65;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x4000) == 0)
  {
LABEL_74:
    if ((v4 & 0x1000) == 0)
      goto LABEL_75;
    goto LABEL_181;
  }
LABEL_180:
  v66 = *((_DWORD *)a2 + 24);
  v5 |= 0x4000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 24) = v66;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x1000) == 0)
  {
LABEL_75:
    if ((v4 & 0x100000000000) == 0)
      goto LABEL_76;
    goto LABEL_182;
  }
LABEL_181:
  result = *((float *)a2 + 22);
  v5 |= 0x1000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((float *)this + 22) = result;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x100000000000) == 0)
  {
LABEL_76:
    if ((v4 & 0x100000000000000) == 0)
      goto LABEL_77;
    goto LABEL_183;
  }
LABEL_182:
  v67 = *((_DWORD *)a2 + 54);
  v5 |= 0x100000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 54) = v67;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x100000000000000) == 0)
  {
LABEL_77:
    if ((v4 & 0x40) == 0)
      goto LABEL_78;
    goto LABEL_184;
  }
LABEL_183:
  v68 = *((_DWORD *)a2 + 66);
  v5 |= 0x100000000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 66) = v68;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x40) == 0)
  {
LABEL_78:
    if ((v4 & 0x800000000000) == 0)
      goto LABEL_79;
    goto LABEL_185;
  }
LABEL_184:
  v69 = *((_QWORD *)a2 + 7);
  v5 |= 0x40uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_QWORD *)this + 7) = v69;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x800000000000) == 0)
  {
LABEL_79:
    if ((v4 & 0x1000000000000) == 0)
      goto LABEL_80;
    goto LABEL_186;
  }
LABEL_185:
  v70 = *((_DWORD *)a2 + 57);
  v5 |= 0x800000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 57) = v70;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x1000000000000) == 0)
  {
LABEL_80:
    if ((v4 & 0x100000) == 0)
      goto LABEL_81;
    goto LABEL_187;
  }
LABEL_186:
  v71 = *((_DWORD *)a2 + 58);
  v5 |= 0x1000000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 58) = v71;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x100000) == 0)
  {
LABEL_81:
    if ((v4 & 0x400) == 0)
      goto LABEL_82;
    goto LABEL_188;
  }
LABEL_187:
  result = *((float *)a2 + 30);
  v5 |= 0x100000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((float *)this + 30) = result;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x400) == 0)
  {
LABEL_82:
    if ((v4 & 0x200000) == 0)
      goto LABEL_83;
    goto LABEL_189;
  }
LABEL_188:
  result = *((float *)a2 + 20);
  v5 |= 0x400uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((float *)this + 20) = result;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x200000) == 0)
  {
LABEL_83:
    if ((v4 & 0x800) == 0)
      goto LABEL_84;
    goto LABEL_190;
  }
LABEL_189:
  result = *((float *)a2 + 31);
  v5 |= 0x200000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((float *)this + 31) = result;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x800) == 0)
  {
LABEL_84:
    if ((v4 & 0x100) == 0)
      goto LABEL_85;
    goto LABEL_191;
  }
LABEL_190:
  result = *((float *)a2 + 21);
  v5 |= 0x800uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((float *)this + 21) = result;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x100) == 0)
  {
LABEL_85:
    if ((v7 & 0x200000) == 0)
      goto LABEL_86;
    goto LABEL_192;
  }
LABEL_191:
  result = *((float *)a2 + 18);
  v5 |= 0x100uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((float *)this + 18) = result;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x200000) == 0)
  {
LABEL_86:
    if ((v7 & 4) == 0)
      goto LABEL_87;
    goto LABEL_193;
  }
LABEL_192:
  v72 = *((_BYTE *)a2 + 332);
  v6 |= 0x200000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 332) = v72;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 4) == 0)
  {
LABEL_87:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_88;
    goto LABEL_194;
  }
LABEL_193:
  v73 = *((_DWORD *)a2 + 76);
  v6 |= 4uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 76) = v73;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x10000000) == 0)
  {
LABEL_88:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_89;
    goto LABEL_195;
  }
LABEL_194:
  v74 = *((_DWORD *)a2 + 38);
  v5 |= 0x10000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 38) = v74;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x40000000) == 0)
  {
LABEL_89:
    if ((v7 & 0x1000000000) == 0)
      goto LABEL_90;
    goto LABEL_196;
  }
LABEL_195:
  v75 = *((_DWORD *)a2 + 40);
  v5 |= 0x40000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 40) = v75;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x1000000000) == 0)
  {
LABEL_90:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_91;
    goto LABEL_197;
  }
LABEL_196:
  v76 = *((_BYTE *)a2 + 347);
  v6 |= 0x1000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 347) = v76;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x80000000) == 0)
  {
LABEL_91:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_92;
    goto LABEL_198;
  }
LABEL_197:
  v77 = *((_DWORD *)a2 + 41);
  v5 |= 0x80000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 41) = v77;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x20000000) == 0)
  {
LABEL_92:
    if ((v4 & 0x8000000000000) == 0)
      goto LABEL_93;
    goto LABEL_199;
  }
LABEL_198:
  v78 = *((_DWORD *)a2 + 39);
  v5 |= 0x20000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 39) = v78;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x8000000000000) == 0)
  {
LABEL_93:
    if ((v4 & 0x4000000000) == 0)
      goto LABEL_94;
    goto LABEL_200;
  }
LABEL_199:
  result = *((float *)a2 + 61);
  v5 |= 0x8000000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((float *)this + 61) = result;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x4000000000) == 0)
  {
LABEL_94:
    if ((v4 & 0x8000000000) == 0)
      goto LABEL_95;
    goto LABEL_201;
  }
LABEL_200:
  v79 = *((_DWORD *)a2 + 48);
  v5 |= 0x4000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 48) = v79;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x8000000000) == 0)
  {
LABEL_95:
    if ((v4 & 0x8000) == 0)
      goto LABEL_96;
    goto LABEL_202;
  }
LABEL_201:
  v80 = *((_DWORD *)a2 + 49);
  v5 |= 0x8000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 49) = v80;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x8000) == 0)
  {
LABEL_96:
    if ((v4 & 0x40000000000) == 0)
      goto LABEL_97;
    goto LABEL_203;
  }
LABEL_202:
  result = *((float *)a2 + 25);
  v5 |= 0x8000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((float *)this + 25) = result;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x40000000000) == 0)
  {
LABEL_97:
    if ((v4 & 0x10000000000) == 0)
      goto LABEL_98;
    goto LABEL_204;
  }
LABEL_203:
  v81 = *((_DWORD *)a2 + 52);
  v5 |= 0x40000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 52) = v81;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x10000000000) == 0)
  {
LABEL_98:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_99;
    goto LABEL_205;
  }
LABEL_204:
  v82 = *((_DWORD *)a2 + 50);
  v5 |= 0x10000000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 50) = v82;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x800000000) == 0)
  {
LABEL_99:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_100;
    goto LABEL_206;
  }
LABEL_205:
  v83 = *((_DWORD *)a2 + 45);
  v5 |= 0x800000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 45) = v83;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x100000000) == 0)
  {
LABEL_100:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_101;
    goto LABEL_207;
  }
LABEL_206:
  v84 = *((_DWORD *)a2 + 42);
  v5 |= (unint64_t)&_mh_execute_header;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 42) = v84;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((*v3 & 0x400000000) == 0)
  {
LABEL_101:
    if ((v7 & 0x100) == 0)
      goto LABEL_102;
    goto LABEL_208;
  }
LABEL_207:
  v85 = *((_DWORD *)a2 + 44);
  v5 |= 0x400000000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_DWORD *)this + 44) = v85;
  v4 = *v3;
  v7 = *(_QWORD *)((char *)a2 + 364);
  if ((v7 & 0x100) == 0)
  {
LABEL_102:
    if ((v7 & 0x40000) == 0)
      goto LABEL_103;
    goto LABEL_209;
  }
LABEL_208:
  v86 = *((_BYTE *)a2 + 319);
  v6 |= 0x100uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 319) = v86;
  v4 = *v3;
  if ((*(_QWORD *)((_BYTE *)a2 + 364) & 0x40000) == 0)
  {
LABEL_103:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_105;
    goto LABEL_104;
  }
LABEL_209:
  v87 = *((_BYTE *)a2 + 329);
  v6 |= 0x40000uLL;
  *v2 = v5;
  *(_QWORD *)((char *)this + 364) = v6;
  *((_BYTE *)this + 329) = v87;
  if ((*v3 & 0x200000000) != 0)
  {
LABEL_104:
    v9 = *((_DWORD *)a2 + 43);
    *v2 = v5 | 0x200000000;
    *(_QWORD *)((char *)this + 364) = v6;
    *((_DWORD *)this + 43) = v9;
  }
LABEL_105:
  v10 = *v3;
  if ((*v3 & 2) != 0)
  {
    v88 = *((_QWORD *)a2 + 2);
    *v2 |= 2uLL;
    *((_QWORD *)this + 2) = v88;
    v10 = *v3;
    if ((*v3 & 0x20) == 0)
    {
LABEL_107:
      if ((v10 & 4) == 0)
        goto LABEL_108;
      goto LABEL_213;
    }
  }
  else if ((v10 & 0x20) == 0)
  {
    goto LABEL_107;
  }
  v89 = *((_QWORD *)a2 + 6);
  *v2 |= 0x20uLL;
  *((_QWORD *)this + 6) = v89;
  v10 = *v3;
  if ((*v3 & 4) == 0)
  {
LABEL_108:
    if ((v10 & 8) == 0)
      goto LABEL_109;
    goto LABEL_214;
  }
LABEL_213:
  v90 = *((_QWORD *)a2 + 3);
  *v2 |= 4uLL;
  *((_QWORD *)this + 3) = v90;
  v10 = *v3;
  if ((*v3 & 8) == 0)
  {
LABEL_109:
    if ((v10 & 0x10) == 0)
      goto LABEL_110;
    goto LABEL_215;
  }
LABEL_214:
  v91 = *((_QWORD *)a2 + 4);
  *v2 |= 8uLL;
  *((_QWORD *)this + 4) = v91;
  v10 = *v3;
  if ((*v3 & 0x10) == 0)
  {
LABEL_110:
    if ((v10 & 0x2000000000000) == 0)
      goto LABEL_111;
    goto LABEL_216;
  }
LABEL_215:
  v92 = *((_QWORD *)a2 + 5);
  *v2 |= 0x10uLL;
  *((_QWORD *)this + 5) = v92;
  v10 = *v3;
  if ((*v3 & 0x2000000000000) == 0)
  {
LABEL_111:
    if ((v10 & 0x2000) == 0)
      return result;
LABEL_217:
    result = *((float *)a2 + 23);
    *v2 |= 0x2000uLL;
    *((float *)this + 23) = result;
    return result;
  }
LABEL_216:
  v93 = *((_DWORD *)a2 + 59);
  *v2 |= 0x2000000000000uLL;
  *((_DWORD *)this + 59) = v93;
  if ((*v3 & 0x2000) != 0)
    goto LABEL_217;
  return result;
}

CMMsl *CMMsl::KappaSevereCrashResult::operator=(CMMsl *a1, const CMMsl::KappaSevereCrashResult *a2)
{
  CMMsl::KappaSevereCrashResult *v3;
  _BYTE v5[376];

  if (a1 != a2)
  {
    CMMsl::KappaSevereCrashResult::KappaSevereCrashResult((CMMsl::KappaSevereCrashResult *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaSevereCrashResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaSevereCrashResult *a2, CMMsl::KappaSevereCrashResult *a3)
{
  __int128 v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float result;

  v3 = *(_OWORD *)((char *)this + 356);
  *(_OWORD *)((char *)this + 356) = *(_OWORD *)((char *)a2 + 356);
  *(_OWORD *)((char *)a2 + 356) = v3;
  LODWORD(v3) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v3;
  LODWORD(v3) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v3;
  v4 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v4;
  v5 = *((_DWORD *)this + 62);
  *((_DWORD *)this + 62) = *((_DWORD *)a2 + 62);
  *((_DWORD *)a2 + 62) = v5;
  LODWORD(v3) = *((_DWORD *)this + 74);
  *((_DWORD *)this + 74) = *((_DWORD *)a2 + 74);
  *((_DWORD *)a2 + 74) = v3;
  LODWORD(v3) = *((_DWORD *)this + 68);
  *((_DWORD *)this + 68) = *((_DWORD *)a2 + 68);
  *((_DWORD *)a2 + 68) = v3;
  LODWORD(v3) = *((_DWORD *)this + 56);
  *((_DWORD *)this + 56) = *((_DWORD *)a2 + 56);
  *((_DWORD *)a2 + 56) = v3;
  LODWORD(v3) = *((_DWORD *)this + 55);
  *((_DWORD *)this + 55) = *((_DWORD *)a2 + 55);
  *((_DWORD *)a2 + 55) = v3;
  LODWORD(v3) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v3;
  v6 = *((_DWORD *)this + 65);
  *((_DWORD *)this + 65) = *((_DWORD *)a2 + 65);
  *((_DWORD *)a2 + 65) = v6;
  v7 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v7;
  LODWORD(v3) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v3;
  LODWORD(v3) = *((_DWORD *)this + 77);
  *((_DWORD *)this + 77) = *((_DWORD *)a2 + 77);
  *((_DWORD *)a2 + 77) = v3;
  LODWORD(v3) = *((_DWORD *)this + 78);
  *((_DWORD *)this + 78) = *((_DWORD *)a2 + 78);
  *((_DWORD *)a2 + 78) = v3;
  v8 = *((_DWORD *)this + 53);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 53);
  *((_DWORD *)a2 + 53) = v8;
  v9 = *((_DWORD *)this + 51);
  *((_DWORD *)this + 51) = *((_DWORD *)a2 + 51);
  *((_DWORD *)a2 + 51) = v9;
  LODWORD(v3) = *((_DWORD *)this + 60);
  *((_DWORD *)this + 60) = *((_DWORD *)a2 + 60);
  *((_DWORD *)a2 + 60) = v3;
  v10 = *((_DWORD *)this + 70);
  *((_DWORD *)this + 70) = *((_DWORD *)a2 + 70);
  *((_DWORD *)a2 + 70) = v10;
  v11 = *((_DWORD *)this + 75);
  *((_DWORD *)this + 75) = *((_DWORD *)a2 + 75);
  *((_DWORD *)a2 + 75) = v11;
  v12 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v12;
  v13 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 317);
  *((_BYTE *)this + 317) = *((_BYTE *)a2 + 317);
  *((_BYTE *)a2 + 317) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 318);
  *((_BYTE *)this + 318) = *((_BYTE *)a2 + 318);
  *((_BYTE *)a2 + 318) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 326);
  *((_BYTE *)this + 326) = *((_BYTE *)a2 + 326);
  *((_BYTE *)a2 + 326) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 327);
  *((_BYTE *)this + 327) = *((_BYTE *)a2 + 327);
  *((_BYTE *)a2 + 327) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 338);
  *((_BYTE *)this + 338) = *((_BYTE *)a2 + 338);
  *((_BYTE *)a2 + 338) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 336);
  *((_BYTE *)this + 336) = *((_BYTE *)a2 + 336);
  *((_BYTE *)a2 + 336) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 323);
  *((_BYTE *)this + 323) = *((_BYTE *)a2 + 323);
  *((_BYTE *)a2 + 323) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 339);
  *((_BYTE *)this + 339) = *((_BYTE *)a2 + 339);
  *((_BYTE *)a2 + 339) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 340);
  *((_BYTE *)this + 340) = *((_BYTE *)a2 + 340);
  *((_BYTE *)a2 + 340) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 320);
  *((_BYTE *)this + 320) = *((_BYTE *)a2 + 320);
  *((_BYTE *)a2 + 320) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 335);
  *((_BYTE *)this + 335) = *((_BYTE *)a2 + 335);
  *((_BYTE *)a2 + 335) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 324);
  *((_BYTE *)this + 324) = *((_BYTE *)a2 + 324);
  *((_BYTE *)a2 + 324) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 337);
  *((_BYTE *)this + 337) = *((_BYTE *)a2 + 337);
  *((_BYTE *)a2 + 337) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 330);
  *((_BYTE *)this + 330) = *((_BYTE *)a2 + 330);
  *((_BYTE *)a2 + 330) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 348);
  *((_BYTE *)this + 348) = *((_BYTE *)a2 + 348);
  *((_BYTE *)a2 + 348) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 344);
  *((_BYTE *)this + 344) = *((_BYTE *)a2 + 344);
  *((_BYTE *)a2 + 344) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 349);
  *((_BYTE *)this + 349) = *((_BYTE *)a2 + 349);
  *((_BYTE *)a2 + 349) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 345);
  *((_BYTE *)this + 345) = *((_BYTE *)a2 + 345);
  *((_BYTE *)a2 + 345) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 341);
  *((_BYTE *)this + 341) = *((_BYTE *)a2 + 341);
  *((_BYTE *)a2 + 341) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 322);
  *((_BYTE *)this + 322) = *((_BYTE *)a2 + 322);
  *((_BYTE *)a2 + 322) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 331);
  *((_BYTE *)this + 331) = *((_BYTE *)a2 + 331);
  *((_BYTE *)a2 + 331) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 350);
  *((_BYTE *)this + 350) = *((_BYTE *)a2 + 350);
  *((_BYTE *)a2 + 350) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 346);
  *((_BYTE *)this + 346) = *((_BYTE *)a2 + 346);
  *((_BYTE *)a2 + 346) = v13;
  LODWORD(v13) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 333);
  *((_BYTE *)this + 333) = *((_BYTE *)a2 + 333);
  *((_BYTE *)a2 + 333) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 334);
  *((_BYTE *)this + 334) = *((_BYTE *)a2 + 334);
  *((_BYTE *)a2 + 334) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 316);
  *((_BYTE *)this + 316) = *((_BYTE *)a2 + 316);
  *((_BYTE *)a2 + 316) = v13;
  LODWORD(v13) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 353);
  *((_BYTE *)this + 353) = *((_BYTE *)a2 + 353);
  *((_BYTE *)a2 + 353) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 351);
  *((_BYTE *)this + 351) = *((_BYTE *)a2 + 351);
  *((_BYTE *)a2 + 351) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 352);
  *((_BYTE *)this + 352) = *((_BYTE *)a2 + 352);
  *((_BYTE *)a2 + 352) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 343);
  *((_BYTE *)this + 343) = *((_BYTE *)a2 + 343);
  *((_BYTE *)a2 + 343) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 342);
  *((_BYTE *)this + 342) = *((_BYTE *)a2 + 342);
  *((_BYTE *)a2 + 342) = v13;
  LODWORD(v13) = *((_DWORD *)this + 63);
  *((_DWORD *)this + 63) = *((_DWORD *)a2 + 63);
  *((_DWORD *)a2 + 63) = v13;
  LODWORD(v13) = *((_DWORD *)this + 64);
  *((_DWORD *)this + 64) = *((_DWORD *)a2 + 64);
  *((_DWORD *)a2 + 64) = v13;
  LODWORD(v13) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v13;
  LODWORD(v13) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 328);
  *((_BYTE *)this + 328) = *((_BYTE *)a2 + 328);
  *((_BYTE *)a2 + 328) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 325);
  *((_BYTE *)this + 325) = *((_BYTE *)a2 + 325);
  *((_BYTE *)a2 + 325) = v13;
  LODWORD(v13) = *((_DWORD *)this + 47);
  *((_DWORD *)this + 47) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = v13;
  LODWORD(v13) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v13;
  LODWORD(v13) = *((_DWORD *)this + 46);
  *((_DWORD *)this + 46) = *((_DWORD *)a2 + 46);
  *((_DWORD *)a2 + 46) = v13;
  LODWORD(v3) = *((_DWORD *)this + 72);
  *((_DWORD *)this + 72) = *((_DWORD *)a2 + 72);
  *((_DWORD *)a2 + 72) = v3;
  LODWORD(v3) = *((_DWORD *)this + 73);
  *((_DWORD *)this + 73) = *((_DWORD *)a2 + 73);
  *((_DWORD *)a2 + 73) = v3;
  LODWORD(v3) = *((_DWORD *)this + 67);
  *((_DWORD *)this + 67) = *((_DWORD *)a2 + 67);
  *((_DWORD *)a2 + 67) = v3;
  LODWORD(v13) = *((_DWORD *)this + 69);
  *((_DWORD *)this + 69) = *((_DWORD *)a2 + 69);
  *((_DWORD *)a2 + 69) = v13;
  LODWORD(v13) = *((_DWORD *)this + 71);
  *((_DWORD *)this + 71) = *((_DWORD *)a2 + 71);
  *((_DWORD *)a2 + 71) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 321);
  *((_BYTE *)this + 321) = *((_BYTE *)a2 + 321);
  *((_BYTE *)a2 + 321) = v13;
  LODWORD(v13) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v13;
  LODWORD(v3) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v3;
  LODWORD(v13) = *((_DWORD *)this + 54);
  *((_DWORD *)this + 54) = *((_DWORD *)a2 + 54);
  *((_DWORD *)a2 + 54) = v13;
  LODWORD(v13) = *((_DWORD *)this + 66);
  *((_DWORD *)this + 66) = *((_DWORD *)a2 + 66);
  *((_DWORD *)a2 + 66) = v13;
  v14 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v14;
  LODWORD(v14) = *((_DWORD *)this + 57);
  *((_DWORD *)this + 57) = *((_DWORD *)a2 + 57);
  *((_DWORD *)a2 + 57) = v14;
  LODWORD(v14) = *((_DWORD *)this + 58);
  *((_DWORD *)this + 58) = *((_DWORD *)a2 + 58);
  *((_DWORD *)a2 + 58) = v14;
  LODWORD(v3) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v3;
  LODWORD(v3) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v3;
  LODWORD(v3) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v3;
  LODWORD(v3) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v3;
  LODWORD(v3) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  LOBYTE(v14) = *((_BYTE *)this + 332);
  *((_BYTE *)this + 332) = *((_BYTE *)a2 + 332);
  *((_BYTE *)a2 + 332) = v14;
  LODWORD(v14) = *((_DWORD *)this + 76);
  *((_DWORD *)this + 76) = *((_DWORD *)a2 + 76);
  *((_DWORD *)a2 + 76) = v14;
  LODWORD(v14) = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v14;
  LODWORD(v14) = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v14;
  LOBYTE(v14) = *((_BYTE *)this + 347);
  *((_BYTE *)this + 347) = *((_BYTE *)a2 + 347);
  *((_BYTE *)a2 + 347) = v14;
  LODWORD(v14) = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v14;
  LODWORD(v14) = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v14;
  LODWORD(v3) = *((_DWORD *)this + 61);
  *((_DWORD *)this + 61) = *((_DWORD *)a2 + 61);
  *((_DWORD *)a2 + 61) = v3;
  LODWORD(v14) = *((_DWORD *)this + 48);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_DWORD *)a2 + 48) = v14;
  LODWORD(v14) = *((_DWORD *)this + 49);
  *((_DWORD *)this + 49) = *((_DWORD *)a2 + 49);
  *((_DWORD *)a2 + 49) = v14;
  LODWORD(v3) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v3;
  LODWORD(v14) = *((_DWORD *)this + 52);
  *((_DWORD *)this + 52) = *((_DWORD *)a2 + 52);
  *((_DWORD *)a2 + 52) = v14;
  LODWORD(v14) = *((_DWORD *)this + 50);
  *((_DWORD *)this + 50) = *((_DWORD *)a2 + 50);
  *((_DWORD *)a2 + 50) = v14;
  LODWORD(v14) = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v14;
  LODWORD(v14) = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v14;
  LODWORD(v14) = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v14;
  LOBYTE(v14) = *((_BYTE *)this + 319);
  *((_BYTE *)this + 319) = *((_BYTE *)a2 + 319);
  *((_BYTE *)a2 + 319) = v14;
  LOBYTE(v14) = *((_BYTE *)this + 329);
  *((_BYTE *)this + 329) = *((_BYTE *)a2 + 329);
  *((_BYTE *)a2 + 329) = v14;
  LODWORD(v14) = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v14;
  v15 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v15;
  v16 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v16;
  v17 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v17;
  v18 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v18;
  v19 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v19;
  LODWORD(v19) = *((_DWORD *)this + 59);
  *((_DWORD *)this + 59) = *((_DWORD *)a2 + 59);
  *((_DWORD *)a2 + 59) = v19;
  result = *((float *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((float *)a2 + 23) = result;
  return result;
}

float CMMsl::KappaSevereCrashResult::KappaSevereCrashResult(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_1003523C8;
  *(_OWORD *)(a1 + 356) = *(_OWORD *)(a2 + 356);
  *(_QWORD *)(a2 + 364) = 0;
  *(_QWORD *)(a2 + 356) = 0;
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 260);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 308) = *(_DWORD *)(a2 + 308);
  *(_DWORD *)(a1 + 312) = *(_DWORD *)(a2 + 312);
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(_DWORD *)(a1 + 300) = *(_DWORD *)(a2 + 300);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 317) = *(_BYTE *)(a2 + 317);
  *(_BYTE *)(a1 + 318) = *(_BYTE *)(a2 + 318);
  *(_BYTE *)(a1 + 326) = *(_BYTE *)(a2 + 326);
  *(_BYTE *)(a1 + 327) = *(_BYTE *)(a2 + 327);
  *(_BYTE *)(a1 + 338) = *(_BYTE *)(a2 + 338);
  *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
  *(_BYTE *)(a1 + 323) = *(_BYTE *)(a2 + 323);
  *(_BYTE *)(a1 + 339) = *(_BYTE *)(a2 + 339);
  *(_BYTE *)(a1 + 340) = *(_BYTE *)(a2 + 340);
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  *(_BYTE *)(a1 + 335) = *(_BYTE *)(a2 + 335);
  *(_BYTE *)(a1 + 324) = *(_BYTE *)(a2 + 324);
  *(_BYTE *)(a1 + 337) = *(_BYTE *)(a2 + 337);
  *(_BYTE *)(a1 + 330) = *(_BYTE *)(a2 + 330);
  *(_BYTE *)(a1 + 348) = *(_BYTE *)(a2 + 348);
  *(_BYTE *)(a1 + 344) = *(_BYTE *)(a2 + 344);
  *(_BYTE *)(a1 + 349) = *(_BYTE *)(a2 + 349);
  *(_BYTE *)(a1 + 345) = *(_BYTE *)(a2 + 345);
  *(_BYTE *)(a1 + 341) = *(_BYTE *)(a2 + 341);
  *(_BYTE *)(a1 + 322) = *(_BYTE *)(a2 + 322);
  *(_BYTE *)(a1 + 331) = *(_BYTE *)(a2 + 331);
  *(_BYTE *)(a1 + 350) = *(_BYTE *)(a2 + 350);
  *(_BYTE *)(a1 + 346) = *(_BYTE *)(a2 + 346);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_BYTE *)(a1 + 333) = *(_BYTE *)(a2 + 333);
  *(_BYTE *)(a1 + 334) = *(_BYTE *)(a2 + 334);
  *(_BYTE *)(a1 + 316) = *(_BYTE *)(a2 + 316);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 353) = *(_BYTE *)(a2 + 353);
  *(_BYTE *)(a1 + 351) = *(_BYTE *)(a2 + 351);
  *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
  *(_BYTE *)(a1 + 343) = *(_BYTE *)(a2 + 343);
  *(_BYTE *)(a1 + 342) = *(_BYTE *)(a2 + 342);
  *(_DWORD *)(a1 + 252) = *(_DWORD *)(a2 + 252);
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_BYTE *)(a1 + 325) = *(_BYTE *)(a2 + 325);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  *(_DWORD *)(a1 + 292) = *(_DWORD *)(a2 + 292);
  *(_DWORD *)(a1 + 268) = *(_DWORD *)(a2 + 268);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  *(_DWORD *)(a1 + 284) = *(_DWORD *)(a2 + 284);
  *(_BYTE *)(a1 + 321) = *(_BYTE *)(a2 + 321);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 332) = *(_BYTE *)(a2 + 332);
  *(_DWORD *)(a1 + 304) = *(_DWORD *)(a2 + 304);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 347) = *(_BYTE *)(a2 + 347);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 319) = *(_BYTE *)(a2 + 319);
  *(_BYTE *)(a1 + 329) = *(_BYTE *)(a2 + 329);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 236) = *(_DWORD *)(a2 + 236);
  result = *(float *)(a2 + 92);
  *(float *)(a1 + 92) = result;
  return result;
}

CMMsl *CMMsl::KappaSevereCrashResult::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::KappaSevereCrashResult *v3;
  _BYTE v5[376];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaSevereCrashResult::KappaSevereCrashResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaSevereCrashResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaSevereCrashResult::formatText(CMMsl::KappaSevereCrashResult *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)((char *)this + 356);
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x20) != 0)
  {
    PB::TextFormatter::format(a2, "anyLowSense", *((_BYTE *)this + 316));
    v6 = *(_QWORD *)((char *)this + 364);
  }
  v7 = *v5;
  if ((*v5 & 0x100) != 0)
  {
    PB::TextFormatter::format(a2, "autocorrelationPeriodicCount", *((float *)this + 18));
    v7 = *v5;
    v6 = *(_QWORD *)((char *)this + 364);
    if ((*v5 & 0x200) == 0)
    {
LABEL_5:
      if ((v6 & 0x40) == 0)
        goto LABEL_6;
      goto LABEL_108;
    }
  }
  else if ((v7 & 0x200) == 0)
  {
    goto LABEL_5;
  }
  PB::TextFormatter::format(a2, "autocorrelationPeriodicCountThreshold", *((float *)this + 19));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x40) == 0)
  {
LABEL_6:
    if ((v7 & 1) == 0)
      goto LABEL_7;
    goto LABEL_109;
  }
LABEL_108:
  PB::TextFormatter::format(a2, "crashDetectorDecision", *((_BYTE *)this + 317));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 1) == 0)
  {
LABEL_7:
    if ((v7 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_110;
  }
LABEL_109:
  PB::TextFormatter::format(a2, "crashTimestamp", *((_QWORD *)this + 1));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v7 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_111;
  }
LABEL_110:
  PB::TextFormatter::format(a2, "cumulativeRotation", *((float *)this + 20));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v7 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_112;
  }
LABEL_111:
  PB::TextFormatter::format(a2, "cumulativeRotationHarmonicMean", *((float *)this + 21));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x1000) == 0)
  {
LABEL_10:
    if ((v7 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_113;
  }
LABEL_112:
  PB::TextFormatter::format(a2, "currentCadence", *((float *)this + 22));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x2000) == 0)
  {
LABEL_11:
    if ((v7 & 0x4000) == 0)
      goto LABEL_12;
    goto LABEL_114;
  }
LABEL_113:
  PB::TextFormatter::format(a2, "deltaRealTrigger", *((float *)this + 23));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x4000) == 0)
  {
LABEL_12:
    if ((v7 & 0x8000) == 0)
      goto LABEL_13;
    goto LABEL_115;
  }
LABEL_114:
  PB::TextFormatter::format(a2, "deltaSteps", *((_DWORD *)this + 24));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x8000) == 0)
  {
LABEL_13:
    if ((v7 & 0x10000) == 0)
      goto LABEL_14;
    goto LABEL_116;
  }
LABEL_115:
  PB::TextFormatter::format(a2, "distanceToNearestRoad", *((float *)this + 25));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x10000) == 0)
  {
LABEL_14:
    if ((v6 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_117;
  }
LABEL_116:
  PB::TextFormatter::format(a2, "distanceToNearestRoadThreshold", *((float *)this + 26));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x80) == 0)
  {
LABEL_15:
    if ((v6 & 0x100) == 0)
      goto LABEL_16;
    goto LABEL_118;
  }
LABEL_117:
  PB::TextFormatter::format(a2, "earlyCrashDetectorDecision", *((_BYTE *)this + 318));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x100) == 0)
  {
LABEL_16:
    if ((v6 & 0x200) == 0)
      goto LABEL_17;
    goto LABEL_119;
  }
LABEL_118:
  PB::TextFormatter::format(a2, "escalationCandidate", *((_BYTE *)this + 319));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x200) == 0)
  {
LABEL_17:
    if ((v7 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_120;
  }
LABEL_119:
  PB::TextFormatter::format(a2, "escalationCandidateSuppressed", *((_BYTE *)this + 320));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v7 & 2) == 0)
      goto LABEL_19;
    goto LABEL_121;
  }
LABEL_120:
  PB::TextFormatter::format(a2, "faultCounter", *((_DWORD *)this + 27));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 2) == 0)
  {
LABEL_19:
    if ((v6 & 0x400) == 0)
      goto LABEL_20;
    goto LABEL_122;
  }
LABEL_121:
  PB::TextFormatter::format(a2, "firstTimestampMAPDecision", *((_QWORD *)this + 2));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x400) == 0)
  {
LABEL_20:
    if ((v7 & 0x40000) == 0)
      goto LABEL_21;
    goto LABEL_123;
  }
LABEL_122:
  PB::TextFormatter::format(a2, "hasSteps", *((_BYTE *)this + 321));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x40000) == 0)
  {
LABEL_21:
    if ((v6 & 0x800) == 0)
      goto LABEL_22;
    goto LABEL_124;
  }
LABEL_123:
  PB::TextFormatter::format(a2, "highSensitivityBitmap", *((_DWORD *)this + 28));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x800) == 0)
  {
LABEL_22:
    if ((v6 & 0x1000) == 0)
      goto LABEL_23;
    goto LABEL_125;
  }
LABEL_124:
  PB::TextFormatter::format(a2, "isAirbagDetectedOverWindow", *((_BYTE *)this + 322));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x1000) == 0)
  {
LABEL_23:
    if ((v6 & 0x2000) == 0)
      goto LABEL_24;
    goto LABEL_126;
  }
LABEL_125:
  PB::TextFormatter::format(a2, "isAutocorrelationDecided", *((_BYTE *)this + 323));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x2000) == 0)
  {
LABEL_24:
    if ((v6 & 0x4000) == 0)
      goto LABEL_25;
    goto LABEL_127;
  }
LABEL_126:
  PB::TextFormatter::format(a2, "isCrashDetected", *((_BYTE *)this + 324));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x4000) == 0)
  {
LABEL_25:
    if ((v6 & 0x8000) == 0)
      goto LABEL_26;
    goto LABEL_128;
  }
LABEL_127:
  PB::TextFormatter::format(a2, "isDecisionMadeAtBoundary", *((_BYTE *)this + 325));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x8000) == 0)
  {
LABEL_26:
    if ((v6 & 0x10000) == 0)
      goto LABEL_27;
    goto LABEL_129;
  }
LABEL_128:
  PB::TextFormatter::format(a2, "isDescalationDecided", *((_BYTE *)this + 326));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x10000) == 0)
  {
LABEL_27:
    if ((v6 & 0x20000) == 0)
      goto LABEL_28;
    goto LABEL_130;
  }
LABEL_129:
  PB::TextFormatter::format(a2, "isDescalationRequired", *((_BYTE *)this + 327));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x20000) == 0)
  {
LABEL_28:
    if ((v6 & 0x40000) == 0)
      goto LABEL_29;
    goto LABEL_131;
  }
LABEL_130:
  PB::TextFormatter::format(a2, "isEvaluatingMovingGps", *((_BYTE *)this + 328));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x40000) == 0)
  {
LABEL_29:
    if ((v6 & 0x80000) == 0)
      goto LABEL_30;
    goto LABEL_132;
  }
LABEL_131:
  PB::TextFormatter::format(a2, "isFreeFallDetectedEpoch", *((_BYTE *)this + 329));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x80000) == 0)
  {
LABEL_30:
    if ((v6 & 0x100000) == 0)
      goto LABEL_31;
    goto LABEL_133;
  }
LABEL_132:
  PB::TextFormatter::format(a2, "isHighSpeedCrashDetected", *((_BYTE *)this + 330));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x100000) == 0)
  {
LABEL_31:
    if ((v6 & 0x200000) == 0)
      goto LABEL_32;
    goto LABEL_134;
  }
LABEL_133:
  PB::TextFormatter::format(a2, "isHighSpeedCrashDetectedOverWindow", *((_BYTE *)this + 331));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x200000) == 0)
  {
LABEL_32:
    if ((v6 & 0x400000) == 0)
      goto LABEL_33;
    goto LABEL_135;
  }
LABEL_134:
  PB::TextFormatter::format(a2, "isHighSpeedDetectedOverWindow", *((_BYTE *)this + 332));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x400000) == 0)
  {
LABEL_33:
    if ((v6 & 0x800000) == 0)
      goto LABEL_34;
    goto LABEL_136;
  }
LABEL_135:
  PB::TextFormatter::format(a2, "isLowSensCrashDetected", *((_BYTE *)this + 333));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x800000) == 0)
  {
LABEL_34:
    if ((v6 & 0x1000000) == 0)
      goto LABEL_35;
    goto LABEL_137;
  }
LABEL_136:
  PB::TextFormatter::format(a2, "isLowSensRolloverCrashDetected", *((_BYTE *)this + 334));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x1000000) == 0)
  {
LABEL_35:
    if ((v6 & 0x2000000) == 0)
      goto LABEL_36;
    goto LABEL_138;
  }
LABEL_137:
  PB::TextFormatter::format(a2, "isMAPFPDecided", *((_BYTE *)this + 335));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x2000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x4000000) == 0)
      goto LABEL_37;
    goto LABEL_139;
  }
LABEL_138:
  PB::TextFormatter::format(a2, "isQuiescenceDecided", *((_BYTE *)this + 336));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x4000000) == 0)
  {
LABEL_37:
    if ((v6 & 0x8000000) == 0)
      goto LABEL_38;
    goto LABEL_140;
  }
LABEL_139:
  PB::TextFormatter::format(a2, "isRolloverCrashDetected", *((_BYTE *)this + 337));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x8000000) == 0)
  {
LABEL_38:
    if ((v6 & 0x10000000) == 0)
      goto LABEL_39;
    goto LABEL_141;
  }
LABEL_140:
  PB::TextFormatter::format(a2, "isStepsDecided", *((_BYTE *)this + 338));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x10000000) == 0)
  {
LABEL_39:
    if ((v6 & 0x20000000) == 0)
      goto LABEL_40;
    goto LABEL_142;
  }
LABEL_141:
  PB::TextFormatter::format(a2, "isTriggerClustersDecided", *((_BYTE *)this + 339));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x20000000) == 0)
  {
LABEL_40:
    if ((v7 & 4) == 0)
      goto LABEL_41;
    goto LABEL_143;
  }
LABEL_142:
  PB::TextFormatter::format(a2, "isUshaFPDecided", *((_BYTE *)this + 340));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 4) == 0)
  {
LABEL_41:
    if ((v7 & 8) == 0)
      goto LABEL_42;
    goto LABEL_144;
  }
LABEL_143:
  PB::TextFormatter::format(a2, "lastLocalRealTriggerTimestamp", *((_QWORD *)this + 3));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 8) == 0)
  {
LABEL_42:
    if ((v7 & 0x10) == 0)
      goto LABEL_43;
    goto LABEL_145;
  }
LABEL_144:
  PB::TextFormatter::format(a2, "lastRemoteRealTriggerTimestamp", *((_QWORD *)this + 4));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x10) == 0)
  {
LABEL_43:
    if ((v7 & 0x20) == 0)
      goto LABEL_44;
    goto LABEL_146;
  }
LABEL_145:
  PB::TextFormatter::format(a2, "lastRemoteSampleTimestamp", *((_QWORD *)this + 5));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x20) == 0)
  {
LABEL_44:
    if ((v7 & 0x80000) == 0)
      goto LABEL_45;
    goto LABEL_147;
  }
LABEL_146:
  PB::TextFormatter::format(a2, "lastTimestampMAPDecision", *((_QWORD *)this + 6));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x80000) == 0)
  {
LABEL_45:
    if ((v7 & 0x100000) == 0)
      goto LABEL_46;
    goto LABEL_148;
  }
LABEL_147:
  PB::TextFormatter::format(a2, "lowSpeedOrFakeCountAtBoundaryThreshold", *((_DWORD *)this + 29));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x100000) == 0)
  {
LABEL_46:
    if ((v7 & 0x200000) == 0)
      goto LABEL_47;
    goto LABEL_149;
  }
LABEL_148:
  PB::TextFormatter::format(a2, "maxPulse", *((float *)this + 30));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x200000) == 0)
  {
LABEL_47:
    if ((v7 & 0x400000) == 0)
      goto LABEL_48;
    goto LABEL_150;
  }
LABEL_149:
  PB::TextFormatter::format(a2, "maxPulseHarmonicMean", *((float *)this + 31));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x400000) == 0)
  {
LABEL_48:
    if ((v7 & 0x800000) == 0)
      goto LABEL_49;
    goto LABEL_151;
  }
LABEL_150:
  PB::TextFormatter::format(a2, "maximumHoldDuration", *((float *)this + 32));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x800000) == 0)
  {
LABEL_49:
    if ((v7 & 0x1000000) == 0)
      goto LABEL_50;
    goto LABEL_152;
  }
LABEL_151:
  PB::TextFormatter::format(a2, "minimumHoldDuration", *((float *)this + 33));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x1000000) == 0)
  {
LABEL_50:
    if ((v7 & 0x2000000) == 0)
      goto LABEL_51;
    goto LABEL_153;
  }
LABEL_152:
  PB::TextFormatter::format(a2, "movingCountThreshold", *((_DWORD *)this + 34));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x2000000) == 0)
  {
LABEL_51:
    if ((v7 & 0x4000000) == 0)
      goto LABEL_52;
    goto LABEL_154;
  }
LABEL_153:
  PB::TextFormatter::format(a2, "movingCountThresholdFromSydneyB", *((_DWORD *)this + 35));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x4000000) == 0)
  {
LABEL_52:
    if ((v7 & 0x8000000) == 0)
      goto LABEL_53;
    goto LABEL_155;
  }
LABEL_154:
  PB::TextFormatter::format(a2, "movingGpsCount", *((_DWORD *)this + 36));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x8000000) == 0)
  {
LABEL_53:
    if ((v7 & 0x10000000) == 0)
      goto LABEL_54;
    goto LABEL_156;
  }
LABEL_155:
  PB::TextFormatter::format(a2, "movingGpsCountTotal", *((_DWORD *)this + 37));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x10000000) == 0)
  {
LABEL_54:
    if ((v7 & 0x20000000) == 0)
      goto LABEL_55;
    goto LABEL_157;
  }
LABEL_156:
  PB::TextFormatter::format(a2, "numAudioSkiing", *((_DWORD *)this + 38));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x20000000) == 0)
  {
LABEL_55:
    if ((v7 & 0x40000000) == 0)
      goto LABEL_56;
    goto LABEL_158;
  }
LABEL_157:
  PB::TextFormatter::format(a2, "numAudioSkiingThreshold", *((_DWORD *)this + 39));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x40000000) == 0)
  {
LABEL_56:
    if ((v7 & 0x80000000) == 0)
      goto LABEL_57;
    goto LABEL_159;
  }
LABEL_158:
  PB::TextFormatter::format(a2, "numBaroIncreasesSkiing", *((_DWORD *)this + 40));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x80000000) == 0)
  {
LABEL_57:
    if ((v7 & 0x100000000) == 0)
      goto LABEL_58;
    goto LABEL_160;
  }
LABEL_159:
  PB::TextFormatter::format(a2, "numBaroIncreasesSkiingThreshold", *((_DWORD *)this + 41));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x100000000) == 0)
  {
LABEL_58:
    if ((v7 & 0x200000000) == 0)
      goto LABEL_59;
    goto LABEL_161;
  }
LABEL_160:
  PB::TextFormatter::format(a2, "numDeescalationAOI", *((_DWORD *)this + 42));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x200000000) == 0)
  {
LABEL_59:
    if ((v7 & 0x400000000) == 0)
      goto LABEL_60;
    goto LABEL_162;
  }
LABEL_161:
  PB::TextFormatter::format(a2, "numDeescalationMAP", *((_DWORD *)this + 43));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x400000000) == 0)
  {
LABEL_60:
    if ((v7 & 0x800000000) == 0)
      goto LABEL_61;
    goto LABEL_163;
  }
LABEL_162:
  PB::TextFormatter::format(a2, "numDeescalationTwoLevel", *((_DWORD *)this + 44));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x800000000) == 0)
  {
LABEL_61:
    if ((v7 & 0x1000000000) == 0)
      goto LABEL_62;
    goto LABEL_164;
  }
LABEL_163:
  PB::TextFormatter::format(a2, "numDeescalationUsha", *((_DWORD *)this + 45));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x1000000000) == 0)
  {
LABEL_62:
    if ((v7 & 0x2000000000) == 0)
      goto LABEL_63;
    goto LABEL_165;
  }
LABEL_164:
  PB::TextFormatter::format(a2, "numGpsSamplesInHistory", *((_DWORD *)this + 46));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x2000000000) == 0)
  {
LABEL_63:
    if ((v7 & 0x4000000000) == 0)
      goto LABEL_64;
    goto LABEL_166;
  }
LABEL_165:
  PB::TextFormatter::format(a2, "numLowOrFakeGpsSamplesInHistory", *((_DWORD *)this + 47));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x4000000000) == 0)
  {
LABEL_64:
    if ((v7 & 0x8000000000) == 0)
      goto LABEL_65;
    goto LABEL_167;
  }
LABEL_166:
  PB::TextFormatter::format(a2, "numTriggersWithRecentSkiLiftDetected", *((_DWORD *)this + 48));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x8000000000) == 0)
  {
LABEL_65:
    if ((v7 & 0x10000000000) == 0)
      goto LABEL_66;
    goto LABEL_168;
  }
LABEL_167:
  PB::TextFormatter::format(a2, "numTriggersWithTrueBtHint", *((_DWORD *)this + 49));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x10000000000) == 0)
  {
LABEL_66:
    if ((v7 & 0x20000000000) == 0)
      goto LABEL_67;
    goto LABEL_169;
  }
LABEL_168:
  PB::TextFormatter::format(a2, "numUshaCPEpoch", *((_DWORD *)this + 50));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x20000000000) == 0)
  {
LABEL_67:
    if ((v7 & 0x40000000000) == 0)
      goto LABEL_68;
    goto LABEL_170;
  }
LABEL_169:
  PB::TextFormatter::format(a2, "numUshaCPEpochThreshold", *((_DWORD *)this + 51));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x40000000000) == 0)
  {
LABEL_68:
    if ((v7 & 0x80000000000) == 0)
      goto LABEL_69;
    goto LABEL_171;
  }
LABEL_170:
  PB::TextFormatter::format(a2, "numUshaFPEpoch", *((_DWORD *)this + 52));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x80000000000) == 0)
  {
LABEL_69:
    if ((v7 & 0x100000000000) == 0)
      goto LABEL_70;
    goto LABEL_172;
  }
LABEL_171:
  PB::TextFormatter::format(a2, "numUshaFPEpochThreshold", *((_DWORD *)this + 53));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x100000000000) == 0)
  {
LABEL_70:
    if ((v7 & 0x200000000000) == 0)
      goto LABEL_71;
    goto LABEL_173;
  }
LABEL_172:
  PB::TextFormatter::format(a2, "pedometerArmConstrainedState", *((_DWORD *)this + 54));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x200000000000) == 0)
  {
LABEL_71:
    if ((v7 & 0x400000000000) == 0)
      goto LABEL_72;
    goto LABEL_174;
  }
LABEL_173:
  PB::TextFormatter::format(a2, "quiescenceCumulativeRotationHarmonicMeanThreshold", *((float *)this + 55));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x400000000000) == 0)
  {
LABEL_72:
    if ((v7 & 0x800000000000) == 0)
      goto LABEL_73;
    goto LABEL_175;
  }
LABEL_174:
  PB::TextFormatter::format(a2, "quiescenceMaxPulseHarmonicMeanThreshold", *((float *)this + 56));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x800000000000) == 0)
  {
LABEL_73:
    if ((v7 & 0x1000000000000) == 0)
      goto LABEL_74;
    goto LABEL_176;
  }
LABEL_175:
  PB::TextFormatter::format(a2, "quiescencePulseEpochCount", *((_DWORD *)this + 57));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x1000000000000) == 0)
  {
LABEL_74:
    if ((v7 & 0x2000000000000) == 0)
      goto LABEL_75;
    goto LABEL_177;
  }
LABEL_176:
  PB::TextFormatter::format(a2, "quiescenceSpinEpochCount", *((_DWORD *)this + 58));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x2000000000000) == 0)
  {
LABEL_75:
    if ((v7 & 0x4000000000000) == 0)
      goto LABEL_76;
    goto LABEL_178;
  }
LABEL_177:
  PB::TextFormatter::format(a2, "sameEventState", *((_DWORD *)this + 59));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((*v5 & 0x4000000000000) == 0)
  {
LABEL_76:
    if ((v6 & 0x40000000) == 0)
      goto LABEL_77;
    goto LABEL_179;
  }
LABEL_178:
  PB::TextFormatter::format(a2, "secondDeescalationHoldDuration", *((float *)this + 60));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x40000000) == 0)
  {
LABEL_77:
    if ((v6 & 0x80000000) == 0)
      goto LABEL_78;
    goto LABEL_180;
  }
LABEL_179:
  PB::TextFormatter::format(a2, "shouldDeescalateBecauseOfAutocorrelationCondition", *((_BYTE *)this + 341));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x80000000) == 0)
  {
LABEL_78:
    if ((v6 & 0x100000000) == 0)
      goto LABEL_79;
    goto LABEL_181;
  }
LABEL_180:
  PB::TextFormatter::format(a2, "shouldDeescalateBecauseOfJointDetectionCondition", *((_BYTE *)this + 342));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x100000000) == 0)
  {
LABEL_79:
    if ((v6 & 0x200000000) == 0)
      goto LABEL_80;
    goto LABEL_182;
  }
LABEL_181:
  PB::TextFormatter::format(a2, "shouldDeescalateBecauseOfMAPFPCondition", *((_BYTE *)this + 343));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x200000000) == 0)
  {
LABEL_80:
    if ((v6 & 0x400000000) == 0)
      goto LABEL_81;
    goto LABEL_183;
  }
LABEL_182:
  PB::TextFormatter::format(a2, "shouldDeescalateBecauseOfMovingCondition", *((_BYTE *)this + 344));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x400000000) == 0)
  {
LABEL_81:
    if ((v6 & 0x800000000) == 0)
      goto LABEL_82;
    goto LABEL_184;
  }
LABEL_183:
  PB::TextFormatter::format(a2, "shouldDeescalateBecauseOfQuiescenceCondition", *((_BYTE *)this + 345));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x800000000) == 0)
  {
LABEL_82:
    if ((v6 & 0x1000000000) == 0)
      goto LABEL_83;
    goto LABEL_185;
  }
LABEL_184:
  PB::TextFormatter::format(a2, "shouldDeescalateBecauseOfSkiLiftCondition", *((_BYTE *)this + 346));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x1000000000) == 0)
  {
LABEL_83:
    if ((v6 & 0x2000000000) == 0)
      goto LABEL_84;
    goto LABEL_186;
  }
LABEL_185:
  PB::TextFormatter::format(a2, "shouldDeescalateBecauseOfSkiingCondition", *((_BYTE *)this + 347));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x2000000000) == 0)
  {
LABEL_84:
    if ((v6 & 0x4000000000) == 0)
      goto LABEL_85;
    goto LABEL_187;
  }
LABEL_186:
  PB::TextFormatter::format(a2, "shouldDeescalateBecauseOfStaticCondition", *((_BYTE *)this + 348));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x4000000000) == 0)
  {
LABEL_85:
    if ((v6 & 0x8000000000) == 0)
      goto LABEL_86;
    goto LABEL_188;
  }
LABEL_187:
  PB::TextFormatter::format(a2, "shouldDeescalateBecauseOfStepsCondition", *((_BYTE *)this + 349));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x8000000000) == 0)
  {
LABEL_86:
    if ((v6 & 0x10000000000) == 0)
      goto LABEL_87;
    goto LABEL_189;
  }
LABEL_188:
  PB::TextFormatter::format(a2, "shouldDeescalateBecauseOfTriggerClustersCondition", *((_BYTE *)this + 350));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x10000000000) == 0)
  {
LABEL_87:
    if ((v6 & 0x20000000000) == 0)
      goto LABEL_88;
    goto LABEL_190;
  }
LABEL_189:
  PB::TextFormatter::format(a2, "shouldDeescalateBecauseOfTwoLevelSensitivityCondition", *((_BYTE *)this + 351));
  v7 = *v5;
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 0x20000000000) == 0)
  {
LABEL_88:
    if ((v6 & 0x40000000000) == 0)
      goto LABEL_89;
    goto LABEL_191;
  }
LABEL_190:
  PB::TextFormatter::format(a2, "shouldDeescalateBecauseOfUshaFPCondition", *((_BYTE *)this + 352));
  v7 = *v5;
  if ((*(_QWORD *)((_BYTE *)this + 364) & 0x40000000000) == 0)
  {
LABEL_89:
    if ((v7 & 0x8000000000000) == 0)
      goto LABEL_90;
    goto LABEL_192;
  }
LABEL_191:
  PB::TextFormatter::format(a2, "shouldEnableHighSensBecauseOfDistanceToRoadCondition", *((_BYTE *)this + 353));
  v7 = *v5;
  if ((*v5 & 0x8000000000000) == 0)
  {
LABEL_90:
    if ((v7 & 0x10000000000000) == 0)
      goto LABEL_91;
    goto LABEL_193;
  }
LABEL_192:
  PB::TextFormatter::format(a2, "skiingPressureChangeOverEpochThreshold", *((float *)this + 61));
  v7 = *v5;
  if ((*v5 & 0x10000000000000) == 0)
  {
LABEL_91:
    if ((v7 & 0x20000000000000) == 0)
      goto LABEL_92;
    goto LABEL_194;
  }
LABEL_193:
  PB::TextFormatter::format(a2, "staticCountThreshold", *((_DWORD *)this + 62));
  v7 = *v5;
  if ((*v5 & 0x20000000000000) == 0)
  {
LABEL_92:
    if ((v7 & 0x40000000000000) == 0)
      goto LABEL_93;
    goto LABEL_195;
  }
LABEL_194:
  PB::TextFormatter::format(a2, "staticGpsCount", *((_DWORD *)this + 63));
  v7 = *v5;
  if ((*v5 & 0x40000000000000) == 0)
  {
LABEL_93:
    if ((v7 & 0x80000000000000) == 0)
      goto LABEL_94;
    goto LABEL_196;
  }
LABEL_195:
  PB::TextFormatter::format(a2, "staticGpsCountTotal", *((_DWORD *)this + 64));
  v7 = *v5;
  if ((*v5 & 0x80000000000000) == 0)
  {
LABEL_94:
    if ((v7 & 0x100000000000000) == 0)
      goto LABEL_95;
    goto LABEL_197;
  }
LABEL_196:
  PB::TextFormatter::format(a2, "stationaryCountMissingAsNoOpThreshold", *((_DWORD *)this + 65));
  v7 = *v5;
  if ((*v5 & 0x100000000000000) == 0)
  {
LABEL_95:
    if ((v7 & 0x40) == 0)
      goto LABEL_96;
    goto LABEL_198;
  }
LABEL_197:
  PB::TextFormatter::format(a2, "stepCountEventTimestamp", *((_DWORD *)this + 66));
  v7 = *v5;
  if ((*v5 & 0x40) == 0)
  {
LABEL_96:
    if ((v7 & 0x200000000000000) == 0)
      goto LABEL_97;
    goto LABEL_199;
  }
LABEL_198:
  PB::TextFormatter::format(a2, "stepCountEventTimestamp64", *((_QWORD *)this + 7));
  v7 = *v5;
  if ((*v5 & 0x200000000000000) == 0)
  {
LABEL_97:
    if ((v7 & 0x400000000000000) == 0)
      goto LABEL_98;
    goto LABEL_200;
  }
LABEL_199:
  PB::TextFormatter::format(a2, "stepsCadence", *((float *)this + 67));
  v7 = *v5;
  if ((*v5 & 0x400000000000000) == 0)
  {
LABEL_98:
    if ((v7 & 0x800000000000000) == 0)
      goto LABEL_99;
    goto LABEL_201;
  }
LABEL_200:
  PB::TextFormatter::format(a2, "stepsCadenceThreshold", *((float *)this + 68));
  v7 = *v5;
  if ((*v5 & 0x800000000000000) == 0)
  {
LABEL_99:
    if ((v7 & 0x1000000000000000) == 0)
      goto LABEL_100;
    goto LABEL_202;
  }
LABEL_201:
  PB::TextFormatter::format(a2, "stepsCount", *((_DWORD *)this + 69));
  v7 = *v5;
  if ((*v5 & 0x1000000000000000) == 0)
  {
LABEL_100:
    if ((v7 & 0x2000000000000000) == 0)
      goto LABEL_101;
    goto LABEL_203;
  }
LABEL_202:
  PB::TextFormatter::format(a2, "stepsCountThreshold", *((_DWORD *)this + 70));
  v7 = *v5;
  if ((*v5 & 0x2000000000000000) == 0)
  {
LABEL_101:
    if ((v7 & 0x4000000000000000) == 0)
      goto LABEL_103;
    goto LABEL_102;
  }
LABEL_203:
  PB::TextFormatter::format(a2, "stepsDeescalatedAtOpp", *((_DWORD *)this + 71));
  if ((*v5 & 0x4000000000000000) != 0)
LABEL_102:
    PB::TextFormatter::format(a2, "stepsEpochCount", *((float *)this + 72));
LABEL_103:
  v8 = *v5;
  if (*v5 < 0)
  {
    PB::TextFormatter::format(a2, "stepsPerMinute", *((float *)this + 73));
    v8 = *v5;
    v9 = *(_QWORD *)((char *)this + 364);
    if ((v9 & 1) == 0)
      goto LABEL_207;
    goto LABEL_206;
  }
  v9 = *(_QWORD *)((char *)this + 364);
  if ((v9 & 1) != 0)
  {
LABEL_206:
    PB::TextFormatter::format(a2, "stepsPerMinuteThreshold", *((float *)this + 74));
    v8 = *v5;
    v9 = *(_QWORD *)((char *)this + 364);
  }
LABEL_207:
  if ((v9 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "stepsSecondOpportunityLookbackLength", *((_DWORD *)this + 75));
    v9 = *(_QWORD *)((char *)this + 364);
    if ((*v5 & 0x80) == 0)
    {
LABEL_209:
      if ((v9 & 4) == 0)
        goto LABEL_210;
      goto LABEL_216;
    }
  }
  else if ((v8 & 0x80) == 0)
  {
    goto LABEL_209;
  }
  PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 8));
  v9 = *(_QWORD *)((char *)this + 364);
  if ((v9 & 4) == 0)
  {
LABEL_210:
    if ((v9 & 8) == 0)
      goto LABEL_211;
LABEL_217:
    PB::TextFormatter::format(a2, "ushaCumulativeRotationThreshold", *((float *)this + 77));
    if ((*(_QWORD *)((_BYTE *)this + 364) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_212;
  }
LABEL_216:
  PB::TextFormatter::format(a2, "triggerClusterDeescalationWindowBoundary", *((_DWORD *)this + 76));
  v9 = *(_QWORD *)((char *)this + 364);
  if ((v9 & 8) != 0)
    goto LABEL_217;
LABEL_211:
  if ((v9 & 0x10) != 0)
LABEL_212:
    PB::TextFormatter::format(a2, "ushaPeakPressureThreshold", *((float *)this + 78));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaSevereCrashResult::readFrom(CMMsl::KappaSevereCrashResult *this, PB::Reader *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  int v11;
  _BYTE *v12;
  unint64_t v13;
  uint64_t result;
  CMMsl::KappaSevereCrashResult *v17;
  _QWORD *v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  int v31;
  BOOL v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  BOOL v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  BOOL v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char v81;
  unsigned int v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char v89;
  unsigned int v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  char v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  unint64_t v102;
  unint64_t v103;
  int v104;
  BOOL v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  char v109;
  unsigned int v110;
  uint64_t v111;
  unint64_t v112;
  char v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  char v117;
  unsigned int v118;
  uint64_t v119;
  unint64_t v120;
  char v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  int v126;
  BOOL v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  char v137;
  unsigned int v138;
  uint64_t v139;
  unint64_t v140;
  char v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  char v145;
  unsigned int v146;
  uint64_t v147;
  unint64_t v148;
  char v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  char v158;
  unsigned int v159;
  uint64_t v160;
  unint64_t v161;
  char v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  char v166;
  unsigned int v167;
  uint64_t v168;
  unint64_t v169;
  char v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  char v177;
  unsigned int v178;
  uint64_t v179;
  unint64_t v180;
  char v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  char v185;
  unsigned int v186;
  uint64_t v187;
  unint64_t v188;
  char v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  char v194;
  unsigned int v195;
  uint64_t v196;
  unint64_t v197;
  char v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  char v202;
  unsigned int v203;
  uint64_t v204;
  unint64_t v205;
  char v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  char v210;
  unsigned int v211;
  uint64_t v212;
  unint64_t v213;
  char v214;
  unint64_t v215;
  unint64_t v216;
  uint64_t v217;
  char v218;
  unsigned int v219;
  uint64_t v220;
  unint64_t v221;
  char v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  char v226;
  unsigned int v227;
  uint64_t v228;
  unint64_t v229;
  char v230;
  unint64_t v231;
  unint64_t v232;
  int v233;
  BOOL v234;
  unint64_t v235;
  unint64_t v236;
  int v237;
  BOOL v238;
  unint64_t v239;
  unint64_t v240;
  uint64_t v241;
  char v242;
  unsigned int v243;
  uint64_t v244;
  unint64_t v245;
  char v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  char v250;
  unsigned int v251;
  uint64_t v252;
  unint64_t v253;
  char v254;
  unint64_t v255;
  unint64_t v256;
  uint64_t v257;
  char v258;
  unsigned int v259;
  uint64_t v260;
  unint64_t v261;
  char v262;
  unint64_t v263;
  unint64_t v264;
  int v265;
  BOOL v266;
  unint64_t v267;
  unint64_t v268;
  int v269;
  BOOL v270;
  unint64_t v271;
  unint64_t v272;
  int v273;
  BOOL v274;
  unint64_t v275;
  unint64_t v276;
  int v277;
  BOOL v278;
  unint64_t v279;
  unint64_t v280;
  int v281;
  BOOL v282;
  unint64_t v283;
  unint64_t v284;
  int v285;
  BOOL v286;
  unint64_t v287;
  unint64_t v288;
  int v289;
  BOOL v290;
  unint64_t v291;
  unint64_t v292;
  int v293;
  BOOL v294;
  unint64_t v295;
  unint64_t v296;
  int v297;
  BOOL v298;
  unint64_t v299;
  unint64_t v300;
  int v301;
  BOOL v302;
  unint64_t v303;
  unint64_t v304;
  int v305;
  BOOL v306;
  unint64_t v307;
  unint64_t v308;
  uint64_t v309;
  char v310;
  unsigned int v311;
  uint64_t v312;
  unint64_t v313;
  char v314;
  unint64_t v315;
  unint64_t v316;
  int v317;
  BOOL v318;
  unint64_t v319;
  unint64_t v320;
  int v321;
  BOOL v322;
  unint64_t v323;
  unint64_t v324;
  int v325;
  BOOL v326;
  unint64_t v327;
  unint64_t v328;
  uint64_t v329;
  char v330;
  unsigned int v331;
  uint64_t v332;
  unint64_t v333;
  char v334;
  unint64_t v335;
  unint64_t v336;
  int v337;
  BOOL v338;
  unint64_t v339;
  unint64_t v340;
  int v341;
  BOOL v342;
  unint64_t v343;
  unint64_t v344;
  int v345;
  BOOL v346;
  unint64_t v347;
  unint64_t v348;
  int v349;
  BOOL v350;
  unint64_t v351;
  unint64_t v352;
  int v353;
  BOOL v354;
  unint64_t v355;
  unint64_t v356;
  uint64_t v357;
  char v358;
  unsigned int v359;
  uint64_t v360;
  unint64_t v361;
  char v362;
  unint64_t v363;
  unint64_t v364;
  int v365;
  BOOL v366;
  unint64_t v367;
  unint64_t v368;
  int v369;
  BOOL v370;
  unint64_t v371;
  unint64_t v372;
  int v373;
  BOOL v374;
  unint64_t v375;
  unint64_t v376;
  int v377;
  BOOL v378;
  unint64_t v379;
  unint64_t v380;
  int v381;
  BOOL v382;
  unint64_t v383;
  unint64_t v384;
  int v385;
  BOOL v386;
  unint64_t v387;
  unint64_t v388;
  int v389;
  BOOL v390;
  unint64_t v391;
  unint64_t v392;
  int v393;
  BOOL v394;
  unint64_t v395;
  unint64_t v396;
  int v397;
  BOOL v398;
  unint64_t v399;
  unint64_t v400;
  int v401;
  BOOL v402;
  unint64_t v403;
  unint64_t v404;
  int v405;
  BOOL v406;
  unint64_t v407;
  unint64_t v408;
  uint64_t v409;
  char v410;
  unsigned int v411;
  uint64_t v412;
  unint64_t v413;
  char v414;
  unint64_t v415;
  unint64_t v416;
  unint64_t v417;
  uint64_t v418;
  char v419;
  unsigned int v420;
  uint64_t v421;
  unint64_t v422;
  char v423;
  unint64_t v424;
  unint64_t v425;
  uint64_t v426;
  char v427;
  unsigned int v428;
  uint64_t v429;
  unint64_t v430;
  char v431;
  unint64_t v432;
  unint64_t v433;
  uint64_t v434;
  char v435;
  unsigned int v436;
  uint64_t v437;
  unint64_t v438;
  char v439;
  unint64_t v440;
  unint64_t v441;
  unint64_t v442;
  unint64_t v443;
  unint64_t v444;
  unint64_t v445;
  unint64_t v446;
  uint64_t v447;
  char v448;
  unsigned int v449;
  uint64_t v450;
  unint64_t v451;
  char v452;
  unint64_t v453;
  unint64_t v454;
  uint64_t v455;
  char v456;
  unsigned int v457;
  uint64_t v458;
  unint64_t v459;
  char v460;
  unint64_t v461;
  unint64_t v462;
  uint64_t v463;
  char v464;
  unsigned int v465;
  uint64_t v466;
  unint64_t v467;
  char v468;
  unint64_t v469;
  unint64_t v470;
  uint64_t v471;
  char v472;
  unsigned int v473;
  uint64_t v474;
  unint64_t v475;
  char v476;
  unint64_t v477;
  unint64_t v478;
  uint64_t v479;
  char v480;
  unsigned int v481;
  uint64_t v482;
  unint64_t v483;
  char v484;
  unint64_t v485;
  unint64_t v486;
  uint64_t v487;
  char v488;
  unsigned int v489;
  uint64_t v490;
  unint64_t v491;
  char v492;
  unint64_t v493;
  unint64_t v494;
  uint64_t v495;
  char v496;
  unsigned int v497;
  uint64_t v498;
  unint64_t v499;
  char v500;
  unint64_t v501;
  unint64_t v502;
  uint64_t v503;
  char v504;
  unsigned int v505;
  uint64_t v506;
  unint64_t v507;
  char v508;
  unint64_t v509;
  unint64_t v510;
  int v511;
  BOOL v512;
  unint64_t v513;
  unint64_t v514;
  int v515;
  BOOL v516;
  unint64_t v517;
  unint64_t v518;
  uint64_t v519;
  char v520;
  unsigned int v521;
  uint64_t v522;
  unint64_t v523;
  char v524;
  unint64_t v525;
  unint64_t v526;
  uint64_t v527;
  char v528;
  unsigned int v529;
  uint64_t v530;
  unint64_t v531;
  char v532;
  unint64_t v533;
  unint64_t v534;
  uint64_t v535;
  char v536;
  unsigned int v537;
  uint64_t v538;
  unint64_t v539;
  char v540;
  unint64_t v541;
  unint64_t v542;
  uint64_t v543;
  char v544;
  unsigned int v545;
  uint64_t v546;
  unint64_t v547;
  char v548;
  unint64_t v549;
  unint64_t v550;
  uint64_t v551;
  char v552;
  unsigned int v553;
  uint64_t v554;
  unint64_t v555;
  char v556;
  unint64_t v557;
  unint64_t v558;
  uint64_t v559;
  char v560;
  unsigned int v561;
  uint64_t v562;
  unint64_t v563;
  char v564;
  unint64_t v565;
  unint64_t v566;
  uint64_t v567;
  char v568;
  unsigned int v569;
  uint64_t v570;
  unint64_t v571;
  char v572;
  unint64_t v573;
  unint64_t v575;
  unint64_t v576;
  uint64_t v577;
  char v578;
  unsigned int v579;
  uint64_t v580;
  unint64_t v581;
  char v582;
  char v583;
  unsigned int v584;
  unint64_t v585;
  char v586;
  char v587;
  unsigned int v588;
  unint64_t v589;
  char v590;
  char v591;
  unsigned int v592;
  unint64_t v593;
  char v594;
  char v595;
  unsigned int v596;
  unint64_t v597;
  char v598;
  char v599;
  unsigned int v600;
  unint64_t v601;
  char v602;
  char v603;
  unsigned int v604;
  unint64_t v605;
  char v606;
  char v607;
  unsigned int v608;
  unint64_t v609;
  char v610;
  char v611;
  unsigned int v612;
  unint64_t v613;
  char v614;
  char v615;
  unsigned int v616;
  unint64_t v617;
  char v618;
  char v619;
  unsigned int v620;
  unint64_t v621;
  char v622;
  char v623;
  unsigned int v624;
  unint64_t v625;
  char v626;
  char v627;
  unsigned int v628;
  unint64_t v629;
  char v630;
  char v631;
  unsigned int v632;
  unint64_t v633;
  char v634;
  char v635;
  unsigned int v636;
  unint64_t v637;
  char v638;
  char v639;
  unsigned int v640;
  unint64_t v641;
  char v642;
  char v643;
  unsigned int v644;
  unint64_t v645;
  char v646;
  char v647;
  unsigned int v648;
  unint64_t v649;
  char v650;
  char v651;
  unsigned int v652;
  unint64_t v653;
  char v654;
  char v655;
  unsigned int v656;
  unint64_t v657;
  char v658;
  char v659;
  unsigned int v660;
  unint64_t v661;
  char v662;
  char v663;
  unsigned int v664;
  unint64_t v665;
  char v666;
  char v667;
  unsigned int v668;
  unint64_t v669;
  char v670;
  char v671;
  unsigned int v672;
  unint64_t v673;
  char v674;
  char v675;
  unsigned int v676;
  unint64_t v677;
  char v678;
  char v679;
  unsigned int v680;
  unint64_t v681;
  char v682;
  char v683;
  unsigned int v684;
  unint64_t v685;
  char v686;
  char v687;
  unsigned int v688;
  unint64_t v689;
  char v690;
  char v691;
  unsigned int v692;
  unint64_t v693;
  char v694;
  char v695;
  unsigned int v696;
  unint64_t v697;
  char v698;
  char v699;
  unsigned int v700;
  unint64_t v701;
  char v702;
  char v703;
  unsigned int v704;
  unint64_t v705;
  char v706;
  char v707;
  unsigned int v708;
  unint64_t v709;
  char v710;
  char v711;
  unsigned int v712;
  unint64_t v713;
  char v714;
  char v715;
  unsigned int v716;
  unint64_t v717;
  char v718;
  char v719;
  unsigned int v720;
  unint64_t v721;
  char v722;
  char v723;
  unsigned int v724;
  unint64_t v725;
  char v726;
  char v727;
  unsigned int v728;
  unint64_t v729;
  char v730;
  char v731;
  unsigned int v732;
  unint64_t v733;
  char v734;
  char v735;
  unsigned int v736;
  unint64_t v737;
  char v738;
  char v739;
  unsigned int v740;
  unint64_t v741;
  char v742;
  char v743;
  unsigned int v744;
  unint64_t v745;
  char v746;
  char v747;
  unsigned int v748;
  unint64_t v749;
  char v750;
  char v751;
  unsigned int v752;
  unint64_t v753;
  char v754;
  char v755;
  unsigned int v756;
  unint64_t v757;
  char v758;
  char v759;
  unsigned int v760;
  unint64_t v761;
  char v762;
  char v763;
  unsigned int v764;
  unint64_t v765;
  char v766;
  _BYTE *v767;

  v10 = (unint64_t *)((char *)a2 + 8);
  v9 = *((_QWORD *)a2 + 1);
  v12 = (char *)a2 + 24;
  v11 = *((unsigned __int8 *)a2 + 24);
  v13 = *((_QWORD *)a2 + 2);
  if (v9 < v13 && v11 == 0)
  {
    v17 = this;
    v18 = (_QWORD *)((char *)this + 356);
    v767 = (char *)a2 + 24;
    do
    {
      v19 = *(_QWORD *)a2;
      if (v9 > 0xFFFFFFFFFFFFFFF5 || v9 + 10 > v13)
      {
        v26 = 0;
        v27 = 0;
        v28 = 0;
        if (v9 > v13)
          v13 = v9;
        while (1)
        {
          if (v13 == v9)
          {
            v22 = 0;
            *v12 = 1;
            goto LABEL_25;
          }
          v29 = v9 + 1;
          v30 = *(_BYTE *)(v19 + v9);
          *v10 = v29;
          v28 |= (unint64_t)(v30 & 0x7F) << v26;
          if ((v30 & 0x80) == 0)
            break;
          v26 += 7;
          v9 = v29;
          v25 = v27++ > 8;
          if (v25)
          {
LABEL_20:
            v22 = 0;
            goto LABEL_25;
          }
        }
        if (*v12)
          v22 = 0;
        else
          v22 = v28;
      }
      else
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
        while (1)
        {
          v23 = v9 + 1;
          *v10 = v9 + 1;
          v24 = *(_BYTE *)(v19 + v9);
          v22 |= (unint64_t)(v24 & 0x7F) << v20;
          if ((v24 & 0x80) == 0)
            break;
          v20 += 7;
          v9 = v23;
          v25 = v21++ > 8;
          if (v25)
            goto LABEL_20;
        }
      }
LABEL_25:
      v31 = v22 & 7;
      v11 = *v12;
      if (*v12)
        v32 = 1;
      else
        v32 = v31 == 4;
      if (v32)
        break;
      v33 = v22 >> 3;
      if ((int)(v22 >> 3) > 400)
      {
        if ((int)v33 <= 900)
        {
          if ((int)v33 > 600)
          {
            if ((int)v33 > 700)
            {
              switch((int)v33)
              {
                case 801:
                  *v18 |= 0x100000uLL;
                  v68 = *v10;
                  if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((_QWORD *)a2 + 2))
                    goto LABEL_513;
                  *((_DWORD *)v17 + 30) = *(_DWORD *)(*(_QWORD *)a2 + v68);
                  goto LABEL_942;
                case 802:
                  *v18 |= 0x400uLL;
                  v440 = *v10;
                  if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v440 + 4 > *((_QWORD *)a2 + 2))
                    goto LABEL_513;
                  *((_DWORD *)v17 + 20) = *(_DWORD *)(*(_QWORD *)a2 + v440);
                  goto LABEL_942;
                case 803:
                  *v18 |= 0x200000uLL;
                  v441 = *v10;
                  if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v441 + 4 > *((_QWORD *)a2 + 2))
                    goto LABEL_513;
                  *((_DWORD *)v17 + 31) = *(_DWORD *)(*(_QWORD *)a2 + v441);
                  goto LABEL_942;
                case 804:
                  *v18 |= 0x800uLL;
                  v442 = *v10;
                  if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v442 + 4 > *((_QWORD *)a2 + 2))
                    goto LABEL_513;
                  *((_DWORD *)v17 + 21) = *(_DWORD *)(*(_QWORD *)a2 + v442);
LABEL_942:
                  *((_QWORD *)a2 + 1) += 4;
                  break;
                default:
                  if ((_DWORD)v33 == 701)
                  {
                    *v18 |= 0x800000000000uLL;
                    v461 = *((_QWORD *)a2 + 1);
                    v462 = *((_QWORD *)a2 + 2);
                    v463 = *(_QWORD *)a2;
                    if (v461 > 0xFFFFFFFFFFFFFFF5 || v461 + 10 > v462)
                    {
                      v707 = 0;
                      v708 = 0;
                      v466 = 0;
                      if (v462 <= v461)
                        v462 = *((_QWORD *)a2 + 1);
                      while (1)
                      {
                        if (v462 == v461)
                        {
                          LODWORD(v466) = 0;
                          *v12 = 1;
                          goto LABEL_1070;
                        }
                        v709 = v461 + 1;
                        v710 = *(_BYTE *)(v463 + v461);
                        *v10 = v709;
                        v466 |= (unint64_t)(v710 & 0x7F) << v707;
                        if ((v710 & 0x80) == 0)
                          break;
                        v707 += 7;
                        v461 = v709;
                        v25 = v708++ > 8;
                        if (v25)
                        {
LABEL_835:
                          LODWORD(v466) = 0;
                          goto LABEL_1070;
                        }
                      }
                      if (*v12)
                        LODWORD(v466) = 0;
                    }
                    else
                    {
                      v464 = 0;
                      v465 = 0;
                      v466 = 0;
                      while (1)
                      {
                        v467 = v461 + 1;
                        *v10 = v461 + 1;
                        v468 = *(_BYTE *)(v463 + v461);
                        v466 |= (unint64_t)(v468 & 0x7F) << v464;
                        if ((v468 & 0x80) == 0)
                          break;
                        v464 += 7;
                        v461 = v467;
                        v25 = v465++ > 8;
                        if (v25)
                          goto LABEL_835;
                      }
                    }
LABEL_1070:
                    *((_DWORD *)v17 + 57) = v466;
                  }
                  else
                  {
                    if ((_DWORD)v33 != 702)
                      goto LABEL_141;
                    *v18 |= 0x1000000000000uLL;
                    v78 = *((_QWORD *)a2 + 1);
                    v79 = *((_QWORD *)a2 + 2);
                    v80 = *(_QWORD *)a2;
                    if (v78 > 0xFFFFFFFFFFFFFFF5 || v78 + 10 > v79)
                    {
                      v611 = 0;
                      v612 = 0;
                      v83 = 0;
                      if (v79 <= v78)
                        v79 = *((_QWORD *)a2 + 1);
                      v12 = v767;
                      v17 = this;
                      while (1)
                      {
                        if (v79 == v78)
                        {
                          LODWORD(v83) = 0;
                          *v767 = 1;
                          goto LABEL_998;
                        }
                        v613 = v78 + 1;
                        v614 = *(_BYTE *)(v80 + v78);
                        *v10 = v613;
                        v83 |= (unint64_t)(v614 & 0x7F) << v611;
                        if ((v614 & 0x80) == 0)
                          break;
                        v611 += 7;
                        v78 = v613;
                        v25 = v612++ > 8;
                        if (v25)
                        {
LABEL_596:
                          LODWORD(v83) = 0;
                          goto LABEL_998;
                        }
                      }
                      if (*v767)
                        LODWORD(v83) = 0;
                    }
                    else
                    {
                      v81 = 0;
                      v82 = 0;
                      v83 = 0;
                      v12 = v767;
                      v17 = this;
                      while (1)
                      {
                        v84 = v78 + 1;
                        *v10 = v78 + 1;
                        v85 = *(_BYTE *)(v80 + v78);
                        v83 |= (unint64_t)(v85 & 0x7F) << v81;
                        if ((v85 & 0x80) == 0)
                          break;
                        v81 += 7;
                        v78 = v84;
                        v25 = v82++ > 8;
                        if (v25)
                          goto LABEL_596;
                      }
                    }
LABEL_998:
                    *((_DWORD *)v17 + 58) = v83;
                  }
                  break;
              }
            }
            else
            {
              switch((int)v33)
              {
                case 601:
                  v18[1] |= 0x400uLL;
                  v56 = *((_QWORD *)a2 + 1);
                  if (v56 >= *((_QWORD *)a2 + 2))
                  {
                    v59 = 0;
                    v12 = v767;
                    v17 = this;
                    *v767 = 1;
                  }
                  else
                  {
                    v57 = v56 + 1;
                    v58 = *(unsigned __int8 *)(*(_QWORD *)a2 + v56);
                    *((_QWORD *)a2 + 1) = v57;
                    v59 = v58 != 0;
                    v12 = v767;
                    v17 = this;
                  }
                  *((_BYTE *)v17 + 321) = v59;
                  goto LABEL_514;
                case 602:
                  *v18 |= 0x4000uLL;
                  v407 = *((_QWORD *)a2 + 1);
                  v408 = *((_QWORD *)a2 + 2);
                  v409 = *(_QWORD *)a2;
                  if (v407 <= 0xFFFFFFFFFFFFFFF5 && v407 + 10 <= v408)
                  {
                    v410 = 0;
                    v411 = 0;
                    v412 = 0;
                    v12 = v767;
                    v17 = this;
                    do
                    {
                      v413 = v407 + 1;
                      *v10 = v407 + 1;
                      v414 = *(_BYTE *)(v409 + v407);
                      v412 |= (unint64_t)(v414 & 0x7F) << v410;
                      if ((v414 & 0x80) == 0)
                        goto LABEL_1052;
                      v410 += 7;
                      v407 = v413;
                      v25 = v411++ > 8;
                    }
                    while (!v25);
LABEL_788:
                    LODWORD(v412) = 0;
                    goto LABEL_1052;
                  }
                  v683 = 0;
                  v684 = 0;
                  v412 = 0;
                  if (v408 <= v407)
                    v408 = *((_QWORD *)a2 + 1);
                  v12 = v767;
                  v17 = this;
                  while (2)
                  {
                    if (v408 == v407)
                    {
                      LODWORD(v412) = 0;
                      *v767 = 1;
                    }
                    else
                    {
                      v685 = v407 + 1;
                      v686 = *(_BYTE *)(v409 + v407);
                      *v10 = v685;
                      v412 |= (unint64_t)(v686 & 0x7F) << v683;
                      if (v686 < 0)
                      {
                        v683 += 7;
                        v407 = v685;
                        v25 = v684++ > 8;
                        if (v25)
                          goto LABEL_788;
                        continue;
                      }
                      if (*v767)
                        LODWORD(v412) = 0;
                    }
                    break;
                  }
LABEL_1052:
                  *((_DWORD *)v17 + 24) = v412;
                  goto LABEL_514;
                case 603:
                  *v18 |= 0x1000uLL;
                  v415 = *v10;
                  if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v415 + 4 > *((_QWORD *)a2 + 2))
                    goto LABEL_401;
                  v17 = this;
                  *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v415);
                  goto LABEL_940;
                case 604:
                  *v18 |= 0x100000000000uLL;
                  v416 = *((_QWORD *)a2 + 1);
                  v417 = *((_QWORD *)a2 + 2);
                  v418 = *(_QWORD *)a2;
                  if (v416 <= 0xFFFFFFFFFFFFFFF5 && v416 + 10 <= v417)
                  {
                    v419 = 0;
                    v420 = 0;
                    v421 = 0;
                    v12 = v767;
                    v17 = this;
                    do
                    {
                      v422 = v416 + 1;
                      *v10 = v416 + 1;
                      v423 = *(_BYTE *)(v418 + v416);
                      v421 |= (unint64_t)(v423 & 0x7F) << v419;
                      if ((v423 & 0x80) == 0)
                        goto LABEL_1055;
                      v419 += 7;
                      v416 = v422;
                      v25 = v420++ > 8;
                    }
                    while (!v25);
LABEL_796:
                    LODWORD(v421) = 0;
                    goto LABEL_1055;
                  }
                  v687 = 0;
                  v688 = 0;
                  v421 = 0;
                  if (v417 <= v416)
                    v417 = *((_QWORD *)a2 + 1);
                  v12 = v767;
                  v17 = this;
                  while (2)
                  {
                    if (v417 == v416)
                    {
                      LODWORD(v421) = 0;
                      *v767 = 1;
                    }
                    else
                    {
                      v689 = v416 + 1;
                      v690 = *(_BYTE *)(v418 + v416);
                      *v10 = v689;
                      v421 |= (unint64_t)(v690 & 0x7F) << v687;
                      if (v690 < 0)
                      {
                        v687 += 7;
                        v416 = v689;
                        v25 = v688++ > 8;
                        if (v25)
                          goto LABEL_796;
                        continue;
                      }
                      if (*v767)
                        LODWORD(v421) = 0;
                    }
                    break;
                  }
LABEL_1055:
                  *((_DWORD *)v17 + 54) = v421;
                  goto LABEL_514;
                case 605:
                  *v18 |= 0x100000000000000uLL;
                  v424 = *((_QWORD *)a2 + 1);
                  v425 = *((_QWORD *)a2 + 2);
                  v426 = *(_QWORD *)a2;
                  if (v424 <= 0xFFFFFFFFFFFFFFF5 && v424 + 10 <= v425)
                  {
                    v427 = 0;
                    v428 = 0;
                    v429 = 0;
                    v12 = v767;
                    v17 = this;
                    do
                    {
                      v430 = v424 + 1;
                      *v10 = v424 + 1;
                      v431 = *(_BYTE *)(v426 + v424);
                      v429 |= (unint64_t)(v431 & 0x7F) << v427;
                      if ((v431 & 0x80) == 0)
                        goto LABEL_1058;
                      v427 += 7;
                      v424 = v430;
                      v25 = v428++ > 8;
                    }
                    while (!v25);
LABEL_804:
                    LODWORD(v429) = 0;
                    goto LABEL_1058;
                  }
                  v691 = 0;
                  v692 = 0;
                  v429 = 0;
                  if (v425 <= v424)
                    v425 = *((_QWORD *)a2 + 1);
                  v12 = v767;
                  v17 = this;
                  while (2)
                  {
                    if (v425 == v424)
                    {
                      LODWORD(v429) = 0;
                      *v767 = 1;
                    }
                    else
                    {
                      v693 = v424 + 1;
                      v694 = *(_BYTE *)(v426 + v424);
                      *v10 = v693;
                      v429 |= (unint64_t)(v694 & 0x7F) << v691;
                      if (v694 < 0)
                      {
                        v691 += 7;
                        v424 = v693;
                        v25 = v692++ > 8;
                        if (v25)
                          goto LABEL_804;
                        continue;
                      }
                      if (*v767)
                        LODWORD(v429) = 0;
                    }
                    break;
                  }
LABEL_1058:
                  *((_DWORD *)v17 + 66) = v429;
                  goto LABEL_514;
                case 606:
                  *v18 |= 0x40uLL;
                  v432 = *((_QWORD *)a2 + 1);
                  v433 = *((_QWORD *)a2 + 2);
                  v434 = *(_QWORD *)a2;
                  if (v432 <= 0xFFFFFFFFFFFFFFF5 && v432 + 10 <= v433)
                  {
                    v435 = 0;
                    v436 = 0;
                    v437 = 0;
                    v12 = v767;
                    v17 = this;
                    do
                    {
                      v438 = v432 + 1;
                      *v10 = v432 + 1;
                      v439 = *(_BYTE *)(v434 + v432);
                      v437 |= (unint64_t)(v439 & 0x7F) << v435;
                      if ((v439 & 0x80) == 0)
                        goto LABEL_1061;
                      v435 += 7;
                      v432 = v438;
                      v25 = v436++ > 8;
                    }
                    while (!v25);
LABEL_812:
                    v437 = 0;
                    goto LABEL_1061;
                  }
                  v695 = 0;
                  v696 = 0;
                  v437 = 0;
                  if (v433 <= v432)
                    v433 = *((_QWORD *)a2 + 1);
                  v12 = v767;
                  v17 = this;
                  break;
                default:
                  goto LABEL_141;
              }
              while (1)
              {
                if (v433 == v432)
                {
                  v437 = 0;
                  *v767 = 1;
                  goto LABEL_1061;
                }
                v697 = v432 + 1;
                v698 = *(_BYTE *)(v434 + v432);
                *v10 = v697;
                v437 |= (unint64_t)(v698 & 0x7F) << v695;
                if ((v698 & 0x80) == 0)
                  break;
                v695 += 7;
                v432 = v697;
                v25 = v696++ > 8;
                if (v25)
                  goto LABEL_812;
              }
              if (*v767)
                v437 = 0;
LABEL_1061:
              *((_QWORD *)v17 + 7) = v437;
            }
          }
          else
          {
            switch((int)v33)
            {
              case 401:
                *v18 |= 0x20000000000000uLL;
                v36 = *((_QWORD *)a2 + 1);
                v37 = *((_QWORD *)a2 + 2);
                v38 = *(_QWORD *)a2;
                if (v36 <= 0xFFFFFFFFFFFFFFF5 && v36 + 10 <= v37)
                {
                  v39 = 0;
                  v40 = 0;
                  v41 = 0;
                  do
                  {
                    v42 = v36 + 1;
                    *v10 = v36 + 1;
                    v43 = *(_BYTE *)(v38 + v36);
                    v41 |= (unint64_t)(v43 & 0x7F) << v39;
                    if ((v43 & 0x80) == 0)
                      goto LABEL_992;
                    v39 += 7;
                    v36 = v42;
                    v25 = v40++ > 8;
                  }
                  while (!v25);
LABEL_576:
                  LODWORD(v41) = 0;
                  goto LABEL_992;
                }
                v603 = 0;
                v604 = 0;
                v41 = 0;
                if (v37 <= v36)
                  v37 = *((_QWORD *)a2 + 1);
                while (2)
                {
                  if (v37 == v36)
                  {
                    LODWORD(v41) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v605 = v36 + 1;
                    v606 = *(_BYTE *)(v38 + v36);
                    *v10 = v605;
                    v41 |= (unint64_t)(v606 & 0x7F) << v603;
                    if (v606 < 0)
                    {
                      v603 += 7;
                      v36 = v605;
                      v25 = v604++ > 8;
                      if (v25)
                        goto LABEL_576;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v41) = 0;
                  }
                  break;
                }
LABEL_992:
                *((_DWORD *)v17 + 63) = v41;
                goto LABEL_514;
              case 402:
                *v18 |= 0x40000000000000uLL;
                v207 = *((_QWORD *)a2 + 1);
                v208 = *((_QWORD *)a2 + 2);
                v209 = *(_QWORD *)a2;
                if (v207 <= 0xFFFFFFFFFFFFFFF5 && v207 + 10 <= v208)
                {
                  v210 = 0;
                  v211 = 0;
                  v212 = 0;
                  do
                  {
                    v213 = v207 + 1;
                    *v10 = v207 + 1;
                    v214 = *(_BYTE *)(v209 + v207);
                    v212 |= (unint64_t)(v214 & 0x7F) << v210;
                    if ((v214 & 0x80) == 0)
                      goto LABEL_1025;
                    v210 += 7;
                    v207 = v213;
                    v25 = v211++ > 8;
                  }
                  while (!v25);
LABEL_659:
                  LODWORD(v212) = 0;
                  goto LABEL_1025;
                }
                v647 = 0;
                v648 = 0;
                v212 = 0;
                if (v208 <= v207)
                  v208 = *((_QWORD *)a2 + 1);
                while (2)
                {
                  if (v208 == v207)
                  {
                    LODWORD(v212) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v649 = v207 + 1;
                    v650 = *(_BYTE *)(v209 + v207);
                    *v10 = v649;
                    v212 |= (unint64_t)(v650 & 0x7F) << v647;
                    if (v650 < 0)
                    {
                      v647 += 7;
                      v207 = v649;
                      v25 = v648++ > 8;
                      if (v25)
                        goto LABEL_659;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v212) = 0;
                  }
                  break;
                }
LABEL_1025:
                *((_DWORD *)v17 + 64) = v212;
                goto LABEL_514;
              case 403:
                *v18 |= 0x4000000uLL;
                v215 = *((_QWORD *)a2 + 1);
                v216 = *((_QWORD *)a2 + 2);
                v217 = *(_QWORD *)a2;
                if (v215 <= 0xFFFFFFFFFFFFFFF5 && v215 + 10 <= v216)
                {
                  v218 = 0;
                  v219 = 0;
                  v220 = 0;
                  do
                  {
                    v221 = v215 + 1;
                    *v10 = v215 + 1;
                    v222 = *(_BYTE *)(v217 + v215);
                    v220 |= (unint64_t)(v222 & 0x7F) << v218;
                    if ((v222 & 0x80) == 0)
                      goto LABEL_1028;
                    v218 += 7;
                    v215 = v221;
                    v25 = v219++ > 8;
                  }
                  while (!v25);
LABEL_666:
                  LODWORD(v220) = 0;
                  goto LABEL_1028;
                }
                v651 = 0;
                v652 = 0;
                v220 = 0;
                if (v216 <= v215)
                  v216 = *((_QWORD *)a2 + 1);
                while (2)
                {
                  if (v216 == v215)
                  {
                    LODWORD(v220) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v653 = v215 + 1;
                    v654 = *(_BYTE *)(v217 + v215);
                    *v10 = v653;
                    v220 |= (unint64_t)(v654 & 0x7F) << v651;
                    if (v654 < 0)
                    {
                      v651 += 7;
                      v215 = v653;
                      v25 = v652++ > 8;
                      if (v25)
                        goto LABEL_666;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v220) = 0;
                  }
                  break;
                }
LABEL_1028:
                *((_DWORD *)v17 + 36) = v220;
                goto LABEL_514;
              case 404:
                *v18 |= 0x8000000uLL;
                v223 = *((_QWORD *)a2 + 1);
                v224 = *((_QWORD *)a2 + 2);
                v225 = *(_QWORD *)a2;
                if (v223 <= 0xFFFFFFFFFFFFFFF5 && v223 + 10 <= v224)
                {
                  v226 = 0;
                  v227 = 0;
                  v228 = 0;
                  do
                  {
                    v229 = v223 + 1;
                    *v10 = v223 + 1;
                    v230 = *(_BYTE *)(v225 + v223);
                    v228 |= (unint64_t)(v230 & 0x7F) << v226;
                    if ((v230 & 0x80) == 0)
                      goto LABEL_1031;
                    v226 += 7;
                    v223 = v229;
                    v25 = v227++ > 8;
                  }
                  while (!v25);
LABEL_673:
                  LODWORD(v228) = 0;
                  goto LABEL_1031;
                }
                v655 = 0;
                v656 = 0;
                v228 = 0;
                if (v224 <= v223)
                  v224 = *((_QWORD *)a2 + 1);
                while (2)
                {
                  if (v224 == v223)
                  {
                    LODWORD(v228) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v657 = v223 + 1;
                    v658 = *(_BYTE *)(v225 + v223);
                    *v10 = v657;
                    v228 |= (unint64_t)(v658 & 0x7F) << v655;
                    if (v658 < 0)
                    {
                      v655 += 7;
                      v223 = v657;
                      v25 = v656++ > 8;
                      if (v25)
                        goto LABEL_673;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v228) = 0;
                  }
                  break;
                }
LABEL_1031:
                *((_DWORD *)v17 + 37) = v228;
                goto LABEL_514;
              case 405:
                v18[1] |= 0x20000uLL;
                v231 = *((_QWORD *)a2 + 1);
                if (v231 >= *((_QWORD *)a2 + 2))
                {
                  v234 = 0;
                  *v12 = 1;
                }
                else
                {
                  v232 = v231 + 1;
                  v233 = *(unsigned __int8 *)(*(_QWORD *)a2 + v231);
                  *((_QWORD *)a2 + 1) = v232;
                  v234 = v233 != 0;
                }
                *((_BYTE *)v17 + 328) = v234;
                goto LABEL_514;
              case 406:
                v18[1] |= 0x4000uLL;
                v235 = *((_QWORD *)a2 + 1);
                if (v235 >= *((_QWORD *)a2 + 2))
                {
                  v238 = 0;
                  *v12 = 1;
                }
                else
                {
                  v236 = v235 + 1;
                  v237 = *(unsigned __int8 *)(*(_QWORD *)a2 + v235);
                  *((_QWORD *)a2 + 1) = v236;
                  v238 = v237 != 0;
                }
                *((_BYTE *)v17 + 325) = v238;
                goto LABEL_514;
              case 407:
                *v18 |= 0x2000000000uLL;
                v239 = *((_QWORD *)a2 + 1);
                v240 = *((_QWORD *)a2 + 2);
                v241 = *(_QWORD *)a2;
                if (v239 <= 0xFFFFFFFFFFFFFFF5 && v239 + 10 <= v240)
                {
                  v242 = 0;
                  v243 = 0;
                  v244 = 0;
                  do
                  {
                    v245 = v239 + 1;
                    *v10 = v239 + 1;
                    v246 = *(_BYTE *)(v241 + v239);
                    v244 |= (unint64_t)(v246 & 0x7F) << v242;
                    if ((v246 & 0x80) == 0)
                      goto LABEL_1034;
                    v242 += 7;
                    v239 = v245;
                    v25 = v243++ > 8;
                  }
                  while (!v25);
LABEL_684:
                  LODWORD(v244) = 0;
                  goto LABEL_1034;
                }
                v659 = 0;
                v660 = 0;
                v244 = 0;
                if (v240 <= v239)
                  v240 = *((_QWORD *)a2 + 1);
                while (2)
                {
                  if (v240 == v239)
                  {
                    LODWORD(v244) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v661 = v239 + 1;
                    v662 = *(_BYTE *)(v241 + v239);
                    *v10 = v661;
                    v244 |= (unint64_t)(v662 & 0x7F) << v659;
                    if (v662 < 0)
                    {
                      v659 += 7;
                      v239 = v661;
                      v25 = v660++ > 8;
                      if (v25)
                        goto LABEL_684;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v244) = 0;
                  }
                  break;
                }
LABEL_1034:
                *((_DWORD *)v17 + 47) = v244;
                goto LABEL_514;
              case 408:
                *v18 |= 0x80000uLL;
                v247 = *((_QWORD *)a2 + 1);
                v248 = *((_QWORD *)a2 + 2);
                v249 = *(_QWORD *)a2;
                if (v247 <= 0xFFFFFFFFFFFFFFF5 && v247 + 10 <= v248)
                {
                  v250 = 0;
                  v251 = 0;
                  v252 = 0;
                  do
                  {
                    v253 = v247 + 1;
                    *v10 = v247 + 1;
                    v254 = *(_BYTE *)(v249 + v247);
                    v252 |= (unint64_t)(v254 & 0x7F) << v250;
                    if ((v254 & 0x80) == 0)
                      goto LABEL_1037;
                    v250 += 7;
                    v247 = v253;
                    v25 = v251++ > 8;
                  }
                  while (!v25);
LABEL_691:
                  LODWORD(v252) = 0;
                  goto LABEL_1037;
                }
                v663 = 0;
                v664 = 0;
                v252 = 0;
                if (v248 <= v247)
                  v248 = *((_QWORD *)a2 + 1);
                while (2)
                {
                  if (v248 == v247)
                  {
                    LODWORD(v252) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v665 = v247 + 1;
                    v666 = *(_BYTE *)(v249 + v247);
                    *v10 = v665;
                    v252 |= (unint64_t)(v666 & 0x7F) << v663;
                    if (v666 < 0)
                    {
                      v663 += 7;
                      v247 = v665;
                      v25 = v664++ > 8;
                      if (v25)
                        goto LABEL_691;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v252) = 0;
                  }
                  break;
                }
LABEL_1037:
                *((_DWORD *)v17 + 29) = v252;
                goto LABEL_514;
              case 409:
                *v18 |= 0x1000000000uLL;
                v255 = *((_QWORD *)a2 + 1);
                v256 = *((_QWORD *)a2 + 2);
                v257 = *(_QWORD *)a2;
                if (v255 <= 0xFFFFFFFFFFFFFFF5 && v255 + 10 <= v256)
                {
                  v258 = 0;
                  v259 = 0;
                  v260 = 0;
                  do
                  {
                    v261 = v255 + 1;
                    *v10 = v255 + 1;
                    v262 = *(_BYTE *)(v257 + v255);
                    v260 |= (unint64_t)(v262 & 0x7F) << v258;
                    if ((v262 & 0x80) == 0)
                      goto LABEL_1040;
                    v258 += 7;
                    v255 = v261;
                    v25 = v259++ > 8;
                  }
                  while (!v25);
LABEL_698:
                  LODWORD(v260) = 0;
                  goto LABEL_1040;
                }
                v667 = 0;
                v668 = 0;
                v260 = 0;
                if (v256 <= v255)
                  v256 = *((_QWORD *)a2 + 1);
                while (2)
                {
                  if (v256 == v255)
                  {
                    LODWORD(v260) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v669 = v255 + 1;
                    v670 = *(_BYTE *)(v257 + v255);
                    *v10 = v669;
                    v260 |= (unint64_t)(v670 & 0x7F) << v667;
                    if (v670 < 0)
                    {
                      v667 += 7;
                      v255 = v669;
                      v25 = v668++ > 8;
                      if (v25)
                        goto LABEL_698;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v260) = 0;
                  }
                  break;
                }
LABEL_1040:
                *((_DWORD *)v17 + 46) = v260;
                goto LABEL_514;
              default:
                switch((int)v33)
                {
                  case 501:
                    *v18 |= 0x4000000000000000uLL;
                    v69 = *v10;
                    if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((_QWORD *)a2 + 2))
                      goto LABEL_401;
                    v17 = this;
                    *((_DWORD *)this + 72) = *(_DWORD *)(*(_QWORD *)a2 + v69);
                    goto LABEL_940;
                  case 502:
                    *v18 |= 0x8000000000000000;
                    v443 = *v10;
                    if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v443 + 4 > *((_QWORD *)a2 + 2))
                      goto LABEL_401;
                    v17 = this;
                    *((_DWORD *)this + 73) = *(_DWORD *)(*(_QWORD *)a2 + v443);
                    goto LABEL_940;
                  case 503:
                    *v18 |= 0x200000000000000uLL;
                    v444 = *v10;
                    if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v444 + 4 > *((_QWORD *)a2 + 2))
                      goto LABEL_401;
                    v17 = this;
                    *((_DWORD *)this + 67) = *(_DWORD *)(*(_QWORD *)a2 + v444);
                    goto LABEL_940;
                  case 504:
                    *v18 |= 0x800000000000000uLL;
                    v445 = *((_QWORD *)a2 + 1);
                    v446 = *((_QWORD *)a2 + 2);
                    v447 = *(_QWORD *)a2;
                    if (v445 <= 0xFFFFFFFFFFFFFFF5 && v445 + 10 <= v446)
                    {
                      v448 = 0;
                      v449 = 0;
                      v450 = 0;
                      v12 = v767;
                      v17 = this;
                      do
                      {
                        v451 = v445 + 1;
                        *v10 = v445 + 1;
                        v452 = *(_BYTE *)(v447 + v445);
                        v450 |= (unint64_t)(v452 & 0x7F) << v448;
                        if ((v452 & 0x80) == 0)
                          goto LABEL_1064;
                        v448 += 7;
                        v445 = v451;
                        v25 = v449++ > 8;
                      }
                      while (!v25);
LABEL_820:
                      LODWORD(v450) = 0;
                      goto LABEL_1064;
                    }
                    v699 = 0;
                    v700 = 0;
                    v450 = 0;
                    if (v446 <= v445)
                      v446 = *((_QWORD *)a2 + 1);
                    v12 = v767;
                    v17 = this;
                    while (2)
                    {
                      if (v446 == v445)
                      {
                        LODWORD(v450) = 0;
                        *v767 = 1;
                      }
                      else
                      {
                        v701 = v445 + 1;
                        v702 = *(_BYTE *)(v447 + v445);
                        *v10 = v701;
                        v450 |= (unint64_t)(v702 & 0x7F) << v699;
                        if (v702 < 0)
                        {
                          v699 += 7;
                          v445 = v701;
                          v25 = v700++ > 8;
                          if (v25)
                            goto LABEL_820;
                          continue;
                        }
                        if (*v767)
                          LODWORD(v450) = 0;
                      }
                      break;
                    }
LABEL_1064:
                    *((_DWORD *)v17 + 69) = v450;
                    goto LABEL_514;
                  case 505:
                    *v18 |= 0x2000000000000000uLL;
                    v453 = *((_QWORD *)a2 + 1);
                    v454 = *((_QWORD *)a2 + 2);
                    v455 = *(_QWORD *)a2;
                    if (v453 <= 0xFFFFFFFFFFFFFFF5 && v453 + 10 <= v454)
                    {
                      v456 = 0;
                      v457 = 0;
                      v458 = 0;
                      v12 = v767;
                      v17 = this;
                      do
                      {
                        v459 = v453 + 1;
                        *v10 = v453 + 1;
                        v460 = *(_BYTE *)(v455 + v453);
                        v458 |= (unint64_t)(v460 & 0x7F) << v456;
                        if ((v460 & 0x80) == 0)
                          goto LABEL_1067;
                        v456 += 7;
                        v453 = v459;
                        v25 = v457++ > 8;
                      }
                      while (!v25);
LABEL_828:
                      LODWORD(v458) = 0;
                      goto LABEL_1067;
                    }
                    v703 = 0;
                    v704 = 0;
                    v458 = 0;
                    if (v454 <= v453)
                      v454 = *((_QWORD *)a2 + 1);
                    v12 = v767;
                    v17 = this;
                    break;
                  default:
                    goto LABEL_141;
                }
                break;
            }
            while (1)
            {
              if (v454 == v453)
              {
                LODWORD(v458) = 0;
                *v767 = 1;
                goto LABEL_1067;
              }
              v705 = v453 + 1;
              v706 = *(_BYTE *)(v455 + v453);
              *v10 = v705;
              v458 |= (unint64_t)(v706 & 0x7F) << v703;
              if ((v706 & 0x80) == 0)
                break;
              v703 += 7;
              v453 = v705;
              v25 = v704++ > 8;
              if (v25)
                goto LABEL_828;
            }
            if (*v767)
              LODWORD(v458) = 0;
LABEL_1067:
            *((_DWORD *)v17 + 71) = v458;
          }
        }
        else if ((int)v33 <= 1200)
        {
          if ((int)v33 <= 1100)
          {
            switch((_DWORD)v33)
            {
              case 0x385:
                *v18 |= 0x100uLL;
                v123 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v123 + 4 > *((_QWORD *)a2 + 2))
                {
LABEL_401:
                  v12 = v767;
                  v17 = this;
LABEL_513:
                  *v12 = 1;
                }
                else
                {
                  v17 = this;
                  *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v123);
LABEL_940:
                  *((_QWORD *)a2 + 1) += 4;
                  v12 = v767;
                }
                break;
              case 0x386:
                v18[1] |= 0x200000uLL;
                v124 = *((_QWORD *)a2 + 1);
                if (v124 >= *((_QWORD *)a2 + 2))
                {
                  v127 = 0;
                  v12 = v767;
                  v17 = this;
                  *v767 = 1;
                }
                else
                {
                  v125 = v124 + 1;
                  v126 = *(unsigned __int8 *)(*(_QWORD *)a2 + v124);
                  *((_QWORD *)a2 + 1) = v125;
                  v127 = v126 != 0;
                  v12 = v767;
                  v17 = this;
                }
                *((_BYTE *)v17 + 332) = v127;
                break;
              case 0x3E9:
                v18[1] |= 4uLL;
                v70 = *((_QWORD *)a2 + 1);
                v71 = *((_QWORD *)a2 + 2);
                v72 = *(_QWORD *)a2;
                if (v70 > 0xFFFFFFFFFFFFFFF5 || v70 + 10 > v71)
                {
                  v587 = 0;
                  v588 = 0;
                  v75 = 0;
                  if (v71 <= v70)
                    v71 = *((_QWORD *)a2 + 1);
                  v12 = v767;
                  v17 = this;
                  while (1)
                  {
                    if (v71 == v70)
                    {
                      LODWORD(v75) = 0;
                      *v767 = 1;
                      goto LABEL_953;
                    }
                    v589 = v70 + 1;
                    v590 = *(_BYTE *)(v72 + v70);
                    *v10 = v589;
                    v75 |= (unint64_t)(v590 & 0x7F) << v587;
                    if ((v590 & 0x80) == 0)
                      break;
                    v587 += 7;
                    v70 = v589;
                    v25 = v588++ > 8;
                    if (v25)
                    {
LABEL_541:
                      LODWORD(v75) = 0;
                      goto LABEL_953;
                    }
                  }
                  if (*v767)
                    LODWORD(v75) = 0;
                }
                else
                {
                  v73 = 0;
                  v74 = 0;
                  v75 = 0;
                  v12 = v767;
                  v17 = this;
                  while (1)
                  {
                    v76 = v70 + 1;
                    *v10 = v70 + 1;
                    v77 = *(_BYTE *)(v72 + v70);
                    v75 |= (unint64_t)(v77 & 0x7F) << v73;
                    if ((v77 & 0x80) == 0)
                      break;
                    v73 += 7;
                    v70 = v76;
                    v25 = v74++ > 8;
                    if (v25)
                      goto LABEL_541;
                  }
                }
LABEL_953:
                *((_DWORD *)v17 + 76) = v75;
                break;
              default:
LABEL_141:
                v128 = v7;
                v129 = a6;
                v130 = v18;
                v131 = v8;
                v132 = a7;
                result = PB::Reader::skip(a2, v33, v31, 0);
                a7 = v132;
                v8 = v131;
                v18 = v130;
                a6 = v129;
                v7 = v128;
                v12 = v767;
                v17 = this;
                if (!(_DWORD)result)
                  return result;
                break;
            }
          }
          else
          {
            switch((int)v33)
            {
              case 1101:
                *v18 |= 0x10000000uLL;
                v60 = *((_QWORD *)a2 + 1);
                v61 = *((_QWORD *)a2 + 2);
                v62 = *(_QWORD *)a2;
                if (v60 <= 0xFFFFFFFFFFFFFFF5 && v60 + 10 <= v61)
                {
                  v63 = 0;
                  v64 = 0;
                  v65 = 0;
                  v12 = v767;
                  v17 = this;
                  do
                  {
                    v66 = v60 + 1;
                    *v10 = v60 + 1;
                    v67 = *(_BYTE *)(v62 + v60);
                    v65 |= (unint64_t)(v67 & 0x7F) << v63;
                    if ((v67 & 0x80) == 0)
                      goto LABEL_950;
                    v63 += 7;
                    v60 = v66;
                    v25 = v64++ > 8;
                  }
                  while (!v25);
LABEL_533:
                  LODWORD(v65) = 0;
                  goto LABEL_950;
                }
                v583 = 0;
                v584 = 0;
                v65 = 0;
                if (v61 <= v60)
                  v61 = *((_QWORD *)a2 + 1);
                v12 = v767;
                v17 = this;
                while (2)
                {
                  if (v61 == v60)
                  {
                    LODWORD(v65) = 0;
                    *v767 = 1;
                  }
                  else
                  {
                    v585 = v60 + 1;
                    v586 = *(_BYTE *)(v62 + v60);
                    *v10 = v585;
                    v65 |= (unint64_t)(v586 & 0x7F) << v583;
                    if (v586 < 0)
                    {
                      v583 += 7;
                      v60 = v585;
                      v25 = v584++ > 8;
                      if (v25)
                        goto LABEL_533;
                      continue;
                    }
                    if (*v767)
                      LODWORD(v65) = 0;
                  }
                  break;
                }
LABEL_950:
                *((_DWORD *)v17 + 38) = v65;
                goto LABEL_514;
              case 1102:
                *v18 |= 0x40000000uLL;
                v94 = *((_QWORD *)a2 + 1);
                v95 = *((_QWORD *)a2 + 2);
                v96 = *(_QWORD *)a2;
                if (v94 <= 0xFFFFFFFFFFFFFFF5 && v94 + 10 <= v95)
                {
                  v97 = 0;
                  v98 = 0;
                  v99 = 0;
                  v12 = v767;
                  v17 = this;
                  do
                  {
                    v100 = v94 + 1;
                    *v10 = v94 + 1;
                    v101 = *(_BYTE *)(v96 + v94);
                    v99 |= (unint64_t)(v101 & 0x7F) << v97;
                    if ((v101 & 0x80) == 0)
                      goto LABEL_956;
                    v97 += 7;
                    v94 = v100;
                    v25 = v98++ > 8;
                  }
                  while (!v25);
LABEL_549:
                  LODWORD(v99) = 0;
                  goto LABEL_956;
                }
                v591 = 0;
                v592 = 0;
                v99 = 0;
                if (v95 <= v94)
                  v95 = *((_QWORD *)a2 + 1);
                v12 = v767;
                v17 = this;
                while (2)
                {
                  if (v95 == v94)
                  {
                    LODWORD(v99) = 0;
                    *v767 = 1;
                  }
                  else
                  {
                    v593 = v94 + 1;
                    v594 = *(_BYTE *)(v96 + v94);
                    *v10 = v593;
                    v99 |= (unint64_t)(v594 & 0x7F) << v591;
                    if (v594 < 0)
                    {
                      v591 += 7;
                      v94 = v593;
                      v25 = v592++ > 8;
                      if (v25)
                        goto LABEL_549;
                      continue;
                    }
                    if (*v767)
                      LODWORD(v99) = 0;
                  }
                  break;
                }
LABEL_956:
                *((_DWORD *)v17 + 40) = v99;
                goto LABEL_514;
              case 1103:
                v18[1] |= 0x1000000000uLL;
                v102 = *((_QWORD *)a2 + 1);
                if (v102 >= *((_QWORD *)a2 + 2))
                {
                  v105 = 0;
                  v12 = v767;
                  v17 = this;
                  *v767 = 1;
                }
                else
                {
                  v103 = v102 + 1;
                  v104 = *(unsigned __int8 *)(*(_QWORD *)a2 + v102);
                  *((_QWORD *)a2 + 1) = v103;
                  v105 = v104 != 0;
                  v12 = v767;
                  v17 = this;
                }
                *((_BYTE *)v17 + 347) = v105;
                goto LABEL_514;
              case 1104:
                *v18 |= 0x80000000uLL;
                v106 = *((_QWORD *)a2 + 1);
                v107 = *((_QWORD *)a2 + 2);
                v108 = *(_QWORD *)a2;
                if (v106 <= 0xFFFFFFFFFFFFFFF5 && v106 + 10 <= v107)
                {
                  v109 = 0;
                  v110 = 0;
                  v111 = 0;
                  v12 = v767;
                  v17 = this;
                  do
                  {
                    v112 = v106 + 1;
                    *v10 = v106 + 1;
                    v113 = *(_BYTE *)(v108 + v106);
                    v111 |= (unint64_t)(v113 & 0x7F) << v109;
                    if ((v113 & 0x80) == 0)
                      goto LABEL_959;
                    v109 += 7;
                    v106 = v112;
                    v25 = v110++ > 8;
                  }
                  while (!v25);
LABEL_559:
                  LODWORD(v111) = 0;
                  goto LABEL_959;
                }
                v595 = 0;
                v596 = 0;
                v111 = 0;
                if (v107 <= v106)
                  v107 = *((_QWORD *)a2 + 1);
                v12 = v767;
                v17 = this;
                while (2)
                {
                  if (v107 == v106)
                  {
                    LODWORD(v111) = 0;
                    *v767 = 1;
                  }
                  else
                  {
                    v597 = v106 + 1;
                    v598 = *(_BYTE *)(v108 + v106);
                    *v10 = v597;
                    v111 |= (unint64_t)(v598 & 0x7F) << v595;
                    if (v598 < 0)
                    {
                      v595 += 7;
                      v106 = v597;
                      v25 = v596++ > 8;
                      if (v25)
                        goto LABEL_559;
                      continue;
                    }
                    if (*v767)
                      LODWORD(v111) = 0;
                  }
                  break;
                }
LABEL_959:
                *((_DWORD *)v17 + 41) = v111;
                goto LABEL_514;
              case 1105:
                *v18 |= 0x20000000uLL;
                v114 = *((_QWORD *)a2 + 1);
                v115 = *((_QWORD *)a2 + 2);
                v116 = *(_QWORD *)a2;
                if (v114 <= 0xFFFFFFFFFFFFFFF5 && v114 + 10 <= v115)
                {
                  v117 = 0;
                  v118 = 0;
                  v119 = 0;
                  v12 = v767;
                  v17 = this;
                  do
                  {
                    v120 = v114 + 1;
                    *v10 = v114 + 1;
                    v121 = *(_BYTE *)(v116 + v114);
                    v119 |= (unint64_t)(v121 & 0x7F) << v117;
                    if ((v121 & 0x80) == 0)
                      goto LABEL_962;
                    v117 += 7;
                    v114 = v120;
                    v25 = v118++ > 8;
                  }
                  while (!v25);
LABEL_567:
                  LODWORD(v119) = 0;
                  goto LABEL_962;
                }
                v599 = 0;
                v600 = 0;
                v119 = 0;
                if (v115 <= v114)
                  v115 = *((_QWORD *)a2 + 1);
                v12 = v767;
                v17 = this;
                break;
              case 1106:
                *v18 |= 0x8000000000000uLL;
                v122 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v122 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_401;
                v17 = this;
                *((_DWORD *)this + 61) = *(_DWORD *)(*(_QWORD *)a2 + v122);
                goto LABEL_940;
              default:
                goto LABEL_141;
            }
            while (1)
            {
              if (v115 == v114)
              {
                LODWORD(v119) = 0;
                *v767 = 1;
                goto LABEL_962;
              }
              v601 = v114 + 1;
              v602 = *(_BYTE *)(v116 + v114);
              *v10 = v601;
              v119 |= (unint64_t)(v602 & 0x7F) << v599;
              if ((v602 & 0x80) == 0)
                break;
              v599 += 7;
              v114 = v601;
              v25 = v600++ > 8;
              if (v25)
                goto LABEL_567;
            }
            if (*v767)
              LODWORD(v119) = 0;
LABEL_962:
            *((_DWORD *)v17 + 39) = v119;
          }
        }
        else
        {
          switch((int)v33)
          {
            case 1301:
              *v18 |= 0x8000uLL;
              v35 = *v10;
              if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_513;
              *((_DWORD *)v17 + 25) = *(_DWORD *)(*(_QWORD *)a2 + v35);
              goto LABEL_942;
            case 1302:
              *v18 |= 0x40000000000uLL;
              v469 = *((_QWORD *)a2 + 1);
              v470 = *((_QWORD *)a2 + 2);
              v471 = *(_QWORD *)a2;
              if (v469 <= 0xFFFFFFFFFFFFFFF5 && v469 + 10 <= v470)
              {
                v472 = 0;
                v473 = 0;
                v474 = 0;
                do
                {
                  v475 = v469 + 1;
                  *v10 = v469 + 1;
                  v476 = *(_BYTE *)(v471 + v469);
                  v474 |= (unint64_t)(v476 & 0x7F) << v472;
                  if ((v476 & 0x80) == 0)
                    goto LABEL_1078;
                  v472 += 7;
                  v469 = v475;
                  v25 = v473++ > 8;
                }
                while (!v25);
LABEL_850:
                LODWORD(v474) = 0;
                goto LABEL_1078;
              }
              v715 = 0;
              v716 = 0;
              v474 = 0;
              if (v470 <= v469)
                v470 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v470 == v469)
                {
                  LODWORD(v474) = 0;
                  *v12 = 1;
                }
                else
                {
                  v717 = v469 + 1;
                  v718 = *(_BYTE *)(v471 + v469);
                  *v10 = v717;
                  v474 |= (unint64_t)(v718 & 0x7F) << v715;
                  if (v718 < 0)
                  {
                    v715 += 7;
                    v469 = v717;
                    v25 = v716++ > 8;
                    if (v25)
                      goto LABEL_850;
                    continue;
                  }
                  if (*v12)
                    LODWORD(v474) = 0;
                }
                break;
              }
LABEL_1078:
              *((_DWORD *)v17 + 52) = v474;
              break;
            case 1303:
              *v18 |= 0x10000000000uLL;
              v477 = *((_QWORD *)a2 + 1);
              v478 = *((_QWORD *)a2 + 2);
              v479 = *(_QWORD *)a2;
              if (v477 <= 0xFFFFFFFFFFFFFFF5 && v477 + 10 <= v478)
              {
                v480 = 0;
                v481 = 0;
                v482 = 0;
                do
                {
                  v483 = v477 + 1;
                  *v10 = v477 + 1;
                  v484 = *(_BYTE *)(v479 + v477);
                  v482 |= (unint64_t)(v484 & 0x7F) << v480;
                  if ((v484 & 0x80) == 0)
                    goto LABEL_1082;
                  v480 += 7;
                  v477 = v483;
                  v25 = v481++ > 8;
                }
                while (!v25);
LABEL_857:
                LODWORD(v482) = 0;
                goto LABEL_1082;
              }
              v719 = 0;
              v720 = 0;
              v482 = 0;
              if (v478 <= v477)
                v478 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v478 == v477)
                {
                  LODWORD(v482) = 0;
                  *v12 = 1;
                }
                else
                {
                  v721 = v477 + 1;
                  v722 = *(_BYTE *)(v479 + v477);
                  *v10 = v721;
                  v482 |= (unint64_t)(v722 & 0x7F) << v719;
                  if (v722 < 0)
                  {
                    v719 += 7;
                    v477 = v721;
                    v25 = v720++ > 8;
                    if (v25)
                      goto LABEL_857;
                    continue;
                  }
                  if (*v12)
                    LODWORD(v482) = 0;
                }
                break;
              }
LABEL_1082:
              *((_DWORD *)v17 + 50) = v482;
              break;
            case 1304:
              *v18 |= 0x800000000uLL;
              v485 = *((_QWORD *)a2 + 1);
              v486 = *((_QWORD *)a2 + 2);
              v487 = *(_QWORD *)a2;
              if (v485 <= 0xFFFFFFFFFFFFFFF5 && v485 + 10 <= v486)
              {
                v488 = 0;
                v489 = 0;
                v490 = 0;
                do
                {
                  v491 = v485 + 1;
                  *v10 = v485 + 1;
                  v492 = *(_BYTE *)(v487 + v485);
                  v490 |= (unint64_t)(v492 & 0x7F) << v488;
                  if ((v492 & 0x80) == 0)
                    goto LABEL_1086;
                  v488 += 7;
                  v485 = v491;
                  v25 = v489++ > 8;
                }
                while (!v25);
LABEL_864:
                LODWORD(v490) = 0;
                goto LABEL_1086;
              }
              v723 = 0;
              v724 = 0;
              v490 = 0;
              if (v486 <= v485)
                v486 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v486 == v485)
                {
                  LODWORD(v490) = 0;
                  *v12 = 1;
                }
                else
                {
                  v725 = v485 + 1;
                  v726 = *(_BYTE *)(v487 + v485);
                  *v10 = v725;
                  v490 |= (unint64_t)(v726 & 0x7F) << v723;
                  if (v726 < 0)
                  {
                    v723 += 7;
                    v485 = v725;
                    v25 = v724++ > 8;
                    if (v25)
                      goto LABEL_864;
                    continue;
                  }
                  if (*v12)
                    LODWORD(v490) = 0;
                }
                break;
              }
LABEL_1086:
              *((_DWORD *)v17 + 45) = v490;
              break;
            case 1305:
              *v18 |= (unint64_t)&_mh_execute_header;
              v493 = *((_QWORD *)a2 + 1);
              v494 = *((_QWORD *)a2 + 2);
              v495 = *(_QWORD *)a2;
              if (v493 <= 0xFFFFFFFFFFFFFFF5 && v493 + 10 <= v494)
              {
                v496 = 0;
                v497 = 0;
                v498 = 0;
                do
                {
                  v499 = v493 + 1;
                  *v10 = v493 + 1;
                  v500 = *(_BYTE *)(v495 + v493);
                  v498 |= (unint64_t)(v500 & 0x7F) << v496;
                  if ((v500 & 0x80) == 0)
                    goto LABEL_1090;
                  v496 += 7;
                  v493 = v499;
                  v25 = v497++ > 8;
                }
                while (!v25);
LABEL_871:
                LODWORD(v498) = 0;
                goto LABEL_1090;
              }
              v727 = 0;
              v728 = 0;
              v498 = 0;
              if (v494 <= v493)
                v494 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v494 == v493)
                {
                  LODWORD(v498) = 0;
                  *v12 = 1;
                }
                else
                {
                  v729 = v493 + 1;
                  v730 = *(_BYTE *)(v495 + v493);
                  *v10 = v729;
                  v498 |= (unint64_t)(v730 & 0x7F) << v727;
                  if (v730 < 0)
                  {
                    v727 += 7;
                    v493 = v729;
                    v25 = v728++ > 8;
                    if (v25)
                      goto LABEL_871;
                    continue;
                  }
                  if (*v12)
                    LODWORD(v498) = 0;
                }
                break;
              }
LABEL_1090:
              *((_DWORD *)v17 + 42) = v498;
              break;
            case 1306:
              *v18 |= 0x400000000uLL;
              v501 = *((_QWORD *)a2 + 1);
              v502 = *((_QWORD *)a2 + 2);
              v503 = *(_QWORD *)a2;
              if (v501 <= 0xFFFFFFFFFFFFFFF5 && v501 + 10 <= v502)
              {
                v504 = 0;
                v505 = 0;
                v506 = 0;
                do
                {
                  v507 = v501 + 1;
                  *v10 = v501 + 1;
                  v508 = *(_BYTE *)(v503 + v501);
                  v506 |= (unint64_t)(v508 & 0x7F) << v504;
                  if ((v508 & 0x80) == 0)
                    goto LABEL_1094;
                  v504 += 7;
                  v501 = v507;
                  v25 = v505++ > 8;
                }
                while (!v25);
LABEL_878:
                LODWORD(v506) = 0;
                goto LABEL_1094;
              }
              v731 = 0;
              v732 = 0;
              v506 = 0;
              if (v502 <= v501)
                v502 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v502 == v501)
                {
                  LODWORD(v506) = 0;
                  *v12 = 1;
                }
                else
                {
                  v733 = v501 + 1;
                  v734 = *(_BYTE *)(v503 + v501);
                  *v10 = v733;
                  v506 |= (unint64_t)(v734 & 0x7F) << v731;
                  if (v734 < 0)
                  {
                    v731 += 7;
                    v501 = v733;
                    v25 = v732++ > 8;
                    if (v25)
                      goto LABEL_878;
                    continue;
                  }
                  if (*v12)
                    LODWORD(v506) = 0;
                }
                break;
              }
LABEL_1094:
              *((_DWORD *)v17 + 44) = v506;
              break;
            case 1307:
              v18[1] |= 0x100uLL;
              v509 = *((_QWORD *)a2 + 1);
              if (v509 >= *((_QWORD *)a2 + 2))
              {
                v512 = 0;
                *v12 = 1;
              }
              else
              {
                v510 = v509 + 1;
                v511 = *(unsigned __int8 *)(*(_QWORD *)a2 + v509);
                *((_QWORD *)a2 + 1) = v510;
                v512 = v511 != 0;
              }
              *((_BYTE *)v17 + 319) = v512;
              break;
            case 1308:
              v18[1] |= 0x40000uLL;
              v513 = *((_QWORD *)a2 + 1);
              if (v513 >= *((_QWORD *)a2 + 2))
              {
                v516 = 0;
                *v12 = 1;
              }
              else
              {
                v514 = v513 + 1;
                v515 = *(unsigned __int8 *)(*(_QWORD *)a2 + v513);
                *((_QWORD *)a2 + 1) = v514;
                v516 = v515 != 0;
              }
              *((_BYTE *)v17 + 329) = v516;
              break;
            case 1309:
              *v18 |= 0x200000000uLL;
              v517 = *((_QWORD *)a2 + 1);
              v518 = *((_QWORD *)a2 + 2);
              v519 = *(_QWORD *)a2;
              if (v517 <= 0xFFFFFFFFFFFFFFF5 && v517 + 10 <= v518)
              {
                v520 = 0;
                v521 = 0;
                v522 = 0;
                do
                {
                  v523 = v517 + 1;
                  *v10 = v517 + 1;
                  v524 = *(_BYTE *)(v519 + v517);
                  v522 |= (unint64_t)(v524 & 0x7F) << v520;
                  if ((v524 & 0x80) == 0)
                    goto LABEL_1098;
                  v520 += 7;
                  v517 = v523;
                  v25 = v521++ > 8;
                }
                while (!v25);
LABEL_889:
                LODWORD(v522) = 0;
                goto LABEL_1098;
              }
              v735 = 0;
              v736 = 0;
              v522 = 0;
              if (v518 <= v517)
                v518 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v518 == v517)
                {
                  LODWORD(v522) = 0;
                  *v12 = 1;
                }
                else
                {
                  v737 = v517 + 1;
                  v738 = *(_BYTE *)(v519 + v517);
                  *v10 = v737;
                  v522 |= (unint64_t)(v738 & 0x7F) << v735;
                  if (v738 < 0)
                  {
                    v735 += 7;
                    v517 = v737;
                    v25 = v736++ > 8;
                    if (v25)
                      goto LABEL_889;
                    continue;
                  }
                  if (*v12)
                    LODWORD(v522) = 0;
                }
                break;
              }
LABEL_1098:
              *((_DWORD *)v17 + 43) = v522;
              break;
            case 1310:
              *v18 |= 2uLL;
              v525 = *((_QWORD *)a2 + 1);
              v526 = *((_QWORD *)a2 + 2);
              v527 = *(_QWORD *)a2;
              if (v525 <= 0xFFFFFFFFFFFFFFF5 && v525 + 10 <= v526)
              {
                v528 = 0;
                v529 = 0;
                v530 = 0;
                do
                {
                  v531 = v525 + 1;
                  *v10 = v525 + 1;
                  v532 = *(_BYTE *)(v527 + v525);
                  v530 |= (unint64_t)(v532 & 0x7F) << v528;
                  if ((v532 & 0x80) == 0)
                    goto LABEL_1102;
                  v528 += 7;
                  v525 = v531;
                  v25 = v529++ > 8;
                }
                while (!v25);
LABEL_896:
                v530 = 0;
                goto LABEL_1102;
              }
              v739 = 0;
              v740 = 0;
              v530 = 0;
              if (v526 <= v525)
                v526 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v526 == v525)
                {
                  v530 = 0;
                  *v12 = 1;
                }
                else
                {
                  v741 = v525 + 1;
                  v742 = *(_BYTE *)(v527 + v525);
                  *v10 = v741;
                  v530 |= (unint64_t)(v742 & 0x7F) << v739;
                  if (v742 < 0)
                  {
                    v739 += 7;
                    v525 = v741;
                    v25 = v740++ > 8;
                    if (v25)
                      goto LABEL_896;
                    continue;
                  }
                  if (*v12)
                    v530 = 0;
                }
                break;
              }
LABEL_1102:
              *((_QWORD *)v17 + 2) = v530;
              break;
            case 1311:
              *v18 |= 0x20uLL;
              v533 = *((_QWORD *)a2 + 1);
              v534 = *((_QWORD *)a2 + 2);
              v535 = *(_QWORD *)a2;
              if (v533 <= 0xFFFFFFFFFFFFFFF5 && v533 + 10 <= v534)
              {
                v536 = 0;
                v537 = 0;
                v538 = 0;
                do
                {
                  v539 = v533 + 1;
                  *v10 = v533 + 1;
                  v540 = *(_BYTE *)(v535 + v533);
                  v538 |= (unint64_t)(v540 & 0x7F) << v536;
                  if ((v540 & 0x80) == 0)
                    goto LABEL_1106;
                  v536 += 7;
                  v533 = v539;
                  v25 = v537++ > 8;
                }
                while (!v25);
LABEL_903:
                v538 = 0;
                goto LABEL_1106;
              }
              v743 = 0;
              v744 = 0;
              v538 = 0;
              if (v534 <= v533)
                v534 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v534 == v533)
                {
                  v538 = 0;
                  *v12 = 1;
                }
                else
                {
                  v745 = v533 + 1;
                  v746 = *(_BYTE *)(v535 + v533);
                  *v10 = v745;
                  v538 |= (unint64_t)(v746 & 0x7F) << v743;
                  if (v746 < 0)
                  {
                    v743 += 7;
                    v533 = v745;
                    v25 = v744++ > 8;
                    if (v25)
                      goto LABEL_903;
                    continue;
                  }
                  if (*v12)
                    v538 = 0;
                }
                break;
              }
LABEL_1106:
              *((_QWORD *)v17 + 6) = v538;
              break;
            case 1312:
              *v18 |= 4uLL;
              v541 = *((_QWORD *)a2 + 1);
              v542 = *((_QWORD *)a2 + 2);
              v543 = *(_QWORD *)a2;
              if (v541 <= 0xFFFFFFFFFFFFFFF5 && v541 + 10 <= v542)
              {
                v544 = 0;
                v545 = 0;
                v546 = 0;
                do
                {
                  v547 = v541 + 1;
                  *v10 = v541 + 1;
                  v548 = *(_BYTE *)(v543 + v541);
                  v546 |= (unint64_t)(v548 & 0x7F) << v544;
                  if ((v548 & 0x80) == 0)
                    goto LABEL_1110;
                  v544 += 7;
                  v541 = v547;
                  v25 = v545++ > 8;
                }
                while (!v25);
LABEL_910:
                v546 = 0;
                goto LABEL_1110;
              }
              v747 = 0;
              v748 = 0;
              v546 = 0;
              if (v542 <= v541)
                v542 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v542 == v541)
                {
                  v546 = 0;
                  *v12 = 1;
                }
                else
                {
                  v749 = v541 + 1;
                  v750 = *(_BYTE *)(v543 + v541);
                  *v10 = v749;
                  v546 |= (unint64_t)(v750 & 0x7F) << v747;
                  if (v750 < 0)
                  {
                    v747 += 7;
                    v541 = v749;
                    v25 = v748++ > 8;
                    if (v25)
                      goto LABEL_910;
                    continue;
                  }
                  if (*v12)
                    v546 = 0;
                }
                break;
              }
LABEL_1110:
              *((_QWORD *)v17 + 3) = v546;
              break;
            case 1313:
              *v18 |= 8uLL;
              v549 = *((_QWORD *)a2 + 1);
              v550 = *((_QWORD *)a2 + 2);
              v551 = *(_QWORD *)a2;
              if (v549 <= 0xFFFFFFFFFFFFFFF5 && v549 + 10 <= v550)
              {
                v552 = 0;
                v553 = 0;
                v554 = 0;
                do
                {
                  v555 = v549 + 1;
                  *v10 = v549 + 1;
                  v556 = *(_BYTE *)(v551 + v549);
                  v554 |= (unint64_t)(v556 & 0x7F) << v552;
                  if ((v556 & 0x80) == 0)
                    goto LABEL_1114;
                  v552 += 7;
                  v549 = v555;
                  v25 = v553++ > 8;
                }
                while (!v25);
LABEL_917:
                v554 = 0;
                goto LABEL_1114;
              }
              v751 = 0;
              v752 = 0;
              v554 = 0;
              if (v550 <= v549)
                v550 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v550 == v549)
                {
                  v554 = 0;
                  *v12 = 1;
                }
                else
                {
                  v753 = v549 + 1;
                  v754 = *(_BYTE *)(v551 + v549);
                  *v10 = v753;
                  v554 |= (unint64_t)(v754 & 0x7F) << v751;
                  if (v754 < 0)
                  {
                    v751 += 7;
                    v549 = v753;
                    v25 = v752++ > 8;
                    if (v25)
                      goto LABEL_917;
                    continue;
                  }
                  if (*v12)
                    v554 = 0;
                }
                break;
              }
LABEL_1114:
              *((_QWORD *)v17 + 4) = v554;
              break;
            case 1314:
              *v18 |= 0x10uLL;
              v557 = *((_QWORD *)a2 + 1);
              v558 = *((_QWORD *)a2 + 2);
              v559 = *(_QWORD *)a2;
              if (v557 <= 0xFFFFFFFFFFFFFFF5 && v557 + 10 <= v558)
              {
                v560 = 0;
                v561 = 0;
                v562 = 0;
                do
                {
                  v563 = v557 + 1;
                  *v10 = v557 + 1;
                  v564 = *(_BYTE *)(v559 + v557);
                  v562 |= (unint64_t)(v564 & 0x7F) << v560;
                  if ((v564 & 0x80) == 0)
                    goto LABEL_1118;
                  v560 += 7;
                  v557 = v563;
                  v25 = v561++ > 8;
                }
                while (!v25);
LABEL_924:
                v562 = 0;
                goto LABEL_1118;
              }
              v755 = 0;
              v756 = 0;
              v562 = 0;
              if (v558 <= v557)
                v558 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v558 == v557)
                {
                  v562 = 0;
                  *v12 = 1;
                }
                else
                {
                  v757 = v557 + 1;
                  v758 = *(_BYTE *)(v559 + v557);
                  *v10 = v757;
                  v562 |= (unint64_t)(v758 & 0x7F) << v755;
                  if (v758 < 0)
                  {
                    v755 += 7;
                    v557 = v757;
                    v25 = v756++ > 8;
                    if (v25)
                      goto LABEL_924;
                    continue;
                  }
                  if (*v12)
                    v562 = 0;
                }
                break;
              }
LABEL_1118:
              *((_QWORD *)v17 + 5) = v562;
              break;
            case 1315:
              *v18 |= 0x2000000000000uLL;
              v565 = *((_QWORD *)a2 + 1);
              v566 = *((_QWORD *)a2 + 2);
              v567 = *(_QWORD *)a2;
              if (v565 <= 0xFFFFFFFFFFFFFFF5 && v565 + 10 <= v566)
              {
                v568 = 0;
                v569 = 0;
                v570 = 0;
                do
                {
                  v571 = v565 + 1;
                  *v10 = v565 + 1;
                  v572 = *(_BYTE *)(v567 + v565);
                  v570 |= (unint64_t)(v572 & 0x7F) << v568;
                  if ((v572 & 0x80) == 0)
                    goto LABEL_1122;
                  v568 += 7;
                  v565 = v571;
                  v25 = v569++ > 8;
                }
                while (!v25);
LABEL_931:
                LODWORD(v570) = 0;
                goto LABEL_1122;
              }
              v759 = 0;
              v760 = 0;
              v570 = 0;
              if (v566 <= v565)
                v566 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v566 == v565)
                {
                  LODWORD(v570) = 0;
                  *v12 = 1;
                }
                else
                {
                  v761 = v565 + 1;
                  v762 = *(_BYTE *)(v567 + v565);
                  *v10 = v761;
                  v570 |= (unint64_t)(v762 & 0x7F) << v759;
                  if (v762 < 0)
                  {
                    v759 += 7;
                    v565 = v761;
                    v25 = v760++ > 8;
                    if (v25)
                      goto LABEL_931;
                    continue;
                  }
                  if (*v12)
                    LODWORD(v570) = 0;
                }
                break;
              }
LABEL_1122:
              *((_DWORD *)v17 + 59) = v570;
              break;
            case 1316:
              *v18 |= 0x2000uLL;
              v573 = *v10;
              if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v573 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_513;
              *((_DWORD *)v17 + 23) = *(_DWORD *)(*(_QWORD *)a2 + v573);
              goto LABEL_942;
            default:
              if ((_DWORD)v33 == 1201)
              {
                *v18 |= 0x4000000000uLL;
                v575 = *((_QWORD *)a2 + 1);
                v576 = *((_QWORD *)a2 + 2);
                v577 = *(_QWORD *)a2;
                if (v575 > 0xFFFFFFFFFFFFFFF5 || v575 + 10 > v576)
                {
                  v763 = 0;
                  v764 = 0;
                  v580 = 0;
                  if (v576 <= v575)
                    v576 = *((_QWORD *)a2 + 1);
                  while (1)
                  {
                    if (v576 == v575)
                    {
                      LODWORD(v580) = 0;
                      *v12 = 1;
                      goto LABEL_1126;
                    }
                    v765 = v575 + 1;
                    v766 = *(_BYTE *)(v577 + v575);
                    *v10 = v765;
                    v580 |= (unint64_t)(v766 & 0x7F) << v763;
                    if ((v766 & 0x80) == 0)
                      break;
                    v763 += 7;
                    v575 = v765;
                    v25 = v764++ > 8;
                    if (v25)
                    {
LABEL_938:
                      LODWORD(v580) = 0;
                      goto LABEL_1126;
                    }
                  }
                  if (*v12)
                    LODWORD(v580) = 0;
                }
                else
                {
                  v578 = 0;
                  v579 = 0;
                  v580 = 0;
                  while (1)
                  {
                    v581 = v575 + 1;
                    *v10 = v575 + 1;
                    v582 = *(_BYTE *)(v577 + v575);
                    v580 |= (unint64_t)(v582 & 0x7F) << v578;
                    if ((v582 & 0x80) == 0)
                      break;
                    v578 += 7;
                    v575 = v581;
                    v25 = v579++ > 8;
                    if (v25)
                      goto LABEL_938;
                  }
                }
LABEL_1126:
                *((_DWORD *)v17 + 48) = v580;
              }
              else
              {
                if ((_DWORD)v33 != 1202)
                  goto LABEL_141;
                *v18 |= 0x8000000000uLL;
                v86 = *((_QWORD *)a2 + 1);
                v87 = *((_QWORD *)a2 + 2);
                v88 = *(_QWORD *)a2;
                if (v86 > 0xFFFFFFFFFFFFFFF5 || v86 + 10 > v87)
                {
                  v711 = 0;
                  v712 = 0;
                  v91 = 0;
                  if (v87 <= v86)
                    v87 = *((_QWORD *)a2 + 1);
                  v12 = v767;
                  v17 = this;
                  while (1)
                  {
                    if (v87 == v86)
                    {
                      LODWORD(v91) = 0;
                      *v767 = 1;
                      goto LABEL_1074;
                    }
                    v713 = v86 + 1;
                    v714 = *(_BYTE *)(v88 + v86);
                    *v10 = v713;
                    v91 |= (unint64_t)(v714 & 0x7F) << v711;
                    if ((v714 & 0x80) == 0)
                      break;
                    v711 += 7;
                    v86 = v713;
                    v25 = v712++ > 8;
                    if (v25)
                    {
LABEL_843:
                      LODWORD(v91) = 0;
                      goto LABEL_1074;
                    }
                  }
                  if (*v767)
                    LODWORD(v91) = 0;
                }
                else
                {
                  v89 = 0;
                  v90 = 0;
                  v91 = 0;
                  v12 = v767;
                  v17 = this;
                  while (1)
                  {
                    v92 = v86 + 1;
                    *v10 = v86 + 1;
                    v93 = *(_BYTE *)(v88 + v86);
                    v91 |= (unint64_t)(v93 & 0x7F) << v89;
                    if ((v93 & 0x80) == 0)
                      break;
                    v89 += 7;
                    v86 = v92;
                    v25 = v90++ > 8;
                    if (v25)
                      goto LABEL_843;
                  }
                }
LABEL_1074:
                *((_DWORD *)v17 + 49) = v91;
              }
              break;
          }
        }
      }
      else
      {
        switch((int)v33)
        {
          case 301:
            v18[1] |= 0x2000uLL;
            v44 = *((_QWORD *)a2 + 1);
            if (v44 >= *((_QWORD *)a2 + 2))
            {
              v47 = 0;
              *v12 = 1;
            }
            else
            {
              v45 = v44 + 1;
              v46 = *(unsigned __int8 *)(*(_QWORD *)a2 + v44);
              *((_QWORD *)a2 + 1) = v45;
              v47 = v46 != 0;
            }
            *((_BYTE *)v17 + 324) = v47;
            goto LABEL_514;
          case 302:
            v18[1] |= 0x4000000uLL;
            v263 = *((_QWORD *)a2 + 1);
            if (v263 >= *((_QWORD *)a2 + 2))
            {
              v266 = 0;
              *v12 = 1;
            }
            else
            {
              v264 = v263 + 1;
              v265 = *(unsigned __int8 *)(*(_QWORD *)a2 + v263);
              *((_QWORD *)a2 + 1) = v264;
              v266 = v265 != 0;
            }
            *((_BYTE *)v17 + 337) = v266;
            goto LABEL_514;
          case 303:
            v18[1] |= 0x80000uLL;
            v267 = *((_QWORD *)a2 + 1);
            if (v267 >= *((_QWORD *)a2 + 2))
            {
              v270 = 0;
              *v12 = 1;
            }
            else
            {
              v268 = v267 + 1;
              v269 = *(unsigned __int8 *)(*(_QWORD *)a2 + v267);
              *((_QWORD *)a2 + 1) = v268;
              v270 = v269 != 0;
            }
            *((_BYTE *)v17 + 330) = v270;
            goto LABEL_514;
          case 304:
            v18[1] |= 0x2000000000uLL;
            v271 = *((_QWORD *)a2 + 1);
            if (v271 >= *((_QWORD *)a2 + 2))
            {
              v274 = 0;
              *v12 = 1;
            }
            else
            {
              v272 = v271 + 1;
              v273 = *(unsigned __int8 *)(*(_QWORD *)a2 + v271);
              *((_QWORD *)a2 + 1) = v272;
              v274 = v273 != 0;
            }
            *((_BYTE *)v17 + 348) = v274;
            goto LABEL_514;
          case 305:
            v18[1] |= 0x200000000uLL;
            v275 = *((_QWORD *)a2 + 1);
            if (v275 >= *((_QWORD *)a2 + 2))
            {
              v278 = 0;
              *v12 = 1;
            }
            else
            {
              v276 = v275 + 1;
              v277 = *(unsigned __int8 *)(*(_QWORD *)a2 + v275);
              *((_QWORD *)a2 + 1) = v276;
              v278 = v277 != 0;
            }
            *((_BYTE *)v17 + 344) = v278;
            goto LABEL_514;
          case 306:
            v18[1] |= 0x4000000000uLL;
            v279 = *((_QWORD *)a2 + 1);
            if (v279 >= *((_QWORD *)a2 + 2))
            {
              v282 = 0;
              *v12 = 1;
            }
            else
            {
              v280 = v279 + 1;
              v281 = *(unsigned __int8 *)(*(_QWORD *)a2 + v279);
              *((_QWORD *)a2 + 1) = v280;
              v282 = v281 != 0;
            }
            *((_BYTE *)v17 + 349) = v282;
            goto LABEL_514;
          case 307:
            v18[1] |= 0x400000000uLL;
            v283 = *((_QWORD *)a2 + 1);
            if (v283 >= *((_QWORD *)a2 + 2))
            {
              v286 = 0;
              *v12 = 1;
            }
            else
            {
              v284 = v283 + 1;
              v285 = *(unsigned __int8 *)(*(_QWORD *)a2 + v283);
              *((_QWORD *)a2 + 1) = v284;
              v286 = v285 != 0;
            }
            *((_BYTE *)v17 + 345) = v286;
            goto LABEL_514;
          case 308:
            v18[1] |= 0x40000000uLL;
            v287 = *((_QWORD *)a2 + 1);
            if (v287 >= *((_QWORD *)a2 + 2))
            {
              v290 = 0;
              *v12 = 1;
            }
            else
            {
              v288 = v287 + 1;
              v289 = *(unsigned __int8 *)(*(_QWORD *)a2 + v287);
              *((_QWORD *)a2 + 1) = v288;
              v290 = v289 != 0;
            }
            *((_BYTE *)v17 + 341) = v290;
            goto LABEL_514;
          case 309:
            v18[1] |= 0x800uLL;
            v291 = *((_QWORD *)a2 + 1);
            if (v291 >= *((_QWORD *)a2 + 2))
            {
              v294 = 0;
              *v12 = 1;
            }
            else
            {
              v292 = v291 + 1;
              v293 = *(unsigned __int8 *)(*(_QWORD *)a2 + v291);
              *((_QWORD *)a2 + 1) = v292;
              v294 = v293 != 0;
            }
            *((_BYTE *)v17 + 322) = v294;
            goto LABEL_514;
          case 310:
            v18[1] |= 0x100000uLL;
            v295 = *((_QWORD *)a2 + 1);
            if (v295 >= *((_QWORD *)a2 + 2))
            {
              v298 = 0;
              *v12 = 1;
            }
            else
            {
              v296 = v295 + 1;
              v297 = *(unsigned __int8 *)(*(_QWORD *)a2 + v295);
              *((_QWORD *)a2 + 1) = v296;
              v298 = v297 != 0;
            }
            *((_BYTE *)v17 + 331) = v298;
            goto LABEL_514;
          case 311:
            v18[1] |= 0x8000000000uLL;
            v299 = *((_QWORD *)a2 + 1);
            if (v299 >= *((_QWORD *)a2 + 2))
            {
              v302 = 0;
              *v12 = 1;
            }
            else
            {
              v300 = v299 + 1;
              v301 = *(unsigned __int8 *)(*(_QWORD *)a2 + v299);
              *((_QWORD *)a2 + 1) = v300;
              v302 = v301 != 0;
            }
            *((_BYTE *)v17 + 350) = v302;
            goto LABEL_514;
          case 312:
            v18[1] |= 0x800000000uLL;
            v303 = *((_QWORD *)a2 + 1);
            if (v303 >= *((_QWORD *)a2 + 2))
            {
              v306 = 0;
              *v12 = 1;
            }
            else
            {
              v304 = v303 + 1;
              v305 = *(unsigned __int8 *)(*(_QWORD *)a2 + v303);
              *((_QWORD *)a2 + 1) = v304;
              v306 = v305 != 0;
            }
            *((_BYTE *)v17 + 346) = v306;
            goto LABEL_514;
          case 313:
            *v18 |= 0x20000uLL;
            v307 = *((_QWORD *)a2 + 1);
            v308 = *((_QWORD *)a2 + 2);
            v309 = *(_QWORD *)a2;
            if (v307 <= 0xFFFFFFFFFFFFFFF5 && v307 + 10 <= v308)
            {
              v310 = 0;
              v311 = 0;
              v312 = 0;
              do
              {
                v313 = v307 + 1;
                *v10 = v307 + 1;
                v314 = *(_BYTE *)(v309 + v307);
                v312 |= (unint64_t)(v314 & 0x7F) << v310;
                if ((v314 & 0x80) == 0)
                  goto LABEL_1043;
                v310 += 7;
                v307 = v313;
                v25 = v311++ > 8;
              }
              while (!v25);
LABEL_727:
              LODWORD(v312) = 0;
              goto LABEL_1043;
            }
            v671 = 0;
            v672 = 0;
            v312 = 0;
            if (v308 <= v307)
              v308 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v308 == v307)
              {
                LODWORD(v312) = 0;
                *v12 = 1;
              }
              else
              {
                v673 = v307 + 1;
                v674 = *(_BYTE *)(v309 + v307);
                *v10 = v673;
                v312 |= (unint64_t)(v674 & 0x7F) << v671;
                if (v674 < 0)
                {
                  v671 += 7;
                  v307 = v673;
                  v25 = v672++ > 8;
                  if (v25)
                    goto LABEL_727;
                  continue;
                }
                if (*v12)
                  LODWORD(v312) = 0;
              }
              break;
            }
LABEL_1043:
            *((_DWORD *)v17 + 27) = v312;
            goto LABEL_514;
          case 314:
            v18[1] |= 0x400000uLL;
            v315 = *((_QWORD *)a2 + 1);
            if (v315 >= *((_QWORD *)a2 + 2))
            {
              v318 = 0;
              *v12 = 1;
            }
            else
            {
              v316 = v315 + 1;
              v317 = *(unsigned __int8 *)(*(_QWORD *)a2 + v315);
              *((_QWORD *)a2 + 1) = v316;
              v318 = v317 != 0;
            }
            *((_BYTE *)v17 + 333) = v318;
            goto LABEL_514;
          case 315:
            v18[1] |= 0x800000uLL;
            v319 = *((_QWORD *)a2 + 1);
            if (v319 >= *((_QWORD *)a2 + 2))
            {
              v322 = 0;
              *v12 = 1;
            }
            else
            {
              v320 = v319 + 1;
              v321 = *(unsigned __int8 *)(*(_QWORD *)a2 + v319);
              *((_QWORD *)a2 + 1) = v320;
              v322 = v321 != 0;
            }
            *((_BYTE *)v17 + 334) = v322;
            goto LABEL_514;
          case 316:
            v18[1] |= 0x20uLL;
            v323 = *((_QWORD *)a2 + 1);
            if (v323 >= *((_QWORD *)a2 + 2))
            {
              v326 = 0;
              *v12 = 1;
            }
            else
            {
              v324 = v323 + 1;
              v325 = *(unsigned __int8 *)(*(_QWORD *)a2 + v323);
              *((_QWORD *)a2 + 1) = v324;
              v326 = v325 != 0;
            }
            *((_BYTE *)v17 + 316) = v326;
            goto LABEL_514;
          case 317:
            *v18 |= 0x40000uLL;
            v327 = *((_QWORD *)a2 + 1);
            v328 = *((_QWORD *)a2 + 2);
            v329 = *(_QWORD *)a2;
            if (v327 <= 0xFFFFFFFFFFFFFFF5 && v327 + 10 <= v328)
            {
              v330 = 0;
              v331 = 0;
              v332 = 0;
              do
              {
                v333 = v327 + 1;
                *v10 = v327 + 1;
                v334 = *(_BYTE *)(v329 + v327);
                v332 |= (unint64_t)(v334 & 0x7F) << v330;
                if ((v334 & 0x80) == 0)
                  goto LABEL_1046;
                v330 += 7;
                v327 = v333;
                v25 = v331++ > 8;
              }
              while (!v25);
LABEL_740:
              LODWORD(v332) = 0;
              goto LABEL_1046;
            }
            v675 = 0;
            v676 = 0;
            v332 = 0;
            if (v328 <= v327)
              v328 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v328 == v327)
              {
                LODWORD(v332) = 0;
                *v12 = 1;
              }
              else
              {
                v677 = v327 + 1;
                v678 = *(_BYTE *)(v329 + v327);
                *v10 = v677;
                v332 |= (unint64_t)(v678 & 0x7F) << v675;
                if (v678 < 0)
                {
                  v675 += 7;
                  v327 = v677;
                  v25 = v676++ > 8;
                  if (v25)
                    goto LABEL_740;
                  continue;
                }
                if (*v12)
                  LODWORD(v332) = 0;
              }
              break;
            }
LABEL_1046:
            *((_DWORD *)v17 + 28) = v332;
            goto LABEL_514;
          case 318:
            v18[1] |= 0x40000000000uLL;
            v335 = *((_QWORD *)a2 + 1);
            if (v335 >= *((_QWORD *)a2 + 2))
            {
              v338 = 0;
              *v12 = 1;
            }
            else
            {
              v336 = v335 + 1;
              v337 = *(unsigned __int8 *)(*(_QWORD *)a2 + v335);
              *((_QWORD *)a2 + 1) = v336;
              v338 = v337 != 0;
            }
            *((_BYTE *)v17 + 353) = v338;
            goto LABEL_514;
          case 319:
            v18[1] |= 0x10000000000uLL;
            v339 = *((_QWORD *)a2 + 1);
            if (v339 >= *((_QWORD *)a2 + 2))
            {
              v342 = 0;
              *v12 = 1;
            }
            else
            {
              v340 = v339 + 1;
              v341 = *(unsigned __int8 *)(*(_QWORD *)a2 + v339);
              *((_QWORD *)a2 + 1) = v340;
              v342 = v341 != 0;
            }
            *((_BYTE *)v17 + 351) = v342;
            goto LABEL_514;
          case 320:
            v18[1] |= 0x20000000000uLL;
            v343 = *((_QWORD *)a2 + 1);
            if (v343 >= *((_QWORD *)a2 + 2))
            {
              v346 = 0;
              *v12 = 1;
            }
            else
            {
              v344 = v343 + 1;
              v345 = *(unsigned __int8 *)(*(_QWORD *)a2 + v343);
              *((_QWORD *)a2 + 1) = v344;
              v346 = v345 != 0;
            }
            *((_BYTE *)v17 + 352) = v346;
            goto LABEL_514;
          case 321:
            v18[1] |= (unint64_t)&_mh_execute_header;
            v347 = *((_QWORD *)a2 + 1);
            if (v347 >= *((_QWORD *)a2 + 2))
            {
              v350 = 0;
              *v12 = 1;
            }
            else
            {
              v348 = v347 + 1;
              v349 = *(unsigned __int8 *)(*(_QWORD *)a2 + v347);
              *((_QWORD *)a2 + 1) = v348;
              v350 = v349 != 0;
            }
            *((_BYTE *)v17 + 343) = v350;
            goto LABEL_514;
          case 322:
            v18[1] |= 0x80000000uLL;
            v351 = *((_QWORD *)a2 + 1);
            if (v351 >= *((_QWORD *)a2 + 2))
            {
              v354 = 0;
              *v12 = 1;
            }
            else
            {
              v352 = v351 + 1;
              v353 = *(unsigned __int8 *)(*(_QWORD *)a2 + v351);
              *((_QWORD *)a2 + 1) = v352;
              v354 = v353 != 0;
            }
            *((_BYTE *)v17 + 342) = v354;
            goto LABEL_514;
          default:
            switch((int)v33)
            {
              case 1:
                *v18 |= 0x800000uLL;
                v34 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_513;
                *((_DWORD *)v17 + 33) = *(_DWORD *)(*(_QWORD *)a2 + v34);
                goto LABEL_942;
              case 2:
                *v18 |= 0x400000uLL;
                v133 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v133 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_513;
                *((_DWORD *)v17 + 32) = *(_DWORD *)(*(_QWORD *)a2 + v133);
                goto LABEL_942;
              case 3:
                *v18 |= 0x1000000uLL;
                v134 = *((_QWORD *)a2 + 1);
                v135 = *((_QWORD *)a2 + 2);
                v136 = *(_QWORD *)a2;
                if (v134 <= 0xFFFFFFFFFFFFFFF5 && v134 + 10 <= v135)
                {
                  v137 = 0;
                  v138 = 0;
                  v139 = 0;
                  do
                  {
                    v140 = v134 + 1;
                    *v10 = v134 + 1;
                    v141 = *(_BYTE *)(v136 + v134);
                    v139 |= (unint64_t)(v141 & 0x7F) << v137;
                    if ((v141 & 0x80) == 0)
                      goto LABEL_1001;
                    v137 += 7;
                    v134 = v140;
                    v25 = v138++ > 8;
                  }
                  while (!v25);
LABEL_603:
                  LODWORD(v139) = 0;
                  goto LABEL_1001;
                }
                v615 = 0;
                v616 = 0;
                v139 = 0;
                if (v135 <= v134)
                  v135 = *((_QWORD *)a2 + 1);
                while (2)
                {
                  if (v135 == v134)
                  {
                    LODWORD(v139) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v617 = v134 + 1;
                    v618 = *(_BYTE *)(v136 + v134);
                    *v10 = v617;
                    v139 |= (unint64_t)(v618 & 0x7F) << v615;
                    if (v618 < 0)
                    {
                      v615 += 7;
                      v134 = v617;
                      v25 = v616++ > 8;
                      if (v25)
                        goto LABEL_603;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v139) = 0;
                  }
                  break;
                }
LABEL_1001:
                *((_DWORD *)v17 + 34) = v139;
                goto LABEL_514;
              case 4:
                *v18 |= 0x10000000000000uLL;
                v142 = *((_QWORD *)a2 + 1);
                v143 = *((_QWORD *)a2 + 2);
                v144 = *(_QWORD *)a2;
                if (v142 <= 0xFFFFFFFFFFFFFFF5 && v142 + 10 <= v143)
                {
                  v145 = 0;
                  v146 = 0;
                  v147 = 0;
                  do
                  {
                    v148 = v142 + 1;
                    *v10 = v142 + 1;
                    v149 = *(_BYTE *)(v144 + v142);
                    v147 |= (unint64_t)(v149 & 0x7F) << v145;
                    if ((v149 & 0x80) == 0)
                      goto LABEL_1004;
                    v145 += 7;
                    v142 = v148;
                    v25 = v146++ > 8;
                  }
                  while (!v25);
LABEL_610:
                  LODWORD(v147) = 0;
                  goto LABEL_1004;
                }
                v619 = 0;
                v620 = 0;
                v147 = 0;
                if (v143 <= v142)
                  v143 = *((_QWORD *)a2 + 1);
                while (2)
                {
                  if (v143 == v142)
                  {
                    LODWORD(v147) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v621 = v142 + 1;
                    v622 = *(_BYTE *)(v144 + v142);
                    *v10 = v621;
                    v147 |= (unint64_t)(v622 & 0x7F) << v619;
                    if (v622 < 0)
                    {
                      v619 += 7;
                      v142 = v621;
                      v25 = v620++ > 8;
                      if (v25)
                        goto LABEL_610;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v147) = 0;
                  }
                  break;
                }
LABEL_1004:
                *((_DWORD *)v17 + 62) = v147;
                goto LABEL_514;
              case 5:
                v18[1] |= 1uLL;
                v150 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v150 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_513;
                *((_DWORD *)v17 + 74) = *(_DWORD *)(*(_QWORD *)a2 + v150);
                goto LABEL_942;
              case 6:
                *v18 |= 0x400000000000000uLL;
                v151 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v151 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_513;
                *((_DWORD *)v17 + 68) = *(_DWORD *)(*(_QWORD *)a2 + v151);
                goto LABEL_942;
              case 7:
                *v18 |= 0x400000000000uLL;
                v152 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v152 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_513;
                *((_DWORD *)v17 + 56) = *(_DWORD *)(*(_QWORD *)a2 + v152);
                goto LABEL_942;
              case 8:
                *v18 |= 0x200000000000uLL;
                v153 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v153 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_513;
                *((_DWORD *)v17 + 55) = *(_DWORD *)(*(_QWORD *)a2 + v153);
                goto LABEL_942;
              case 9:
                *v18 |= 0x200uLL;
                v154 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v154 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_513;
                *((_DWORD *)v17 + 19) = *(_DWORD *)(*(_QWORD *)a2 + v154);
                goto LABEL_942;
              case 10:
                *v18 |= 0x80000000000000uLL;
                v155 = *((_QWORD *)a2 + 1);
                v156 = *((_QWORD *)a2 + 2);
                v157 = *(_QWORD *)a2;
                if (v155 <= 0xFFFFFFFFFFFFFFF5 && v155 + 10 <= v156)
                {
                  v158 = 0;
                  v159 = 0;
                  v160 = 0;
                  do
                  {
                    v161 = v155 + 1;
                    *v10 = v155 + 1;
                    v162 = *(_BYTE *)(v157 + v155);
                    v160 |= (unint64_t)(v162 & 0x7F) << v158;
                    if ((v162 & 0x80) == 0)
                      goto LABEL_1007;
                    v158 += 7;
                    v155 = v161;
                    v25 = v159++ > 8;
                  }
                  while (!v25);
LABEL_617:
                  LODWORD(v160) = 0;
                  goto LABEL_1007;
                }
                v623 = 0;
                v624 = 0;
                v160 = 0;
                if (v156 <= v155)
                  v156 = *((_QWORD *)a2 + 1);
                while (2)
                {
                  if (v156 == v155)
                  {
                    LODWORD(v160) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v625 = v155 + 1;
                    v626 = *(_BYTE *)(v157 + v155);
                    *v10 = v625;
                    v160 |= (unint64_t)(v626 & 0x7F) << v623;
                    if (v626 < 0)
                    {
                      v623 += 7;
                      v155 = v625;
                      v25 = v624++ > 8;
                      if (v25)
                        goto LABEL_617;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v160) = 0;
                  }
                  break;
                }
LABEL_1007:
                *((_DWORD *)v17 + 65) = v160;
                goto LABEL_514;
              case 11:
                *v18 |= 0x2000000uLL;
                v163 = *((_QWORD *)a2 + 1);
                v164 = *((_QWORD *)a2 + 2);
                v165 = *(_QWORD *)a2;
                if (v163 <= 0xFFFFFFFFFFFFFFF5 && v163 + 10 <= v164)
                {
                  v166 = 0;
                  v167 = 0;
                  v168 = 0;
                  do
                  {
                    v169 = v163 + 1;
                    *v10 = v163 + 1;
                    v170 = *(_BYTE *)(v165 + v163);
                    v168 |= (unint64_t)(v170 & 0x7F) << v166;
                    if ((v170 & 0x80) == 0)
                      goto LABEL_1010;
                    v166 += 7;
                    v163 = v169;
                    v25 = v167++ > 8;
                  }
                  while (!v25);
LABEL_624:
                  LODWORD(v168) = 0;
                  goto LABEL_1010;
                }
                v627 = 0;
                v628 = 0;
                v168 = 0;
                if (v164 <= v163)
                  v164 = *((_QWORD *)a2 + 1);
                while (2)
                {
                  if (v164 == v163)
                  {
                    LODWORD(v168) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v629 = v163 + 1;
                    v630 = *(_BYTE *)(v165 + v163);
                    *v10 = v629;
                    v168 |= (unint64_t)(v630 & 0x7F) << v627;
                    if (v630 < 0)
                    {
                      v627 += 7;
                      v163 = v629;
                      v25 = v628++ > 8;
                      if (v25)
                        goto LABEL_624;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v168) = 0;
                  }
                  break;
                }
LABEL_1010:
                *((_DWORD *)v17 + 35) = v168;
                goto LABEL_514;
              case 12:
                *v18 |= 0x10000uLL;
                v171 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v171 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_513;
                *((_DWORD *)v17 + 26) = *(_DWORD *)(*(_QWORD *)a2 + v171);
                goto LABEL_942;
              case 13:
                v18[1] |= 8uLL;
                v172 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v172 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_513;
                *((_DWORD *)v17 + 77) = *(_DWORD *)(*(_QWORD *)a2 + v172);
                goto LABEL_942;
              case 14:
                v18[1] |= 0x10uLL;
                v173 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v173 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_513;
                *((_DWORD *)v17 + 78) = *(_DWORD *)(*(_QWORD *)a2 + v173);
                goto LABEL_942;
              case 15:
                *v18 |= 0x80000000000uLL;
                v174 = *((_QWORD *)a2 + 1);
                v175 = *((_QWORD *)a2 + 2);
                v176 = *(_QWORD *)a2;
                if (v174 <= 0xFFFFFFFFFFFFFFF5 && v174 + 10 <= v175)
                {
                  v177 = 0;
                  v178 = 0;
                  v179 = 0;
                  do
                  {
                    v180 = v174 + 1;
                    *v10 = v174 + 1;
                    v181 = *(_BYTE *)(v176 + v174);
                    v179 |= (unint64_t)(v181 & 0x7F) << v177;
                    if ((v181 & 0x80) == 0)
                      goto LABEL_1013;
                    v177 += 7;
                    v174 = v180;
                    v25 = v178++ > 8;
                  }
                  while (!v25);
LABEL_631:
                  LODWORD(v179) = 0;
                  goto LABEL_1013;
                }
                v631 = 0;
                v632 = 0;
                v179 = 0;
                if (v175 <= v174)
                  v175 = *((_QWORD *)a2 + 1);
                while (2)
                {
                  if (v175 == v174)
                  {
                    LODWORD(v179) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v633 = v174 + 1;
                    v634 = *(_BYTE *)(v176 + v174);
                    *v10 = v633;
                    v179 |= (unint64_t)(v634 & 0x7F) << v631;
                    if (v634 < 0)
                    {
                      v631 += 7;
                      v174 = v633;
                      v25 = v632++ > 8;
                      if (v25)
                        goto LABEL_631;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v179) = 0;
                  }
                  break;
                }
LABEL_1013:
                *((_DWORD *)v17 + 53) = v179;
                goto LABEL_514;
              case 16:
                *v18 |= 0x20000000000uLL;
                v182 = *((_QWORD *)a2 + 1);
                v183 = *((_QWORD *)a2 + 2);
                v184 = *(_QWORD *)a2;
                if (v182 <= 0xFFFFFFFFFFFFFFF5 && v182 + 10 <= v183)
                {
                  v185 = 0;
                  v186 = 0;
                  v187 = 0;
                  do
                  {
                    v188 = v182 + 1;
                    *v10 = v182 + 1;
                    v189 = *(_BYTE *)(v184 + v182);
                    v187 |= (unint64_t)(v189 & 0x7F) << v185;
                    if ((v189 & 0x80) == 0)
                      goto LABEL_1016;
                    v185 += 7;
                    v182 = v188;
                    v25 = v186++ > 8;
                  }
                  while (!v25);
LABEL_638:
                  LODWORD(v187) = 0;
                  goto LABEL_1016;
                }
                v635 = 0;
                v636 = 0;
                v187 = 0;
                if (v183 <= v182)
                  v183 = *((_QWORD *)a2 + 1);
                while (2)
                {
                  if (v183 == v182)
                  {
                    LODWORD(v187) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v637 = v182 + 1;
                    v638 = *(_BYTE *)(v184 + v182);
                    *v10 = v637;
                    v187 |= (unint64_t)(v638 & 0x7F) << v635;
                    if (v638 < 0)
                    {
                      v635 += 7;
                      v182 = v637;
                      v25 = v636++ > 8;
                      if (v25)
                        goto LABEL_638;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v187) = 0;
                  }
                  break;
                }
LABEL_1016:
                *((_DWORD *)v17 + 51) = v187;
                goto LABEL_514;
              case 17:
                *v18 |= 0x4000000000000uLL;
                v190 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v190 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_513;
                *((_DWORD *)v17 + 60) = *(_DWORD *)(*(_QWORD *)a2 + v190);
                goto LABEL_942;
              case 18:
                *v18 |= 0x1000000000000000uLL;
                v191 = *((_QWORD *)a2 + 1);
                v192 = *((_QWORD *)a2 + 2);
                v193 = *(_QWORD *)a2;
                if (v191 <= 0xFFFFFFFFFFFFFFF5 && v191 + 10 <= v192)
                {
                  v194 = 0;
                  v195 = 0;
                  v196 = 0;
                  do
                  {
                    v197 = v191 + 1;
                    *v10 = v191 + 1;
                    v198 = *(_BYTE *)(v193 + v191);
                    v196 |= (unint64_t)(v198 & 0x7F) << v194;
                    if ((v198 & 0x80) == 0)
                      goto LABEL_1019;
                    v194 += 7;
                    v191 = v197;
                    v25 = v195++ > 8;
                  }
                  while (!v25);
LABEL_645:
                  LODWORD(v196) = 0;
                  goto LABEL_1019;
                }
                v639 = 0;
                v640 = 0;
                v196 = 0;
                if (v192 <= v191)
                  v192 = *((_QWORD *)a2 + 1);
                while (2)
                {
                  if (v192 == v191)
                  {
                    LODWORD(v196) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v641 = v191 + 1;
                    v642 = *(_BYTE *)(v193 + v191);
                    *v10 = v641;
                    v196 |= (unint64_t)(v642 & 0x7F) << v639;
                    if (v642 < 0)
                    {
                      v639 += 7;
                      v191 = v641;
                      v25 = v640++ > 8;
                      if (v25)
                        goto LABEL_645;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v196) = 0;
                  }
                  break;
                }
LABEL_1019:
                *((_DWORD *)v17 + 70) = v196;
                goto LABEL_514;
              case 19:
                v18[1] |= 2uLL;
                v199 = *((_QWORD *)a2 + 1);
                v200 = *((_QWORD *)a2 + 2);
                v201 = *(_QWORD *)a2;
                if (v199 <= 0xFFFFFFFFFFFFFFF5 && v199 + 10 <= v200)
                {
                  v202 = 0;
                  v203 = 0;
                  v204 = 0;
                  do
                  {
                    v205 = v199 + 1;
                    *v10 = v199 + 1;
                    v206 = *(_BYTE *)(v201 + v199);
                    v204 |= (unint64_t)(v206 & 0x7F) << v202;
                    if ((v206 & 0x80) == 0)
                      goto LABEL_1022;
                    v202 += 7;
                    v199 = v205;
                    v25 = v203++ > 8;
                  }
                  while (!v25);
LABEL_652:
                  LODWORD(v204) = 0;
                  goto LABEL_1022;
                }
                v643 = 0;
                v644 = 0;
                v204 = 0;
                if (v200 <= v199)
                  v200 = *((_QWORD *)a2 + 1);
                while (2)
                {
                  if (v200 == v199)
                  {
                    LODWORD(v204) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v645 = v199 + 1;
                    v646 = *(_BYTE *)(v201 + v199);
                    *v10 = v645;
                    v204 |= (unint64_t)(v646 & 0x7F) << v643;
                    if (v646 < 0)
                    {
                      v643 += 7;
                      v199 = v645;
                      v25 = v644++ > 8;
                      if (v25)
                        goto LABEL_652;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v204) = 0;
                  }
                  break;
                }
LABEL_1022:
                *((_DWORD *)v17 + 75) = v204;
                goto LABEL_514;
              default:
                switch((int)v33)
                {
                  case 'e':
                    *v18 |= 0x80uLL;
                    v48 = *((_QWORD *)a2 + 1);
                    v49 = *((_QWORD *)a2 + 2);
                    v50 = *(_QWORD *)a2;
                    if (v48 <= 0xFFFFFFFFFFFFFFF5 && v48 + 10 <= v49)
                    {
                      v51 = 0;
                      v52 = 0;
                      v53 = 0;
                      v12 = v767;
                      v17 = this;
                      do
                      {
                        v54 = v48 + 1;
                        *v10 = v48 + 1;
                        v55 = *(_BYTE *)(v50 + v48);
                        v53 |= (unint64_t)(v55 & 0x7F) << v51;
                        if ((v55 & 0x80) == 0)
                          goto LABEL_995;
                        v51 += 7;
                        v48 = v54;
                        v25 = v52++ > 8;
                      }
                      while (!v25);
LABEL_586:
                      v53 = 0;
                      goto LABEL_995;
                    }
                    v607 = 0;
                    v608 = 0;
                    v53 = 0;
                    if (v49 <= v48)
                      v49 = *((_QWORD *)a2 + 1);
                    v12 = v767;
                    v17 = this;
                    while (2)
                    {
                      if (v49 == v48)
                      {
                        v53 = 0;
                        *v767 = 1;
                      }
                      else
                      {
                        v609 = v48 + 1;
                        v610 = *(_BYTE *)(v50 + v48);
                        *v10 = v609;
                        v53 |= (unint64_t)(v610 & 0x7F) << v607;
                        if (v610 < 0)
                        {
                          v607 += 7;
                          v48 = v609;
                          v25 = v608++ > 8;
                          if (v25)
                            goto LABEL_586;
                          continue;
                        }
                        if (*v767)
                          v53 = 0;
                      }
                      break;
                    }
LABEL_995:
                    *((_QWORD *)v17 + 8) = v53;
                    goto LABEL_514;
                  case 'f':
                    *v18 |= 1uLL;
                    v355 = *((_QWORD *)a2 + 1);
                    v356 = *((_QWORD *)a2 + 2);
                    v357 = *(_QWORD *)a2;
                    if (v355 <= 0xFFFFFFFFFFFFFFF5 && v355 + 10 <= v356)
                    {
                      v358 = 0;
                      v359 = 0;
                      v360 = 0;
                      v12 = v767;
                      v17 = this;
                      do
                      {
                        v361 = v355 + 1;
                        *v10 = v355 + 1;
                        v362 = *(_BYTE *)(v357 + v355);
                        v360 |= (unint64_t)(v362 & 0x7F) << v358;
                        if ((v362 & 0x80) == 0)
                          goto LABEL_1049;
                        v358 += 7;
                        v355 = v361;
                        v25 = v359++ > 8;
                      }
                      while (!v25);
LABEL_758:
                      v360 = 0;
                      goto LABEL_1049;
                    }
                    v679 = 0;
                    v680 = 0;
                    v360 = 0;
                    if (v356 <= v355)
                      v356 = *((_QWORD *)a2 + 1);
                    v12 = v767;
                    v17 = this;
                    break;
                  case 'g':
                    v18[1] |= 0x40uLL;
                    v363 = *((_QWORD *)a2 + 1);
                    if (v363 >= *((_QWORD *)a2 + 2))
                    {
                      v366 = 0;
                      v12 = v767;
                      v17 = this;
                      *v767 = 1;
                    }
                    else
                    {
                      v364 = v363 + 1;
                      v365 = *(unsigned __int8 *)(*(_QWORD *)a2 + v363);
                      *((_QWORD *)a2 + 1) = v364;
                      v366 = v365 != 0;
                      v12 = v767;
                      v17 = this;
                    }
                    *((_BYTE *)v17 + 317) = v366;
                    goto LABEL_514;
                  case 'h':
                    v18[1] |= 0x80uLL;
                    v367 = *((_QWORD *)a2 + 1);
                    if (v367 >= *((_QWORD *)a2 + 2))
                    {
                      v370 = 0;
                      v12 = v767;
                      v17 = this;
                      *v767 = 1;
                    }
                    else
                    {
                      v368 = v367 + 1;
                      v369 = *(unsigned __int8 *)(*(_QWORD *)a2 + v367);
                      *((_QWORD *)a2 + 1) = v368;
                      v370 = v369 != 0;
                      v12 = v767;
                      v17 = this;
                    }
                    *((_BYTE *)v17 + 318) = v370;
                    goto LABEL_514;
                  case 'i':
                    v18[1] |= 0x8000uLL;
                    v371 = *((_QWORD *)a2 + 1);
                    if (v371 >= *((_QWORD *)a2 + 2))
                    {
                      v374 = 0;
                      v12 = v767;
                      v17 = this;
                      *v767 = 1;
                    }
                    else
                    {
                      v372 = v371 + 1;
                      v373 = *(unsigned __int8 *)(*(_QWORD *)a2 + v371);
                      *((_QWORD *)a2 + 1) = v372;
                      v374 = v373 != 0;
                      v12 = v767;
                      v17 = this;
                    }
                    *((_BYTE *)v17 + 326) = v374;
                    goto LABEL_514;
                  case 'j':
                    v18[1] |= 0x10000uLL;
                    v375 = *((_QWORD *)a2 + 1);
                    if (v375 >= *((_QWORD *)a2 + 2))
                    {
                      v378 = 0;
                      v12 = v767;
                      v17 = this;
                      *v767 = 1;
                    }
                    else
                    {
                      v376 = v375 + 1;
                      v377 = *(unsigned __int8 *)(*(_QWORD *)a2 + v375);
                      *((_QWORD *)a2 + 1) = v376;
                      v378 = v377 != 0;
                      v12 = v767;
                      v17 = this;
                    }
                    *((_BYTE *)v17 + 327) = v378;
                    goto LABEL_514;
                  case 'k':
                    v18[1] |= 0x8000000uLL;
                    v379 = *((_QWORD *)a2 + 1);
                    if (v379 >= *((_QWORD *)a2 + 2))
                    {
                      v382 = 0;
                      v12 = v767;
                      v17 = this;
                      *v767 = 1;
                    }
                    else
                    {
                      v380 = v379 + 1;
                      v381 = *(unsigned __int8 *)(*(_QWORD *)a2 + v379);
                      *((_QWORD *)a2 + 1) = v380;
                      v382 = v381 != 0;
                      v12 = v767;
                      v17 = this;
                    }
                    *((_BYTE *)v17 + 338) = v382;
                    goto LABEL_514;
                  case 'l':
                    v18[1] |= 0x2000000uLL;
                    v383 = *((_QWORD *)a2 + 1);
                    if (v383 >= *((_QWORD *)a2 + 2))
                    {
                      v386 = 0;
                      v12 = v767;
                      v17 = this;
                      *v767 = 1;
                    }
                    else
                    {
                      v384 = v383 + 1;
                      v385 = *(unsigned __int8 *)(*(_QWORD *)a2 + v383);
                      *((_QWORD *)a2 + 1) = v384;
                      v386 = v385 != 0;
                      v12 = v767;
                      v17 = this;
                    }
                    *((_BYTE *)v17 + 336) = v386;
                    goto LABEL_514;
                  case 'm':
                    v18[1] |= 0x1000uLL;
                    v387 = *((_QWORD *)a2 + 1);
                    if (v387 >= *((_QWORD *)a2 + 2))
                    {
                      v390 = 0;
                      v12 = v767;
                      v17 = this;
                      *v767 = 1;
                    }
                    else
                    {
                      v388 = v387 + 1;
                      v389 = *(unsigned __int8 *)(*(_QWORD *)a2 + v387);
                      *((_QWORD *)a2 + 1) = v388;
                      v390 = v389 != 0;
                      v12 = v767;
                      v17 = this;
                    }
                    *((_BYTE *)v17 + 323) = v390;
                    goto LABEL_514;
                  case 'n':
                    v18[1] |= 0x10000000uLL;
                    v391 = *((_QWORD *)a2 + 1);
                    if (v391 >= *((_QWORD *)a2 + 2))
                    {
                      v394 = 0;
                      v12 = v767;
                      v17 = this;
                      *v767 = 1;
                    }
                    else
                    {
                      v392 = v391 + 1;
                      v393 = *(unsigned __int8 *)(*(_QWORD *)a2 + v391);
                      *((_QWORD *)a2 + 1) = v392;
                      v394 = v393 != 0;
                      v12 = v767;
                      v17 = this;
                    }
                    *((_BYTE *)v17 + 339) = v394;
                    goto LABEL_514;
                  case 'o':
                    v18[1] |= 0x20000000uLL;
                    v395 = *((_QWORD *)a2 + 1);
                    if (v395 >= *((_QWORD *)a2 + 2))
                    {
                      v398 = 0;
                      v12 = v767;
                      v17 = this;
                      *v767 = 1;
                    }
                    else
                    {
                      v396 = v395 + 1;
                      v397 = *(unsigned __int8 *)(*(_QWORD *)a2 + v395);
                      *((_QWORD *)a2 + 1) = v396;
                      v398 = v397 != 0;
                      v12 = v767;
                      v17 = this;
                    }
                    *((_BYTE *)v17 + 340) = v398;
                    goto LABEL_514;
                  case 'p':
                    v18[1] |= 0x200uLL;
                    v399 = *((_QWORD *)a2 + 1);
                    if (v399 >= *((_QWORD *)a2 + 2))
                    {
                      v402 = 0;
                      v12 = v767;
                      v17 = this;
                      *v767 = 1;
                    }
                    else
                    {
                      v400 = v399 + 1;
                      v401 = *(unsigned __int8 *)(*(_QWORD *)a2 + v399);
                      *((_QWORD *)a2 + 1) = v400;
                      v402 = v401 != 0;
                      v12 = v767;
                      v17 = this;
                    }
                    *((_BYTE *)v17 + 320) = v402;
                    goto LABEL_514;
                  case 'q':
                    v18[1] |= 0x1000000uLL;
                    v403 = *((_QWORD *)a2 + 1);
                    if (v403 >= *((_QWORD *)a2 + 2))
                    {
                      v406 = 0;
                      v12 = v767;
                      v17 = this;
                      *v767 = 1;
                    }
                    else
                    {
                      v404 = v403 + 1;
                      v405 = *(unsigned __int8 *)(*(_QWORD *)a2 + v403);
                      *((_QWORD *)a2 + 1) = v404;
                      v406 = v405 != 0;
                      v12 = v767;
                      v17 = this;
                    }
                    *((_BYTE *)v17 + 335) = v406;
                    goto LABEL_514;
                  default:
                    goto LABEL_141;
                }
                break;
            }
            break;
        }
        while (1)
        {
          if (v356 == v355)
          {
            v360 = 0;
            *v767 = 1;
            goto LABEL_1049;
          }
          v681 = v355 + 1;
          v682 = *(_BYTE *)(v357 + v355);
          *v10 = v681;
          v360 |= (unint64_t)(v682 & 0x7F) << v679;
          if ((v682 & 0x80) == 0)
            break;
          v679 += 7;
          v355 = v681;
          v25 = v680++ > 8;
          if (v25)
            goto LABEL_758;
        }
        if (*v767)
          v360 = 0;
LABEL_1049:
        *((_QWORD *)v17 + 1) = v360;
      }
LABEL_514:
      v9 = *((_QWORD *)a2 + 1);
      v13 = *((_QWORD *)a2 + 2);
      v11 = *((unsigned __int8 *)a2 + 24);
    }
    while (v9 < v13 && v11 == 0);
  }
  return v11 == 0;
}

uint64_t CMMsl::KappaSevereCrashResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = this;
  v4 = (uint64_t *)(this + 356);
  v5 = *(_QWORD *)(this + 356);
  if ((v5 & 0x800000) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 132), 1u);
    v5 = *v4;
    v6 = v4[1];
    if ((*v4 & 0x400000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = *(_QWORD *)(this + 364);
  if ((v5 & 0x400000) != 0)
  {
LABEL_5:
    this = PB::Writer::write(a2, *(float *)(v3 + 128), 2u);
    v5 = *v4;
    v6 = v4[1];
  }
LABEL_6:
  if ((v5 & 0x1000000) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 136), 3u);
    v5 = *v4;
    v6 = v4[1];
    if ((*v4 & 0x10000000000000) == 0)
    {
LABEL_8:
      if ((v6 & 1) == 0)
        goto LABEL_9;
      goto LABEL_115;
    }
  }
  else if ((v5 & 0x10000000000000) == 0)
  {
    goto LABEL_8;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 248), 4u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 1) == 0)
  {
LABEL_9:
    if ((v5 & 0x400000000000000) == 0)
      goto LABEL_10;
    goto LABEL_116;
  }
LABEL_115:
  this = PB::Writer::write(a2, *(float *)(v3 + 296), 5u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x400000000000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x400000000000) == 0)
      goto LABEL_11;
    goto LABEL_117;
  }
LABEL_116:
  this = PB::Writer::write(a2, *(float *)(v3 + 272), 6u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x400000000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x200000000000) == 0)
      goto LABEL_12;
    goto LABEL_118;
  }
LABEL_117:
  this = PB::Writer::write(a2, *(float *)(v3 + 224), 7u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x200000000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_119;
  }
LABEL_118:
  this = PB::Writer::write(a2, *(float *)(v3 + 220), 8u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x80000000000000) == 0)
      goto LABEL_14;
    goto LABEL_120;
  }
LABEL_119:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 9u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x80000000000000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_15;
    goto LABEL_121;
  }
LABEL_120:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 260), 0xAu);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x10000) == 0)
      goto LABEL_16;
    goto LABEL_122;
  }
LABEL_121:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 140), 0xBu);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x10000) == 0)
  {
LABEL_16:
    if ((v6 & 8) == 0)
      goto LABEL_17;
    goto LABEL_123;
  }
LABEL_122:
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 0xCu);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 8) == 0)
  {
LABEL_17:
    if ((v6 & 0x10) == 0)
      goto LABEL_18;
    goto LABEL_124;
  }
LABEL_123:
  this = PB::Writer::write(a2, *(float *)(v3 + 308), 0xDu);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x10) == 0)
  {
LABEL_18:
    if ((v5 & 0x80000000000) == 0)
      goto LABEL_19;
    goto LABEL_125;
  }
LABEL_124:
  this = PB::Writer::write(a2, *(float *)(v3 + 312), 0xEu);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x80000000000) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000000000) == 0)
      goto LABEL_20;
    goto LABEL_126;
  }
LABEL_125:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 212), 0xFu);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x20000000000) == 0)
  {
LABEL_20:
    if ((v5 & 0x4000000000000) == 0)
      goto LABEL_21;
    goto LABEL_127;
  }
LABEL_126:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 204), 0x10u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x4000000000000) == 0)
  {
LABEL_21:
    if ((v5 & 0x1000000000000000) == 0)
      goto LABEL_22;
    goto LABEL_128;
  }
LABEL_127:
  this = PB::Writer::write(a2, *(float *)(v3 + 240), 0x11u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x1000000000000000) == 0)
  {
LABEL_22:
    if ((v6 & 2) == 0)
      goto LABEL_23;
    goto LABEL_129;
  }
LABEL_128:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 280), 0x12u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 2) == 0)
  {
LABEL_23:
    if ((v5 & 0x80) == 0)
      goto LABEL_24;
    goto LABEL_130;
  }
LABEL_129:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 300), 0x13u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x80) == 0)
  {
LABEL_24:
    if ((v5 & 1) == 0)
      goto LABEL_25;
    goto LABEL_131;
  }
LABEL_130:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 64), 0x65u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 1) == 0)
  {
LABEL_25:
    if ((v6 & 0x40) == 0)
      goto LABEL_26;
    goto LABEL_132;
  }
LABEL_131:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 8), 0x66u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x40) == 0)
  {
LABEL_26:
    if ((v6 & 0x80) == 0)
      goto LABEL_27;
    goto LABEL_133;
  }
LABEL_132:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 317), 0x67u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x80) == 0)
  {
LABEL_27:
    if ((v6 & 0x8000) == 0)
      goto LABEL_28;
    goto LABEL_134;
  }
LABEL_133:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 318), 0x68u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x8000) == 0)
  {
LABEL_28:
    if ((v6 & 0x10000) == 0)
      goto LABEL_29;
    goto LABEL_135;
  }
LABEL_134:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 326), 0x69u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x10000) == 0)
  {
LABEL_29:
    if ((v6 & 0x8000000) == 0)
      goto LABEL_30;
    goto LABEL_136;
  }
LABEL_135:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 327), 0x6Au);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x8000000) == 0)
  {
LABEL_30:
    if ((v6 & 0x2000000) == 0)
      goto LABEL_31;
    goto LABEL_137;
  }
LABEL_136:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 338), 0x6Bu);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x2000000) == 0)
  {
LABEL_31:
    if ((v6 & 0x1000) == 0)
      goto LABEL_32;
    goto LABEL_138;
  }
LABEL_137:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 336), 0x6Cu);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x1000) == 0)
  {
LABEL_32:
    if ((v6 & 0x10000000) == 0)
      goto LABEL_33;
    goto LABEL_139;
  }
LABEL_138:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 323), 0x6Du);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x10000000) == 0)
  {
LABEL_33:
    if ((v6 & 0x20000000) == 0)
      goto LABEL_34;
    goto LABEL_140;
  }
LABEL_139:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 339), 0x6Eu);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x20000000) == 0)
  {
LABEL_34:
    if ((v6 & 0x200) == 0)
      goto LABEL_35;
    goto LABEL_141;
  }
LABEL_140:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 340), 0x6Fu);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x200) == 0)
  {
LABEL_35:
    if ((v6 & 0x1000000) == 0)
      goto LABEL_36;
    goto LABEL_142;
  }
LABEL_141:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 320), 0x70u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x1000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x2000) == 0)
      goto LABEL_37;
    goto LABEL_143;
  }
LABEL_142:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 335), 0x71u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x2000) == 0)
  {
LABEL_37:
    if ((v6 & 0x4000000) == 0)
      goto LABEL_38;
    goto LABEL_144;
  }
LABEL_143:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 324), 0x12Du);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x4000000) == 0)
  {
LABEL_38:
    if ((v6 & 0x80000) == 0)
      goto LABEL_39;
    goto LABEL_145;
  }
LABEL_144:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 337), 0x12Eu);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x80000) == 0)
  {
LABEL_39:
    if ((v6 & 0x2000000000) == 0)
      goto LABEL_40;
    goto LABEL_146;
  }
LABEL_145:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 330), 0x12Fu);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x2000000000) == 0)
  {
LABEL_40:
    if ((v6 & 0x200000000) == 0)
      goto LABEL_41;
    goto LABEL_147;
  }
LABEL_146:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 348), 0x130u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x200000000) == 0)
  {
LABEL_41:
    if ((v6 & 0x4000000000) == 0)
      goto LABEL_42;
    goto LABEL_148;
  }
LABEL_147:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 344), 0x131u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x4000000000) == 0)
  {
LABEL_42:
    if ((v6 & 0x400000000) == 0)
      goto LABEL_43;
    goto LABEL_149;
  }
LABEL_148:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 349), 0x132u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x400000000) == 0)
  {
LABEL_43:
    if ((v6 & 0x40000000) == 0)
      goto LABEL_44;
    goto LABEL_150;
  }
LABEL_149:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 345), 0x133u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x40000000) == 0)
  {
LABEL_44:
    if ((v6 & 0x800) == 0)
      goto LABEL_45;
    goto LABEL_151;
  }
LABEL_150:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 341), 0x134u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x800) == 0)
  {
LABEL_45:
    if ((v6 & 0x100000) == 0)
      goto LABEL_46;
    goto LABEL_152;
  }
LABEL_151:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 322), 0x135u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x100000) == 0)
  {
LABEL_46:
    if ((v6 & 0x8000000000) == 0)
      goto LABEL_47;
    goto LABEL_153;
  }
LABEL_152:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 331), 0x136u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x8000000000) == 0)
  {
LABEL_47:
    if ((v6 & 0x800000000) == 0)
      goto LABEL_48;
    goto LABEL_154;
  }
LABEL_153:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 350), 0x137u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x800000000) == 0)
  {
LABEL_48:
    if ((v5 & 0x20000) == 0)
      goto LABEL_49;
    goto LABEL_155;
  }
LABEL_154:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 346), 0x138u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x20000) == 0)
  {
LABEL_49:
    if ((v6 & 0x400000) == 0)
      goto LABEL_50;
    goto LABEL_156;
  }
LABEL_155:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 108), 0x139u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x400000) == 0)
  {
LABEL_50:
    if ((v6 & 0x800000) == 0)
      goto LABEL_51;
    goto LABEL_157;
  }
LABEL_156:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 333), 0x13Au);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x800000) == 0)
  {
LABEL_51:
    if ((v6 & 0x20) == 0)
      goto LABEL_52;
    goto LABEL_158;
  }
LABEL_157:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 334), 0x13Bu);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x20) == 0)
  {
LABEL_52:
    if ((v5 & 0x40000) == 0)
      goto LABEL_53;
    goto LABEL_159;
  }
LABEL_158:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 316), 0x13Cu);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x40000) == 0)
  {
LABEL_53:
    if ((v6 & 0x40000000000) == 0)
      goto LABEL_54;
    goto LABEL_160;
  }
LABEL_159:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 112), 0x13Du);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x40000000000) == 0)
  {
LABEL_54:
    if ((v6 & 0x10000000000) == 0)
      goto LABEL_55;
    goto LABEL_161;
  }
LABEL_160:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 353), 0x13Eu);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x10000000000) == 0)
  {
LABEL_55:
    if ((v6 & 0x20000000000) == 0)
      goto LABEL_56;
    goto LABEL_162;
  }
LABEL_161:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 351), 0x13Fu);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x20000000000) == 0)
  {
LABEL_56:
    if ((v6 & 0x100000000) == 0)
      goto LABEL_57;
    goto LABEL_163;
  }
LABEL_162:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 352), 0x140u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x100000000) == 0)
  {
LABEL_57:
    if ((v6 & 0x80000000) == 0)
      goto LABEL_58;
    goto LABEL_164;
  }
LABEL_163:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 343), 0x141u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x80000000) == 0)
  {
LABEL_58:
    if ((v5 & 0x20000000000000) == 0)
      goto LABEL_59;
    goto LABEL_165;
  }
LABEL_164:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 342), 0x142u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x20000000000000) == 0)
  {
LABEL_59:
    if ((v5 & 0x40000000000000) == 0)
      goto LABEL_60;
    goto LABEL_166;
  }
LABEL_165:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 252), 0x191u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x40000000000000) == 0)
  {
LABEL_60:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_61;
    goto LABEL_167;
  }
LABEL_166:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 256), 0x192u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x4000000) == 0)
  {
LABEL_61:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_62;
    goto LABEL_168;
  }
LABEL_167:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 144), 0x193u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x8000000) == 0)
  {
LABEL_62:
    if ((v6 & 0x20000) == 0)
      goto LABEL_63;
    goto LABEL_169;
  }
LABEL_168:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 148), 0x194u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x20000) == 0)
  {
LABEL_63:
    if ((v6 & 0x4000) == 0)
      goto LABEL_64;
    goto LABEL_170;
  }
LABEL_169:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 328), 0x195u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x4000) == 0)
  {
LABEL_64:
    if ((v5 & 0x2000000000) == 0)
      goto LABEL_65;
    goto LABEL_171;
  }
LABEL_170:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 325), 0x196u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x2000000000) == 0)
  {
LABEL_65:
    if ((v5 & 0x80000) == 0)
      goto LABEL_66;
    goto LABEL_172;
  }
LABEL_171:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 188), 0x197u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x80000) == 0)
  {
LABEL_66:
    if ((v5 & 0x1000000000) == 0)
      goto LABEL_67;
    goto LABEL_173;
  }
LABEL_172:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 116), 0x198u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x1000000000) == 0)
  {
LABEL_67:
    if ((v5 & 0x4000000000000000) == 0)
      goto LABEL_68;
    goto LABEL_174;
  }
LABEL_173:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 184), 0x199u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x4000000000000000) == 0)
  {
LABEL_68:
    if ((v5 & 0x8000000000000000) == 0)
      goto LABEL_69;
    goto LABEL_175;
  }
LABEL_174:
  this = PB::Writer::write(a2, *(float *)(v3 + 288), 0x1F5u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x8000000000000000) == 0)
  {
LABEL_69:
    if ((v5 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_176;
  }
LABEL_175:
  this = PB::Writer::write(a2, *(float *)(v3 + 292), 0x1F6u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v5 & 0x800000000000000) == 0)
      goto LABEL_71;
    goto LABEL_177;
  }
LABEL_176:
  this = PB::Writer::write(a2, *(float *)(v3 + 268), 0x1F7u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x800000000000000) == 0)
  {
LABEL_71:
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_72;
    goto LABEL_178;
  }
LABEL_177:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 276), 0x1F8u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x2000000000000000) == 0)
  {
LABEL_72:
    if ((v6 & 0x400) == 0)
      goto LABEL_73;
    goto LABEL_179;
  }
LABEL_178:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 284), 0x1F9u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x400) == 0)
  {
LABEL_73:
    if ((v5 & 0x4000) == 0)
      goto LABEL_74;
    goto LABEL_180;
  }
LABEL_179:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 321), 0x259u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x4000) == 0)
  {
LABEL_74:
    if ((v5 & 0x1000) == 0)
      goto LABEL_75;
    goto LABEL_181;
  }
LABEL_180:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 96), 0x25Au);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x1000) == 0)
  {
LABEL_75:
    if ((v5 & 0x100000000000) == 0)
      goto LABEL_76;
    goto LABEL_182;
  }
LABEL_181:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 0x25Bu);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x100000000000) == 0)
  {
LABEL_76:
    if ((v5 & 0x100000000000000) == 0)
      goto LABEL_77;
    goto LABEL_183;
  }
LABEL_182:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 216), 0x25Cu);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x100000000000000) == 0)
  {
LABEL_77:
    if ((v5 & 0x40) == 0)
      goto LABEL_78;
    goto LABEL_184;
  }
LABEL_183:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 264), 0x25Du);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x40) == 0)
  {
LABEL_78:
    if ((v5 & 0x800000000000) == 0)
      goto LABEL_79;
    goto LABEL_185;
  }
LABEL_184:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 56), 0x25Eu);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x800000000000) == 0)
  {
LABEL_79:
    if ((v5 & 0x1000000000000) == 0)
      goto LABEL_80;
    goto LABEL_186;
  }
LABEL_185:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 228), 0x2BDu);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x1000000000000) == 0)
  {
LABEL_80:
    if ((v5 & 0x100000) == 0)
      goto LABEL_81;
    goto LABEL_187;
  }
LABEL_186:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 232), 0x2BEu);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x100000) == 0)
  {
LABEL_81:
    if ((v5 & 0x400) == 0)
      goto LABEL_82;
    goto LABEL_188;
  }
LABEL_187:
  this = PB::Writer::write(a2, *(float *)(v3 + 120), 0x321u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x400) == 0)
  {
LABEL_82:
    if ((v5 & 0x200000) == 0)
      goto LABEL_83;
    goto LABEL_189;
  }
LABEL_188:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0x322u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x200000) == 0)
  {
LABEL_83:
    if ((v5 & 0x800) == 0)
      goto LABEL_84;
    goto LABEL_190;
  }
LABEL_189:
  this = PB::Writer::write(a2, *(float *)(v3 + 124), 0x323u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x800) == 0)
  {
LABEL_84:
    if ((v5 & 0x100) == 0)
      goto LABEL_85;
    goto LABEL_191;
  }
LABEL_190:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 0x324u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x100) == 0)
  {
LABEL_85:
    if ((v6 & 0x200000) == 0)
      goto LABEL_86;
    goto LABEL_192;
  }
LABEL_191:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0x385u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x200000) == 0)
  {
LABEL_86:
    if ((v6 & 4) == 0)
      goto LABEL_87;
    goto LABEL_193;
  }
LABEL_192:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 332), 0x386u);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 4) == 0)
  {
LABEL_87:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_88;
    goto LABEL_194;
  }
LABEL_193:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 304), 0x3E9u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x10000000) == 0)
  {
LABEL_88:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_89;
    goto LABEL_195;
  }
LABEL_194:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 152), 0x44Du);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x40000000) == 0)
  {
LABEL_89:
    if ((v6 & 0x1000000000) == 0)
      goto LABEL_90;
    goto LABEL_196;
  }
LABEL_195:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 160), 0x44Eu);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x1000000000) == 0)
  {
LABEL_90:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_91;
    goto LABEL_197;
  }
LABEL_196:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 347), 0x44Fu);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x80000000) == 0)
  {
LABEL_91:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_92;
    goto LABEL_198;
  }
LABEL_197:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 164), 0x450u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x20000000) == 0)
  {
LABEL_92:
    if ((v5 & 0x8000000000000) == 0)
      goto LABEL_93;
    goto LABEL_199;
  }
LABEL_198:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 156), 0x451u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x8000000000000) == 0)
  {
LABEL_93:
    if ((v5 & 0x4000000000) == 0)
      goto LABEL_94;
    goto LABEL_200;
  }
LABEL_199:
  this = PB::Writer::write(a2, *(float *)(v3 + 244), 0x452u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x4000000000) == 0)
  {
LABEL_94:
    if ((v5 & 0x8000000000) == 0)
      goto LABEL_95;
    goto LABEL_201;
  }
LABEL_200:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 192), 0x4B1u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x8000000000) == 0)
  {
LABEL_95:
    if ((v5 & 0x8000) == 0)
      goto LABEL_96;
    goto LABEL_202;
  }
LABEL_201:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 196), 0x4B2u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x8000) == 0)
  {
LABEL_96:
    if ((v5 & 0x40000000000) == 0)
      goto LABEL_97;
    goto LABEL_203;
  }
LABEL_202:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 0x515u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x40000000000) == 0)
  {
LABEL_97:
    if ((v5 & 0x10000000000) == 0)
      goto LABEL_98;
    goto LABEL_204;
  }
LABEL_203:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 208), 0x516u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x10000000000) == 0)
  {
LABEL_98:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_99;
    goto LABEL_205;
  }
LABEL_204:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 200), 0x517u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x800000000) == 0)
  {
LABEL_99:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_100;
    goto LABEL_206;
  }
LABEL_205:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 180), 0x518u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x100000000) == 0)
  {
LABEL_100:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_101;
    goto LABEL_207;
  }
LABEL_206:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 168), 0x519u);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x400000000) == 0)
  {
LABEL_101:
    if ((v6 & 0x100) == 0)
      goto LABEL_102;
    goto LABEL_208;
  }
LABEL_207:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 176), 0x51Au);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x100) == 0)
  {
LABEL_102:
    if ((v6 & 0x40000) == 0)
      goto LABEL_103;
    goto LABEL_209;
  }
LABEL_208:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 319), 0x51Bu);
  v5 = *v4;
  if ((v4[1] & 0x40000) == 0)
  {
LABEL_103:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_105;
    goto LABEL_104;
  }
LABEL_209:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 329), 0x51Cu);
  if ((*v4 & 0x200000000) != 0)
LABEL_104:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 172), 0x51Du);
LABEL_105:
  v7 = *v4;
  if ((*v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 16), 0x51Eu);
    v7 = *v4;
    if ((*v4 & 0x20) == 0)
    {
LABEL_107:
      if ((v7 & 4) == 0)
        goto LABEL_108;
      goto LABEL_213;
    }
  }
  else if ((v7 & 0x20) == 0)
  {
    goto LABEL_107;
  }
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 48), 0x51Fu);
  v7 = *v4;
  if ((*v4 & 4) == 0)
  {
LABEL_108:
    if ((v7 & 8) == 0)
      goto LABEL_109;
    goto LABEL_214;
  }
LABEL_213:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 24), 0x520u);
  v7 = *v4;
  if ((*v4 & 8) == 0)
  {
LABEL_109:
    if ((v7 & 0x10) == 0)
      goto LABEL_110;
    goto LABEL_215;
  }
LABEL_214:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 32), 0x521u);
  v7 = *v4;
  if ((*v4 & 0x10) == 0)
  {
LABEL_110:
    if ((v7 & 0x2000000000000) == 0)
      goto LABEL_111;
    goto LABEL_216;
  }
LABEL_215:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 40), 0x522u);
  v7 = *v4;
  if ((*v4 & 0x2000000000000) == 0)
  {
LABEL_111:
    if ((v7 & 0x2000) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 92), 0x524u);
  }
LABEL_216:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 236), 0x523u);
  if ((*v4 & 0x2000) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 92), 0x524u);
  return this;
}

uint64_t CMMsl::KappaSevereCrashResult::hash_value(CMMsl::KappaSevereCrashResult *this)
{
  uint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  float v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;

  v1 = *(_QWORD *)((char *)this + 356);
  if ((v1 & 0x800000) != 0)
  {
    v6 = *((float *)this + 33);
    v2 = LODWORD(v6);
    if (v6 == 0.0)
      v2 = 0;
    if ((v1 & 0x400000) != 0)
    {
LABEL_3:
      v3 = *((float *)this + 32);
      v4 = v2;
      v5 = LODWORD(v3);
      if (v3 == 0.0)
        v5 = 0;
      v153 = v5;
      v2 = v4;
      if ((v1 & 0x1000000) != 0)
        goto LABEL_6;
      goto LABEL_11;
    }
  }
  else
  {
    v2 = 0;
    if ((v1 & 0x400000) != 0)
      goto LABEL_3;
  }
  v153 = 0;
  if ((v1 & 0x1000000) != 0)
  {
LABEL_6:
    v152 = *((int *)this + 34);
    goto LABEL_12;
  }
LABEL_11:
  v152 = 0;
LABEL_12:
  v7 = *(_QWORD *)((char *)this + 364);
  if ((v1 & 0x10000000000000) == 0)
  {
    v151 = 0;
    if ((v7 & 1) != 0)
      goto LABEL_14;
LABEL_162:
    v150 = 0;
    if ((v1 & 0x400000000000000) != 0)
      goto LABEL_17;
LABEL_163:
    v149 = 0;
    if ((v1 & 0x400000000000) != 0)
      goto LABEL_20;
LABEL_164:
    v148 = 0;
    if ((v1 & 0x200000000000) != 0)
      goto LABEL_23;
LABEL_165:
    v147 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_26;
LABEL_166:
    v146 = 0;
    if ((v1 & 0x80000000000000) != 0)
      goto LABEL_29;
    goto LABEL_167;
  }
  v151 = *((int *)this + 62);
  if ((v7 & 1) == 0)
    goto LABEL_162;
LABEL_14:
  v8 = *((float *)this + 74);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  v150 = v9;
  if ((v1 & 0x400000000000000) == 0)
    goto LABEL_163;
LABEL_17:
  v10 = *((float *)this + 68);
  v11 = LODWORD(v10);
  if (v10 == 0.0)
    v11 = 0;
  v149 = v11;
  if ((v1 & 0x400000000000) == 0)
    goto LABEL_164;
LABEL_20:
  v12 = *((float *)this + 56);
  v13 = LODWORD(v12);
  if (v12 == 0.0)
    v13 = 0;
  v148 = v13;
  if ((v1 & 0x200000000000) == 0)
    goto LABEL_165;
LABEL_23:
  v14 = *((float *)this + 55);
  v15 = LODWORD(v14);
  if (v14 == 0.0)
    v15 = 0;
  v147 = v15;
  if ((v1 & 0x200) == 0)
    goto LABEL_166;
LABEL_26:
  v16 = *((float *)this + 19);
  v17 = LODWORD(v16);
  if (v16 == 0.0)
    v17 = 0;
  v146 = v17;
  if ((v1 & 0x80000000000000) != 0)
  {
LABEL_29:
    v145 = *((unsigned int *)this + 65);
    if ((v1 & 0x2000000) != 0)
      goto LABEL_30;
    goto LABEL_168;
  }
LABEL_167:
  v145 = 0;
  if ((v1 & 0x2000000) != 0)
  {
LABEL_30:
    v144 = *((unsigned int *)this + 35);
    if ((v1 & 0x10000) != 0)
      goto LABEL_31;
LABEL_169:
    v143 = 0;
    if ((v7 & 8) != 0)
      goto LABEL_34;
LABEL_170:
    v142 = 0;
    if ((v7 & 0x10) != 0)
      goto LABEL_37;
LABEL_171:
    v141 = 0;
    if ((v1 & 0x80000000000) != 0)
      goto LABEL_40;
    goto LABEL_172;
  }
LABEL_168:
  v144 = 0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_169;
LABEL_31:
  v18 = *((float *)this + 26);
  v19 = LODWORD(v18);
  if (v18 == 0.0)
    v19 = 0;
  v143 = v19;
  if ((v7 & 8) == 0)
    goto LABEL_170;
LABEL_34:
  v20 = *((float *)this + 77);
  v21 = LODWORD(v20);
  if (v20 == 0.0)
    v21 = 0;
  v142 = v21;
  if ((v7 & 0x10) == 0)
    goto LABEL_171;
LABEL_37:
  v22 = *((float *)this + 78);
  v23 = LODWORD(v22);
  if (v22 == 0.0)
    v23 = 0;
  v141 = v23;
  if ((v1 & 0x80000000000) != 0)
  {
LABEL_40:
    v140 = *((int *)this + 53);
    if ((v1 & 0x20000000000) != 0)
      goto LABEL_41;
    goto LABEL_173;
  }
LABEL_172:
  v140 = 0;
  if ((v1 & 0x20000000000) != 0)
  {
LABEL_41:
    v139 = *((int *)this + 51);
    if ((v1 & 0x4000000000000) != 0)
      goto LABEL_42;
LABEL_174:
    v138 = 0;
    if ((v1 & 0x1000000000000000) != 0)
      goto LABEL_45;
    goto LABEL_175;
  }
LABEL_173:
  v139 = 0;
  if ((v1 & 0x4000000000000) == 0)
    goto LABEL_174;
LABEL_42:
  v24 = *((float *)this + 60);
  v25 = LODWORD(v24);
  if (v24 == 0.0)
    v25 = 0;
  v138 = v25;
  if ((v1 & 0x1000000000000000) != 0)
  {
LABEL_45:
    v137 = *((unsigned int *)this + 70);
    if ((v7 & 2) != 0)
      goto LABEL_46;
    goto LABEL_176;
  }
LABEL_175:
  v137 = 0;
  if ((v7 & 2) != 0)
  {
LABEL_46:
    v136 = *((unsigned int *)this + 75);
    if ((v1 & 0x80) != 0)
      goto LABEL_47;
    goto LABEL_177;
  }
LABEL_176:
  v136 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_47:
    v135 = *((_QWORD *)this + 8);
    if ((v1 & 1) != 0)
      goto LABEL_48;
    goto LABEL_178;
  }
LABEL_177:
  v135 = 0;
  if ((v1 & 1) != 0)
  {
LABEL_48:
    v134 = *((_QWORD *)this + 1);
    if ((v7 & 0x40) != 0)
      goto LABEL_49;
    goto LABEL_179;
  }
LABEL_178:
  v134 = 0;
  if ((v7 & 0x40) != 0)
  {
LABEL_49:
    v133 = *((unsigned __int8 *)this + 317);
    if ((v7 & 0x80) != 0)
      goto LABEL_50;
    goto LABEL_180;
  }
LABEL_179:
  v133 = 0;
  if ((v7 & 0x80) != 0)
  {
LABEL_50:
    v132 = *((unsigned __int8 *)this + 318);
    if ((v7 & 0x8000) != 0)
      goto LABEL_51;
    goto LABEL_181;
  }
LABEL_180:
  v132 = 0;
  if ((v7 & 0x8000) != 0)
  {
LABEL_51:
    v131 = *((unsigned __int8 *)this + 326);
    if ((v7 & 0x10000) != 0)
      goto LABEL_52;
    goto LABEL_182;
  }
LABEL_181:
  v131 = 0;
  if ((v7 & 0x10000) != 0)
  {
LABEL_52:
    v130 = *((unsigned __int8 *)this + 327);
    if ((v7 & 0x8000000) != 0)
      goto LABEL_53;
    goto LABEL_183;
  }
LABEL_182:
  v130 = 0;
  if ((v7 & 0x8000000) != 0)
  {
LABEL_53:
    v129 = *((unsigned __int8 *)this + 338);
    if ((v7 & 0x2000000) != 0)
      goto LABEL_54;
    goto LABEL_184;
  }
LABEL_183:
  v129 = 0;
  if ((v7 & 0x2000000) != 0)
  {
LABEL_54:
    v128 = *((unsigned __int8 *)this + 336);
    if ((v7 & 0x1000) != 0)
      goto LABEL_55;
    goto LABEL_185;
  }
LABEL_184:
  v128 = 0;
  if ((v7 & 0x1000) != 0)
  {
LABEL_55:
    v127 = *((unsigned __int8 *)this + 323);
    if ((v7 & 0x10000000) != 0)
      goto LABEL_56;
    goto LABEL_186;
  }
LABEL_185:
  v127 = 0;
  if ((v7 & 0x10000000) != 0)
  {
LABEL_56:
    v126 = *((unsigned __int8 *)this + 339);
    if ((v7 & 0x20000000) != 0)
      goto LABEL_57;
    goto LABEL_187;
  }
LABEL_186:
  v126 = 0;
  if ((v7 & 0x20000000) != 0)
  {
LABEL_57:
    v125 = *((unsigned __int8 *)this + 340);
    if ((v7 & 0x200) != 0)
      goto LABEL_58;
    goto LABEL_188;
  }
LABEL_187:
  v125 = 0;
  if ((v7 & 0x200) != 0)
  {
LABEL_58:
    v124 = *((unsigned __int8 *)this + 320);
    if ((v7 & 0x1000000) != 0)
      goto LABEL_59;
    goto LABEL_189;
  }
LABEL_188:
  v124 = 0;
  if ((v7 & 0x1000000) != 0)
  {
LABEL_59:
    v123 = *((unsigned __int8 *)this + 335);
    if ((v7 & 0x2000) != 0)
      goto LABEL_60;
    goto LABEL_190;
  }
LABEL_189:
  v123 = 0;
  if ((v7 & 0x2000) != 0)
  {
LABEL_60:
    v122 = *((unsigned __int8 *)this + 324);
    if ((v7 & 0x4000000) != 0)
      goto LABEL_61;
    goto LABEL_191;
  }
LABEL_190:
  v122 = 0;
  if ((v7 & 0x4000000) != 0)
  {
LABEL_61:
    v121 = *((unsigned __int8 *)this + 337);
    if ((v7 & 0x80000) != 0)
      goto LABEL_62;
    goto LABEL_192;
  }
LABEL_191:
  v121 = 0;
  if ((v7 & 0x80000) != 0)
  {
LABEL_62:
    v120 = *((unsigned __int8 *)this + 330);
    if ((v7 & 0x2000000000) != 0)
      goto LABEL_63;
    goto LABEL_193;
  }
LABEL_192:
  v120 = 0;
  if ((v7 & 0x2000000000) != 0)
  {
LABEL_63:
    v119 = *((unsigned __int8 *)this + 348);
    if ((v7 & 0x200000000) != 0)
      goto LABEL_64;
    goto LABEL_194;
  }
LABEL_193:
  v119 = 0;
  if ((v7 & 0x200000000) != 0)
  {
LABEL_64:
    v118 = *((unsigned __int8 *)this + 344);
    if ((v7 & 0x4000000000) != 0)
      goto LABEL_65;
    goto LABEL_195;
  }
LABEL_194:
  v118 = 0;
  if ((v7 & 0x4000000000) != 0)
  {
LABEL_65:
    v117 = *((unsigned __int8 *)this + 349);
    if ((v7 & 0x400000000) != 0)
      goto LABEL_66;
    goto LABEL_196;
  }
LABEL_195:
  v117 = 0;
  if ((v7 & 0x400000000) != 0)
  {
LABEL_66:
    v116 = *((unsigned __int8 *)this + 345);
    if ((v7 & 0x40000000) != 0)
      goto LABEL_67;
    goto LABEL_197;
  }
LABEL_196:
  v116 = 0;
  if ((v7 & 0x40000000) != 0)
  {
LABEL_67:
    v115 = *((unsigned __int8 *)this + 341);
    if ((v7 & 0x800) != 0)
      goto LABEL_68;
    goto LABEL_198;
  }
LABEL_197:
  v115 = 0;
  if ((v7 & 0x800) != 0)
  {
LABEL_68:
    v114 = *((unsigned __int8 *)this + 322);
    if ((v7 & 0x100000) != 0)
      goto LABEL_69;
    goto LABEL_199;
  }
LABEL_198:
  v114 = 0;
  if ((v7 & 0x100000) != 0)
  {
LABEL_69:
    v113 = *((unsigned __int8 *)this + 331);
    if ((v7 & 0x8000000000) != 0)
      goto LABEL_70;
    goto LABEL_200;
  }
LABEL_199:
  v113 = 0;
  if ((v7 & 0x8000000000) != 0)
  {
LABEL_70:
    v112 = *((unsigned __int8 *)this + 350);
    if ((v7 & 0x800000000) != 0)
      goto LABEL_71;
    goto LABEL_201;
  }
LABEL_200:
  v112 = 0;
  if ((v7 & 0x800000000) != 0)
  {
LABEL_71:
    v111 = *((unsigned __int8 *)this + 346);
    if ((v1 & 0x20000) != 0)
      goto LABEL_72;
    goto LABEL_202;
  }
LABEL_201:
  v111 = 0;
  if ((v1 & 0x20000) != 0)
  {
LABEL_72:
    v110 = *((unsigned int *)this + 27);
    if ((v7 & 0x400000) != 0)
      goto LABEL_73;
    goto LABEL_203;
  }
LABEL_202:
  v110 = 0;
  if ((v7 & 0x400000) != 0)
  {
LABEL_73:
    v109 = *((unsigned __int8 *)this + 333);
    if ((v7 & 0x800000) != 0)
      goto LABEL_74;
    goto LABEL_204;
  }
LABEL_203:
  v109 = 0;
  if ((v7 & 0x800000) != 0)
  {
LABEL_74:
    v108 = *((unsigned __int8 *)this + 334);
    if ((v7 & 0x20) != 0)
      goto LABEL_75;
    goto LABEL_205;
  }
LABEL_204:
  v108 = 0;
  if ((v7 & 0x20) != 0)
  {
LABEL_75:
    v107 = *((unsigned __int8 *)this + 316);
    if ((v1 & 0x40000) != 0)
      goto LABEL_76;
    goto LABEL_206;
  }
LABEL_205:
  v107 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_76:
    v106 = *((unsigned int *)this + 28);
    if ((v7 & 0x40000000000) != 0)
      goto LABEL_77;
    goto LABEL_207;
  }
LABEL_206:
  v106 = 0;
  if ((v7 & 0x40000000000) != 0)
  {
LABEL_77:
    v105 = *((unsigned __int8 *)this + 353);
    if ((v7 & 0x10000000000) != 0)
      goto LABEL_78;
    goto LABEL_208;
  }
LABEL_207:
  v105 = 0;
  if ((v7 & 0x10000000000) != 0)
  {
LABEL_78:
    v104 = *((unsigned __int8 *)this + 351);
    if ((v7 & 0x20000000000) != 0)
      goto LABEL_79;
    goto LABEL_209;
  }
LABEL_208:
  v104 = 0;
  if ((v7 & 0x20000000000) != 0)
  {
LABEL_79:
    v103 = *((unsigned __int8 *)this + 352);
    if ((v7 & 0x100000000) != 0)
      goto LABEL_80;
    goto LABEL_210;
  }
LABEL_209:
  v103 = 0;
  if ((v7 & 0x100000000) != 0)
  {
LABEL_80:
    v102 = *((unsigned __int8 *)this + 343);
    if ((v7 & 0x80000000) != 0)
      goto LABEL_81;
    goto LABEL_211;
  }
LABEL_210:
  v102 = 0;
  if ((v7 & 0x80000000) != 0)
  {
LABEL_81:
    v101 = *((unsigned __int8 *)this + 342);
    if ((v1 & 0x20000000000000) != 0)
      goto LABEL_82;
    goto LABEL_212;
  }
LABEL_211:
  v101 = 0;
  if ((v1 & 0x20000000000000) != 0)
  {
LABEL_82:
    v100 = *((int *)this + 63);
    if ((v1 & 0x40000000000000) != 0)
      goto LABEL_83;
    goto LABEL_213;
  }
LABEL_212:
  v100 = 0;
  if ((v1 & 0x40000000000000) != 0)
  {
LABEL_83:
    v99 = *((int *)this + 64);
    if ((v1 & 0x4000000) != 0)
      goto LABEL_84;
    goto LABEL_214;
  }
LABEL_213:
  v99 = 0;
  if ((v1 & 0x4000000) != 0)
  {
LABEL_84:
    v98 = *((int *)this + 36);
    if ((v1 & 0x8000000) != 0)
      goto LABEL_85;
    goto LABEL_215;
  }
LABEL_214:
  v98 = 0;
  if ((v1 & 0x8000000) != 0)
  {
LABEL_85:
    v97 = *((int *)this + 37);
    if ((v7 & 0x20000) != 0)
      goto LABEL_86;
    goto LABEL_216;
  }
LABEL_215:
  v97 = 0;
  if ((v7 & 0x20000) != 0)
  {
LABEL_86:
    v96 = *((unsigned __int8 *)this + 328);
    if ((v7 & 0x4000) != 0)
      goto LABEL_87;
    goto LABEL_217;
  }
LABEL_216:
  v96 = 0;
  if ((v7 & 0x4000) != 0)
  {
LABEL_87:
    v95 = *((unsigned __int8 *)this + 325);
    if ((v1 & 0x2000000000) != 0)
      goto LABEL_88;
    goto LABEL_218;
  }
LABEL_217:
  v95 = 0;
  if ((v1 & 0x2000000000) != 0)
  {
LABEL_88:
    v94 = *((int *)this + 47);
    if ((v1 & 0x80000) != 0)
      goto LABEL_89;
    goto LABEL_219;
  }
LABEL_218:
  v94 = 0;
  if ((v1 & 0x80000) != 0)
  {
LABEL_89:
    v93 = *((int *)this + 29);
    if ((v1 & 0x1000000000) != 0)
      goto LABEL_90;
    goto LABEL_220;
  }
LABEL_219:
  v93 = 0;
  if ((v1 & 0x1000000000) != 0)
  {
LABEL_90:
    v92 = *((int *)this + 46);
    if ((v1 & 0x4000000000000000) != 0)
      goto LABEL_91;
LABEL_221:
    v91 = 0;
    if (v1 < 0)
      goto LABEL_94;
LABEL_222:
    v90 = 0;
    if ((v1 & 0x200000000000000) != 0)
      goto LABEL_97;
LABEL_223:
    v89 = 0;
    if ((v1 & 0x800000000000000) != 0)
      goto LABEL_100;
    goto LABEL_224;
  }
LABEL_220:
  v92 = 0;
  if ((v1 & 0x4000000000000000) == 0)
    goto LABEL_221;
LABEL_91:
  v26 = *((float *)this + 72);
  v27 = LODWORD(v26);
  if (v26 == 0.0)
    v27 = 0;
  v91 = v27;
  if ((v1 & 0x8000000000000000) == 0)
    goto LABEL_222;
LABEL_94:
  v28 = *((float *)this + 73);
  v29 = LODWORD(v28);
  if (v28 == 0.0)
    v29 = 0;
  v90 = v29;
  if ((v1 & 0x200000000000000) == 0)
    goto LABEL_223;
LABEL_97:
  v30 = *((float *)this + 67);
  v31 = LODWORD(v30);
  if (v30 == 0.0)
    v31 = 0;
  v89 = v31;
  if ((v1 & 0x800000000000000) != 0)
  {
LABEL_100:
    v88 = *((unsigned int *)this + 69);
    if ((v1 & 0x2000000000000000) != 0)
      goto LABEL_101;
    goto LABEL_225;
  }
LABEL_224:
  v88 = 0;
  if ((v1 & 0x2000000000000000) != 0)
  {
LABEL_101:
    v87 = *((unsigned int *)this + 71);
    if ((v7 & 0x400) != 0)
      goto LABEL_102;
    goto LABEL_226;
  }
LABEL_225:
  v87 = 0;
  if ((v7 & 0x400) != 0)
  {
LABEL_102:
    v86 = *((unsigned __int8 *)this + 321);
    if ((v1 & 0x4000) != 0)
      goto LABEL_103;
    goto LABEL_227;
  }
LABEL_226:
  v86 = 0;
  if ((v1 & 0x4000) != 0)
  {
LABEL_103:
    v85 = *((unsigned int *)this + 24);
    if ((v1 & 0x1000) != 0)
      goto LABEL_104;
LABEL_228:
    v84 = 0;
    if ((v1 & 0x100000000000) != 0)
      goto LABEL_107;
    goto LABEL_229;
  }
LABEL_227:
  v85 = 0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_228;
LABEL_104:
  v32 = *((float *)this + 22);
  v33 = LODWORD(v32);
  if (v32 == 0.0)
    v33 = 0;
  v84 = v33;
  if ((v1 & 0x100000000000) != 0)
  {
LABEL_107:
    v83 = *((unsigned int *)this + 54);
    if ((v1 & 0x100000000000000) != 0)
      goto LABEL_108;
    goto LABEL_230;
  }
LABEL_229:
  v83 = 0;
  if ((v1 & 0x100000000000000) != 0)
  {
LABEL_108:
    v82 = *((unsigned int *)this + 66);
    if ((v1 & 0x40) != 0)
      goto LABEL_109;
    goto LABEL_231;
  }
LABEL_230:
  v82 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_109:
    v81 = *((_QWORD *)this + 7);
    if ((v1 & 0x800000000000) != 0)
      goto LABEL_110;
    goto LABEL_232;
  }
LABEL_231:
  v81 = 0;
  if ((v1 & 0x800000000000) != 0)
  {
LABEL_110:
    v80 = *((int *)this + 57);
    if ((v1 & 0x1000000000000) != 0)
      goto LABEL_111;
    goto LABEL_233;
  }
LABEL_232:
  v80 = 0;
  if ((v1 & 0x1000000000000) != 0)
  {
LABEL_111:
    v79 = *((int *)this + 58);
    if ((v1 & 0x100000) != 0)
      goto LABEL_112;
LABEL_234:
    v78 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_115;
LABEL_235:
    v77 = 0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_118;
LABEL_236:
    v76 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_121;
LABEL_237:
    v75 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_124;
LABEL_238:
    v74 = 0;
    if ((v7 & 0x200000) != 0)
      goto LABEL_127;
    goto LABEL_239;
  }
LABEL_233:
  v79 = 0;
  if ((v1 & 0x100000) == 0)
    goto LABEL_234;
LABEL_112:
  v34 = *((float *)this + 30);
  v35 = LODWORD(v34);
  if (v34 == 0.0)
    v35 = 0;
  v78 = v35;
  if ((v1 & 0x400) == 0)
    goto LABEL_235;
LABEL_115:
  v36 = *((float *)this + 20);
  v37 = LODWORD(v36);
  if (v36 == 0.0)
    v37 = 0;
  v77 = v37;
  if ((v1 & 0x200000) == 0)
    goto LABEL_236;
LABEL_118:
  v38 = *((float *)this + 31);
  v39 = LODWORD(v38);
  if (v38 == 0.0)
    v39 = 0;
  v76 = v39;
  if ((v1 & 0x800) == 0)
    goto LABEL_237;
LABEL_121:
  v40 = *((float *)this + 21);
  v41 = LODWORD(v40);
  if (v40 == 0.0)
    v41 = 0;
  v75 = v41;
  if ((v1 & 0x100) == 0)
    goto LABEL_238;
LABEL_124:
  v42 = *((float *)this + 18);
  v43 = LODWORD(v42);
  if (v42 == 0.0)
    v43 = 0;
  v74 = v43;
  if ((v7 & 0x200000) != 0)
  {
LABEL_127:
    v44 = *((unsigned __int8 *)this + 332);
    if ((v7 & 4) != 0)
      goto LABEL_128;
    goto LABEL_240;
  }
LABEL_239:
  v44 = 0;
  if ((v7 & 4) != 0)
  {
LABEL_128:
    v45 = *((int *)this + 76);
    if ((v1 & 0x10000000) != 0)
      goto LABEL_129;
    goto LABEL_241;
  }
LABEL_240:
  v45 = 0;
  if ((v1 & 0x10000000) != 0)
  {
LABEL_129:
    v46 = *((int *)this + 38);
    if ((v1 & 0x40000000) != 0)
      goto LABEL_130;
    goto LABEL_242;
  }
LABEL_241:
  v46 = 0;
  if ((v1 & 0x40000000) != 0)
  {
LABEL_130:
    v47 = *((int *)this + 40);
    if ((v7 & 0x1000000000) != 0)
      goto LABEL_131;
    goto LABEL_243;
  }
LABEL_242:
  v47 = 0;
  if ((v7 & 0x1000000000) != 0)
  {
LABEL_131:
    v48 = *((unsigned __int8 *)this + 347);
    if ((v1 & 0x80000000) != 0)
      goto LABEL_132;
    goto LABEL_244;
  }
LABEL_243:
  v48 = 0;
  if ((v1 & 0x80000000) != 0)
  {
LABEL_132:
    v49 = *((unsigned int *)this + 41);
    if ((v1 & 0x20000000) != 0)
      goto LABEL_133;
    goto LABEL_245;
  }
LABEL_244:
  v49 = 0;
  if ((v1 & 0x20000000) != 0)
  {
LABEL_133:
    v50 = *((unsigned int *)this + 39);
    if ((v1 & 0x8000000000000) != 0)
      goto LABEL_134;
LABEL_246:
    v52 = 0;
    if ((v1 & 0x4000000000) != 0)
      goto LABEL_138;
    goto LABEL_247;
  }
LABEL_245:
  v50 = 0;
  if ((v1 & 0x8000000000000) == 0)
    goto LABEL_246;
LABEL_134:
  v51 = *((float *)this + 61);
  if (v51 == 0.0)
    v52 = 0;
  else
    v52 = LODWORD(v51);
  if ((v1 & 0x4000000000) != 0)
  {
LABEL_138:
    v53 = *((int *)this + 48);
    if ((v1 & 0x8000000000) != 0)
      goto LABEL_139;
    goto LABEL_248;
  }
LABEL_247:
  v53 = 0;
  if ((v1 & 0x8000000000) != 0)
  {
LABEL_139:
    v54 = *((int *)this + 49);
    if ((v1 & 0x8000) != 0)
      goto LABEL_140;
LABEL_249:
    v56 = 0;
    if ((v1 & 0x40000000000) != 0)
      goto LABEL_144;
    goto LABEL_250;
  }
LABEL_248:
  v54 = 0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_249;
LABEL_140:
  v55 = *((float *)this + 25);
  if (v55 == 0.0)
    v56 = 0;
  else
    v56 = LODWORD(v55);
  if ((v1 & 0x40000000000) != 0)
  {
LABEL_144:
    v57 = *((int *)this + 52);
    if ((v1 & 0x10000000000) != 0)
      goto LABEL_145;
    goto LABEL_251;
  }
LABEL_250:
  v57 = 0;
  if ((v1 & 0x10000000000) != 0)
  {
LABEL_145:
    v58 = *((int *)this + 50);
    if ((v1 & 0x800000000) != 0)
      goto LABEL_146;
    goto LABEL_252;
  }
LABEL_251:
  v58 = 0;
  if ((v1 & 0x800000000) != 0)
  {
LABEL_146:
    v59 = *((int *)this + 45);
    if ((v1 & 0x100000000) != 0)
      goto LABEL_147;
    goto LABEL_253;
  }
LABEL_252:
  v59 = 0;
  if ((v1 & 0x100000000) != 0)
  {
LABEL_147:
    v60 = *((int *)this + 42);
    if ((v1 & 0x400000000) != 0)
      goto LABEL_148;
    goto LABEL_254;
  }
LABEL_253:
  v60 = 0;
  if ((v1 & 0x400000000) != 0)
  {
LABEL_148:
    v61 = *((int *)this + 44);
    if ((v7 & 0x100) != 0)
      goto LABEL_149;
    goto LABEL_255;
  }
LABEL_254:
  v61 = 0;
  if ((v7 & 0x100) != 0)
  {
LABEL_149:
    v62 = *((unsigned __int8 *)this + 319);
    if ((v7 & 0x40000) != 0)
      goto LABEL_150;
    goto LABEL_256;
  }
LABEL_255:
  v62 = 0;
  if ((v7 & 0x40000) != 0)
  {
LABEL_150:
    v63 = *((unsigned __int8 *)this + 329);
    if ((v1 & 0x200000000) != 0)
      goto LABEL_151;
    goto LABEL_257;
  }
LABEL_256:
  v63 = 0;
  if ((v1 & 0x200000000) != 0)
  {
LABEL_151:
    v64 = *((int *)this + 43);
    if ((v1 & 2) != 0)
      goto LABEL_152;
    goto LABEL_258;
  }
LABEL_257:
  v64 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_152:
    v65 = *((_QWORD *)this + 2);
    if ((v1 & 0x20) != 0)
      goto LABEL_153;
    goto LABEL_259;
  }
LABEL_258:
  v65 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_153:
    v66 = *((_QWORD *)this + 6);
    if ((v1 & 4) != 0)
      goto LABEL_154;
    goto LABEL_260;
  }
LABEL_259:
  v66 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_154:
    v67 = *((_QWORD *)this + 3);
    if ((v1 & 8) != 0)
      goto LABEL_155;
    goto LABEL_261;
  }
LABEL_260:
  v67 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_155:
    v68 = *((_QWORD *)this + 4);
    if ((v1 & 0x10) != 0)
      goto LABEL_156;
    goto LABEL_262;
  }
LABEL_261:
  v68 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_156:
    v69 = *((_QWORD *)this + 5);
    if ((v1 & 0x2000000000000) != 0)
      goto LABEL_157;
    goto LABEL_263;
  }
LABEL_262:
  v69 = 0;
  if ((v1 & 0x2000000000000) != 0)
  {
LABEL_157:
    v70 = *((int *)this + 59);
    if ((v1 & 0x2000) != 0)
      goto LABEL_158;
LABEL_264:
    v72 = 0;
    return v153 ^ v2 ^ v152 ^ v151 ^ v150 ^ v149 ^ v148 ^ v147 ^ v146 ^ v145 ^ v144 ^ v143 ^ v142 ^ v141 ^ v140 ^ v139 ^ v138 ^ v137 ^ v136 ^ v135 ^ v134 ^ v133 ^ v132 ^ v131 ^ v130 ^ v129 ^ v128 ^ v127 ^ v126 ^ v125 ^ v124 ^ v123 ^ v122 ^ v121 ^ v120 ^ v119 ^ v118 ^ v117 ^ v116 ^ v115 ^ v114 ^ v113 ^ v112 ^ v111 ^ v110 ^ v109 ^ v108 ^ v107 ^ v106 ^ v105 ^ v104 ^ v103 ^ v102 ^ v101 ^ v100 ^ v99 ^ v98 ^ v97 ^ v96 ^ v95 ^ v94 ^ v93 ^ v92 ^ v91 ^ v90 ^ v89 ^ v88 ^ v87 ^ v86 ^ v85 ^ v84 ^ v83 ^ v82 ^ v81 ^ v80 ^ v79 ^ v78 ^ v77 ^ v76 ^ v75 ^ v74 ^ v44 ^ v45 ^ v46 ^ v47 ^ v48 ^ v49 ^ v50 ^ v52 ^ v53 ^ v54 ^ v56 ^ v57 ^ v58 ^ v59 ^ v60 ^ v61 ^ v62 ^ v63 ^ v64 ^ v65 ^ v66 ^ v67 ^ v68 ^ v69 ^ v70 ^ v72;
  }
LABEL_263:
  v70 = 0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_264;
LABEL_158:
  v71 = *((float *)this + 23);
  v72 = LODWORD(v71);
  if (v71 == 0.0)
    v72 = 0;
  return v153 ^ v2 ^ v152 ^ v151 ^ v150 ^ v149 ^ v148 ^ v147 ^ v146 ^ v145 ^ v144 ^ v143 ^ v142 ^ v141 ^ v140 ^ v139 ^ v138 ^ v137 ^ v136 ^ v135 ^ v134 ^ v133 ^ v132 ^ v131 ^ v130 ^ v129 ^ v128 ^ v127 ^ v126 ^ v125 ^ v124 ^ v123 ^ v122 ^ v121 ^ v120 ^ v119 ^ v118 ^ v117 ^ v116 ^ v115 ^ v114 ^ v113 ^ v112 ^ v111 ^ v110 ^ v109 ^ v108 ^ v107 ^ v106 ^ v105 ^ v104 ^ v103 ^ v102 ^ v101 ^ v100 ^ v99 ^ v98 ^ v97 ^ v96 ^ v95 ^ v94 ^ v93 ^ v92 ^ v91 ^ v90 ^ v89 ^ v88 ^ v87 ^ v86 ^ v85 ^ v84 ^ v83 ^ v82 ^ v81 ^ v80 ^ v79 ^ v78 ^ v77 ^ v76 ^ v75 ^ v74 ^ v44 ^ v45 ^ v46 ^ v47 ^ v48 ^ v49 ^ v50 ^ v52 ^ v53 ^ v54 ^ v56 ^ v57 ^ v58 ^ v59 ^ v60 ^ v61 ^ v62 ^ v63 ^ v64 ^ v65 ^ v66 ^ v67 ^ v68 ^ v69 ^ v70 ^ v72;
}

void CMMsl::KappaSpinResult::~KappaSpinResult(CMMsl::KappaSpinResult *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)this = off_100352400;
  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 11) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 7);
  if (v4)
  {
    *((_QWORD *)this + 8) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 4);
  if (v5)
  {
    *((_QWORD *)this + 5) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 1);
  if (v6)
  {
    *((_QWORD *)this + 2) = v6;
    operator delete(v6);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::KappaSpinResult::~KappaSpinResult(this);
  operator delete();
}

CMMsl::KappaSpinResult *CMMsl::KappaSpinResult::KappaSpinResult(CMMsl::KappaSpinResult *this, const CMMsl::KappaSpinResult *a2)
{
  char *v4;
  char *v5;
  char *v6;
  __int16 v7;
  __int16 v8;
  int v9;
  int v10;
  int v11;
  uint64_t v13;
  char v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;

  *(_QWORD *)this = off_100352400;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  v5 = (char *)this + 56;
  *(_OWORD *)((char *)this + 104) = 0u;
  v6 = (char *)this + 104;
  *((_DWORD *)this + 51) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_QWORD *)this + 15) = 0;
  v7 = *((_WORD *)a2 + 102);
  if ((v7 & 0x1000) != 0)
  {
    v9 = *((_DWORD *)a2 + 49);
    v8 = 4096;
    *((_WORD *)this + 102) = 4096;
    *((_DWORD *)this + 49) = v9;
    v7 = *((_WORD *)a2 + 102);
    if ((v7 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v8 = 0;
  if ((*((_WORD *)a2 + 102) & 0x800) != 0)
  {
LABEL_5:
    v10 = *((_DWORD *)a2 + 48);
    v8 |= 0x800u;
    *((_WORD *)this + 102) = v8;
    *((_DWORD *)this + 48) = v10;
    v7 = *((_WORD *)a2 + 102);
  }
LABEL_6:
  if ((v7 & 0x10) != 0)
  {
    v13 = *((_QWORD *)a2 + 20);
    v8 |= 0x10u;
    *((_WORD *)this + 102) = v8;
    *((_QWORD *)this + 20) = v13;
    v7 = *((_WORD *)a2 + 102);
    if ((v7 & 0x4000) == 0)
    {
LABEL_8:
      if ((v7 & 0x400) == 0)
        goto LABEL_9;
      goto LABEL_25;
    }
  }
  else if ((v7 & 0x4000) == 0)
  {
    goto LABEL_8;
  }
  v14 = *((_BYTE *)a2 + 201);
  v8 |= 0x4000u;
  *((_WORD *)this + 102) = v8;
  *((_BYTE *)this + 201) = v14;
  v7 = *((_WORD *)a2 + 102);
  if ((v7 & 0x400) == 0)
  {
LABEL_9:
    if ((v7 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  v15 = *((_DWORD *)a2 + 47);
  v8 |= 0x400u;
  *((_WORD *)this + 102) = v8;
  *((_DWORD *)this + 47) = v15;
  v7 = *((_WORD *)a2 + 102);
  if ((v7 & 0x2000) == 0)
  {
LABEL_10:
    if ((v7 & 4) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  v16 = *((_BYTE *)a2 + 200);
  v8 |= 0x2000u;
  *((_WORD *)this + 102) = v8;
  *((_BYTE *)this + 200) = v16;
  v7 = *((_WORD *)a2 + 102);
  if ((v7 & 4) == 0)
  {
LABEL_11:
    if ((v7 & 8) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  v17 = *((_QWORD *)a2 + 18);
  v8 |= 4u;
  *((_WORD *)this + 102) = v8;
  *((_QWORD *)this + 18) = v17;
  v7 = *((_WORD *)a2 + 102);
  if ((v7 & 8) == 0)
  {
LABEL_12:
    if ((v7 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  v18 = *((_QWORD *)a2 + 19);
  v8 |= 8u;
  *((_WORD *)this + 102) = v8;
  *((_QWORD *)this + 19) = v18;
  v7 = *((_WORD *)a2 + 102);
  if ((v7 & 0x100) == 0)
  {
LABEL_13:
    if ((v7 & 0x80) == 0)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  v19 = *((_DWORD *)a2 + 45);
  v8 |= 0x100u;
  *((_WORD *)this + 102) = v8;
  *((_DWORD *)this + 45) = v19;
  v7 = *((_WORD *)a2 + 102);
  if ((v7 & 0x80) == 0)
  {
LABEL_14:
    if ((v7 & 0x40) == 0)
      goto LABEL_15;
    goto LABEL_31;
  }
LABEL_30:
  v20 = *((_DWORD *)a2 + 44);
  v8 |= 0x80u;
  *((_WORD *)this + 102) = v8;
  *((_DWORD *)this + 44) = v20;
  v7 = *((_WORD *)a2 + 102);
  if ((v7 & 0x40) == 0)
  {
LABEL_15:
    if ((v7 & 1) == 0)
      goto LABEL_16;
    goto LABEL_32;
  }
LABEL_31:
  v21 = *((_DWORD *)a2 + 43);
  v8 |= 0x40u;
  *((_WORD *)this + 102) = v8;
  *((_DWORD *)this + 43) = v21;
  v7 = *((_WORD *)a2 + 102);
  if ((v7 & 1) == 0)
  {
LABEL_16:
    if ((v7 & 2) == 0)
      goto LABEL_17;
    goto LABEL_33;
  }
LABEL_32:
  v22 = *((_QWORD *)a2 + 16);
  v8 |= 1u;
  *((_WORD *)this + 102) = v8;
  *((_QWORD *)this + 16) = v22;
  v7 = *((_WORD *)a2 + 102);
  if ((v7 & 2) == 0)
  {
LABEL_17:
    if ((v7 & 0x200) == 0)
      goto LABEL_18;
    goto LABEL_34;
  }
LABEL_33:
  v23 = *((_QWORD *)a2 + 17);
  v8 |= 2u;
  *((_WORD *)this + 102) = v8;
  *((_QWORD *)this + 17) = v23;
  v7 = *((_WORD *)a2 + 102);
  if ((v7 & 0x200) == 0)
  {
LABEL_18:
    if ((v7 & 0x20) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_34:
  v24 = *((_DWORD *)a2 + 46);
  v8 |= 0x200u;
  *((_WORD *)this + 102) = v8;
  *((_DWORD *)this + 46) = v24;
  if ((*((_WORD *)a2 + 102) & 0x20) != 0)
  {
LABEL_19:
    v11 = *((_DWORD *)a2 + 42);
    *((_WORD *)this + 102) = v8 | 0x20;
    *((_DWORD *)this + 42) = v11;
  }
LABEL_20:
  if (this != a2)
  {
    sub_100239350((char *)this + 80, *((char **)a2 + 10), *((_QWORD *)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 3);
    sub_100239350(v6, *((char **)a2 + 13), *((_QWORD *)a2 + 14), (uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 3);
    sub_100020CE4(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
    sub_100020CE4(v5, *((char **)a2 + 7), *((_QWORD *)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 2);
    sub_100020CE4((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
  }
  return this;
}

CMMsl *CMMsl::KappaSpinResult::operator=(CMMsl *a1, const CMMsl::KappaSpinResult *a2)
{
  CMMsl::KappaSpinResult *v3;
  _BYTE v5[208];

  if (a1 != a2)
  {
    CMMsl::KappaSpinResult::KappaSpinResult((CMMsl::KappaSpinResult *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaSpinResult *)v5, v3);
    CMMsl::KappaSpinResult::~KappaSpinResult((CMMsl::KappaSpinResult *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaSpinResult *a2, CMMsl::KappaSpinResult *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  float result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = *((_DWORD *)this + 51);
  *((_DWORD *)this + 51) = *((_DWORD *)a2 + 51);
  *((_DWORD *)a2 + 51) = v3;
  v4 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 20) = v4;
  LOBYTE(v4) = *((_BYTE *)this + 201);
  *((_BYTE *)this + 201) = *((_BYTE *)a2 + 201);
  *((_BYTE *)a2 + 201) = v4;
  LOBYTE(v4) = *((_BYTE *)this + 200);
  *((_BYTE *)this + 200) = *((_BYTE *)a2 + 200);
  *((_BYTE *)a2 + 200) = v4;
  v5 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v5;
  v6 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v6;
  v7 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v7;
  v8 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v8;
  v9 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v9;
  v10 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v10;
  v11 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v11;
  v13 = *((_QWORD *)this + 15);
  v12 = *((_QWORD *)this + 16);
  v14 = *((_QWORD *)a2 + 16);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)this + 16) = v14;
  *((_QWORD *)a2 + 16) = v12;
  v15 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v15;
  LODWORD(v15) = *((_DWORD *)this + 46);
  *((_DWORD *)this + 46) = *((_DWORD *)a2 + 46);
  v16 = *((_DWORD *)this + 49);
  *((_DWORD *)this + 49) = *((_DWORD *)a2 + 49);
  *((_DWORD *)a2 + 49) = v16;
  v17 = *((_DWORD *)this + 48);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_DWORD *)a2 + 48) = v17;
  v18 = *((_DWORD *)this + 47);
  *((_DWORD *)this + 47) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = v18;
  v19 = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v19;
  v20 = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v20;
  v21 = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v21;
  *((_DWORD *)a2 + 46) = v15;
  result = *((float *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((float *)a2 + 42) = result;
  *((_QWORD *)a2 + 15) = v13;
  v23 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v23;
  v24 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v24;
  v25 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v25;
  v26 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v26;
  v27 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v27;
  v28 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v28;
  v29 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v29;
  v30 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v30;
  v31 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v31;
  return result;
}

uint64_t CMMsl::KappaSpinResult::KappaSpinResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = off_100352400;
  v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  *(_DWORD *)(a2 + 204) = 0;
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 201) = *(_BYTE *)(a2 + 201);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  sub_100239458(a1 + 80, (__n128 *)(a2 + 80));
  sub_100239458(a1 + 104, (__n128 *)(a2 + 104));
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  sub_100239458(a1 + 56, (__n128 *)(a2 + 56));
  sub_100239458(v4, (__n128 *)(a2 + 32));
  return a1;
}

CMMsl *CMMsl::KappaSpinResult::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::KappaSpinResult *v3;
  _BYTE v5[208];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaSpinResult::KappaSpinResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaSpinResult *)v5, v3);
    CMMsl::KappaSpinResult::~KappaSpinResult((CMMsl::KappaSpinResult *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaSpinResult::formatText(CMMsl::KappaSpinResult *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;
  float *v6;
  float *v7;
  float v8;
  float *v9;
  float *v10;
  float v11;
  float *v12;
  float *v13;
  float v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  __int16 v21;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 102);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(a2, "deltaGravity", *((float *)this + 42));
    v5 = *((_WORD *)this + 102);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_31;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "epochFirstTimestamp", *((_QWORD *)this + 16));
  v5 = *((_WORD *)this + 102);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x2000) == 0)
      goto LABEL_5;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "epochLastTimestamp", *((_QWORD *)this + 17));
  v5 = *((_WORD *)this + 102);
  if ((v5 & 0x2000) == 0)
  {
LABEL_5:
    if ((v5 & 0x4000) == 0)
      goto LABEL_6;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "isSlowRollDetected", *((_BYTE *)this + 200));
  v5 = *((_WORD *)this + 102);
  if ((v5 & 0x4000) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "isSpinDetected", *((_BYTE *)this + 201));
  v5 = *((_WORD *)this + 102);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "maxDeltaAngleLong", *((float *)this + 43));
  v5 = *((_WORD *)this + 102);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "maxDeltaAngleShort", *((float *)this + 44));
  if ((*((_WORD *)this + 102) & 0x100) != 0)
LABEL_9:
    PB::TextFormatter::format(a2, "slowRollCumCoherentAngle", *((float *)this + 45));
LABEL_10:
  v6 = (float *)*((_QWORD *)this + 1);
  v7 = (float *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "slowRollSegmentMaxAxisVariance", v8);
  }
  v9 = (float *)*((_QWORD *)this + 4);
  v10 = (float *)*((_QWORD *)this + 5);
  while (v9 != v10)
  {
    v11 = *v9++;
    PB::TextFormatter::format(a2, "slowRollSegmentMaxFiltRotRate", v11);
  }
  v12 = (float *)*((_QWORD *)this + 7);
  v13 = (float *)*((_QWORD *)this + 8);
  while (v12 != v13)
  {
    v14 = *v12++;
    PB::TextFormatter::format(a2, "slowRollSegmentMinFiltRotRate", v14);
  }
  v15 = (unint64_t *)*((_QWORD *)this + 10);
  v16 = (unint64_t *)*((_QWORD *)this + 11);
  while (v15 != v16)
  {
    v17 = *v15++;
    PB::TextFormatter::format(a2, "slowRollSegmentStartTimes", v17);
  }
  v18 = (unint64_t *)*((_QWORD *)this + 13);
  v19 = (unint64_t *)*((_QWORD *)this + 14);
  while (v18 != v19)
  {
    v20 = *v18++;
    PB::TextFormatter::format(a2, "slowRollSegmentStopTimes", v20);
  }
  v21 = *((_WORD *)this + 102);
  if ((v21 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "slowRollStartTime", *((_QWORD *)this + 18));
    v21 = *((_WORD *)this + 102);
    if ((v21 & 8) == 0)
    {
LABEL_22:
      if ((v21 & 0x200) == 0)
        goto LABEL_23;
      goto LABEL_39;
    }
  }
  else if ((v21 & 8) == 0)
  {
    goto LABEL_22;
  }
  PB::TextFormatter::format(a2, "slowRollStopTime", *((_QWORD *)this + 19));
  v21 = *((_WORD *)this + 102);
  if ((v21 & 0x200) == 0)
  {
LABEL_23:
    if ((v21 & 0x400) == 0)
      goto LABEL_24;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "spatialSamplingCount", *((_DWORD *)this + 46));
  v21 = *((_WORD *)this + 102);
  if ((v21 & 0x400) == 0)
  {
LABEL_24:
    if ((v21 & 0x800) == 0)
      goto LABEL_25;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "spinCumulativeRotation", *((float *)this + 47));
  v21 = *((_WORD *)this + 102);
  if ((v21 & 0x800) == 0)
  {
LABEL_25:
    if ((v21 & 0x1000) == 0)
      goto LABEL_26;
LABEL_42:
    PB::TextFormatter::format(a2, "spinGravityAngleThresholdDegrees", *((float *)this + 49));
    if ((*((_WORD *)this + 102) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_27;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "spinCumulativeRotationThresholdDegrees", *((float *)this + 48));
  v21 = *((_WORD *)this + 102);
  if ((v21 & 0x1000) != 0)
    goto LABEL_42;
LABEL_26:
  if ((v21 & 0x10) != 0)
LABEL_27:
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 20));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::KappaSpinResult::readFrom(CMMsl::KappaSpinResult *this, PB::Reader *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  void **v9;
  void **v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  BOOL v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  BOOL v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char v82;
  unsigned int v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  unint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  BOOL v102;
  char v103;
  unsigned int v104;
  uint64_t v105;
  unint64_t v106;
  char v107;
  char v108;
  unsigned int v109;
  uint64_t v110;
  unint64_t v111;
  char v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  char v126;
  unsigned int v127;
  uint64_t v128;
  unint64_t v129;
  char v130;
  char v131;
  unsigned int v132;
  uint64_t v133;
  unint64_t v134;
  char v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  char *v139;
  _DWORD *v140;
  char *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  char *v146;
  char *v147;
  int v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  char *v153;
  _DWORD *v154;
  char *v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  char *v160;
  char *v161;
  int v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  char *v167;
  _DWORD *v168;
  char *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  char *v174;
  char *v175;
  int v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  char v180;
  char v181;
  unsigned int v182;
  unint64_t v183;
  char v184;
  char v185;
  unsigned int v186;
  unint64_t v187;
  char v188;
  char v189;
  unsigned int v190;
  unint64_t v191;
  char v192;
  char v193;
  unsigned int v194;
  unint64_t v195;
  char v196;
  char v197;
  unsigned int v198;
  unint64_t v199;
  char v200;
  char v201;
  unsigned int v202;
  unint64_t v203;
  char v204;
  unint64_t v205;
  char *v206;
  _QWORD *v207;
  unint64_t v208;
  char *v209;
  unint64_t v210;
  char *v211;
  _DWORD *v212;
  unint64_t v213;
  char *v214;
  unint64_t v215;
  char *v216;
  char *v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  char *v223;
  char *v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  char *v230;
  char *v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  char *v237;
  char *v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  char *v244;
  char *v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  char *v251;
  char *v252;
  uint64_t v253;
  unint64_t v254;
  unint64_t v255;
  uint64_t v256;
  char v257;
  unsigned int v258;
  unint64_t v260;
  char v261;
  uint64_t v262;
  unint64_t v263;
  char v264;
  char *v265;
  uint64_t v266;
  unint64_t v267;
  unint64_t v268;
  uint64_t v269;
  char v270;
  unsigned int v271;
  unint64_t v273;
  char v274;
  unint64_t v275;
  char v276;
  char *v277;
  int v278;
  char *v279;
  int v280;
  char *v281;
  int v282;
  unint64_t v283;
  void **v286;
  void **v287;
  char *v288;
  char *v289;
  char *v290;
  void **v291;
  _BYTE v292[16];

  v3 = *((_QWORD *)a2 + 1);
  v4 = *((_QWORD *)a2 + 2);
  v5 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v4 && v5 == 0)
  {
    v290 = (char *)this + 48;
    v291 = (void **)((char *)this + 32);
    v9 = (void **)((char *)this + 56);
    v10 = (void **)((char *)this + 8);
    v288 = (char *)this + 24;
    v289 = (char *)this + 72;
    v11 = (_QWORD *)((char *)this + 120);
    v286 = (void **)((char *)this + 80);
    v287 = (void **)((char *)this + 104);
    v12 = (_QWORD *)((char *)this + 96);
    while (1)
    {
      v13 = *(_QWORD *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v4)
        break;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      while (1)
      {
        v17 = v3 + 1;
        *((_QWORD *)a2 + 1) = v3 + 1;
        v18 = *(_BYTE *)(v13 + v3);
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0)
          break;
        v14 += 7;
        v3 = v17;
        v102 = v15++ > 8;
        if (v102)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v16 & 7;
      if (v24 == 4)
      {
        v5 = 0;
        return v5 == 0;
      }
      v25 = v16 >> 3;
      if ((int)(v16 >> 3) > 200)
      {
        switch((int)v25)
        {
          case 201:
            *((_WORD *)this + 102) |= 1u;
            v34 = *((_QWORD *)a2 + 1);
            v35 = *((_QWORD *)a2 + 2);
            v36 = *(_QWORD *)a2;
            if (v34 <= 0xFFFFFFFFFFFFFFF5 && v34 + 10 <= v35)
            {
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v40 = v34 + 1;
                *((_QWORD *)a2 + 1) = v34 + 1;
                v41 = *(_BYTE *)(v36 + v34);
                v39 |= (unint64_t)(v41 & 0x7F) << v37;
                if ((v41 & 0x80) == 0)
                  goto LABEL_368;
                v37 += 7;
                v34 = v40;
                v102 = v38++ > 8;
              }
              while (!v102);
LABEL_271:
              v39 = 0;
              goto LABEL_368;
            }
            v185 = 0;
            v186 = 0;
            v39 = 0;
            if (v35 <= v34)
              v35 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v35 == v34)
              {
                v39 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v187 = v34 + 1;
                v188 = *(_BYTE *)(v36 + v34);
                *((_QWORD *)a2 + 1) = v187;
                v39 |= (unint64_t)(v188 & 0x7F) << v185;
                if (v188 < 0)
                {
                  v185 += 7;
                  v34 = v187;
                  v102 = v186++ > 8;
                  if (v102)
                    goto LABEL_271;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v39 = 0;
              }
              break;
            }
LABEL_368:
            *((_QWORD *)this + 16) = v39;
            goto LABEL_460;
          case 202:
            *((_WORD *)this + 102) |= 2u;
            v71 = *((_QWORD *)a2 + 1);
            v72 = *((_QWORD *)a2 + 2);
            v73 = *(_QWORD *)a2;
            if (v71 <= 0xFFFFFFFFFFFFFFF5 && v71 + 10 <= v72)
            {
              v74 = 0;
              v75 = 0;
              v76 = 0;
              do
              {
                v77 = v71 + 1;
                *((_QWORD *)a2 + 1) = v71 + 1;
                v78 = *(_BYTE *)(v73 + v71);
                v76 |= (unint64_t)(v78 & 0x7F) << v74;
                if ((v78 & 0x80) == 0)
                  goto LABEL_377;
                v74 += 7;
                v71 = v77;
                v102 = v75++ > 8;
              }
              while (!v102);
LABEL_296:
              v76 = 0;
              goto LABEL_377;
            }
            v197 = 0;
            v198 = 0;
            v76 = 0;
            if (v72 <= v71)
              v72 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v72 == v71)
              {
                v76 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v199 = v71 + 1;
                v200 = *(_BYTE *)(v73 + v71);
                *((_QWORD *)a2 + 1) = v199;
                v76 |= (unint64_t)(v200 & 0x7F) << v197;
                if (v200 < 0)
                {
                  v197 += 7;
                  v71 = v199;
                  v102 = v198++ > 8;
                  if (v102)
                    goto LABEL_296;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v76 = 0;
              }
              break;
            }
LABEL_377:
            *((_QWORD *)this + 17) = v76;
            goto LABEL_460;
          case 203:
            *((_WORD *)this + 102) |= 0x200u;
            v79 = *((_QWORD *)a2 + 1);
            v80 = *((_QWORD *)a2 + 2);
            v81 = *(_QWORD *)a2;
            if (v79 <= 0xFFFFFFFFFFFFFFF5 && v79 + 10 <= v80)
            {
              v82 = 0;
              v83 = 0;
              v84 = 0;
              do
              {
                v85 = v79 + 1;
                *((_QWORD *)a2 + 1) = v79 + 1;
                v86 = *(_BYTE *)(v81 + v79);
                v84 |= (unint64_t)(v86 & 0x7F) << v82;
                if ((v86 & 0x80) == 0)
                  goto LABEL_380;
                v82 += 7;
                v79 = v85;
                v102 = v83++ > 8;
              }
              while (!v102);
LABEL_303:
              LODWORD(v84) = 0;
              goto LABEL_380;
            }
            v201 = 0;
            v202 = 0;
            v84 = 0;
            if (v80 <= v79)
              v80 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v80 == v79)
              {
                LODWORD(v84) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v203 = v79 + 1;
                v204 = *(_BYTE *)(v81 + v79);
                *((_QWORD *)a2 + 1) = v203;
                v84 |= (unint64_t)(v204 & 0x7F) << v201;
                if (v204 < 0)
                {
                  v201 += 7;
                  v79 = v203;
                  v102 = v202++ > 8;
                  if (v102)
                    goto LABEL_303;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v84) = 0;
              }
              break;
            }
LABEL_380:
            *((_DWORD *)this + 46) = v84;
            goto LABEL_460;
          case 204:
            *((_WORD *)this + 102) |= 0x20u;
            v87 = *((_QWORD *)a2 + 1);
            if (v87 > 0xFFFFFFFFFFFFFFFBLL || v87 + 4 > *((_QWORD *)a2 + 2))
              break;
            *((_DWORD *)this + 42) = *(_DWORD *)(*(_QWORD *)a2 + v87);
            goto LABEL_459;
          case 205:
            if (v24 == 2)
            {
              v88 = v2;
              if ((PB::Reader::placeMark(a2, v292) & 1) != 0)
                return 0;
              if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
              {
                v89 = (char *)*((_QWORD *)this + 11);
                do
                {
                  if ((unint64_t)v89 >= *v12)
                  {
                    v90 = (char *)*v286;
                    v91 = (v89 - (_BYTE *)*v286) >> 3;
                    v92 = v91 + 1;
                    if ((unint64_t)(v91 + 1) >> 61)
                      goto LABEL_473;
                    v93 = *v12 - (_QWORD)v90;
                    if (v93 >> 2 > v92)
                      v92 = v93 >> 2;
                    if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8)
                      v94 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v94 = v92;
                    if (v94)
                    {
                      v95 = (char *)sub_10000D60C((uint64_t)v12, v94);
                      v90 = (char *)*((_QWORD *)this + 10);
                      v89 = (char *)*((_QWORD *)this + 11);
                    }
                    else
                    {
                      v95 = 0;
                    }
                    v96 = &v95[8 * v91];
                    *(_QWORD *)v96 = 0;
                    v97 = v96 + 8;
                    while (v89 != v90)
                    {
                      v98 = *((_QWORD *)v89 - 1);
                      v89 -= 8;
                      *((_QWORD *)v96 - 1) = v98;
                      v96 -= 8;
                    }
                    *((_QWORD *)this + 10) = v96;
                    *((_QWORD *)this + 11) = v97;
                    *((_QWORD *)this + 12) = &v95[8 * v94];
                    if (v90)
                      operator delete(v90);
                    v89 = v97;
                  }
                  else
                  {
                    *(_QWORD *)v89 = 0;
                    v89 += 8;
                  }
                  *((_QWORD *)this + 11) = v89;
                  v100 = *((_QWORD *)a2 + 1);
                  v99 = *((_QWORD *)a2 + 2);
                  v101 = *(_QWORD *)a2;
                  v102 = v100 > 0xFFFFFFFFFFFFFFF5 || v100 + 10 > v99;
                  if (v102)
                  {
                    v103 = 0;
                    v104 = 0;
                    v110 = 0;
                    if (v99 <= v100)
                      v105 = *((_QWORD *)a2 + 1);
                    else
                      v105 = *((_QWORD *)a2 + 2);
                    while (1)
                    {
                      if (v105 == v100)
                        goto LABEL_315;
                      v106 = v100++;
                      v107 = *(_BYTE *)(v101 + v106);
                      *((_QWORD *)a2 + 1) = v100;
                      v110 |= (unint64_t)(v107 & 0x7F) << v103;
                      if ((v107 & 0x80) == 0)
                        break;
                      v103 += 7;
                      v102 = v104++ > 8;
                      if (v102)
                      {
                        v110 = 0;
                        goto LABEL_132;
                      }
                    }
                    if (*((_BYTE *)a2 + 24))
                      v110 = 0;
LABEL_132:
                    v111 = v106 + 1;
                  }
                  else
                  {
                    v108 = 0;
                    v109 = 0;
                    v110 = 0;
                    while (1)
                    {
                      v111 = v100 + 1;
                      *((_QWORD *)a2 + 1) = v100 + 1;
                      v112 = *(_BYTE *)(v101 + v100);
                      v110 |= (unint64_t)(v112 & 0x7F) << v108;
                      if ((v112 & 0x80) == 0)
                        break;
                      v108 += 7;
                      v100 = v111;
                      v102 = v109++ > 8;
                      if (v102)
                      {
                        v110 = 0;
                        break;
                      }
                    }
                  }
                  *((_QWORD *)v89 - 1) = v110;
                }
                while (v111 < v99 && !*((_BYTE *)a2 + 24));
              }
              goto LABEL_316;
            }
            v206 = (char *)*((_QWORD *)this + 11);
            v205 = *((_QWORD *)this + 12);
            if ((unint64_t)v206 >= v205)
            {
              v217 = (char *)*v286;
              v218 = (v206 - (_BYTE *)*v286) >> 3;
              v219 = v218 + 1;
              if ((unint64_t)(v218 + 1) >> 61)
LABEL_473:
                sub_10000D5F8();
              v220 = v2;
              v221 = v205 - (_QWORD)v217;
              if (v221 >> 2 > v219)
                v219 = v221 >> 2;
              if ((unint64_t)v221 >= 0x7FFFFFFFFFFFFFF8)
                v222 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v222 = v219;
              if (v222)
              {
                v223 = (char *)sub_10000D60C((uint64_t)v12, v222);
                v217 = (char *)*((_QWORD *)this + 10);
                v206 = (char *)*((_QWORD *)this + 11);
              }
              else
              {
                v223 = 0;
              }
              v252 = &v223[8 * v218];
              *(_QWORD *)v252 = 0;
              v207 = v252 + 8;
              while (v206 != v217)
              {
                v253 = *((_QWORD *)v206 - 1);
                v206 -= 8;
                *((_QWORD *)v252 - 1) = v253;
                v252 -= 8;
              }
              *((_QWORD *)this + 10) = v252;
              *((_QWORD *)this + 11) = v207;
              *((_QWORD *)this + 12) = &v223[8 * v222];
              if (v217)
                operator delete(v217);
              v2 = v220;
            }
            else
            {
              *(_QWORD *)v206 = 0;
              v207 = v206 + 8;
            }
            *((_QWORD *)this + 11) = v207;
            v254 = *((_QWORD *)a2 + 1);
            v255 = *((_QWORD *)a2 + 2);
            v256 = *(_QWORD *)a2;
            v257 = 0;
            v258 = 0;
            if (v254 <= 0xFFFFFFFFFFFFFFF5 && v254 + 10 <= v255)
            {
              v262 = 0;
              while (1)
              {
                v263 = v254 + 1;
                *((_QWORD *)a2 + 1) = v254 + 1;
                v264 = *(_BYTE *)(v256 + v254);
                v262 |= (unint64_t)(v264 & 0x7F) << v257;
                if ((v264 & 0x80) == 0)
                  goto LABEL_430;
                v257 += 7;
                v254 = v263;
                v102 = v258++ > 8;
                if (v102)
                  goto LABEL_426;
              }
            }
            v262 = 0;
            if (v255 <= v254)
              v255 = *((_QWORD *)a2 + 1);
            while (v255 != v254)
            {
              v260 = v254 + 1;
              v261 = *(_BYTE *)(v256 + v254);
              *((_QWORD *)a2 + 1) = v260;
              v262 |= (unint64_t)(v261 & 0x7F) << v257;
              if ((v261 & 0x80) == 0)
                goto LABEL_428;
              v257 += 7;
              v254 = v260;
              v102 = v258++ > 8;
              if (v102)
                goto LABEL_426;
            }
            goto LABEL_427;
          case 206:
            if (v24 != 2)
            {
              v209 = (char *)*((_QWORD *)this + 14);
              v208 = *((_QWORD *)this + 15);
              if ((unint64_t)v209 >= v208)
              {
                v224 = (char *)*v287;
                v225 = (v209 - (_BYTE *)*v287) >> 3;
                v226 = v225 + 1;
                if ((unint64_t)(v225 + 1) >> 61)
LABEL_474:
                  sub_10000D5F8();
                v227 = v2;
                v228 = v208 - (_QWORD)v224;
                if (v228 >> 2 > v226)
                  v226 = v228 >> 2;
                if ((unint64_t)v228 >= 0x7FFFFFFFFFFFFFF8)
                  v229 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v229 = v226;
                if (v229)
                {
                  v230 = (char *)sub_10000D60C((uint64_t)v11, v229);
                  v224 = (char *)*((_QWORD *)this + 13);
                  v209 = (char *)*((_QWORD *)this + 14);
                }
                else
                {
                  v230 = 0;
                }
                v265 = &v230[8 * v225];
                *(_QWORD *)v265 = 0;
                v207 = v265 + 8;
                while (v209 != v224)
                {
                  v266 = *((_QWORD *)v209 - 1);
                  v209 -= 8;
                  *((_QWORD *)v265 - 1) = v266;
                  v265 -= 8;
                }
                *((_QWORD *)this + 13) = v265;
                *((_QWORD *)this + 14) = v207;
                *((_QWORD *)this + 15) = &v230[8 * v229];
                if (v224)
                  operator delete(v224);
                v2 = v227;
              }
              else
              {
                *(_QWORD *)v209 = 0;
                v207 = v209 + 8;
              }
              *((_QWORD *)this + 14) = v207;
              v267 = *((_QWORD *)a2 + 1);
              v268 = *((_QWORD *)a2 + 2);
              v269 = *(_QWORD *)a2;
              v270 = 0;
              v271 = 0;
              if (v267 > 0xFFFFFFFFFFFFFFF5 || v267 + 10 > v268)
              {
                v262 = 0;
                if (v268 <= v267)
                  v268 = *((_QWORD *)a2 + 1);
                while (v268 != v267)
                {
                  v273 = v267 + 1;
                  v274 = *(_BYTE *)(v269 + v267);
                  *((_QWORD *)a2 + 1) = v273;
                  v262 |= (unint64_t)(v274 & 0x7F) << v270;
                  if ((v274 & 0x80) == 0)
                  {
LABEL_428:
                    if (*((_BYTE *)a2 + 24))
                      v262 = 0;
                    goto LABEL_430;
                  }
                  v270 += 7;
                  v267 = v273;
                  v102 = v271++ > 8;
                  if (v102)
                  {
LABEL_426:
                    v262 = 0;
                    goto LABEL_430;
                  }
                }
LABEL_427:
                v262 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v262 = 0;
                while (1)
                {
                  v275 = v267 + 1;
                  *((_QWORD *)a2 + 1) = v267 + 1;
                  v276 = *(_BYTE *)(v269 + v267);
                  v262 |= (unint64_t)(v276 & 0x7F) << v270;
                  if ((v276 & 0x80) == 0)
                    break;
                  v270 += 7;
                  v267 = v275;
                  v102 = v271++ > 8;
                  if (v102)
                    goto LABEL_426;
                }
              }
LABEL_430:
              *(v207 - 1) = v262;
              goto LABEL_460;
            }
            v88 = v2;
            if ((PB::Reader::placeMark(a2, v292) & 1) != 0)
              return 0;
            if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
            {
              v89 = (char *)*((_QWORD *)this + 14);
              do
              {
                if ((unint64_t)v89 >= *v11)
                {
                  v113 = (char *)*v287;
                  v114 = (v89 - (_BYTE *)*v287) >> 3;
                  v115 = v114 + 1;
                  if ((unint64_t)(v114 + 1) >> 61)
                    goto LABEL_474;
                  v116 = *v11 - (_QWORD)v113;
                  if (v116 >> 2 > v115)
                    v115 = v116 >> 2;
                  if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFF8)
                    v117 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v117 = v115;
                  if (v117)
                  {
                    v118 = (char *)sub_10000D60C((uint64_t)v11, v117);
                    v113 = (char *)*((_QWORD *)this + 13);
                    v89 = (char *)*((_QWORD *)this + 14);
                  }
                  else
                  {
                    v118 = 0;
                  }
                  v119 = &v118[8 * v114];
                  *(_QWORD *)v119 = 0;
                  v120 = v119 + 8;
                  while (v89 != v113)
                  {
                    v121 = *((_QWORD *)v89 - 1);
                    v89 -= 8;
                    *((_QWORD *)v119 - 1) = v121;
                    v119 -= 8;
                  }
                  *((_QWORD *)this + 13) = v119;
                  *((_QWORD *)this + 14) = v120;
                  *((_QWORD *)this + 15) = &v118[8 * v117];
                  if (v113)
                    operator delete(v113);
                  v89 = v120;
                }
                else
                {
                  *(_QWORD *)v89 = 0;
                  v89 += 8;
                }
                *((_QWORD *)this + 14) = v89;
                v123 = *((_QWORD *)a2 + 1);
                v122 = *((_QWORD *)a2 + 2);
                v124 = *(_QWORD *)a2;
                if (v123 <= 0xFFFFFFFFFFFFFFF5 && v123 + 10 <= v122)
                {
                  v131 = 0;
                  v132 = 0;
                  v133 = 0;
                  while (1)
                  {
                    v134 = v123 + 1;
                    *((_QWORD *)a2 + 1) = v123 + 1;
                    v135 = *(_BYTE *)(v124 + v123);
                    v133 |= (unint64_t)(v135 & 0x7F) << v131;
                    if ((v135 & 0x80) == 0)
                      goto LABEL_178;
                    v131 += 7;
                    v123 = v134;
                    v102 = v132++ > 8;
                    if (v102)
                    {
                      v133 = 0;
                      goto LABEL_178;
                    }
                  }
                }
                v126 = 0;
                v127 = 0;
                v133 = 0;
                if (v122 <= v123)
                  v128 = *((_QWORD *)a2 + 1);
                else
                  v128 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v128 == v123)
                  {
LABEL_315:
                    *((_BYTE *)a2 + 24) = 1;
                    *((_QWORD *)v89 - 1) = 0;
                    goto LABEL_316;
                  }
                  v129 = v123++;
                  v130 = *(_BYTE *)(v124 + v129);
                  *((_QWORD *)a2 + 1) = v123;
                  v133 |= (unint64_t)(v130 & 0x7F) << v126;
                  if ((v130 & 0x80) == 0)
                    break;
                  v126 += 7;
                  v102 = v127++ > 8;
                  if (v102)
                  {
                    v133 = 0;
                    goto LABEL_177;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v133 = 0;
LABEL_177:
                v134 = v129 + 1;
LABEL_178:
                *((_QWORD *)v89 - 1) = v133;
              }
              while (v134 < v122 && !*((_BYTE *)a2 + 24));
            }
            goto LABEL_316;
          case 207:
            if (v24 != 2)
            {
              v211 = (char *)*((_QWORD *)this + 2);
              v210 = *((_QWORD *)this + 3);
              if ((unint64_t)v211 >= v210)
              {
                v231 = (char *)*v10;
                v232 = (v211 - (_BYTE *)*v10) >> 2;
                v233 = v232 + 1;
                if ((unint64_t)(v232 + 1) >> 62)
LABEL_470:
                  sub_10000D5F8();
                v234 = v2;
                v235 = v210 - (_QWORD)v231;
                if (v235 >> 1 > v233)
                  v233 = v235 >> 1;
                if ((unint64_t)v235 >= 0x7FFFFFFFFFFFFFFCLL)
                  v236 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v236 = v233;
                if (v236)
                {
                  v237 = (char *)sub_100020E2C((uint64_t)v288, v236);
                  v231 = (char *)*((_QWORD *)this + 1);
                  v211 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v237 = 0;
                }
                v277 = &v237[4 * v232];
                *(_DWORD *)v277 = 0;
                v212 = v277 + 4;
                while (v211 != v231)
                {
                  v278 = *((_DWORD *)v211 - 1);
                  v211 -= 4;
                  *((_DWORD *)v277 - 1) = v278;
                  v277 -= 4;
                }
                *((_QWORD *)this + 1) = v277;
                *((_QWORD *)this + 2) = v212;
                *((_QWORD *)this + 3) = &v237[4 * v236];
                if (v231)
                  operator delete(v231);
                v2 = v234;
              }
              else
              {
                *(_DWORD *)v211 = 0;
                v212 = v211 + 4;
              }
              *((_QWORD *)this + 2) = v212;
              goto LABEL_455;
            }
            v88 = v2;
            if ((PB::Reader::placeMark(a2, v292) & 1) != 0)
              return 0;
            v136 = *((_QWORD *)a2 + 1);
            v137 = *((_QWORD *)a2 + 2);
            while (v136 < v137 && !*((_BYTE *)a2 + 24))
            {
              v139 = (char *)*((_QWORD *)this + 2);
              v138 = *((_QWORD *)this + 3);
              if ((unint64_t)v139 >= v138)
              {
                v141 = (char *)*v10;
                v142 = (v139 - (_BYTE *)*v10) >> 2;
                v143 = v142 + 1;
                if ((unint64_t)(v142 + 1) >> 62)
                  goto LABEL_470;
                v144 = v138 - (_QWORD)v141;
                if (v144 >> 1 > v143)
                  v143 = v144 >> 1;
                if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFFCLL)
                  v145 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v145 = v143;
                if (v145)
                {
                  v146 = (char *)sub_100020E2C((uint64_t)v288, v145);
                  v141 = (char *)*((_QWORD *)this + 1);
                  v139 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v146 = 0;
                }
                v147 = &v146[4 * v142];
                *(_DWORD *)v147 = 0;
                v140 = v147 + 4;
                while (v139 != v141)
                {
                  v148 = *((_DWORD *)v139 - 1);
                  v139 -= 4;
                  *((_DWORD *)v147 - 1) = v148;
                  v147 -= 4;
                }
                *((_QWORD *)this + 1) = v147;
                *((_QWORD *)this + 2) = v140;
                *((_QWORD *)this + 3) = &v146[4 * v145];
                if (v141)
                  operator delete(v141);
              }
              else
              {
                *(_DWORD *)v139 = 0;
                v140 = v139 + 4;
              }
              *((_QWORD *)this + 2) = v140;
              v149 = *((_QWORD *)a2 + 1);
              if (v149 > 0xFFFFFFFFFFFFFFFBLL || v149 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_314;
              *(v140 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v149);
              v137 = *((_QWORD *)a2 + 2);
              v136 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v136;
            }
            goto LABEL_316;
          case 208:
            if (v24 != 2)
            {
              v214 = (char *)*((_QWORD *)this + 8);
              v213 = *((_QWORD *)this + 9);
              if ((unint64_t)v214 >= v213)
              {
                v238 = (char *)*v9;
                v239 = (v214 - (_BYTE *)*v9) >> 2;
                v240 = v239 + 1;
                if ((unint64_t)(v239 + 1) >> 62)
LABEL_471:
                  sub_10000D5F8();
                v241 = v2;
                v242 = v213 - (_QWORD)v238;
                if (v242 >> 1 > v240)
                  v240 = v242 >> 1;
                if ((unint64_t)v242 >= 0x7FFFFFFFFFFFFFFCLL)
                  v243 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v243 = v240;
                if (v243)
                {
                  v244 = (char *)sub_100020E2C((uint64_t)v289, v243);
                  v238 = (char *)*((_QWORD *)this + 7);
                  v214 = (char *)*((_QWORD *)this + 8);
                }
                else
                {
                  v244 = 0;
                }
                v279 = &v244[4 * v239];
                *(_DWORD *)v279 = 0;
                v212 = v279 + 4;
                while (v214 != v238)
                {
                  v280 = *((_DWORD *)v214 - 1);
                  v214 -= 4;
                  *((_DWORD *)v279 - 1) = v280;
                  v279 -= 4;
                }
                *((_QWORD *)this + 7) = v279;
                *((_QWORD *)this + 8) = v212;
                *((_QWORD *)this + 9) = &v244[4 * v243];
                if (v238)
                  operator delete(v238);
                v2 = v241;
              }
              else
              {
                *(_DWORD *)v214 = 0;
                v212 = v214 + 4;
              }
              *((_QWORD *)this + 8) = v212;
              goto LABEL_455;
            }
            v88 = v2;
            if ((PB::Reader::placeMark(a2, v292) & 1) != 0)
              return 0;
            v150 = *((_QWORD *)a2 + 1);
            v151 = *((_QWORD *)a2 + 2);
            while (v150 < v151 && !*((_BYTE *)a2 + 24))
            {
              v153 = (char *)*((_QWORD *)this + 8);
              v152 = *((_QWORD *)this + 9);
              if ((unint64_t)v153 >= v152)
              {
                v155 = (char *)*v9;
                v156 = (v153 - (_BYTE *)*v9) >> 2;
                v157 = v156 + 1;
                if ((unint64_t)(v156 + 1) >> 62)
                  goto LABEL_471;
                v158 = v152 - (_QWORD)v155;
                if (v158 >> 1 > v157)
                  v157 = v158 >> 1;
                if ((unint64_t)v158 >= 0x7FFFFFFFFFFFFFFCLL)
                  v159 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v159 = v157;
                if (v159)
                {
                  v160 = (char *)sub_100020E2C((uint64_t)v289, v159);
                  v155 = (char *)*((_QWORD *)this + 7);
                  v153 = (char *)*((_QWORD *)this + 8);
                }
                else
                {
                  v160 = 0;
                }
                v161 = &v160[4 * v156];
                *(_DWORD *)v161 = 0;
                v154 = v161 + 4;
                while (v153 != v155)
                {
                  v162 = *((_DWORD *)v153 - 1);
                  v153 -= 4;
                  *((_DWORD *)v161 - 1) = v162;
                  v161 -= 4;
                }
                *((_QWORD *)this + 7) = v161;
                *((_QWORD *)this + 8) = v154;
                *((_QWORD *)this + 9) = &v160[4 * v159];
                if (v155)
                  operator delete(v155);
              }
              else
              {
                *(_DWORD *)v153 = 0;
                v154 = v153 + 4;
              }
              *((_QWORD *)this + 8) = v154;
              v163 = *((_QWORD *)a2 + 1);
              if (v163 > 0xFFFFFFFFFFFFFFFBLL || v163 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_314;
              *(v154 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v163);
              v151 = *((_QWORD *)a2 + 2);
              v150 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v150;
            }
            goto LABEL_316;
          case 209:
            if (v24 == 2)
            {
              v88 = v2;
              if ((PB::Reader::placeMark(a2, v292) & 1) != 0)
                return 0;
              v164 = *((_QWORD *)a2 + 1);
              v165 = *((_QWORD *)a2 + 2);
              while (v164 < v165 && !*((_BYTE *)a2 + 24))
              {
                v167 = (char *)*((_QWORD *)this + 5);
                v166 = *((_QWORD *)this + 6);
                if ((unint64_t)v167 >= v166)
                {
                  v169 = (char *)*v291;
                  v170 = (v167 - (_BYTE *)*v291) >> 2;
                  v171 = v170 + 1;
                  if ((unint64_t)(v170 + 1) >> 62)
                    goto LABEL_472;
                  v172 = v166 - (_QWORD)v169;
                  if (v172 >> 1 > v171)
                    v171 = v172 >> 1;
                  if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFFCLL)
                    v173 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v173 = v171;
                  if (v173)
                  {
                    v174 = (char *)sub_100020E2C((uint64_t)v290, v173);
                    v169 = (char *)*((_QWORD *)this + 4);
                    v167 = (char *)*((_QWORD *)this + 5);
                  }
                  else
                  {
                    v174 = 0;
                  }
                  v175 = &v174[4 * v170];
                  *(_DWORD *)v175 = 0;
                  v168 = v175 + 4;
                  while (v167 != v169)
                  {
                    v176 = *((_DWORD *)v167 - 1);
                    v167 -= 4;
                    *((_DWORD *)v175 - 1) = v176;
                    v175 -= 4;
                  }
                  *((_QWORD *)this + 4) = v175;
                  *((_QWORD *)this + 5) = v168;
                  *((_QWORD *)this + 6) = &v174[4 * v173];
                  if (v169)
                    operator delete(v169);
                }
                else
                {
                  *(_DWORD *)v167 = 0;
                  v168 = v167 + 4;
                }
                *((_QWORD *)this + 5) = v168;
                v177 = *((_QWORD *)a2 + 1);
                if (v177 > 0xFFFFFFFFFFFFFFFBLL || v177 + 4 > *((_QWORD *)a2 + 2))
                {
LABEL_314:
                  *((_BYTE *)a2 + 24) = 1;
                  break;
                }
                *(v168 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v177);
                v165 = *((_QWORD *)a2 + 2);
                v164 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v164;
              }
LABEL_316:
              PB::Reader::recallMark(a2, v292);
              v2 = v88;
              goto LABEL_460;
            }
            v216 = (char *)*((_QWORD *)this + 5);
            v215 = *((_QWORD *)this + 6);
            if ((unint64_t)v216 >= v215)
            {
              v245 = (char *)*v291;
              v246 = (v216 - (_BYTE *)*v291) >> 2;
              v247 = v246 + 1;
              if ((unint64_t)(v246 + 1) >> 62)
LABEL_472:
                sub_10000D5F8();
              v248 = v2;
              v249 = v215 - (_QWORD)v245;
              if (v249 >> 1 > v247)
                v247 = v249 >> 1;
              if ((unint64_t)v249 >= 0x7FFFFFFFFFFFFFFCLL)
                v250 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v250 = v247;
              if (v250)
              {
                v251 = (char *)sub_100020E2C((uint64_t)v290, v250);
                v245 = (char *)*((_QWORD *)this + 4);
                v216 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v251 = 0;
              }
              v281 = &v251[4 * v246];
              *(_DWORD *)v281 = 0;
              v212 = v281 + 4;
              while (v216 != v245)
              {
                v282 = *((_DWORD *)v216 - 1);
                v216 -= 4;
                *((_DWORD *)v281 - 1) = v282;
                v281 -= 4;
              }
              *((_QWORD *)this + 4) = v281;
              *((_QWORD *)this + 5) = v212;
              *((_QWORD *)this + 6) = &v251[4 * v250];
              if (v245)
                operator delete(v245);
              v2 = v248;
            }
            else
            {
              *(_DWORD *)v216 = 0;
              v212 = v216 + 4;
            }
            *((_QWORD *)this + 5) = v212;
LABEL_455:
            v283 = *((_QWORD *)a2 + 1);
            if (v283 <= 0xFFFFFFFFFFFFFFFBLL && v283 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v212 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v283);
              goto LABEL_459;
            }
            break;
          default:
            goto LABEL_256;
        }
      }
      else
      {
        switch((int)v25)
        {
          case 'e':
            *((_WORD *)this + 102) |= 0x10u;
            v26 = *((_QWORD *)a2 + 1);
            v27 = *((_QWORD *)a2 + 2);
            v28 = *(_QWORD *)a2;
            if (v26 <= 0xFFFFFFFFFFFFFFF5 && v26 + 10 <= v27)
            {
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v32 = v26 + 1;
                *((_QWORD *)a2 + 1) = v26 + 1;
                v33 = *(_BYTE *)(v28 + v26);
                v31 |= (unint64_t)(v33 & 0x7F) << v29;
                if ((v33 & 0x80) == 0)
                  goto LABEL_365;
                v29 += 7;
                v26 = v32;
                v102 = v30++ > 8;
              }
              while (!v102);
LABEL_264:
              v31 = 0;
              goto LABEL_365;
            }
            v181 = 0;
            v182 = 0;
            v31 = 0;
            if (v27 <= v26)
              v27 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v27 == v26)
              {
                v31 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v183 = v26 + 1;
                v184 = *(_BYTE *)(v28 + v26);
                *((_QWORD *)a2 + 1) = v183;
                v31 |= (unint64_t)(v184 & 0x7F) << v181;
                if (v184 < 0)
                {
                  v181 += 7;
                  v26 = v183;
                  v102 = v182++ > 8;
                  if (v102)
                    goto LABEL_264;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v31 = 0;
              }
              break;
            }
LABEL_365:
            *((_QWORD *)this + 20) = v31;
            goto LABEL_460;
          case 'f':
            *((_WORD *)this + 102) |= 0x4000u;
            v43 = *((_QWORD *)a2 + 1);
            if (v43 >= *((_QWORD *)a2 + 2))
            {
              v46 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v44 = v43 + 1;
              v45 = *(unsigned __int8 *)(*(_QWORD *)a2 + v43);
              *((_QWORD *)a2 + 1) = v44;
              v46 = v45 != 0;
            }
            *((_BYTE *)this + 201) = v46;
            goto LABEL_460;
          case 'g':
            *((_WORD *)this + 102) |= 0x400u;
            v47 = *((_QWORD *)a2 + 1);
            if (v47 > 0xFFFFFFFFFFFFFFFBLL || v47 + 4 > *((_QWORD *)a2 + 2))
              break;
            *((_DWORD *)this + 47) = *(_DWORD *)(*(_QWORD *)a2 + v47);
            goto LABEL_459;
          case 'h':
            *((_WORD *)this + 102) |= 0x2000u;
            v48 = *((_QWORD *)a2 + 1);
            if (v48 >= *((_QWORD *)a2 + 2))
            {
              v51 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v49 = v48 + 1;
              v50 = *(unsigned __int8 *)(*(_QWORD *)a2 + v48);
              *((_QWORD *)a2 + 1) = v49;
              v51 = v50 != 0;
            }
            *((_BYTE *)this + 200) = v51;
            goto LABEL_460;
          case 'i':
            *((_WORD *)this + 102) |= 4u;
            v52 = *((_QWORD *)a2 + 1);
            v53 = *((_QWORD *)a2 + 2);
            v54 = *(_QWORD *)a2;
            if (v52 <= 0xFFFFFFFFFFFFFFF5 && v52 + 10 <= v53)
            {
              v55 = 0;
              v56 = 0;
              v57 = 0;
              do
              {
                v58 = v52 + 1;
                *((_QWORD *)a2 + 1) = v52 + 1;
                v59 = *(_BYTE *)(v54 + v52);
                v57 |= (unint64_t)(v59 & 0x7F) << v55;
                if ((v59 & 0x80) == 0)
                  goto LABEL_371;
                v55 += 7;
                v52 = v58;
                v102 = v56++ > 8;
              }
              while (!v102);
LABEL_282:
              v57 = 0;
              goto LABEL_371;
            }
            v189 = 0;
            v190 = 0;
            v57 = 0;
            if (v53 <= v52)
              v53 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v53 == v52)
              {
                v57 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v191 = v52 + 1;
                v192 = *(_BYTE *)(v54 + v52);
                *((_QWORD *)a2 + 1) = v191;
                v57 |= (unint64_t)(v192 & 0x7F) << v189;
                if (v192 < 0)
                {
                  v189 += 7;
                  v52 = v191;
                  v102 = v190++ > 8;
                  if (v102)
                    goto LABEL_282;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v57 = 0;
              }
              break;
            }
LABEL_371:
            *((_QWORD *)this + 18) = v57;
            goto LABEL_460;
          case 'j':
            *((_WORD *)this + 102) |= 8u;
            v60 = *((_QWORD *)a2 + 1);
            v61 = *((_QWORD *)a2 + 2);
            v62 = *(_QWORD *)a2;
            if (v60 <= 0xFFFFFFFFFFFFFFF5 && v60 + 10 <= v61)
            {
              v63 = 0;
              v64 = 0;
              v65 = 0;
              do
              {
                v66 = v60 + 1;
                *((_QWORD *)a2 + 1) = v60 + 1;
                v67 = *(_BYTE *)(v62 + v60);
                v65 |= (unint64_t)(v67 & 0x7F) << v63;
                if ((v67 & 0x80) == 0)
                  goto LABEL_374;
                v63 += 7;
                v60 = v66;
                v102 = v64++ > 8;
              }
              while (!v102);
LABEL_289:
              v65 = 0;
              goto LABEL_374;
            }
            v193 = 0;
            v194 = 0;
            v65 = 0;
            if (v61 <= v60)
              v61 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v61 == v60)
              {
                v65 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v195 = v60 + 1;
                v196 = *(_BYTE *)(v62 + v60);
                *((_QWORD *)a2 + 1) = v195;
                v65 |= (unint64_t)(v196 & 0x7F) << v193;
                if (v196 < 0)
                {
                  v193 += 7;
                  v60 = v195;
                  v102 = v194++ > 8;
                  if (v102)
                    goto LABEL_289;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v65 = 0;
              }
              break;
            }
LABEL_374:
            *((_QWORD *)this + 19) = v65;
            goto LABEL_460;
          case 'k':
            *((_WORD *)this + 102) |= 0x100u;
            v68 = *((_QWORD *)a2 + 1);
            if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((_QWORD *)a2 + 2))
              break;
            *((_DWORD *)this + 45) = *(_DWORD *)(*(_QWORD *)a2 + v68);
            goto LABEL_459;
          case 'l':
            *((_WORD *)this + 102) |= 0x80u;
            v69 = *((_QWORD *)a2 + 1);
            if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((_QWORD *)a2 + 2))
              break;
            *((_DWORD *)this + 44) = *(_DWORD *)(*(_QWORD *)a2 + v69);
            goto LABEL_459;
          case 'm':
            *((_WORD *)this + 102) |= 0x40u;
            v70 = *((_QWORD *)a2 + 1);
            if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((_QWORD *)a2 + 2))
              break;
            *((_DWORD *)this + 43) = *(_DWORD *)(*(_QWORD *)a2 + v70);
            goto LABEL_459;
          default:
            if ((_DWORD)v25 == 1)
            {
              *((_WORD *)this + 102) |= 0x1000u;
              v178 = *((_QWORD *)a2 + 1);
              if (v178 <= 0xFFFFFFFFFFFFFFFBLL && v178 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 49) = *(_DWORD *)(*(_QWORD *)a2 + v178);
                goto LABEL_459;
              }
            }
            else
            {
              if ((_DWORD)v25 != 2)
              {
LABEL_256:
                v179 = v2;
                v180 = PB::Reader::skip(a2, v25, v24, 0);
                v2 = v179;
                if ((v180 & 1) == 0)
                  return 0;
                goto LABEL_460;
              }
              *((_WORD *)this + 102) |= 0x800u;
              v42 = *((_QWORD *)a2 + 1);
              if (v42 <= 0xFFFFFFFFFFFFFFFBLL && v42 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 48) = *(_DWORD *)(*(_QWORD *)a2 + v42);
LABEL_459:
                *((_QWORD *)a2 + 1) += 4;
                goto LABEL_460;
              }
            }
            break;
        }
      }
      *((_BYTE *)a2 + 24) = 1;
LABEL_460:
      v3 = *((_QWORD *)a2 + 1);
      v4 = *((_QWORD *)a2 + 2);
      v5 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v4 || v5 != 0)
        return v5 == 0;
    }
    v19 = 0;
    v20 = 0;
    v16 = 0;
    if (v3 > v4)
      v4 = v3;
    while (v4 != v3)
    {
      v21 = v3 + 1;
      v22 = *(_BYTE *)(v13 + v3);
      *((_QWORD *)a2 + 1) = v21;
      v16 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v3 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v16 = 0;
        goto LABEL_21;
      }
    }
    v5 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v5 == 0;
}

uint64_t CMMsl::KappaSpinResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  float *v11;
  float *v12;
  float v13;
  float *v14;
  float *v15;
  float v16;
  float *v17;
  float *v18;
  float v19;

  v3 = this;
  v4 = *(_WORD *)(this + 204);
  if ((v4 & 0x1000) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 196), 1u);
    v4 = *(_WORD *)(v3 + 204);
    if ((v4 & 0x800) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_35;
    }
  }
  else if ((*(_WORD *)(this + 204) & 0x800) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 192), 2u);
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x4000) == 0)
      goto LABEL_5;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 160), 0x65u);
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x4000) == 0)
  {
LABEL_5:
    if ((v4 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 201), 0x66u);
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x400) == 0)
  {
LABEL_6:
    if ((v4 & 0x2000) == 0)
      goto LABEL_7;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 188), 0x67u);
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x2000) == 0)
  {
LABEL_7:
    if ((v4 & 4) == 0)
      goto LABEL_8;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 200), 0x68u);
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0)
      goto LABEL_9;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 144), 0x69u);
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 152), 0x6Au);
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 180), 0x6Bu);
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x80) == 0)
  {
LABEL_11:
    if ((v4 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 176), 0x6Cu);
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x40) == 0)
  {
LABEL_12:
    if ((v4 & 1) == 0)
      goto LABEL_13;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 172), 0x6Du);
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 1) == 0)
  {
LABEL_13:
    if ((v4 & 2) == 0)
      goto LABEL_14;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 128), 0xC9u);
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 2) == 0)
  {
LABEL_14:
    if ((v4 & 0x200) == 0)
      goto LABEL_15;
LABEL_46:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 184), 0xCBu);
    if ((*(_WORD *)(v3 + 204) & 0x20) == 0)
      goto LABEL_17;
    goto LABEL_16;
  }
LABEL_45:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 136), 0xCAu);
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x200) != 0)
    goto LABEL_46;
LABEL_15:
  if ((v4 & 0x20) != 0)
LABEL_16:
    this = PB::Writer::write(a2, *(float *)(v3 + 168), 0xCCu);
LABEL_17:
  v5 = *(unint64_t **)(v3 + 80);
  v6 = *(unint64_t **)(v3 + 88);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::writeVarInt(a2, v7, 0xCDu);
  }
  v8 = *(unint64_t **)(v3 + 104);
  v9 = *(unint64_t **)(v3 + 112);
  while (v8 != v9)
  {
    v10 = *v8++;
    this = PB::Writer::writeVarInt(a2, v10, 0xCEu);
  }
  v11 = *(float **)(v3 + 8);
  v12 = *(float **)(v3 + 16);
  while (v11 != v12)
  {
    v13 = *v11++;
    this = PB::Writer::write(a2, v13, 0xCFu);
  }
  v14 = *(float **)(v3 + 56);
  v15 = *(float **)(v3 + 64);
  while (v14 != v15)
  {
    v16 = *v14++;
    this = PB::Writer::write(a2, v16, 0xD0u);
  }
  v18 = *(float **)(v3 + 32);
  v17 = *(float **)(v3 + 40);
  while (v18 != v17)
  {
    v19 = *v18++;
    this = PB::Writer::write(a2, v19, 0xD1u);
  }
  return this;
}

uint64_t CMMsl::KappaSpinResult::hash_value(CMMsl::KappaSpinResult *this)
{
  __int16 v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = *((_WORD *)this + 102);
  if ((v2 & 0x1000) == 0)
  {
    v3 = 0;
    if ((*((_WORD *)this + 102) & 0x800) != 0)
      goto LABEL_3;
LABEL_32:
    v5 = 0;
    if ((v2 & 0x10) != 0)
      goto LABEL_6;
    goto LABEL_33;
  }
  v24 = *((float *)this + 49);
  v3 = LODWORD(v24);
  if (v24 == 0.0)
    v3 = 0;
  if ((*((_WORD *)this + 102) & 0x800) == 0)
    goto LABEL_32;
LABEL_3:
  v4 = *((float *)this + 48);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_6:
    v6 = *((_QWORD *)this + 20);
    if ((*((_WORD *)this + 102) & 0x4000) != 0)
      goto LABEL_7;
    goto LABEL_34;
  }
LABEL_33:
  v6 = 0;
  if ((*((_WORD *)this + 102) & 0x4000) != 0)
  {
LABEL_7:
    v7 = *((unsigned __int8 *)this + 201);
    if ((*((_WORD *)this + 102) & 0x400) != 0)
      goto LABEL_8;
LABEL_35:
    v9 = 0;
    if ((*((_WORD *)this + 102) & 0x2000) != 0)
      goto LABEL_11;
    goto LABEL_36;
  }
LABEL_34:
  v7 = 0;
  if ((*((_WORD *)this + 102) & 0x400) == 0)
    goto LABEL_35;
LABEL_8:
  v8 = *((float *)this + 47);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  if ((*((_WORD *)this + 102) & 0x2000) != 0)
  {
LABEL_11:
    v10 = *((unsigned __int8 *)this + 200);
    if ((v2 & 4) != 0)
      goto LABEL_12;
    goto LABEL_37;
  }
LABEL_36:
  v10 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_12:
    v11 = *((_QWORD *)this + 18);
    if ((v2 & 8) != 0)
      goto LABEL_13;
    goto LABEL_38;
  }
LABEL_37:
  v11 = 0;
  if ((v2 & 8) != 0)
  {
LABEL_13:
    v12 = *((_QWORD *)this + 19);
    if ((*((_WORD *)this + 102) & 0x100) != 0)
      goto LABEL_14;
LABEL_39:
    v14 = 0;
    if ((v2 & 0x80) != 0)
      goto LABEL_17;
LABEL_40:
    v16 = 0;
    if ((v2 & 0x40) != 0)
      goto LABEL_20;
LABEL_41:
    v18 = 0;
    if ((v2 & 1) != 0)
      goto LABEL_23;
    goto LABEL_42;
  }
LABEL_38:
  v12 = 0;
  if ((*((_WORD *)this + 102) & 0x100) == 0)
    goto LABEL_39;
LABEL_14:
  v13 = *((float *)this + 45);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((v2 & 0x80) == 0)
    goto LABEL_40;
LABEL_17:
  v15 = *((float *)this + 44);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v2 & 0x40) == 0)
    goto LABEL_41;
LABEL_20:
  v17 = *((float *)this + 43);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v2 & 1) != 0)
  {
LABEL_23:
    v19 = *((_QWORD *)this + 16);
    if ((v2 & 2) != 0)
      goto LABEL_24;
    goto LABEL_43;
  }
LABEL_42:
  v19 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_24:
    v20 = *((_QWORD *)this + 17);
    if ((v2 & 0x200) != 0)
      goto LABEL_25;
    goto LABEL_44;
  }
LABEL_43:
  v20 = 0;
  if ((v2 & 0x200) != 0)
  {
LABEL_25:
    v21 = *((int *)this + 46);
    if ((v2 & 0x20) != 0)
      goto LABEL_26;
LABEL_45:
    v23 = 0;
    goto LABEL_46;
  }
LABEL_44:
  v21 = 0;
  if ((v2 & 0x20) == 0)
    goto LABEL_45;
LABEL_26:
  v22 = *((float *)this + 42);
  v23 = LODWORD(v22);
  if (v22 == 0.0)
    v23 = 0;
LABEL_46:
  v25 = v5 ^ v3 ^ v6 ^ v7 ^ v9 ^ v10 ^ v11 ^ v12 ^ v14 ^ v16 ^ v18 ^ v19 ^ v20 ^ v21 ^ v23 ^ PBHashBytes(*((_QWORD *)this + 10), *((_QWORD *)this + 11)- *((_QWORD *)this + 10));
  v26 = PBHashBytes(*((_QWORD *)this + 13), *((_QWORD *)this + 14) - *((_QWORD *)this + 13));
  v27 = v25 ^ v26 ^ PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  v28 = PBHashBytes(*((_QWORD *)this + 7), *((_QWORD *)this + 8) - *((_QWORD *)this + 7));
  return v27 ^ v28 ^ PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
}

void CMMsl::KappaSteps::~KappaSteps(CMMsl::KappaSteps *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::KappaSteps::KappaSteps(uint64_t this, const CMMsl::KappaSteps *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;

  *(_QWORD *)this = off_100352438;
  *(_DWORD *)(this + 32) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 32) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 7);
    v3 |= 0x10u;
    *(_BYTE *)(this + 32) = v3;
    *(_DWORD *)(this + 28) = v5;
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(_BYTE *)(this + 32) = v3;
    *(_DWORD *)(this + 20) = v6;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        return this;
LABEL_12:
      v8 = *((_DWORD *)a2 + 6);
      *(_BYTE *)(this + 32) = v3 | 8;
      *(_DWORD *)(this + 24) = v8;
      return this;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *(_BYTE *)(this + 32) = v3;
  *(_DWORD *)(this + 16) = v7;
  if ((*((_BYTE *)a2 + 32) & 8) != 0)
    goto LABEL_12;
  return this;
}

uint64_t CMMsl::KappaSteps::operator=(uint64_t a1, const CMMsl::KappaSteps *a2)
{
  uint64_t v3;
  int v4;
  __int128 v5;
  _BYTE v7[8];
  uint64_t v8;
  int v9;
  __int128 v10;

  if ((const CMMsl::KappaSteps *)a1 != a2)
  {
    CMMsl::KappaSteps::KappaSteps((uint64_t)v7, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v8 = v3;
    v4 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 20);
    *(_OWORD *)(a1 + 20) = v10;
    v10 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaSteps *a2, CMMsl::KappaSteps *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  return result;
}

float CMMsl::KappaSteps::KappaSteps(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100352438;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_100352438;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return result;
}

uint64_t CMMsl::KappaSteps::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  __int128 v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  _QWORD v10[2];
  int v11;
  __int128 v12;

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_DWORD *)(a2 + 16);
    v5 = *(_OWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 32) = 0;
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v10[0] = off_100352438;
    v10[1] = v6;
    v7 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v4;
    v11 = v7;
    v8 = *(_OWORD *)(a1 + 20);
    *(_OWORD *)(a1 + 20) = v5;
    v12 = v8;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::KappaSteps::formatText(CMMsl::KappaSteps *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "currentCadence", *((float *)this + 4));
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "deltaSteps", *((_DWORD *)this + 5));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "stepCount", *((_DWORD *)this + 7));
    if ((*((_BYTE *)this + 32) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "pedometerArmConstrainedState", *((_DWORD *)this + 6));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 1) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaSteps::readFrom(CMMsl::KappaSteps *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 32) |= 1u;
              v20 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v21 = *(_QWORD *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v45 = 0;
                v46 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_88;
                  }
                  v47 = v20++;
                  v48 = *(_BYTE *)(v21 + v47);
                  *((_QWORD *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0)
                    break;
                  v45 += 7;
                  v14 = v46++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_87;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v24 = 0;
LABEL_87:
                v2 = v47 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)a2 + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_88;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_88:
              *((_QWORD *)this + 1) = v24;
              goto LABEL_104;
            case 2u:
              *((_BYTE *)this + 32) |= 0x10u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_93;
                  }
                  v51 = v27++;
                  v52 = *(_BYTE *)(v28 + v51);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_92:
                    v2 = v51 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_92;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_93;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_93:
              *((_DWORD *)this + 7) = v31;
              goto LABEL_104;
            case 3u:
              *((_BYTE *)this + 32) |= 4u;
              v33 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_98;
                  }
                  v55 = v33++;
                  v56 = *(_BYTE *)(v34 + v55);
                  *((_QWORD *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_97:
                    v2 = v55 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v37) = 0;
                goto LABEL_97;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)a2 + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_98;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_98:
              *((_DWORD *)this + 5) = v37;
              goto LABEL_104;
            case 4u:
              *((_BYTE *)this + 32) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
                v2 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_104;
            case 5u:
              *((_BYTE *)this + 32) |= 8u;
              v39 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v40 = *(_QWORD *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_103;
                  }
                  v59 = v39++;
                  v60 = *(_BYTE *)(v40 + v59);
                  *((_QWORD *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_102:
                    v2 = v59 + 1;
                    goto LABEL_103;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v43) = 0;
                goto LABEL_102;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)a2 + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_103;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_103:
              *((_DWORD *)this + 6) = v43;
LABEL_104:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_104;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaSteps::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 2u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 3u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 5u);
  }
LABEL_10:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 4u);
  if ((*(_BYTE *)(v3 + 32) & 8) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 5u);
  return this;
}

uint64_t CMMsl::KappaSteps::hash_value(CMMsl::KappaSteps *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  uint64_t v6;

  if ((*((_BYTE *)this + 32) & 1) != 0)
  {
    v1 = *((_QWORD *)this + 1);
    if ((*((_BYTE *)this + 32) & 0x10) != 0)
    {
LABEL_3:
      v2 = *((unsigned int *)this + 7);
      if ((*((_BYTE *)this + 32) & 4) != 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 32) & 0x10) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 32) & 4) != 0)
  {
LABEL_4:
    v3 = *((unsigned int *)this + 5);
    if ((*((_BYTE *)this + 32) & 2) != 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  v3 = 0;
  if ((*((_BYTE *)this + 32) & 2) != 0)
  {
LABEL_5:
    v4 = *((float *)this + 4);
    v5 = LODWORD(v4);
    if (v4 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
      goto LABEL_8;
LABEL_13:
    v6 = 0;
    return v2 ^ v1 ^ v3 ^ v5 ^ v6;
  }
LABEL_12:
  v5 = 0;
  if ((*((_BYTE *)this + 32) & 8) == 0)
    goto LABEL_13;
LABEL_8:
  v6 = *((unsigned int *)this + 6);
  return v2 ^ v1 ^ v3 ^ v5 ^ v6;
}

void CMMsl::KappaStepsResult::~KappaStepsResult(CMMsl::KappaStepsResult *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::KappaStepsResult::KappaStepsResult(uint64_t this, const CMMsl::KappaStepsResult *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  char v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = off_100352470;
  *(_DWORD *)(this + 60) = 0;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 8) != 0)
  {
    v4 = *((_QWORD *)a2 + 4);
    v3 = 8;
    *(_WORD *)(this + 60) = 8;
    *(_QWORD *)(this + 32) = v4;
    v2 = *((_WORD *)a2 + 30);
    if ((v2 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_WORD *)a2 + 30) & 0x100) != 0)
  {
LABEL_5:
    v5 = *((_BYTE *)a2 + 56);
    v3 |= 0x100u;
    *(_WORD *)(this + 60) = v3;
    *(_BYTE *)(this + 56) = v5;
    v2 = *((_WORD *)a2 + 30);
  }
LABEL_6:
  if ((v2 & 0x80) != 0)
  {
    v6 = *((_DWORD *)a2 + 13);
    v3 |= 0x80u;
    *(_WORD *)(this + 60) = v3;
    *(_DWORD *)(this + 52) = v6;
    v2 = *((_WORD *)a2 + 30);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 11);
  v3 |= 0x20u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 44) = v7;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_17;
  }
LABEL_16:
  v8 = *((_DWORD *)a2 + 10);
  v3 |= 0x10u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 40) = v8;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 4) == 0)
      goto LABEL_11;
    goto LABEL_18;
  }
LABEL_17:
  v9 = *((_DWORD *)a2 + 12);
  v3 |= 0x40u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 48) = v9;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 4) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0)
      goto LABEL_12;
    goto LABEL_19;
  }
LABEL_18:
  v10 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *(_WORD *)(this + 60) = v3;
  *(_QWORD *)(this + 24) = v10;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0)
      return this;
LABEL_20:
    v12 = *((_QWORD *)a2 + 2);
    *(_WORD *)(this + 60) = v3 | 2;
    *(_QWORD *)(this + 16) = v12;
    return this;
  }
LABEL_19:
  v11 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 60) = v3;
  *(_QWORD *)(this + 8) = v11;
  if ((*((_WORD *)a2 + 30) & 2) != 0)
    goto LABEL_20;
  return this;
}

uint64_t CMMsl::KappaStepsResult::operator=(uint64_t a1, const CMMsl::KappaStepsResult *a2)
{
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  __int128 v8;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  int v15;
  char v16;
  int v17;

  if ((const CMMsl::KappaStepsResult *)a1 != a2)
  {
    CMMsl::KappaStepsResult::KappaStepsResult((uint64_t)&v10, a2);
    v3 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 60) = v17;
    v17 = v3;
    LOBYTE(v3) = *(_BYTE *)(a1 + 56);
    *(_BYTE *)(a1 + 56) = v16;
    v16 = v3;
    v4 = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a1 + 52) = v15;
    v15 = v4;
    v5 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v13;
    v13 = v5;
    v6 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v14;
    v14 = v6;
    v7 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    v12 = v7;
    v8 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    v11 = v8;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaStepsResult *a2, CMMsl::KappaStepsResult *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  float result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  LOBYTE(v4) = *((_BYTE *)this + 56);
  *((_BYTE *)this + 56) = *((_BYTE *)a2 + 56);
  *((_BYTE *)a2 + 56) = v4;
  v5 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v5;
  v6 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v6;
  result = *((float *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((float *)a2 + 10) = result;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  v9 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v9;
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v10;
  return result;
}

float CMMsl::KappaStepsResult::KappaStepsResult(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100352470;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  result = *(float *)(a2 + 40);
  *(float *)(a1 + 40) = result;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_100352470;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  result = *(float *)(a2 + 40);
  *(float *)(a1 + 40) = result;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::KappaStepsResult::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  int v5;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  void (**v15)(CMMsl::KappaStepsResult *__hidden);
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  int v20;
  char v21;
  int v22;

  if (a1 != a2)
  {
    v15 = off_100352470;
    v3 = *(_DWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 60) = 0;
    v4 = *(_BYTE *)(a2 + 56);
    v5 = *(_DWORD *)(a2 + 52);
    v6 = *(_DWORD *)(a2 + 48);
    v22 = *(_DWORD *)(a1 + 60);
    v7 = *(_BYTE *)(a1 + 56);
    *(_BYTE *)(a1 + 56) = v4;
    v21 = v7;
    v20 = *(_DWORD *)(a1 + 52);
    v8 = *(_QWORD *)(a1 + 40);
    v9 = *(_QWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 52) = v5;
    *(_QWORD *)(a1 + 40) = v9;
    v18 = v8;
    v10 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v6;
    v19 = v10;
    v17 = *(_OWORD *)(a1 + 24);
    v11 = *(_OWORD *)(a1 + 8);
    v12 = *(_OWORD *)(a2 + 8);
    v13 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 60) = v3;
    *(_OWORD *)(a1 + 24) = v13;
    *(_OWORD *)(a1 + 8) = v12;
    v16 = v11;
    PB::Base::~Base((PB::Base *)&v15);
  }
  return a1;
}

uint64_t CMMsl::KappaStepsResult::formatText(CMMsl::KappaStepsResult *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "currentCadence", *((float *)this + 10));
    v5 = *((_WORD *)this + 30);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "deltaSteps", *((float *)this + 11));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "epochFirstTimestamp", *((_QWORD *)this + 1));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "epochLastTimestamp", *((_QWORD *)this + 2));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "hasSteps", *((_BYTE *)this + 56));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "pedometerArmConstrainedState", *((_DWORD *)this + 12));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 4) == 0)
      goto LABEL_9;
LABEL_19:
    PB::TextFormatter::format(a2, "stepCountEventTimestamp", *((_QWORD *)this + 3));
    if ((*((_WORD *)this + 30) & 8) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_10;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "stepCount", *((float *)this + 13));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 4) != 0)
    goto LABEL_19;
LABEL_9:
  if ((v5 & 8) != 0)
LABEL_10:
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaStepsResult::readFrom(CMMsl::KappaStepsResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  char v52;
  uint64_t result;
  char v54;
  unsigned int v55;
  unint64_t v56;
  char v57;
  char v58;
  unsigned int v59;
  unint64_t v60;
  char v61;
  char v62;
  unsigned int v63;
  unint64_t v64;
  char v65;
  char v66;
  unsigned int v67;
  unint64_t v68;
  char v69;
  char v70;
  unsigned int v71;
  unint64_t v72;
  char v73;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          v20 = v11 >> 3;
          switch((v11 >> 3))
          {
            case 'e':
              *((_WORD *)this + 30) |= 8u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v54 = 0;
                v55 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    v25 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_115;
                  }
                  v56 = v21++;
                  v57 = *(_BYTE *)(v22 + v56);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v57 & 0x7F) << v54;
                  if ((v57 & 0x80) == 0)
                    break;
                  v54 += 7;
                  v14 = v55++ > 8;
                  if (v14)
                  {
                    v25 = 0;
                    goto LABEL_114;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v25 = 0;
LABEL_114:
                v2 = v56 + 1;
              }
              else
              {
                v23 = 0;
                v24 = 0;
                v25 = 0;
                do
                {
                  v2 = v21 + 1;
                  *((_QWORD *)a2 + 1) = v21 + 1;
                  v26 = *(_BYTE *)(v22 + v21);
                  v25 |= (unint64_t)(v26 & 0x7F) << v23;
                  if ((v26 & 0x80) == 0)
                    goto LABEL_115;
                  v23 += 7;
                  v21 = v2;
                  v14 = v24++ > 8;
                }
                while (!v14);
                v25 = 0;
              }
LABEL_115:
              *((_QWORD *)this + 4) = v25;
              goto LABEL_136;
            case 'f':
              *((_WORD *)this + 30) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v34 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v34 = v33 != 0;
              }
              *((_BYTE *)this + 56) = v34;
              goto LABEL_136;
            case 'g':
              *((_WORD *)this + 30) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_48;
              *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_110;
            case 'h':
              *((_WORD *)this + 30) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_48;
              *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_110;
            case 'i':
              *((_WORD *)this + 30) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_110:
                v2 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_48:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_136;
            case 'j':
              *((_WORD *)this + 30) |= 0x40u;
              v35 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v36 = *(_QWORD *)a2;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                v62 = 0;
                v63 = 0;
                v39 = 0;
                if (v2 <= v35)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_125;
                  }
                  v64 = v35++;
                  v65 = *(_BYTE *)(v36 + v64);
                  *((_QWORD *)a2 + 1) = v35;
                  v39 |= (unint64_t)(v65 & 0x7F) << v62;
                  if ((v65 & 0x80) == 0)
                    break;
                  v62 += 7;
                  v14 = v63++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_124:
                    v2 = v64 + 1;
                    goto LABEL_125;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v39) = 0;
                goto LABEL_124;
              }
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v2 = v35 + 1;
                *((_QWORD *)a2 + 1) = v35 + 1;
                v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0)
                  goto LABEL_125;
                v37 += 7;
                v35 = v2;
                v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_125:
              *((_DWORD *)this + 12) = v39;
              goto LABEL_136;
            case 'k':
              *((_WORD *)this + 30) |= 4u;
              v41 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v42 = *(_QWORD *)a2;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                v66 = 0;
                v67 = 0;
                v45 = 0;
                if (v2 <= v41)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v41)
                  {
                    v45 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_130;
                  }
                  v68 = v41++;
                  v69 = *(_BYTE *)(v42 + v68);
                  *((_QWORD *)a2 + 1) = v41;
                  v45 |= (unint64_t)(v69 & 0x7F) << v66;
                  if ((v69 & 0x80) == 0)
                    break;
                  v66 += 7;
                  v14 = v67++ > 8;
                  if (v14)
                  {
                    v45 = 0;
LABEL_129:
                    v2 = v68 + 1;
                    goto LABEL_130;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v45 = 0;
                goto LABEL_129;
              }
              v43 = 0;
              v44 = 0;
              v45 = 0;
              do
              {
                v2 = v41 + 1;
                *((_QWORD *)a2 + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0)
                  goto LABEL_130;
                v43 += 7;
                v41 = v2;
                v14 = v44++ > 8;
              }
              while (!v14);
              v45 = 0;
LABEL_130:
              *((_QWORD *)this + 3) = v45;
              goto LABEL_136;
            default:
              if ((_DWORD)v20 == 201)
              {
                *((_WORD *)this + 30) |= 1u;
                v47 = *((_QWORD *)a2 + 1);
                v2 = *((_QWORD *)a2 + 2);
                v48 = *(_QWORD *)a2;
                if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
                {
                  v70 = 0;
                  v71 = 0;
                  v51 = 0;
                  if (v2 <= v47)
                    v2 = *((_QWORD *)a2 + 1);
                  while (1)
                  {
                    if (v2 == v47)
                    {
                      v51 = 0;
                      *((_BYTE *)a2 + 24) = 1;
                      goto LABEL_135;
                    }
                    v72 = v47++;
                    v73 = *(_BYTE *)(v48 + v72);
                    *((_QWORD *)a2 + 1) = v47;
                    v51 |= (unint64_t)(v73 & 0x7F) << v70;
                    if ((v73 & 0x80) == 0)
                      break;
                    v70 += 7;
                    v14 = v71++ > 8;
                    if (v14)
                    {
                      v51 = 0;
                      goto LABEL_134;
                    }
                  }
                  if (*((_BYTE *)a2 + 24))
                    v51 = 0;
LABEL_134:
                  v2 = v72 + 1;
                }
                else
                {
                  v49 = 0;
                  v50 = 0;
                  v51 = 0;
                  while (1)
                  {
                    v2 = v47 + 1;
                    *((_QWORD *)a2 + 1) = v47 + 1;
                    v52 = *(_BYTE *)(v48 + v47);
                    v51 |= (unint64_t)(v52 & 0x7F) << v49;
                    if ((v52 & 0x80) == 0)
                      break;
                    v49 += 7;
                    v47 = v2;
                    v14 = v50++ > 8;
                    if (v14)
                    {
                      v51 = 0;
                      break;
                    }
                  }
                }
LABEL_135:
                *((_QWORD *)this + 1) = v51;
              }
              else if ((_DWORD)v20 == 202)
              {
                *((_WORD *)this + 30) |= 2u;
                v27 = *((_QWORD *)a2 + 1);
                v2 = *((_QWORD *)a2 + 2);
                v28 = *(_QWORD *)a2;
                if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
                {
                  v58 = 0;
                  v59 = 0;
                  v31 = 0;
                  if (v2 <= v27)
                    v2 = *((_QWORD *)a2 + 1);
                  while (1)
                  {
                    if (v2 == v27)
                    {
                      v31 = 0;
                      *((_BYTE *)a2 + 24) = 1;
                      goto LABEL_120;
                    }
                    v60 = v27++;
                    v61 = *(_BYTE *)(v28 + v60);
                    *((_QWORD *)a2 + 1) = v27;
                    v31 |= (unint64_t)(v61 & 0x7F) << v58;
                    if ((v61 & 0x80) == 0)
                      break;
                    v58 += 7;
                    v14 = v59++ > 8;
                    if (v14)
                    {
                      v31 = 0;
                      goto LABEL_119;
                    }
                  }
                  if (*((_BYTE *)a2 + 24))
                    v31 = 0;
LABEL_119:
                  v2 = v60 + 1;
                }
                else
                {
                  v29 = 0;
                  v30 = 0;
                  v31 = 0;
                  while (1)
                  {
                    v2 = v27 + 1;
                    *((_QWORD *)a2 + 1) = v27 + 1;
                    v32 = *(_BYTE *)(v28 + v27);
                    v31 |= (unint64_t)(v32 & 0x7F) << v29;
                    if ((v32 & 0x80) == 0)
                      break;
                    v29 += 7;
                    v27 = v2;
                    v14 = v30++ > 8;
                    if (v14)
                    {
                      v31 = 0;
                      break;
                    }
                  }
                }
LABEL_120:
                *((_QWORD *)this + 2) = v31;
              }
              else
              {
                result = PB::Reader::skip(a2, v20, v11 & 7, 0);
                if (!(_DWORD)result)
                  return result;
                v2 = *((_QWORD *)a2 + 1);
              }
LABEL_136:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaStepsResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 60);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 32), 0x65u);
    v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((*(_WORD *)(this + 60) & 0x100) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 56), 0x66u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x80) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0x67u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 0x68u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 0x69u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 4) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 0x6Au);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 24), 0x6Bu);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 16), 0xCAu);
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 8), 0xC9u);
  if ((*(_WORD *)(v3 + 60) & 2) != 0)
    return PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 16), 0xCAu);
  return this;
}

uint64_t CMMsl::KappaStepsResult::hash_value(CMMsl::KappaStepsResult *this)
{
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *((_WORD *)this + 30);
  if ((v1 & 8) != 0)
  {
    v2 = *((_QWORD *)this + 4);
    if ((*((_WORD *)this + 30) & 0x100) != 0)
    {
LABEL_3:
      v3 = *((unsigned __int8 *)this + 56);
      if ((v1 & 0x80) != 0)
        goto LABEL_4;
LABEL_19:
      v5 = 0;
      if ((v1 & 0x20) != 0)
        goto LABEL_7;
LABEL_20:
      v7 = 0;
      if ((v1 & 0x10) != 0)
        goto LABEL_10;
LABEL_21:
      v9 = 0;
      if ((v1 & 0x40) != 0)
        goto LABEL_13;
      goto LABEL_22;
    }
  }
  else
  {
    v2 = 0;
    if ((*((_WORD *)this + 30) & 0x100) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_19;
LABEL_4:
  v4 = *((float *)this + 13);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_20;
LABEL_7:
  v6 = *((float *)this + 11);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_21;
LABEL_10:
  v8 = *((float *)this + 10);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_13:
    v10 = *((unsigned int *)this + 12);
    if ((v1 & 4) != 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  v10 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_14:
    v11 = *((_QWORD *)this + 3);
    if ((v1 & 1) != 0)
      goto LABEL_15;
LABEL_24:
    v12 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_16;
LABEL_25:
    v13 = 0;
    return v3 ^ v2 ^ v5 ^ v7 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13;
  }
LABEL_23:
  v11 = 0;
  if ((v1 & 1) == 0)
    goto LABEL_24;
LABEL_15:
  v12 = *((_QWORD *)this + 1);
  if ((v1 & 2) == 0)
    goto LABEL_25;
LABEL_16:
  v13 = *((_QWORD *)this + 2);
  return v3 ^ v2 ^ v5 ^ v7 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13;
}

void CMMsl::KappaTrigger::~KappaTrigger(CMMsl::KappaTrigger *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = off_1003524A8;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::KappaTrigger::~KappaTrigger(this);
  operator delete();
}

CMMsl::KappaTrigger *CMMsl::KappaTrigger::KappaTrigger(CMMsl::KappaTrigger *this, const CMMsl::KappaTrigger *a2)
{
  char *v4;
  int v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int v10;
  int v11;
  char v13;
  char v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  char v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;

  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_QWORD *)this = off_1003524A8;
  *((_DWORD *)this + 53) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 9) = 0;
  v5 = *((_DWORD *)a2 + 53);
  if ((v5 & 4) != 0)
  {
    v7 = *((_QWORD *)a2 + 12);
    v6 = 4;
    *((_DWORD *)this + 53) = 4;
    *((_QWORD *)this + 12) = v7;
    v5 = *((_DWORD *)a2 + 53);
    if ((v5 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else
  {
    v6 = 0;
    if ((v5 & 0x80000000) == 0)
      goto LABEL_6;
  }
  v8 = *((_BYTE *)a2 + 211);
  v6 |= 0x80000000;
  *((_DWORD *)this + 53) = v6;
  *((_BYTE *)this + 211) = v8;
  v5 = *((_DWORD *)a2 + 53);
LABEL_6:
  if ((v5 & 1) != 0)
  {
    v9 = *((_QWORD *)a2 + 10);
    *((_DWORD *)this + 53) = v6 | 1;
    *((_QWORD *)this + 10) = v9;
  }
  if (this != a2)
  {
    sub_100239350(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
    sub_100020CE4((char *)this + 56, *((char **)a2 + 7), *((_QWORD *)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 2);
    sub_100020CE4((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
  }
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x10000000) != 0)
  {
    v13 = *((_BYTE *)a2 + 208);
    *((_DWORD *)this + 53) |= 0x10000000u;
    *((_BYTE *)this + 208) = v13;
    v10 = *((_DWORD *)a2 + 53);
    if ((v10 & 0x20000000) == 0)
    {
LABEL_12:
      if ((v10 & 0x400000) == 0)
        goto LABEL_13;
      goto LABEL_43;
    }
  }
  else if ((v10 & 0x20000000) == 0)
  {
    goto LABEL_12;
  }
  v14 = *((_BYTE *)a2 + 209);
  *((_DWORD *)this + 53) |= 0x20000000u;
  *((_BYTE *)this + 209) = v14;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x400000) == 0)
  {
LABEL_13:
    if ((v10 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_44;
  }
LABEL_43:
  v15 = *((_DWORD *)a2 + 46);
  *((_DWORD *)this + 53) |= 0x400000u;
  *((_DWORD *)this + 46) = v15;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x10) == 0)
  {
LABEL_14:
    if ((v10 & 0x80000) == 0)
      goto LABEL_15;
    goto LABEL_45;
  }
LABEL_44:
  v16 = *((_DWORD *)a2 + 28);
  *((_DWORD *)this + 53) |= 0x10u;
  *((_DWORD *)this + 28) = v16;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x80000) == 0)
  {
LABEL_15:
    if ((v10 & 0x40000) == 0)
      goto LABEL_16;
    goto LABEL_46;
  }
LABEL_45:
  v17 = *((_DWORD *)a2 + 43);
  *((_DWORD *)this + 53) |= 0x80000u;
  *((_DWORD *)this + 43) = v17;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x40000) == 0)
  {
LABEL_16:
    if ((v10 & 0x20000) == 0)
      goto LABEL_17;
    goto LABEL_47;
  }
LABEL_46:
  v18 = *((_DWORD *)a2 + 42);
  *((_DWORD *)this + 53) |= 0x40000u;
  *((_DWORD *)this + 42) = v18;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x20000) == 0)
  {
LABEL_17:
    if ((v10 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_48;
  }
LABEL_47:
  v19 = *((_DWORD *)a2 + 41);
  *((_DWORD *)this + 53) |= 0x20000u;
  *((_DWORD *)this + 41) = v19;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x10000) == 0)
  {
LABEL_18:
    if ((v10 & 0x8000) == 0)
      goto LABEL_19;
    goto LABEL_49;
  }
LABEL_48:
  v20 = *((_DWORD *)a2 + 40);
  *((_DWORD *)this + 53) |= 0x10000u;
  *((_DWORD *)this + 40) = v20;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x8000) == 0)
  {
LABEL_19:
    if ((v10 & 0x4000) == 0)
      goto LABEL_20;
    goto LABEL_50;
  }
LABEL_49:
  v21 = *((_DWORD *)a2 + 39);
  *((_DWORD *)this + 53) |= 0x8000u;
  *((_DWORD *)this + 39) = v21;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x4000) == 0)
  {
LABEL_20:
    if ((v10 & 0x2000) == 0)
      goto LABEL_21;
    goto LABEL_51;
  }
LABEL_50:
  v22 = *((_DWORD *)a2 + 38);
  *((_DWORD *)this + 53) |= 0x4000u;
  *((_DWORD *)this + 38) = v22;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x2000) == 0)
  {
LABEL_21:
    if ((v10 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_52;
  }
LABEL_51:
  v23 = *((_DWORD *)a2 + 37);
  *((_DWORD *)this + 53) |= 0x2000u;
  *((_DWORD *)this + 37) = v23;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x100000) == 0)
  {
LABEL_22:
    if ((v10 & 0x100) == 0)
      goto LABEL_23;
    goto LABEL_53;
  }
LABEL_52:
  v24 = *((_DWORD *)a2 + 44);
  *((_DWORD *)this + 53) |= 0x100000u;
  *((_DWORD *)this + 44) = v24;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x100) == 0)
  {
LABEL_23:
    if ((v10 & 0x1000000) == 0)
      goto LABEL_24;
    goto LABEL_54;
  }
LABEL_53:
  v25 = *((_DWORD *)a2 + 32);
  *((_DWORD *)this + 53) |= 0x100u;
  *((_DWORD *)this + 32) = v25;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v10 & 0x20) == 0)
      goto LABEL_25;
    goto LABEL_55;
  }
LABEL_54:
  v26 = *((_DWORD *)a2 + 48);
  *((_DWORD *)this + 53) |= 0x1000000u;
  *((_DWORD *)this + 48) = v26;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x20) == 0)
  {
LABEL_25:
    if ((v10 & 8) == 0)
      goto LABEL_26;
    goto LABEL_56;
  }
LABEL_55:
  v27 = *((_DWORD *)a2 + 29);
  *((_DWORD *)this + 53) |= 0x20u;
  *((_DWORD *)this + 29) = v27;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 8) == 0)
  {
LABEL_26:
    if ((v10 & 0x2000000) == 0)
      goto LABEL_27;
    goto LABEL_57;
  }
LABEL_56:
  v28 = *((_QWORD *)a2 + 13);
  *((_DWORD *)this + 53) |= 8u;
  *((_QWORD *)this + 13) = v28;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v10 & 0x4000000) == 0)
      goto LABEL_28;
    goto LABEL_58;
  }
LABEL_57:
  v29 = *((_DWORD *)a2 + 49);
  *((_DWORD *)this + 53) |= 0x2000000u;
  *((_DWORD *)this + 49) = v29;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v10 & 0x8000000) == 0)
      goto LABEL_29;
    goto LABEL_59;
  }
LABEL_58:
  v30 = *((_DWORD *)a2 + 50);
  *((_DWORD *)this + 53) |= 0x4000000u;
  *((_DWORD *)this + 50) = v30;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v10 & 0x800) == 0)
      goto LABEL_30;
    goto LABEL_60;
  }
LABEL_59:
  v31 = *((_DWORD *)a2 + 51);
  *((_DWORD *)this + 53) |= 0x8000000u;
  *((_DWORD *)this + 51) = v31;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x800) == 0)
  {
LABEL_30:
    if ((v10 & 0x80) == 0)
      goto LABEL_31;
    goto LABEL_61;
  }
LABEL_60:
  v32 = *((_DWORD *)a2 + 35);
  *((_DWORD *)this + 53) |= 0x800u;
  *((_DWORD *)this + 35) = v32;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x80) == 0)
  {
LABEL_31:
    if ((v10 & 2) == 0)
      goto LABEL_32;
    goto LABEL_62;
  }
LABEL_61:
  v33 = *((_DWORD *)a2 + 31);
  *((_DWORD *)this + 53) |= 0x80u;
  *((_DWORD *)this + 31) = v33;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 2) == 0)
  {
LABEL_32:
    if ((v10 & 0x40000000) == 0)
      goto LABEL_33;
    goto LABEL_63;
  }
LABEL_62:
  v34 = *((_QWORD *)a2 + 11);
  *((_DWORD *)this + 53) |= 2u;
  *((_QWORD *)this + 11) = v34;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x40000000) == 0)
  {
LABEL_33:
    if ((v10 & 0x1000) == 0)
      goto LABEL_34;
    goto LABEL_64;
  }
LABEL_63:
  v35 = *((_BYTE *)a2 + 210);
  *((_DWORD *)this + 53) |= 0x40000000u;
  *((_BYTE *)this + 210) = v35;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x1000) == 0)
  {
LABEL_34:
    if ((v10 & 0x200) == 0)
      goto LABEL_35;
    goto LABEL_65;
  }
LABEL_64:
  v36 = *((_DWORD *)a2 + 36);
  *((_DWORD *)this + 53) |= 0x1000u;
  *((_DWORD *)this + 36) = v36;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x200) == 0)
  {
LABEL_35:
    if ((v10 & 0x40) == 0)
      goto LABEL_36;
    goto LABEL_66;
  }
LABEL_65:
  v37 = *((_DWORD *)a2 + 33);
  *((_DWORD *)this + 53) |= 0x200u;
  *((_DWORD *)this + 33) = v37;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x40) == 0)
  {
LABEL_36:
    if ((v10 & 0x200000) == 0)
      goto LABEL_37;
    goto LABEL_67;
  }
LABEL_66:
  v38 = *((_DWORD *)a2 + 30);
  *((_DWORD *)this + 53) |= 0x40u;
  *((_DWORD *)this + 30) = v38;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x200000) == 0)
  {
LABEL_37:
    if ((v10 & 0x400) == 0)
      goto LABEL_38;
LABEL_68:
    v40 = *((_DWORD *)a2 + 34);
    *((_DWORD *)this + 53) |= 0x400u;
    *((_DWORD *)this + 34) = v40;
    if ((*((_DWORD *)a2 + 53) & 0x800000) == 0)
      return this;
    goto LABEL_39;
  }
LABEL_67:
  v39 = *((_DWORD *)a2 + 45);
  *((_DWORD *)this + 53) |= 0x200000u;
  *((_DWORD *)this + 45) = v39;
  v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x400) != 0)
    goto LABEL_68;
LABEL_38:
  if ((v10 & 0x800000) != 0)
  {
LABEL_39:
    v11 = *((_DWORD *)a2 + 47);
    *((_DWORD *)this + 53) |= 0x800000u;
    *((_DWORD *)this + 47) = v11;
  }
  return this;
}

CMMsl *CMMsl::KappaTrigger::operator=(CMMsl *a1, const CMMsl::KappaTrigger *a2)
{
  CMMsl::KappaTrigger *v3;
  _BYTE v5[216];

  if (a1 != a2)
  {
    CMMsl::KappaTrigger::KappaTrigger((CMMsl::KappaTrigger *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaTrigger *)v5, v3);
    CMMsl::KappaTrigger::~KappaTrigger((CMMsl::KappaTrigger *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaTrigger *a2, CMMsl::KappaTrigger *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float result;

  v3 = *((_DWORD *)this + 53);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 53);
  *((_DWORD *)a2 + 53) = v3;
  v4 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v4;
  LOBYTE(v4) = *((_BYTE *)this + 211);
  *((_BYTE *)this + 211) = *((_BYTE *)a2 + 211);
  *((_BYTE *)a2 + 211) = v4;
  v5 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v5;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  v9 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v9;
  v10 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v10;
  v11 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v11;
  v12 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v12;
  v13 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v13;
  v14 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v14;
  LOBYTE(v14) = *((_BYTE *)this + 208);
  *((_BYTE *)this + 208) = *((_BYTE *)a2 + 208);
  *((_BYTE *)a2 + 208) = v14;
  LOBYTE(v14) = *((_BYTE *)this + 209);
  *((_BYTE *)this + 209) = *((_BYTE *)a2 + 209);
  *((_BYTE *)a2 + 209) = v14;
  LODWORD(v14) = *((_DWORD *)this + 46);
  *((_DWORD *)this + 46) = *((_DWORD *)a2 + 46);
  *((_DWORD *)a2 + 46) = v14;
  LODWORD(v5) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v5;
  LODWORD(v14) = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v14;
  LODWORD(v14) = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v14;
  LODWORD(v14) = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v14;
  LODWORD(v14) = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v14;
  LODWORD(v14) = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v14;
  LODWORD(v14) = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v14;
  LODWORD(v14) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v14;
  LODWORD(v14) = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v14;
  LODWORD(v5) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v5;
  LODWORD(v14) = *((_DWORD *)this + 48);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_DWORD *)a2 + 48) = v14;
  LODWORD(v14) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v14;
  v15 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v15;
  LODWORD(v5) = *((_DWORD *)this + 49);
  *((_DWORD *)this + 49) = *((_DWORD *)a2 + 49);
  *((_DWORD *)a2 + 49) = v5;
  LODWORD(v5) = *((_DWORD *)this + 50);
  *((_DWORD *)this + 50) = *((_DWORD *)a2 + 50);
  *((_DWORD *)a2 + 50) = v5;
  LODWORD(v5) = *((_DWORD *)this + 51);
  *((_DWORD *)this + 51) = *((_DWORD *)a2 + 51);
  *((_DWORD *)a2 + 51) = v5;
  LODWORD(v15) = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v15;
  LODWORD(v15) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v15;
  v16 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v16;
  LOBYTE(v16) = *((_BYTE *)this + 210);
  *((_BYTE *)this + 210) = *((_BYTE *)a2 + 210);
  *((_BYTE *)a2 + 210) = v16;
  LODWORD(v5) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v5;
  LODWORD(v5) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v5;
  result = *((float *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((float *)a2 + 30) = result;
  LODWORD(v16) = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v16;
  LODWORD(v16) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v16;
  LODWORD(v16) = *((_DWORD *)this + 47);
  *((_DWORD *)this + 47) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = v16;
  return result;
}

uint64_t CMMsl::KappaTrigger::KappaTrigger(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_1003524A8;
  v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  v5 = a1 + 56;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_DWORD *)(a2 + 212) = 0;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 211) = *(_BYTE *)(a2 + 211);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  sub_100239458(v5, (__n128 *)(a2 + 56));
  sub_100239458(v4, (__n128 *)(a2 + 32));
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  *(_BYTE *)(a1 + 209) = *(_BYTE *)(a2 + 209);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 210) = *(_BYTE *)(a2 + 210);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  return a1;
}

CMMsl *CMMsl::KappaTrigger::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::KappaTrigger *v3;
  _BYTE v5[216];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaTrigger::KappaTrigger((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaTrigger *)v5, v3);
    CMMsl::KappaTrigger::~KappaTrigger((CMMsl::KappaTrigger *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaTrigger::formatText(CMMsl::KappaTrigger *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;
  double *v6;
  double *v7;
  double v8;
  int v9;
  float *v10;
  float *v11;
  float v12;
  float *v13;
  float *v14;
  float v15;
  int v16;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "avgHorizontalDecelMax", *((double *)this + 10));
    v5 = *((_DWORD *)this + 53);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_45;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "avgHorizontalDecelThresholdCoupled", *((float *)this + 28));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0)
      goto LABEL_5;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "btHint", *((_DWORD *)this + 29));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "companionAopTs", *((_QWORD *)this + 11));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "currentWindowMean", *((float *)this + 30));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "enableMode", *((_DWORD *)this + 31));
  if ((*((_DWORD *)this + 53) & 0x100) != 0)
LABEL_8:
    PB::TextFormatter::format(a2, "impactThresholdUncoupled", *((float *)this + 32));
LABEL_9:
  v6 = (double *)*((_QWORD *)this + 1);
  v7 = (double *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "inertialAccel", v8);
  }
  v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x10000000) != 0)
  {
    PB::TextFormatter::format(a2, "isMounted", *((_BYTE *)this + 208));
    v9 = *((_DWORD *)this + 53);
    if ((v9 & 0x20000000) == 0)
    {
LABEL_13:
      if ((v9 & 0x200) == 0)
        goto LABEL_14;
      goto LABEL_52;
    }
  }
  else if ((v9 & 0x20000000) == 0)
  {
    goto LABEL_13;
  }
  PB::TextFormatter::format(a2, "isSimulated", *((_BYTE *)this + 209));
  v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x200) == 0)
  {
LABEL_14:
    if ((v9 & 0x400) == 0)
      goto LABEL_15;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "lastCompleted15sWindowMean", *((float *)this + 33));
  v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x400) == 0)
  {
LABEL_15:
    if ((v9 & 0x40000000) == 0)
      goto LABEL_16;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "locallyArmedBitmap", *((_DWORD *)this + 34));
  v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x40000000) == 0)
  {
LABEL_16:
    if ((v9 & 0x800) == 0)
      goto LABEL_17;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "martyIsBicycle", *((_BYTE *)this + 210));
  v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x800) == 0)
  {
LABEL_17:
    if ((v9 & 0x1000) == 0)
      goto LABEL_18;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "martyTriggerPathBitmap", *((_DWORD *)this + 35));
  v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x1000) == 0)
  {
LABEL_18:
    if ((v9 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "maxMeanTenMinPreTrigger", *((float *)this + 36));
  v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x2000) == 0)
  {
LABEL_19:
    if ((v9 & 0x4000) == 0)
      goto LABEL_20;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "nAccelGap", *((_DWORD *)this + 37));
  v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x4000) == 0)
  {
LABEL_20:
    if ((v9 & 0x8000) == 0)
      goto LABEL_21;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "nFullAccel", *((_DWORD *)this + 38));
  v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x8000) == 0)
  {
LABEL_21:
    if ((v9 & 0x10000) == 0)
      goto LABEL_22;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "nFullDM", *((_DWORD *)this + 39));
  v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x10000) == 0)
  {
LABEL_22:
    if ((v9 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "nOldAccel", *((_DWORD *)this + 40));
  v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x20000) == 0)
  {
LABEL_23:
    if ((v9 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "nOldDM", *((_DWORD *)this + 41));
  v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x40000) == 0)
  {
LABEL_24:
    if ((v9 & 0x80000) == 0)
      goto LABEL_25;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "nOldDt", *((_DWORD *)this + 42));
  v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x80000) == 0)
  {
LABEL_25:
    if ((v9 & 0x100000) == 0)
      goto LABEL_26;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "nPrecondition", *((_DWORD *)this + 43));
  v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x100000) == 0)
  {
LABEL_26:
    if ((v9 & 0x200000) == 0)
      goto LABEL_27;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "nUseNearest", *((_DWORD *)this + 44));
  v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x200000) == 0)
  {
LABEL_27:
    if ((v9 & 0x400000) == 0)
      goto LABEL_28;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "numMaxEnvelopes", *((_DWORD *)this + 45));
  v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x400000) == 0)
  {
LABEL_28:
    if ((v9 & 0x800000) == 0)
      goto LABEL_30;
    goto LABEL_29;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "numResets", *((_DWORD *)this + 46));
  if ((*((_DWORD *)this + 53) & 0x800000) != 0)
LABEL_29:
    PB::TextFormatter::format(a2, "overrideArmedBitmap", *((_DWORD *)this + 47));
LABEL_30:
  v10 = (float *)*((_QWORD *)this + 4);
  v11 = (float *)*((_QWORD *)this + 5);
  while (v10 != v11)
  {
    v12 = *v10++;
    PB::TextFormatter::format(a2, "prevQ", v12);
  }
  v13 = (float *)*((_QWORD *)this + 7);
  v14 = (float *)*((_QWORD *)this + 8);
  while (v13 != v14)
  {
    v15 = *v13++;
    PB::TextFormatter::format(a2, "rawClampedAccel", v15);
  }
  v16 = *((_DWORD *)this + 53);
  if (v16 < 0)
  {
    PB::TextFormatter::format(a2, "shouldTrigger", *((_BYTE *)this + 211));
    v16 = *((_DWORD *)this + 53);
    if ((v16 & 4) == 0)
    {
LABEL_36:
      if ((v16 & 0x1000000) == 0)
        goto LABEL_37;
      goto LABEL_70;
    }
  }
  else if ((v16 & 4) == 0)
  {
    goto LABEL_36;
  }
  PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 12));
  v16 = *((_DWORD *)this + 53);
  if ((v16 & 0x1000000) == 0)
  {
LABEL_37:
    if ((v16 & 0x2000000) == 0)
      goto LABEL_38;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "triggerPathBitmap", *((_DWORD *)this + 48));
  v16 = *((_DWORD *)this + 53);
  if ((v16 & 0x2000000) == 0)
  {
LABEL_38:
    if ((v16 & 0x4000000) == 0)
      goto LABEL_39;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "vehicleProbabilityLongTermMean0", *((float *)this + 49));
  v16 = *((_DWORD *)this + 53);
  if ((v16 & 0x4000000) == 0)
  {
LABEL_39:
    if ((v16 & 0x8000000) == 0)
      goto LABEL_40;
LABEL_73:
    PB::TextFormatter::format(a2, "vehicleProbabilityLongTermMean2", *((float *)this + 51));
    if ((*((_DWORD *)this + 53) & 8) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_41;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "vehicleProbabilityLongTermMean1", *((float *)this + 50));
  v16 = *((_DWORD *)this + 53);
  if ((v16 & 0x8000000) != 0)
    goto LABEL_73;
LABEL_40:
  if ((v16 & 8) != 0)
LABEL_41:
    PB::TextFormatter::format(a2, "vehicleProbabilityTs", *((_QWORD *)this + 13));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::KappaTrigger::readFrom(CMMsl::KappaTrigger *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  char *v9;
  void **v10;
  char *v11;
  void **v12;
  char *v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  BOOL v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  char v24;
  int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  BOOL v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  _DWORD *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  _DWORD *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  int v84;
  BOOL v85;
  unint64_t v86;
  unint64_t v87;
  int v88;
  BOOL v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char v93;
  unsigned int v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  char v102;
  unsigned int v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  char v110;
  unsigned int v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  char v118;
  unsigned int v119;
  uint64_t v120;
  unint64_t v121;
  char v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  char v126;
  unsigned int v127;
  uint64_t v128;
  unint64_t v129;
  char v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  char v134;
  unsigned int v135;
  uint64_t v136;
  unint64_t v137;
  char v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  char v142;
  unsigned int v143;
  uint64_t v144;
  unint64_t v145;
  char v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  char v150;
  unsigned int v151;
  uint64_t v152;
  unint64_t v153;
  char v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  char v158;
  unsigned int v159;
  uint64_t v160;
  unint64_t v161;
  char v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  char v167;
  unsigned int v168;
  uint64_t v169;
  unint64_t v170;
  char v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  char v175;
  unsigned int v176;
  uint64_t v177;
  unint64_t v178;
  char v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  char v183;
  unsigned int v184;
  uint64_t v185;
  unint64_t v186;
  char v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  char v194;
  unsigned int v195;
  uint64_t v196;
  unint64_t v197;
  char v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  char v202;
  unsigned int v203;
  uint64_t v204;
  unint64_t v205;
  char v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  char v210;
  unsigned int v211;
  uint64_t v212;
  unint64_t v213;
  char v214;
  unint64_t v215;
  unint64_t v216;
  int v217;
  BOOL v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t v224;
  char v225;
  unsigned int v226;
  uint64_t v227;
  unint64_t v228;
  char v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  char v233;
  unsigned int v234;
  uint64_t v235;
  unint64_t v236;
  char v237;
  unint64_t v238;
  unint64_t v239;
  uint64_t v240;
  char v241;
  unsigned int v242;
  uint64_t v243;
  unint64_t v244;
  char v245;
  char v246;
  unsigned int v247;
  unint64_t v248;
  char v249;
  unint64_t v250;
  char *v251;
  _QWORD *v252;
  unint64_t v253;
  char *v254;
  _DWORD *v255;
  unint64_t v256;
  char *v257;
  char v258;
  unsigned int v259;
  unint64_t v260;
  char v261;
  char v262;
  unsigned int v263;
  unint64_t v264;
  char v265;
  char v266;
  unsigned int v267;
  unint64_t v268;
  char v269;
  char v270;
  unsigned int v271;
  unint64_t v272;
  char v273;
  char v274;
  unsigned int v275;
  unint64_t v276;
  char v277;
  char v278;
  unsigned int v279;
  unint64_t v280;
  char v281;
  char v282;
  unsigned int v283;
  unint64_t v284;
  char v285;
  char v286;
  unsigned int v287;
  unint64_t v288;
  char v289;
  char v290;
  unsigned int v291;
  unint64_t v292;
  char v293;
  char v294;
  unsigned int v295;
  unint64_t v296;
  char v297;
  char v298;
  unsigned int v299;
  unint64_t v300;
  char v301;
  char v302;
  unsigned int v303;
  unint64_t v304;
  char v305;
  char v306;
  unsigned int v307;
  unint64_t v308;
  char v309;
  char v310;
  unsigned int v311;
  unint64_t v312;
  char v313;
  char v314;
  unsigned int v315;
  unint64_t v316;
  char v317;
  char v318;
  unsigned int v319;
  unint64_t v320;
  char v321;
  char v322;
  unsigned int v323;
  unint64_t v324;
  char v325;
  char v326;
  unsigned int v327;
  unint64_t v328;
  char v329;
  char *v330;
  uint64_t v331;
  unint64_t v332;
  uint64_t v333;
  unint64_t v334;
  char *v335;
  char *v336;
  uint64_t v337;
  unint64_t v338;
  uint64_t v339;
  unint64_t v340;
  char *v341;
  char *v342;
  uint64_t v343;
  unint64_t v344;
  uint64_t v345;
  unint64_t v346;
  char *v347;
  char *v348;
  uint64_t v349;
  unint64_t v350;
  uint64_t v351;
  char *v352;
  int v353;
  char *v354;
  int v355;
  unint64_t v356;
  _BYTE v359[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 32);
    v9 = (char *)this + 48;
    v10 = (void **)((char *)this + 56);
    v11 = (char *)this + 72;
    v12 = (void **)((char *)this + 8);
    v13 = (char *)this + 24;
    while (1)
    {
      v14 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v19 = *(_BYTE *)(v14 + v2);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0)
          break;
        v15 += 7;
        v2 = v18;
        v20 = v16++ > 8;
        if (v20)
          goto LABEL_20;
      }
LABEL_21:
      v26 = v17 & 7;
      if (v26 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v17 >> 3))
      {
        case 1u:
          *((_DWORD *)this + 53) |= 4u;
          v27 = *((_QWORD *)a2 + 1);
          v28 = *((_QWORD *)a2 + 2);
          v29 = *(_QWORD *)a2;
          if (v27 <= 0xFFFFFFFFFFFFFFF5 && v27 + 10 <= v28)
          {
            v30 = 0;
            v31 = 0;
            v32 = 0;
            do
            {
              v33 = v27 + 1;
              *((_QWORD *)a2 + 1) = v27 + 1;
              v34 = *(_BYTE *)(v29 + v27);
              v32 |= (unint64_t)(v34 & 0x7F) << v30;
              if ((v34 & 0x80) == 0)
                goto LABEL_459;
              v30 += 7;
              v27 = v33;
              v20 = v31++ > 8;
            }
            while (!v20);
LABEL_271:
            v32 = 0;
            goto LABEL_459;
          }
          v246 = 0;
          v247 = 0;
          v32 = 0;
          if (v28 <= v27)
            v28 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v28 == v27)
            {
              v32 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v248 = v27 + 1;
              v249 = *(_BYTE *)(v29 + v27);
              *((_QWORD *)a2 + 1) = v248;
              v32 |= (unint64_t)(v249 & 0x7F) << v246;
              if (v249 < 0)
              {
                v246 += 7;
                v27 = v248;
                v20 = v247++ > 8;
                if (v20)
                  goto LABEL_271;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v32 = 0;
            }
            break;
          }
LABEL_459:
          *((_QWORD *)this + 12) = v32;
          goto LABEL_544;
        case 2u:
          *((_DWORD *)this + 53) |= 0x80000000;
          v35 = *((_QWORD *)a2 + 1);
          if (v35 >= *((_QWORD *)a2 + 2))
          {
            v38 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v36 = v35 + 1;
            v37 = *(unsigned __int8 *)(*(_QWORD *)a2 + v35);
            *((_QWORD *)a2 + 1) = v36;
            v38 = v37 != 0;
          }
          *((_BYTE *)this + 211) = v38;
          goto LABEL_544;
        case 3u:
          *((_DWORD *)this + 53) |= 1u;
          v39 = *((_QWORD *)a2 + 1);
          if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_540;
          *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v39);
          goto LABEL_523;
        case 4u:
          if (v26 == 2)
          {
            if ((PB::Reader::placeMark(a2, v359) & 1) != 0)
              return 0;
            v40 = *((_QWORD *)a2 + 1);
            v41 = *((_QWORD *)a2 + 2);
            while (v40 < v41 && !*((_BYTE *)a2 + 24))
            {
              v43 = (char *)*((_QWORD *)this + 2);
              v42 = *((_QWORD *)this + 3);
              if ((unint64_t)v43 >= v42)
              {
                v45 = (char *)*v12;
                v46 = (v43 - (_BYTE *)*v12) >> 3;
                v47 = v46 + 1;
                if ((unint64_t)(v46 + 1) >> 61)
                  goto LABEL_554;
                v48 = v42 - (_QWORD)v45;
                if (v48 >> 2 > v47)
                  v47 = v48 >> 2;
                if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
                  v49 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v49 = v47;
                if (v49)
                {
                  v50 = (char *)sub_10000D60C((uint64_t)v13, v49);
                  v45 = (char *)*((_QWORD *)this + 1);
                  v43 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v50 = 0;
                }
                v51 = &v50[8 * v46];
                *(_QWORD *)v51 = 0;
                v44 = v51 + 8;
                while (v43 != v45)
                {
                  v52 = *((_QWORD *)v43 - 1);
                  v43 -= 8;
                  *((_QWORD *)v51 - 1) = v52;
                  v51 -= 8;
                }
                *((_QWORD *)this + 1) = v51;
                *((_QWORD *)this + 2) = v44;
                *((_QWORD *)this + 3) = &v50[8 * v49];
                if (v45)
                  operator delete(v45);
              }
              else
              {
                *(_QWORD *)v43 = 0;
                v44 = v43 + 8;
              }
              *((_QWORD *)this + 2) = v44;
              v53 = *((_QWORD *)a2 + 1);
              if (v53 > 0xFFFFFFFFFFFFFFF7 || v53 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_412;
              *(v44 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v53);
              v41 = *((_QWORD *)a2 + 2);
              v40 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v40;
            }
            goto LABEL_413;
          }
          v251 = (char *)*((_QWORD *)this + 2);
          v250 = *((_QWORD *)this + 3);
          if ((unint64_t)v251 >= v250)
          {
            v330 = (char *)*v12;
            v331 = (v251 - (_BYTE *)*v12) >> 3;
            v332 = v331 + 1;
            if ((unint64_t)(v331 + 1) >> 61)
LABEL_554:
              sub_10000D5F8();
            v333 = v250 - (_QWORD)v330;
            if (v333 >> 2 > v332)
              v332 = v333 >> 2;
            if ((unint64_t)v333 >= 0x7FFFFFFFFFFFFFF8)
              v334 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v334 = v332;
            if (v334)
            {
              v335 = (char *)sub_10000D60C((uint64_t)v13, v334);
              v330 = (char *)*((_QWORD *)this + 1);
              v251 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v335 = 0;
            }
            v348 = &v335[8 * v331];
            *(_QWORD *)v348 = 0;
            v252 = v348 + 8;
            while (v251 != v330)
            {
              v349 = *((_QWORD *)v251 - 1);
              v251 -= 8;
              *((_QWORD *)v348 - 1) = v349;
              v348 -= 8;
            }
            *((_QWORD *)this + 1) = v348;
            *((_QWORD *)this + 2) = v252;
            *((_QWORD *)this + 3) = &v335[8 * v334];
            if (v330)
              operator delete(v330);
          }
          else
          {
            *(_QWORD *)v251 = 0;
            v252 = v251 + 8;
          }
          *((_QWORD *)this + 2) = v252;
          v350 = *((_QWORD *)a2 + 1);
          if (v350 <= 0xFFFFFFFFFFFFFFF7 && v350 + 8 <= *((_QWORD *)a2 + 2))
          {
            *(v252 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v350);
LABEL_523:
            v351 = *((_QWORD *)a2 + 1) + 8;
            goto LABEL_543;
          }
          goto LABEL_540;
        case 5u:
          if (v26 != 2)
          {
            v254 = (char *)*((_QWORD *)this + 8);
            v253 = *((_QWORD *)this + 9);
            if ((unint64_t)v254 >= v253)
            {
              v336 = (char *)*v10;
              v337 = (v254 - (_BYTE *)*v10) >> 2;
              v338 = v337 + 1;
              if ((unint64_t)(v337 + 1) >> 62)
LABEL_555:
                sub_10000D5F8();
              v339 = v253 - (_QWORD)v336;
              if (v339 >> 1 > v338)
                v338 = v339 >> 1;
              if ((unint64_t)v339 >= 0x7FFFFFFFFFFFFFFCLL)
                v340 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v340 = v338;
              if (v340)
              {
                v341 = (char *)sub_100020E2C((uint64_t)v11, v340);
                v336 = (char *)*((_QWORD *)this + 7);
                v254 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v341 = 0;
              }
              v352 = &v341[4 * v337];
              *(_DWORD *)v352 = 0;
              v255 = v352 + 4;
              while (v254 != v336)
              {
                v353 = *((_DWORD *)v254 - 1);
                v254 -= 4;
                *((_DWORD *)v352 - 1) = v353;
                v352 -= 4;
              }
              *((_QWORD *)this + 7) = v352;
              *((_QWORD *)this + 8) = v255;
              *((_QWORD *)this + 9) = &v341[4 * v340];
              if (v336)
                operator delete(v336);
            }
            else
            {
              *(_DWORD *)v254 = 0;
              v255 = v254 + 4;
            }
            *((_QWORD *)this + 8) = v255;
            goto LABEL_538;
          }
          if ((PB::Reader::placeMark(a2, v359) & 1) != 0)
            return 0;
          v54 = *((_QWORD *)a2 + 1);
          v55 = *((_QWORD *)a2 + 2);
          while (v54 < v55 && !*((_BYTE *)a2 + 24))
          {
            v57 = (char *)*((_QWORD *)this + 8);
            v56 = *((_QWORD *)this + 9);
            if ((unint64_t)v57 >= v56)
            {
              v59 = (char *)*v10;
              v60 = (v57 - (_BYTE *)*v10) >> 2;
              v61 = v60 + 1;
              if ((unint64_t)(v60 + 1) >> 62)
                goto LABEL_555;
              v62 = v56 - (_QWORD)v59;
              if (v62 >> 1 > v61)
                v61 = v62 >> 1;
              if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL)
                v63 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v63 = v61;
              if (v63)
              {
                v64 = (char *)sub_100020E2C((uint64_t)v11, v63);
                v59 = (char *)*((_QWORD *)this + 7);
                v57 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v64 = 0;
              }
              v65 = &v64[4 * v60];
              *(_DWORD *)v65 = 0;
              v58 = v65 + 4;
              while (v57 != v59)
              {
                v66 = *((_DWORD *)v57 - 1);
                v57 -= 4;
                *((_DWORD *)v65 - 1) = v66;
                v65 -= 4;
              }
              *((_QWORD *)this + 7) = v65;
              *((_QWORD *)this + 8) = v58;
              *((_QWORD *)this + 9) = &v64[4 * v63];
              if (v59)
                operator delete(v59);
            }
            else
            {
              *(_DWORD *)v57 = 0;
              v58 = v57 + 4;
            }
            *((_QWORD *)this + 8) = v58;
            v67 = *((_QWORD *)a2 + 1);
            if (v67 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_412;
            *(v58 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v67);
            v55 = *((_QWORD *)a2 + 2);
            v54 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v54;
          }
          goto LABEL_413;
        case 6u:
          if (v26 == 2)
          {
            if ((PB::Reader::placeMark(a2, v359) & 1) != 0)
              return 0;
            v68 = *((_QWORD *)a2 + 1);
            v69 = *((_QWORD *)a2 + 2);
            while (v68 < v69 && !*((_BYTE *)a2 + 24))
            {
              v71 = (char *)*((_QWORD *)this + 5);
              v70 = *((_QWORD *)this + 6);
              if ((unint64_t)v71 >= v70)
              {
                v73 = (char *)*v8;
                v74 = (v71 - (_BYTE *)*v8) >> 2;
                v75 = v74 + 1;
                if ((unint64_t)(v74 + 1) >> 62)
                  goto LABEL_556;
                v76 = v70 - (_QWORD)v73;
                if (v76 >> 1 > v75)
                  v75 = v76 >> 1;
                if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL)
                  v77 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v77 = v75;
                if (v77)
                {
                  v78 = (char *)sub_100020E2C((uint64_t)v9, v77);
                  v73 = (char *)*((_QWORD *)this + 4);
                  v71 = (char *)*((_QWORD *)this + 5);
                }
                else
                {
                  v78 = 0;
                }
                v79 = &v78[4 * v74];
                *(_DWORD *)v79 = 0;
                v72 = v79 + 4;
                while (v71 != v73)
                {
                  v80 = *((_DWORD *)v71 - 1);
                  v71 -= 4;
                  *((_DWORD *)v79 - 1) = v80;
                  v79 -= 4;
                }
                *((_QWORD *)this + 4) = v79;
                *((_QWORD *)this + 5) = v72;
                *((_QWORD *)this + 6) = &v78[4 * v77];
                if (v73)
                  operator delete(v73);
              }
              else
              {
                *(_DWORD *)v71 = 0;
                v72 = v71 + 4;
              }
              *((_QWORD *)this + 5) = v72;
              v81 = *((_QWORD *)a2 + 1);
              if (v81 > 0xFFFFFFFFFFFFFFFBLL || v81 + 4 > *((_QWORD *)a2 + 2))
              {
LABEL_412:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v72 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v81);
              v69 = *((_QWORD *)a2 + 2);
              v68 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v68;
            }
LABEL_413:
            PB::Reader::recallMark(a2, v359);
          }
          else
          {
            v257 = (char *)*((_QWORD *)this + 5);
            v256 = *((_QWORD *)this + 6);
            if ((unint64_t)v257 >= v256)
            {
              v342 = (char *)*v8;
              v343 = (v257 - (_BYTE *)*v8) >> 2;
              v344 = v343 + 1;
              if ((unint64_t)(v343 + 1) >> 62)
LABEL_556:
                sub_10000D5F8();
              v345 = v256 - (_QWORD)v342;
              if (v345 >> 1 > v344)
                v344 = v345 >> 1;
              if ((unint64_t)v345 >= 0x7FFFFFFFFFFFFFFCLL)
                v346 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v346 = v344;
              if (v346)
              {
                v347 = (char *)sub_100020E2C((uint64_t)v9, v346);
                v342 = (char *)*((_QWORD *)this + 4);
                v257 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v347 = 0;
              }
              v354 = &v347[4 * v343];
              *(_DWORD *)v354 = 0;
              v255 = v354 + 4;
              while (v257 != v342)
              {
                v355 = *((_DWORD *)v257 - 1);
                v257 -= 4;
                *((_DWORD *)v354 - 1) = v355;
                v354 -= 4;
              }
              *((_QWORD *)this + 4) = v354;
              *((_QWORD *)this + 5) = v255;
              *((_QWORD *)this + 6) = &v347[4 * v346];
              if (v342)
                operator delete(v342);
            }
            else
            {
              *(_DWORD *)v257 = 0;
              v255 = v257 + 4;
            }
            *((_QWORD *)this + 5) = v255;
LABEL_538:
            v356 = *((_QWORD *)a2 + 1);
            if (v356 <= 0xFFFFFFFFFFFFFFFBLL && v356 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v255 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v356);
LABEL_542:
              v351 = *((_QWORD *)a2 + 1) + 4;
LABEL_543:
              *((_QWORD *)a2 + 1) = v351;
            }
            else
            {
LABEL_540:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_544:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 7u:
          *((_DWORD *)this + 53) |= 0x10000000u;
          v82 = *((_QWORD *)a2 + 1);
          if (v82 >= *((_QWORD *)a2 + 2))
          {
            v85 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v83 = v82 + 1;
            v84 = *(unsigned __int8 *)(*(_QWORD *)a2 + v82);
            *((_QWORD *)a2 + 1) = v83;
            v85 = v84 != 0;
          }
          *((_BYTE *)this + 208) = v85;
          goto LABEL_544;
        case 8u:
          *((_DWORD *)this + 53) |= 0x20000000u;
          v86 = *((_QWORD *)a2 + 1);
          if (v86 >= *((_QWORD *)a2 + 2))
          {
            v89 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v87 = v86 + 1;
            v88 = *(unsigned __int8 *)(*(_QWORD *)a2 + v86);
            *((_QWORD *)a2 + 1) = v87;
            v89 = v88 != 0;
          }
          *((_BYTE *)this + 209) = v89;
          goto LABEL_544;
        case 9u:
          *((_DWORD *)this + 53) |= 0x400000u;
          v90 = *((_QWORD *)a2 + 1);
          v91 = *((_QWORD *)a2 + 2);
          v92 = *(_QWORD *)a2;
          if (v90 <= 0xFFFFFFFFFFFFFFF5 && v90 + 10 <= v91)
          {
            v93 = 0;
            v94 = 0;
            v95 = 0;
            do
            {
              v96 = v90 + 1;
              *((_QWORD *)a2 + 1) = v90 + 1;
              v97 = *(_BYTE *)(v92 + v90);
              v95 |= (unint64_t)(v97 & 0x7F) << v93;
              if ((v97 & 0x80) == 0)
                goto LABEL_462;
              v93 += 7;
              v90 = v96;
              v20 = v94++ > 8;
            }
            while (!v20);
LABEL_290:
            LODWORD(v95) = 0;
            goto LABEL_462;
          }
          v258 = 0;
          v259 = 0;
          v95 = 0;
          if (v91 <= v90)
            v91 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v91 == v90)
            {
              LODWORD(v95) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v260 = v90 + 1;
              v261 = *(_BYTE *)(v92 + v90);
              *((_QWORD *)a2 + 1) = v260;
              v95 |= (unint64_t)(v261 & 0x7F) << v258;
              if (v261 < 0)
              {
                v258 += 7;
                v90 = v260;
                v20 = v259++ > 8;
                if (v20)
                  goto LABEL_290;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v95) = 0;
            }
            break;
          }
LABEL_462:
          *((_DWORD *)this + 46) = v95;
          goto LABEL_544;
        case 0xAu:
          *((_DWORD *)this + 53) |= 0x10u;
          v98 = *((_QWORD *)a2 + 1);
          if (v98 > 0xFFFFFFFFFFFFFFFBLL || v98 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_540;
          *((_DWORD *)this + 28) = *(_DWORD *)(*(_QWORD *)a2 + v98);
          goto LABEL_542;
        case 0xBu:
          *((_DWORD *)this + 53) |= 0x80000u;
          v99 = *((_QWORD *)a2 + 1);
          v100 = *((_QWORD *)a2 + 2);
          v101 = *(_QWORD *)a2;
          if (v99 <= 0xFFFFFFFFFFFFFFF5 && v99 + 10 <= v100)
          {
            v102 = 0;
            v103 = 0;
            v104 = 0;
            do
            {
              v105 = v99 + 1;
              *((_QWORD *)a2 + 1) = v99 + 1;
              v106 = *(_BYTE *)(v101 + v99);
              v104 |= (unint64_t)(v106 & 0x7F) << v102;
              if ((v106 & 0x80) == 0)
                goto LABEL_465;
              v102 += 7;
              v99 = v105;
              v20 = v103++ > 8;
            }
            while (!v20);
LABEL_297:
            LODWORD(v104) = 0;
            goto LABEL_465;
          }
          v262 = 0;
          v263 = 0;
          v104 = 0;
          if (v100 <= v99)
            v100 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v100 == v99)
            {
              LODWORD(v104) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v264 = v99 + 1;
              v265 = *(_BYTE *)(v101 + v99);
              *((_QWORD *)a2 + 1) = v264;
              v104 |= (unint64_t)(v265 & 0x7F) << v262;
              if (v265 < 0)
              {
                v262 += 7;
                v99 = v264;
                v20 = v263++ > 8;
                if (v20)
                  goto LABEL_297;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v104) = 0;
            }
            break;
          }
LABEL_465:
          *((_DWORD *)this + 43) = v104;
          goto LABEL_544;
        case 0xCu:
          *((_DWORD *)this + 53) |= 0x40000u;
          v107 = *((_QWORD *)a2 + 1);
          v108 = *((_QWORD *)a2 + 2);
          v109 = *(_QWORD *)a2;
          if (v107 <= 0xFFFFFFFFFFFFFFF5 && v107 + 10 <= v108)
          {
            v110 = 0;
            v111 = 0;
            v112 = 0;
            do
            {
              v113 = v107 + 1;
              *((_QWORD *)a2 + 1) = v107 + 1;
              v114 = *(_BYTE *)(v109 + v107);
              v112 |= (unint64_t)(v114 & 0x7F) << v110;
              if ((v114 & 0x80) == 0)
                goto LABEL_468;
              v110 += 7;
              v107 = v113;
              v20 = v111++ > 8;
            }
            while (!v20);
LABEL_304:
            LODWORD(v112) = 0;
            goto LABEL_468;
          }
          v266 = 0;
          v267 = 0;
          v112 = 0;
          if (v108 <= v107)
            v108 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v108 == v107)
            {
              LODWORD(v112) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v268 = v107 + 1;
              v269 = *(_BYTE *)(v109 + v107);
              *((_QWORD *)a2 + 1) = v268;
              v112 |= (unint64_t)(v269 & 0x7F) << v266;
              if (v269 < 0)
              {
                v266 += 7;
                v107 = v268;
                v20 = v267++ > 8;
                if (v20)
                  goto LABEL_304;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v112) = 0;
            }
            break;
          }
LABEL_468:
          *((_DWORD *)this + 42) = v112;
          goto LABEL_544;
        case 0xDu:
          *((_DWORD *)this + 53) |= 0x20000u;
          v115 = *((_QWORD *)a2 + 1);
          v116 = *((_QWORD *)a2 + 2);
          v117 = *(_QWORD *)a2;
          if (v115 <= 0xFFFFFFFFFFFFFFF5 && v115 + 10 <= v116)
          {
            v118 = 0;
            v119 = 0;
            v120 = 0;
            do
            {
              v121 = v115 + 1;
              *((_QWORD *)a2 + 1) = v115 + 1;
              v122 = *(_BYTE *)(v117 + v115);
              v120 |= (unint64_t)(v122 & 0x7F) << v118;
              if ((v122 & 0x80) == 0)
                goto LABEL_471;
              v118 += 7;
              v115 = v121;
              v20 = v119++ > 8;
            }
            while (!v20);
LABEL_311:
            LODWORD(v120) = 0;
            goto LABEL_471;
          }
          v270 = 0;
          v271 = 0;
          v120 = 0;
          if (v116 <= v115)
            v116 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v116 == v115)
            {
              LODWORD(v120) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v272 = v115 + 1;
              v273 = *(_BYTE *)(v117 + v115);
              *((_QWORD *)a2 + 1) = v272;
              v120 |= (unint64_t)(v273 & 0x7F) << v270;
              if (v273 < 0)
              {
                v270 += 7;
                v115 = v272;
                v20 = v271++ > 8;
                if (v20)
                  goto LABEL_311;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v120) = 0;
            }
            break;
          }
LABEL_471:
          *((_DWORD *)this + 41) = v120;
          goto LABEL_544;
        case 0xEu:
          *((_DWORD *)this + 53) |= 0x10000u;
          v123 = *((_QWORD *)a2 + 1);
          v124 = *((_QWORD *)a2 + 2);
          v125 = *(_QWORD *)a2;
          if (v123 <= 0xFFFFFFFFFFFFFFF5 && v123 + 10 <= v124)
          {
            v126 = 0;
            v127 = 0;
            v128 = 0;
            do
            {
              v129 = v123 + 1;
              *((_QWORD *)a2 + 1) = v123 + 1;
              v130 = *(_BYTE *)(v125 + v123);
              v128 |= (unint64_t)(v130 & 0x7F) << v126;
              if ((v130 & 0x80) == 0)
                goto LABEL_474;
              v126 += 7;
              v123 = v129;
              v20 = v127++ > 8;
            }
            while (!v20);
LABEL_318:
            LODWORD(v128) = 0;
            goto LABEL_474;
          }
          v274 = 0;
          v275 = 0;
          v128 = 0;
          if (v124 <= v123)
            v124 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v124 == v123)
            {
              LODWORD(v128) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v276 = v123 + 1;
              v277 = *(_BYTE *)(v125 + v123);
              *((_QWORD *)a2 + 1) = v276;
              v128 |= (unint64_t)(v277 & 0x7F) << v274;
              if (v277 < 0)
              {
                v274 += 7;
                v123 = v276;
                v20 = v275++ > 8;
                if (v20)
                  goto LABEL_318;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v128) = 0;
            }
            break;
          }
LABEL_474:
          *((_DWORD *)this + 40) = v128;
          goto LABEL_544;
        case 0xFu:
          *((_DWORD *)this + 53) |= 0x8000u;
          v131 = *((_QWORD *)a2 + 1);
          v132 = *((_QWORD *)a2 + 2);
          v133 = *(_QWORD *)a2;
          if (v131 <= 0xFFFFFFFFFFFFFFF5 && v131 + 10 <= v132)
          {
            v134 = 0;
            v135 = 0;
            v136 = 0;
            do
            {
              v137 = v131 + 1;
              *((_QWORD *)a2 + 1) = v131 + 1;
              v138 = *(_BYTE *)(v133 + v131);
              v136 |= (unint64_t)(v138 & 0x7F) << v134;
              if ((v138 & 0x80) == 0)
                goto LABEL_477;
              v134 += 7;
              v131 = v137;
              v20 = v135++ > 8;
            }
            while (!v20);
LABEL_325:
            LODWORD(v136) = 0;
            goto LABEL_477;
          }
          v278 = 0;
          v279 = 0;
          v136 = 0;
          if (v132 <= v131)
            v132 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v132 == v131)
            {
              LODWORD(v136) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v280 = v131 + 1;
              v281 = *(_BYTE *)(v133 + v131);
              *((_QWORD *)a2 + 1) = v280;
              v136 |= (unint64_t)(v281 & 0x7F) << v278;
              if (v281 < 0)
              {
                v278 += 7;
                v131 = v280;
                v20 = v279++ > 8;
                if (v20)
                  goto LABEL_325;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v136) = 0;
            }
            break;
          }
LABEL_477:
          *((_DWORD *)this + 39) = v136;
          goto LABEL_544;
        case 0x10u:
          *((_DWORD *)this + 53) |= 0x4000u;
          v139 = *((_QWORD *)a2 + 1);
          v140 = *((_QWORD *)a2 + 2);
          v141 = *(_QWORD *)a2;
          if (v139 <= 0xFFFFFFFFFFFFFFF5 && v139 + 10 <= v140)
          {
            v142 = 0;
            v143 = 0;
            v144 = 0;
            do
            {
              v145 = v139 + 1;
              *((_QWORD *)a2 + 1) = v139 + 1;
              v146 = *(_BYTE *)(v141 + v139);
              v144 |= (unint64_t)(v146 & 0x7F) << v142;
              if ((v146 & 0x80) == 0)
                goto LABEL_480;
              v142 += 7;
              v139 = v145;
              v20 = v143++ > 8;
            }
            while (!v20);
LABEL_332:
            LODWORD(v144) = 0;
            goto LABEL_480;
          }
          v282 = 0;
          v283 = 0;
          v144 = 0;
          if (v140 <= v139)
            v140 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v140 == v139)
            {
              LODWORD(v144) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v284 = v139 + 1;
              v285 = *(_BYTE *)(v141 + v139);
              *((_QWORD *)a2 + 1) = v284;
              v144 |= (unint64_t)(v285 & 0x7F) << v282;
              if (v285 < 0)
              {
                v282 += 7;
                v139 = v284;
                v20 = v283++ > 8;
                if (v20)
                  goto LABEL_332;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v144) = 0;
            }
            break;
          }
LABEL_480:
          *((_DWORD *)this + 38) = v144;
          goto LABEL_544;
        case 0x11u:
          *((_DWORD *)this + 53) |= 0x2000u;
          v147 = *((_QWORD *)a2 + 1);
          v148 = *((_QWORD *)a2 + 2);
          v149 = *(_QWORD *)a2;
          if (v147 <= 0xFFFFFFFFFFFFFFF5 && v147 + 10 <= v148)
          {
            v150 = 0;
            v151 = 0;
            v152 = 0;
            do
            {
              v153 = v147 + 1;
              *((_QWORD *)a2 + 1) = v147 + 1;
              v154 = *(_BYTE *)(v149 + v147);
              v152 |= (unint64_t)(v154 & 0x7F) << v150;
              if ((v154 & 0x80) == 0)
                goto LABEL_483;
              v150 += 7;
              v147 = v153;
              v20 = v151++ > 8;
            }
            while (!v20);
LABEL_339:
            LODWORD(v152) = 0;
            goto LABEL_483;
          }
          v286 = 0;
          v287 = 0;
          v152 = 0;
          if (v148 <= v147)
            v148 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v148 == v147)
            {
              LODWORD(v152) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v288 = v147 + 1;
              v289 = *(_BYTE *)(v149 + v147);
              *((_QWORD *)a2 + 1) = v288;
              v152 |= (unint64_t)(v289 & 0x7F) << v286;
              if (v289 < 0)
              {
                v286 += 7;
                v147 = v288;
                v20 = v287++ > 8;
                if (v20)
                  goto LABEL_339;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v152) = 0;
            }
            break;
          }
LABEL_483:
          *((_DWORD *)this + 37) = v152;
          goto LABEL_544;
        case 0x12u:
          *((_DWORD *)this + 53) |= 0x100000u;
          v155 = *((_QWORD *)a2 + 1);
          v156 = *((_QWORD *)a2 + 2);
          v157 = *(_QWORD *)a2;
          if (v155 <= 0xFFFFFFFFFFFFFFF5 && v155 + 10 <= v156)
          {
            v158 = 0;
            v159 = 0;
            v160 = 0;
            do
            {
              v161 = v155 + 1;
              *((_QWORD *)a2 + 1) = v155 + 1;
              v162 = *(_BYTE *)(v157 + v155);
              v160 |= (unint64_t)(v162 & 0x7F) << v158;
              if ((v162 & 0x80) == 0)
                goto LABEL_486;
              v158 += 7;
              v155 = v161;
              v20 = v159++ > 8;
            }
            while (!v20);
LABEL_346:
            LODWORD(v160) = 0;
            goto LABEL_486;
          }
          v290 = 0;
          v291 = 0;
          v160 = 0;
          if (v156 <= v155)
            v156 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v156 == v155)
            {
              LODWORD(v160) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v292 = v155 + 1;
              v293 = *(_BYTE *)(v157 + v155);
              *((_QWORD *)a2 + 1) = v292;
              v160 |= (unint64_t)(v293 & 0x7F) << v290;
              if (v293 < 0)
              {
                v290 += 7;
                v155 = v292;
                v20 = v291++ > 8;
                if (v20)
                  goto LABEL_346;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v160) = 0;
            }
            break;
          }
LABEL_486:
          *((_DWORD *)this + 44) = v160;
          goto LABEL_544;
        case 0x13u:
          *((_DWORD *)this + 53) |= 0x100u;
          v163 = *((_QWORD *)a2 + 1);
          if (v163 > 0xFFFFFFFFFFFFFFFBLL || v163 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_540;
          *((_DWORD *)this + 32) = *(_DWORD *)(*(_QWORD *)a2 + v163);
          goto LABEL_542;
        case 0x14u:
          *((_DWORD *)this + 53) |= 0x1000000u;
          v164 = *((_QWORD *)a2 + 1);
          v165 = *((_QWORD *)a2 + 2);
          v166 = *(_QWORD *)a2;
          if (v164 <= 0xFFFFFFFFFFFFFFF5 && v164 + 10 <= v165)
          {
            v167 = 0;
            v168 = 0;
            v169 = 0;
            do
            {
              v170 = v164 + 1;
              *((_QWORD *)a2 + 1) = v164 + 1;
              v171 = *(_BYTE *)(v166 + v164);
              v169 |= (unint64_t)(v171 & 0x7F) << v167;
              if ((v171 & 0x80) == 0)
                goto LABEL_489;
              v167 += 7;
              v164 = v170;
              v20 = v168++ > 8;
            }
            while (!v20);
LABEL_353:
            LODWORD(v169) = 0;
            goto LABEL_489;
          }
          v294 = 0;
          v295 = 0;
          v169 = 0;
          if (v165 <= v164)
            v165 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v165 == v164)
            {
              LODWORD(v169) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v296 = v164 + 1;
              v297 = *(_BYTE *)(v166 + v164);
              *((_QWORD *)a2 + 1) = v296;
              v169 |= (unint64_t)(v297 & 0x7F) << v294;
              if (v297 < 0)
              {
                v294 += 7;
                v164 = v296;
                v20 = v295++ > 8;
                if (v20)
                  goto LABEL_353;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v169) = 0;
            }
            break;
          }
LABEL_489:
          *((_DWORD *)this + 48) = v169;
          goto LABEL_544;
        case 0x15u:
          *((_DWORD *)this + 53) |= 0x20u;
          v172 = *((_QWORD *)a2 + 1);
          v173 = *((_QWORD *)a2 + 2);
          v174 = *(_QWORD *)a2;
          if (v172 <= 0xFFFFFFFFFFFFFFF5 && v172 + 10 <= v173)
          {
            v175 = 0;
            v176 = 0;
            v177 = 0;
            do
            {
              v178 = v172 + 1;
              *((_QWORD *)a2 + 1) = v172 + 1;
              v179 = *(_BYTE *)(v174 + v172);
              v177 |= (unint64_t)(v179 & 0x7F) << v175;
              if ((v179 & 0x80) == 0)
                goto LABEL_492;
              v175 += 7;
              v172 = v178;
              v20 = v176++ > 8;
            }
            while (!v20);
LABEL_360:
            LODWORD(v177) = 0;
            goto LABEL_492;
          }
          v298 = 0;
          v299 = 0;
          v177 = 0;
          if (v173 <= v172)
            v173 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v173 == v172)
            {
              LODWORD(v177) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v300 = v172 + 1;
              v301 = *(_BYTE *)(v174 + v172);
              *((_QWORD *)a2 + 1) = v300;
              v177 |= (unint64_t)(v301 & 0x7F) << v298;
              if (v301 < 0)
              {
                v298 += 7;
                v172 = v300;
                v20 = v299++ > 8;
                if (v20)
                  goto LABEL_360;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v177) = 0;
            }
            break;
          }
LABEL_492:
          *((_DWORD *)this + 29) = v177;
          goto LABEL_544;
        case 0x16u:
          *((_DWORD *)this + 53) |= 8u;
          v180 = *((_QWORD *)a2 + 1);
          v181 = *((_QWORD *)a2 + 2);
          v182 = *(_QWORD *)a2;
          if (v180 <= 0xFFFFFFFFFFFFFFF5 && v180 + 10 <= v181)
          {
            v183 = 0;
            v184 = 0;
            v185 = 0;
            do
            {
              v186 = v180 + 1;
              *((_QWORD *)a2 + 1) = v180 + 1;
              v187 = *(_BYTE *)(v182 + v180);
              v185 |= (unint64_t)(v187 & 0x7F) << v183;
              if ((v187 & 0x80) == 0)
                goto LABEL_495;
              v183 += 7;
              v180 = v186;
              v20 = v184++ > 8;
            }
            while (!v20);
LABEL_367:
            v185 = 0;
            goto LABEL_495;
          }
          v302 = 0;
          v303 = 0;
          v185 = 0;
          if (v181 <= v180)
            v181 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v181 == v180)
            {
              v185 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v304 = v180 + 1;
              v305 = *(_BYTE *)(v182 + v180);
              *((_QWORD *)a2 + 1) = v304;
              v185 |= (unint64_t)(v305 & 0x7F) << v302;
              if (v305 < 0)
              {
                v302 += 7;
                v180 = v304;
                v20 = v303++ > 8;
                if (v20)
                  goto LABEL_367;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v185 = 0;
            }
            break;
          }
LABEL_495:
          *((_QWORD *)this + 13) = v185;
          goto LABEL_544;
        case 0x17u:
          *((_DWORD *)this + 53) |= 0x2000000u;
          v188 = *((_QWORD *)a2 + 1);
          if (v188 > 0xFFFFFFFFFFFFFFFBLL || v188 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_540;
          *((_DWORD *)this + 49) = *(_DWORD *)(*(_QWORD *)a2 + v188);
          goto LABEL_542;
        case 0x18u:
          *((_DWORD *)this + 53) |= 0x4000000u;
          v189 = *((_QWORD *)a2 + 1);
          if (v189 > 0xFFFFFFFFFFFFFFFBLL || v189 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_540;
          *((_DWORD *)this + 50) = *(_DWORD *)(*(_QWORD *)a2 + v189);
          goto LABEL_542;
        case 0x19u:
          *((_DWORD *)this + 53) |= 0x8000000u;
          v190 = *((_QWORD *)a2 + 1);
          if (v190 > 0xFFFFFFFFFFFFFFFBLL || v190 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_540;
          *((_DWORD *)this + 51) = *(_DWORD *)(*(_QWORD *)a2 + v190);
          goto LABEL_542;
        case 0x1Au:
          *((_DWORD *)this + 53) |= 0x800u;
          v191 = *((_QWORD *)a2 + 1);
          v192 = *((_QWORD *)a2 + 2);
          v193 = *(_QWORD *)a2;
          if (v191 <= 0xFFFFFFFFFFFFFFF5 && v191 + 10 <= v192)
          {
            v194 = 0;
            v195 = 0;
            v196 = 0;
            do
            {
              v197 = v191 + 1;
              *((_QWORD *)a2 + 1) = v191 + 1;
              v198 = *(_BYTE *)(v193 + v191);
              v196 |= (unint64_t)(v198 & 0x7F) << v194;
              if ((v198 & 0x80) == 0)
                goto LABEL_498;
              v194 += 7;
              v191 = v197;
              v20 = v195++ > 8;
            }
            while (!v20);
LABEL_374:
            LODWORD(v196) = 0;
            goto LABEL_498;
          }
          v306 = 0;
          v307 = 0;
          v196 = 0;
          if (v192 <= v191)
            v192 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v192 == v191)
            {
              LODWORD(v196) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v308 = v191 + 1;
              v309 = *(_BYTE *)(v193 + v191);
              *((_QWORD *)a2 + 1) = v308;
              v196 |= (unint64_t)(v309 & 0x7F) << v306;
              if (v309 < 0)
              {
                v306 += 7;
                v191 = v308;
                v20 = v307++ > 8;
                if (v20)
                  goto LABEL_374;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v196) = 0;
            }
            break;
          }
LABEL_498:
          *((_DWORD *)this + 35) = v196;
          goto LABEL_544;
        case 0x1Bu:
          *((_DWORD *)this + 53) |= 0x80u;
          v199 = *((_QWORD *)a2 + 1);
          v200 = *((_QWORD *)a2 + 2);
          v201 = *(_QWORD *)a2;
          if (v199 <= 0xFFFFFFFFFFFFFFF5 && v199 + 10 <= v200)
          {
            v202 = 0;
            v203 = 0;
            v204 = 0;
            do
            {
              v205 = v199 + 1;
              *((_QWORD *)a2 + 1) = v199 + 1;
              v206 = *(_BYTE *)(v201 + v199);
              v204 |= (unint64_t)(v206 & 0x7F) << v202;
              if ((v206 & 0x80) == 0)
                goto LABEL_501;
              v202 += 7;
              v199 = v205;
              v20 = v203++ > 8;
            }
            while (!v20);
LABEL_381:
            LODWORD(v204) = 0;
            goto LABEL_501;
          }
          v310 = 0;
          v311 = 0;
          v204 = 0;
          if (v200 <= v199)
            v200 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v200 == v199)
            {
              LODWORD(v204) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v312 = v199 + 1;
              v313 = *(_BYTE *)(v201 + v199);
              *((_QWORD *)a2 + 1) = v312;
              v204 |= (unint64_t)(v313 & 0x7F) << v310;
              if (v313 < 0)
              {
                v310 += 7;
                v199 = v312;
                v20 = v311++ > 8;
                if (v20)
                  goto LABEL_381;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v204) = 0;
            }
            break;
          }
LABEL_501:
          *((_DWORD *)this + 31) = v204;
          goto LABEL_544;
        case 0x1Cu:
          *((_DWORD *)this + 53) |= 2u;
          v207 = *((_QWORD *)a2 + 1);
          v208 = *((_QWORD *)a2 + 2);
          v209 = *(_QWORD *)a2;
          if (v207 <= 0xFFFFFFFFFFFFFFF5 && v207 + 10 <= v208)
          {
            v210 = 0;
            v211 = 0;
            v212 = 0;
            do
            {
              v213 = v207 + 1;
              *((_QWORD *)a2 + 1) = v207 + 1;
              v214 = *(_BYTE *)(v209 + v207);
              v212 |= (unint64_t)(v214 & 0x7F) << v210;
              if ((v214 & 0x80) == 0)
                goto LABEL_504;
              v210 += 7;
              v207 = v213;
              v20 = v211++ > 8;
            }
            while (!v20);
LABEL_388:
            v212 = 0;
            goto LABEL_504;
          }
          v314 = 0;
          v315 = 0;
          v212 = 0;
          if (v208 <= v207)
            v208 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v208 == v207)
            {
              v212 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v316 = v207 + 1;
              v317 = *(_BYTE *)(v209 + v207);
              *((_QWORD *)a2 + 1) = v316;
              v212 |= (unint64_t)(v317 & 0x7F) << v314;
              if (v317 < 0)
              {
                v314 += 7;
                v207 = v316;
                v20 = v315++ > 8;
                if (v20)
                  goto LABEL_388;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v212 = 0;
            }
            break;
          }
LABEL_504:
          *((_QWORD *)this + 11) = v212;
          goto LABEL_544;
        case 0x1Du:
          *((_DWORD *)this + 53) |= 0x40000000u;
          v215 = *((_QWORD *)a2 + 1);
          if (v215 >= *((_QWORD *)a2 + 2))
          {
            v218 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v216 = v215 + 1;
            v217 = *(unsigned __int8 *)(*(_QWORD *)a2 + v215);
            *((_QWORD *)a2 + 1) = v216;
            v218 = v217 != 0;
          }
          *((_BYTE *)this + 210) = v218;
          goto LABEL_544;
        case 0x1Eu:
          *((_DWORD *)this + 53) |= 0x1000u;
          v219 = *((_QWORD *)a2 + 1);
          if (v219 > 0xFFFFFFFFFFFFFFFBLL || v219 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_540;
          *((_DWORD *)this + 36) = *(_DWORD *)(*(_QWORD *)a2 + v219);
          goto LABEL_542;
        case 0x1Fu:
          *((_DWORD *)this + 53) |= 0x200u;
          v220 = *((_QWORD *)a2 + 1);
          if (v220 > 0xFFFFFFFFFFFFFFFBLL || v220 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_540;
          *((_DWORD *)this + 33) = *(_DWORD *)(*(_QWORD *)a2 + v220);
          goto LABEL_542;
        case 0x20u:
          *((_DWORD *)this + 53) |= 0x40u;
          v221 = *((_QWORD *)a2 + 1);
          if (v221 > 0xFFFFFFFFFFFFFFFBLL || v221 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_540;
          *((_DWORD *)this + 30) = *(_DWORD *)(*(_QWORD *)a2 + v221);
          goto LABEL_542;
        case 0x21u:
          *((_DWORD *)this + 53) |= 0x200000u;
          v222 = *((_QWORD *)a2 + 1);
          v223 = *((_QWORD *)a2 + 2);
          v224 = *(_QWORD *)a2;
          if (v222 <= 0xFFFFFFFFFFFFFFF5 && v222 + 10 <= v223)
          {
            v225 = 0;
            v226 = 0;
            v227 = 0;
            do
            {
              v228 = v222 + 1;
              *((_QWORD *)a2 + 1) = v222 + 1;
              v229 = *(_BYTE *)(v224 + v222);
              v227 |= (unint64_t)(v229 & 0x7F) << v225;
              if ((v229 & 0x80) == 0)
                goto LABEL_507;
              v225 += 7;
              v222 = v228;
              v20 = v226++ > 8;
            }
            while (!v20);
LABEL_397:
            LODWORD(v227) = 0;
            goto LABEL_507;
          }
          v318 = 0;
          v319 = 0;
          v227 = 0;
          if (v223 <= v222)
            v223 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v223 == v222)
            {
              LODWORD(v227) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v320 = v222 + 1;
              v321 = *(_BYTE *)(v224 + v222);
              *((_QWORD *)a2 + 1) = v320;
              v227 |= (unint64_t)(v321 & 0x7F) << v318;
              if (v321 < 0)
              {
                v318 += 7;
                v222 = v320;
                v20 = v319++ > 8;
                if (v20)
                  goto LABEL_397;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v227) = 0;
            }
            break;
          }
LABEL_507:
          *((_DWORD *)this + 45) = v227;
          goto LABEL_544;
        case 0x22u:
          *((_DWORD *)this + 53) |= 0x400u;
          v230 = *((_QWORD *)a2 + 1);
          v231 = *((_QWORD *)a2 + 2);
          v232 = *(_QWORD *)a2;
          if (v230 <= 0xFFFFFFFFFFFFFFF5 && v230 + 10 <= v231)
          {
            v233 = 0;
            v234 = 0;
            v235 = 0;
            do
            {
              v236 = v230 + 1;
              *((_QWORD *)a2 + 1) = v230 + 1;
              v237 = *(_BYTE *)(v232 + v230);
              v235 |= (unint64_t)(v237 & 0x7F) << v233;
              if ((v237 & 0x80) == 0)
                goto LABEL_510;
              v233 += 7;
              v230 = v236;
              v20 = v234++ > 8;
            }
            while (!v20);
LABEL_404:
            LODWORD(v235) = 0;
            goto LABEL_510;
          }
          v322 = 0;
          v323 = 0;
          v235 = 0;
          if (v231 <= v230)
            v231 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v231 == v230)
            {
              LODWORD(v235) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v324 = v230 + 1;
              v325 = *(_BYTE *)(v232 + v230);
              *((_QWORD *)a2 + 1) = v324;
              v235 |= (unint64_t)(v325 & 0x7F) << v322;
              if (v325 < 0)
              {
                v322 += 7;
                v230 = v324;
                v20 = v323++ > 8;
                if (v20)
                  goto LABEL_404;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v235) = 0;
            }
            break;
          }
LABEL_510:
          *((_DWORD *)this + 34) = v235;
          goto LABEL_544;
        case 0x23u:
          *((_DWORD *)this + 53) |= 0x800000u;
          v238 = *((_QWORD *)a2 + 1);
          v239 = *((_QWORD *)a2 + 2);
          v240 = *(_QWORD *)a2;
          if (v238 <= 0xFFFFFFFFFFFFFFF5 && v238 + 10 <= v239)
          {
            v241 = 0;
            v242 = 0;
            v243 = 0;
            do
            {
              v244 = v238 + 1;
              *((_QWORD *)a2 + 1) = v238 + 1;
              v245 = *(_BYTE *)(v240 + v238);
              v243 |= (unint64_t)(v245 & 0x7F) << v241;
              if ((v245 & 0x80) == 0)
                goto LABEL_513;
              v241 += 7;
              v238 = v244;
              v20 = v242++ > 8;
            }
            while (!v20);
LABEL_411:
            LODWORD(v243) = 0;
            goto LABEL_513;
          }
          v326 = 0;
          v327 = 0;
          v243 = 0;
          if (v239 <= v238)
            v239 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v239 == v238)
            {
              LODWORD(v243) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v328 = v238 + 1;
              v329 = *(_BYTE *)(v240 + v238);
              *((_QWORD *)a2 + 1) = v328;
              v243 |= (unint64_t)(v329 & 0x7F) << v326;
              if (v329 < 0)
              {
                v326 += 7;
                v238 = v328;
                v20 = v327++ > 8;
                if (v20)
                  goto LABEL_411;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v243) = 0;
            }
            break;
          }
LABEL_513:
          *((_DWORD *)this + 47) = v243;
          goto LABEL_544;
        default:
          if ((PB::Reader::skip(a2, v17 >> 3, v26, 0) & 1) == 0)
            return 0;
          goto LABEL_544;
      }
    }
    v21 = 0;
    v22 = 0;
    v17 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v23 = v2 + 1;
      v24 = *(_BYTE *)(v14 + v2);
      *((_QWORD *)a2 + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0)
        goto LABEL_21;
      v21 += 7;
      v2 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        v17 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaTrigger::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;
  double *v5;
  double *v6;
  double v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  int v14;

  v3 = this;
  v4 = *(_DWORD *)(this + 212);
  if ((v4 & 4) == 0)
  {
    if ((v4 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_45:
    this = PB::Writer::write(a2, *(_BYTE *)(v3 + 211), 2u);
    if ((*(_DWORD *)(v3 + 212) & 1) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 96), 1u);
  v4 = *(_DWORD *)(v3 + 212);
  if (v4 < 0)
    goto LABEL_45;
LABEL_3:
  if ((v4 & 1) != 0)
LABEL_4:
    this = PB::Writer::write(a2, *(double *)(v3 + 80), 3u);
LABEL_5:
  v5 = *(double **)(v3 + 8);
  v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7, 4u);
  }
  v8 = *(float **)(v3 + 56);
  v9 = *(float **)(v3 + 64);
  while (v8 != v9)
  {
    v10 = *v8++;
    this = PB::Writer::write(a2, v10, 5u);
  }
  v11 = *(float **)(v3 + 32);
  v12 = *(float **)(v3 + 40);
  while (v11 != v12)
  {
    v13 = *v11++;
    this = PB::Writer::write(a2, v13, 6u);
  }
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x10000000) != 0)
  {
    this = PB::Writer::write(a2, *(_BYTE *)(v3 + 208), 7u);
    v14 = *(_DWORD *)(v3 + 212);
    if ((v14 & 0x20000000) == 0)
    {
LABEL_16:
      if ((v14 & 0x400000) == 0)
        goto LABEL_17;
      goto LABEL_49;
    }
  }
  else if ((v14 & 0x20000000) == 0)
  {
    goto LABEL_16;
  }
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 209), 8u);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x400000) == 0)
  {
LABEL_17:
    if ((v14 & 0x10) == 0)
      goto LABEL_18;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 184), 9u);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x10) == 0)
  {
LABEL_18:
    if ((v14 & 0x80000) == 0)
      goto LABEL_19;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 112), 0xAu);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x80000) == 0)
  {
LABEL_19:
    if ((v14 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 172), 0xBu);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x40000) == 0)
  {
LABEL_20:
    if ((v14 & 0x20000) == 0)
      goto LABEL_21;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 168), 0xCu);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x20000) == 0)
  {
LABEL_21:
    if ((v14 & 0x10000) == 0)
      goto LABEL_22;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 164), 0xDu);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x10000) == 0)
  {
LABEL_22:
    if ((v14 & 0x8000) == 0)
      goto LABEL_23;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 160), 0xEu);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x8000) == 0)
  {
LABEL_23:
    if ((v14 & 0x4000) == 0)
      goto LABEL_24;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 156), 0xFu);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x4000) == 0)
  {
LABEL_24:
    if ((v14 & 0x2000) == 0)
      goto LABEL_25;
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 152), 0x10u);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x2000) == 0)
  {
LABEL_25:
    if ((v14 & 0x100000) == 0)
      goto LABEL_26;
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 148), 0x11u);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x100000) == 0)
  {
LABEL_26:
    if ((v14 & 0x100) == 0)
      goto LABEL_27;
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 176), 0x12u);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x100) == 0)
  {
LABEL_27:
    if ((v14 & 0x1000000) == 0)
      goto LABEL_28;
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(float *)(v3 + 128), 0x13u);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x1000000) == 0)
  {
LABEL_28:
    if ((v14 & 0x20) == 0)
      goto LABEL_29;
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 192), 0x14u);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x20) == 0)
  {
LABEL_29:
    if ((v14 & 8) == 0)
      goto LABEL_30;
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 116), 0x15u);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 8) == 0)
  {
LABEL_30:
    if ((v14 & 0x2000000) == 0)
      goto LABEL_31;
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 104), 0x16u);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x2000000) == 0)
  {
LABEL_31:
    if ((v14 & 0x4000000) == 0)
      goto LABEL_32;
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::write(a2, *(float *)(v3 + 196), 0x17u);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x4000000) == 0)
  {
LABEL_32:
    if ((v14 & 0x8000000) == 0)
      goto LABEL_33;
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::write(a2, *(float *)(v3 + 200), 0x18u);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x8000000) == 0)
  {
LABEL_33:
    if ((v14 & 0x800) == 0)
      goto LABEL_34;
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::write(a2, *(float *)(v3 + 204), 0x19u);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x800) == 0)
  {
LABEL_34:
    if ((v14 & 0x80) == 0)
      goto LABEL_35;
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 140), 0x1Au);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x80) == 0)
  {
LABEL_35:
    if ((v14 & 2) == 0)
      goto LABEL_36;
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 124), 0x1Bu);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 2) == 0)
  {
LABEL_36:
    if ((v14 & 0x40000000) == 0)
      goto LABEL_37;
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 88), 0x1Cu);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x40000000) == 0)
  {
LABEL_37:
    if ((v14 & 0x1000) == 0)
      goto LABEL_38;
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 210), 0x1Du);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x1000) == 0)
  {
LABEL_38:
    if ((v14 & 0x200) == 0)
      goto LABEL_39;
    goto LABEL_71;
  }
LABEL_70:
  this = PB::Writer::write(a2, *(float *)(v3 + 144), 0x1Eu);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x200) == 0)
  {
LABEL_39:
    if ((v14 & 0x40) == 0)
      goto LABEL_40;
    goto LABEL_72;
  }
LABEL_71:
  this = PB::Writer::write(a2, *(float *)(v3 + 132), 0x1Fu);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x40) == 0)
  {
LABEL_40:
    if ((v14 & 0x200000) == 0)
      goto LABEL_41;
    goto LABEL_73;
  }
LABEL_72:
  this = PB::Writer::write(a2, *(float *)(v3 + 120), 0x20u);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x200000) == 0)
  {
LABEL_41:
    if ((v14 & 0x400) == 0)
      goto LABEL_42;
    goto LABEL_74;
  }
LABEL_73:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 180), 0x21u);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x400) == 0)
  {
LABEL_42:
    if ((v14 & 0x800000) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 188), 0x23u);
  }
LABEL_74:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 136), 0x22u);
  if ((*(_DWORD *)(v3 + 212) & 0x800000) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 188), 0x23u);
  return this;
}

uint64_t CMMsl::KappaTrigger::hash_value(CMMsl::KappaTrigger *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  uint64_t v52;

  v2 = *((_DWORD *)this + 53);
  if ((v2 & 4) != 0)
  {
    v3 = *((_QWORD *)this + 12);
    if (v2 < 0)
      goto LABEL_3;
  }
  else
  {
    v3 = 0;
    if (v2 < 0)
    {
LABEL_3:
      v4 = *((unsigned __int8 *)this + 211);
      goto LABEL_6;
    }
  }
  v4 = 0;
LABEL_6:
  v52 = v4;
  if ((v2 & 1) != 0)
  {
    v5 = *((double *)this + 10);
    if (v5 == 0.0)
      v5 = 0.0;
    v50 = v5;
  }
  else
  {
    v50 = 0.0;
  }
  v6 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  v7 = PBHashBytes(*((_QWORD *)this + 7), *((_QWORD *)this + 8) - *((_QWORD *)this + 7));
  v8 = PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
  v9 = *((_DWORD *)this + 53);
  v51 = v8;
  if ((v9 & 0x10000000) != 0)
    v49 = *((unsigned __int8 *)this + 208);
  else
    v49 = 0;
  v10 = v3;
  if ((v9 & 0x20000000) != 0)
  {
    v48 = *((unsigned __int8 *)this + 209);
    if ((v9 & 0x400000) != 0)
    {
LABEL_16:
      v11 = *((unsigned int *)this + 46);
      if ((v9 & 0x10) != 0)
        goto LABEL_17;
LABEL_68:
      v47 = 0;
      if ((v9 & 0x80000) != 0)
        goto LABEL_20;
      goto LABEL_69;
    }
  }
  else
  {
    v48 = 0;
    if ((v9 & 0x400000) != 0)
      goto LABEL_16;
  }
  v11 = 0;
  if ((v9 & 0x10) == 0)
    goto LABEL_68;
LABEL_17:
  v12 = *((float *)this + 28);
  v13 = LODWORD(v12);
  if (v12 == 0.0)
    v13 = 0;
  v47 = v13;
  if ((v9 & 0x80000) != 0)
  {
LABEL_20:
    v46 = *((unsigned int *)this + 43);
    if ((v9 & 0x40000) != 0)
      goto LABEL_21;
    goto LABEL_70;
  }
LABEL_69:
  v46 = 0;
  if ((v9 & 0x40000) != 0)
  {
LABEL_21:
    v14 = *((unsigned int *)this + 42);
    if ((v9 & 0x20000) != 0)
      goto LABEL_22;
    goto LABEL_71;
  }
LABEL_70:
  v14 = 0;
  if ((v9 & 0x20000) != 0)
  {
LABEL_22:
    v15 = *((unsigned int *)this + 41);
    if ((v9 & 0x10000) != 0)
      goto LABEL_23;
    goto LABEL_72;
  }
LABEL_71:
  v15 = 0;
  if ((v9 & 0x10000) != 0)
  {
LABEL_23:
    v16 = *((unsigned int *)this + 40);
    if ((v9 & 0x8000) != 0)
      goto LABEL_24;
    goto LABEL_73;
  }
LABEL_72:
  v16 = 0;
  if ((v9 & 0x8000) != 0)
  {
LABEL_24:
    v17 = *((unsigned int *)this + 39);
    if ((v9 & 0x4000) != 0)
      goto LABEL_25;
    goto LABEL_74;
  }
LABEL_73:
  v17 = 0;
  if ((v9 & 0x4000) != 0)
  {
LABEL_25:
    v18 = *((unsigned int *)this + 38);
    if ((v9 & 0x2000) != 0)
      goto LABEL_26;
    goto LABEL_75;
  }
LABEL_74:
  v18 = 0;
  if ((v9 & 0x2000) != 0)
  {
LABEL_26:
    v19 = *((unsigned int *)this + 37);
    if ((v9 & 0x100000) != 0)
      goto LABEL_27;
    goto LABEL_76;
  }
LABEL_75:
  v19 = 0;
  if ((v9 & 0x100000) != 0)
  {
LABEL_27:
    v20 = *((unsigned int *)this + 44);
    if ((v9 & 0x100) != 0)
      goto LABEL_28;
LABEL_77:
    v22 = 0;
    if ((v9 & 0x1000000) != 0)
      goto LABEL_32;
    goto LABEL_78;
  }
LABEL_76:
  v20 = 0;
  if ((v9 & 0x100) == 0)
    goto LABEL_77;
LABEL_28:
  v21 = *((float *)this + 32);
  if (v21 == 0.0)
    v22 = 0;
  else
    v22 = LODWORD(v21);
  if ((v9 & 0x1000000) != 0)
  {
LABEL_32:
    v23 = *((unsigned int *)this + 48);
    if ((v9 & 0x20) != 0)
      goto LABEL_33;
    goto LABEL_79;
  }
LABEL_78:
  v23 = 0;
  if ((v9 & 0x20) != 0)
  {
LABEL_33:
    v24 = *((int *)this + 29);
    if ((v9 & 8) != 0)
      goto LABEL_34;
    goto LABEL_80;
  }
LABEL_79:
  v24 = 0;
  if ((v9 & 8) != 0)
  {
LABEL_34:
    v25 = *((_QWORD *)this + 13);
    if ((v9 & 0x2000000) != 0)
      goto LABEL_35;
LABEL_81:
    v27 = 0;
    if ((v9 & 0x4000000) != 0)
      goto LABEL_39;
LABEL_82:
    v29 = 0;
    if ((v9 & 0x8000000) != 0)
      goto LABEL_43;
LABEL_83:
    v31 = 0;
    if ((v9 & 0x800) != 0)
      goto LABEL_47;
    goto LABEL_84;
  }
LABEL_80:
  v25 = 0;
  if ((v9 & 0x2000000) == 0)
    goto LABEL_81;
LABEL_35:
  v26 = *((float *)this + 49);
  if (v26 == 0.0)
    v27 = 0;
  else
    v27 = LODWORD(v26);
  if ((v9 & 0x4000000) == 0)
    goto LABEL_82;
LABEL_39:
  v28 = *((float *)this + 50);
  if (v28 == 0.0)
    v29 = 0;
  else
    v29 = LODWORD(v28);
  if ((v9 & 0x8000000) == 0)
    goto LABEL_83;
LABEL_43:
  v30 = *((float *)this + 51);
  if (v30 == 0.0)
    v31 = 0;
  else
    v31 = LODWORD(v30);
  if ((v9 & 0x800) != 0)
  {
LABEL_47:
    v32 = *((unsigned int *)this + 35);
    if ((v9 & 0x80) != 0)
      goto LABEL_48;
    goto LABEL_85;
  }
LABEL_84:
  v32 = 0;
  if ((v9 & 0x80) != 0)
  {
LABEL_48:
    v33 = *((unsigned int *)this + 31);
    if ((v9 & 2) != 0)
      goto LABEL_49;
    goto LABEL_86;
  }
LABEL_85:
  v33 = 0;
  if ((v9 & 2) != 0)
  {
LABEL_49:
    v34 = *((_QWORD *)this + 11);
    if ((v9 & 0x40000000) != 0)
      goto LABEL_50;
    goto LABEL_87;
  }
LABEL_86:
  v34 = 0;
  if ((v9 & 0x40000000) != 0)
  {
LABEL_50:
    v35 = *((unsigned __int8 *)this + 210);
    if ((v9 & 0x1000) != 0)
      goto LABEL_51;
LABEL_88:
    v37 = 0;
    if ((v9 & 0x200) != 0)
      goto LABEL_55;
LABEL_89:
    v39 = 0;
    if ((v9 & 0x40) != 0)
      goto LABEL_59;
LABEL_90:
    v41 = 0;
    if ((v9 & 0x200000) != 0)
      goto LABEL_63;
    goto LABEL_91;
  }
LABEL_87:
  v35 = 0;
  if ((v9 & 0x1000) == 0)
    goto LABEL_88;
LABEL_51:
  v36 = *((float *)this + 36);
  if (v36 == 0.0)
    v37 = 0;
  else
    v37 = LODWORD(v36);
  if ((v9 & 0x200) == 0)
    goto LABEL_89;
LABEL_55:
  v38 = *((float *)this + 33);
  if (v38 == 0.0)
    v39 = 0;
  else
    v39 = LODWORD(v38);
  if ((v9 & 0x40) == 0)
    goto LABEL_90;
LABEL_59:
  v40 = *((float *)this + 30);
  if (v40 == 0.0)
    v41 = 0;
  else
    v41 = LODWORD(v40);
  if ((v9 & 0x200000) != 0)
  {
LABEL_63:
    v42 = *((unsigned int *)this + 45);
    if ((v9 & 0x400) != 0)
      goto LABEL_64;
LABEL_92:
    v43 = 0;
    if ((v9 & 0x800000) != 0)
      goto LABEL_65;
LABEL_93:
    v44 = 0;
    return v52 ^ v10 ^ *(_QWORD *)&v50 ^ v6 ^ v7 ^ v51 ^ v49 ^ v48 ^ v11 ^ v47 ^ v46 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v22 ^ v23 ^ v24 ^ v25 ^ v27 ^ v29 ^ v31 ^ v32 ^ v33 ^ v34 ^ v35 ^ v37 ^ v39 ^ v41 ^ v42 ^ v43 ^ v44;
  }
LABEL_91:
  v42 = 0;
  if ((v9 & 0x400) == 0)
    goto LABEL_92;
LABEL_64:
  v43 = *((unsigned int *)this + 34);
  if ((v9 & 0x800000) == 0)
    goto LABEL_93;
LABEL_65:
  v44 = *((unsigned int *)this + 47);
  return v52 ^ v10 ^ *(_QWORD *)&v50 ^ v6 ^ v7 ^ v51 ^ v49 ^ v48 ^ v11 ^ v47 ^ v46 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v22 ^ v23 ^ v24 ^ v25 ^ v27 ^ v29 ^ v31 ^ v32 ^ v33 ^ v34 ^ v35 ^ v37 ^ v39 ^ v41 ^ v42 ^ v43 ^ v44;
}

void CMMsl::KappaTriggerClustersResult::~KappaTriggerClustersResult(CMMsl::KappaTriggerClustersResult *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::KappaTriggerClustersResult::KappaTriggerClustersResult(uint64_t this, const CMMsl::KappaTriggerClustersResult *a2)
{
  __int16 v2;
  __int16 v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;

  *(_QWORD *)this = off_1003524E0;
  *(_DWORD *)(this + 96) = 0;
  v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x1000) != 0)
  {
    v4 = *((_DWORD *)a2 + 22);
    v3 = 4096;
    *(_WORD *)(this + 96) = 4096;
    *(_DWORD *)(this + 88) = v4;
    v2 = *((_WORD *)a2 + 48);
    if ((v2 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_WORD *)a2 + 48) & 0x800) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 21);
    v3 |= 0x800u;
    *(_WORD *)(this + 96) = v3;
    *(_DWORD *)(this + 84) = v5;
    v2 = *((_WORD *)a2 + 48);
  }
LABEL_6:
  if ((v2 & 0x100) != 0)
  {
    v6 = *((_DWORD *)a2 + 18);
    v3 |= 0x100u;
    *(_WORD *)(this + 96) = v3;
    *(_DWORD *)(this + 72) = v6;
    v2 = *((_WORD *)a2 + 48);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 0x8000) == 0)
        goto LABEL_9;
      goto LABEL_23;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 8);
  v3 |= 0x80u;
  *(_WORD *)(this + 96) = v3;
  *(_QWORD *)(this + 64) = v7;
  v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x8000) == 0)
  {
LABEL_9:
    if ((v2 & 0x4000) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  v8 = *((_BYTE *)a2 + 94);
  v3 |= 0x8000u;
  *(_WORD *)(this + 96) = v3;
  *(_BYTE *)(this + 94) = v8;
  v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x4000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  v9 = *((_BYTE *)a2 + 93);
  v3 |= 0x4000u;
  *(_WORD *)(this + 96) = v3;
  *(_BYTE *)(this + 93) = v9;
  v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 2) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  v10 = *((_BYTE *)a2 + 92);
  v3 |= 0x2000u;
  *(_WORD *)(this + 96) = v3;
  *(_BYTE *)(this + 92) = v10;
  v2 = *((_WORD *)a2 + 48);
  if ((v2 & 2) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  v11 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 96) = v3;
  *(_QWORD *)(this + 16) = v11;
  v2 = *((_WORD *)a2 + 48);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  v12 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 96) = v3;
  *(_QWORD *)(this + 32) = v12;
  v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_29;
  }
LABEL_28:
  v13 = *((_QWORD *)a2 + 5);
  v3 |= 0x10u;
  *(_WORD *)(this + 96) = v3;
  *(_QWORD *)(this + 40) = v13;
  v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 0x40) == 0)
      goto LABEL_16;
    goto LABEL_30;
  }
LABEL_29:
  v14 = *((_QWORD *)a2 + 6);
  v3 |= 0x20u;
  *(_WORD *)(this + 96) = v3;
  *(_QWORD *)(this + 48) = v14;
  v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x40) == 0)
  {
LABEL_16:
    if ((v2 & 1) == 0)
      goto LABEL_17;
    goto LABEL_31;
  }
LABEL_30:
  v15 = *((_QWORD *)a2 + 7);
  v3 |= 0x40u;
  *(_WORD *)(this + 96) = v3;
  *(_QWORD *)(this + 56) = v15;
  v2 = *((_WORD *)a2 + 48);
  if ((v2 & 1) == 0)
  {
LABEL_17:
    if ((v2 & 0x400) == 0)
      goto LABEL_18;
    goto LABEL_32;
  }
LABEL_31:
  v16 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 96) = v3;
  *(_QWORD *)(this + 8) = v16;
  v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x400) == 0)
  {
LABEL_18:
    if ((v2 & 0x200) == 0)
      goto LABEL_19;
    goto LABEL_33;
  }
LABEL_32:
  v17 = *((_DWORD *)a2 + 20);
  v3 |= 0x400u;
  *(_WORD *)(this + 96) = v3;
  *(_DWORD *)(this + 80) = v17;
  v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x200) == 0)
  {
LABEL_19:
    if ((v2 & 4) == 0)
      return this;
LABEL_34:
    v19 = *((_QWORD *)a2 + 3);
    *(_WORD *)(this + 96) = v3 | 4;
    *(_QWORD *)(this + 24) = v19;
    return this;
  }
LABEL_33:
  v18 = *((_DWORD *)a2 + 19);
  v3 |= 0x200u;
  *(_WORD *)(this + 96) = v3;
  *(_DWORD *)(this + 76) = v18;
  if ((*((_WORD *)a2 + 48) & 4) != 0)
    goto LABEL_34;
  return this;
}

CMMsl *CMMsl::KappaTriggerClustersResult::operator=(CMMsl *a1, const CMMsl::KappaTriggerClustersResult *a2)
{
  CMMsl::KappaTriggerClustersResult *v3;
  _BYTE v5[104];

  if (a1 != a2)
  {
    CMMsl::KappaTriggerClustersResult::KappaTriggerClustersResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaTriggerClustersResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaTriggerClustersResult *a2, CMMsl::KappaTriggerClustersResult *a3)
{
  int v3;
  int v4;
  int v5;
  float result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v3;
  v4 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  v5 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v5;
  result = *((float *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((float *)a2 + 18) = result;
  v7 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 94);
  *((_BYTE *)this + 94) = *((_BYTE *)a2 + 94);
  *((_BYTE *)a2 + 94) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 93);
  *((_BYTE *)this + 93) = *((_BYTE *)a2 + 93);
  *((_BYTE *)a2 + 93) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 92);
  *((_BYTE *)this + 92) = *((_BYTE *)a2 + 92);
  *((_BYTE *)a2 + 92) = v7;
  v8 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v8;
  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v9;
  v10 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v10;
  v11 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v11;
  v12 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v12;
  v13 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v13;
  LODWORD(v13) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v13;
  LODWORD(v13) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v13;
  v14 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v14;
  return result;
}

float CMMsl::KappaTriggerClustersResult::KappaTriggerClustersResult(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_1003524E0;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a2 + 96) = 0;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  result = *(float *)(a2 + 72);
  *(float *)(a1 + 72) = result;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 94) = *(_BYTE *)(a2 + 94);
  *(_BYTE *)(a1 + 93) = *(_BYTE *)(a2 + 93);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return result;
}

CMMsl *CMMsl::KappaTriggerClustersResult::operator=(CMMsl *this, uint64_t a2, CMMsl::KappaTriggerClustersResult *a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  void (**v8)(CMMsl::KappaTriggerClustersResult *__hidden);
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  __int128 v14;
  __int16 v15;
  char v16;
  int v17;

  if (this != (CMMsl *)a2)
  {
    v8 = off_1003524E0;
    v17 = *(_DWORD *)(a2 + 96);
    *(_DWORD *)(a2 + 96) = 0;
    v13 = *(_DWORD *)(a2 + 72);
    v16 = *(_BYTE *)(a2 + 94);
    v15 = *(_WORD *)(a2 + 92);
    v4 = *(_OWORD *)(a2 + 56);
    v11 = *(_OWORD *)(a2 + 40);
    v12 = v4;
    v5 = *(_OWORD *)(a2 + 8);
    v14 = *(_OWORD *)(a2 + 76);
    v6 = *(_OWORD *)(a2 + 24);
    v9 = v5;
    v10 = v6;
    CMMsl::swap(this, (CMMsl::KappaTriggerClustersResult *)&v8, a3);
    PB::Base::~Base((PB::Base *)&v8);
  }
  return this;
}

uint64_t CMMsl::KappaTriggerClustersResult::formatText(CMMsl::KappaTriggerClustersResult *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 48);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "armedDuration", *((_QWORD *)this + 1));
    v5 = *((_WORD *)this + 48);
    if ((v5 & 0x100) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_21;
    }
  }
  else if ((*((_WORD *)this + 48) & 0x100) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "armedDurationThreshold", *((float *)this + 18));
  v5 = *((_WORD *)this + 48);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "armedDurationThresholdTimestamp", *((_QWORD *)this + 2));
  v5 = *((_WORD *)this + 48);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "btHint", *((_QWORD *)this + 3));
  v5 = *((_WORD *)this + 48);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "epochFirstTimestamp", *((_QWORD *)this + 4));
  v5 = *((_WORD *)this + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "epochLastTimestamp", *((_QWORD *)this + 5));
  v5 = *((_WORD *)this + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x2000) == 0)
      goto LABEL_9;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "firstTriggerTimestamp", *((_QWORD *)this + 6));
  v5 = *((_WORD *)this + 48);
  if ((v5 & 0x2000) == 0)
  {
LABEL_9:
    if ((v5 & 0x4000) == 0)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "isBTHintDetected", *((_BYTE *)this + 92));
  v5 = *((_WORD *)this + 48);
  if ((v5 & 0x4000) == 0)
  {
LABEL_10:
    if ((v5 & 0x8000) == 0)
      goto LABEL_11;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "isClusterInBeginningOfDrive", *((_BYTE *)this + 93));
  v5 = *((_WORD *)this + 48);
  if ((v5 & 0x8000) == 0)
  {
LABEL_11:
    if ((v5 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "isTriggerCluster", *((_BYTE *)this + 94));
  v5 = *((_WORD *)this + 48);
  if ((v5 & 0x40) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "lastTriggerTimestamp", *((_QWORD *)this + 7));
  v5 = *((_WORD *)this + 48);
  if ((v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "numTriggersInEpoch", *((_DWORD *)this + 19));
  v5 = *((_WORD *)this + 48);
  if ((v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v5 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "numTriggersInWindow", *((_DWORD *)this + 20));
  v5 = *((_WORD *)this + 48);
  if ((v5 & 0x800) == 0)
  {
LABEL_15:
    if ((v5 & 0x80) == 0)
      goto LABEL_16;
LABEL_33:
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 8));
    if ((*((_WORD *)this + 48) & 0x1000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_17;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "numTriggersThreshold", *((_DWORD *)this + 21));
  v5 = *((_WORD *)this + 48);
  if ((v5 & 0x80) != 0)
    goto LABEL_33;
LABEL_16:
  if ((v5 & 0x1000) != 0)
LABEL_17:
    PB::TextFormatter::format(a2, "windowDuration", *((_DWORD *)this + 22));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaTriggerClustersResult::readFrom(CMMsl::KappaTriggerClustersResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  int v35;
  BOOL v36;
  int v37;
  BOOL v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  uint64_t v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  char v74;
  unint64_t v75;
  uint64_t v76;
  char v77;
  unsigned int v78;
  uint64_t v79;
  char v80;
  unint64_t v81;
  uint64_t v82;
  char v83;
  unsigned int v84;
  uint64_t v85;
  char v86;
  unint64_t v87;
  uint64_t v88;
  char v89;
  unsigned int v90;
  uint64_t v91;
  char v92;
  unint64_t v93;
  uint64_t v94;
  char v95;
  unsigned int v96;
  uint64_t v97;
  char v98;
  uint64_t result;
  char v100;
  unsigned int v101;
  unint64_t v102;
  char v103;
  char v104;
  unsigned int v105;
  unint64_t v106;
  char v107;
  char v108;
  unsigned int v109;
  unint64_t v110;
  char v111;
  char v112;
  unsigned int v113;
  unint64_t v114;
  char v115;
  char v116;
  unsigned int v117;
  unint64_t v118;
  char v119;
  char v120;
  unsigned int v121;
  unint64_t v122;
  char v123;
  char v124;
  unsigned int v125;
  unint64_t v126;
  char v127;
  char v128;
  unsigned int v129;
  unint64_t v130;
  char v131;
  char v132;
  unsigned int v133;
  unint64_t v134;
  char v135;
  char v136;
  unsigned int v137;
  unint64_t v138;
  char v139;
  char v140;
  unsigned int v141;
  unint64_t v142;
  char v143;
  char v144;
  unsigned int v145;
  unint64_t v146;
  char v147;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((int)(v11 >> 3) > 300)
      {
        switch((int)v20)
        {
          case 301:
            *((_WORD *)this + 48) |= 8u;
            v27 = *((_QWORD *)a2 + 1);
            v2 = *((_QWORD *)a2 + 2);
            v28 = *(_QWORD *)a2;
            if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
            {
              v104 = 0;
              v105 = 0;
              v31 = 0;
              if (v2 <= v27)
                v2 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v2 == v27)
                {
                  v31 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_223;
                }
                v106 = v27++;
                v107 = *(_BYTE *)(v28 + v106);
                *((_QWORD *)a2 + 1) = v27;
                v31 |= (unint64_t)(v107 & 0x7F) << v104;
                if ((v107 & 0x80) == 0)
                  break;
                v104 += 7;
                v14 = v105++ > 8;
                if (v14)
                {
                  v31 = 0;
LABEL_222:
                  v2 = v106 + 1;
                  goto LABEL_223;
                }
              }
              if (*((_BYTE *)a2 + 24))
                v31 = 0;
              goto LABEL_222;
            }
            v29 = 0;
            v30 = 0;
            v31 = 0;
            do
            {
              v2 = v27 + 1;
              *((_QWORD *)a2 + 1) = v27 + 1;
              v32 = *(_BYTE *)(v28 + v27);
              v31 |= (unint64_t)(v32 & 0x7F) << v29;
              if ((v32 & 0x80) == 0)
                goto LABEL_223;
              v29 += 7;
              v27 = v2;
              v14 = v30++ > 8;
            }
            while (!v14);
            v31 = 0;
LABEL_223:
            *((_QWORD *)this + 4) = v31;
            break;
          case 302:
            *((_WORD *)this + 48) |= 0x10u;
            v45 = *((_QWORD *)a2 + 1);
            v2 = *((_QWORD *)a2 + 2);
            v46 = *(_QWORD *)a2;
            if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
            {
              v112 = 0;
              v113 = 0;
              v49 = 0;
              if (v2 <= v45)
                v2 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v2 == v45)
                {
                  v49 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_233;
                }
                v114 = v45++;
                v115 = *(_BYTE *)(v46 + v114);
                *((_QWORD *)a2 + 1) = v45;
                v49 |= (unint64_t)(v115 & 0x7F) << v112;
                if ((v115 & 0x80) == 0)
                  break;
                v112 += 7;
                v14 = v113++ > 8;
                if (v14)
                {
                  v49 = 0;
LABEL_232:
                  v2 = v114 + 1;
                  goto LABEL_233;
                }
              }
              if (*((_BYTE *)a2 + 24))
                v49 = 0;
              goto LABEL_232;
            }
            v47 = 0;
            v48 = 0;
            v49 = 0;
            do
            {
              v2 = v45 + 1;
              *((_QWORD *)a2 + 1) = v45 + 1;
              v50 = *(_BYTE *)(v46 + v45);
              v49 |= (unint64_t)(v50 & 0x7F) << v47;
              if ((v50 & 0x80) == 0)
                goto LABEL_233;
              v47 += 7;
              v45 = v2;
              v14 = v48++ > 8;
            }
            while (!v14);
            v49 = 0;
LABEL_233:
            *((_QWORD *)this + 5) = v49;
            break;
          case 303:
            *((_WORD *)this + 48) |= 0x20u;
            v51 = *((_QWORD *)a2 + 1);
            v2 = *((_QWORD *)a2 + 2);
            v52 = *(_QWORD *)a2;
            if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
            {
              v116 = 0;
              v117 = 0;
              v55 = 0;
              if (v2 <= v51)
                v2 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v2 == v51)
                {
                  v55 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_238;
                }
                v118 = v51++;
                v119 = *(_BYTE *)(v52 + v118);
                *((_QWORD *)a2 + 1) = v51;
                v55 |= (unint64_t)(v119 & 0x7F) << v116;
                if ((v119 & 0x80) == 0)
                  break;
                v116 += 7;
                v14 = v117++ > 8;
                if (v14)
                {
                  v55 = 0;
LABEL_237:
                  v2 = v118 + 1;
                  goto LABEL_238;
                }
              }
              if (*((_BYTE *)a2 + 24))
                v55 = 0;
              goto LABEL_237;
            }
            v53 = 0;
            v54 = 0;
            v55 = 0;
            do
            {
              v2 = v51 + 1;
              *((_QWORD *)a2 + 1) = v51 + 1;
              v56 = *(_BYTE *)(v52 + v51);
              v55 |= (unint64_t)(v56 & 0x7F) << v53;
              if ((v56 & 0x80) == 0)
                goto LABEL_238;
              v53 += 7;
              v51 = v2;
              v14 = v54++ > 8;
            }
            while (!v14);
            v55 = 0;
LABEL_238:
            *((_QWORD *)this + 6) = v55;
            break;
          case 304:
            *((_WORD *)this + 48) |= 0x40u;
            v57 = *((_QWORD *)a2 + 1);
            v2 = *((_QWORD *)a2 + 2);
            v58 = *(_QWORD *)a2;
            if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
            {
              v120 = 0;
              v121 = 0;
              v61 = 0;
              if (v2 <= v57)
                v2 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v2 == v57)
                {
                  v61 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_243;
                }
                v122 = v57++;
                v123 = *(_BYTE *)(v58 + v122);
                *((_QWORD *)a2 + 1) = v57;
                v61 |= (unint64_t)(v123 & 0x7F) << v120;
                if ((v123 & 0x80) == 0)
                  break;
                v120 += 7;
                v14 = v121++ > 8;
                if (v14)
                {
                  v61 = 0;
LABEL_242:
                  v2 = v122 + 1;
                  goto LABEL_243;
                }
              }
              if (*((_BYTE *)a2 + 24))
                v61 = 0;
              goto LABEL_242;
            }
            v59 = 0;
            v60 = 0;
            v61 = 0;
            do
            {
              v2 = v57 + 1;
              *((_QWORD *)a2 + 1) = v57 + 1;
              v62 = *(_BYTE *)(v58 + v57);
              v61 |= (unint64_t)(v62 & 0x7F) << v59;
              if ((v62 & 0x80) == 0)
                goto LABEL_243;
              v59 += 7;
              v57 = v2;
              v14 = v60++ > 8;
            }
            while (!v14);
            v61 = 0;
LABEL_243:
            *((_QWORD *)this + 7) = v61;
            break;
          case 305:
            *((_WORD *)this + 48) |= 1u;
            v63 = *((_QWORD *)a2 + 1);
            v2 = *((_QWORD *)a2 + 2);
            v64 = *(_QWORD *)a2;
            if (v63 > 0xFFFFFFFFFFFFFFF5 || v63 + 10 > v2)
            {
              v124 = 0;
              v125 = 0;
              v67 = 0;
              if (v2 <= v63)
                v2 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v2 == v63)
                {
                  v67 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_248;
                }
                v126 = v63++;
                v127 = *(_BYTE *)(v64 + v126);
                *((_QWORD *)a2 + 1) = v63;
                v67 |= (unint64_t)(v127 & 0x7F) << v124;
                if ((v127 & 0x80) == 0)
                  break;
                v124 += 7;
                v14 = v125++ > 8;
                if (v14)
                {
                  v67 = 0;
LABEL_247:
                  v2 = v126 + 1;
                  goto LABEL_248;
                }
              }
              if (*((_BYTE *)a2 + 24))
                v67 = 0;
              goto LABEL_247;
            }
            v65 = 0;
            v66 = 0;
            v67 = 0;
            do
            {
              v2 = v63 + 1;
              *((_QWORD *)a2 + 1) = v63 + 1;
              v68 = *(_BYTE *)(v64 + v63);
              v67 |= (unint64_t)(v68 & 0x7F) << v65;
              if ((v68 & 0x80) == 0)
                goto LABEL_248;
              v65 += 7;
              v63 = v2;
              v14 = v66++ > 8;
            }
            while (!v14);
            v67 = 0;
LABEL_248:
            *((_QWORD *)this + 1) = v67;
            break;
          case 306:
            *((_WORD *)this + 48) |= 0x400u;
            v69 = *((_QWORD *)a2 + 1);
            v2 = *((_QWORD *)a2 + 2);
            v70 = *(_QWORD *)a2;
            if (v69 > 0xFFFFFFFFFFFFFFF5 || v69 + 10 > v2)
            {
              v128 = 0;
              v129 = 0;
              v73 = 0;
              if (v2 <= v69)
                v2 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v2 == v69)
                {
                  LODWORD(v73) = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_253;
                }
                v130 = v69++;
                v131 = *(_BYTE *)(v70 + v130);
                *((_QWORD *)a2 + 1) = v69;
                v73 |= (unint64_t)(v131 & 0x7F) << v128;
                if ((v131 & 0x80) == 0)
                  break;
                v128 += 7;
                v14 = v129++ > 8;
                if (v14)
                {
                  LODWORD(v73) = 0;
LABEL_252:
                  v2 = v130 + 1;
                  goto LABEL_253;
                }
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v73) = 0;
              goto LABEL_252;
            }
            v71 = 0;
            v72 = 0;
            v73 = 0;
            do
            {
              v2 = v69 + 1;
              *((_QWORD *)a2 + 1) = v69 + 1;
              v74 = *(_BYTE *)(v70 + v69);
              v73 |= (unint64_t)(v74 & 0x7F) << v71;
              if ((v74 & 0x80) == 0)
                goto LABEL_253;
              v71 += 7;
              v69 = v2;
              v14 = v72++ > 8;
            }
            while (!v14);
            LODWORD(v73) = 0;
LABEL_253:
            *((_DWORD *)this + 20) = v73;
            break;
          case 307:
            *((_WORD *)this + 48) |= 0x200u;
            v75 = *((_QWORD *)a2 + 1);
            v2 = *((_QWORD *)a2 + 2);
            v76 = *(_QWORD *)a2;
            if (v75 > 0xFFFFFFFFFFFFFFF5 || v75 + 10 > v2)
            {
              v132 = 0;
              v133 = 0;
              v79 = 0;
              if (v2 <= v75)
                v2 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v2 == v75)
                {
                  LODWORD(v79) = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_258;
                }
                v134 = v75++;
                v135 = *(_BYTE *)(v76 + v134);
                *((_QWORD *)a2 + 1) = v75;
                v79 |= (unint64_t)(v135 & 0x7F) << v132;
                if ((v135 & 0x80) == 0)
                  break;
                v132 += 7;
                v14 = v133++ > 8;
                if (v14)
                {
                  LODWORD(v79) = 0;
LABEL_257:
                  v2 = v134 + 1;
                  goto LABEL_258;
                }
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v79) = 0;
              goto LABEL_257;
            }
            v77 = 0;
            v78 = 0;
            v79 = 0;
            do
            {
              v2 = v75 + 1;
              *((_QWORD *)a2 + 1) = v75 + 1;
              v80 = *(_BYTE *)(v76 + v75);
              v79 |= (unint64_t)(v80 & 0x7F) << v77;
              if ((v80 & 0x80) == 0)
                goto LABEL_258;
              v77 += 7;
              v75 = v2;
              v14 = v78++ > 8;
            }
            while (!v14);
            LODWORD(v79) = 0;
LABEL_258:
            *((_DWORD *)this + 19) = v79;
            break;
          case 308:
            *((_WORD *)this + 48) |= 4u;
            v81 = *((_QWORD *)a2 + 1);
            v2 = *((_QWORD *)a2 + 2);
            v82 = *(_QWORD *)a2;
            if (v81 > 0xFFFFFFFFFFFFFFF5 || v81 + 10 > v2)
            {
              v136 = 0;
              v137 = 0;
              v85 = 0;
              if (v2 <= v81)
                v2 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v2 == v81)
                {
                  v85 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_263;
                }
                v138 = v81++;
                v139 = *(_BYTE *)(v82 + v138);
                *((_QWORD *)a2 + 1) = v81;
                v85 |= (unint64_t)(v139 & 0x7F) << v136;
                if ((v139 & 0x80) == 0)
                  break;
                v136 += 7;
                v14 = v137++ > 8;
                if (v14)
                {
                  v85 = 0;
LABEL_262:
                  v2 = v138 + 1;
                  goto LABEL_263;
                }
              }
              if (*((_BYTE *)a2 + 24))
                v85 = 0;
              goto LABEL_262;
            }
            v83 = 0;
            v84 = 0;
            v85 = 0;
            do
            {
              v2 = v81 + 1;
              *((_QWORD *)a2 + 1) = v81 + 1;
              v86 = *(_BYTE *)(v82 + v81);
              v85 |= (unint64_t)(v86 & 0x7F) << v83;
              if ((v86 & 0x80) == 0)
                goto LABEL_263;
              v83 += 7;
              v81 = v2;
              v14 = v84++ > 8;
            }
            while (!v14);
            v85 = 0;
LABEL_263:
            *((_QWORD *)this + 3) = v85;
            break;
          default:
            goto LABEL_121;
        }
      }
      else if ((int)v20 <= 200)
      {
        switch((_DWORD)v20)
        {
          case 'e':
            *((_WORD *)this + 48) |= 0x1000u;
            v87 = *((_QWORD *)a2 + 1);
            v2 = *((_QWORD *)a2 + 2);
            v88 = *(_QWORD *)a2;
            if (v87 > 0xFFFFFFFFFFFFFFF5 || v87 + 10 > v2)
            {
              v140 = 0;
              v141 = 0;
              v91 = 0;
              if (v2 <= v87)
                v2 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v2 == v87)
                {
                  LODWORD(v91) = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_268;
                }
                v142 = v87++;
                v143 = *(_BYTE *)(v88 + v142);
                *((_QWORD *)a2 + 1) = v87;
                v91 |= (unint64_t)(v143 & 0x7F) << v140;
                if ((v143 & 0x80) == 0)
                  break;
                v140 += 7;
                v14 = v141++ > 8;
                if (v14)
                {
                  LODWORD(v91) = 0;
                  goto LABEL_267;
                }
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v91) = 0;
LABEL_267:
              v2 = v142 + 1;
            }
            else
            {
              v89 = 0;
              v90 = 0;
              v91 = 0;
              while (1)
              {
                v2 = v87 + 1;
                *((_QWORD *)a2 + 1) = v87 + 1;
                v92 = *(_BYTE *)(v88 + v87);
                v91 |= (unint64_t)(v92 & 0x7F) << v89;
                if ((v92 & 0x80) == 0)
                  break;
                v89 += 7;
                v87 = v2;
                v14 = v90++ > 8;
                if (v14)
                {
                  LODWORD(v91) = 0;
                  break;
                }
              }
            }
LABEL_268:
            *((_DWORD *)this + 22) = v91;
            break;
          case 'f':
            *((_WORD *)this + 48) |= 0x800u;
            v93 = *((_QWORD *)a2 + 1);
            v2 = *((_QWORD *)a2 + 2);
            v94 = *(_QWORD *)a2;
            if (v93 > 0xFFFFFFFFFFFFFFF5 || v93 + 10 > v2)
            {
              v144 = 0;
              v145 = 0;
              v97 = 0;
              if (v2 <= v93)
                v2 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v2 == v93)
                {
                  LODWORD(v97) = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_273;
                }
                v146 = v93++;
                v147 = *(_BYTE *)(v94 + v146);
                *((_QWORD *)a2 + 1) = v93;
                v97 |= (unint64_t)(v147 & 0x7F) << v144;
                if ((v147 & 0x80) == 0)
                  break;
                v144 += 7;
                v14 = v145++ > 8;
                if (v14)
                {
                  LODWORD(v97) = 0;
                  goto LABEL_272;
                }
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v97) = 0;
LABEL_272:
              v2 = v146 + 1;
            }
            else
            {
              v95 = 0;
              v96 = 0;
              v97 = 0;
              while (1)
              {
                v2 = v93 + 1;
                *((_QWORD *)a2 + 1) = v93 + 1;
                v98 = *(_BYTE *)(v94 + v93);
                v97 |= (unint64_t)(v98 & 0x7F) << v95;
                if ((v98 & 0x80) == 0)
                  break;
                v95 += 7;
                v93 = v2;
                v14 = v96++ > 8;
                if (v14)
                {
                  LODWORD(v97) = 0;
                  break;
                }
              }
            }
LABEL_273:
            *((_DWORD *)this + 21) = v97;
            break;
          case 'g':
            *((_WORD *)this + 48) |= 0x100u;
            v2 = *((_QWORD *)a2 + 1);
            if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
            {
              *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              v2 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v2;
            }
            else
            {
              *((_BYTE *)a2 + 24) = 1;
            }
            break;
          default:
LABEL_121:
            result = PB::Reader::skip(a2, v20, v11 & 7, 0);
            if (!(_DWORD)result)
              return result;
            v2 = *((_QWORD *)a2 + 1);
            break;
        }
      }
      else
      {
        switch((int)v20)
        {
          case 201:
            *((_WORD *)this + 48) |= 0x80u;
            v21 = *((_QWORD *)a2 + 1);
            v2 = *((_QWORD *)a2 + 2);
            v22 = *(_QWORD *)a2;
            if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
            {
              v100 = 0;
              v101 = 0;
              v25 = 0;
              if (v2 <= v21)
                v2 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v2 == v21)
                {
                  v25 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_218;
                }
                v102 = v21++;
                v103 = *(_BYTE *)(v22 + v102);
                *((_QWORD *)a2 + 1) = v21;
                v25 |= (unint64_t)(v103 & 0x7F) << v100;
                if ((v103 & 0x80) == 0)
                  break;
                v100 += 7;
                v14 = v101++ > 8;
                if (v14)
                {
                  v25 = 0;
LABEL_217:
                  v2 = v102 + 1;
                  goto LABEL_218;
                }
              }
              if (*((_BYTE *)a2 + 24))
                v25 = 0;
              goto LABEL_217;
            }
            v23 = 0;
            v24 = 0;
            v25 = 0;
            do
            {
              v2 = v21 + 1;
              *((_QWORD *)a2 + 1) = v21 + 1;
              v26 = *(_BYTE *)(v22 + v21);
              v25 |= (unint64_t)(v26 & 0x7F) << v23;
              if ((v26 & 0x80) == 0)
                goto LABEL_218;
              v23 += 7;
              v21 = v2;
              v14 = v24++ > 8;
            }
            while (!v14);
            v25 = 0;
LABEL_218:
            *((_QWORD *)this + 8) = v25;
            break;
          case 202:
            *((_WORD *)this + 48) |= 0x8000u;
            v2 = *((_QWORD *)a2 + 1);
            if (v2 >= *((_QWORD *)a2 + 2))
            {
              v34 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v33 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
              *((_QWORD *)a2 + 1) = v2;
              v34 = v33 != 0;
            }
            *((_BYTE *)this + 94) = v34;
            break;
          case 203:
            *((_WORD *)this + 48) |= 0x4000u;
            v2 = *((_QWORD *)a2 + 1);
            if (v2 >= *((_QWORD *)a2 + 2))
            {
              v36 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v35 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
              *((_QWORD *)a2 + 1) = v2;
              v36 = v35 != 0;
            }
            *((_BYTE *)this + 93) = v36;
            break;
          case 204:
            *((_WORD *)this + 48) |= 0x2000u;
            v2 = *((_QWORD *)a2 + 1);
            if (v2 >= *((_QWORD *)a2 + 2))
            {
              v38 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v37 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
              *((_QWORD *)a2 + 1) = v2;
              v38 = v37 != 0;
            }
            *((_BYTE *)this + 92) = v38;
            break;
          case 205:
            *((_WORD *)this + 48) |= 2u;
            v39 = *((_QWORD *)a2 + 1);
            v2 = *((_QWORD *)a2 + 2);
            v40 = *(_QWORD *)a2;
            if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
            {
              v108 = 0;
              v109 = 0;
              v43 = 0;
              if (v2 <= v39)
                v2 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v2 == v39)
                {
                  v43 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_228;
                }
                v110 = v39++;
                v111 = *(_BYTE *)(v40 + v110);
                *((_QWORD *)a2 + 1) = v39;
                v43 |= (unint64_t)(v111 & 0x7F) << v108;
                if ((v111 & 0x80) == 0)
                  break;
                v108 += 7;
                v14 = v109++ > 8;
                if (v14)
                {
                  v43 = 0;
LABEL_227:
                  v2 = v110 + 1;
                  goto LABEL_228;
                }
              }
              if (*((_BYTE *)a2 + 24))
                v43 = 0;
              goto LABEL_227;
            }
            v41 = 0;
            v42 = 0;
            v43 = 0;
            do
            {
              v2 = v39 + 1;
              *((_QWORD *)a2 + 1) = v39 + 1;
              v44 = *(_BYTE *)(v40 + v39);
              v43 |= (unint64_t)(v44 & 0x7F) << v41;
              if ((v44 & 0x80) == 0)
                goto LABEL_228;
              v41 += 7;
              v39 = v2;
              v14 = v42++ > 8;
            }
            while (!v14);
            v43 = 0;
LABEL_228:
            *((_QWORD *)this + 2) = v43;
            break;
          default:
            goto LABEL_121;
        }
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaTriggerClustersResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 96);
  if ((v4 & 0x1000) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 88), 0x65u);
    v4 = *(_WORD *)(v3 + 96);
    if ((v4 & 0x800) == 0)
    {
LABEL_3:
      if ((v4 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_20;
    }
  }
  else if ((*(_WORD *)(this + 96) & 0x800) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 84), 0x66u);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x100) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0x67u);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x8000) == 0)
      goto LABEL_6;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 64), 0xC9u);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x8000) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000) == 0)
      goto LABEL_7;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 94), 0xCAu);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x4000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 93), 0xCBu);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 2) == 0)
      goto LABEL_9;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 92), 0xCCu);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 2) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 16), 0xCDu);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 32), 0x12Du);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 40), 0x12Eu);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 48), 0x12Fu);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x40) == 0)
  {
LABEL_13:
    if ((v4 & 1) == 0)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 56), 0x130u);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 1) == 0)
  {
LABEL_14:
    if ((v4 & 0x400) == 0)
      goto LABEL_15;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 8), 0x131u);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x400) == 0)
  {
LABEL_15:
    if ((v4 & 0x200) == 0)
      goto LABEL_16;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 80), 0x132u);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x200) == 0)
  {
LABEL_16:
    if ((v4 & 4) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 24), 0x134u);
  }
LABEL_32:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 76), 0x133u);
  if ((*(_WORD *)(v3 + 96) & 4) != 0)
    return PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 24), 0x134u);
  return this;
}

uint64_t CMMsl::KappaTriggerClustersResult::hash_value(CMMsl::KappaTriggerClustersResult *this)
{
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *((_WORD *)this + 48);
  if ((v1 & 0x1000) != 0)
  {
    v2 = *((unsigned int *)this + 22);
    if ((*((_WORD *)this + 48) & 0x800) != 0)
    {
LABEL_3:
      v3 = *((unsigned int *)this + 21);
      if ((*((_WORD *)this + 48) & 0x100) != 0)
        goto LABEL_4;
LABEL_22:
      v5 = 0;
      if ((v1 & 0x80) != 0)
        goto LABEL_7;
      goto LABEL_23;
    }
  }
  else
  {
    v2 = 0;
    if ((*((_WORD *)this + 48) & 0x800) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((*((_WORD *)this + 48) & 0x100) == 0)
    goto LABEL_22;
LABEL_4:
  v4 = *((float *)this + 18);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_7:
    v6 = *((_QWORD *)this + 8);
    if ((*((_WORD *)this + 48) & 0x8000) != 0)
      goto LABEL_8;
    goto LABEL_24;
  }
LABEL_23:
  v6 = 0;
  if ((*((_WORD *)this + 48) & 0x8000) != 0)
  {
LABEL_8:
    v7 = *((unsigned __int8 *)this + 94);
    if ((*((_WORD *)this + 48) & 0x4000) != 0)
      goto LABEL_9;
    goto LABEL_25;
  }
LABEL_24:
  v7 = 0;
  if ((*((_WORD *)this + 48) & 0x4000) != 0)
  {
LABEL_9:
    v8 = *((unsigned __int8 *)this + 93);
    if ((*((_WORD *)this + 48) & 0x2000) != 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  v8 = 0;
  if ((*((_WORD *)this + 48) & 0x2000) != 0)
  {
LABEL_10:
    v9 = *((unsigned __int8 *)this + 92);
    if ((v1 & 2) != 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  v9 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_11:
    v10 = *((_QWORD *)this + 2);
    if ((v1 & 8) != 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  v10 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_12:
    v11 = *((_QWORD *)this + 4);
    if ((v1 & 0x10) != 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  v11 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_13:
    v12 = *((_QWORD *)this + 5);
    if ((v1 & 0x20) != 0)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  v12 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_14:
    v13 = *((_QWORD *)this + 6);
    if ((v1 & 0x40) != 0)
      goto LABEL_15;
    goto LABEL_31;
  }
LABEL_30:
  v13 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_15:
    v14 = *((_QWORD *)this + 7);
    if ((v1 & 1) != 0)
      goto LABEL_16;
    goto LABEL_32;
  }
LABEL_31:
  v14 = 0;
  if ((v1 & 1) != 0)
  {
LABEL_16:
    v15 = *((_QWORD *)this + 1);
    if ((*((_WORD *)this + 48) & 0x400) != 0)
      goto LABEL_17;
    goto LABEL_33;
  }
LABEL_32:
  v15 = 0;
  if ((*((_WORD *)this + 48) & 0x400) != 0)
  {
LABEL_17:
    v16 = *((int *)this + 20);
    if ((*((_WORD *)this + 48) & 0x200) != 0)
      goto LABEL_18;
LABEL_34:
    v17 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_19;
LABEL_35:
    v18 = 0;
    return v3 ^ v2 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18;
  }
LABEL_33:
  v16 = 0;
  if ((*((_WORD *)this + 48) & 0x200) == 0)
    goto LABEL_34;
LABEL_18:
  v17 = *((int *)this + 19);
  if ((v1 & 4) == 0)
    goto LABEL_35;
LABEL_19:
  v18 = *((_QWORD *)this + 3);
  return v3 ^ v2 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18;
}

void CMMsl::KappaTriggerDebug::~KappaTriggerDebug(CMMsl::KappaTriggerDebug *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = off_100352518;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::KappaTriggerDebug::~KappaTriggerDebug(this);
  operator delete();
}

CMMsl::KappaTriggerDebug *CMMsl::KappaTriggerDebug::KappaTriggerDebug(CMMsl::KappaTriggerDebug *this, const CMMsl::KappaTriggerDebug *a2)
{
  char *v4;
  __int16 v5;
  __int16 v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  __int16 v10;
  int v11;
  char v13;
  char v14;
  int v15;
  int v16;
  int v17;
  int v18;

  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_QWORD *)this = off_100352518;
  *((_DWORD *)this + 30) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 9) = 0;
  v5 = *((_WORD *)a2 + 60);
  if ((v5 & 2) != 0)
  {
    v7 = *((_QWORD *)a2 + 11);
    v6 = 2;
    *((_WORD *)this + 60) = 2;
    *((_QWORD *)this + 11) = v7;
    v5 = *((_WORD *)a2 + 60);
    if ((v5 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((*((_WORD *)a2 + 60) & 0x200) != 0)
  {
LABEL_5:
    v8 = *((_BYTE *)a2 + 118);
    v6 |= 0x200u;
    *((_WORD *)this + 60) = v6;
    *((_BYTE *)this + 118) = v8;
    v5 = *((_WORD *)a2 + 60);
  }
LABEL_6:
  if ((v5 & 1) != 0)
  {
    v9 = *((_QWORD *)a2 + 10);
    *((_WORD *)this + 60) = v6 | 1;
    *((_QWORD *)this + 10) = v9;
  }
  if (this != a2)
  {
    sub_100239350(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
    sub_100020CE4((char *)this + 56, *((char **)a2 + 7), *((_QWORD *)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 2);
    sub_100020CE4((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
  }
  v10 = *((_WORD *)a2 + 60);
  if ((v10 & 0x80) != 0)
  {
    v13 = *((_BYTE *)a2 + 116);
    *((_WORD *)this + 60) |= 0x80u;
    *((_BYTE *)this + 116) = v13;
    v10 = *((_WORD *)a2 + 60);
    if ((v10 & 0x100) == 0)
    {
LABEL_12:
      if ((v10 & 4) == 0)
        goto LABEL_13;
      goto LABEL_21;
    }
  }
  else if ((*((_WORD *)a2 + 60) & 0x100) == 0)
  {
    goto LABEL_12;
  }
  v14 = *((_BYTE *)a2 + 117);
  *((_WORD *)this + 60) |= 0x100u;
  *((_BYTE *)this + 117) = v14;
  v10 = *((_WORD *)a2 + 60);
  if ((v10 & 4) == 0)
  {
LABEL_13:
    if ((v10 & 8) == 0)
      goto LABEL_14;
    goto LABEL_22;
  }
LABEL_21:
  v15 = *((_DWORD *)a2 + 24);
  *((_WORD *)this + 60) |= 4u;
  *((_DWORD *)this + 24) = v15;
  v10 = *((_WORD *)a2 + 60);
  if ((v10 & 8) == 0)
  {
LABEL_14:
    if ((v10 & 0x40) == 0)
      goto LABEL_15;
    goto LABEL_23;
  }
LABEL_22:
  v16 = *((_DWORD *)a2 + 25);
  *((_WORD *)this + 60) |= 8u;
  *((_DWORD *)this + 25) = v16;
  v10 = *((_WORD *)a2 + 60);
  if ((v10 & 0x40) == 0)
  {
LABEL_15:
    if ((v10 & 0x20) == 0)
      goto LABEL_16;
LABEL_24:
    v18 = *((_DWORD *)a2 + 27);
    *((_WORD *)this + 60) |= 0x20u;
    *((_DWORD *)this + 27) = v18;
    if ((*((_WORD *)a2 + 60) & 0x10) == 0)
      return this;
    goto LABEL_17;
  }
LABEL_23:
  v17 = *((_DWORD *)a2 + 28);
  *((_WORD *)this + 60) |= 0x40u;
  *((_DWORD *)this + 28) = v17;
  v10 = *((_WORD *)a2 + 60);
  if ((v10 & 0x20) != 0)
    goto LABEL_24;
LABEL_16:
  if ((v10 & 0x10) != 0)
  {
LABEL_17:
    v11 = *((_DWORD *)a2 + 26);
    *((_WORD *)this + 60) |= 0x10u;
    *((_DWORD *)this + 26) = v11;
  }
  return this;
}

CMMsl *CMMsl::KappaTriggerDebug::operator=(CMMsl *a1, const CMMsl::KappaTriggerDebug *a2)
{
  CMMsl::KappaTriggerDebug *v3;
  _BYTE v5[128];

  if (a1 != a2)
  {
    CMMsl::KappaTriggerDebug::KappaTriggerDebug((CMMsl::KappaTriggerDebug *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaTriggerDebug *)v5, v3);
    CMMsl::KappaTriggerDebug::~KappaTriggerDebug((CMMsl::KappaTriggerDebug *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaTriggerDebug *a2, CMMsl::KappaTriggerDebug *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float result;

  v3 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v3;
  v4 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v4;
  LOBYTE(v4) = *((_BYTE *)this + 118);
  *((_BYTE *)this + 118) = *((_BYTE *)a2 + 118);
  *((_BYTE *)a2 + 118) = v4;
  v5 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v5;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  v9 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v9;
  v10 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v10;
  v11 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v11;
  v12 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v12;
  v13 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v13;
  v14 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v14;
  LOBYTE(v14) = *((_BYTE *)this + 116);
  *((_BYTE *)this + 116) = *((_BYTE *)a2 + 116);
  *((_BYTE *)a2 + 116) = v14;
  LOBYTE(v14) = *((_BYTE *)this + 117);
  *((_BYTE *)this + 117) = *((_BYTE *)a2 + 117);
  *((_BYTE *)a2 + 117) = v14;
  LODWORD(v5) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v5;
  result = *((float *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((float *)a2 + 25) = result;
  LODWORD(v14) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v14;
  LODWORD(v14) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v14;
  LODWORD(v14) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v14;
  return result;
}

uint64_t CMMsl::KappaTriggerDebug::KappaTriggerDebug(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_100352518;
  v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  v5 = a1 + 56;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 118) = *(_BYTE *)(a2 + 118);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  sub_100239458(v5, (__n128 *)(a2 + 56));
  sub_100239458(v4, (__n128 *)(a2 + 32));
  *(_BYTE *)(a1 + 116) = *(_BYTE *)(a2 + 116);
  *(_BYTE *)(a1 + 117) = *(_BYTE *)(a2 + 117);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  return a1;
}

CMMsl *CMMsl::KappaTriggerDebug::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::KappaTriggerDebug *v3;
  _BYTE v5[128];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaTriggerDebug::KappaTriggerDebug((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaTriggerDebug *)v5, v3);
    CMMsl::KappaTriggerDebug::~KappaTriggerDebug((CMMsl::KappaTriggerDebug *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaTriggerDebug::formatText(CMMsl::KappaTriggerDebug *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;
  double *v6;
  double *v7;
  double v8;
  __int16 v9;
  float *v10;
  float *v11;
  float v12;
  float *v13;
  float *v14;
  float v15;
  __int16 v16;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 60);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "avgHorizontalDecelMax", *((double *)this + 10));
    v5 = *((_WORD *)this + 60);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "avgHorizontalDecelThresholdCoupled", *((float *)this + 24));
  if ((*((_WORD *)this + 60) & 8) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "impactThresholdUncoupled", *((float *)this + 25));
LABEL_5:
  v6 = (double *)*((_QWORD *)this + 1);
  v7 = (double *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "inertialAccel", v8);
  }
  v9 = *((_WORD *)this + 60);
  if ((v9 & 0x80) != 0)
  {
    PB::TextFormatter::format(a2, "isMounted", *((_BYTE *)this + 116));
    v9 = *((_WORD *)this + 60);
    if ((v9 & 0x100) == 0)
    {
LABEL_9:
      if ((v9 & 0x10) == 0)
        goto LABEL_10;
      goto LABEL_26;
    }
  }
  else if ((*((_WORD *)this + 60) & 0x100) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(a2, "isSimulated", *((_BYTE *)this + 117));
  v9 = *((_WORD *)this + 60);
  if ((v9 & 0x10) == 0)
  {
LABEL_10:
    if ((v9 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "nAccelGap", *((_DWORD *)this + 26));
  if ((*((_WORD *)this + 60) & 0x20) != 0)
LABEL_11:
    PB::TextFormatter::format(a2, "numResets", *((_DWORD *)this + 27));
LABEL_12:
  v10 = (float *)*((_QWORD *)this + 4);
  v11 = (float *)*((_QWORD *)this + 5);
  while (v10 != v11)
  {
    v12 = *v10++;
    PB::TextFormatter::format(a2, "prevQ", v12);
  }
  v13 = (float *)*((_QWORD *)this + 7);
  v14 = (float *)*((_QWORD *)this + 8);
  while (v13 != v14)
  {
    v15 = *v13++;
    PB::TextFormatter::format(a2, "rawClampedAccel", v15);
  }
  v16 = *((_WORD *)this + 60);
  if ((v16 & 0x200) == 0)
  {
    if ((v16 & 2) == 0)
      goto LABEL_18;
LABEL_29:
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 11));
    if ((*((_WORD *)this + 60) & 0x40) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_19;
  }
  PB::TextFormatter::format(a2, "shouldTrigger", *((_BYTE *)this + 118));
  v16 = *((_WORD *)this + 60);
  if ((v16 & 2) != 0)
    goto LABEL_29;
LABEL_18:
  if ((v16 & 0x40) != 0)
LABEL_19:
    PB::TextFormatter::format(a2, "triggerPathBitmap", *((_DWORD *)this + 28));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::KappaTriggerDebug::readFrom(CMMsl::KappaTriggerDebug *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  void **v9;
  char *v10;
  void **v11;
  char *v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  BOOL v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  char v23;
  int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  BOOL v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  _DWORD *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  _DWORD *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  int v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  int v83;
  BOOL v84;
  unint64_t v85;
  unint64_t v86;
  int v87;
  BOOL v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char v94;
  unsigned int v95;
  uint64_t v96;
  unint64_t v97;
  char v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  char v102;
  unsigned int v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  char v110;
  unsigned int v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  char v115;
  unsigned int v116;
  unint64_t v117;
  char v118;
  unint64_t v119;
  char *v120;
  _QWORD *v121;
  unint64_t v122;
  char *v123;
  _DWORD *v124;
  unint64_t v125;
  char *v126;
  char v127;
  unsigned int v128;
  unint64_t v129;
  char v130;
  char v131;
  unsigned int v132;
  unint64_t v133;
  char v134;
  char v135;
  unsigned int v136;
  unint64_t v137;
  char v138;
  char *v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  char *v161;
  int v162;
  char *v163;
  int v164;
  unint64_t v165;
  char *v168;
  _BYTE v169[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 32);
    v168 = (char *)this + 48;
    v9 = (void **)((char *)this + 56);
    v10 = (char *)this + 72;
    v11 = (void **)((char *)this + 8);
    v12 = (char *)this + 24;
    while (1)
    {
      v13 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      while (1)
      {
        v17 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v18 = *(_BYTE *)(v13 + v2);
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0)
          break;
        v14 += 7;
        v2 = v17;
        v19 = v15++ > 8;
        if (v19)
          goto LABEL_20;
      }
LABEL_21:
      v25 = v16 & 7;
      if (v25 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v16 >> 3))
      {
        case 1u:
          *((_WORD *)this + 60) |= 2u;
          v26 = *((_QWORD *)a2 + 1);
          v27 = *((_QWORD *)a2 + 2);
          v28 = *(_QWORD *)a2;
          if (v26 <= 0xFFFFFFFFFFFFFFF5 && v26 + 10 <= v27)
          {
            v29 = 0;
            v30 = 0;
            v31 = 0;
            do
            {
              v32 = v26 + 1;
              *((_QWORD *)a2 + 1) = v26 + 1;
              v33 = *(_BYTE *)(v28 + v26);
              v31 |= (unint64_t)(v33 & 0x7F) << v29;
              if ((v33 & 0x80) == 0)
                goto LABEL_212;
              v29 += 7;
              v26 = v32;
              v19 = v30++ > 8;
            }
            while (!v19);
LABEL_146:
            v31 = 0;
            goto LABEL_212;
          }
          v115 = 0;
          v116 = 0;
          v31 = 0;
          if (v27 <= v26)
            v27 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v27 == v26)
            {
              v31 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v117 = v26 + 1;
              v118 = *(_BYTE *)(v28 + v26);
              *((_QWORD *)a2 + 1) = v117;
              v31 |= (unint64_t)(v118 & 0x7F) << v115;
              if (v118 < 0)
              {
                v115 += 7;
                v26 = v117;
                v19 = v116++ > 8;
                if (v19)
                  goto LABEL_146;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v31 = 0;
            }
            break;
          }
LABEL_212:
          *((_QWORD *)this + 11) = v31;
          goto LABEL_252;
        case 2u:
          *((_WORD *)this + 60) |= 0x200u;
          v34 = *((_QWORD *)a2 + 1);
          if (v34 >= *((_QWORD *)a2 + 2))
          {
            v37 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v35 = v34 + 1;
            v36 = *(unsigned __int8 *)(*(_QWORD *)a2 + v34);
            *((_QWORD *)a2 + 1) = v35;
            v37 = v36 != 0;
          }
          *((_BYTE *)this + 118) = v37;
          goto LABEL_252;
        case 3u:
          *((_WORD *)this + 60) |= 1u;
          v38 = *((_QWORD *)a2 + 1);
          if (v38 > 0xFFFFFFFFFFFFFFF7 || v38 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_248;
          *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v38);
          goto LABEL_231;
        case 4u:
          if (v25 == 2)
          {
            if ((PB::Reader::placeMark(a2, v169) & 1) != 0)
              return 0;
            v39 = *((_QWORD *)a2 + 1);
            v40 = *((_QWORD *)a2 + 2);
            while (v39 < v40 && !*((_BYTE *)a2 + 24))
            {
              v42 = (char *)*((_QWORD *)this + 2);
              v41 = *((_QWORD *)this + 3);
              if ((unint64_t)v42 >= v41)
              {
                v44 = (char *)*v11;
                v45 = (v42 - (_BYTE *)*v11) >> 3;
                v46 = v45 + 1;
                if ((unint64_t)(v45 + 1) >> 61)
                  goto LABEL_262;
                v47 = v41 - (_QWORD)v44;
                if (v47 >> 2 > v46)
                  v46 = v47 >> 2;
                if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
                  v48 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v48 = v46;
                if (v48)
                {
                  v49 = (char *)sub_10000D60C((uint64_t)v12, v48);
                  v44 = (char *)*((_QWORD *)this + 1);
                  v42 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v49 = 0;
                }
                v50 = &v49[8 * v45];
                *(_QWORD *)v50 = 0;
                v43 = v50 + 8;
                while (v42 != v44)
                {
                  v51 = *((_QWORD *)v42 - 1);
                  v42 -= 8;
                  *((_QWORD *)v50 - 1) = v51;
                  v50 -= 8;
                }
                *((_QWORD *)this + 1) = v50;
                *((_QWORD *)this + 2) = v43;
                *((_QWORD *)this + 3) = &v49[8 * v48];
                if (v44)
                  operator delete(v44);
              }
              else
              {
                *(_QWORD *)v42 = 0;
                v43 = v42 + 8;
              }
              *((_QWORD *)this + 2) = v43;
              v52 = *((_QWORD *)a2 + 1);
              if (v52 > 0xFFFFFFFFFFFFFFF7 || v52 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_180;
              *(v43 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v52);
              v40 = *((_QWORD *)a2 + 2);
              v39 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v39;
            }
            goto LABEL_181;
          }
          v120 = (char *)*((_QWORD *)this + 2);
          v119 = *((_QWORD *)this + 3);
          if ((unint64_t)v120 >= v119)
          {
            v139 = (char *)*v11;
            v140 = (v120 - (_BYTE *)*v11) >> 3;
            v141 = v140 + 1;
            if ((unint64_t)(v140 + 1) >> 61)
LABEL_262:
              sub_10000D5F8();
            v142 = v119 - (_QWORD)v139;
            if (v142 >> 2 > v141)
              v141 = v142 >> 2;
            if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFF8)
              v143 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v143 = v141;
            if (v143)
            {
              v144 = (char *)sub_10000D60C((uint64_t)v12, v143);
              v139 = (char *)*((_QWORD *)this + 1);
              v120 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v144 = 0;
            }
            v157 = &v144[8 * v140];
            *(_QWORD *)v157 = 0;
            v121 = v157 + 8;
            while (v120 != v139)
            {
              v158 = *((_QWORD *)v120 - 1);
              v120 -= 8;
              *((_QWORD *)v157 - 1) = v158;
              v157 -= 8;
            }
            *((_QWORD *)this + 1) = v157;
            *((_QWORD *)this + 2) = v121;
            *((_QWORD *)this + 3) = &v144[8 * v143];
            if (v139)
              operator delete(v139);
          }
          else
          {
            *(_QWORD *)v120 = 0;
            v121 = v120 + 8;
          }
          *((_QWORD *)this + 2) = v121;
          v159 = *((_QWORD *)a2 + 1);
          if (v159 <= 0xFFFFFFFFFFFFFFF7 && v159 + 8 <= *((_QWORD *)a2 + 2))
          {
            *(v121 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v159);
LABEL_231:
            v160 = *((_QWORD *)a2 + 1) + 8;
            goto LABEL_251;
          }
          goto LABEL_248;
        case 5u:
          if (v25 != 2)
          {
            v123 = (char *)*((_QWORD *)this + 8);
            v122 = *((_QWORD *)this + 9);
            if ((unint64_t)v123 >= v122)
            {
              v145 = (char *)*v9;
              v146 = (v123 - (_BYTE *)*v9) >> 2;
              v147 = v146 + 1;
              if ((unint64_t)(v146 + 1) >> 62)
LABEL_263:
                sub_10000D5F8();
              v148 = v122 - (_QWORD)v145;
              if (v148 >> 1 > v147)
                v147 = v148 >> 1;
              if ((unint64_t)v148 >= 0x7FFFFFFFFFFFFFFCLL)
                v149 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v149 = v147;
              if (v149)
              {
                v150 = (char *)sub_100020E2C((uint64_t)v10, v149);
                v145 = (char *)*((_QWORD *)this + 7);
                v123 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v150 = 0;
              }
              v161 = &v150[4 * v146];
              *(_DWORD *)v161 = 0;
              v124 = v161 + 4;
              while (v123 != v145)
              {
                v162 = *((_DWORD *)v123 - 1);
                v123 -= 4;
                *((_DWORD *)v161 - 1) = v162;
                v161 -= 4;
              }
              *((_QWORD *)this + 7) = v161;
              *((_QWORD *)this + 8) = v124;
              *((_QWORD *)this + 9) = &v150[4 * v149];
              if (v145)
                operator delete(v145);
            }
            else
            {
              *(_DWORD *)v123 = 0;
              v124 = v123 + 4;
            }
            *((_QWORD *)this + 8) = v124;
            goto LABEL_246;
          }
          if ((PB::Reader::placeMark(a2, v169) & 1) != 0)
            return 0;
          v53 = *((_QWORD *)a2 + 1);
          v54 = *((_QWORD *)a2 + 2);
          while (v53 < v54 && !*((_BYTE *)a2 + 24))
          {
            v56 = (char *)*((_QWORD *)this + 8);
            v55 = *((_QWORD *)this + 9);
            if ((unint64_t)v56 >= v55)
            {
              v58 = (char *)*v9;
              v59 = (v56 - (_BYTE *)*v9) >> 2;
              v60 = v59 + 1;
              if ((unint64_t)(v59 + 1) >> 62)
                goto LABEL_263;
              v61 = v55 - (_QWORD)v58;
              if (v61 >> 1 > v60)
                v60 = v61 >> 1;
              if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
                v62 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v62 = v60;
              if (v62)
              {
                v63 = (char *)sub_100020E2C((uint64_t)v10, v62);
                v58 = (char *)*((_QWORD *)this + 7);
                v56 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v63 = 0;
              }
              v64 = &v63[4 * v59];
              *(_DWORD *)v64 = 0;
              v57 = v64 + 4;
              while (v56 != v58)
              {
                v65 = *((_DWORD *)v56 - 1);
                v56 -= 4;
                *((_DWORD *)v64 - 1) = v65;
                v64 -= 4;
              }
              *((_QWORD *)this + 7) = v64;
              *((_QWORD *)this + 8) = v57;
              *((_QWORD *)this + 9) = &v63[4 * v62];
              if (v58)
                operator delete(v58);
            }
            else
            {
              *(_DWORD *)v56 = 0;
              v57 = v56 + 4;
            }
            *((_QWORD *)this + 8) = v57;
            v66 = *((_QWORD *)a2 + 1);
            if (v66 > 0xFFFFFFFFFFFFFFFBLL || v66 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_180;
            *(v57 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v66);
            v54 = *((_QWORD *)a2 + 2);
            v53 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v53;
          }
          goto LABEL_181;
        case 6u:
          if (v25 == 2)
          {
            if ((PB::Reader::placeMark(a2, v169) & 1) != 0)
              return 0;
            v67 = *((_QWORD *)a2 + 1);
            v68 = *((_QWORD *)a2 + 2);
            while (v67 < v68 && !*((_BYTE *)a2 + 24))
            {
              v70 = (char *)*((_QWORD *)this + 5);
              v69 = *((_QWORD *)this + 6);
              if ((unint64_t)v70 >= v69)
              {
                v72 = (char *)*v8;
                v73 = (v70 - (_BYTE *)*v8) >> 2;
                v74 = v73 + 1;
                if ((unint64_t)(v73 + 1) >> 62)
                  goto LABEL_264;
                v75 = v69 - (_QWORD)v72;
                if (v75 >> 1 > v74)
                  v74 = v75 >> 1;
                if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFFCLL)
                  v76 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v76 = v74;
                if (v76)
                {
                  v77 = (char *)sub_100020E2C((uint64_t)v168, v76);
                  v72 = (char *)*((_QWORD *)this + 4);
                  v70 = (char *)*((_QWORD *)this + 5);
                }
                else
                {
                  v77 = 0;
                }
                v78 = &v77[4 * v73];
                *(_DWORD *)v78 = 0;
                v71 = v78 + 4;
                while (v70 != v72)
                {
                  v79 = *((_DWORD *)v70 - 1);
                  v70 -= 4;
                  *((_DWORD *)v78 - 1) = v79;
                  v78 -= 4;
                }
                *((_QWORD *)this + 4) = v78;
                *((_QWORD *)this + 5) = v71;
                *((_QWORD *)this + 6) = &v77[4 * v76];
                if (v72)
                  operator delete(v72);
              }
              else
              {
                *(_DWORD *)v70 = 0;
                v71 = v70 + 4;
              }
              *((_QWORD *)this + 5) = v71;
              v80 = *((_QWORD *)a2 + 1);
              if (v80 > 0xFFFFFFFFFFFFFFFBLL || v80 + 4 > *((_QWORD *)a2 + 2))
              {
LABEL_180:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v71 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v80);
              v68 = *((_QWORD *)a2 + 2);
              v67 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v67;
            }
LABEL_181:
            PB::Reader::recallMark(a2, v169);
          }
          else
          {
            v126 = (char *)*((_QWORD *)this + 5);
            v125 = *((_QWORD *)this + 6);
            if ((unint64_t)v126 >= v125)
            {
              v151 = (char *)*v8;
              v152 = (v126 - (_BYTE *)*v8) >> 2;
              v153 = v152 + 1;
              if ((unint64_t)(v152 + 1) >> 62)
LABEL_264:
                sub_10000D5F8();
              v154 = v125 - (_QWORD)v151;
              if (v154 >> 1 > v153)
                v153 = v154 >> 1;
              if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFFCLL)
                v155 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v155 = v153;
              if (v155)
              {
                v156 = (char *)sub_100020E2C((uint64_t)v168, v155);
                v151 = (char *)*((_QWORD *)this + 4);
                v126 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v156 = 0;
              }
              v163 = &v156[4 * v152];
              *(_DWORD *)v163 = 0;
              v124 = v163 + 4;
              while (v126 != v151)
              {
                v164 = *((_DWORD *)v126 - 1);
                v126 -= 4;
                *((_DWORD *)v163 - 1) = v164;
                v163 -= 4;
              }
              *((_QWORD *)this + 4) = v163;
              *((_QWORD *)this + 5) = v124;
              *((_QWORD *)this + 6) = &v156[4 * v155];
              if (v151)
                operator delete(v151);
            }
            else
            {
              *(_DWORD *)v126 = 0;
              v124 = v126 + 4;
            }
            *((_QWORD *)this + 5) = v124;
LABEL_246:
            v165 = *((_QWORD *)a2 + 1);
            if (v165 <= 0xFFFFFFFFFFFFFFFBLL && v165 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v124 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v165);
LABEL_250:
              v160 = *((_QWORD *)a2 + 1) + 4;
LABEL_251:
              *((_QWORD *)a2 + 1) = v160;
            }
            else
            {
LABEL_248:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_252:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 7u:
          *((_WORD *)this + 60) |= 0x80u;
          v81 = *((_QWORD *)a2 + 1);
          if (v81 >= *((_QWORD *)a2 + 2))
          {
            v84 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v82 = v81 + 1;
            v83 = *(unsigned __int8 *)(*(_QWORD *)a2 + v81);
            *((_QWORD *)a2 + 1) = v82;
            v84 = v83 != 0;
          }
          *((_BYTE *)this + 116) = v84;
          goto LABEL_252;
        case 8u:
          *((_WORD *)this + 60) |= 0x100u;
          v85 = *((_QWORD *)a2 + 1);
          if (v85 >= *((_QWORD *)a2 + 2))
          {
            v88 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v86 = v85 + 1;
            v87 = *(unsigned __int8 *)(*(_QWORD *)a2 + v85);
            *((_QWORD *)a2 + 1) = v86;
            v88 = v87 != 0;
          }
          *((_BYTE *)this + 117) = v88;
          goto LABEL_252;
        case 9u:
          *((_WORD *)this + 60) |= 4u;
          v89 = *((_QWORD *)a2 + 1);
          if (v89 > 0xFFFFFFFFFFFFFFFBLL || v89 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_248;
          *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v89);
          goto LABEL_250;
        case 0xAu:
          *((_WORD *)this + 60) |= 8u;
          v90 = *((_QWORD *)a2 + 1);
          if (v90 > 0xFFFFFFFFFFFFFFFBLL || v90 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_248;
          *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v90);
          goto LABEL_250;
        case 0xBu:
          *((_WORD *)this + 60) |= 0x40u;
          v91 = *((_QWORD *)a2 + 1);
          v92 = *((_QWORD *)a2 + 2);
          v93 = *(_QWORD *)a2;
          if (v91 <= 0xFFFFFFFFFFFFFFF5 && v91 + 10 <= v92)
          {
            v94 = 0;
            v95 = 0;
            v96 = 0;
            do
            {
              v97 = v91 + 1;
              *((_QWORD *)a2 + 1) = v91 + 1;
              v98 = *(_BYTE *)(v93 + v91);
              v96 |= (unint64_t)(v98 & 0x7F) << v94;
              if ((v98 & 0x80) == 0)
                goto LABEL_215;
              v94 += 7;
              v91 = v97;
              v19 = v95++ > 8;
            }
            while (!v19);
LABEL_165:
            LODWORD(v96) = 0;
            goto LABEL_215;
          }
          v127 = 0;
          v128 = 0;
          v96 = 0;
          if (v92 <= v91)
            v92 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v92 == v91)
            {
              LODWORD(v96) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v129 = v91 + 1;
              v130 = *(_BYTE *)(v93 + v91);
              *((_QWORD *)a2 + 1) = v129;
              v96 |= (unint64_t)(v130 & 0x7F) << v127;
              if (v130 < 0)
              {
                v127 += 7;
                v91 = v129;
                v19 = v128++ > 8;
                if (v19)
                  goto LABEL_165;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v96) = 0;
            }
            break;
          }
LABEL_215:
          *((_DWORD *)this + 28) = v96;
          goto LABEL_252;
        case 0xCu:
          *((_WORD *)this + 60) |= 0x20u;
          v99 = *((_QWORD *)a2 + 1);
          v100 = *((_QWORD *)a2 + 2);
          v101 = *(_QWORD *)a2;
          if (v99 <= 0xFFFFFFFFFFFFFFF5 && v99 + 10 <= v100)
          {
            v102 = 0;
            v103 = 0;
            v104 = 0;
            do
            {
              v105 = v99 + 1;
              *((_QWORD *)a2 + 1) = v99 + 1;
              v106 = *(_BYTE *)(v101 + v99);
              v104 |= (unint64_t)(v106 & 0x7F) << v102;
              if ((v106 & 0x80) == 0)
                goto LABEL_218;
              v102 += 7;
              v99 = v105;
              v19 = v103++ > 8;
            }
            while (!v19);
LABEL_172:
            LODWORD(v104) = 0;
            goto LABEL_218;
          }
          v131 = 0;
          v132 = 0;
          v104 = 0;
          if (v100 <= v99)
            v100 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v100 == v99)
            {
              LODWORD(v104) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v133 = v99 + 1;
              v134 = *(_BYTE *)(v101 + v99);
              *((_QWORD *)a2 + 1) = v133;
              v104 |= (unint64_t)(v134 & 0x7F) << v131;
              if (v134 < 0)
              {
                v131 += 7;
                v99 = v133;
                v19 = v132++ > 8;
                if (v19)
                  goto LABEL_172;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v104) = 0;
            }
            break;
          }
LABEL_218:
          *((_DWORD *)this + 27) = v104;
          goto LABEL_252;
        case 0xDu:
          *((_WORD *)this + 60) |= 0x10u;
          v107 = *((_QWORD *)a2 + 1);
          v108 = *((_QWORD *)a2 + 2);
          v109 = *(_QWORD *)a2;
          if (v107 <= 0xFFFFFFFFFFFFFFF5 && v107 + 10 <= v108)
          {
            v110 = 0;
            v111 = 0;
            v112 = 0;
            do
            {
              v113 = v107 + 1;
              *((_QWORD *)a2 + 1) = v107 + 1;
              v114 = *(_BYTE *)(v109 + v107);
              v112 |= (unint64_t)(v114 & 0x7F) << v110;
              if ((v114 & 0x80) == 0)
                goto LABEL_221;
              v110 += 7;
              v107 = v113;
              v19 = v111++ > 8;
            }
            while (!v19);
LABEL_179:
            LODWORD(v112) = 0;
            goto LABEL_221;
          }
          v135 = 0;
          v136 = 0;
          v112 = 0;
          if (v108 <= v107)
            v108 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v108 == v107)
            {
              LODWORD(v112) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v137 = v107 + 1;
              v138 = *(_BYTE *)(v109 + v107);
              *((_QWORD *)a2 + 1) = v137;
              v112 |= (unint64_t)(v138 & 0x7F) << v135;
              if (v138 < 0)
              {
                v135 += 7;
                v107 = v137;
                v19 = v136++ > 8;
                if (v19)
                  goto LABEL_179;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v112) = 0;
            }
            break;
          }
LABEL_221:
          *((_DWORD *)this + 26) = v112;
          goto LABEL_252;
        default:
          if ((PB::Reader::skip(a2, v16 >> 3, v25, 0) & 1) == 0)
            return 0;
          goto LABEL_252;
      }
    }
    v20 = 0;
    v21 = 0;
    v16 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v22 = v2 + 1;
      v23 = *(_BYTE *)(v13 + v2);
      *((_QWORD *)a2 + 1) = v22;
      v16 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0)
        goto LABEL_21;
      v20 += 7;
      v2 = v22;
      if (v21++ >= 9)
      {
LABEL_20:
        v16 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaTriggerDebug::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;
  double *v5;
  double *v6;
  double v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  __int16 v14;

  v3 = this;
  v4 = *(_WORD *)(this + 120);
  if ((v4 & 2) == 0)
  {
    if ((*(_WORD *)(this + 120) & 0x200) == 0)
      goto LABEL_3;
LABEL_23:
    this = PB::Writer::write(a2, *(_BYTE *)(v3 + 118), 2u);
    if ((*(_WORD *)(v3 + 120) & 1) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 88), 1u);
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x200) != 0)
    goto LABEL_23;
LABEL_3:
  if ((v4 & 1) != 0)
LABEL_4:
    this = PB::Writer::write(a2, *(double *)(v3 + 80), 3u);
LABEL_5:
  v5 = *(double **)(v3 + 8);
  v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7, 4u);
  }
  v8 = *(float **)(v3 + 56);
  v9 = *(float **)(v3 + 64);
  while (v8 != v9)
  {
    v10 = *v8++;
    this = PB::Writer::write(a2, v10, 5u);
  }
  v11 = *(float **)(v3 + 32);
  v12 = *(float **)(v3 + 40);
  while (v11 != v12)
  {
    v13 = *v11++;
    this = PB::Writer::write(a2, v13, 6u);
  }
  v14 = *(_WORD *)(v3 + 120);
  if ((v14 & 0x80) != 0)
  {
    this = PB::Writer::write(a2, *(_BYTE *)(v3 + 116), 7u);
    v14 = *(_WORD *)(v3 + 120);
    if ((v14 & 0x100) == 0)
    {
LABEL_16:
      if ((v14 & 4) == 0)
        goto LABEL_17;
      goto LABEL_27;
    }
  }
  else if ((*(_WORD *)(v3 + 120) & 0x100) == 0)
  {
    goto LABEL_16;
  }
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 117), 8u);
  v14 = *(_WORD *)(v3 + 120);
  if ((v14 & 4) == 0)
  {
LABEL_17:
    if ((v14 & 8) == 0)
      goto LABEL_18;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 9u);
  v14 = *(_WORD *)(v3 + 120);
  if ((v14 & 8) == 0)
  {
LABEL_18:
    if ((v14 & 0x40) == 0)
      goto LABEL_19;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 0xAu);
  v14 = *(_WORD *)(v3 + 120);
  if ((v14 & 0x40) == 0)
  {
LABEL_19:
    if ((v14 & 0x20) == 0)
      goto LABEL_20;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 112), 0xBu);
  v14 = *(_WORD *)(v3 + 120);
  if ((v14 & 0x20) == 0)
  {
LABEL_20:
    if ((v14 & 0x10) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 104), 0xDu);
  }
LABEL_30:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 108), 0xCu);
  if ((*(_WORD *)(v3 + 120) & 0x10) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 104), 0xDu);
  return this;
}

uint64_t CMMsl::KappaTriggerDebug::hash_value(CMMsl::KappaTriggerDebug *this)
{
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *((_WORD *)this + 60);
  if ((v2 & 2) != 0)
  {
    v3 = *((_QWORD *)this + 11);
    if ((*((_WORD *)this + 60) & 0x200) != 0)
    {
LABEL_3:
      v4 = *((unsigned __int8 *)this + 118);
      if ((v2 & 1) != 0)
        goto LABEL_4;
LABEL_9:
      v5 = 0;
      goto LABEL_10;
    }
  }
  else
  {
    v3 = 0;
    if ((*((_WORD *)this + 60) & 0x200) != 0)
      goto LABEL_3;
  }
  v4 = 0;
  if ((v2 & 1) == 0)
    goto LABEL_9;
LABEL_4:
  if (*((double *)this + 10) == 0.0)
    v5 = 0;
  else
    v5 = *((_QWORD *)this + 10);
LABEL_10:
  v6 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  v7 = PBHashBytes(*((_QWORD *)this + 7), *((_QWORD *)this + 8) - *((_QWORD *)this + 7));
  v8 = PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
  v9 = *((_WORD *)this + 60);
  if ((v9 & 0x80) != 0)
  {
    v10 = *((unsigned __int8 *)this + 116);
    if ((*((_WORD *)this + 60) & 0x100) != 0)
    {
LABEL_12:
      v11 = *((unsigned __int8 *)this + 117);
      if ((v9 & 4) != 0)
        goto LABEL_13;
LABEL_24:
      v13 = 0;
      if ((v9 & 8) != 0)
        goto LABEL_16;
LABEL_25:
      v15 = 0;
      if ((v9 & 0x40) != 0)
        goto LABEL_19;
      goto LABEL_26;
    }
  }
  else
  {
    v10 = 0;
    if ((*((_WORD *)this + 60) & 0x100) != 0)
      goto LABEL_12;
  }
  v11 = 0;
  if ((v9 & 4) == 0)
    goto LABEL_24;
LABEL_13:
  v12 = *((float *)this + 24);
  v13 = LODWORD(v12);
  if (v12 == 0.0)
    v13 = 0;
  if ((v9 & 8) == 0)
    goto LABEL_25;
LABEL_16:
  v14 = *((float *)this + 25);
  v15 = LODWORD(v14);
  if (v14 == 0.0)
    v15 = 0;
  if ((v9 & 0x40) != 0)
  {
LABEL_19:
    v16 = *((unsigned int *)this + 28);
    if ((v9 & 0x20) != 0)
      goto LABEL_20;
LABEL_27:
    v17 = 0;
    if ((v9 & 0x10) != 0)
      goto LABEL_21;
LABEL_28:
    v18 = 0;
    return v4 ^ v3 ^ v5 ^ v6 ^ v7 ^ v8 ^ v10 ^ v11 ^ v13 ^ v15 ^ v16 ^ v17 ^ v18;
  }
LABEL_26:
  v16 = 0;
  if ((v9 & 0x20) == 0)
    goto LABEL_27;
LABEL_20:
  v17 = *((unsigned int *)this + 27);
  if ((v9 & 0x10) == 0)
    goto LABEL_28;
LABEL_21:
  v18 = *((unsigned int *)this + 26);
  return v4 ^ v3 ^ v5 ^ v6 ^ v7 ^ v8 ^ v10 ^ v11 ^ v13 ^ v15 ^ v16 ^ v17 ^ v18;
}

void CMMsl::KappaZgDetected::~KappaZgDetected(CMMsl::KappaZgDetected *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::KappaZgDetected::KappaZgDetected(uint64_t this, const CMMsl::KappaZgDetected *a2)
{
  uint64_t v2;

  *(_QWORD *)this = off_100352550;
  *(_DWORD *)(this + 16) = 0;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v2 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 16) = 1;
    *(_QWORD *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::KappaZgDetected::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  _QWORD v7[2];
  int v8;

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = *(_BYTE *)(a2 + 16) & 1;
    v8 = v4;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v7[0] = off_100352550;
    v7[1] = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD v8[2];
  int v9;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v3;
    v9 = v5;
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v8[0] = off_100352550;
    v8[1] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::KappaZgDetected *a2, CMMsl::KappaZgDetected *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  return this;
}

uint64_t CMMsl::KappaZgDetected::formatText(CMMsl::KappaZgDetected *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 16) & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaZgDetected::readFrom(CMMsl::KappaZgDetected *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 16) |= 1u;
        v20 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v3 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          else
            v2 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v2 == v20)
            {
              v24 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_43;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              v24 = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v24 = 0;
LABEL_42:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)a2 + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              v24 = 0;
              break;
            }
          }
        }
LABEL_43:
        *((_QWORD *)this + 1) = v24;
      }
      else
      {
        result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaZgDetected::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 16) & 1) != 0)
    return PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 8), 1u);
  return this;
}

uint64_t CMMsl::KappaZgDetected::hash_value(CMMsl::KappaZgDetected *this)
{
  if ((*((_BYTE *)this + 16) & 1) != 0)
    return *((_QWORD *)this + 1);
  else
    return 0;
}

void CMMsl::KappaZgResult::~KappaZgResult(CMMsl::KappaZgResult *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::KappaZgResult::KappaZgResult(uint64_t this, const CMMsl::KappaZgResult *a2)
{
  uint64_t v2;
  unint64_t v3;
  char v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;

  *(_QWORD *)this = off_100352588;
  *(_QWORD *)(this + 164) = 0;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x100000000) != 0)
  {
    v4 = *((_BYTE *)a2 + 160);
    v3 = (unint64_t)&_mh_execute_header;
    *(_QWORD *)(this + 164) = &_mh_execute_header;
    *(_BYTE *)(this + 160) = v4;
    v2 = *(_QWORD *)((char *)a2 + 164);
    if ((v2 & 0x100000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x100000) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 28);
    v3 |= 0x100000uLL;
    *(_QWORD *)(this + 164) = v3;
    *(_DWORD *)(this + 112) = v5;
    v2 = *(_QWORD *)((char *)a2 + 164);
  }
LABEL_6:
  if ((v2 & 0x80000) != 0)
  {
    v6 = *((_DWORD *)a2 + 27);
    v3 |= 0x80000uLL;
    *(_QWORD *)(this + 164) = v3;
    *(_DWORD *)(this + 108) = v6;
    v2 = *(_QWORD *)((char *)a2 + 164);
    if ((v2 & 0x1000000) == 0)
    {
LABEL_8:
      if ((v2 & 0x20000000) == 0)
        goto LABEL_9;
      goto LABEL_40;
    }
  }
  else if ((v2 & 0x1000000) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 32);
  v3 |= 0x1000000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 128) = v7;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_9:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_10;
    goto LABEL_41;
  }
LABEL_40:
  v8 = *((_DWORD *)a2 + 37);
  v3 |= 0x20000000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 148) = v8;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_10:
    if ((v2 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_42;
  }
LABEL_41:
  v9 = *((_DWORD *)a2 + 34);
  v3 |= 0x4000000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 136) = v9;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_12;
    goto LABEL_43;
  }
LABEL_42:
  v10 = *((_DWORD *)a2 + 39);
  v3 |= 0x80000000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 156) = v10;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x200000) == 0)
      goto LABEL_13;
    goto LABEL_44;
  }
LABEL_43:
  v11 = *((_DWORD *)a2 + 36);
  v3 |= 0x10000000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 144) = v11;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x200000) == 0)
  {
LABEL_13:
    if ((v2 & 0x400000) == 0)
      goto LABEL_14;
    goto LABEL_45;
  }
LABEL_44:
  v12 = *((_DWORD *)a2 + 29);
  v3 |= 0x200000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 116) = v12;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x400000) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0)
      goto LABEL_15;
    goto LABEL_46;
  }
LABEL_45:
  v13 = *((_DWORD *)a2 + 30);
  v3 |= 0x400000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 120) = v13;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x10) == 0)
  {
LABEL_15:
    if ((v2 & 8) == 0)
      goto LABEL_16;
    goto LABEL_47;
  }
LABEL_46:
  v14 = *((_QWORD *)a2 + 5);
  v3 |= 0x10uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_QWORD *)(this + 40) = v14;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 8) == 0)
  {
LABEL_16:
    if ((v2 & 4) == 0)
      goto LABEL_17;
    goto LABEL_48;
  }
LABEL_47:
  v15 = *((_QWORD *)a2 + 4);
  v3 |= 8uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_QWORD *)(this + 32) = v15;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 4) == 0)
  {
LABEL_17:
    if ((v2 & 0x8000) == 0)
      goto LABEL_18;
    goto LABEL_49;
  }
LABEL_48:
  v16 = *((_QWORD *)a2 + 3);
  v3 |= 4uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_QWORD *)(this + 24) = v16;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x8000) == 0)
  {
LABEL_18:
    if ((v2 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_50;
  }
LABEL_49:
  v17 = *((_DWORD *)a2 + 23);
  v3 |= 0x8000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 92) = v17;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x20000) == 0)
  {
LABEL_19:
    if ((v2 & 0x10000) == 0)
      goto LABEL_20;
    goto LABEL_51;
  }
LABEL_50:
  v18 = *((_DWORD *)a2 + 25);
  v3 |= 0x20000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 100) = v18;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x10000) == 0)
  {
LABEL_20:
    if ((v2 & 0x40000) == 0)
      goto LABEL_21;
    goto LABEL_52;
  }
LABEL_51:
  v19 = *((_DWORD *)a2 + 24);
  v3 |= 0x10000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 96) = v19;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x40000) == 0)
  {
LABEL_21:
    if ((v2 & 0x4000) == 0)
      goto LABEL_22;
    goto LABEL_53;
  }
LABEL_52:
  v20 = *((_DWORD *)a2 + 26);
  v3 |= 0x40000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 104) = v20;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x4000) == 0)
  {
LABEL_22:
    if ((v2 & 0x40) == 0)
      goto LABEL_23;
    goto LABEL_54;
  }
LABEL_53:
  v21 = *((_DWORD *)a2 + 22);
  v3 |= 0x4000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 88) = v21;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x40) == 0)
  {
LABEL_23:
    if ((v2 & 0x80) == 0)
      goto LABEL_24;
    goto LABEL_55;
  }
LABEL_54:
  v22 = *((_DWORD *)a2 + 14);
  v3 |= 0x40uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 56) = v22;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x80) == 0)
  {
LABEL_24:
    if ((v2 & 0x800) == 0)
      goto LABEL_25;
    goto LABEL_56;
  }
LABEL_55:
  v23 = *((_DWORD *)a2 + 15);
  v3 |= 0x80uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 60) = v23;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x800) == 0)
  {
LABEL_25:
    if ((v2 & 0x1000) == 0)
      goto LABEL_26;
    goto LABEL_57;
  }
LABEL_56:
  v24 = *((_DWORD *)a2 + 19);
  v3 |= 0x800uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 76) = v24;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x1000) == 0)
  {
LABEL_26:
    if ((v2 & 0x2000) == 0)
      goto LABEL_27;
    goto LABEL_58;
  }
LABEL_57:
  v25 = *((_DWORD *)a2 + 20);
  v3 |= 0x1000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 80) = v25;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x2000) == 0)
  {
LABEL_27:
    if ((v2 & 0x100) == 0)
      goto LABEL_28;
    goto LABEL_59;
  }
LABEL_58:
  v26 = *((_DWORD *)a2 + 21);
  v3 |= 0x2000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 84) = v26;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x100) == 0)
  {
LABEL_28:
    if ((v2 & 0x200) == 0)
      goto LABEL_29;
    goto LABEL_60;
  }
LABEL_59:
  v27 = *((_DWORD *)a2 + 16);
  v3 |= 0x100uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 64) = v27;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x200) == 0)
  {
LABEL_29:
    if ((v2 & 0x400) == 0)
      goto LABEL_30;
    goto LABEL_61;
  }
LABEL_60:
  v28 = *((_DWORD *)a2 + 17);
  v3 |= 0x200uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 68) = v28;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x400) == 0)
  {
LABEL_30:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_31;
    goto LABEL_62;
  }
LABEL_61:
  v29 = *((_DWORD *)a2 + 18);
  v3 |= 0x400uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 72) = v29;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_31:
    if ((v2 & 0x800000) == 0)
      goto LABEL_32;
    goto LABEL_63;
  }
LABEL_62:
  v30 = *((_DWORD *)a2 + 35);
  v3 |= 0x8000000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 140) = v30;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x800000) == 0)
  {
LABEL_32:
    if ((v2 & 0x20) == 0)
      goto LABEL_33;
    goto LABEL_64;
  }
LABEL_63:
  v31 = *((_DWORD *)a2 + 31);
  v3 |= 0x800000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 124) = v31;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x20) == 0)
  {
LABEL_33:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_34;
    goto LABEL_65;
  }
LABEL_64:
  v32 = *((_QWORD *)a2 + 6);
  v3 |= 0x20uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_QWORD *)(this + 48) = v32;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_35;
    goto LABEL_66;
  }
LABEL_65:
  v33 = *((_DWORD *)a2 + 33);
  v3 |= 0x2000000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 132) = v33;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_35:
    if ((v2 & 1) == 0)
      goto LABEL_36;
    goto LABEL_67;
  }
LABEL_66:
  v34 = *((_DWORD *)a2 + 38);
  v3 |= 0x40000000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 152) = v34;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 1) == 0)
  {
LABEL_36:
    if ((v2 & 2) == 0)
      return this;
LABEL_68:
    v36 = *((_QWORD *)a2 + 2);
    *(_QWORD *)(this + 164) = v3 | 2;
    *(_QWORD *)(this + 16) = v36;
    return this;
  }
LABEL_67:
  v35 = *((_QWORD *)a2 + 1);
  v3 |= 1uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_QWORD *)(this + 8) = v35;
  if ((*(_QWORD *)((_BYTE *)a2 + 164) & 2) != 0)
    goto LABEL_68;
  return this;
}

CMMsl *CMMsl::KappaZgResult::operator=(CMMsl *a1, const CMMsl::KappaZgResult *a2)
{
  CMMsl::KappaZgResult *v3;
  _BYTE v5[176];

  if (a1 != a2)
  {
    CMMsl::KappaZgResult::KappaZgResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaZgResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaZgResult *a2, CMMsl::KappaZgResult *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  float result;
  uint64_t v26;
  uint64_t v27;

  v3 = *(_QWORD *)((char *)this + 164);
  *(_QWORD *)((char *)this + 164) = *(_QWORD *)((char *)a2 + 164);
  *(_QWORD *)((char *)a2 + 164) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 160);
  *((_BYTE *)this + 160) = *((_BYTE *)a2 + 160);
  *((_BYTE *)a2 + 160) = v3;
  LODWORD(v3) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v3;
  LODWORD(v3) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v3;
  v4 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v4;
  v5 = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v5;
  v6 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v6;
  v7 = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v7;
  v8 = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v8;
  LODWORD(v3) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v3;
  LODWORD(v3) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v3;
  v9 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v9;
  v10 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v10;
  v11 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v11;
  LODWORD(v11) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v11;
  v12 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v12;
  LODWORD(v11) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v11;
  v13 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v13;
  v14 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v14;
  v15 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v15;
  LODWORD(v11) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v11;
  v16 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v16;
  v17 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v17;
  v18 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v18;
  v19 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v19;
  v20 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v20;
  v21 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v21;
  v22 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v22;
  LODWORD(v11) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v11;
  v23 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v23;
  v24 = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v24;
  result = *((float *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((float *)a2 + 38) = result;
  v26 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v26;
  v27 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v27;
  return result;
}

float CMMsl::KappaZgResult::KappaZgResult(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100352588;
  *(_QWORD *)(a1 + 164) = *(_QWORD *)(a2 + 164);
  *(_QWORD *)(a2 + 164) = 0;
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  result = *(float *)(a2 + 152);
  *(float *)(a1 + 152) = result;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return result;
}

CMMsl *CMMsl::KappaZgResult::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::KappaZgResult *v3;
  _BYTE v5[176];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaZgResult::KappaZgResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaZgResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaZgResult::formatText(CMMsl::KappaZgResult *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(a2, "configAccelThresholdNorm", *((float *)this + 14));
    v5 = *(_QWORD *)((char *)this + 164);
    if ((v5 & 0x80) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_38;
    }
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "configHardware", *((_DWORD *)this + 15));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "configIx", *((float *)this + 16));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "configIy", *((float *)this + 17));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 0x800) == 0)
      goto LABEL_7;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "configIz", *((float *)this + 18));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x800) == 0)
  {
LABEL_7:
    if ((v5 & 0x1000) == 0)
      goto LABEL_8;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "configLx", *((float *)this + 19));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x1000) == 0)
  {
LABEL_8:
    if ((v5 & 0x2000) == 0)
      goto LABEL_9;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "configLy", *((float *)this + 20));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x2000) == 0)
  {
LABEL_9:
    if ((v5 & 0x4000) == 0)
      goto LABEL_10;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "configLz", *((float *)this + 21));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x4000) == 0)
  {
LABEL_10:
    if ((v5 & 0x8000) == 0)
      goto LABEL_11;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "configZgThreshold", *((float *)this + 22));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x8000) == 0)
  {
LABEL_11:
    if ((v5 & 0x10000) == 0)
      goto LABEL_12;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "debugCountOfAccelDataDrop", *((_DWORD *)this + 23));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x10000) == 0)
  {
LABEL_12:
    if ((v5 & 0x20000) == 0)
      goto LABEL_13;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "debugCountOfDmDataDrop", *((_DWORD *)this + 24));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x20000) == 0)
  {
LABEL_13:
    if ((v5 & 0x40000) == 0)
      goto LABEL_14;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "debugMaxTimeBetweenAccelSample", *((float *)this + 25));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x40000) == 0)
  {
LABEL_14:
    if ((v5 & 1) == 0)
      goto LABEL_15;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "debugMaxTimeBetweenDmSample", *((float *)this + 26));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 1) == 0)
  {
LABEL_15:
    if ((v5 & 2) == 0)
      goto LABEL_16;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "epochFirstTimestamp", *((_QWORD *)this + 1));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 2) == 0)
  {
LABEL_16:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_17;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "epochLastTimestamp", *((_QWORD *)this + 2));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_17:
    if ((v5 & 0x80000) == 0)
      goto LABEL_18;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "freefallTpQualifier", *((_BYTE *)this + 160));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x80000) == 0)
  {
LABEL_18:
    if ((v5 & 0x100000) == 0)
      goto LABEL_19;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "metaCountOfFreefallImpactPassed", *((_DWORD *)this + 27));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x100000) == 0)
  {
LABEL_19:
    if ((v5 & 0x200000) == 0)
      goto LABEL_20;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "metaCountOfFreefallTimePassed", *((_DWORD *)this + 28));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x200000) == 0)
  {
LABEL_20:
    if ((v5 & 0x400000) == 0)
      goto LABEL_21;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "metaCountOfSigImpact", *((_DWORD *)this + 29));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x400000) == 0)
  {
LABEL_21:
    if ((v5 & 0x800000) == 0)
      goto LABEL_22;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "metaCountOfZgSegment", *((_DWORD *)this + 30));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x800000) == 0)
  {
LABEL_22:
    if ((v5 & 4) == 0)
      goto LABEL_23;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "metaCrossingCount", *((_DWORD *)this + 31));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 4) == 0)
  {
LABEL_23:
    if ((v5 & 8) == 0)
      goto LABEL_24;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "metaDtBwFirstAndLastFreeFall", *((_QWORD *)this + 3));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 8) == 0)
  {
LABEL_24:
    if ((v5 & 0x10) == 0)
      goto LABEL_25;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "metaDtBwFirstFreeFall", *((_QWORD *)this + 4));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x10) == 0)
  {
LABEL_25:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_26;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "metaDtBwFirstSigImpact", *((_QWORD *)this + 5));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_27;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "metaFreefallTime", *((float *)this + 32));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_28;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "metaFreefallTimeForImpact", *((float *)this + 33));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_29;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "metaMaxOfAccel", *((float *)this + 34));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_30;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "metaMaxPower", *((float *)this + 35));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_31;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "metaMaxZgSegmentTime", *((float *)this + 36));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_32;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "metaNormOfAccel", *((float *)this + 37));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_33;
LABEL_67:
    PB::TextFormatter::format(a2, "metaTotalZgTime", *((float *)this + 39));
    if ((*(_QWORD *)((_BYTE *)this + 164) & 0x20) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_34;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "metaNormOfImpact", *((float *)this + 38));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x80000000) != 0)
    goto LABEL_67;
LABEL_33:
  if ((v5 & 0x20) != 0)
LABEL_34:
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 6));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaZgResult::readFrom(CMMsl::KappaZgResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char v81;
  unsigned int v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char v89;
  unsigned int v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  char v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  char v106;
  unsigned int v107;
  uint64_t v108;
  unint64_t v109;
  char v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  char v117;
  unsigned int v118;
  uint64_t v119;
  unint64_t v120;
  char v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  char v132;
  unsigned int v133;
  uint64_t v134;
  unint64_t v135;
  char v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  char v140;
  unsigned int v141;
  uint64_t v142;
  unint64_t v143;
  char v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  char v150;
  unsigned int v151;
  uint64_t v152;
  unint64_t v153;
  char v154;
  uint64_t result;
  char v156;
  unsigned int v157;
  unint64_t v158;
  char v159;
  char v160;
  unsigned int v161;
  unint64_t v162;
  char v163;
  char v164;
  unsigned int v165;
  unint64_t v166;
  char v167;
  char v168;
  unsigned int v169;
  unint64_t v170;
  char v171;
  char v172;
  unsigned int v173;
  unint64_t v174;
  char v175;
  char v176;
  unsigned int v177;
  unint64_t v178;
  char v179;
  char v180;
  unsigned int v181;
  unint64_t v182;
  char v183;
  char v184;
  unsigned int v185;
  unint64_t v186;
  char v187;
  char v188;
  unsigned int v189;
  unint64_t v190;
  char v191;
  char v192;
  unsigned int v193;
  unint64_t v194;
  char v195;
  char v196;
  unsigned int v197;
  unint64_t v198;
  char v199;
  char v200;
  unsigned int v201;
  unint64_t v202;
  char v203;
  char v204;
  unsigned int v205;
  unint64_t v206;
  char v207;
  char v208;
  unsigned int v209;
  unint64_t v210;
  char v211;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          v20 = v11 >> 3;
          switch((v11 >> 3))
          {
            case 1u:
              *(_QWORD *)((char *)this + 164) |= (unint64_t)&_mh_execute_header;
              v21 = *((_QWORD *)a2 + 1);
              if (v21 >= *((_QWORD *)a2 + 2))
              {
                v24 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v22 = v21 + 1;
                v23 = *(unsigned __int8 *)(*(_QWORD *)a2 + v21);
                *((_QWORD *)a2 + 1) = v22;
                v24 = v23 != 0;
              }
              *((_BYTE *)this + 160) = v24;
              goto LABEL_282;
            case 2u:
              *(_QWORD *)((char *)this + 164) |= 0x100000uLL;
              v33 = *((_QWORD *)a2 + 1);
              v34 = *((_QWORD *)a2 + 2);
              v35 = *(_QWORD *)a2;
              if (v33 <= 0xFFFFFFFFFFFFFFF5 && v33 + 10 <= v34)
              {
                v36 = 0;
                v37 = 0;
                v38 = 0;
                do
                {
                  v39 = v33 + 1;
                  *((_QWORD *)a2 + 1) = v33 + 1;
                  v40 = *(_BYTE *)(v35 + v33);
                  v38 |= (unint64_t)(v40 & 0x7F) << v36;
                  if ((v40 & 0x80) == 0)
                    goto LABEL_294;
                  v36 += 7;
                  v33 = v39;
                  v14 = v37++ > 8;
                }
                while (!v14);
LABEL_195:
                LODWORD(v38) = 0;
                goto LABEL_294;
              }
              v160 = 0;
              v161 = 0;
              v38 = 0;
              if (v34 <= v33)
                v34 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v34 == v33)
                {
                  LODWORD(v38) = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v162 = v33 + 1;
                  v163 = *(_BYTE *)(v35 + v33);
                  *((_QWORD *)a2 + 1) = v162;
                  v38 |= (unint64_t)(v163 & 0x7F) << v160;
                  if (v163 < 0)
                  {
                    v160 += 7;
                    v33 = v162;
                    v14 = v161++ > 8;
                    if (v14)
                      goto LABEL_195;
                    continue;
                  }
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v38) = 0;
                }
                break;
              }
LABEL_294:
              *((_DWORD *)this + 28) = v38;
              goto LABEL_282;
            case 3u:
              *(_QWORD *)((char *)this + 164) |= 0x80000uLL;
              v41 = *((_QWORD *)a2 + 1);
              v42 = *((_QWORD *)a2 + 2);
              v43 = *(_QWORD *)a2;
              if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
              {
                v44 = 0;
                v45 = 0;
                v46 = 0;
                do
                {
                  v47 = v41 + 1;
                  *((_QWORD *)a2 + 1) = v41 + 1;
                  v48 = *(_BYTE *)(v43 + v41);
                  v46 |= (unint64_t)(v48 & 0x7F) << v44;
                  if ((v48 & 0x80) == 0)
                    goto LABEL_298;
                  v44 += 7;
                  v41 = v47;
                  v14 = v45++ > 8;
                }
                while (!v14);
LABEL_202:
                LODWORD(v46) = 0;
                goto LABEL_298;
              }
              v164 = 0;
              v165 = 0;
              v46 = 0;
              if (v42 <= v41)
                v42 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v42 == v41)
                {
                  LODWORD(v46) = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v166 = v41 + 1;
                  v167 = *(_BYTE *)(v43 + v41);
                  *((_QWORD *)a2 + 1) = v166;
                  v46 |= (unint64_t)(v167 & 0x7F) << v164;
                  if (v167 < 0)
                  {
                    v164 += 7;
                    v41 = v166;
                    v14 = v165++ > 8;
                    if (v14)
                      goto LABEL_202;
                    continue;
                  }
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v46) = 0;
                }
                break;
              }
LABEL_298:
              *((_DWORD *)this + 27) = v46;
              goto LABEL_282;
            case 4u:
              *(_QWORD *)((char *)this + 164) |= 0x1000000uLL;
              v49 = *((_QWORD *)a2 + 1);
              if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_170;
              *((_DWORD *)this + 32) = *(_DWORD *)(*(_QWORD *)a2 + v49);
              goto LABEL_281;
            case 5u:
              *(_QWORD *)((char *)this + 164) |= 0x20000000uLL;
              v50 = *((_QWORD *)a2 + 1);
              if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_170;
              *((_DWORD *)this + 37) = *(_DWORD *)(*(_QWORD *)a2 + v50);
              goto LABEL_281;
            case 6u:
              *(_QWORD *)((char *)this + 164) |= 0x4000000uLL;
              v51 = *((_QWORD *)a2 + 1);
              if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_170;
              *((_DWORD *)this + 34) = *(_DWORD *)(*(_QWORD *)a2 + v51);
              goto LABEL_281;
            case 7u:
              *(_QWORD *)((char *)this + 164) |= 0x80000000uLL;
              v52 = *((_QWORD *)a2 + 1);
              if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_170;
              *((_DWORD *)this + 39) = *(_DWORD *)(*(_QWORD *)a2 + v52);
              goto LABEL_281;
            case 8u:
              *(_QWORD *)((char *)this + 164) |= 0x10000000uLL;
              v53 = *((_QWORD *)a2 + 1);
              if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_170;
              *((_DWORD *)this + 36) = *(_DWORD *)(*(_QWORD *)a2 + v53);
              goto LABEL_281;
            case 9u:
              *(_QWORD *)((char *)this + 164) |= 0x200000uLL;
              v54 = *((_QWORD *)a2 + 1);
              v55 = *((_QWORD *)a2 + 2);
              v56 = *(_QWORD *)a2;
              if (v54 <= 0xFFFFFFFFFFFFFFF5 && v54 + 10 <= v55)
              {
                v57 = 0;
                v58 = 0;
                v59 = 0;
                do
                {
                  v60 = v54 + 1;
                  *((_QWORD *)a2 + 1) = v54 + 1;
                  v61 = *(_BYTE *)(v56 + v54);
                  v59 |= (unint64_t)(v61 & 0x7F) << v57;
                  if ((v61 & 0x80) == 0)
                    goto LABEL_302;
                  v57 += 7;
                  v54 = v60;
                  v14 = v58++ > 8;
                }
                while (!v14);
LABEL_209:
                LODWORD(v59) = 0;
                goto LABEL_302;
              }
              v168 = 0;
              v169 = 0;
              v59 = 0;
              if (v55 <= v54)
                v55 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v55 == v54)
                {
                  LODWORD(v59) = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v170 = v54 + 1;
                  v171 = *(_BYTE *)(v56 + v54);
                  *((_QWORD *)a2 + 1) = v170;
                  v59 |= (unint64_t)(v171 & 0x7F) << v168;
                  if (v171 < 0)
                  {
                    v168 += 7;
                    v54 = v170;
                    v14 = v169++ > 8;
                    if (v14)
                      goto LABEL_209;
                    continue;
                  }
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v59) = 0;
                }
                break;
              }
LABEL_302:
              *((_DWORD *)this + 29) = v59;
              goto LABEL_282;
            case 0xAu:
              *(_QWORD *)((char *)this + 164) |= 0x400000uLL;
              v62 = *((_QWORD *)a2 + 1);
              v63 = *((_QWORD *)a2 + 2);
              v64 = *(_QWORD *)a2;
              if (v62 <= 0xFFFFFFFFFFFFFFF5 && v62 + 10 <= v63)
              {
                v65 = 0;
                v66 = 0;
                v67 = 0;
                do
                {
                  v68 = v62 + 1;
                  *((_QWORD *)a2 + 1) = v62 + 1;
                  v69 = *(_BYTE *)(v64 + v62);
                  v67 |= (unint64_t)(v69 & 0x7F) << v65;
                  if ((v69 & 0x80) == 0)
                    goto LABEL_306;
                  v65 += 7;
                  v62 = v68;
                  v14 = v66++ > 8;
                }
                while (!v14);
LABEL_216:
                LODWORD(v67) = 0;
                goto LABEL_306;
              }
              v172 = 0;
              v173 = 0;
              v67 = 0;
              if (v63 <= v62)
                v63 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v63 == v62)
                {
                  LODWORD(v67) = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v174 = v62 + 1;
                  v175 = *(_BYTE *)(v64 + v62);
                  *((_QWORD *)a2 + 1) = v174;
                  v67 |= (unint64_t)(v175 & 0x7F) << v172;
                  if (v175 < 0)
                  {
                    v172 += 7;
                    v62 = v174;
                    v14 = v173++ > 8;
                    if (v14)
                      goto LABEL_216;
                    continue;
                  }
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v67) = 0;
                }
                break;
              }
LABEL_306:
              *((_DWORD *)this + 30) = v67;
              goto LABEL_282;
            case 0xBu:
              *(_QWORD *)((char *)this + 164) |= 0x10uLL;
              v70 = *((_QWORD *)a2 + 1);
              v71 = *((_QWORD *)a2 + 2);
              v72 = *(_QWORD *)a2;
              if (v70 <= 0xFFFFFFFFFFFFFFF5 && v70 + 10 <= v71)
              {
                v73 = 0;
                v74 = 0;
                v75 = 0;
                do
                {
                  v76 = v70 + 1;
                  *((_QWORD *)a2 + 1) = v70 + 1;
                  v77 = *(_BYTE *)(v72 + v70);
                  v75 |= (unint64_t)(v77 & 0x7F) << v73;
                  if ((v77 & 0x80) == 0)
                    goto LABEL_310;
                  v73 += 7;
                  v70 = v76;
                  v14 = v74++ > 8;
                }
                while (!v14);
LABEL_223:
                v75 = 0;
                goto LABEL_310;
              }
              v176 = 0;
              v177 = 0;
              v75 = 0;
              if (v71 <= v70)
                v71 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v71 == v70)
                {
                  v75 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v178 = v70 + 1;
                  v179 = *(_BYTE *)(v72 + v70);
                  *((_QWORD *)a2 + 1) = v178;
                  v75 |= (unint64_t)(v179 & 0x7F) << v176;
                  if (v179 < 0)
                  {
                    v176 += 7;
                    v70 = v178;
                    v14 = v177++ > 8;
                    if (v14)
                      goto LABEL_223;
                    continue;
                  }
                  if (*((_BYTE *)a2 + 24))
                    v75 = 0;
                }
                break;
              }
LABEL_310:
              *((_QWORD *)this + 5) = v75;
              goto LABEL_282;
            case 0xCu:
              *(_QWORD *)((char *)this + 164) |= 8uLL;
              v78 = *((_QWORD *)a2 + 1);
              v79 = *((_QWORD *)a2 + 2);
              v80 = *(_QWORD *)a2;
              if (v78 <= 0xFFFFFFFFFFFFFFF5 && v78 + 10 <= v79)
              {
                v81 = 0;
                v82 = 0;
                v83 = 0;
                do
                {
                  v84 = v78 + 1;
                  *((_QWORD *)a2 + 1) = v78 + 1;
                  v85 = *(_BYTE *)(v80 + v78);
                  v83 |= (unint64_t)(v85 & 0x7F) << v81;
                  if ((v85 & 0x80) == 0)
                    goto LABEL_314;
                  v81 += 7;
                  v78 = v84;
                  v14 = v82++ > 8;
                }
                while (!v14);
LABEL_230:
                v83 = 0;
                goto LABEL_314;
              }
              v180 = 0;
              v181 = 0;
              v83 = 0;
              if (v79 <= v78)
                v79 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v79 == v78)
                {
                  v83 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v182 = v78 + 1;
                  v183 = *(_BYTE *)(v80 + v78);
                  *((_QWORD *)a2 + 1) = v182;
                  v83 |= (unint64_t)(v183 & 0x7F) << v180;
                  if (v183 < 0)
                  {
                    v180 += 7;
                    v78 = v182;
                    v14 = v181++ > 8;
                    if (v14)
                      goto LABEL_230;
                    continue;
                  }
                  if (*((_BYTE *)a2 + 24))
                    v83 = 0;
                }
                break;
              }
LABEL_314:
              *((_QWORD *)this + 4) = v83;
              goto LABEL_282;
            case 0xDu:
              *(_QWORD *)((char *)this + 164) |= 4uLL;
              v86 = *((_QWORD *)a2 + 1);
              v87 = *((_QWORD *)a2 + 2);
              v88 = *(_QWORD *)a2;
              if (v86 <= 0xFFFFFFFFFFFFFFF5 && v86 + 10 <= v87)
              {
                v89 = 0;
                v90 = 0;
                v91 = 0;
                do
                {
                  v92 = v86 + 1;
                  *((_QWORD *)a2 + 1) = v86 + 1;
                  v93 = *(_BYTE *)(v88 + v86);
                  v91 |= (unint64_t)(v93 & 0x7F) << v89;
                  if ((v93 & 0x80) == 0)
                    goto LABEL_318;
                  v89 += 7;
                  v86 = v92;
                  v14 = v90++ > 8;
                }
                while (!v14);
LABEL_237:
                v91 = 0;
                goto LABEL_318;
              }
              v184 = 0;
              v185 = 0;
              v91 = 0;
              if (v87 <= v86)
                v87 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v87 == v86)
                {
                  v91 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v186 = v86 + 1;
                  v187 = *(_BYTE *)(v88 + v86);
                  *((_QWORD *)a2 + 1) = v186;
                  v91 |= (unint64_t)(v187 & 0x7F) << v184;
                  if (v187 < 0)
                  {
                    v184 += 7;
                    v86 = v186;
                    v14 = v185++ > 8;
                    if (v14)
                      goto LABEL_237;
                    continue;
                  }
                  if (*((_BYTE *)a2 + 24))
                    v91 = 0;
                }
                break;
              }
LABEL_318:
              *((_QWORD *)this + 3) = v91;
              goto LABEL_282;
            case 0xEu:
              *(_QWORD *)((char *)this + 164) |= 0x8000uLL;
              v94 = *((_QWORD *)a2 + 1);
              v95 = *((_QWORD *)a2 + 2);
              v96 = *(_QWORD *)a2;
              if (v94 <= 0xFFFFFFFFFFFFFFF5 && v94 + 10 <= v95)
              {
                v97 = 0;
                v98 = 0;
                v99 = 0;
                do
                {
                  v100 = v94 + 1;
                  *((_QWORD *)a2 + 1) = v94 + 1;
                  v101 = *(_BYTE *)(v96 + v94);
                  v99 |= (unint64_t)(v101 & 0x7F) << v97;
                  if ((v101 & 0x80) == 0)
                    goto LABEL_322;
                  v97 += 7;
                  v94 = v100;
                  v14 = v98++ > 8;
                }
                while (!v14);
LABEL_244:
                LODWORD(v99) = 0;
                goto LABEL_322;
              }
              v188 = 0;
              v189 = 0;
              v99 = 0;
              if (v95 <= v94)
                v95 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v95 == v94)
                {
                  LODWORD(v99) = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v190 = v94 + 1;
                  v191 = *(_BYTE *)(v96 + v94);
                  *((_QWORD *)a2 + 1) = v190;
                  v99 |= (unint64_t)(v191 & 0x7F) << v188;
                  if (v191 < 0)
                  {
                    v188 += 7;
                    v94 = v190;
                    v14 = v189++ > 8;
                    if (v14)
                      goto LABEL_244;
                    continue;
                  }
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v99) = 0;
                }
                break;
              }
LABEL_322:
              *((_DWORD *)this + 23) = v99;
              goto LABEL_282;
            case 0xFu:
              *(_QWORD *)((char *)this + 164) |= 0x20000uLL;
              v102 = *((_QWORD *)a2 + 1);
              if (v102 > 0xFFFFFFFFFFFFFFFBLL || v102 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_170;
              *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v102);
              goto LABEL_281;
            case 0x10u:
              *(_QWORD *)((char *)this + 164) |= 0x10000uLL;
              v103 = *((_QWORD *)a2 + 1);
              v104 = *((_QWORD *)a2 + 2);
              v105 = *(_QWORD *)a2;
              if (v103 <= 0xFFFFFFFFFFFFFFF5 && v103 + 10 <= v104)
              {
                v106 = 0;
                v107 = 0;
                v108 = 0;
                do
                {
                  v109 = v103 + 1;
                  *((_QWORD *)a2 + 1) = v103 + 1;
                  v110 = *(_BYTE *)(v105 + v103);
                  v108 |= (unint64_t)(v110 & 0x7F) << v106;
                  if ((v110 & 0x80) == 0)
                    goto LABEL_326;
                  v106 += 7;
                  v103 = v109;
                  v14 = v107++ > 8;
                }
                while (!v14);
LABEL_251:
                LODWORD(v108) = 0;
                goto LABEL_326;
              }
              v192 = 0;
              v193 = 0;
              v108 = 0;
              if (v104 <= v103)
                v104 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v104 == v103)
                {
                  LODWORD(v108) = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v194 = v103 + 1;
                  v195 = *(_BYTE *)(v105 + v103);
                  *((_QWORD *)a2 + 1) = v194;
                  v108 |= (unint64_t)(v195 & 0x7F) << v192;
                  if (v195 < 0)
                  {
                    v192 += 7;
                    v103 = v194;
                    v14 = v193++ > 8;
                    if (v14)
                      goto LABEL_251;
                    continue;
                  }
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v108) = 0;
                }
                break;
              }
LABEL_326:
              *((_DWORD *)this + 24) = v108;
              goto LABEL_282;
            case 0x11u:
              *(_QWORD *)((char *)this + 164) |= 0x40000uLL;
              v111 = *((_QWORD *)a2 + 1);
              if (v111 > 0xFFFFFFFFFFFFFFFBLL || v111 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_170;
              *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v111);
              goto LABEL_281;
            case 0x12u:
              *(_QWORD *)((char *)this + 164) |= 0x4000uLL;
              v112 = *((_QWORD *)a2 + 1);
              if (v112 > 0xFFFFFFFFFFFFFFFBLL || v112 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_170;
              *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v112);
              goto LABEL_281;
            case 0x13u:
              *(_QWORD *)((char *)this + 164) |= 0x40uLL;
              v113 = *((_QWORD *)a2 + 1);
              if (v113 > 0xFFFFFFFFFFFFFFFBLL || v113 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_170;
              *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v113);
              goto LABEL_281;
            case 0x14u:
              *(_QWORD *)((char *)this + 164) |= 0x80uLL;
              v114 = *((_QWORD *)a2 + 1);
              v115 = *((_QWORD *)a2 + 2);
              v116 = *(_QWORD *)a2;
              if (v114 <= 0xFFFFFFFFFFFFFFF5 && v114 + 10 <= v115)
              {
                v117 = 0;
                v118 = 0;
                v119 = 0;
                do
                {
                  v120 = v114 + 1;
                  *((_QWORD *)a2 + 1) = v114 + 1;
                  v121 = *(_BYTE *)(v116 + v114);
                  v119 |= (unint64_t)(v121 & 0x7F) << v117;
                  if ((v121 & 0x80) == 0)
                    goto LABEL_330;
                  v117 += 7;
                  v114 = v120;
                  v14 = v118++ > 8;
                }
                while (!v14);
LABEL_258:
                LODWORD(v119) = 0;
                goto LABEL_330;
              }
              v196 = 0;
              v197 = 0;
              v119 = 0;
              if (v115 <= v114)
                v115 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v115 == v114)
                {
                  LODWORD(v119) = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v198 = v114 + 1;
                  v199 = *(_BYTE *)(v116 + v114);
                  *((_QWORD *)a2 + 1) = v198;
                  v119 |= (unint64_t)(v199 & 0x7F) << v196;
                  if (v199 < 0)
                  {
                    v196 += 7;
                    v114 = v198;
                    v14 = v197++ > 8;
                    if (v14)
                      goto LABEL_258;
                    continue;
                  }
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v119) = 0;
                }
                break;
              }
LABEL_330:
              *((_DWORD *)this + 15) = v119;
              goto LABEL_282;
            case 0x15u:
              *(_QWORD *)((char *)this + 164) |= 0x800uLL;
              v122 = *((_QWORD *)a2 + 1);
              if (v122 > 0xFFFFFFFFFFFFFFFBLL || v122 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_170;
              *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v122);
              goto LABEL_281;
            case 0x16u:
              *(_QWORD *)((char *)this + 164) |= 0x1000uLL;
              v123 = *((_QWORD *)a2 + 1);
              if (v123 > 0xFFFFFFFFFFFFFFFBLL || v123 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_170;
              *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v123);
              goto LABEL_281;
            case 0x17u:
              *(_QWORD *)((char *)this + 164) |= 0x2000uLL;
              v124 = *((_QWORD *)a2 + 1);
              if (v124 > 0xFFFFFFFFFFFFFFFBLL || v124 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_170;
              *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v124);
              goto LABEL_281;
            case 0x18u:
              *(_QWORD *)((char *)this + 164) |= 0x100uLL;
              v125 = *((_QWORD *)a2 + 1);
              if (v125 > 0xFFFFFFFFFFFFFFFBLL || v125 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_170;
              *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v125);
              goto LABEL_281;
            case 0x19u:
              *(_QWORD *)((char *)this + 164) |= 0x200uLL;
              v126 = *((_QWORD *)a2 + 1);
              if (v126 > 0xFFFFFFFFFFFFFFFBLL || v126 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_170;
              *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v126);
              goto LABEL_281;
            case 0x1Au:
              *(_QWORD *)((char *)this + 164) |= 0x400uLL;
              v127 = *((_QWORD *)a2 + 1);
              if (v127 > 0xFFFFFFFFFFFFFFFBLL || v127 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_170;
              *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v127);
              goto LABEL_281;
            case 0x1Bu:
              *(_QWORD *)((char *)this + 164) |= 0x8000000uLL;
              v128 = *((_QWORD *)a2 + 1);
              if (v128 > 0xFFFFFFFFFFFFFFFBLL || v128 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_170;
              *((_DWORD *)this + 35) = *(_DWORD *)(*(_QWORD *)a2 + v128);
              goto LABEL_281;
            case 0x1Cu:
              *(_QWORD *)((char *)this + 164) |= 0x800000uLL;
              v129 = *((_QWORD *)a2 + 1);
              v130 = *((_QWORD *)a2 + 2);
              v131 = *(_QWORD *)a2;
              if (v129 <= 0xFFFFFFFFFFFFFFF5 && v129 + 10 <= v130)
              {
                v132 = 0;
                v133 = 0;
                v134 = 0;
                do
                {
                  v135 = v129 + 1;
                  *((_QWORD *)a2 + 1) = v129 + 1;
                  v136 = *(_BYTE *)(v131 + v129);
                  v134 |= (unint64_t)(v136 & 0x7F) << v132;
                  if ((v136 & 0x80) == 0)
                    goto LABEL_334;
                  v132 += 7;
                  v129 = v135;
                  v14 = v133++ > 8;
                }
                while (!v14);
LABEL_265:
                LODWORD(v134) = 0;
                goto LABEL_334;
              }
              v200 = 0;
              v201 = 0;
              v134 = 0;
              if (v130 <= v129)
                v130 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v130 == v129)
                {
                  LODWORD(v134) = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v202 = v129 + 1;
                  v203 = *(_BYTE *)(v131 + v129);
                  *((_QWORD *)a2 + 1) = v202;
                  v134 |= (unint64_t)(v203 & 0x7F) << v200;
                  if (v203 < 0)
                  {
                    v200 += 7;
                    v129 = v202;
                    v14 = v201++ > 8;
                    if (v14)
                      goto LABEL_265;
                    continue;
                  }
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v134) = 0;
                }
                break;
              }
LABEL_334:
              *((_DWORD *)this + 31) = v134;
              goto LABEL_282;
            case 0x1Du:
              *(_QWORD *)((char *)this + 164) |= 0x20uLL;
              v137 = *((_QWORD *)a2 + 1);
              v138 = *((_QWORD *)a2 + 2);
              v139 = *(_QWORD *)a2;
              if (v137 <= 0xFFFFFFFFFFFFFFF5 && v137 + 10 <= v138)
              {
                v140 = 0;
                v141 = 0;
                v142 = 0;
                do
                {
                  v143 = v137 + 1;
                  *((_QWORD *)a2 + 1) = v137 + 1;
                  v144 = *(_BYTE *)(v139 + v137);
                  v142 |= (unint64_t)(v144 & 0x7F) << v140;
                  if ((v144 & 0x80) == 0)
                    goto LABEL_338;
                  v140 += 7;
                  v137 = v143;
                  v14 = v141++ > 8;
                }
                while (!v14);
LABEL_272:
                v142 = 0;
                goto LABEL_338;
              }
              v204 = 0;
              v205 = 0;
              v142 = 0;
              if (v138 <= v137)
                v138 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v138 == v137)
                {
                  v142 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v206 = v137 + 1;
                  v207 = *(_BYTE *)(v139 + v137);
                  *((_QWORD *)a2 + 1) = v206;
                  v142 |= (unint64_t)(v207 & 0x7F) << v204;
                  if (v207 < 0)
                  {
                    v204 += 7;
                    v137 = v206;
                    v14 = v205++ > 8;
                    if (v14)
                      goto LABEL_272;
                    continue;
                  }
                  if (*((_BYTE *)a2 + 24))
                    v142 = 0;
                }
                break;
              }
LABEL_338:
              *((_QWORD *)this + 6) = v142;
              goto LABEL_282;
            case 0x1Eu:
              *(_QWORD *)((char *)this + 164) |= 0x2000000uLL;
              v145 = *((_QWORD *)a2 + 1);
              if (v145 > 0xFFFFFFFFFFFFFFFBLL || v145 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_170;
              *((_DWORD *)this + 33) = *(_DWORD *)(*(_QWORD *)a2 + v145);
              goto LABEL_281;
            case 0x1Fu:
              *(_QWORD *)((char *)this + 164) |= 0x40000000uLL;
              v146 = *((_QWORD *)a2 + 1);
              if (v146 <= 0xFFFFFFFFFFFFFFFBLL && v146 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 38) = *(_DWORD *)(*(_QWORD *)a2 + v146);
LABEL_281:
                *((_QWORD *)a2 + 1) += 4;
              }
              else
              {
LABEL_170:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_282;
            default:
              if ((_DWORD)v20 == 201)
              {
                *(_QWORD *)((char *)this + 164) |= 1uLL;
                v147 = *((_QWORD *)a2 + 1);
                v148 = *((_QWORD *)a2 + 2);
                v149 = *(_QWORD *)a2;
                if (v147 > 0xFFFFFFFFFFFFFFF5 || v147 + 10 > v148)
                {
                  v208 = 0;
                  v209 = 0;
                  v152 = 0;
                  if (v148 <= v147)
                    v148 = *((_QWORD *)a2 + 1);
                  while (1)
                  {
                    if (v148 == v147)
                    {
                      v152 = 0;
                      *((_BYTE *)a2 + 24) = 1;
                      goto LABEL_342;
                    }
                    v210 = v147 + 1;
                    v211 = *(_BYTE *)(v149 + v147);
                    *((_QWORD *)a2 + 1) = v210;
                    v152 |= (unint64_t)(v211 & 0x7F) << v208;
                    if ((v211 & 0x80) == 0)
                      break;
                    v208 += 7;
                    v147 = v210;
                    v14 = v209++ > 8;
                    if (v14)
                    {
LABEL_279:
                      v152 = 0;
                      goto LABEL_342;
                    }
                  }
                  if (*((_BYTE *)a2 + 24))
                    v152 = 0;
                }
                else
                {
                  v150 = 0;
                  v151 = 0;
                  v152 = 0;
                  while (1)
                  {
                    v153 = v147 + 1;
                    *((_QWORD *)a2 + 1) = v147 + 1;
                    v154 = *(_BYTE *)(v149 + v147);
                    v152 |= (unint64_t)(v154 & 0x7F) << v150;
                    if ((v154 & 0x80) == 0)
                      break;
                    v150 += 7;
                    v147 = v153;
                    v14 = v151++ > 8;
                    if (v14)
                      goto LABEL_279;
                  }
                }
LABEL_342:
                *((_QWORD *)this + 1) = v152;
              }
              else if ((_DWORD)v20 == 202)
              {
                *(_QWORD *)((char *)this + 164) |= 2uLL;
                v25 = *((_QWORD *)a2 + 1);
                v26 = *((_QWORD *)a2 + 2);
                v27 = *(_QWORD *)a2;
                if (v25 > 0xFFFFFFFFFFFFFFF5 || v25 + 10 > v26)
                {
                  v156 = 0;
                  v157 = 0;
                  v30 = 0;
                  if (v26 <= v25)
                    v26 = *((_QWORD *)a2 + 1);
                  while (1)
                  {
                    if (v26 == v25)
                    {
                      v30 = 0;
                      *((_BYTE *)a2 + 24) = 1;
                      goto LABEL_290;
                    }
                    v158 = v25 + 1;
                    v159 = *(_BYTE *)(v27 + v25);
                    *((_QWORD *)a2 + 1) = v158;
                    v30 |= (unint64_t)(v159 & 0x7F) << v156;
                    if ((v159 & 0x80) == 0)
                      break;
                    v156 += 7;
                    v25 = v158;
                    v14 = v157++ > 8;
                    if (v14)
                    {
LABEL_188:
                      v30 = 0;
                      goto LABEL_290;
                    }
                  }
                  if (*((_BYTE *)a2 + 24))
                    v30 = 0;
                }
                else
                {
                  v28 = 0;
                  v29 = 0;
                  v30 = 0;
                  while (1)
                  {
                    v31 = v25 + 1;
                    *((_QWORD *)a2 + 1) = v25 + 1;
                    v32 = *(_BYTE *)(v27 + v25);
                    v30 |= (unint64_t)(v32 & 0x7F) << v28;
                    if ((v32 & 0x80) == 0)
                      break;
                    v28 += 7;
                    v25 = v31;
                    v14 = v29++ > 8;
                    if (v14)
                      goto LABEL_188;
                  }
                }
LABEL_290:
                *((_QWORD *)this + 2) = v30;
              }
              else
              {
                result = PB::Reader::skip(a2, v20, v11 & 7, 0);
                if (!(_DWORD)result)
                  return result;
              }
LABEL_282:
              v2 = *((_QWORD *)a2 + 1);
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaZgResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = this;
  v4 = *(_QWORD *)(this + 164);
  if ((v4 & 0x100000000) != 0)
  {
    this = PB::Writer::write(a2, *(_BYTE *)(this + 160), 1u);
    v4 = *(_QWORD *)(v3 + 164);
    if ((v4 & 0x100000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80000) == 0)
        goto LABEL_4;
      goto LABEL_37;
    }
  }
  else if ((v4 & 0x100000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 112), 2u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x80000) == 0)
  {
LABEL_4:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_5;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 108), 3u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_5:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_6;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 128), 4u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_7;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 148), 5u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_7:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 136), 6u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_9;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 156), 7u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x200000) == 0)
      goto LABEL_10;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 144), 8u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x200000) == 0)
  {
LABEL_10:
    if ((v4 & 0x400000) == 0)
      goto LABEL_11;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 116), 9u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x400000) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 120), 0xAu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0)
      goto LABEL_13;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 40), 0xBu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 4) == 0)
      goto LABEL_14;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 32), 0xCu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 4) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000) == 0)
      goto LABEL_15;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 24), 0xDu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x8000) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000) == 0)
      goto LABEL_16;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 92), 0xEu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x20000) == 0)
  {
LABEL_16:
    if ((v4 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 0xFu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x10000) == 0)
  {
LABEL_17:
    if ((v4 & 0x40000) == 0)
      goto LABEL_18;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 96), 0x10u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x40000) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 0x11u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x4000) == 0)
  {
LABEL_19:
    if ((v4 & 0x40) == 0)
      goto LABEL_20;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 0x12u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x40) == 0)
  {
LABEL_20:
    if ((v4 & 0x80) == 0)
      goto LABEL_21;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 0x13u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x80) == 0)
  {
LABEL_21:
    if ((v4 & 0x800) == 0)
      goto LABEL_22;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 60), 0x14u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x800) == 0)
  {
LABEL_22:
    if ((v4 & 0x1000) == 0)
      goto LABEL_23;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 0x15u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x1000) == 0)
  {
LABEL_23:
    if ((v4 & 0x2000) == 0)
      goto LABEL_24;
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0x16u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x2000) == 0)
  {
LABEL_24:
    if ((v4 & 0x100) == 0)
      goto LABEL_25;
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 0x17u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x100) == 0)
  {
LABEL_25:
    if ((v4 & 0x200) == 0)
      goto LABEL_26;
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 0x18u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x200) == 0)
  {
LABEL_26:
    if ((v4 & 0x400) == 0)
      goto LABEL_27;
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 0x19u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x400) == 0)
  {
LABEL_27:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_28;
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0x1Au);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_28:
    if ((v4 & 0x800000) == 0)
      goto LABEL_29;
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(float *)(v3 + 140), 0x1Bu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x800000) == 0)
  {
LABEL_29:
    if ((v4 & 0x20) == 0)
      goto LABEL_30;
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 124), 0x1Cu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x20) == 0)
  {
LABEL_30:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_31;
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 48), 0x1Du);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_32;
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::write(a2, *(float *)(v3 + 132), 0x1Eu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_32:
    if ((v4 & 1) == 0)
      goto LABEL_33;
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::write(a2, *(float *)(v3 + 152), 0x1Fu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 1) == 0)
  {
LABEL_33:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 16), 0xCAu);
  }
LABEL_66:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 8), 0xC9u);
  if ((*(_QWORD *)(v3 + 164) & 2) != 0)
    return PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 16), 0xCAu);
  return this;
}

uint64_t CMMsl::KappaZgResult::hash_value(CMMsl::KappaZgResult *this)
{
  uint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v1 = *(_QWORD *)((char *)this + 164);
  if ((v1 & 0x100000000) != 0)
  {
    v2 = *((unsigned __int8 *)this + 160);
    if ((v1 & 0x100000) != 0)
    {
LABEL_3:
      v57 = *((unsigned int *)this + 28);
      if ((v1 & 0x80000) != 0)
        goto LABEL_4;
      goto LABEL_85;
    }
  }
  else
  {
    v2 = 0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_3;
  }
  v57 = 0;
  if ((v1 & 0x80000) != 0)
  {
LABEL_4:
    v56 = *((unsigned int *)this + 27);
    if ((v1 & 0x1000000) != 0)
      goto LABEL_5;
LABEL_86:
    v55 = 0;
    if ((v1 & 0x20000000) != 0)
      goto LABEL_8;
LABEL_87:
    v54 = 0;
    if ((v1 & 0x4000000) != 0)
      goto LABEL_11;
LABEL_88:
    v53 = 0;
    if ((v1 & 0x80000000) != 0)
      goto LABEL_14;
LABEL_89:
    v52 = 0;
    if ((v1 & 0x10000000) != 0)
      goto LABEL_17;
LABEL_90:
    v12 = 0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_21;
    goto LABEL_91;
  }
LABEL_85:
  v56 = 0;
  if ((v1 & 0x1000000) == 0)
    goto LABEL_86;
LABEL_5:
  v3 = *((float *)this + 32);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  v55 = v4;
  if ((v1 & 0x20000000) == 0)
    goto LABEL_87;
LABEL_8:
  v5 = *((float *)this + 37);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  v54 = v6;
  if ((v1 & 0x4000000) == 0)
    goto LABEL_88;
LABEL_11:
  v7 = *((float *)this + 34);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  v53 = v8;
  if ((v1 & 0x80000000) == 0)
    goto LABEL_89;
LABEL_14:
  v9 = *((float *)this + 39);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  v52 = v10;
  if ((v1 & 0x10000000) == 0)
    goto LABEL_90;
LABEL_17:
  v11 = *((float *)this + 36);
  if (v11 == 0.0)
    v12 = 0;
  else
    v12 = LODWORD(v11);
  if ((v1 & 0x200000) != 0)
  {
LABEL_21:
    v13 = *((int *)this + 29);
    if ((v1 & 0x400000) != 0)
      goto LABEL_22;
    goto LABEL_92;
  }
LABEL_91:
  v13 = 0;
  if ((v1 & 0x400000) != 0)
  {
LABEL_22:
    v14 = *((unsigned int *)this + 30);
    if ((v1 & 0x10) != 0)
      goto LABEL_23;
    goto LABEL_93;
  }
LABEL_92:
  v14 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_23:
    v15 = *((_QWORD *)this + 5);
    if ((v1 & 8) != 0)
      goto LABEL_24;
    goto LABEL_94;
  }
LABEL_93:
  v15 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_24:
    v16 = *((_QWORD *)this + 4);
    if ((v1 & 4) != 0)
      goto LABEL_25;
    goto LABEL_95;
  }
LABEL_94:
  v16 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_25:
    v17 = *((_QWORD *)this + 3);
    if ((v1 & 0x8000) != 0)
      goto LABEL_26;
    goto LABEL_96;
  }
LABEL_95:
  v17 = 0;
  if ((v1 & 0x8000) != 0)
  {
LABEL_26:
    v18 = *((unsigned int *)this + 23);
    if ((v1 & 0x20000) != 0)
      goto LABEL_27;
LABEL_97:
    v20 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_31;
    goto LABEL_98;
  }
LABEL_96:
  v18 = 0;
  if ((v1 & 0x20000) == 0)
    goto LABEL_97;
LABEL_27:
  v19 = *((float *)this + 25);
  if (v19 == 0.0)
    v20 = 0;
  else
    v20 = LODWORD(v19);
  if ((v1 & 0x10000) != 0)
  {
LABEL_31:
    v21 = *((unsigned int *)this + 24);
    if ((v1 & 0x40000) != 0)
      goto LABEL_32;
LABEL_99:
    v23 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_36;
LABEL_100:
    v25 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_40;
LABEL_101:
    v27 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_44;
    goto LABEL_102;
  }
LABEL_98:
  v21 = 0;
  if ((v1 & 0x40000) == 0)
    goto LABEL_99;
LABEL_32:
  v22 = *((float *)this + 26);
  if (v22 == 0.0)
    v23 = 0;
  else
    v23 = LODWORD(v22);
  if ((v1 & 0x4000) == 0)
    goto LABEL_100;
LABEL_36:
  v24 = *((float *)this + 22);
  if (v24 == 0.0)
    v25 = 0;
  else
    v25 = LODWORD(v24);
  if ((v1 & 0x40) == 0)
    goto LABEL_101;
LABEL_40:
  v26 = *((float *)this + 14);
  if (v26 == 0.0)
    v27 = 0;
  else
    v27 = LODWORD(v26);
  if ((v1 & 0x80) != 0)
  {
LABEL_44:
    v28 = *((int *)this + 15);
    if ((v1 & 0x800) != 0)
      goto LABEL_45;
LABEL_103:
    v30 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_49;
LABEL_104:
    v32 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_53;
LABEL_105:
    v34 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_57;
LABEL_106:
    v36 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_61;
LABEL_107:
    v38 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_65;
LABEL_108:
    v40 = 0;
    if ((v1 & 0x8000000) != 0)
      goto LABEL_69;
LABEL_109:
    v42 = 0;
    if ((v1 & 0x800000) != 0)
      goto LABEL_73;
    goto LABEL_110;
  }
LABEL_102:
  v28 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_103;
LABEL_45:
  v29 = *((float *)this + 19);
  if (v29 == 0.0)
    v30 = 0;
  else
    v30 = LODWORD(v29);
  if ((v1 & 0x1000) == 0)
    goto LABEL_104;
LABEL_49:
  v31 = *((float *)this + 20);
  if (v31 == 0.0)
    v32 = 0;
  else
    v32 = LODWORD(v31);
  if ((v1 & 0x2000) == 0)
    goto LABEL_105;
LABEL_53:
  v33 = *((float *)this + 21);
  if (v33 == 0.0)
    v34 = 0;
  else
    v34 = LODWORD(v33);
  if ((v1 & 0x100) == 0)
    goto LABEL_106;
LABEL_57:
  v35 = *((float *)this + 16);
  if (v35 == 0.0)
    v36 = 0;
  else
    v36 = LODWORD(v35);
  if ((v1 & 0x200) == 0)
    goto LABEL_107;
LABEL_61:
  v37 = *((float *)this + 17);
  if (v37 == 0.0)
    v38 = 0;
  else
    v38 = LODWORD(v37);
  if ((v1 & 0x400) == 0)
    goto LABEL_108;
LABEL_65:
  v39 = *((float *)this + 18);
  if (v39 == 0.0)
    v40 = 0;
  else
    v40 = LODWORD(v39);
  if ((v1 & 0x8000000) == 0)
    goto LABEL_109;
LABEL_69:
  v41 = *((float *)this + 35);
  if (v41 == 0.0)
    v42 = 0;
  else
    v42 = LODWORD(v41);
  if ((v1 & 0x800000) != 0)
  {
LABEL_73:
    v43 = *((int *)this + 31);
    if ((v1 & 0x20) != 0)
      goto LABEL_74;
    goto LABEL_111;
  }
LABEL_110:
  v43 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_74:
    v44 = *((_QWORD *)this + 6);
    if ((v1 & 0x2000000) != 0)
      goto LABEL_75;
LABEL_112:
    v46 = 0;
    if ((v1 & 0x40000000) != 0)
      goto LABEL_78;
LABEL_113:
    v48 = 0;
    if ((v1 & 1) != 0)
      goto LABEL_81;
LABEL_114:
    v49 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_82;
LABEL_115:
    v50 = 0;
    return v57 ^ v2 ^ v56 ^ v55 ^ v54 ^ v53 ^ v52 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v20 ^ v21 ^ v23 ^ v25 ^ v27 ^ v28 ^ v30 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v42 ^ v43 ^ v44 ^ v46 ^ v48 ^ v49 ^ v50;
  }
LABEL_111:
  v44 = 0;
  if ((v1 & 0x2000000) == 0)
    goto LABEL_112;
LABEL_75:
  v45 = *((float *)this + 33);
  v46 = LODWORD(v45);
  if (v45 == 0.0)
    v46 = 0;
  if ((v1 & 0x40000000) == 0)
    goto LABEL_113;
LABEL_78:
  v47 = *((float *)this + 38);
  v48 = LODWORD(v47);
  if (v47 == 0.0)
    v48 = 0;
  if ((v1 & 1) == 0)
    goto LABEL_114;
LABEL_81:
  v49 = *((_QWORD *)this + 1);
  if ((v1 & 2) == 0)
    goto LABEL_115;
LABEL_82:
  v50 = *((_QWORD *)this + 2);
  return v57 ^ v2 ^ v56 ^ v55 ^ v54 ^ v53 ^ v52 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v20 ^ v21 ^ v23 ^ v25 ^ v27 ^ v28 ^ v30 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v42 ^ v43 ^ v44 ^ v46 ^ v48 ^ v49 ^ v50;
}

void CMMsl::KeyboardAttached::~KeyboardAttached(CMMsl::KeyboardAttached *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::KeyboardAttached::KeyboardAttached(uint64_t this, const CMMsl::KeyboardAttached *a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)this = off_1003525C0;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_BYTE *)a2 + 16);
    *(_BYTE *)(this + 20) = v2;
    *(_BYTE *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::KeyboardAttached::operator=(uint64_t a1, uint64_t a2, double a3)
{
  char v3;
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  _QWORD v10[2];
  char v11;
  int v12;

  if (a1 != a2)
  {
    v10[0] = off_1003525C0;
    v12 = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      LOBYTE(v12) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v3 = *(_BYTE *)(a2 + 16);
        LOBYTE(v12) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v12;
    v12 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a3;
    v10[1] = v8;
    LOBYTE(v7) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v3;
    v11 = v7;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::KeyboardAttached *a2, CMMsl::KeyboardAttached *a3)
{
  int v3;
  double result;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v3) = *((_BYTE *)this + 16);
  *((_BYTE *)this + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a2 + 16) = v3;
  return result;
}

double CMMsl::KeyboardAttached::KeyboardAttached(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_1003525C0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_1003525C0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

uint64_t CMMsl::KeyboardAttached::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  _QWORD v9[2];
  char v10;
  int v11;

  if (a1 != a2)
  {
    v9[0] = off_1003525C0;
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_BYTE *)(a2 + 16);
    v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v9[1] = v7;
    LOBYTE(v3) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v5;
    v10 = v3;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::KeyboardAttached::formatText(CMMsl::KeyboardAttached *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "attached", *((_BYTE *)this + 16));
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KeyboardAttached::readFrom(CMMsl::KeyboardAttached *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  int v21;
  BOOL v22;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v22 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v21 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v22 = v21 != 0;
        }
        *((_BYTE *)this + 16) = v22;
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KeyboardAttached::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 16), 2u);
  return this;
}

uint64_t CMMsl::KeyboardAttached::hash_value(CMMsl::KeyboardAttached *this)
{
  double v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0;
    return v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((unsigned __int8 *)this + 16);
  return v2 ^ *(_QWORD *)&v1;
}

void CMMsl::KeyboardKeyPress::~KeyboardKeyPress(CMMsl::KeyboardKeyPress *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::KeyboardKeyPress::KeyboardKeyPress(uint64_t this, const CMMsl::KeyboardKeyPress *a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)this = off_1003525F8;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_BYTE *)a2 + 16);
    *(_BYTE *)(this + 20) = v2;
    *(_BYTE *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::KeyboardKeyPress::operator=(uint64_t a1, uint64_t a2, double a3)
{
  char v3;
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  _QWORD v10[2];
  char v11;
  int v12;

  if (a1 != a2)
  {
    v10[0] = off_1003525F8;
    v12 = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      LOBYTE(v12) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v3 = *(_BYTE *)(a2 + 16);
        LOBYTE(v12) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v12;
    v12 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a3;
    v10[1] = v8;
    LOBYTE(v7) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v3;
    v11 = v7;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::KeyboardKeyPress *a2, CMMsl::KeyboardKeyPress *a3)
{
  int v3;
  double result;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v3) = *((_BYTE *)this + 16);
  *((_BYTE *)this + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a2 + 16) = v3;
  return result;
}

double CMMsl::KeyboardKeyPress::KeyboardKeyPress(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_1003525F8;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_1003525F8;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

uint64_t CMMsl::KeyboardKeyPress::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  _QWORD v9[2];
  char v10;
  int v11;

  if (a1 != a2)
  {
    v9[0] = off_1003525F8;
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_BYTE *)(a2 + 16);
    v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v9[1] = v7;
    LOBYTE(v3) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v5;
    v10 = v3;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::KeyboardKeyPress::formatText(CMMsl::KeyboardKeyPress *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "keyPressedDown", *((_BYTE *)this + 16));
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KeyboardKeyPress::readFrom(CMMsl::KeyboardKeyPress *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  int v21;
  BOOL v22;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v22 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v21 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v22 = v21 != 0;
        }
        *((_BYTE *)this + 16) = v22;
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KeyboardKeyPress::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 16), 2u);
  return this;
}

uint64_t CMMsl::KeyboardKeyPress::hash_value(CMMsl::KeyboardKeyPress *this)
{
  double v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0;
    return v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((unsigned __int8 *)this + 16);
  return v2 ^ *(_QWORD *)&v1;
}

void CMMsl::KeyboardMotionFeatures::~KeyboardMotionFeatures(CMMsl::KeyboardMotionFeatures *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::KeyboardMotionFeatures::KeyboardMotionFeatures(CMMsl::KeyboardMotionFeatures *this, const CMMsl::KeyboardMotionFeatures *a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)this = off_100352630;
  *((_DWORD *)this + 7) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 28) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((_BYTE *)this + 28) = v3;
    *((_DWORD *)this + 4) = v4;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *((_BYTE *)this + 28) = v3;
    *((_DWORD *)this + 5) = v4;
    if ((*((_BYTE *)a2 + 28) & 8) == 0)
      return *(float *)&v4;
  }
  else if ((v2 & 8) == 0)
  {
    return *(float *)&v4;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  *((_BYTE *)this + 28) = v3 | 8;
  *((_DWORD *)this + 6) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::KeyboardMotionFeatures::operator=(uint64_t a1, const CMMsl::KeyboardMotionFeatures *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;

  if ((const CMMsl::KeyboardMotionFeatures *)a1 != a2)
  {
    CMMsl::KeyboardMotionFeatures::KeyboardMotionFeatures((CMMsl::KeyboardMotionFeatures *)&v9, a2);
    v3 = v11;
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = v3;
    v6 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v13;
    v13 = v6;
    v10 = v4;
    v11 = v5;
    v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v12;
    v12 = v7;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KeyboardMotionFeatures *a2, CMMsl::KeyboardMotionFeatures *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  return result;
}

float CMMsl::KeyboardMotionFeatures::KeyboardMotionFeatures(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100352630;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_100352630;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::KeyboardMotionFeatures::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD v9[3];
  int v10;
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    v4 = *(_DWORD *)(a2 + 24);
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v9[0] = off_100352630;
    v11 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v3;
    v9[1] = v5;
    v9[2] = v6;
    v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    v10 = v7;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::KeyboardMotionFeatures::formatText(CMMsl::KeyboardMotionFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "accelFilterX", *((float *)this + 4));
    v5 = *((_BYTE *)this + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "accelFilterZ", *((float *)this + 6));
      if ((*((_BYTE *)this + 28) & 1) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "accelFilterY", *((float *)this + 5));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 8) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 1) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KeyboardMotionFeatures::readFrom(CMMsl::KeyboardMotionFeatures *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 28) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_35;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_38;
        case 2u:
          *((_BYTE *)this + 28) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_35;
          *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_37;
        case 3u:
          *((_BYTE *)this + 28) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_35;
          *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_37;
        case 4u:
          *((_BYTE *)this + 28) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_37:
            v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_38:
            *((_QWORD *)a2 + 1) = v2;
          }
          else
          {
LABEL_35:
            *((_BYTE *)a2 + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KeyboardMotionFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 2u);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 24), 4u);
  }
LABEL_8:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 3u);
  if ((*(_BYTE *)(v3 + 28) & 8) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 24), 4u);
  return this;
}

uint64_t CMMsl::KeyboardMotionFeatures::hash_value(CMMsl::KeyboardMotionFeatures *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;

  if ((*((_BYTE *)this + 28) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 28) & 2) != 0)
      goto LABEL_3;
LABEL_15:
    v3 = 0;
    if ((*((_BYTE *)this + 28) & 4) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 28) & 2) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((float *)this + 4);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 28) & 4) != 0)
  {
LABEL_6:
    v4 = *((float *)this + 5);
    v5 = LODWORD(v4);
    if (v4 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 28) & 8) != 0)
      goto LABEL_9;
LABEL_17:
    v7 = 0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7;
  }
LABEL_16:
  v5 = 0;
  if ((*((_BYTE *)this + 28) & 8) == 0)
    goto LABEL_17;
LABEL_9:
  v6 = *((float *)this + 6);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7;
}

void CMMsl::KeyboardMotionState::~KeyboardMotionState(CMMsl::KeyboardMotionState *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::KeyboardMotionState::KeyboardMotionState(uint64_t this, const CMMsl::KeyboardMotionState *a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)this = off_100352668;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::KeyboardMotionState::operator=(uint64_t a1, uint64_t a2, double a3)
{
  int v3;
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;

  if (a1 != a2)
  {
    v11[0] = off_100352668;
    HIDWORD(v12) = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      BYTE4(v12) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v3 = *(_DWORD *)(a2 + 16);
        BYTE4(v12) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = HIDWORD(v12);
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_QWORD *)(a1 + 16);
    *(double *)(a1 + 8) = a3;
    *(_DWORD *)(a1 + 16) = v3;
    *(_DWORD *)(a1 + 20) = v7;
    v11[1] = v8;
    v12 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::KeyboardMotionState *a2, CMMsl::KeyboardMotionState *a3)
{
  int v3;
  double result;
  int v5;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  return result;
}

double CMMsl::KeyboardMotionState::KeyboardMotionState(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100352668;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100352668;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::KeyboardMotionState::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  if (a1 != a2)
  {
    v8[0] = off_100352668;
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    v8[1] = v5;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::KeyboardMotionState::formatText(CMMsl::KeyboardMotionState *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 4));
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KeyboardMotionState::readFrom(CMMsl::KeyboardMotionState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_47;
            }
            v30 = v21++;
            v31 = *(_BYTE *)(v22 + v30);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v25) = 0;
LABEL_46:
          v2 = v30 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v25;
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KeyboardMotionState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 2u);
  return this;
}

uint64_t CMMsl::KeyboardMotionState::hash_value(CMMsl::KeyboardMotionState *this)
{
  double v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0;
    return v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((unsigned int *)this + 4);
  return v2 ^ *(_QWORD *)&v1;
}

void CMMsl::KeyboardMotionTrackpad::~KeyboardMotionTrackpad(CMMsl::KeyboardMotionTrackpad *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::KeyboardMotionTrackpad::KeyboardMotionTrackpad(uint64_t this, const CMMsl::KeyboardMotionTrackpad *a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)this = off_1003526A0;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_BYTE *)a2 + 16);
    *(_BYTE *)(this + 20) = v2;
    *(_BYTE *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::KeyboardMotionTrackpad::operator=(uint64_t a1, uint64_t a2, double a3)
{
  char v3;
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  _QWORD v10[2];
  char v11;
  int v12;

  if (a1 != a2)
  {
    v10[0] = off_1003526A0;
    v12 = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      LOBYTE(v12) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v3 = *(_BYTE *)(a2 + 16);
        LOBYTE(v12) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v12;
    v12 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a3;
    v10[1] = v8;
    LOBYTE(v7) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v3;
    v11 = v7;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::KeyboardMotionTrackpad *a2, CMMsl::KeyboardMotionTrackpad *a3)
{
  int v3;
  double result;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v3) = *((_BYTE *)this + 16);
  *((_BYTE *)this + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a2 + 16) = v3;
  return result;
}

double CMMsl::KeyboardMotionTrackpad::KeyboardMotionTrackpad(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_1003526A0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_1003526A0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

uint64_t CMMsl::KeyboardMotionTrackpad::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  _QWORD v9[2];
  char v10;
  int v11;

  if (a1 != a2)
  {
    v9[0] = off_1003526A0;
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_BYTE *)(a2 + 16);
    v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v9[1] = v7;
    LOBYTE(v3) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v5;
    v10 = v3;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::KeyboardMotionTrackpad::formatText(CMMsl::KeyboardMotionTrackpad *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "touchActive", *((_BYTE *)this + 16));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KeyboardMotionTrackpad::readFrom(CMMsl::KeyboardMotionTrackpad *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  int v21;
  BOOL v22;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v22 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v21 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v22 = v21 != 0;
        }
        *((_BYTE *)this + 16) = v22;
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KeyboardMotionTrackpad::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 16), 2u);
  return this;
}

uint64_t CMMsl::KeyboardMotionTrackpad::hash_value(CMMsl::KeyboardMotionTrackpad *this)
{
  double v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0;
    return v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((unsigned __int8 *)this + 16);
  return v2 ^ *(_QWORD *)&v1;
}

void CMMsl::LSLHeadingEstimation::~LSLHeadingEstimation(CMMsl::LSLHeadingEstimation *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = off_1003526D8;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::LSLHeadingEstimation::~LSLHeadingEstimation(this);
  operator delete();
}

CMMsl::LSLHeadingEstimation *CMMsl::LSLHeadingEstimation::LSLHeadingEstimation(CMMsl::LSLHeadingEstimation *this, const CMMsl::LSLHeadingEstimation *a2)
{
  char *v4;
  char *v5;
  __int16 v6;
  __int16 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)this = off_1003526D8;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  v5 = (char *)this + 56;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 23) = 0xFFFFFFFFLL;
  *((_DWORD *)this + 48) = 0;
  v6 = *((_WORD *)a2 + 96);
  if ((v6 & 0x4000) != 0)
  {
    v8 = *((_DWORD *)a2 + 47);
    v7 = 0x4000;
    *((_WORD *)this + 96) = 0x4000;
    *((_DWORD *)this + 47) = v8;
    v6 = *((_WORD *)a2 + 96);
    if ((v6 & 0x1000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = 0;
  if ((*((_WORD *)a2 + 96) & 0x1000) != 0)
  {
LABEL_5:
    v9 = *((_QWORD *)a2 + 22);
    v7 |= 0x1000u;
    *((_WORD *)this + 96) = v7;
    *((_QWORD *)this + 22) = v9;
    v6 = *((_WORD *)a2 + 96);
  }
LABEL_6:
  if ((v6 & 0x40) != 0)
  {
    v10 = *((_QWORD *)a2 + 16);
    *((_WORD *)this + 96) = v7 | 0x40;
    *((_QWORD *)this + 16) = v10;
  }
  if (this != a2)
  {
    sub_100239350((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3);
    sub_100239350(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
    sub_100239350(v5, *((char **)a2 + 7), *((_QWORD *)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 3);
  }
  v11 = *((_WORD *)a2 + 96);
  if ((v11 & 2) != 0)
  {
    v14 = *((_QWORD *)a2 + 11);
    *((_WORD *)this + 96) |= 2u;
    *((_QWORD *)this + 11) = v14;
    v11 = *((_WORD *)a2 + 96);
    if ((v11 & 0x2000) == 0)
    {
LABEL_12:
      if ((v11 & 4) == 0)
        goto LABEL_13;
      goto LABEL_26;
    }
  }
  else if ((*((_WORD *)a2 + 96) & 0x2000) == 0)
  {
    goto LABEL_12;
  }
  v15 = *((_DWORD *)a2 + 46);
  *((_WORD *)this + 96) |= 0x2000u;
  *((_DWORD *)this + 46) = v15;
  v11 = *((_WORD *)a2 + 96);
  if ((v11 & 4) == 0)
  {
LABEL_13:
    if ((v11 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_27;
  }
LABEL_26:
  v16 = *((_QWORD *)a2 + 12);
  *((_WORD *)this + 96) |= 4u;
  *((_QWORD *)this + 12) = v16;
  v11 = *((_WORD *)a2 + 96);
  if ((v11 & 0x10) == 0)
  {
LABEL_14:
    if ((v11 & 1) == 0)
      goto LABEL_15;
    goto LABEL_28;
  }
LABEL_27:
  v17 = *((_QWORD *)a2 + 14);
  *((_WORD *)this + 96) |= 0x10u;
  *((_QWORD *)this + 14) = v17;
  v11 = *((_WORD *)a2 + 96);
  if ((v11 & 1) == 0)
  {
LABEL_15:
    if ((v11 & 8) == 0)
      goto LABEL_16;
    goto LABEL_29;
  }
LABEL_28:
  v18 = *((_QWORD *)a2 + 10);
  *((_WORD *)this + 96) |= 1u;
  *((_QWORD *)this + 10) = v18;
  v11 = *((_WORD *)a2 + 96);
  if ((v11 & 8) == 0)
  {
LABEL_16:
    if ((v11 & 0x20) == 0)
      goto LABEL_17;
    goto LABEL_30;
  }
LABEL_29:
  v19 = *((_QWORD *)a2 + 13);
  *((_WORD *)this + 96) |= 8u;
  *((_QWORD *)this + 13) = v19;
  v11 = *((_WORD *)a2 + 96);
  if ((v11 & 0x20) == 0)
  {
LABEL_17:
    if ((v11 & 0x800) == 0)
      goto LABEL_18;
    goto LABEL_31;
  }
LABEL_30:
  v20 = *((_QWORD *)a2 + 15);
  *((_WORD *)this + 96) |= 0x20u;
  *((_QWORD *)this + 15) = v20;
  v11 = *((_WORD *)a2 + 96);
  if ((v11 & 0x800) == 0)
  {
LABEL_18:
    if ((v11 & 0x80) == 0)
      goto LABEL_19;
    goto LABEL_32;
  }
LABEL_31:
  v21 = *((_QWORD *)a2 + 21);
  *((_WORD *)this + 96) |= 0x800u;
  *((_QWORD *)this + 21) = v21;
  v11 = *((_WORD *)a2 + 96);
  if ((v11 & 0x80) == 0)
  {
LABEL_19:
    if ((v11 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_33;
  }
LABEL_32:
  v22 = *((_QWORD *)a2 + 17);
  *((_WORD *)this + 96) |= 0x80u;
  *((_QWORD *)this + 17) = v22;
  v11 = *((_WORD *)a2 + 96);
  if ((v11 & 0x100) == 0)
  {
LABEL_20:
    if ((v11 & 0x200) == 0)
      goto LABEL_21;
LABEL_34:
    v24 = *((_QWORD *)a2 + 19);
    *((_WORD *)this + 96) |= 0x200u;
    *((_QWORD *)this + 19) = v24;
    if ((*((_WORD *)a2 + 96) & 0x400) == 0)
      return this;
    goto LABEL_22;
  }
LABEL_33:
  v23 = *((_QWORD *)a2 + 18);
  *((_WORD *)this + 96) |= 0x100u;
  *((_QWORD *)this + 18) = v23;
  v11 = *((_WORD *)a2 + 96);
  if ((v11 & 0x200) != 0)
    goto LABEL_34;
LABEL_21:
  if ((v11 & 0x400) != 0)
  {
LABEL_22:
    v12 = *((_QWORD *)a2 + 20);
    *((_WORD *)this + 96) |= 0x400u;
    *((_QWORD *)this + 20) = v12;
  }
  return this;
}

CMMsl *CMMsl::LSLHeadingEstimation::operator=(CMMsl *a1, const CMMsl::LSLHeadingEstimation *a2)
{
  CMMsl::LSLHeadingEstimation *v3;
  _BYTE v5[200];

  if (a1 != a2)
  {
    CMMsl::LSLHeadingEstimation::LSLHeadingEstimation((CMMsl::LSLHeadingEstimation *)v5, a2);
    CMMsl::swap(a1, (CMMsl::LSLHeadingEstimation *)v5, v3);
    CMMsl::LSLHeadingEstimation::~LSLHeadingEstimation((CMMsl::LSLHeadingEstimation *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::LSLHeadingEstimation *a2, CMMsl::LSLHeadingEstimation *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double result;

  v3 = *((_DWORD *)this + 48);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_DWORD *)a2 + 48) = v3;
  v4 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = *((_QWORD *)a2 + 22);
  *((_QWORD *)a2 + 22) = v4;
  v5 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v5;
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  v7 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  v8 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v8;
  v9 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v9;
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v10;
  v11 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v11;
  v12 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v12;
  v13 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v13;
  v14 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v14;
  v15 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v15;
  v16 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = *((_QWORD *)a2 + 23);
  *((_QWORD *)a2 + 23) = v16;
  v17 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v17;
  v18 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v18;
  v19 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v19;
  v20 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v20;
  v21 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v21;
  v22 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
  *((_QWORD *)a2 + 21) = v22;
  v23 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v23;
  v24 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v24;
  v25 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v25;
  result = *((double *)this + 20);
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  *((double *)a2 + 20) = result;
  return result;
}

uint64_t CMMsl::LSLHeadingEstimation::LSLHeadingEstimation(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_1003526D8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)(a1 + 184) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_DWORD *)(a2 + 192) = 0;
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  sub_100239458(a1 + 32, (__n128 *)(a2 + 32));
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  sub_100239458(a1 + 56, (__n128 *)(a2 + 56));
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  return a1;
}

CMMsl *CMMsl::LSLHeadingEstimation::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::LSLHeadingEstimation *v3;
  _BYTE v5[200];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::LSLHeadingEstimation::LSLHeadingEstimation((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::LSLHeadingEstimation *)v5, v3);
    CMMsl::LSLHeadingEstimation::~LSLHeadingEstimation((CMMsl::LSLHeadingEstimation *)v5);
  }
  return a1;
}

uint64_t CMMsl::LSLHeadingEstimation::formatText(CMMsl::LSLHeadingEstimation *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;
  double *v6;
  double *v7;
  double v8;
  double *v9;
  double *v10;
  double v11;
  double *v12;
  double *v13;
  double v14;
  __int16 v15;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 96);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "altitude", *((double *)this + 10));
    v5 = *((_WORD *)this + 96);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x2000) == 0)
        goto LABEL_4;
      goto LABEL_28;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "confidence", *((double *)this + 11));
  v5 = *((_WORD *)this + 96);
  if ((v5 & 0x2000) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "globalReferenceFrame", *((_DWORD *)this + 46));
  v5 = *((_WORD *)this + 96);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "latitude", *((double *)this + 12));
  v5 = *((_WORD *)this + 96);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "locationTimestamp", *((double *)this + 13));
  v5 = *((_WORD *)this + 96);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "longitude", *((double *)this + 14));
  v5 = *((_WORD *)this + 96);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "machContinuousLocationTimestamp", *((double *)this + 15));
  v5 = *((_WORD *)this + 96);
  if ((v5 & 0x40) == 0)
  {
LABEL_9:
    if ((v5 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "machContinuousTimestamp", *((double *)this + 16));
  v5 = *((_WORD *)this + 96);
  if ((v5 & 0x80) == 0)
  {
LABEL_10:
    if ((v5 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "polylinesLocation1Latitude", *((double *)this + 17));
  v5 = *((_WORD *)this + 96);
  if ((v5 & 0x100) == 0)
  {
LABEL_11:
    if ((v5 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "polylinesLocation1Longitude", *((double *)this + 18));
  v5 = *((_WORD *)this + 96);
  if ((v5 & 0x200) == 0)
  {
LABEL_12:
    if ((v5 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "polylinesLocation2Latitude", *((double *)this + 19));
  v5 = *((_WORD *)this + 96);
  if ((v5 & 0x400) == 0)
  {
LABEL_13:
    if ((v5 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_14;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "polylinesLocation2Longitude", *((double *)this + 20));
  if ((*((_WORD *)this + 96) & 0x800) != 0)
LABEL_14:
    PB::TextFormatter::format(a2, "roadID", *((_QWORD *)this + 21));
LABEL_15:
  v6 = (double *)*((_QWORD *)this + 1);
  v7 = (double *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "rotationFromGlobalToCameraFrame", v8);
  }
  v9 = (double *)*((_QWORD *)this + 4);
  v10 = (double *)*((_QWORD *)this + 5);
  while (v9 != v10)
  {
    v11 = *v9++;
    PB::TextFormatter::format(a2, "rotationFromGlobalToDeviceFrame", v11);
  }
  v12 = (double *)*((_QWORD *)this + 7);
  v13 = (double *)*((_QWORD *)this + 8);
  while (v12 != v13)
  {
    v14 = *v12++;
    PB::TextFormatter::format(a2, "rotationalAccuracyInRadians", v14);
  }
  v15 = *((_WORD *)this + 96);
  if ((v15 & 0x4000) != 0)
  {
    PB::TextFormatter::format(a2, "status", *((_DWORD *)this + 47));
    v15 = *((_WORD *)this + 96);
  }
  if ((v15 & 0x1000) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 22));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::LSLHeadingEstimation::readFrom(CMMsl::LSLHeadingEstimation *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  void **v9;
  char *v10;
  void **v11;
  char *v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  BOOL v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  char v23;
  int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  _QWORD *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  _QWORD *v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char v82;
  unsigned int v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  char v95;
  unsigned int v96;
  uint64_t v97;
  unint64_t v98;
  char v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char v104;
  unsigned int v105;
  unint64_t v106;
  char v107;
  unint64_t v108;
  char *v109;
  _QWORD *v110;
  unint64_t v111;
  char *v112;
  unint64_t v113;
  char *v114;
  char v115;
  unsigned int v116;
  unint64_t v117;
  char v118;
  char v119;
  unsigned int v120;
  unint64_t v121;
  char v122;
  char *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  unint64_t v147;
  char *v150;
  _BYTE v151[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 56);
    v150 = (char *)this + 72;
    v9 = (void **)((char *)this + 8);
    v10 = (char *)this + 24;
    v11 = (void **)((char *)this + 32);
    v12 = (char *)this + 48;
    while (1)
    {
      v13 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      while (1)
      {
        v17 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v18 = *(_BYTE *)(v13 + v2);
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0)
          break;
        v14 += 7;
        v2 = v17;
        v19 = v15++ > 8;
        if (v19)
          goto LABEL_20;
      }
LABEL_21:
      v25 = v16 & 7;
      if (v25 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v16 >> 3))
      {
        case 1u:
          *((_WORD *)this + 96) |= 0x4000u;
          v26 = *((_QWORD *)a2 + 1);
          v27 = *((_QWORD *)a2 + 2);
          v28 = *(_QWORD *)a2;
          if (v26 <= 0xFFFFFFFFFFFFFFF5 && v26 + 10 <= v27)
          {
            v29 = 0;
            v30 = 0;
            v31 = 0;
            do
            {
              v32 = v26 + 1;
              *((_QWORD *)a2 + 1) = v26 + 1;
              v33 = *(_BYTE *)(v28 + v26);
              v31 |= (unint64_t)(v33 & 0x7F) << v29;
              if ((v33 & 0x80) == 0)
                goto LABEL_212;
              v29 += 7;
              v26 = v32;
              v19 = v30++ > 8;
            }
            while (!v19);
LABEL_160:
            LODWORD(v31) = 0;
            goto LABEL_212;
          }
          v104 = 0;
          v105 = 0;
          v31 = 0;
          if (v27 <= v26)
            v27 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v27 == v26)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v106 = v26 + 1;
              v107 = *(_BYTE *)(v28 + v26);
              *((_QWORD *)a2 + 1) = v106;
              v31 |= (unint64_t)(v107 & 0x7F) << v104;
              if (v107 < 0)
              {
                v104 += 7;
                v26 = v106;
                v19 = v105++ > 8;
                if (v19)
                  goto LABEL_160;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v31) = 0;
            }
            break;
          }
LABEL_212:
          *((_DWORD *)this + 47) = v31;
          goto LABEL_245;
        case 2u:
          *((_WORD *)this + 96) |= 0x1000u;
          v34 = *((_QWORD *)a2 + 1);
          if (v34 > 0xFFFFFFFFFFFFFFF7 || v34 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_242;
          *((_QWORD *)this + 22) = *(_QWORD *)(*(_QWORD *)a2 + v34);
          goto LABEL_244;
        case 3u:
          *((_WORD *)this + 96) |= 0x40u;
          v35 = *((_QWORD *)a2 + 1);
          if (v35 > 0xFFFFFFFFFFFFFFF7 || v35 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_242;
          *((_QWORD *)this + 16) = *(_QWORD *)(*(_QWORD *)a2 + v35);
          goto LABEL_244;
        case 4u:
          if (v25 != 2)
          {
            v109 = (char *)*((_QWORD *)this + 5);
            v108 = *((_QWORD *)this + 6);
            if ((unint64_t)v109 >= v108)
            {
              v123 = (char *)*v11;
              v124 = (v109 - (_BYTE *)*v11) >> 3;
              v125 = v124 + 1;
              if ((unint64_t)(v124 + 1) >> 61)
LABEL_255:
                sub_10000D5F8();
              v126 = v108 - (_QWORD)v123;
              if (v126 >> 2 > v125)
                v125 = v126 >> 2;
              if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFF8)
                v127 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v127 = v125;
              if (v127)
              {
                v128 = (char *)sub_10000D60C((uint64_t)v12, v127);
                v123 = (char *)*((_QWORD *)this + 4);
                v109 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v128 = 0;
              }
              v141 = &v128[8 * v124];
              *(_QWORD *)v141 = 0;
              v110 = v141 + 8;
              while (v109 != v123)
              {
                v142 = *((_QWORD *)v109 - 1);
                v109 -= 8;
                *((_QWORD *)v141 - 1) = v142;
                v141 -= 8;
              }
              *((_QWORD *)this + 4) = v141;
              *((_QWORD *)this + 5) = v110;
              *((_QWORD *)this + 6) = &v128[8 * v127];
              if (v123)
                operator delete(v123);
            }
            else
            {
              *(_QWORD *)v109 = 0;
              v110 = v109 + 8;
            }
            *((_QWORD *)this + 5) = v110;
            goto LABEL_240;
          }
          if ((PB::Reader::placeMark(a2, v151) & 1) != 0)
            return 0;
          v36 = *((_QWORD *)a2 + 1);
          v37 = *((_QWORD *)a2 + 2);
          while (v36 < v37 && !*((_BYTE *)a2 + 24))
          {
            v39 = (char *)*((_QWORD *)this + 5);
            v38 = *((_QWORD *)this + 6);
            if ((unint64_t)v39 >= v38)
            {
              v41 = (char *)*v11;
              v42 = (v39 - (_BYTE *)*v11) >> 3;
              v43 = v42 + 1;
              if ((unint64_t)(v42 + 1) >> 61)
                goto LABEL_255;
              v44 = v38 - (_QWORD)v41;
              if (v44 >> 2 > v43)
                v43 = v44 >> 2;
              if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
                v45 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v45 = v43;
              if (v45)
              {
                v46 = (char *)sub_10000D60C((uint64_t)v12, v45);
                v41 = (char *)*((_QWORD *)this + 4);
                v39 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v46 = 0;
              }
              v47 = &v46[8 * v42];
              *(_QWORD *)v47 = 0;
              v40 = v47 + 8;
              while (v39 != v41)
              {
                v48 = *((_QWORD *)v39 - 1);
                v39 -= 8;
                *((_QWORD *)v47 - 1) = v48;
                v47 -= 8;
              }
              *((_QWORD *)this + 4) = v47;
              *((_QWORD *)this + 5) = v40;
              *((_QWORD *)this + 6) = &v46[8 * v45];
              if (v41)
                operator delete(v41);
            }
            else
            {
              *(_QWORD *)v39 = 0;
              v40 = v39 + 8;
            }
            *((_QWORD *)this + 5) = v40;
            v49 = *((_QWORD *)a2 + 1);
            if (v49 > 0xFFFFFFFFFFFFFFF7 || v49 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_181;
            *(v40 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v49);
            v37 = *((_QWORD *)a2 + 2);
            v36 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v36;
          }
          goto LABEL_182;
        case 5u:
          if (v25 != 2)
          {
            v112 = (char *)*((_QWORD *)this + 2);
            v111 = *((_QWORD *)this + 3);
            if ((unint64_t)v112 >= v111)
            {
              v129 = (char *)*v9;
              v130 = (v112 - (_BYTE *)*v9) >> 3;
              v131 = v130 + 1;
              if ((unint64_t)(v130 + 1) >> 61)
LABEL_256:
                sub_10000D5F8();
              v132 = v111 - (_QWORD)v129;
              if (v132 >> 2 > v131)
                v131 = v132 >> 2;
              if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFF8)
                v133 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v133 = v131;
              if (v133)
              {
                v134 = (char *)sub_10000D60C((uint64_t)v10, v133);
                v129 = (char *)*((_QWORD *)this + 1);
                v112 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v134 = 0;
              }
              v143 = &v134[8 * v130];
              *(_QWORD *)v143 = 0;
              v110 = v143 + 8;
              while (v112 != v129)
              {
                v144 = *((_QWORD *)v112 - 1);
                v112 -= 8;
                *((_QWORD *)v143 - 1) = v144;
                v143 -= 8;
              }
              *((_QWORD *)this + 1) = v143;
              *((_QWORD *)this + 2) = v110;
              *((_QWORD *)this + 3) = &v134[8 * v133];
              if (v129)
                operator delete(v129);
            }
            else
            {
              *(_QWORD *)v112 = 0;
              v110 = v112 + 8;
            }
            *((_QWORD *)this + 2) = v110;
            goto LABEL_240;
          }
          if ((PB::Reader::placeMark(a2, v151) & 1) != 0)
            return 0;
          v50 = *((_QWORD *)a2 + 1);
          v51 = *((_QWORD *)a2 + 2);
          while (v50 < v51 && !*((_BYTE *)a2 + 24))
          {
            v53 = (char *)*((_QWORD *)this + 2);
            v52 = *((_QWORD *)this + 3);
            if ((unint64_t)v53 >= v52)
            {
              v55 = (char *)*v9;
              v56 = (v53 - (_BYTE *)*v9) >> 3;
              v57 = v56 + 1;
              if ((unint64_t)(v56 + 1) >> 61)
                goto LABEL_256;
              v58 = v52 - (_QWORD)v55;
              if (v58 >> 2 > v57)
                v57 = v58 >> 2;
              if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
                v59 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v59 = v57;
              if (v59)
              {
                v60 = (char *)sub_10000D60C((uint64_t)v10, v59);
                v55 = (char *)*((_QWORD *)this + 1);
                v53 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v60 = 0;
              }
              v61 = &v60[8 * v56];
              *(_QWORD *)v61 = 0;
              v54 = v61 + 8;
              while (v53 != v55)
              {
                v62 = *((_QWORD *)v53 - 1);
                v53 -= 8;
                *((_QWORD *)v61 - 1) = v62;
                v61 -= 8;
              }
              *((_QWORD *)this + 1) = v61;
              *((_QWORD *)this + 2) = v54;
              *((_QWORD *)this + 3) = &v60[8 * v59];
              if (v55)
                operator delete(v55);
            }
            else
            {
              *(_QWORD *)v53 = 0;
              v54 = v53 + 8;
            }
            *((_QWORD *)this + 2) = v54;
            v63 = *((_QWORD *)a2 + 1);
            if (v63 > 0xFFFFFFFFFFFFFFF7 || v63 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_181;
            *(v54 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v63);
            v51 = *((_QWORD *)a2 + 2);
            v50 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v50;
          }
          goto LABEL_182;
        case 6u:
          if (v25 == 2)
          {
            if ((PB::Reader::placeMark(a2, v151) & 1) != 0)
              return 0;
            v64 = *((_QWORD *)a2 + 1);
            v65 = *((_QWORD *)a2 + 2);
            while (v64 < v65 && !*((_BYTE *)a2 + 24))
            {
              v67 = (char *)*((_QWORD *)this + 8);
              v66 = *((_QWORD *)this + 9);
              if ((unint64_t)v67 >= v66)
              {
                v69 = (char *)*v8;
                v70 = (v67 - (_BYTE *)*v8) >> 3;
                v71 = v70 + 1;
                if ((unint64_t)(v70 + 1) >> 61)
                  goto LABEL_257;
                v72 = v66 - (_QWORD)v69;
                if (v72 >> 2 > v71)
                  v71 = v72 >> 2;
                if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8)
                  v73 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v73 = v71;
                if (v73)
                {
                  v74 = (char *)sub_10000D60C((uint64_t)v150, v73);
                  v69 = (char *)*((_QWORD *)this + 7);
                  v67 = (char *)*((_QWORD *)this + 8);
                }
                else
                {
                  v74 = 0;
                }
                v75 = &v74[8 * v70];
                *(_QWORD *)v75 = 0;
                v68 = v75 + 8;
                while (v67 != v69)
                {
                  v76 = *((_QWORD *)v67 - 1);
                  v67 -= 8;
                  *((_QWORD *)v75 - 1) = v76;
                  v75 -= 8;
                }
                *((_QWORD *)this + 7) = v75;
                *((_QWORD *)this + 8) = v68;
                *((_QWORD *)this + 9) = &v74[8 * v73];
                if (v69)
                  operator delete(v69);
              }
              else
              {
                *(_QWORD *)v67 = 0;
                v68 = v67 + 8;
              }
              *((_QWORD *)this + 8) = v68;
              v77 = *((_QWORD *)a2 + 1);
              if (v77 > 0xFFFFFFFFFFFFFFF7 || v77 + 8 > *((_QWORD *)a2 + 2))
              {
LABEL_181:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v68 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v77);
              v65 = *((_QWORD *)a2 + 2);
              v64 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v64;
            }
LABEL_182:
            PB::Reader::recallMark(a2, v151);
          }
          else
          {
            v114 = (char *)*((_QWORD *)this + 8);
            v113 = *((_QWORD *)this + 9);
            if ((unint64_t)v114 >= v113)
            {
              v135 = (char *)*v8;
              v136 = (v114 - (_BYTE *)*v8) >> 3;
              v137 = v136 + 1;
              if ((unint64_t)(v136 + 1) >> 61)
LABEL_257:
                sub_10000D5F8();
              v138 = v113 - (_QWORD)v135;
              if (v138 >> 2 > v137)
                v137 = v138 >> 2;
              if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFF8)
                v139 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v139 = v137;
              if (v139)
              {
                v140 = (char *)sub_10000D60C((uint64_t)v150, v139);
                v135 = (char *)*((_QWORD *)this + 7);
                v114 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v140 = 0;
              }
              v145 = &v140[8 * v136];
              *(_QWORD *)v145 = 0;
              v110 = v145 + 8;
              while (v114 != v135)
              {
                v146 = *((_QWORD *)v114 - 1);
                v114 -= 8;
                *((_QWORD *)v145 - 1) = v146;
                v145 -= 8;
              }
              *((_QWORD *)this + 7) = v145;
              *((_QWORD *)this + 8) = v110;
              *((_QWORD *)this + 9) = &v140[8 * v139];
              if (v135)
                operator delete(v135);
            }
            else
            {
              *(_QWORD *)v114 = 0;
              v110 = v114 + 8;
            }
            *((_QWORD *)this + 8) = v110;
LABEL_240:
            v147 = *((_QWORD *)a2 + 1);
            if (v147 <= 0xFFFFFFFFFFFFFFF7 && v147 + 8 <= *((_QWORD *)a2 + 2))
            {
              *(v110 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v147);
LABEL_244:
              *((_QWORD *)a2 + 1) += 8;
            }
            else
            {
LABEL_242:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_245:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 7u:
          *((_WORD *)this + 96) |= 2u;
          v78 = *((_QWORD *)a2 + 1);
          if (v78 > 0xFFFFFFFFFFFFFFF7 || v78 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_242;
          *((_QWORD *)this + 11) = *(_QWORD *)(*(_QWORD *)a2 + v78);
          goto LABEL_244;
        case 8u:
          *((_WORD *)this + 96) |= 0x2000u;
          v79 = *((_QWORD *)a2 + 1);
          v80 = *((_QWORD *)a2 + 2);
          v81 = *(_QWORD *)a2;
          if (v79 <= 0xFFFFFFFFFFFFFFF5 && v79 + 10 <= v80)
          {
            v82 = 0;
            v83 = 0;
            v84 = 0;
            do
            {
              v85 = v79 + 1;
              *((_QWORD *)a2 + 1) = v79 + 1;
              v86 = *(_BYTE *)(v81 + v79);
              v84 |= (unint64_t)(v86 & 0x7F) << v82;
              if ((v86 & 0x80) == 0)
                goto LABEL_215;
              v82 += 7;
              v79 = v85;
              v19 = v83++ > 8;
            }
            while (!v19);
LABEL_173:
            LODWORD(v84) = 0;
            goto LABEL_215;
          }
          v115 = 0;
          v116 = 0;
          v84 = 0;
          if (v80 <= v79)
            v80 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v80 == v79)
            {
              LODWORD(v84) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v117 = v79 + 1;
              v118 = *(_BYTE *)(v81 + v79);
              *((_QWORD *)a2 + 1) = v117;
              v84 |= (unint64_t)(v118 & 0x7F) << v115;
              if (v118 < 0)
              {
                v115 += 7;
                v79 = v117;
                v19 = v116++ > 8;
                if (v19)
                  goto LABEL_173;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v84) = 0;
            }
            break;
          }
LABEL_215:
          *((_DWORD *)this + 46) = v84;
          goto LABEL_245;
        case 9u:
          *((_WORD *)this + 96) |= 4u;
          v87 = *((_QWORD *)a2 + 1);
          if (v87 > 0xFFFFFFFFFFFFFFF7 || v87 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_242;
          *((_QWORD *)this + 12) = *(_QWORD *)(*(_QWORD *)a2 + v87);
          goto LABEL_244;
        case 0xAu:
          *((_WORD *)this + 96) |= 0x10u;
          v88 = *((_QWORD *)a2 + 1);
          if (v88 > 0xFFFFFFFFFFFFFFF7 || v88 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_242;
          *((_QWORD *)this + 14) = *(_QWORD *)(*(_QWORD *)a2 + v88);
          goto LABEL_244;
        case 0xBu:
          *((_WORD *)this + 96) |= 1u;
          v89 = *((_QWORD *)a2 + 1);
          if (v89 > 0xFFFFFFFFFFFFFFF7 || v89 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_242;
          *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v89);
          goto LABEL_244;
        case 0xCu:
          *((_WORD *)this + 96) |= 8u;
          v90 = *((_QWORD *)a2 + 1);
          if (v90 > 0xFFFFFFFFFFFFFFF7 || v90 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_242;
          *((_QWORD *)this + 13) = *(_QWORD *)(*(_QWORD *)a2 + v90);
          goto LABEL_244;
        case 0xDu:
          *((_WORD *)this + 96) |= 0x20u;
          v91 = *((_QWORD *)a2 + 1);
          if (v91 > 0xFFFFFFFFFFFFFFF7 || v91 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_242;
          *((_QWORD *)this + 15) = *(_QWORD *)(*(_QWORD *)a2 + v91);
          goto LABEL_244;
        case 0xEu:
          *((_WORD *)this + 96) |= 0x800u;
          v92 = *((_QWORD *)a2 + 1);
          v93 = *((_QWORD *)a2 + 2);
          v94 = *(_QWORD *)a2;
          if (v92 <= 0xFFFFFFFFFFFFFFF5 && v92 + 10 <= v93)
          {
            v95 = 0;
            v96 = 0;
            v97 = 0;
            do
            {
              v98 = v92 + 1;
              *((_QWORD *)a2 + 1) = v92 + 1;
              v99 = *(_BYTE *)(v94 + v92);
              v97 |= (unint64_t)(v99 & 0x7F) << v95;
              if ((v99 & 0x80) == 0)
                goto LABEL_218;
              v95 += 7;
              v92 = v98;
              v19 = v96++ > 8;
            }
            while (!v19);
LABEL_180:
            v97 = 0;
            goto LABEL_218;
          }
          v119 = 0;
          v120 = 0;
          v97 = 0;
          if (v93 <= v92)
            v93 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v93 == v92)
            {
              v97 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v121 = v92 + 1;
              v122 = *(_BYTE *)(v94 + v92);
              *((_QWORD *)a2 + 1) = v121;
              v97 |= (unint64_t)(v122 & 0x7F) << v119;
              if (v122 < 0)
              {
                v119 += 7;
                v92 = v121;
                v19 = v120++ > 8;
                if (v19)
                  goto LABEL_180;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v97 = 0;
            }
            break;
          }
LABEL_218:
          *((_QWORD *)this + 21) = v97;
          goto LABEL_245;
        case 0xFu:
          *((_WORD *)this + 96) |= 0x80u;
          v100 = *((_QWORD *)a2 + 1);
          if (v100 > 0xFFFFFFFFFFFFFFF7 || v100 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_242;
          *((_QWORD *)this + 17) = *(_QWORD *)(*(_QWORD *)a2 + v100);
          goto LABEL_244;
        case 0x10u:
          *((_WORD *)this + 96) |= 0x100u;
          v101 = *((_QWORD *)a2 + 1);
          if (v101 > 0xFFFFFFFFFFFFFFF7 || v101 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_242;
          *((_QWORD *)this + 18) = *(_QWORD *)(*(_QWORD *)a2 + v101);
          goto LABEL_244;
        case 0x11u:
          *((_WORD *)this + 96) |= 0x200u;
          v102 = *((_QWORD *)a2 + 1);
          if (v102 > 0xFFFFFFFFFFFFFFF7 || v102 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_242;
          *((_QWORD *)this + 19) = *(_QWORD *)(*(_QWORD *)a2 + v102);
          goto LABEL_244;
        case 0x12u:
          *((_WORD *)this + 96) |= 0x400u;
          v103 = *((_QWORD *)a2 + 1);
          if (v103 > 0xFFFFFFFFFFFFFFF7 || v103 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_242;
          *((_QWORD *)this + 20) = *(_QWORD *)(*(_QWORD *)a2 + v103);
          goto LABEL_244;
        default:
          if ((PB::Reader::skip(a2, v16 >> 3, v25, 0) & 1) == 0)
            return 0;
          goto LABEL_245;
      }
    }
    v20 = 0;
    v21 = 0;
    v16 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v22 = v2 + 1;
      v23 = *(_BYTE *)(v13 + v2);
      *((_QWORD *)a2 + 1) = v22;
      v16 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0)
        goto LABEL_21;
      v20 += 7;
      v2 = v22;
      if (v21++ >= 9)
      {
LABEL_20:
        v16 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::LSLHeadingEstimation::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;
  double *v11;
  double *v12;
  double v13;
  __int16 v14;

  v3 = this;
  v4 = *(_WORD *)(this + 192);
  if ((v4 & 0x4000) == 0)
  {
    if ((*(_WORD *)(this + 192) & 0x1000) == 0)
      goto LABEL_3;
LABEL_28:
    this = PB::Writer::write(a2, *(double *)(v3 + 176), 2u);
    if ((*(_WORD *)(v3 + 192) & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 188), 1u);
  v4 = *(_WORD *)(v3 + 192);
  if ((v4 & 0x1000) != 0)
    goto LABEL_28;
LABEL_3:
  if ((v4 & 0x40) != 0)
LABEL_4:
    this = PB::Writer::write(a2, *(double *)(v3 + 128), 3u);
LABEL_5:
  v5 = *(double **)(v3 + 32);
  v6 = *(double **)(v3 + 40);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7, 4u);
  }
  v8 = *(double **)(v3 + 8);
  v9 = *(double **)(v3 + 16);
  while (v8 != v9)
  {
    v10 = *v8++;
    this = PB::Writer::write(a2, v10, 5u);
  }
  v11 = *(double **)(v3 + 56);
  v12 = *(double **)(v3 + 64);
  while (v11 != v12)
  {
    v13 = *v11++;
    this = PB::Writer::write(a2, v13, 6u);
  }
  v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 88), 7u);
    v14 = *(_WORD *)(v3 + 192);
    if ((v14 & 0x2000) == 0)
    {
LABEL_16:
      if ((v14 & 4) == 0)
        goto LABEL_17;
      goto LABEL_32;
    }
  }
  else if ((*(_WORD *)(v3 + 192) & 0x2000) == 0)
  {
    goto LABEL_16;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 184), 8u);
  v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 4) == 0)
  {
LABEL_17:
    if ((v14 & 0x10) == 0)
      goto LABEL_18;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(double *)(v3 + 96), 9u);
  v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 0x10) == 0)
  {
LABEL_18:
    if ((v14 & 1) == 0)
      goto LABEL_19;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(double *)(v3 + 112), 0xAu);
  v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 1) == 0)
  {
LABEL_19:
    if ((v14 & 8) == 0)
      goto LABEL_20;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(double *)(v3 + 80), 0xBu);
  v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 8) == 0)
  {
LABEL_20:
    if ((v14 & 0x20) == 0)
      goto LABEL_21;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(double *)(v3 + 104), 0xCu);
  v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 0x20) == 0)
  {
LABEL_21:
    if ((v14 & 0x800) == 0)
      goto LABEL_22;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(double *)(v3 + 120), 0xDu);
  v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 0x800) == 0)
  {
LABEL_22:
    if ((v14 & 0x80) == 0)
      goto LABEL_23;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 168), 0xEu);
  v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 0x80) == 0)
  {
LABEL_23:
    if ((v14 & 0x100) == 0)
      goto LABEL_24;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 136), 0xFu);
  v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 0x100) == 0)
  {
LABEL_24:
    if ((v14 & 0x200) == 0)
      goto LABEL_25;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 144), 0x10u);
  v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 0x200) == 0)
  {
LABEL_25:
    if ((v14 & 0x400) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 160), 0x12u);
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 152), 0x11u);
  if ((*(_WORD *)(v3 + 192) & 0x400) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 160), 0x12u);
  return this;
}

uint64_t CMMsl::LSLHeadingEstimation::hash_value(CMMsl::LSLHeadingEstimation *this)
{
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  double v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;

  v2 = *((_WORD *)this + 96);
  if ((v2 & 0x4000) != 0)
  {
    v3 = *((int *)this + 47);
    if ((*((_WORD *)this + 96) & 0x1000) != 0)
    {
LABEL_3:
      if (*((double *)this + 22) == 0.0)
        v4 = 0;
      else
        v4 = *((_QWORD *)this + 22);
      if ((v2 & 0x40) != 0)
        goto LABEL_7;
LABEL_12:
      v5 = 0;
      goto LABEL_13;
    }
  }
  else
  {
    v3 = 0;
    if ((*((_WORD *)this + 96) & 0x1000) != 0)
      goto LABEL_3;
  }
  v4 = 0;
  if ((v2 & 0x40) == 0)
    goto LABEL_12;
LABEL_7:
  if (*((double *)this + 16) == 0.0)
    v5 = 0;
  else
    v5 = *((_QWORD *)this + 16);
LABEL_13:
  v6 = PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
  v7 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  v8 = PBHashBytes(*((_QWORD *)this + 7), *((_QWORD *)this + 8) - *((_QWORD *)this + 7));
  v9 = *((_WORD *)this + 96);
  if ((v9 & 2) != 0)
  {
    v10 = *((double *)this + 11);
    if (v10 == 0.0)
      v10 = 0.0;
    if ((*((_WORD *)this + 96) & 0x2000) != 0)
    {
LABEL_15:
      v11 = *((int *)this + 46);
      if ((v9 & 4) != 0)
        goto LABEL_16;
LABEL_48:
      v12 = 0.0;
      if ((v9 & 0x10) != 0)
        goto LABEL_19;
LABEL_49:
      v13 = 0.0;
      if ((v9 & 1) != 0)
        goto LABEL_22;
LABEL_50:
      v14 = 0.0;
      if ((v9 & 8) != 0)
        goto LABEL_25;
LABEL_51:
      v15 = 0.0;
      if ((v9 & 0x20) != 0)
        goto LABEL_28;
LABEL_52:
      v16 = 0.0;
      if ((*((_WORD *)this + 96) & 0x800) != 0)
        goto LABEL_31;
      goto LABEL_53;
    }
  }
  else
  {
    v10 = 0.0;
    if ((*((_WORD *)this + 96) & 0x2000) != 0)
      goto LABEL_15;
  }
  v11 = 0;
  if ((v9 & 4) == 0)
    goto LABEL_48;
LABEL_16:
  v12 = *((double *)this + 12);
  if (v12 == 0.0)
    v12 = 0.0;
  if ((v9 & 0x10) == 0)
    goto LABEL_49;
LABEL_19:
  v13 = *((double *)this + 14);
  if (v13 == 0.0)
    v13 = 0.0;
  if ((v9 & 1) == 0)
    goto LABEL_50;
LABEL_22:
  v14 = *((double *)this + 10);
  if (v14 == 0.0)
    v14 = 0.0;
  if ((v9 & 8) == 0)
    goto LABEL_51;
LABEL_25:
  v15 = *((double *)this + 13);
  if (v15 == 0.0)
    v15 = 0.0;
  if ((v9 & 0x20) == 0)
    goto LABEL_52;
LABEL_28:
  v16 = *((double *)this + 15);
  if (v16 == 0.0)
    v16 = 0.0;
  if ((*((_WORD *)this + 96) & 0x800) != 0)
  {
LABEL_31:
    v17 = *((_QWORD *)this + 21);
    if ((v9 & 0x80) != 0)
      goto LABEL_32;
LABEL_54:
    v18 = 0.0;
    if ((*((_WORD *)this + 96) & 0x100) != 0)
      goto LABEL_35;
LABEL_55:
    v19 = 0.0;
    if ((*((_WORD *)this + 96) & 0x200) != 0)
      goto LABEL_38;
    goto LABEL_56;
  }
LABEL_53:
  v17 = 0;
  if ((v9 & 0x80) == 0)
    goto LABEL_54;
LABEL_32:
  v18 = *((double *)this + 17);
  if (v18 == 0.0)
    v18 = 0.0;
  if ((*((_WORD *)this + 96) & 0x100) == 0)
    goto LABEL_55;
LABEL_35:
  v19 = *((double *)this + 18);
  if (v19 == 0.0)
    v19 = 0.0;
  if ((*((_WORD *)this + 96) & 0x200) != 0)
  {
LABEL_38:
    v20 = *((double *)this + 19);
    if (v20 == 0.0)
      v20 = 0.0;
    if ((*((_WORD *)this + 96) & 0x400) != 0)
      goto LABEL_41;
LABEL_57:
    v21 = 0.0;
    return v4 ^ v3 ^ v5 ^ v6 ^ v7 ^ v8 ^ *(_QWORD *)&v10 ^ v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ *(_QWORD *)&v15 ^ *(_QWORD *)&v16 ^ v17 ^ *(_QWORD *)&v18 ^ *(_QWORD *)&v19 ^ *(_QWORD *)&v20 ^ *(_QWORD *)&v21;
  }
LABEL_56:
  v20 = 0.0;
  if ((*((_WORD *)this + 96) & 0x400) == 0)
    goto LABEL_57;
LABEL_41:
  v21 = *((double *)this + 20);
  if (v21 == 0.0)
    v21 = 0.0;
  return v4 ^ v3 ^ v5 ^ v6 ^ v7 ^ v8 ^ *(_QWORD *)&v10 ^ v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ *(_QWORD *)&v15 ^ *(_QWORD *)&v16 ^ v17 ^ *(_QWORD *)&v18 ^ *(_QWORD *)&v19 ^ *(_QWORD *)&v20 ^ *(_QWORD *)&v21;
}

void CMMsl::LegacyALS5CHInput::~LegacyALS5CHInput(CMMsl::LegacyALS5CHInput *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::LegacyALS5CHInput::LegacyALS5CHInput(CMMsl::LegacyALS5CHInput *this, const CMMsl::LegacyALS5CHInput *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  *(_QWORD *)this = off_100352710;
  *((_DWORD *)this + 10) = 0;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 40) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 40) & 2) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((_BYTE *)this + 40) = v3;
    *((_DWORD *)this + 4) = v5;
    v2 = *((_BYTE *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *((_BYTE *)this + 40) = v3;
    *((_DWORD *)this + 5) = v6;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *((_BYTE *)this + 40) = v3;
  *((_DWORD *)this + 6) = v7;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  v8 = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *((_BYTE *)this + 40) = v3;
  *((_DWORD *)this + 7) = v8;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      return *(float *)&v4;
    goto LABEL_16;
  }
LABEL_15:
  v9 = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *((_BYTE *)this + 40) = v3;
  *((_DWORD *)this + 8) = v9;
  if ((*((_BYTE *)a2 + 40) & 0x40) == 0)
    return *(float *)&v4;
LABEL_16:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  *((_BYTE *)this + 40) = v3 | 0x40;
  *((_DWORD *)this + 9) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::LegacyALS5CHInput::operator=(uint64_t a1, const CMMsl::LegacyALS5CHInput *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  int v12;
  int v13;

  if ((const CMMsl::LegacyALS5CHInput *)a1 != a2)
  {
    CMMsl::LegacyALS5CHInput::LegacyALS5CHInput((CMMsl::LegacyALS5CHInput *)&v8, a2);
    v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v13;
    v13 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    v10 = v5;
    v6 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v11;
    v11 = v6;
    LODWORD(v4) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v12;
    v12 = v4;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::LegacyALS5CHInput *a2, CMMsl::LegacyALS5CHInput *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  float result;

  v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  v6 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v6;
  v7 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v7;
  v8 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v8;
  v9 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v9;
  result = *((float *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((float *)a2 + 9) = result;
  return result;
}

float CMMsl::LegacyALS5CHInput::LegacyALS5CHInput(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100352710;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_100352710;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  return result;
}

uint64_t CMMsl::LegacyALS5CHInput::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  int v10;
  _QWORD v12[2];
  __int128 v13;
  int v14;
  int v15;
  int v16;

  if (a1 != a2)
  {
    v12[0] = off_100352710;
    v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a2 + 32);
    v6 = *(_DWORD *)(a2 + 36);
    v16 = *(_DWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v12[1] = v7;
    v8 = *(_OWORD *)(a1 + 16);
    v9 = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 40) = v3;
    *(_OWORD *)(a1 + 16) = v9;
    v13 = v8;
    v10 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v5;
    v14 = v10;
    LODWORD(v8) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v6;
    v15 = v8;
    PB::Base::~Base((PB::Base *)v12);
  }
  return a1;
}

uint64_t CMMsl::LegacyALS5CHInput::formatText(CMMsl::LegacyALS5CHInput *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "ch0", *((_DWORD *)this + 4));
    v5 = *((_BYTE *)this + 40);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*((_BYTE *)this + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "ch1", *((_DWORD *)this + 5));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "ch2", *((_DWORD *)this + 6));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "ch3", *((_DWORD *)this + 7));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(a2, "lux", *((float *)this + 9));
    if ((*((_BYTE *)this + 40) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "ch4", *((_DWORD *)this + 8));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 0x40) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 1) != 0)
LABEL_8:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::LegacyALS5CHInput::readFrom(CMMsl::LegacyALS5CHInput *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 40) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_64;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              v2 = *((_QWORD *)a2 + 1) + 8;
              goto LABEL_101;
            case 2u:
              *((_BYTE *)this + 40) |= 2u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_106;
                  }
                  v53 = v21++;
                  v54 = *(_BYTE *)(v22 + v53);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_105:
                    v2 = v53 + 1;
                    goto LABEL_106;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_105;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_106;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_106:
              *((_DWORD *)this + 4) = v25;
              goto LABEL_127;
            case 3u:
              *((_BYTE *)this + 40) |= 4u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v55 = 0;
                v56 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_111;
                  }
                  v57 = v27++;
                  v58 = *(_BYTE *)(v28 + v57);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0)
                    break;
                  v55 += 7;
                  v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_110:
                    v2 = v57 + 1;
                    goto LABEL_111;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_110;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_111;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_111:
              *((_DWORD *)this + 5) = v31;
              goto LABEL_127;
            case 4u:
              *((_BYTE *)this + 40) |= 8u;
              v33 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_116;
                  }
                  v61 = v33++;
                  v62 = *(_BYTE *)(v34 + v61);
                  *((_QWORD *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_115:
                    v2 = v61 + 1;
                    goto LABEL_116;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v37) = 0;
                goto LABEL_115;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)a2 + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_116;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_116:
              *((_DWORD *)this + 6) = v37;
              goto LABEL_127;
            case 5u:
              *((_BYTE *)this + 40) |= 0x10u;
              v39 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v40 = *(_QWORD *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_121;
                  }
                  v65 = v39++;
                  v66 = *(_BYTE *)(v40 + v65);
                  *((_QWORD *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_120:
                    v2 = v65 + 1;
                    goto LABEL_121;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v43) = 0;
                goto LABEL_120;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)a2 + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_121;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_121:
              *((_DWORD *)this + 7) = v43;
              goto LABEL_127;
            case 6u:
              *((_BYTE *)this + 40) |= 0x20u;
              v45 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v46 = *(_QWORD *)a2;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v67 = 0;
                v68 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_126;
                  }
                  v69 = v45++;
                  v70 = *(_BYTE *)(v46 + v69);
                  *((_QWORD *)a2 + 1) = v45;
                  v49 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0)
                    break;
                  v67 += 7;
                  v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_125:
                    v2 = v69 + 1;
                    goto LABEL_126;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v49) = 0;
                goto LABEL_125;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)a2 + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_126;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_126:
              *((_DWORD *)this + 8) = v49;
LABEL_127:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 7u:
              *((_BYTE *)this + 40) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
                v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_101:
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_64:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_127;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_127;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::LegacyALS5CHInput::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 40);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(this + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 2u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 3u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 4u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 5u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 36), 7u);
  }
LABEL_14:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 6u);
  if ((*(_BYTE *)(v3 + 40) & 0x40) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 36), 7u);
  return this;
}

uint64_t CMMsl::LegacyALS5CHInput::hash_value(CMMsl::LegacyALS5CHInput *this)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;

  if ((*((_BYTE *)this + 40) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 40) & 2) != 0)
    {
LABEL_3:
      v2 = *((int *)this + 4);
      if ((*((_BYTE *)this + 40) & 4) != 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 40) & 2) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 40) & 4) != 0)
  {
LABEL_4:
    v3 = *((int *)this + 5);
    if ((*((_BYTE *)this + 40) & 8) != 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  v3 = 0;
  if ((*((_BYTE *)this + 40) & 8) != 0)
  {
LABEL_5:
    v4 = *((int *)this + 6);
    if ((*((_BYTE *)this + 40) & 0x10) != 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  v4 = 0;
  if ((*((_BYTE *)this + 40) & 0x10) != 0)
  {
LABEL_6:
    v5 = *((int *)this + 7);
    if ((*((_BYTE *)this + 40) & 0x20) != 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  v5 = 0;
  if ((*((_BYTE *)this + 40) & 0x20) != 0)
  {
LABEL_7:
    v6 = *((int *)this + 8);
    if ((*((_BYTE *)this + 40) & 0x40) != 0)
      goto LABEL_8;
LABEL_19:
    v8 = 0;
    return v2 ^ *(_QWORD *)&v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v8;
  }
LABEL_18:
  v6 = 0;
  if ((*((_BYTE *)this + 40) & 0x40) == 0)
    goto LABEL_19;
LABEL_8:
  v7 = *((float *)this + 9);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  return v2 ^ *(_QWORD *)&v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v8;
}

void CMMsl::LiftToWakeFeaturesNeo::~LiftToWakeFeaturesNeo(CMMsl::LiftToWakeFeaturesNeo *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::LiftToWakeFeaturesNeo::LiftToWakeFeaturesNeo(CMMsl::LiftToWakeFeaturesNeo *this, const CMMsl::LiftToWakeFeaturesNeo *a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)this = off_100352748;
  *((_DWORD *)this + 10) = 0;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 40) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 40) & 8) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 8);
    v3 |= 8u;
    *((_BYTE *)this + 40) = v3;
    *((_DWORD *)this + 8) = v4;
    v2 = *((_BYTE *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v4 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *((_BYTE *)this + 40) = v3;
    *((_QWORD *)this + 2) = v4;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        return *(float *)&v4;
      goto LABEL_12;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  v4 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *((_BYTE *)this + 40) = v3;
  *((_QWORD *)this + 3) = v4;
  if ((*((_BYTE *)a2 + 40) & 0x10) == 0)
    return *(float *)&v4;
LABEL_12:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  *((_BYTE *)this + 40) = v3 | 0x10;
  *((_DWORD *)this + 9) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::LiftToWakeFeaturesNeo::operator=(uint64_t a1, const CMMsl::LiftToWakeFeaturesNeo *a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  if ((const CMMsl::LiftToWakeFeaturesNeo *)a1 != a2)
  {
    CMMsl::LiftToWakeFeaturesNeo::LiftToWakeFeaturesNeo((CMMsl::LiftToWakeFeaturesNeo *)&v8, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v3;
    *(_QWORD *)&v3 = v11;
    v4 = *(_QWORD *)(a1 + 24);
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v3;
    v6 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    v12 = v6;
    v10 = v4;
    v11 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::LiftToWakeFeaturesNeo *a2, CMMsl::LiftToWakeFeaturesNeo *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float result;

  v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  result = *((float *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((float *)a2 + 9) = result;
  return result;
}

float CMMsl::LiftToWakeFeaturesNeo::LiftToWakeFeaturesNeo(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100352748;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_100352748;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  return result;
}

uint64_t CMMsl::LiftToWakeFeaturesNeo::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  void (**v9)(CMMsl::LiftToWakeFeaturesNeo *__hidden);
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  if (a1 != a2)
  {
    v9 = off_100352748;
    v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    v4 = *(_QWORD *)(a2 + 24);
    v13 = *(_DWORD *)(a1 + 40);
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    v10 = v5;
    *(_QWORD *)&v5 = *(_QWORD *)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 24) = v4;
    v7 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 40) = v3;
    *(_QWORD *)(a1 + 32) = v7;
    v11 = v5;
    v12 = v6;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::LiftToWakeFeaturesNeo::formatText(CMMsl::LiftToWakeFeaturesNeo *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "gravityBufferDeltaToCurrentMax", *((float *)this + 8));
    v5 = *((_BYTE *)this + 40);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 40) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "gravityFilterDeltaToHeadUp", *((float *)this + 9));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "timestampGravityBufferFront", *((double *)this + 2));
    if ((*((_BYTE *)this + 40) & 4) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 2) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 4) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "timestampTimerRef", *((double *)this + 3));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::LiftToWakeFeaturesNeo::readFrom(CMMsl::LiftToWakeFeaturesNeo *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 40) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_39;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_36;
        case 2u:
          *((_BYTE *)this + 40) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_39;
          *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_41;
        case 3u:
          *((_BYTE *)this + 40) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_39;
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_36;
        case 4u:
          *((_BYTE *)this + 40) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_39;
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_36:
          v2 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_42;
        case 5u:
          *((_BYTE *)this + 40) |= 0x10u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_41:
            v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_42:
            *((_QWORD *)a2 + 1) = v2;
          }
          else
          {
LABEL_39:
            *((_BYTE *)a2 + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::LiftToWakeFeaturesNeo::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 40);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 40) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 2u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 36), 5u);
  }
LABEL_10:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 4u);
  if ((*(_BYTE *)(v3 + 40) & 0x10) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 36), 5u);
  return this;
}

uint64_t CMMsl::LiftToWakeFeaturesNeo::hash_value(CMMsl::LiftToWakeFeaturesNeo *this)
{
  double v1;
  float v2;
  uint64_t v3;
  double v4;
  double v5;
  float v6;
  uint64_t v7;

  if ((*((_BYTE *)this + 40) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 40) & 8) != 0)
      goto LABEL_3;
LABEL_18:
    v3 = 0;
    if ((*((_BYTE *)this + 40) & 2) != 0)
      goto LABEL_6;
LABEL_19:
    v4 = 0.0;
    if ((*((_BYTE *)this + 40) & 4) != 0)
      goto LABEL_9;
    goto LABEL_20;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 40) & 8) == 0)
    goto LABEL_18;
LABEL_3:
  v2 = *((float *)this + 8);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 40) & 2) == 0)
    goto LABEL_19;
LABEL_6:
  v4 = *((double *)this + 2);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((*((_BYTE *)this + 40) & 4) != 0)
  {
LABEL_9:
    v5 = *((double *)this + 3);
    if (v5 == 0.0)
      v5 = 0.0;
    if ((*((_BYTE *)this + 40) & 0x10) != 0)
      goto LABEL_12;
LABEL_21:
    v7 = 0;
    return v3 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ v7;
  }
LABEL_20:
  v5 = 0.0;
  if ((*((_BYTE *)this + 40) & 0x10) == 0)
    goto LABEL_21;
LABEL_12:
  v6 = *((float *)this + 9);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  return v3 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ v7;
}

void CMMsl::LiftToWakeOnHeadStatus::~LiftToWakeOnHeadStatus(CMMsl::LiftToWakeOnHeadStatus *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::LiftToWakeOnHeadStatus::LiftToWakeOnHeadStatus(CMMsl::LiftToWakeOnHeadStatus *this, const CMMsl::LiftToWakeOnHeadStatus *a2)
{
  char v2;
  char v3;
  double result;
  int v5;

  *(_QWORD *)this = off_100352780;
  *((_DWORD *)this + 7) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 28) = 1;
    *((double *)this + 1) = result;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 4) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *((_BYTE *)this + 28) = v3;
    *((_DWORD *)this + 6) = v5;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *((double *)a2 + 2);
    *((_BYTE *)this + 28) = v3 | 2;
    *((double *)this + 2) = result;
  }
  return result;
}

uint64_t CMMsl::LiftToWakeOnHeadStatus::operator=(uint64_t a1, uint64_t a2, double a3, double a4)
{
  int v4;
  char v6;
  char v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  void (**v12)(CMMsl::LiftToWakeOnHeadStatus *__hidden);
  __int128 v13;
  uint64_t v14;

  if (a1 != a2)
  {
    v12 = off_100352780;
    HIDWORD(v14) = 0;
    v6 = *(_BYTE *)(a2 + 28);
    if ((v6 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      v7 = 1;
      BYTE4(v14) = 1;
      if ((v6 & 4) != 0)
      {
LABEL_4:
        v4 = *(_DWORD *)(a2 + 24);
        v7 |= 4u;
        BYTE4(v14) = v7;
        if ((v6 & 2) != 0)
          goto LABEL_8;
        goto LABEL_9;
      }
    }
    else
    {
      v7 = 0;
      if ((*(_BYTE *)(a2 + 28) & 4) != 0)
        goto LABEL_4;
    }
    if ((v6 & 2) != 0)
    {
LABEL_8:
      a4 = *(double *)(a2 + 16);
      BYTE4(v14) = v7 | 2;
    }
LABEL_9:
    v8 = HIDWORD(v14);
    v9 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    *(_DWORD *)(a1 + 28) = v8;
    v14 = v9;
    v10 = *(_OWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a3;
    *(double *)(a1 + 16) = a4;
    v13 = v10;
    PB::Base::~Base((PB::Base *)&v12);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::LiftToWakeOnHeadStatus *a2, CMMsl::LiftToWakeOnHeadStatus *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  double result;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::LiftToWakeOnHeadStatus::LiftToWakeOnHeadStatus(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100352780;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100352780;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::LiftToWakeOnHeadStatus::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  void (**v7)(CMMsl::LiftToWakeOnHeadStatus *__hidden);
  __int128 v8;
  uint64_t v9;

  if (a1 != a2)
  {
    v7 = off_100352780;
    v3 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 28) = 0;
    v9 = *(_QWORD *)(a1 + 24);
    v4 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    v8 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::LiftToWakeOnHeadStatus::formatText(CMMsl::LiftToWakeOnHeadStatus *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 4) == 0)
  {
    if ((*((_BYTE *)this + 28) & 1) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    if ((*((_BYTE *)this + 28) & 2) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_4;
  }
  PB::TextFormatter::format(a2, "status", *((_DWORD *)this + 6));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 1) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 2) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "timestampArrival", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::LiftToWakeOnHeadStatus::readFrom(CMMsl::LiftToWakeOnHeadStatus *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int i;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  for (i = *((unsigned __int8 *)a2 + 24); v2 < v3 && i == 0; i = *((unsigned __int8 *)a2 + 24))
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          v11 = 0;
          goto LABEL_20;
        }
      }
      i = 1;
      *((_BYTE *)a2 + 24) = 1;
      return i == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      i = 0;
      return i == 0;
    }
    v20 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      *((_BYTE *)this + 28) |= 2u;
      v2 = *((_QWORD *)a2 + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
      {
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_47;
      }
    }
    else
    {
      if ((_DWORD)v20 == 2)
      {
        *((_BYTE *)this + 28) |= 4u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_52;
            }
            v30 = v21++;
            v31 = *(_BYTE *)(v22 + v30);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_51;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v25) = 0;
LABEL_51:
          v2 = v30 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_52:
        *((_DWORD *)this + 6) = v25;
        goto LABEL_53;
      }
      if ((_DWORD)v20 != 1)
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        goto LABEL_53;
      }
      *((_BYTE *)this + 28) |= 1u;
      v2 = *((_QWORD *)a2 + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
      {
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_47:
        v2 = *((_QWORD *)a2 + 1) + 8;
        *((_QWORD *)a2 + 1) = v2;
        goto LABEL_53;
      }
    }
    *((_BYTE *)a2 + 24) = 1;
LABEL_53:
    v3 = *((_QWORD *)a2 + 2);
  }
  return i == 0;
}

uint64_t CMMsl::LiftToWakeOnHeadStatus::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        return this;
      return PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
    }
  }
  else if ((*(_BYTE *)(this + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 2u);
  if ((*(_BYTE *)(v3 + 28) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
  return this;
}

uint64_t CMMsl::LiftToWakeOnHeadStatus::hash_value(CMMsl::LiftToWakeOnHeadStatus *this)
{
  double v1;
  uint64_t v2;
  double v3;

  if ((*((_BYTE *)this + 28) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 28) & 4) != 0)
    {
LABEL_3:
      v2 = *((unsigned int *)this + 6);
      if ((*((_BYTE *)this + 28) & 2) != 0)
        goto LABEL_4;
LABEL_11:
      v3 = 0.0;
      return v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3;
    }
  }
  else
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 28) & 4) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 28) & 2) == 0)
    goto LABEL_11;
LABEL_4:
  v3 = *((double *)this + 2);
  if (v3 == 0.0)
    v3 = 0.0;
  return v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3;
}

void CMMsl::LiftToWakeState::~LiftToWakeState(CMMsl::LiftToWakeState *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::LiftToWakeState::LiftToWakeState(CMMsl::LiftToWakeState *this, const CMMsl::LiftToWakeState *a2)
{
  char v2;
  char v3;
  double result;
  int v5;

  *(_QWORD *)this = off_1003527B8;
  *((_DWORD *)this + 7) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 28) = 1;
    *((double *)this + 1) = result;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 4) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *((_BYTE *)this + 28) = v3;
    *((_DWORD *)this + 6) = v5;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *((double *)a2 + 2);
    *((_BYTE *)this + 28) = v3 | 2;
    *((double *)this + 2) = result;
  }
  return result;
}

uint64_t CMMsl::LiftToWakeState::operator=(uint64_t a1, uint64_t a2, double a3, double a4)
{
  int v4;
  char v6;
  char v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  void (**v12)(CMMsl::LiftToWakeState *__hidden);
  __int128 v13;
  uint64_t v14;

  if (a1 != a2)
  {
    v12 = off_1003527B8;
    HIDWORD(v14) = 0;
    v6 = *(_BYTE *)(a2 + 28);
    if ((v6 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      v7 = 1;
      BYTE4(v14) = 1;
      if ((v6 & 4) != 0)
      {
LABEL_4:
        v4 = *(_DWORD *)(a2 + 24);
        v7 |= 4u;
        BYTE4(v14) = v7;
        if ((v6 & 2) != 0)
          goto LABEL_8;
        goto LABEL_9;
      }
    }
    else
    {
      v7 = 0;
      if ((*(_BYTE *)(a2 + 28) & 4) != 0)
        goto LABEL_4;
    }
    if ((v6 & 2) != 0)
    {
LABEL_8:
      a4 = *(double *)(a2 + 16);
      BYTE4(v14) = v7 | 2;
    }
LABEL_9:
    v8 = HIDWORD(v14);
    v9 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    *(_DWORD *)(a1 + 28) = v8;
    v14 = v9;
    v10 = *(_OWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a3;
    *(double *)(a1 + 16) = a4;
    v13 = v10;
    PB::Base::~Base((PB::Base *)&v12);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::LiftToWakeState *a2, CMMsl::LiftToWakeState *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  double result;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::LiftToWakeState::LiftToWakeState(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_1003527B8;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_1003527B8;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::LiftToWakeState::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  void (**v7)(CMMsl::LiftToWakeState *__hidden);
  __int128 v8;
  uint64_t v9;

  if (a1 != a2)
  {
    v7 = off_1003527B8;
    v3 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 28) = 0;
    v9 = *(_QWORD *)(a1 + 24);
    v4 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    v8 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::LiftToWakeState::formatText(CMMsl::LiftToWakeState *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 4) == 0)
  {
    if ((*((_BYTE *)this + 28) & 1) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    if ((*((_BYTE *)this + 28) & 2) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_4;
  }
  PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 6));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 1) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 2) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "timestampGestureBegin", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::LiftToWakeState::readFrom(CMMsl::LiftToWakeState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int i;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  for (i = *((unsigned __int8 *)a2 + 24); v2 < v3 && i == 0; i = *((unsigned __int8 *)a2 + 24))
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          v11 = 0;
          goto LABEL_20;
        }
      }
      i = 1;
      *((_BYTE *)a2 + 24) = 1;
      return i == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      i = 0;
      return i == 0;
    }
    v20 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      *((_BYTE *)this + 28) |= 2u;
      v2 = *((_QWORD *)a2 + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
      {
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_47;
      }
    }
    else
    {
      if ((_DWORD)v20 == 2)
      {
        *((_BYTE *)this + 28) |= 4u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_52;
            }
            v30 = v21++;
            v31 = *(_BYTE *)(v22 + v30);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_51;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v25) = 0;
LABEL_51:
          v2 = v30 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_52:
        *((_DWORD *)this + 6) = v25;
        goto LABEL_53;
      }
      if ((_DWORD)v20 != 1)
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        goto LABEL_53;
      }
      *((_BYTE *)this + 28) |= 1u;
      v2 = *((_QWORD *)a2 + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
      {
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_47:
        v2 = *((_QWORD *)a2 + 1) + 8;
        *((_QWORD *)a2 + 1) = v2;
        goto LABEL_53;
      }
    }
    *((_BYTE *)a2 + 24) = 1;
LABEL_53:
    v3 = *((_QWORD *)a2 + 2);
  }
  return i == 0;
}

uint64_t CMMsl::LiftToWakeState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        return this;
      return PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
    }
  }
  else if ((*(_BYTE *)(this + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 2u);
  if ((*(_BYTE *)(v3 + 28) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
  return this;
}

uint64_t CMMsl::LiftToWakeState::hash_value(CMMsl::LiftToWakeState *this)
{
  double v1;
  uint64_t v2;
  double v3;

  if ((*((_BYTE *)this + 28) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 28) & 4) != 0)
    {
LABEL_3:
      v2 = *((unsigned int *)this + 6);
      if ((*((_BYTE *)this + 28) & 2) != 0)
        goto LABEL_4;
LABEL_11:
      v3 = 0.0;
      return v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3;
    }
  }
  else
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 28) & 4) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 28) & 2) == 0)
    goto LABEL_11;
LABEL_4:
  v3 = *((double *)this + 2);
  if (v3 == 0.0)
    v3 = 0.0;
  return v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3;
}

void CMMsl::LiftToWakeStatusNeo::~LiftToWakeStatusNeo(CMMsl::LiftToWakeStatusNeo *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::LiftToWakeStatusNeo::LiftToWakeStatusNeo(uint64_t this, const CMMsl::LiftToWakeStatusNeo *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  char v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;

  *(_QWORD *)this = off_1003527F0;
  *(_DWORD *)(this + 64) = 0;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_WORD *)(this + 64) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_WORD *)a2 + 32);
    if ((v2 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_WORD *)a2 + 32) & 0x800) != 0)
  {
LABEL_5:
    v5 = *((_BYTE *)a2 + 60);
    v3 |= 0x800u;
    *(_WORD *)(this + 64) = v3;
    *(_BYTE *)(this + 60) = v5;
    v2 = *((_WORD *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 0x400) != 0)
  {
    v6 = *((_DWORD *)a2 + 14);
    v3 |= 0x400u;
    *(_WORD *)(this + 64) = v3;
    *(_DWORD *)(this + 56) = v6;
    v2 = *((_WORD *)a2 + 32);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x1000) == 0)
        goto LABEL_9;
      goto LABEL_20;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 64) = v3;
  *(_QWORD *)(this + 16) = v7;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x1000) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  v8 = *((_BYTE *)a2 + 61);
  v3 |= 0x1000u;
  *(_WORD *)(this + 64) = v3;
  *(_BYTE *)(this + 61) = v8;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  v9 = *((_DWORD *)a2 + 10);
  v3 |= 0x40u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 40) = v9;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_23;
  }
LABEL_22:
  v10 = *((_DWORD *)a2 + 11);
  v3 |= 0x80u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 44) = v10;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0)
      goto LABEL_13;
    goto LABEL_24;
  }
LABEL_23:
  v11 = *((_DWORD *)a2 + 12);
  v3 |= 0x100u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 48) = v11;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_25;
  }
LABEL_24:
  v12 = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 28) = v12;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_26;
  }
LABEL_25:
  v13 = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 32) = v13;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 4) == 0)
      goto LABEL_16;
    goto LABEL_27;
  }
LABEL_26:
  v14 = *((_DWORD *)a2 + 9);
  v3 |= 0x20u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 36) = v14;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 4) == 0)
  {
LABEL_16:
    if ((v2 & 0x200) == 0)
      return this;
LABEL_28:
    v16 = *((_DWORD *)a2 + 13);
    *(_WORD *)(this + 64) = v3 | 0x200;
    *(_DWORD *)(this + 52) = v16;
    return this;
  }
LABEL_27:
  v15 = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 24) = v15;
  if ((*((_WORD *)a2 + 32) & 0x200) != 0)
    goto LABEL_28;
  return this;
}

CMMsl *CMMsl::LiftToWakeStatusNeo::operator=(CMMsl *a1, const CMMsl::LiftToWakeStatusNeo *a2)
{
  CMMsl::LiftToWakeStatusNeo *v3;
  _BYTE v5[72];

  if (a1 != a2)
  {
    CMMsl::LiftToWakeStatusNeo::LiftToWakeStatusNeo((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::LiftToWakeStatusNeo *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::LiftToWakeStatusNeo *a2, CMMsl::LiftToWakeStatusNeo *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  float result;
  int v8;
  int v9;

  v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LOBYTE(v3) = *((_BYTE *)this + 60);
  *((_BYTE *)this + 60) = *((_BYTE *)a2 + 60);
  *((_BYTE *)a2 + 60) = v3;
  v5 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  LOBYTE(v5) = *((_BYTE *)this + 61);
  *((_BYTE *)this + 61) = *((_BYTE *)a2 + 61);
  *((_BYTE *)a2 + 61) = v5;
  LODWORD(v6) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v6;
  LODWORD(v6) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v6;
  LODWORD(v6) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v6;
  LODWORD(v6) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v6;
  LODWORD(v6) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6;
  result = *((float *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((float *)a2 + 9) = result;
  v8 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v8;
  v9 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v9;
  return result;
}

float CMMsl::LiftToWakeStatusNeo::LiftToWakeStatusNeo(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_1003527F0;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 61) = *(_BYTE *)(a2 + 61);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  return result;
}

CMMsl *CMMsl::LiftToWakeStatusNeo::operator=(CMMsl *this, uint64_t a2, CMMsl::LiftToWakeStatusNeo *a3)
{
  void (**v5)(CMMsl::LiftToWakeStatusNeo *__hidden);
  __int128 v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  int v12;

  if (this != (CMMsl *)a2)
  {
    v5 = off_1003527F0;
    v12 = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(a2 + 64) = 0;
    v11 = *(_WORD *)(a2 + 60);
    v6 = *(_OWORD *)(a2 + 8);
    v9 = *(_QWORD *)(a2 + 44);
    v8 = *(_OWORD *)(a2 + 28);
    v7 = *(_DWORD *)(a2 + 24);
    v10 = *(_QWORD *)(a2 + 52);
    CMMsl::swap(this, (CMMsl::LiftToWakeStatusNeo *)&v5, a3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return this;
}

uint64_t CMMsl::LiftToWakeStatusNeo::formatText(CMMsl::LiftToWakeStatusNeo *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "classificationType", *((_DWORD *)this + 6));
    v5 = *((_WORD *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "intervalSleepBeginToSleepDetected", *((float *)this + 7));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "intervalSleepDetectedToGazeDetected", *((float *)this + 8));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "intervalSleepDetectedToWakeDetected", *((float *)this + 9));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "intervalWakeBeginToWakeDetected", *((float *)this + 10));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "intervalWakeDetectedToGazeDetected", *((float *)this + 11));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "intervalWakeDetectedToSleepDetected", *((float *)this + 12));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "shouldNotify", *((_BYTE *)this + 60));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x1000) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "shouldNotifyStats", *((_BYTE *)this + 61));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "sleepType", *((_DWORD *)this + 13));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 1) == 0)
      goto LABEL_13;
LABEL_27:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    if ((*((_WORD *)this + 32) & 2) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_14;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 14));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 1) != 0)
    goto LABEL_27;
LABEL_13:
  if ((v5 & 2) != 0)
LABEL_14:
    PB::TextFormatter::format(a2, "timestampGestureBegin", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::LiftToWakeStatusNeo::readFrom(CMMsl::LiftToWakeStatusNeo *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  int v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 32) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_59;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_39;
            case 2u:
              *((_WORD *)this + 32) |= 0x800u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v22 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v22 = v21 != 0;
              }
              *((_BYTE *)this + 60) = v22;
              goto LABEL_117;
            case 3u:
              *((_WORD *)this + 32) |= 0x400u;
              v23 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v24 = *(_QWORD *)a2;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                v43 = 0;
                v44 = 0;
                v27 = 0;
                if (v2 <= v23)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_106;
                  }
                  v45 = v23++;
                  v46 = *(_BYTE *)(v24 + v45);
                  *((_QWORD *)a2 + 1) = v23;
                  v27 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0)
                    break;
                  v43 += 7;
                  v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_105:
                    v2 = v45 + 1;
                    goto LABEL_106;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v27) = 0;
                goto LABEL_105;
              }
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v2 = v23 + 1;
                *((_QWORD *)a2 + 1) = v23 + 1;
                v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0)
                  goto LABEL_106;
                v25 += 7;
                v23 = v2;
                v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_106:
              *((_DWORD *)this + 14) = v27;
              goto LABEL_117;
            case 4u:
              *((_WORD *)this + 32) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_59;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_39:
              v2 = *((_QWORD *)a2 + 1) + 8;
              goto LABEL_101;
            case 5u:
              *((_WORD *)this + 32) |= 0x1000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v30 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v30 = v29 != 0;
              }
              *((_BYTE *)this + 61) = v30;
              goto LABEL_117;
            case 6u:
              *((_WORD *)this + 32) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_59;
              *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_100;
            case 7u:
              *((_WORD *)this + 32) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_59;
              *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_100;
            case 8u:
              *((_WORD *)this + 32) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_59;
              *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_100;
            case 9u:
              *((_WORD *)this + 32) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_59;
              *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_100;
            case 0xAu:
              *((_WORD *)this + 32) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_59;
              *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_100;
            case 0xBu:
              *((_WORD *)this + 32) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_100:
                v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_101:
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_59:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_117;
            case 0xCu:
              *((_WORD *)this + 32) |= 4u;
              v31 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v32 = *(_QWORD *)a2;
              if (v31 > 0xFFFFFFFFFFFFFFF5 || v31 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v35 = 0;
                if (v2 <= v31)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v31)
                  {
                    LODWORD(v35) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_111;
                  }
                  v49 = v31++;
                  v50 = *(_BYTE *)(v32 + v49);
                  *((_QWORD *)a2 + 1) = v31;
                  v35 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v35) = 0;
LABEL_110:
                    v2 = v49 + 1;
                    goto LABEL_111;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v35) = 0;
                goto LABEL_110;
              }
              v33 = 0;
              v34 = 0;
              v35 = 0;
              do
              {
                v2 = v31 + 1;
                *((_QWORD *)a2 + 1) = v31 + 1;
                v36 = *(_BYTE *)(v32 + v31);
                v35 |= (unint64_t)(v36 & 0x7F) << v33;
                if ((v36 & 0x80) == 0)
                  goto LABEL_111;
                v33 += 7;
                v31 = v2;
                v14 = v34++ > 8;
              }
              while (!v14);
              LODWORD(v35) = 0;
LABEL_111:
              *((_DWORD *)this + 6) = v35;
              goto LABEL_117;
            case 0xDu:
              *((_WORD *)this + 32) |= 0x200u;
              v37 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v38 = *(_QWORD *)a2;
              if (v37 > 0xFFFFFFFFFFFFFFF5 || v37 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v41 = 0;
                if (v2 <= v37)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v37)
                  {
                    LODWORD(v41) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_116;
                  }
                  v53 = v37++;
                  v54 = *(_BYTE *)(v38 + v53);
                  *((_QWORD *)a2 + 1) = v37;
                  v41 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v41) = 0;
LABEL_115:
                    v2 = v53 + 1;
                    goto LABEL_116;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v41) = 0;
                goto LABEL_115;
              }
              v39 = 0;
              v40 = 0;
              v41 = 0;
              do
              {
                v2 = v37 + 1;
                *((_QWORD *)a2 + 1) = v37 + 1;
                v42 = *(_BYTE *)(v38 + v37);
                v41 |= (unint64_t)(v42 & 0x7F) << v39;
                if ((v42 & 0x80) == 0)
                  goto LABEL_116;
                v39 += 7;
                v37 = v2;
                v14 = v40++ > 8;
              }
              while (!v14);
              LODWORD(v41) = 0;
LABEL_116:
              *((_DWORD *)this + 13) = v41;
LABEL_117:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_117;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::LiftToWakeStatusNeo::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 64);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 0x800) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((*(_WORD *)(this + 64) & 0x800) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 60), 2u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 56), 3u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x1000) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 4u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x1000) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 61), 5u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 6u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 7u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 8u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 9u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 0xAu);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 4) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 0xBu);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 52), 0xDu);
  }
LABEL_26:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 0xCu);
  if ((*(_WORD *)(v3 + 64) & 0x200) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 52), 0xDu);
  return this;
}

uint64_t CMMsl::LiftToWakeStatusNeo::hash_value(CMMsl::LiftToWakeStatusNeo *this)
{
  __int16 v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *((_WORD *)this + 32);
  if ((v1 & 1) != 0)
  {
    v2 = *((double *)this + 1);
    if (v2 == 0.0)
      v2 = 0.0;
    if ((*((_WORD *)this + 32) & 0x800) != 0)
    {
LABEL_3:
      v3 = *((unsigned __int8 *)this + 60);
      if ((*((_WORD *)this + 32) & 0x400) != 0)
        goto LABEL_4;
      goto LABEL_33;
    }
  }
  else
  {
    v2 = 0.0;
    if ((*((_WORD *)this + 32) & 0x800) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((*((_WORD *)this + 32) & 0x400) != 0)
  {
LABEL_4:
    v4 = *((unsigned int *)this + 14);
    if ((v1 & 2) != 0)
      goto LABEL_5;
LABEL_34:
    v5 = 0.0;
    if ((*((_WORD *)this + 32) & 0x1000) != 0)
      goto LABEL_8;
    goto LABEL_35;
  }
LABEL_33:
  v4 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_34;
LABEL_5:
  v5 = *((double *)this + 2);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((*((_WORD *)this + 32) & 0x1000) != 0)
  {
LABEL_8:
    v6 = *((unsigned __int8 *)this + 61);
    if ((v1 & 0x40) != 0)
      goto LABEL_9;
LABEL_36:
    v8 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_12;
LABEL_37:
    v10 = 0;
    if ((*((_WORD *)this + 32) & 0x100) != 0)
      goto LABEL_15;
LABEL_38:
    v12 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_18;
LABEL_39:
    v14 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_21;
LABEL_40:
    v16 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_24;
LABEL_41:
    v18 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_27;
LABEL_42:
    v19 = 0;
    if ((*((_WORD *)this + 32) & 0x200) != 0)
      goto LABEL_28;
LABEL_43:
    v20 = 0;
    return v3 ^ *(_QWORD *)&v2 ^ v4 ^ *(_QWORD *)&v5 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v19 ^ v20;
  }
LABEL_35:
  v6 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_36;
LABEL_9:
  v7 = *((float *)this + 10);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_37;
LABEL_12:
  v9 = *((float *)this + 11);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((*((_WORD *)this + 32) & 0x100) == 0)
    goto LABEL_38;
LABEL_15:
  v11 = *((float *)this + 12);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_39;
LABEL_18:
  v13 = *((float *)this + 7);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_40;
LABEL_21:
  v15 = *((float *)this + 8);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_41;
LABEL_24:
  v17 = *((float *)this + 9);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_42;
LABEL_27:
  v19 = *((unsigned int *)this + 6);
  if ((*((_WORD *)this + 32) & 0x200) == 0)
    goto LABEL_43;
LABEL_28:
  v20 = *((unsigned int *)this + 13);
  return v3 ^ *(_QWORD *)&v2 ^ v4 ^ *(_QWORD *)&v5 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v19 ^ v20;
}

void CMMsl::LocationOscarEmu::~LocationOscarEmu(CMMsl::LocationOscarEmu *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::LocationOscarEmu::LocationOscarEmu(uint64_t this, const CMMsl::LocationOscarEmu *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;

  *(_QWORD *)this = off_100352828;
  *(_DWORD *)(this + 100) = 0;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x100) != 0)
  {
    v4 = *((_QWORD *)a2 + 9);
    v3 = 256;
    *(_WORD *)(this + 100) = 256;
    *(_QWORD *)(this + 72) = v4;
    v2 = *((_WORD *)a2 + 50);
    if ((v2 & 0x1000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_WORD *)a2 + 50) & 0x1000) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 24);
    v3 |= 0x1000u;
    *(_WORD *)(this + 100) = v3;
    *(_DWORD *)(this + 96) = v5;
    v2 = *((_WORD *)a2 + 50);
  }
LABEL_6:
  if ((v2 & 0x40) != 0)
  {
    v6 = *((_QWORD *)a2 + 7);
    v3 |= 0x40u;
    *(_WORD *)(this + 100) = v3;
    *(_QWORD *)(this + 56) = v6;
    v2 = *((_WORD *)a2 + 50);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_20;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 8);
  v3 |= 0x80u;
  *(_WORD *)(this + 100) = v3;
  *(_QWORD *)(this + 64) = v7;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  v8 = *((_QWORD *)a2 + 5);
  v3 |= 0x10u;
  *(_WORD *)(this + 100) = v3;
  *(_QWORD *)(this + 40) = v8;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  v9 = *((_QWORD *)a2 + 6);
  v3 |= 0x20u;
  *(_WORD *)(this + 100) = v3;
  *(_QWORD *)(this + 48) = v9;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 8) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0)
      goto LABEL_12;
    goto LABEL_23;
  }
LABEL_22:
  v10 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 100) = v3;
  *(_QWORD *)(this + 32) = v10;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_24;
  }
LABEL_23:
  v11 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 100) = v3;
  *(_QWORD *)(this + 8) = v11;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 2) == 0)
      goto LABEL_14;
    goto LABEL_25;
  }
LABEL_24:
  v12 = *((_QWORD *)a2 + 10);
  v3 |= 0x200u;
  *(_WORD *)(this + 100) = v3;
  *(_QWORD *)(this + 80) = v12;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 2) == 0)
  {
LABEL_14:
    if ((v2 & 4) == 0)
      goto LABEL_15;
    goto LABEL_26;
  }
LABEL_25:
  v13 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 100) = v3;
  *(_QWORD *)(this + 16) = v13;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 4) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0)
      goto LABEL_16;
    goto LABEL_27;
  }
LABEL_26:
  v14 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *(_WORD *)(this + 100) = v3;
  *(_QWORD *)(this + 24) = v14;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x800) == 0)
      return this;
LABEL_28:
    v16 = *((_DWORD *)a2 + 23);
    *(_WORD *)(this + 100) = v3 | 0x800;
    *(_DWORD *)(this + 92) = v16;
    return this;
  }
LABEL_27:
  v15 = *((_DWORD *)a2 + 22);
  v3 |= 0x400u;
  *(_WORD *)(this + 100) = v3;
  *(_DWORD *)(this + 88) = v15;
  if ((*((_WORD *)a2 + 50) & 0x800) != 0)
    goto LABEL_28;
  return this;
}

CMMsl *CMMsl::LocationOscarEmu::operator=(CMMsl *a1, const CMMsl::LocationOscarEmu *a2)
{
  CMMsl::LocationOscarEmu *v3;
  _BYTE v5[104];

  if (a1 != a2)
  {
    CMMsl::LocationOscarEmu::LocationOscarEmu((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::LocationOscarEmu *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::LocationOscarEmu *a2, CMMsl::LocationOscarEmu *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  int v15;
  int v16;

  v3 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v3;
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v4;
  v5 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v5;
  v6 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v6;
  v7 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v7;
  v8 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  v9 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v9;
  v10 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v10;
  v11 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v11;
  v12 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v12;
  v13 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v13;
  result = *((double *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((double *)a2 + 3) = result;
  v15 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v15;
  v16 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v16;
  return result;
}

double CMMsl::LocationOscarEmu::LocationOscarEmu(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100352828;
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a2 + 100) = 0;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  return result;
}

CMMsl *CMMsl::LocationOscarEmu::operator=(CMMsl *this, uint64_t a2, CMMsl::LocationOscarEmu *a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  void (**v9)(CMMsl::LocationOscarEmu *__hidden);
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  if (this != (CMMsl *)a2)
  {
    v9 = off_100352828;
    v4 = *(_OWORD *)(a2 + 56);
    v12 = *(_OWORD *)(a2 + 40);
    v13 = v4;
    v5 = *(_OWORD *)(a2 + 72);
    v6 = *(_OWORD *)(a2 + 24);
    v10 = *(_OWORD *)(a2 + 8);
    v11 = v6;
    v7 = *(_OWORD *)(a2 + 88);
    *(_DWORD *)(a2 + 100) = 0;
    v14 = v5;
    v15 = v7;
    CMMsl::swap(this, (CMMsl::LocationOscarEmu *)&v9, a3);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return this;
}

uint64_t CMMsl::LocationOscarEmu::formatText(CMMsl::LocationOscarEmu *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 50);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "altitude", *((double *)this + 1));
    v5 = *((_WORD *)this + 50);
    if ((v5 & 0x400) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((*((_WORD *)this + 50) & 0x400) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "confidence", *((_DWORD *)this + 22));
  v5 = *((_WORD *)this + 50);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "course", *((double *)this + 2));
  v5 = *((_WORD *)this + 50);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "courseAccuracy", *((double *)this + 3));
  v5 = *((_WORD *)this + 50);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "horizontalAccuracy", *((double *)this + 4));
  v5 = *((_WORD *)this + 50);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x800) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "latitude", *((double *)this + 5));
  v5 = *((_WORD *)this + 50);
  if ((v5 & 0x800) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "locationLoggingEnabled", *((_DWORD *)this + 23));
  v5 = *((_WORD *)this + 50);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "longitude", *((double *)this + 6));
  v5 = *((_WORD *)this + 50);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "speed", *((double *)this + 7));
  v5 = *((_WORD *)this + 50);
  if ((v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v5 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "speedAccuracy", *((double *)this + 8));
  v5 = *((_WORD *)this + 50);
  if ((v5 & 0x100) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
LABEL_27:
    PB::TextFormatter::format(a2, "type", *((_DWORD *)this + 24));
    if ((*((_WORD *)this + 50) & 0x200) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_14;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 9));
  v5 = *((_WORD *)this + 50);
  if ((v5 & 0x1000) != 0)
    goto LABEL_27;
LABEL_13:
  if ((v5 & 0x200) != 0)
LABEL_14:
    PB::TextFormatter::format(a2, "verticalAccuracy", *((double *)this + 10));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::LocationOscarEmu::readFrom(CMMsl::LocationOscarEmu *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 50) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_60;
              *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_97;
            case 2u:
              *((_WORD *)this + 50) |= 0x1000u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v39 = 0;
                v40 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_102;
                  }
                  v41 = v21++;
                  v42 = *(_BYTE *)(v22 + v41);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0)
                    break;
                  v39 += 7;
                  v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_101:
                    v2 = v41 + 1;
                    goto LABEL_102;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_101;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_102;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_102:
              *((_DWORD *)this + 24) = v25;
              goto LABEL_113;
            case 3u:
              *((_WORD *)this + 50) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_60;
              *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_97;
            case 4u:
              *((_WORD *)this + 50) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_60;
              *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_97;
            case 5u:
              *((_WORD *)this + 50) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_60;
              *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_97;
            case 6u:
              *((_WORD *)this + 50) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_60;
              *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_97;
            case 7u:
              *((_WORD *)this + 50) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_60;
              *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_97;
            case 8u:
              *((_WORD *)this + 50) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_60;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_97;
            case 9u:
              *((_WORD *)this + 50) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_60;
              *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_97;
            case 0xAu:
              *((_WORD *)this + 50) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_60;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_97;
            case 0xBu:
              *((_WORD *)this + 50) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_97:
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_60:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_113;
            case 0xCu:
              *((_WORD *)this + 50) |= 0x400u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v43 = 0;
                v44 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_107;
                  }
                  v45 = v27++;
                  v46 = *(_BYTE *)(v28 + v45);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0)
                    break;
                  v43 += 7;
                  v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_106:
                    v2 = v45 + 1;
                    goto LABEL_107;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_106;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_107;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_107:
              *((_DWORD *)this + 22) = v31;
              goto LABEL_113;
            case 0xDu:
              *((_WORD *)this + 50) |= 0x800u;
              v33 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_112;
                  }
                  v49 = v33++;
                  v50 = *(_BYTE *)(v34 + v49);
                  *((_QWORD *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_111:
                    v2 = v49 + 1;
                    goto LABEL_112;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v37) = 0;
                goto LABEL_111;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)a2 + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_112;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_112:
              *((_DWORD *)this + 23) = v37;
LABEL_113:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_113;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::LocationOscarEmu::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 100);
  if ((v4 & 0x100) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 72), 1u);
    v4 = *(_WORD *)(v3 + 100);
    if ((v4 & 0x1000) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((*(_WORD *)(this + 100) & 0x1000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 96), 2u);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 3u);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 4u);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 5u);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 6u);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 7u);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 8u);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 2) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 80), 9u);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 2) == 0)
  {
LABEL_11:
    if ((v4 & 4) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 0xAu);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 4) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 0xBu);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x800) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 92), 0xDu);
  }
LABEL_26:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 88), 0xCu);
  if ((*(_WORD *)(v3 + 100) & 0x800) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 92), 0xDu);
  return this;
}

uint64_t CMMsl::LocationOscarEmu::hash_value(CMMsl::LocationOscarEmu *this)
{
  __int16 v1;
  double v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *((_WORD *)this + 50);
  if ((v1 & 0x100) != 0)
  {
    v2 = *((double *)this + 9);
    if (v2 == 0.0)
      v2 = 0.0;
    if ((*((_WORD *)this + 50) & 0x1000) != 0)
    {
LABEL_3:
      v3 = *((unsigned int *)this + 24);
      if ((v1 & 0x40) != 0)
        goto LABEL_4;
LABEL_37:
      v4 = 0.0;
      if ((v1 & 0x80) != 0)
        goto LABEL_7;
LABEL_38:
      v5 = 0.0;
      if ((v1 & 0x10) != 0)
        goto LABEL_10;
LABEL_39:
      v6 = 0.0;
      if ((v1 & 0x20) != 0)
        goto LABEL_13;
LABEL_40:
      v7 = 0.0;
      if ((v1 & 8) != 0)
        goto LABEL_16;
LABEL_41:
      v8 = 0.0;
      if ((v1 & 1) != 0)
        goto LABEL_19;
LABEL_42:
      v9 = 0.0;
      if ((*((_WORD *)this + 50) & 0x200) != 0)
        goto LABEL_22;
LABEL_43:
      v10 = 0.0;
      if ((v1 & 2) != 0)
        goto LABEL_25;
LABEL_44:
      v11 = 0.0;
      if ((v1 & 4) != 0)
        goto LABEL_28;
LABEL_45:
      v12 = 0.0;
      if ((*((_WORD *)this + 50) & 0x400) != 0)
        goto LABEL_31;
LABEL_46:
      v13 = 0;
      if ((*((_WORD *)this + 50) & 0x800) != 0)
        goto LABEL_32;
LABEL_47:
      v14 = 0;
      return v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ v13 ^ v14;
    }
  }
  else
  {
    v2 = 0.0;
    if ((*((_WORD *)this + 50) & 0x1000) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_37;
LABEL_4:
  v4 = *((double *)this + 7);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 0x80) == 0)
    goto LABEL_38;
LABEL_7:
  v5 = *((double *)this + 8);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_39;
LABEL_10:
  v6 = *((double *)this + 5);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_40;
LABEL_13:
  v7 = *((double *)this + 6);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_41;
LABEL_16:
  v8 = *((double *)this + 4);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_42;
LABEL_19:
  v9 = *((double *)this + 1);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((*((_WORD *)this + 50) & 0x200) == 0)
    goto LABEL_43;
LABEL_22:
  v10 = *((double *)this + 10);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_44;
LABEL_25:
  v11 = *((double *)this + 2);
  if (v11 == 0.0)
    v11 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_45;
LABEL_28:
  v12 = *((double *)this + 3);
  if (v12 == 0.0)
    v12 = 0.0;
  if ((*((_WORD *)this + 50) & 0x400) == 0)
    goto LABEL_46;
LABEL_31:
  v13 = *((unsigned int *)this + 22);
  if ((*((_WORD *)this + 50) & 0x800) == 0)
    goto LABEL_47;
LABEL_32:
  v14 = *((unsigned int *)this + 23);
  return v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ v13 ^ v14;
}

void CMMsl::LockScreenStatus::~LockScreenStatus(CMMsl::LockScreenStatus *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::LockScreenStatus::LockScreenStatus(uint64_t this, const CMMsl::LockScreenStatus *a2)
{
  char v2;

  *(_QWORD *)this = off_100352860;
  *(_DWORD *)(this + 12) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_BYTE *)a2 + 8);
    *(_BYTE *)(this + 12) = 1;
    *(_BYTE *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::LockScreenStatus::operator=(uint64_t a1, uint64_t a2)
{
  char v3;
  int v4;
  char v5;
  void (**v7)(CMMsl::LockScreenStatus *__hidden);
  char v8;
  int v9;

  if (a1 != a2)
  {
    v7 = off_100352860;
    v3 = *(_BYTE *)(a2 + 8);
    v4 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(_BYTE *)(a2 + 12) & 1;
    v9 = v4;
    v5 = *(_BYTE *)(a1 + 8);
    *(_BYTE *)(a1 + 8) = v3;
    v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

{
  int v3;
  char v4;
  int v5;
  void (**v7)(CMMsl::LockScreenStatus *__hidden);
  char v8;
  int v9;

  if (a1 != a2)
  {
    v7 = off_100352860;
    v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    v4 = *(_BYTE *)(a2 + 8);
    v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    v9 = v5;
    LOBYTE(v3) = *(_BYTE *)(a1 + 8);
    *(_BYTE *)(a1 + 8) = v4;
    v8 = v3;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::LockScreenStatus *a2, CMMsl::LockScreenStatus *a3)
{
  int v3;

  v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 8);
  *(_BYTE *)(this + 8) = *((_BYTE *)a2 + 8);
  *((_BYTE *)a2 + 8) = v3;
  return this;
}

uint64_t CMMsl::LockScreenStatus::formatText(CMMsl::LockScreenStatus *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 12) & 1) != 0)
    PB::TextFormatter::format(a2, "lockScreen", *((_BYTE *)this + 8));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::LockScreenStatus::readFrom(CMMsl::LockScreenStatus *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 12) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        if (v2 >= v3)
        {
          v21 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v21 = v20 != 0;
        }
        *((_BYTE *)this + 8) = v21;
      }
      else
      {
        result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::LockScreenStatus::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 12) & 1) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(this + 8), 1u);
  return this;
}

uint64_t CMMsl::LockScreenStatus::hash_value(CMMsl::LockScreenStatus *this)
{
  if ((*((_BYTE *)this + 12) & 1) != 0)
    return *((unsigned __int8 *)this + 8);
  else
    return 0;
}

void CMMsl::MLBasedBioMotionClassification::~MLBasedBioMotionClassification(CMMsl::MLBasedBioMotionClassification *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100352898;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100352898;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100352898;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::MLBasedBioMotionClassification::MLBasedBioMotionClassification(_QWORD *this, const CMMsl::MLBasedBioMotionClassification *a2)
{
  *this = off_100352898;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::MLBasedBioMotionClassification *CMMsl::MLBasedBioMotionClassification::operator=(const CMMsl::MLBasedBioMotionClassification *a1, const CMMsl::MLBasedBioMotionClassification *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::MLBasedBioMotionClassification *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::MLBasedBioMotionClassification::MLBasedBioMotionClassification(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_100352898;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::MLBasedBioMotionClassification *a2, CMMsl::MLBasedBioMotionClassification *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::MLBasedBioMotionClassification::MLBasedBioMotionClassification(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100352898;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100352898;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::MLBasedBioMotionClassification::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_100352898;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::MLBasedBioMotionClassification::formatText(CMMsl::MLBasedBioMotionClassification *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MLBasedBioMotionClassification::readFrom(CMMsl::MLBasedBioMotionClassification *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MLBasedBioMotionClassification::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

CMMsl::BioMotionClassification *CMMsl::MLBasedBioMotionClassification::hash_value(CMMsl::MLBasedBioMotionClassification *this)
{
  CMMsl::BioMotionClassification *result;

  result = (CMMsl::BioMotionClassification *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::BioMotionClassification *)CMMsl::BioMotionClassification::hash_value(result);
  return result;
}

uint64_t CMMsl::MLBasedBioMotionClassification::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

void CMMsl::MagicMountState::~MagicMountState(CMMsl::MagicMountState *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::MagicMountState::MagicMountState(uint64_t this, const CMMsl::MagicMountState *a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)this = off_1003528D0;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::MagicMountState::operator=(uint64_t a1, uint64_t a2)
{
  int v2;
  void (**v4)(CMMsl::MagicMountState *__hidden);
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;

  if (a1 != a2)
  {
    v4 = off_1003528D0;
    v11[0] = off_1003528D0;
    HIDWORD(v12) = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      v4 = *(void (***)(CMMsl::MagicMountState *__hidden))(a2 + 8);
      BYTE4(v12) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v2 = *(_DWORD *)(a2 + 16);
        BYTE4(v12) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = HIDWORD(v12);
    v8 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v11[1] = v8;
    v9 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v2;
    *(_DWORD *)(a1 + 20) = v7;
    v12 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v8[0] = off_1003528D0;
    v8[1] = v5;
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v4;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::MagicMountState *a2, CMMsl::MagicMountState *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  return this;
}

uint64_t CMMsl::MagicMountState::formatText(CMMsl::MagicMountState *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 4));
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MagicMountState::readFrom(CMMsl::MagicMountState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t result;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)a2 + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v27 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v28 = *(_QWORD *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v31 = 0;
          if (v2 <= v27)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_64;
            }
            v40 = v27++;
            v41 = *(_BYTE *)(v28 + v40);
            *((_QWORD *)a2 + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_63;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v31) = 0;
LABEL_63:
          v3 = v40 + 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v3 = v27 + 1;
            *((_QWORD *)a2 + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v3;
            v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_64:
        *((_DWORD *)this + 4) = v31;
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v34 = 0;
          v35 = 0;
          v25 = 0;
          if (v2 <= v21)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v21)
            {
              v25 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_60;
            }
            v36 = v21++;
            v37 = *(_BYTE *)(v22 + v36);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0)
              break;
            v34 += 7;
            v14 = v35++ > 8;
            if (v14)
            {
              v25 = 0;
              goto LABEL_59;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v25 = 0;
LABEL_59:
          v3 = v36 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v3 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v3;
            v14 = v24++ > 8;
            if (v14)
            {
              v25 = 0;
              break;
            }
          }
        }
LABEL_60:
        *((_QWORD *)this + 1) = v25;
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MagicMountState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 2u);
  return this;
}

uint64_t CMMsl::MagicMountState::hash_value(CMMsl::MagicMountState *this)
{
  uint64_t v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((_QWORD *)this + 1);
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_5:
    v2 = 0;
    return v2 ^ v1;
  }
  v1 = 0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_5;
LABEL_3:
  v2 = *((unsigned int *)this + 4);
  return v2 ^ v1;
}

void CMMsl::MagneticAccessoryType1::~MagneticAccessoryType1(CMMsl::MagneticAccessoryType1 *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_100352908;
  v4 = *((_QWORD *)this + 1);
  v2 = (_QWORD *)((char *)this + 8);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_100011294((uint64_t)v2, v3);
  PB::Base::~Base(this);
}

{
  CMMsl::MagneticAccessoryType1::~MagneticAccessoryType1(this);
  operator delete();
}

uint64_t CMMsl::MagneticAccessoryType1::MagneticAccessoryType1(uint64_t this, const CMMsl::MagneticAccessoryType1 *a2)
{
  char v2;
  int v3;
  char v4;

  *(_QWORD *)this = off_100352908;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  v2 = *((_BYTE *)a2 + 24);
  if ((v2 & 1) != 0)
  {
    v3 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 24) |= 1u;
    *(_DWORD *)(this + 16) = v3;
    v2 = *((_BYTE *)a2 + 24);
  }
  if ((v2 & 2) != 0)
  {
    v4 = *((_BYTE *)a2 + 20);
    *(_BYTE *)(this + 24) |= 2u;
    *(_BYTE *)(this + 20) = v4;
  }
  return this;
}

uint64_t CMMsl::MagneticAccessoryType1::operator=(uint64_t a1, const CMMsl::MagneticAccessoryType1 *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;

  if ((const CMMsl::MagneticAccessoryType1 *)a1 != a2)
  {
    CMMsl::MagneticAccessoryType1::MagneticAccessoryType1((uint64_t)&v6, a2);
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v7;
    v7 = v4;
    LODWORD(v4) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v8;
    v8 = v4;
    LOBYTE(v4) = *(_BYTE *)(a1 + 20);
    *(_BYTE *)(a1 + 20) = v9;
    v9 = v4;
    CMMsl::MagneticAccessoryType1::~MagneticAccessoryType1((CMMsl::MagneticAccessoryType1 *)&v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::MagneticAccessoryType1 *a2, CMMsl::MagneticAccessoryType1 *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LOBYTE(v4) = *(_BYTE *)(this + 20);
  *(_BYTE *)(this + 20) = *((_BYTE *)a2 + 20);
  *((_BYTE *)a2 + 20) = v4;
  return this;
}

uint64_t CMMsl::MagneticAccessoryType1::MagneticAccessoryType1(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = off_100352908;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v6 = *v4;
  *v4 = v5;
  if (v6)
    sub_100011294((uint64_t)v4, v6);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  return a1;
}

uint64_t CMMsl::MagneticAccessoryType1::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;

  if (a1 != a2)
  {
    CMMsl::MagneticAccessoryType1::MagneticAccessoryType1((uint64_t)&v6, a2);
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v7;
    v7 = v4;
    LODWORD(v4) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v8;
    v8 = v4;
    LOBYTE(v4) = *(_BYTE *)(a1 + 20);
    *(_BYTE *)(a1 + 20) = v9;
    v9 = v4;
    CMMsl::MagneticAccessoryType1::~MagneticAccessoryType1((CMMsl::MagneticAccessoryType1 *)&v6);
  }
  return a1;
}

uint64_t CMMsl::MagneticAccessoryType1::formatText(CMMsl::MagneticAccessoryType1 *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "accessoryType", *((_DWORD *)this + 4));
    v5 = *((_BYTE *)this + 24);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "isAttached", *((_BYTE *)this + 20));
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format(a2, "uuid");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MagneticAccessoryType1::readFrom(CMMsl::MagneticAccessoryType1 *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t result;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((_BYTE *)this + 24) |= 2u;
        v21 = *((_QWORD *)a2 + 1);
        if (v21 >= *((_QWORD *)a2 + 2))
        {
          v24 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v22 = v21 + 1;
          v23 = *(unsigned __int8 *)(*(_QWORD *)a2 + v21);
          *((_QWORD *)a2 + 1) = v22;
          v24 = v23 != 0;
        }
        *((_BYTE *)this + 20) = v24;
      }
      else if ((_DWORD)v20 == 2)
      {
        *((_BYTE *)this + 24) |= 1u;
        v25 = *((_QWORD *)a2 + 1);
        v26 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v25 > 0xFFFFFFFFFFFFFFF5 || v25 + 10 > v26)
        {
          v34 = 0;
          v35 = 0;
          v30 = 0;
          if (v26 <= v25)
            v26 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v26 == v25)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_48;
            }
            v36 = v25 + 1;
            v37 = *(_BYTE *)(v27 + v25);
            *((_QWORD *)a2 + 1) = v36;
            v30 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0)
              break;
            v34 += 7;
            v25 = v36;
            v14 = v35++ > 8;
            if (v14)
            {
LABEL_44:
              LODWORD(v30) = 0;
              goto LABEL_48;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
        }
        else
        {
          v28 = 0;
          v29 = 0;
          v30 = 0;
          while (1)
          {
            v31 = v25 + 1;
            *((_QWORD *)a2 + 1) = v25 + 1;
            v32 = *(_BYTE *)(v27 + v25);
            v30 |= (unint64_t)(v32 & 0x7F) << v28;
            if ((v32 & 0x80) == 0)
              break;
            v28 += 7;
            v25 = v31;
            v14 = v29++ > 8;
            if (v14)
              goto LABEL_44;
          }
        }
LABEL_48:
        *((_DWORD *)this + 4) = v30;
      }
      else
      {
        if ((_DWORD)v20 == 1)
          operator new();
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MagneticAccessoryType1::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = this;
  v4 = *(_QWORD *)(this + 8);
  if (v4)
    this = PB::Writer::write(a2, v4, 1);
  v5 = *(_BYTE *)(v3 + 24);
  if ((v5 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 2u);
    v5 = *(_BYTE *)(v3 + 24);
  }
  if ((v5 & 2) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 20), 3u);
  return this;
}

unint64_t CMMsl::MagneticAccessoryType1::hash_value(CMMsl::MagneticAccessoryType1 *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    v3 = sub_1000112DC((uint64_t)&v7, v2);
  else
    v3 = 0;
  if ((*((_BYTE *)this + 24) & 1) != 0)
  {
    v4 = *((unsigned int *)this + 4);
    if ((*((_BYTE *)this + 24) & 2) != 0)
      goto LABEL_6;
LABEL_8:
    v5 = 0;
    return v4 ^ v3 ^ v5;
  }
  v4 = 0;
  if ((*((_BYTE *)this + 24) & 2) == 0)
    goto LABEL_8;
LABEL_6:
  v5 = *((unsigned __int8 *)this + 20);
  return v4 ^ v3 ^ v5;
}

void CMMsl::MagneticAccessoryType2::~MagneticAccessoryType2(CMMsl::MagneticAccessoryType2 *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::MagneticAccessoryType2::MagneticAccessoryType2(uint64_t this, const CMMsl::MagneticAccessoryType2 *a2)
{
  char v2;

  *(_QWORD *)this = off_100352940;
  *(_DWORD *)(this + 12) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_BYTE *)a2 + 8);
    *(_BYTE *)(this + 12) = 1;
    *(_BYTE *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::MagneticAccessoryType2::operator=(uint64_t a1, uint64_t a2)
{
  char v3;
  int v4;
  char v5;
  void (**v7)(CMMsl::MagneticAccessoryType2 *__hidden);
  char v8;
  int v9;

  if (a1 != a2)
  {
    v7 = off_100352940;
    v3 = *(_BYTE *)(a2 + 8);
    v4 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(_BYTE *)(a2 + 12) & 1;
    v9 = v4;
    v5 = *(_BYTE *)(a1 + 8);
    *(_BYTE *)(a1 + 8) = v3;
    v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

{
  int v3;
  char v4;
  int v5;
  void (**v7)(CMMsl::MagneticAccessoryType2 *__hidden);
  char v8;
  int v9;

  if (a1 != a2)
  {
    v7 = off_100352940;
    v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    v4 = *(_BYTE *)(a2 + 8);
    v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    v9 = v5;
    LOBYTE(v3) = *(_BYTE *)(a1 + 8);
    *(_BYTE *)(a1 + 8) = v4;
    v8 = v3;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::MagneticAccessoryType2 *a2, CMMsl::MagneticAccessoryType2 *a3)
{
  int v3;

  v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 8);
  *(_BYTE *)(this + 8) = *((_BYTE *)a2 + 8);
  *((_BYTE *)a2 + 8) = v3;
  return this;
}

uint64_t CMMsl::MagneticAccessoryType2::formatText(CMMsl::MagneticAccessoryType2 *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 12) & 1) != 0)
    PB::TextFormatter::format(a2, "isCharging", *((_BYTE *)this + 8));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MagneticAccessoryType2::readFrom(CMMsl::MagneticAccessoryType2 *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 12) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        if (v2 >= v3)
        {
          v21 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v21 = v20 != 0;
        }
        *((_BYTE *)this + 8) = v21;
      }
      else
      {
        result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MagneticAccessoryType2::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 12) & 1) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(this + 8), 1u);
  return this;
}

uint64_t CMMsl::MagneticAccessoryType2::hash_value(CMMsl::MagneticAccessoryType2 *this)
{
  if ((*((_BYTE *)this + 12) & 1) != 0)
    return *((unsigned __int8 *)this + 8);
  else
    return 0;
}

void CMMsl::Magnetometer::~Magnetometer(CMMsl::Magnetometer *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::Magnetometer::Magnetometer(uint64_t this, const CMMsl::Magnetometer *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  *(_QWORD *)this = off_100352978;
  *(_DWORD *)(this + 36) = 0;
  v2 = *((_BYTE *)a2 + 36);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 36) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 36);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 36) & 8) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *(_BYTE *)(this + 36) = v3;
    *(_DWORD *)(this + 24) = v5;
    v2 = *((_BYTE *)a2 + 36);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    v6 = *((_DWORD *)a2 + 7);
    v3 |= 0x10u;
    *(_BYTE *)(this + 36) = v3;
    *(_DWORD *)(this + 28) = v6;
    v2 = *((_BYTE *)a2 + 36);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *(_BYTE *)(this + 36) = v3;
  *(_DWORD *)(this + 32) = v7;
  v2 = *((_BYTE *)a2 + 36);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0)
      return this;
LABEL_14:
    v9 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 36) = v3 | 2;
    *(_DWORD *)(this + 16) = v9;
    return this;
  }
LABEL_13:
  v8 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *(_BYTE *)(this + 36) = v3;
  *(_DWORD *)(this + 20) = v8;
  if ((*((_BYTE *)a2 + 36) & 2) != 0)
    goto LABEL_14;
  return this;
}

uint64_t CMMsl::Magnetometer::operator=(uint64_t a1, const CMMsl::Magnetometer *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  int v6;
  _BYTE v8[8];
  uint64_t v9;
  int v10;
  __int128 v11;
  int v12;

  if ((const CMMsl::Magnetometer *)a1 != a2)
  {
    CMMsl::Magnetometer::Magnetometer((uint64_t)v8, a2);
    v3 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v12;
    v12 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 20);
    *(_OWORD *)(a1 + 20) = v11;
    v11 = v5;
    v6 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v10;
    v10 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::Magnetometer *a2, CMMsl::Magnetometer *a3)
{
  int v3;
  uint64_t v4;
  float result;
  int v6;

  v3 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  result = *((float *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((float *)a2 + 5) = result;
  v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  return result;
}

float CMMsl::Magnetometer::Magnetometer(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100352978;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_100352978;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::Magnetometer::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  int v9;
  _QWORD v11[2];
  int v12;
  __int128 v13;
  int v14;

  if (a1 != a2)
  {
    v11[0] = off_100352978;
    v3 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a2 + 36) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a2 + 16);
    v14 = *(_DWORD *)(a1 + 36);
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v11[1] = v6;
    v7 = *(_OWORD *)(a1 + 20);
    v8 = *(_OWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 36) = v3;
    *(_OWORD *)(a1 + 20) = v8;
    v13 = v7;
    v9 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v5;
    v12 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

uint64_t CMMsl::Magnetometer::formatText(CMMsl::Magnetometer *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 36);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 4));
    v5 = *((_BYTE *)this + 36);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*((_BYTE *)this + 36) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "temperature", *((float *)this + 5));
  v5 = *((_BYTE *)this + 36);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  v5 = *((_BYTE *)this + 36);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(a2, "y", *((float *)this + 7));
    if ((*((_BYTE *)this + 36) & 0x20) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "x", *((float *)this + 6));
  v5 = *((_BYTE *)this + 36);
  if ((v5 & 0x10) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 0x20) != 0)
LABEL_7:
    PB::TextFormatter::format(a2, "z", *((float *)this + 8));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Magnetometer::readFrom(CMMsl::Magnetometer *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 36) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_38;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              v2 = *((_QWORD *)a2 + 1) + 8;
              goto LABEL_55;
            case 2u:
              *((_BYTE *)this + 36) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_38;
              *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_54;
            case 3u:
              *((_BYTE *)this + 36) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_38;
              *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_54;
            case 4u:
              *((_BYTE *)this + 36) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_38;
              *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_54;
            case 5u:
              *((_BYTE *)this + 36) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_54:
                v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_55:
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_38:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_61;
            case 6u:
              *((_BYTE *)this + 36) |= 2u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_60;
                  }
                  v29 = v21++;
                  v30 = *(_BYTE *)(v22 + v29);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_59:
                    v2 = v29 + 1;
                    goto LABEL_60;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_59;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_60;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_60:
              *((_DWORD *)this + 4) = v25;
LABEL_61:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_61;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::Magnetometer::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 36);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 36);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(this + 36) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 3u);
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 4u);
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 6u);
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 5u);
  if ((*(_BYTE *)(v3 + 36) & 2) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 6u);
  return this;
}

uint64_t CMMsl::Magnetometer::hash_value(CMMsl::Magnetometer *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;

  if ((*((_BYTE *)this + 36) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 36) & 8) != 0)
      goto LABEL_3;
LABEL_19:
    v3 = 0;
    if ((*((_BYTE *)this + 36) & 0x10) != 0)
      goto LABEL_6;
LABEL_20:
    v5 = 0;
    if ((*((_BYTE *)this + 36) & 0x20) != 0)
      goto LABEL_9;
LABEL_21:
    v7 = 0;
    if ((*((_BYTE *)this + 36) & 4) != 0)
      goto LABEL_12;
    goto LABEL_22;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 36) & 8) == 0)
    goto LABEL_19;
LABEL_3:
  v2 = *((float *)this + 6);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 36) & 0x10) == 0)
    goto LABEL_20;
LABEL_6:
  v4 = *((float *)this + 7);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((*((_BYTE *)this + 36) & 0x20) == 0)
    goto LABEL_21;
LABEL_9:
  v6 = *((float *)this + 8);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((*((_BYTE *)this + 36) & 4) != 0)
  {
LABEL_12:
    v8 = *((float *)this + 5);
    v9 = LODWORD(v8);
    if (v8 == 0.0)
      v9 = 0;
    if ((*((_BYTE *)this + 36) & 2) != 0)
      goto LABEL_15;
LABEL_23:
    v10 = 0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7 ^ v9 ^ v10;
  }
LABEL_22:
  v9 = 0;
  if ((*((_BYTE *)this + 36) & 2) == 0)
    goto LABEL_23;
LABEL_15:
  v10 = *((int *)this + 4);
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7 ^ v9 ^ v10;
}

void CMMsl::MagnetometerCalibratorFilterParameters::~MagnetometerCalibratorFilterParameters(CMMsl::MagnetometerCalibratorFilterParameters *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = off_1003529B0;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 2) = v5;
    operator delete(v5);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::MagnetometerCalibratorFilterParameters::~MagnetometerCalibratorFilterParameters(this);
  operator delete();
}

CMMsl::MagnetometerCalibratorFilterParameters *CMMsl::MagnetometerCalibratorFilterParameters::MagnetometerCalibratorFilterParameters(CMMsl::MagnetometerCalibratorFilterParameters *this, const CMMsl::MagnetometerCalibratorFilterParameters *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;

  *(_QWORD *)this = off_1003529B0;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  v5 = (char *)this + 56;
  *((_DWORD *)this + 28) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  if ((*((_BYTE *)a2 + 112) & 1) != 0)
  {
    v6 = *((_QWORD *)a2 + 13);
    *((_BYTE *)this + 112) = 1;
    *((_QWORD *)this + 13) = v6;
  }
  if (this != a2)
  {
    sub_100020CE4((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
    sub_100020CE4(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
    sub_100020CE4((char *)this + 80, *((char **)a2 + 10), *((_QWORD *)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 2);
    sub_100020CE4(v5, *((char **)a2 + 7), *((_QWORD *)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 2);
  }
  return this;
}

CMMsl *CMMsl::MagnetometerCalibratorFilterParameters::operator=(CMMsl *a1, const CMMsl::MagnetometerCalibratorFilterParameters *a2)
{
  CMMsl::MagnetometerCalibratorFilterParameters *v3;
  _BYTE v5[120];

  if (a1 != a2)
  {
    CMMsl::MagnetometerCalibratorFilterParameters::MagnetometerCalibratorFilterParameters((CMMsl::MagnetometerCalibratorFilterParameters *)v5, a2);
    CMMsl::swap(a1, (CMMsl::MagnetometerCalibratorFilterParameters *)v5, v3);
    CMMsl::MagnetometerCalibratorFilterParameters::~MagnetometerCalibratorFilterParameters((CMMsl::MagnetometerCalibratorFilterParameters *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::MagnetometerCalibratorFilterParameters *a2, CMMsl::MagnetometerCalibratorFilterParameters *a3)
{
  int v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v3;
  result = *((double *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((double *)a2 + 13) = result;
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  v6 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v6;
  v7 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v7;
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v9;
  v10 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v10;
  v11 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v11;
  v12 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v12;
  v13 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v13;
  v14 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v14;
  v15 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v15;
  v16 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v16;
  return result;
}

uint64_t CMMsl::MagnetometerCalibratorFilterParameters::MagnetometerCalibratorFilterParameters(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_1003529B0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  sub_100239458(a1 + 32, (__n128 *)(a2 + 32));
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  sub_100239458(a1 + 80, (__n128 *)(a2 + 80));
  sub_100239458(a1 + 56, (__n128 *)(a2 + 56));
  return a1;
}

CMMsl *CMMsl::MagnetometerCalibratorFilterParameters::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::MagnetometerCalibratorFilterParameters *v3;
  _BYTE v5[120];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::MagnetometerCalibratorFilterParameters::MagnetometerCalibratorFilterParameters((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::MagnetometerCalibratorFilterParameters *)v5, v3);
    CMMsl::MagnetometerCalibratorFilterParameters::~MagnetometerCalibratorFilterParameters((CMMsl::MagnetometerCalibratorFilterParameters *)v5);
  }
  return a1;
}

uint64_t CMMsl::MagnetometerCalibratorFilterParameters::formatText(CMMsl::MagnetometerCalibratorFilterParameters *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  float *v14;
  float *v15;
  float v16;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (float *)*((_QWORD *)this + 4);
  v6 = (float *)*((_QWORD *)this + 5);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "biasEst", v7);
  }
  v8 = (float *)*((_QWORD *)this + 1);
  v9 = (float *)*((_QWORD *)this + 2);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "biasEstVar", v10);
  }
  v11 = (float *)*((_QWORD *)this + 7);
  v12 = (float *)*((_QWORD *)this + 8);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(a2, "residual", v13);
  }
  v14 = (float *)*((_QWORD *)this + 10);
  v15 = (float *)*((_QWORD *)this + 11);
  while (v14 != v15)
  {
    v16 = *v14++;
    PB::TextFormatter::format(a2, "temperature", v16);
  }
  if ((*((_BYTE *)this + 112) & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 13));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::MagnetometerCalibratorFilterParameters::readFrom(CMMsl::MagnetometerCalibratorFilterParameters *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  _DWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _DWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  _DWORD *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  _DWORD *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  _DWORD *v85;
  unint64_t v86;
  char *v87;
  unint64_t v88;
  char *v89;
  unint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  int v117;
  char *v118;
  int v119;
  char *v120;
  int v121;
  char *v122;
  int v123;
  unint64_t v124;
  char *v126;
  char *v127;
  char *v128;
  char *v129;
  _BYTE v130[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 56);
    v9 = (void **)((char *)this + 80);
    v128 = (char *)this + 96;
    v129 = (char *)this + 72;
    v10 = (void **)((char *)this + 8);
    v11 = (void **)((char *)this + 32);
    v126 = (char *)this + 48;
    v127 = (char *)this + 24;
    while (1)
    {
      v12 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 112) |= 1u;
          v25 = *((_QWORD *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_196;
          *((_QWORD *)this + 13) = *(_QWORD *)(*(_QWORD *)a2 + v25);
          v26 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_198;
        case 2u:
          if (v24 != 2)
          {
            v84 = (char *)*((_QWORD *)this + 5);
            v83 = *((_QWORD *)this + 6);
            if ((unint64_t)v84 >= v83)
            {
              v92 = (char *)*v11;
              v93 = (v84 - (_BYTE *)*v11) >> 2;
              v94 = v93 + 1;
              if ((unint64_t)(v93 + 1) >> 62)
LABEL_207:
                sub_10000D5F8();
              v95 = v83 - (_QWORD)v92;
              if (v95 >> 1 > v94)
                v94 = v95 >> 1;
              if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFFCLL)
                v96 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v96 = v94;
              if (v96)
              {
                v97 = (char *)sub_100020E2C((uint64_t)v126, v96);
                v92 = (char *)*((_QWORD *)this + 4);
                v84 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v97 = 0;
              }
              v116 = &v97[4 * v93];
              *(_DWORD *)v116 = 0;
              v85 = v116 + 4;
              while (v84 != v92)
              {
                v117 = *((_DWORD *)v84 - 1);
                v84 -= 4;
                *((_DWORD *)v116 - 1) = v117;
                v116 -= 4;
              }
              *((_QWORD *)this + 4) = v116;
              *((_QWORD *)this + 5) = v85;
              *((_QWORD *)this + 6) = &v97[4 * v96];
              if (v92)
                operator delete(v92);
            }
            else
            {
              *(_DWORD *)v84 = 0;
              v85 = v84 + 4;
            }
            *((_QWORD *)this + 5) = v85;
            goto LABEL_194;
          }
          if ((PB::Reader::placeMark(a2, v130) & 1) != 0)
            return 0;
          v27 = *((_QWORD *)a2 + 1);
          v28 = *((_QWORD *)a2 + 2);
          while (v27 < v28 && !*((_BYTE *)a2 + 24))
          {
            v30 = (char *)*((_QWORD *)this + 5);
            v29 = *((_QWORD *)this + 6);
            if ((unint64_t)v30 >= v29)
            {
              v32 = (char *)*v11;
              v33 = (v30 - (_BYTE *)*v11) >> 2;
              v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 62)
                goto LABEL_207;
              v35 = v29 - (_QWORD)v32;
              if (v35 >> 1 > v34)
                v34 = v35 >> 1;
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
                v36 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v36 = v34;
              if (v36)
              {
                v37 = (char *)sub_100020E2C((uint64_t)v126, v36);
                v32 = (char *)*((_QWORD *)this + 4);
                v30 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v37 = 0;
              }
              v38 = &v37[4 * v33];
              *(_DWORD *)v38 = 0;
              v31 = v38 + 4;
              while (v30 != v32)
              {
                v39 = *((_DWORD *)v30 - 1);
                v30 -= 4;
                *((_DWORD *)v38 - 1) = v39;
                v38 -= 4;
              }
              *((_QWORD *)this + 4) = v38;
              *((_QWORD *)this + 5) = v31;
              *((_QWORD *)this + 6) = &v37[4 * v36];
              if (v32)
                operator delete(v32);
            }
            else
            {
              *(_DWORD *)v30 = 0;
              v31 = v30 + 4;
            }
            *((_QWORD *)this + 5) = v31;
            v40 = *((_QWORD *)a2 + 1);
            if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_124;
            *(v31 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v40);
            v28 = *((_QWORD *)a2 + 2);
            v27 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v27;
          }
          goto LABEL_125;
        case 3u:
          if (v24 != 2)
          {
            v87 = (char *)*((_QWORD *)this + 2);
            v86 = *((_QWORD *)this + 3);
            if ((unint64_t)v87 >= v86)
            {
              v98 = (char *)*v10;
              v99 = (v87 - (_BYTE *)*v10) >> 2;
              v100 = v99 + 1;
              if ((unint64_t)(v99 + 1) >> 62)
LABEL_208:
                sub_10000D5F8();
              v101 = v86 - (_QWORD)v98;
              if (v101 >> 1 > v100)
                v100 = v101 >> 1;
              if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFFCLL)
                v102 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v102 = v100;
              if (v102)
              {
                v103 = (char *)sub_100020E2C((uint64_t)v127, v102);
                v98 = (char *)*((_QWORD *)this + 1);
                v87 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v103 = 0;
              }
              v118 = &v103[4 * v99];
              *(_DWORD *)v118 = 0;
              v85 = v118 + 4;
              while (v87 != v98)
              {
                v119 = *((_DWORD *)v87 - 1);
                v87 -= 4;
                *((_DWORD *)v118 - 1) = v119;
                v118 -= 4;
              }
              *((_QWORD *)this + 1) = v118;
              *((_QWORD *)this + 2) = v85;
              *((_QWORD *)this + 3) = &v103[4 * v102];
              if (v98)
                operator delete(v98);
            }
            else
            {
              *(_DWORD *)v87 = 0;
              v85 = v87 + 4;
            }
            *((_QWORD *)this + 2) = v85;
            goto LABEL_194;
          }
          if ((PB::Reader::placeMark(a2, v130) & 1) != 0)
            return 0;
          v41 = *((_QWORD *)a2 + 1);
          v42 = *((_QWORD *)a2 + 2);
          while (v41 < v42 && !*((_BYTE *)a2 + 24))
          {
            v44 = (char *)*((_QWORD *)this + 2);
            v43 = *((_QWORD *)this + 3);
            if ((unint64_t)v44 >= v43)
            {
              v46 = (char *)*v10;
              v47 = (v44 - (_BYTE *)*v10) >> 2;
              v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 62)
                goto LABEL_208;
              v49 = v43 - (_QWORD)v46;
              if (v49 >> 1 > v48)
                v48 = v49 >> 1;
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
                v50 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v50 = v48;
              if (v50)
              {
                v51 = (char *)sub_100020E2C((uint64_t)v127, v50);
                v46 = (char *)*((_QWORD *)this + 1);
                v44 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v51 = 0;
              }
              v52 = &v51[4 * v47];
              *(_DWORD *)v52 = 0;
              v45 = v52 + 4;
              while (v44 != v46)
              {
                v53 = *((_DWORD *)v44 - 1);
                v44 -= 4;
                *((_DWORD *)v52 - 1) = v53;
                v52 -= 4;
              }
              *((_QWORD *)this + 1) = v52;
              *((_QWORD *)this + 2) = v45;
              *((_QWORD *)this + 3) = &v51[4 * v50];
              if (v46)
                operator delete(v46);
            }
            else
            {
              *(_DWORD *)v44 = 0;
              v45 = v44 + 4;
            }
            *((_QWORD *)this + 2) = v45;
            v54 = *((_QWORD *)a2 + 1);
            if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_124;
            *(v45 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v54);
            v42 = *((_QWORD *)a2 + 2);
            v41 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v41;
          }
          goto LABEL_125;
        case 4u:
          if (v24 != 2)
          {
            v89 = (char *)*((_QWORD *)this + 11);
            v88 = *((_QWORD *)this + 12);
            if ((unint64_t)v89 >= v88)
            {
              v104 = (char *)*v9;
              v105 = (v89 - (_BYTE *)*v9) >> 2;
              v106 = v105 + 1;
              if ((unint64_t)(v105 + 1) >> 62)
LABEL_209:
                sub_10000D5F8();
              v107 = v88 - (_QWORD)v104;
              if (v107 >> 1 > v106)
                v106 = v107 >> 1;
              if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFFCLL)
                v108 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v108 = v106;
              if (v108)
              {
                v109 = (char *)sub_100020E2C((uint64_t)v128, v108);
                v104 = (char *)*((_QWORD *)this + 10);
                v89 = (char *)*((_QWORD *)this + 11);
              }
              else
              {
                v109 = 0;
              }
              v120 = &v109[4 * v105];
              *(_DWORD *)v120 = 0;
              v85 = v120 + 4;
              while (v89 != v104)
              {
                v121 = *((_DWORD *)v89 - 1);
                v89 -= 4;
                *((_DWORD *)v120 - 1) = v121;
                v120 -= 4;
              }
              *((_QWORD *)this + 10) = v120;
              *((_QWORD *)this + 11) = v85;
              *((_QWORD *)this + 12) = &v109[4 * v108];
              if (v104)
                operator delete(v104);
            }
            else
            {
              *(_DWORD *)v89 = 0;
              v85 = v89 + 4;
            }
            *((_QWORD *)this + 11) = v85;
            goto LABEL_194;
          }
          if ((PB::Reader::placeMark(a2, v130) & 1) != 0)
            return 0;
          v55 = *((_QWORD *)a2 + 1);
          v56 = *((_QWORD *)a2 + 2);
          while (v55 < v56 && !*((_BYTE *)a2 + 24))
          {
            v58 = (char *)*((_QWORD *)this + 11);
            v57 = *((_QWORD *)this + 12);
            if ((unint64_t)v58 >= v57)
            {
              v60 = (char *)*v9;
              v61 = (v58 - (_BYTE *)*v9) >> 2;
              v62 = v61 + 1;
              if ((unint64_t)(v61 + 1) >> 62)
                goto LABEL_209;
              v63 = v57 - (_QWORD)v60;
              if (v63 >> 1 > v62)
                v62 = v63 >> 1;
              if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL)
                v64 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v64 = v62;
              if (v64)
              {
                v65 = (char *)sub_100020E2C((uint64_t)v128, v64);
                v60 = (char *)*((_QWORD *)this + 10);
                v58 = (char *)*((_QWORD *)this + 11);
              }
              else
              {
                v65 = 0;
              }
              v66 = &v65[4 * v61];
              *(_DWORD *)v66 = 0;
              v59 = v66 + 4;
              while (v58 != v60)
              {
                v67 = *((_DWORD *)v58 - 1);
                v58 -= 4;
                *((_DWORD *)v66 - 1) = v67;
                v66 -= 4;
              }
              *((_QWORD *)this + 10) = v66;
              *((_QWORD *)this + 11) = v59;
              *((_QWORD *)this + 12) = &v65[4 * v64];
              if (v60)
                operator delete(v60);
            }
            else
            {
              *(_DWORD *)v58 = 0;
              v59 = v58 + 4;
            }
            *((_QWORD *)this + 11) = v59;
            v68 = *((_QWORD *)a2 + 1);
            if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_124;
            *(v59 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v68);
            v56 = *((_QWORD *)a2 + 2);
            v55 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v55;
          }
          goto LABEL_125;
        case 5u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark(a2, v130) & 1) != 0)
              return 0;
            v69 = *((_QWORD *)a2 + 1);
            v70 = *((_QWORD *)a2 + 2);
            while (v69 < v70 && !*((_BYTE *)a2 + 24))
            {
              v72 = (char *)*((_QWORD *)this + 8);
              v71 = *((_QWORD *)this + 9);
              if ((unint64_t)v72 >= v71)
              {
                v74 = (char *)*v8;
                v75 = (v72 - (_BYTE *)*v8) >> 2;
                v76 = v75 + 1;
                if ((unint64_t)(v75 + 1) >> 62)
                  goto LABEL_210;
                v77 = v71 - (_QWORD)v74;
                if (v77 >> 1 > v76)
                  v76 = v77 >> 1;
                if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL)
                  v78 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v78 = v76;
                if (v78)
                {
                  v79 = (char *)sub_100020E2C((uint64_t)v129, v78);
                  v74 = (char *)*((_QWORD *)this + 7);
                  v72 = (char *)*((_QWORD *)this + 8);
                }
                else
                {
                  v79 = 0;
                }
                v80 = &v79[4 * v75];
                *(_DWORD *)v80 = 0;
                v73 = v80 + 4;
                while (v72 != v74)
                {
                  v81 = *((_DWORD *)v72 - 1);
                  v72 -= 4;
                  *((_DWORD *)v80 - 1) = v81;
                  v80 -= 4;
                }
                *((_QWORD *)this + 7) = v80;
                *((_QWORD *)this + 8) = v73;
                *((_QWORD *)this + 9) = &v79[4 * v78];
                if (v74)
                  operator delete(v74);
              }
              else
              {
                *(_DWORD *)v72 = 0;
                v73 = v72 + 4;
              }
              *((_QWORD *)this + 8) = v73;
              v82 = *((_QWORD *)a2 + 1);
              if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((_QWORD *)a2 + 2))
              {
LABEL_124:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v73 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v82);
              v70 = *((_QWORD *)a2 + 2);
              v69 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v69;
            }
LABEL_125:
            PB::Reader::recallMark(a2, v130);
          }
          else
          {
            v91 = (char *)*((_QWORD *)this + 8);
            v90 = *((_QWORD *)this + 9);
            if ((unint64_t)v91 >= v90)
            {
              v110 = (char *)*v8;
              v111 = (v91 - (_BYTE *)*v8) >> 2;
              v112 = v111 + 1;
              if ((unint64_t)(v111 + 1) >> 62)
LABEL_210:
                sub_10000D5F8();
              v113 = v90 - (_QWORD)v110;
              if (v113 >> 1 > v112)
                v112 = v113 >> 1;
              if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFFCLL)
                v114 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v114 = v112;
              if (v114)
              {
                v115 = (char *)sub_100020E2C((uint64_t)v129, v114);
                v110 = (char *)*((_QWORD *)this + 7);
                v91 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v115 = 0;
              }
              v122 = &v115[4 * v111];
              *(_DWORD *)v122 = 0;
              v85 = v122 + 4;
              while (v91 != v110)
              {
                v123 = *((_DWORD *)v91 - 1);
                v91 -= 4;
                *((_DWORD *)v122 - 1) = v123;
                v122 -= 4;
              }
              *((_QWORD *)this + 7) = v122;
              *((_QWORD *)this + 8) = v85;
              *((_QWORD *)this + 9) = &v115[4 * v114];
              if (v110)
                operator delete(v110);
            }
            else
            {
              *(_DWORD *)v91 = 0;
              v85 = v91 + 4;
            }
            *((_QWORD *)this + 8) = v85;
LABEL_194:
            v124 = *((_QWORD *)a2 + 1);
            if (v124 <= 0xFFFFFFFFFFFFFFFBLL && v124 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v85 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v124);
              v26 = *((_QWORD *)a2 + 1) + 4;
LABEL_198:
              *((_QWORD *)a2 + 1) = v26;
            }
            else
            {
LABEL_196:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_199:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || *((_BYTE *)a2 + 24))
            return v4 == 0;
          break;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v24, 0) & 1) == 0)
            return 0;
          goto LABEL_199;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MagnetometerCalibratorFilterParameters::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  float *v10;
  float *v11;
  float v12;
  float *v13;
  float *v14;
  float v15;

  v3 = (_QWORD *)this;
  if ((*(_BYTE *)(this + 112) & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 104), 1u);
  v4 = (float *)v3[4];
  v5 = (float *)v3[5];
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  v7 = (float *)v3[1];
  v8 = (float *)v3[2];
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::write(a2, v9, 3u);
  }
  v10 = (float *)v3[10];
  v11 = (float *)v3[11];
  while (v10 != v11)
  {
    v12 = *v10++;
    this = PB::Writer::write(a2, v12, 4u);
  }
  v14 = (float *)v3[7];
  v13 = (float *)v3[8];
  while (v14 != v13)
  {
    v15 = *v14++;
    this = PB::Writer::write(a2, v15, 5u);
  }
  return this;
}

uint64_t CMMsl::MagnetometerCalibratorFilterParameters::hash_value(CMMsl::MagnetometerCalibratorFilterParameters *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*((_BYTE *)this + 112) & 1) != 0)
  {
    if (*((double *)this + 13) == 0.0)
      v2 = 0;
    else
      v2 = *((_QWORD *)this + 13);
  }
  else
  {
    v2 = 0;
  }
  v3 = PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4)) ^ v2;
  v4 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  v5 = v3 ^ v4 ^ PBHashBytes(*((_QWORD *)this + 10), *((_QWORD *)this + 11) - *((_QWORD *)this + 10));
  return v5 ^ PBHashBytes(*((_QWORD *)this + 7), *((_QWORD *)this + 8) - *((_QWORD *)this + 7));
}

void CMMsl::MagnetometerReset::~MagnetometerReset(CMMsl::MagnetometerReset *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::MagnetometerReset::MagnetometerReset(uint64_t this, const CMMsl::MagnetometerReset *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;

  *(_QWORD *)this = off_1003529E8;
  *(_DWORD *)(this + 44) = 0;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 4) != 0)
  {
    v4 = *((_QWORD *)a2 + 3);
    v3 = 4;
    *(_BYTE *)(this + 44) = 4;
    *(_QWORD *)(this + 24) = v4;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 44) & 2) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *(_BYTE *)(this + 44) = v3;
    *(_QWORD *)(this + 16) = v5;
    v2 = *((_BYTE *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    v6 = *((_QWORD *)a2 + 1);
    v3 |= 1u;
    *(_BYTE *)(this + 44) = v3;
    *(_QWORD *)(this + 8) = v6;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_BYTE *)(this + 44) = v3;
  *(_QWORD *)(this + 32) = v7;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  v8 = *((_BYTE *)a2 + 42);
  v3 |= 0x40u;
  *(_BYTE *)(this + 44) = v3;
  *(_BYTE *)(this + 42) = v8;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0)
      return this;
LABEL_16:
    v10 = *((_BYTE *)a2 + 41);
    *(_BYTE *)(this + 44) = v3 | 0x20;
    *(_BYTE *)(this + 41) = v10;
    return this;
  }
LABEL_15:
  v9 = *((_BYTE *)a2 + 40);
  v3 |= 0x10u;
  *(_BYTE *)(this + 44) = v3;
  *(_BYTE *)(this + 40) = v9;
  if ((*((_BYTE *)a2 + 44) & 0x20) != 0)
    goto LABEL_16;
  return this;
}

uint64_t CMMsl::MagnetometerReset::operator=(uint64_t a1, const CMMsl::MagnetometerReset *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  int v15;

  if ((const CMMsl::MagnetometerReset *)a1 != a2)
  {
    CMMsl::MagnetometerReset::MagnetometerReset((uint64_t)&v8, a2);
    v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v15;
    v15 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v5;
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v11;
    v11 = v6;
    LOBYTE(v6) = *(_BYTE *)(a1 + 42);
    *(_BYTE *)(a1 + 42) = v14;
    v14 = v6;
    LOBYTE(v6) = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a1 + 40) = v12;
    v12 = v6;
    LOBYTE(v6) = *(_BYTE *)(a1 + 41);
    *(_BYTE *)(a1 + 41) = v13;
    v13 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::MagnetometerReset *a2, CMMsl::MagnetometerReset *a3)
{
  int v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  result = *((double *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((double *)a2 + 3) = result;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  v7 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 42);
  *((_BYTE *)this + 42) = *((_BYTE *)a2 + 42);
  *((_BYTE *)a2 + 42) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 40);
  *((_BYTE *)this + 40) = *((_BYTE *)a2 + 40);
  *((_BYTE *)a2 + 40) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 41);
  *((_BYTE *)this + 41) = *((_BYTE *)a2 + 41);
  *((_BYTE *)a2 + 41) = v7;
  return result;
}

double CMMsl::MagnetometerReset::MagnetometerReset(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_1003529E8;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_1003529E8;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  return result;
}

uint64_t CMMsl::MagnetometerReset::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  void (**v14)(CMMsl::MagnetometerReset *__hidden);
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  int v21;

  if (a1 != a2)
  {
    v14 = off_1003529E8;
    v3 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a2 + 44) = 0;
    v4 = *(_QWORD *)(a2 + 24);
    v5 = *(_QWORD *)(a2 + 32);
    v6 = *(_BYTE *)(a2 + 42);
    v7 = *(_BYTE *)(a2 + 40);
    v8 = *(_BYTE *)(a2 + 41);
    v21 = *(_DWORD *)(a1 + 44);
    v9 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v4;
    v16 = v9;
    v10 = *(_OWORD *)(a1 + 8);
    v11 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 44) = v3;
    *(_OWORD *)(a1 + 8) = v11;
    v15 = v10;
    v12 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v5;
    v17 = v12;
    LOBYTE(v12) = *(_BYTE *)(a1 + 42);
    *(_BYTE *)(a1 + 42) = v6;
    v20 = v12;
    LOBYTE(v12) = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a1 + 40) = v7;
    v18 = v12;
    LOBYTE(v12) = *(_BYTE *)(a1 + 41);
    *(_BYTE *)(a1 + 41) = v8;
    v19 = v12;
    PB::Base::~Base((PB::Base *)&v14);
  }
  return a1;
}

uint64_t CMMsl::MagnetometerReset::formatText(CMMsl::MagnetometerReset *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "exitingSaturation", *((_BYTE *)this + 40));
    v5 = *((_BYTE *)this + 44);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*((_BYTE *)this + 44) & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "extendedSaturation", *((_BYTE *)this + 41));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "shiftInSaturation", *((_BYTE *)this + 42));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 2) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "timeSinceLastRemag", *((_QWORD *)this + 1));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 2) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 3));
    if ((*((_BYTE *)this + 44) & 8) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "timeSinceLastRemagTrigger", *((_QWORD *)this + 2));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 4) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 8) != 0)
LABEL_8:
    PB::TextFormatter::format(a2, "triggerCount", *((_QWORD *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MagnetometerReset::readFrom(CMMsl::MagnetometerReset *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  int v39;
  BOOL v40;
  int v41;
  BOOL v42;
  int v43;
  BOOL v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 44) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_97;
            case 2u:
              *((_BYTE *)this + 44) |= 2u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v45 = 0;
                v46 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    v25 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_86;
                  }
                  v47 = v21++;
                  v48 = *(_BYTE *)(v22 + v47);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0)
                    break;
                  v45 += 7;
                  v14 = v46++ > 8;
                  if (v14)
                  {
                    v25 = 0;
LABEL_85:
                    v2 = v47 + 1;
                    goto LABEL_86;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v25 = 0;
                goto LABEL_85;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_86;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              v25 = 0;
LABEL_86:
              *((_QWORD *)this + 2) = v25;
              goto LABEL_97;
            case 3u:
              *((_BYTE *)this + 44) |= 1u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_91;
                  }
                  v51 = v27++;
                  v52 = *(_BYTE *)(v28 + v51);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_90:
                    v2 = v51 + 1;
                    goto LABEL_91;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v31 = 0;
                goto LABEL_90;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_91;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_91:
              *((_QWORD *)this + 1) = v31;
              goto LABEL_97;
            case 4u:
              *((_BYTE *)this + 44) |= 8u;
              v33 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    v37 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_96;
                  }
                  v55 = v33++;
                  v56 = *(_BYTE *)(v34 + v55);
                  *((_QWORD *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    v37 = 0;
LABEL_95:
                    v2 = v55 + 1;
                    goto LABEL_96;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v37 = 0;
                goto LABEL_95;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)a2 + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_96;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              v37 = 0;
LABEL_96:
              *((_QWORD *)this + 4) = v37;
LABEL_97:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 5u:
              *((_BYTE *)this + 44) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v40 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v39 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v40 = v39 != 0;
              }
              *((_BYTE *)this + 42) = v40;
              goto LABEL_97;
            case 6u:
              *((_BYTE *)this + 44) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v42 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v41 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v42 = v41 != 0;
              }
              *((_BYTE *)this + 40) = v42;
              goto LABEL_97;
            case 7u:
              *((_BYTE *)this + 44) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v44 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v43 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v44 = v43 != 0;
              }
              *((_BYTE *)this + 41) = v44;
              goto LABEL_97;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_97;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::MagnetometerReset::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 44);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24), 1u);
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(this + 44) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 16), 2u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 8), 3u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 32), 4u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 42), 5u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0)
      return this;
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 41), 7u);
  }
LABEL_14:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 40), 6u);
  if ((*(_BYTE *)(v3 + 44) & 0x20) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 41), 7u);
  return this;
}

uint64_t CMMsl::MagnetometerReset::hash_value(CMMsl::MagnetometerReset *this)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((*((_BYTE *)this + 44) & 4) != 0)
  {
    v1 = *((double *)this + 3);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 44) & 2) != 0)
    {
LABEL_3:
      v2 = *((_QWORD *)this + 2);
      if ((*((_BYTE *)this + 44) & 1) != 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 44) & 2) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 44) & 1) != 0)
  {
LABEL_4:
    v3 = *((_QWORD *)this + 1);
    if ((*((_BYTE *)this + 44) & 8) != 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  v3 = 0;
  if ((*((_BYTE *)this + 44) & 8) != 0)
  {
LABEL_5:
    v4 = *((_QWORD *)this + 4);
    if ((*((_BYTE *)this + 44) & 0x40) != 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  v4 = 0;
  if ((*((_BYTE *)this + 44) & 0x40) != 0)
  {
LABEL_6:
    v5 = *((unsigned __int8 *)this + 42);
    if ((*((_BYTE *)this + 44) & 0x10) != 0)
      goto LABEL_7;
LABEL_16:
    v6 = 0;
    if ((*((_BYTE *)this + 44) & 0x20) != 0)
      goto LABEL_8;
LABEL_17:
    v7 = 0;
    return v2 ^ *(_QWORD *)&v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7;
  }
LABEL_15:
  v5 = 0;
  if ((*((_BYTE *)this + 44) & 0x10) == 0)
    goto LABEL_16;
LABEL_7:
  v6 = *((unsigned __int8 *)this + 40);
  if ((*((_BYTE *)this + 44) & 0x20) == 0)
    goto LABEL_17;
LABEL_8:
  v7 = *((unsigned __int8 *)this + 41);
  return v2 ^ *(_QWORD *)&v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7;
}

void CMMsl::MapsRouteHintData::~MapsRouteHintData(CMMsl::MapsRouteHintData *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::MapsRouteHintData::MapsRouteHintData(uint64_t this, const CMMsl::MapsRouteHintData *a2)
{
  __int16 v2;
  __int16 v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;

  *(_QWORD *)this = off_100352A20;
  *(_DWORD *)(this + 20) = 0;
  v2 = *((_WORD *)a2 + 10);
  if ((v2 & 0x80) != 0)
  {
    v4 = *((_BYTE *)a2 + 15);
    v3 = 128;
    *(_WORD *)(this + 20) = 128;
    *(_BYTE *)(this + 15) = v4;
    v2 = *((_WORD *)a2 + 10);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    v5 = *((_BYTE *)a2 + 9);
    v3 |= 2u;
    *(_WORD *)(this + 20) = v3;
    *(_BYTE *)(this + 9) = v5;
    v2 = *((_WORD *)a2 + 10);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *((_BYTE *)a2 + 11);
    v3 |= 8u;
    *(_WORD *)(this + 20) = v3;
    *(_BYTE *)(this + 11) = v6;
    v2 = *((_WORD *)a2 + 10);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_BYTE *)a2 + 13);
  v3 |= 0x20u;
  *(_WORD *)(this + 20) = v3;
  *(_BYTE *)(this + 13) = v7;
  v2 = *((_WORD *)a2 + 10);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_17;
  }
LABEL_16:
  v8 = *((_BYTE *)a2 + 14);
  v3 |= 0x40u;
  *(_WORD *)(this + 20) = v3;
  *(_BYTE *)(this + 14) = v8;
  v2 = *((_WORD *)a2 + 10);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_18;
  }
LABEL_17:
  v9 = *((_BYTE *)a2 + 12);
  v3 |= 0x10u;
  *(_WORD *)(this + 20) = v3;
  *(_BYTE *)(this + 12) = v9;
  v2 = *((_WORD *)a2 + 10);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0)
      goto LABEL_12;
    goto LABEL_19;
  }
LABEL_18:
  v10 = *((_BYTE *)a2 + 16);
  v3 |= 0x100u;
  *(_WORD *)(this + 20) = v3;
  *(_BYTE *)(this + 16) = v10;
  v2 = *((_WORD *)a2 + 10);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 1) == 0)
      return this;
LABEL_20:
    v12 = *((_BYTE *)a2 + 8);
    *(_WORD *)(this + 20) = v3 | 1;
    *(_BYTE *)(this + 8) = v12;
    return this;
  }
LABEL_19:
  v11 = *((_BYTE *)a2 + 10);
  v3 |= 4u;
  *(_WORD *)(this + 20) = v3;
  *(_BYTE *)(this + 10) = v11;
  if ((*((_WORD *)a2 + 10) & 1) != 0)
    goto LABEL_20;
  return this;
}

uint64_t CMMsl::MapsRouteHintData::operator=(uint64_t a1, const CMMsl::MapsRouteHintData *a2)
{
  int v3;
  uint64_t v4;
  _BYTE v6[8];
  uint64_t v7;
  char v8;
  int v9;

  if ((const CMMsl::MapsRouteHintData *)a1 != a2)
  {
    CMMsl::MapsRouteHintData::MapsRouteHintData((uint64_t)v6, a2);
    v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    v9 = v3;
    LOBYTE(v3) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v8;
    v8 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v7;
    v7 = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::MapsRouteHintData *a2, CMMsl::MapsRouteHintData *a3)
{
  int v3;

  v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 15);
  *(_BYTE *)(this + 15) = *((_BYTE *)a2 + 15);
  *((_BYTE *)a2 + 15) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 9);
  *(_BYTE *)(this + 9) = *((_BYTE *)a2 + 9);
  *((_BYTE *)a2 + 9) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 11);
  *(_BYTE *)(this + 11) = *((_BYTE *)a2 + 11);
  *((_BYTE *)a2 + 11) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 13);
  *(_BYTE *)(this + 13) = *((_BYTE *)a2 + 13);
  *((_BYTE *)a2 + 13) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 14);
  *(_BYTE *)(this + 14) = *((_BYTE *)a2 + 14);
  *((_BYTE *)a2 + 14) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 12);
  *(_BYTE *)(this + 12) = *((_BYTE *)a2 + 12);
  *((_BYTE *)a2 + 12) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 16);
  *(_BYTE *)(this + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a2 + 16) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 10);
  *(_BYTE *)(this + 10) = *((_BYTE *)a2 + 10);
  *((_BYTE *)a2 + 10) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 8);
  *(_BYTE *)(this + 8) = *((_BYTE *)a2 + 8);
  *((_BYTE *)a2 + 8) = v3;
  return this;
}

uint64_t CMMsl::MapsRouteHintData::MapsRouteHintData(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = off_100352A20;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_BYTE *)(result + 15) = *(_BYTE *)(a2 + 15);
  *(_BYTE *)(result + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(result + 11) = *(_BYTE *)(a2 + 11);
  *(_BYTE *)(result + 13) = *(_BYTE *)(a2 + 13);
  *(_BYTE *)(result + 14) = *(_BYTE *)(a2 + 14);
  *(_BYTE *)(result + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(result + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(result + 10) = *(_BYTE *)(a2 + 10);
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = off_100352A20;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_BYTE *)(result + 15) = *(_BYTE *)(a2 + 15);
  *(_BYTE *)(result + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(result + 11) = *(_BYTE *)(a2 + 11);
  *(_BYTE *)(result + 13) = *(_BYTE *)(a2 + 13);
  *(_BYTE *)(result + 14) = *(_BYTE *)(a2 + 14);
  *(_BYTE *)(result + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(result + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(result + 10) = *(_BYTE *)(a2 + 10);
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

uint64_t CMMsl::MapsRouteHintData::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  char v9;
  int v10;

  if (a1 != a2)
  {
    v8[0] = off_100352A20;
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_BYTE *)(a2 + 16);
    v10 = *(_DWORD *)(a1 + 20);
    v9 = *(_BYTE *)(a1 + 16);
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 20) = v3;
    *(_BYTE *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 8) = v6;
    v8[1] = v5;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::MapsRouteHintData::formatText(CMMsl::MapsRouteHintData *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 10);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "isAppleMapsRoutingActive", *((_BYTE *)this + 8));
    v5 = *((_WORD *)this + 10);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "isBicycleRouting", *((_BYTE *)this + 9));
  v5 = *((_WORD *)this + 10);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "isBicycleRoutingActive", *((_BYTE *)this + 10));
  v5 = *((_WORD *)this + 10);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "isPedestrianRouting", *((_BYTE *)this + 11));
  v5 = *((_WORD *)this + 10);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "isPedestrianRoutingActive", *((_BYTE *)this + 12));
  v5 = *((_WORD *)this + 10);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "isStepTypeBicycle", *((_BYTE *)this + 13));
  v5 = *((_WORD *)this + 10);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
LABEL_19:
    PB::TextFormatter::format(a2, "isVehicularRouting", *((_BYTE *)this + 15));
    if ((*((_WORD *)this + 10) & 0x100) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_10;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "isStepTypePedestrian", *((_BYTE *)this + 14));
  v5 = *((_WORD *)this + 10);
  if ((v5 & 0x80) != 0)
    goto LABEL_19;
LABEL_9:
  if ((v5 & 0x100) != 0)
LABEL_10:
    PB::TextFormatter::format(a2, "isVehicularRoutingActive", *((_BYTE *)this + 16));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MapsRouteHintData::readFrom(CMMsl::MapsRouteHintData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  int v31;
  BOOL v32;
  int v33;
  BOOL v34;
  int v35;
  BOOL v36;
  int v37;
  BOOL v38;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          if (v10++ > 8)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 10) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              v3 = *((_QWORD *)a2 + 2);
              if (v2 >= v3)
              {
                v21 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v21 = v20 != 0;
              }
              *((_BYTE *)this + 15) = v21;
              goto LABEL_60;
            case 2u:
              *((_WORD *)this + 10) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              v3 = *((_QWORD *)a2 + 2);
              if (v2 >= v3)
              {
                v24 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v23 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v24 = v23 != 0;
              }
              *((_BYTE *)this + 9) = v24;
              goto LABEL_60;
            case 3u:
              *((_WORD *)this + 10) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              v3 = *((_QWORD *)a2 + 2);
              if (v2 >= v3)
              {
                v26 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v25 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v26 = v25 != 0;
              }
              *((_BYTE *)this + 11) = v26;
              goto LABEL_60;
            case 4u:
              *((_WORD *)this + 10) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              v3 = *((_QWORD *)a2 + 2);
              if (v2 >= v3)
              {
                v28 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v28 = v27 != 0;
              }
              *((_BYTE *)this + 13) = v28;
              goto LABEL_60;
            case 5u:
              *((_WORD *)this + 10) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              v3 = *((_QWORD *)a2 + 2);
              if (v2 >= v3)
              {
                v30 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v30 = v29 != 0;
              }
              *((_BYTE *)this + 14) = v30;
              goto LABEL_60;
            case 6u:
              *((_WORD *)this + 10) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              v3 = *((_QWORD *)a2 + 2);
              if (v2 >= v3)
              {
                v32 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v31 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v32 = v31 != 0;
              }
              *((_BYTE *)this + 12) = v32;
              goto LABEL_60;
            case 7u:
              *((_WORD *)this + 10) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              v3 = *((_QWORD *)a2 + 2);
              if (v2 >= v3)
              {
                v34 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v34 = v33 != 0;
              }
              *((_BYTE *)this + 16) = v34;
              goto LABEL_60;
            case 8u:
              *((_WORD *)this + 10) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              v3 = *((_QWORD *)a2 + 2);
              if (v2 >= v3)
              {
                v36 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v35 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v36 = v35 != 0;
              }
              *((_BYTE *)this + 10) = v36;
              goto LABEL_60;
            case 9u:
              *((_WORD *)this + 10) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              v3 = *((_QWORD *)a2 + 2);
              if (v2 >= v3)
              {
                v38 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v37 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v38 = v37 != 0;
              }
              *((_BYTE *)this + 8) = v38;
              goto LABEL_60;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              v3 = *((_QWORD *)a2 + 2);
LABEL_60:
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || *((_BYTE *)a2 + 24))
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::MapsRouteHintData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 20);
  if ((v4 & 0x80) != 0)
  {
    this = PB::Writer::write(a2, *(_BYTE *)(this + 15), 1u);
    v4 = *(_WORD *)(v3 + 20);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 9), 2u);
  v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 11), 3u);
  v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 13), 4u);
  v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 14), 5u);
  v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 12), 6u);
  v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 16), 7u);
  v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 1) == 0)
      return this;
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 8), 9u);
  }
LABEL_18:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 10), 8u);
  if ((*(_WORD *)(v3 + 20) & 1) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 8), 9u);
  return this;
}

uint64_t CMMsl::MapsRouteHintData::hash_value(CMMsl::MapsRouteHintData *this)
{
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *((_WORD *)this + 10);
  if ((v1 & 0x80) != 0)
  {
    v2 = *((unsigned __int8 *)this + 15);
    if ((v1 & 2) != 0)
    {
LABEL_3:
      v3 = *((unsigned __int8 *)this + 9);
      if ((v1 & 8) != 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else
  {
    v2 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_4:
    v4 = *((unsigned __int8 *)this + 11);
    if ((v1 & 0x20) != 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  v4 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_5:
    v5 = *((unsigned __int8 *)this + 13);
    if ((v1 & 0x40) != 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  v5 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_6:
    v6 = *((unsigned __int8 *)this + 14);
    if ((v1 & 0x10) != 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  v6 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_7:
    v7 = *((unsigned __int8 *)this + 12);
    if ((*((_WORD *)this + 10) & 0x100) != 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  v7 = 0;
  if ((*((_WORD *)this + 10) & 0x100) != 0)
  {
LABEL_8:
    v8 = *((unsigned __int8 *)this + 16);
    if ((v1 & 4) != 0)
      goto LABEL_9;
LABEL_18:
    v9 = 0;
    if ((v1 & 1) != 0)
      goto LABEL_10;
LABEL_19:
    v10 = 0;
    return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10;
  }
LABEL_17:
  v8 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_18;
LABEL_9:
  v9 = *((unsigned __int8 *)this + 10);
  if ((v1 & 1) == 0)
    goto LABEL_19;
LABEL_10:
  v10 = *((unsigned __int8 *)this + 8);
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10;
}

void CMMsl::MetsInfo::~MetsInfo(CMMsl::MetsInfo *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::MetsInfo::MetsInfo(CMMsl::MetsInfo *this, const CMMsl::MetsInfo *a2)
{
  char v2;
  char v3;
  float result;
  int v5;

  *(_QWORD *)this = off_100352A58;
  *((_DWORD *)this + 7) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 1) != 0)
  {
    result = *((float *)a2 + 2);
    v3 = 1;
    *((_BYTE *)this + 28) = 1;
    *((float *)this + 2) = result;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 4) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 4);
    v3 |= 4u;
    *((_BYTE *)this + 28) = v3;
    *((float *)this + 4) = result;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    result = *((float *)a2 + 5);
    v3 |= 8u;
    *((_BYTE *)this + 28) = v3;
    *((float *)this + 5) = result;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0)
        return result;
LABEL_12:
      result = *((float *)a2 + 3);
      *((_BYTE *)this + 28) = v3 | 2;
      *((float *)this + 3) = result;
      return result;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v5 = *((_DWORD *)a2 + 6);
  v3 |= 0x10u;
  *((_BYTE *)this + 28) = v3;
  *((_DWORD *)this + 6) = v5;
  if ((*((_BYTE *)a2 + 28) & 2) != 0)
    goto LABEL_12;
  return result;
}

uint64_t CMMsl::MetsInfo::operator=(uint64_t a1, const CMMsl::MetsInfo *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  if ((const CMMsl::MetsInfo *)a1 != a2)
  {
    CMMsl::MetsInfo::MetsInfo((CMMsl::MetsInfo *)&v6, a2);
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::MetsInfo *a2, CMMsl::MetsInfo *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  float result;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  v6 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v6;
  v7 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v7;
  result = *((float *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((float *)a2 + 3) = result;
  return result;
}

float CMMsl::MetsInfo::MetsInfo(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100352A58;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_100352A58;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  return result;
}

uint64_t CMMsl::MetsInfo::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  void (**v7)(CMMsl::MetsInfo *__hidden);
  __int128 v8;
  uint64_t v9;

  if (a1 != a2)
  {
    v7 = off_100352A58;
    v3 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 28) = 0;
    v9 = *(_QWORD *)(a1 + 24);
    v4 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    v8 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::MetsInfo::formatText(CMMsl::MetsInfo *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "mets", *((float *)this + 2));
    v5 = *((_BYTE *)this + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "metsDiff", *((float *)this + 3));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "metsWR", *((float *)this + 5));
    if ((*((_BYTE *)this + 28) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "metsHR", *((float *)this + 4));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 8) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "source", *((_DWORD *)this + 6));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MetsInfo::readFrom(CMMsl::MetsInfo *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 28) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_42;
              *((_DWORD *)this + 2) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_51;
            case 2u:
              *((_BYTE *)this + 28) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_42;
              *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_51;
            case 3u:
              *((_BYTE *)this + 28) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_42;
              *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_51;
            case 4u:
              *((_BYTE *)this + 28) |= 0x10u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_56;
                  }
                  v29 = v21++;
                  v30 = *(_BYTE *)(v22 + v29);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_55:
                    v2 = v29 + 1;
                    goto LABEL_56;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_55;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_56;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_56:
              *((_DWORD *)this + 6) = v25;
LABEL_57:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 5u:
              *((_BYTE *)this + 28) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 3) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_51:
                v2 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_42:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_57;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_57;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::MetsInfo::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 2u);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 3u);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 12), 5u);
  }
LABEL_10:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 4u);
  if ((*(_BYTE *)(v3 + 28) & 2) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 12), 5u);
  return this;
}

uint64_t CMMsl::MetsInfo::hash_value(CMMsl::MetsInfo *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;

  if ((*((_BYTE *)this + 28) & 1) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 28) & 4) != 0)
      goto LABEL_3;
LABEL_16:
    v3 = 0;
    if ((*((_BYTE *)this + 28) & 8) != 0)
      goto LABEL_6;
LABEL_17:
    v5 = 0;
    if ((*((_BYTE *)this + 28) & 0x10) != 0)
      goto LABEL_9;
    goto LABEL_18;
  }
  v9 = *((float *)this + 2);
  v1 = LODWORD(v9);
  if (v9 == 0.0)
    v1 = 0;
  if ((*((_BYTE *)this + 28) & 4) == 0)
    goto LABEL_16;
LABEL_3:
  v2 = *((float *)this + 4);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 28) & 8) == 0)
    goto LABEL_17;
LABEL_6:
  v4 = *((float *)this + 5);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((*((_BYTE *)this + 28) & 0x10) != 0)
  {
LABEL_9:
    v6 = *((unsigned int *)this + 6);
    if ((*((_BYTE *)this + 28) & 2) != 0)
      goto LABEL_10;
LABEL_19:
    v8 = 0;
    return v3 ^ v1 ^ v5 ^ v6 ^ v8;
  }
LABEL_18:
  v6 = 0;
  if ((*((_BYTE *)this + 28) & 2) == 0)
    goto LABEL_19;
LABEL_10:
  v7 = *((float *)this + 3);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  return v3 ^ v1 ^ v5 ^ v6 ^ v8;
}

void CMMsl::MobilityBoutMetrics::~MobilityBoutMetrics(CMMsl::MobilityBoutMetrics *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::MobilityBoutMetrics::MobilityBoutMetrics(CMMsl::MobilityBoutMetrics *this, const CMMsl::MobilityBoutMetrics *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  char v7;
  char v8;
  int v9;
  char v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  char v25;
  char v26;
  int v27;

  *(_QWORD *)this = off_100352A90;
  *((_QWORD *)this + 23) = 0;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 4) != 0)
  {
    v4 = *((_QWORD *)a2 + 3);
    v3 = 4;
    *((_QWORD *)this + 23) = 4;
    *((_QWORD *)this + 3) = v4;
    v2 = *((_QWORD *)a2 + 23);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 1) != 0)
  {
LABEL_5:
    v4 = *((_QWORD *)a2 + 1);
    v3 |= 1uLL;
    *((_QWORD *)this + 23) = v3;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_QWORD *)a2 + 23);
  }
LABEL_6:
  if ((v2 & 0x200000) != 0)
  {
    v5 = *((_DWORD *)a2 + 26);
    v3 |= 0x200000uLL;
    *((_QWORD *)this + 23) = v3;
    *((_DWORD *)this + 26) = v5;
    v2 = *((_QWORD *)a2 + 23);
    if ((v2 & 0x1000000000) == 0)
    {
LABEL_8:
      if ((v2 & 0x100000000000) == 0)
        goto LABEL_9;
      goto LABEL_52;
    }
  }
  else if ((v2 & 0x1000000000) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 41);
  v3 |= 0x1000000000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 41) = v4;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x100000000000) == 0)
  {
LABEL_9:
    if ((v2 & 0x800) == 0)
      goto LABEL_10;
    goto LABEL_53;
  }
LABEL_52:
  v6 = *((_BYTE *)a2 + 181);
  v3 |= 0x100000000000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_BYTE *)this + 181) = v6;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x800) == 0)
  {
LABEL_10:
    if ((v2 & 0x10000000000) == 0)
      goto LABEL_11;
    goto LABEL_54;
  }
LABEL_53:
  LODWORD(v4) = *((_DWORD *)a2 + 16);
  v3 |= 0x800uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 16) = v4;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x10000000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_12;
    goto LABEL_55;
  }
LABEL_54:
  v7 = *((_BYTE *)a2 + 177);
  v3 |= 0x10000000000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_BYTE *)this + 177) = v7;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x80000000000) == 0)
      goto LABEL_13;
    goto LABEL_56;
  }
LABEL_55:
  LODWORD(v4) = *((_DWORD *)a2 + 30);
  v3 |= 0x2000000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 30) = v4;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x80000000000) == 0)
  {
LABEL_13:
    if ((v2 & 0x4000) == 0)
      goto LABEL_14;
    goto LABEL_57;
  }
LABEL_56:
  v8 = *((_BYTE *)a2 + 180);
  v3 |= 0x80000000000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_BYTE *)this + 180) = v8;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x4000) == 0)
  {
LABEL_14:
    if ((v2 & 2) == 0)
      goto LABEL_15;
    goto LABEL_58;
  }
LABEL_57:
  v9 = *((_DWORD *)a2 + 19);
  v3 |= 0x4000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 19) = v9;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 2) == 0)
  {
LABEL_15:
    if ((v2 & 8) == 0)
      goto LABEL_16;
    goto LABEL_59;
  }
LABEL_58:
  v4 = *((_QWORD *)a2 + 2);
  v3 |= 2uLL;
  *((_QWORD *)this + 23) = v3;
  *((_QWORD *)this + 2) = v4;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 8) == 0)
  {
LABEL_16:
    if ((v2 & 0x8000000000) == 0)
      goto LABEL_17;
    goto LABEL_60;
  }
LABEL_59:
  LODWORD(v4) = *((_DWORD *)a2 + 8);
  v3 |= 8uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 8) = v4;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x8000000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_61;
  }
LABEL_60:
  v10 = *((_BYTE *)a2 + 176);
  v3 |= 0x8000000000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_BYTE *)this + 176) = v10;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x2000) == 0)
  {
LABEL_18:
    if ((v2 & 0x200000000) == 0)
      goto LABEL_19;
    goto LABEL_62;
  }
LABEL_61:
  v11 = *((_DWORD *)a2 + 18);
  v3 |= 0x2000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 18) = v11;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x4000000000) == 0)
      goto LABEL_20;
    goto LABEL_63;
  }
LABEL_62:
  v12 = *((_DWORD *)a2 + 38);
  v3 |= 0x200000000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 38) = v12;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x4000000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x100000) == 0)
      goto LABEL_21;
    goto LABEL_64;
  }
LABEL_63:
  v13 = *((_DWORD *)a2 + 43);
  v3 |= 0x4000000000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 43) = v13;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x100000) == 0)
  {
LABEL_21:
    if ((v2 & 0x20000) == 0)
      goto LABEL_22;
    goto LABEL_65;
  }
LABEL_64:
  v14 = *((_DWORD *)a2 + 25);
  v3 |= 0x100000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 25) = v14;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x20000) == 0)
  {
LABEL_22:
    if ((v2 & 0x10000) == 0)
      goto LABEL_23;
    goto LABEL_66;
  }
LABEL_65:
  v15 = *((_DWORD *)a2 + 22);
  v3 |= 0x20000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 22) = v15;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x10000) == 0)
  {
LABEL_23:
    if ((v2 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_67;
  }
LABEL_66:
  v16 = *((_DWORD *)a2 + 21);
  v3 |= 0x10000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 21) = v16;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x40000) == 0)
  {
LABEL_24:
    if ((v2 & 0x80000) == 0)
      goto LABEL_25;
    goto LABEL_68;
  }
LABEL_67:
  v17 = *((_DWORD *)a2 + 23);
  v3 |= 0x40000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 23) = v17;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x80000) == 0)
  {
LABEL_25:
    if ((v2 & 0x8000) == 0)
      goto LABEL_26;
    goto LABEL_69;
  }
LABEL_68:
  v18 = *((_DWORD *)a2 + 24);
  v3 |= 0x80000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 24) = v18;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x8000) == 0)
  {
LABEL_26:
    if ((v2 & 0x400) == 0)
      goto LABEL_27;
    goto LABEL_70;
  }
LABEL_69:
  v19 = *((_DWORD *)a2 + 20);
  v3 |= 0x8000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 20) = v19;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x400) == 0)
  {
LABEL_27:
    if ((v2 & 0x2000000000) == 0)
      goto LABEL_28;
    goto LABEL_71;
  }
LABEL_70:
  v20 = *((_DWORD *)a2 + 15);
  v3 |= 0x400uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 15) = v20;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x2000000000) == 0)
  {
LABEL_28:
    if ((v2 & 0x1000) == 0)
      goto LABEL_29;
    goto LABEL_72;
  }
LABEL_71:
  v21 = *((_DWORD *)a2 + 42);
  v3 |= 0x2000000000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 42) = v21;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x1000) == 0)
  {
LABEL_29:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_30;
    goto LABEL_73;
  }
LABEL_72:
  v22 = *((_DWORD *)a2 + 17);
  v3 |= 0x1000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 17) = v22;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_30:
    if ((v2 & 0x10) == 0)
      goto LABEL_31;
    goto LABEL_74;
  }
LABEL_73:
  v23 = *((_DWORD *)a2 + 34);
  v3 |= 0x20000000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 34) = v23;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x10) == 0)
  {
LABEL_31:
    if ((v2 & 0x400000000) == 0)
      goto LABEL_32;
    goto LABEL_75;
  }
LABEL_74:
  v24 = *((_DWORD *)a2 + 9);
  v3 |= 0x10uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 9) = v24;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x20000000000) == 0)
      goto LABEL_33;
    goto LABEL_76;
  }
LABEL_75:
  LODWORD(v4) = *((_DWORD *)a2 + 39);
  v3 |= 0x400000000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 39) = v4;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x20000000000) == 0)
  {
LABEL_33:
    if ((v2 & 0x800000000) == 0)
      goto LABEL_34;
    goto LABEL_77;
  }
LABEL_76:
  v25 = *((_BYTE *)a2 + 178);
  v3 |= 0x20000000000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_BYTE *)this + 178) = v25;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x40000000000) == 0)
      goto LABEL_35;
    goto LABEL_78;
  }
LABEL_77:
  LODWORD(v4) = *((_DWORD *)a2 + 40);
  v3 |= 0x800000000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 40) = v4;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x40000000000) == 0)
  {
LABEL_35:
    if ((v2 & 0x20) == 0)
      goto LABEL_36;
    goto LABEL_79;
  }
LABEL_78:
  v26 = *((_BYTE *)a2 + 179);
  v3 |= 0x40000000000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_BYTE *)this + 179) = v26;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x20) == 0)
  {
LABEL_36:
    if ((v2 & 0x80) == 0)
      goto LABEL_37;
    goto LABEL_80;
  }
LABEL_79:
  v27 = *((_DWORD *)a2 + 10);
  v3 |= 0x20uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 10) = v27;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x80) == 0)
  {
LABEL_37:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_38;
    goto LABEL_81;
  }
LABEL_80:
  LODWORD(v4) = *((_DWORD *)a2 + 12);
  v3 |= 0x80uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 12) = v4;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_38:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_39;
    goto LABEL_82;
  }
LABEL_81:
  LODWORD(v4) = *((_DWORD *)a2 + 31);
  v3 |= 0x4000000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 31) = v4;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_39:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_40;
    goto LABEL_83;
  }
LABEL_82:
  LODWORD(v4) = *((_DWORD *)a2 + 32);
  v3 |= 0x8000000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 32) = v4;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_40:
    if ((v2 & 0x40) == 0)
      goto LABEL_41;
    goto LABEL_84;
  }
LABEL_83:
  LODWORD(v4) = *((_DWORD *)a2 + 33);
  v3 |= 0x10000000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 33) = v4;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x40) == 0)
  {
LABEL_41:
    if ((v2 & 0x100) == 0)
      goto LABEL_42;
    goto LABEL_85;
  }
LABEL_84:
  LODWORD(v4) = *((_DWORD *)a2 + 11);
  v3 |= 0x40uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 11) = v4;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x100) == 0)
  {
LABEL_42:
    if ((v2 & 0x200) == 0)
      goto LABEL_43;
    goto LABEL_86;
  }
LABEL_85:
  LODWORD(v4) = *((_DWORD *)a2 + 13);
  v3 |= 0x100uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 13) = v4;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x200) == 0)
  {
LABEL_43:
    if ((v2 & 0x400000) == 0)
      goto LABEL_44;
    goto LABEL_87;
  }
LABEL_86:
  LODWORD(v4) = *((_DWORD *)a2 + 14);
  v3 |= 0x200uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 14) = v4;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x400000) == 0)
  {
LABEL_44:
    if ((v2 & 0x800000) == 0)
      goto LABEL_45;
    goto LABEL_88;
  }
LABEL_87:
  LODWORD(v4) = *((_DWORD *)a2 + 27);
  v3 |= 0x400000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 27) = v4;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x800000) == 0)
  {
LABEL_45:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_46;
    goto LABEL_89;
  }
LABEL_88:
  LODWORD(v4) = *((_DWORD *)a2 + 28);
  v3 |= 0x800000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 28) = v4;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_46:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_47;
    goto LABEL_90;
  }
LABEL_89:
  LODWORD(v4) = *((_DWORD *)a2 + 29);
  v3 |= 0x1000000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 29) = v4;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_47:
    if ((v2 & 0x80000000) == 0)
      goto LABEL_48;
    goto LABEL_91;
  }
LABEL_90:
  LODWORD(v4) = *((_DWORD *)a2 + 35);
  v3 |= 0x40000000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 35) = v4;
  v2 = *((_QWORD *)a2 + 23);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_48:
    if ((v2 & 0x100000000) == 0)
      return *(float *)&v4;
    goto LABEL_92;
  }
LABEL_91:
  LODWORD(v4) = *((_DWORD *)a2 + 36);
  v3 |= 0x80000000uLL;
  *((_QWORD *)this + 23) = v3;
  *((_DWORD *)this + 36) = v4;
  if ((*((_QWORD *)a2 + 23) & 0x100000000) == 0)
    return *(float *)&v4;
LABEL_92:
  LODWORD(v4) = *((_DWORD *)a2 + 37);
  *((_QWORD *)this + 23) = v3 | (unint64_t)&_mh_execute_header;
  *((_DWORD *)this + 37) = v4;
  return *(float *)&v4;
}

CMMsl *CMMsl::MobilityBoutMetrics::operator=(CMMsl *a1, const CMMsl::MobilityBoutMetrics *a2)
{
  CMMsl::MobilityBoutMetrics *v3;
  _BYTE v5[192];

  if (a1 != a2)
  {
    CMMsl::MobilityBoutMetrics::MobilityBoutMetrics((CMMsl::MobilityBoutMetrics *)v5, a2);
    CMMsl::swap(a1, (CMMsl::MobilityBoutMetrics *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::MobilityBoutMetrics *a2, CMMsl::MobilityBoutMetrics *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float result;

  v3 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = *((_QWORD *)a2 + 23);
  *((_QWORD *)a2 + 23) = v3;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  LODWORD(v3) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v3;
  LODWORD(v5) = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v5;
  LOBYTE(v3) = *((_BYTE *)this + 181);
  *((_BYTE *)this + 181) = *((_BYTE *)a2 + 181);
  *((_BYTE *)a2 + 181) = v3;
  LODWORD(v5) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v5;
  LOBYTE(v3) = *((_BYTE *)this + 177);
  *((_BYTE *)this + 177) = *((_BYTE *)a2 + 177);
  *((_BYTE *)a2 + 177) = v3;
  LODWORD(v5) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v5;
  LOBYTE(v3) = *((_BYTE *)this + 180);
  *((_BYTE *)this + 180) = *((_BYTE *)a2 + 180);
  *((_BYTE *)a2 + 180) = v3;
  LODWORD(v3) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v3;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  LODWORD(v6) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6;
  LOBYTE(v3) = *((_BYTE *)this + 176);
  *((_BYTE *)this + 176) = *((_BYTE *)a2 + 176);
  *((_BYTE *)a2 + 176) = v3;
  LODWORD(v3) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  LODWORD(v3) = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v3;
  LODWORD(v3) = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v3;
  LODWORD(v3) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v3;
  LODWORD(v3) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v3;
  LODWORD(v3) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v3;
  LODWORD(v3) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v3;
  LODWORD(v3) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v3;
  LODWORD(v3) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v3;
  LODWORD(v3) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  LODWORD(v3) = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v3;
  LODWORD(v3) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v3;
  LODWORD(v3) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v3;
  LODWORD(v3) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  LODWORD(v6) = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v6;
  LOBYTE(v3) = *((_BYTE *)this + 178);
  *((_BYTE *)this + 178) = *((_BYTE *)a2 + 178);
  *((_BYTE *)a2 + 178) = v3;
  LODWORD(v6) = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v6;
  LOBYTE(v3) = *((_BYTE *)this + 179);
  *((_BYTE *)this + 179) = *((_BYTE *)a2 + 179);
  *((_BYTE *)a2 + 179) = v3;
  LODWORD(v3) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  LODWORD(v6) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v6;
  LODWORD(v6) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v6;
  LODWORD(v6) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v6;
  LODWORD(v6) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v6;
  LODWORD(v6) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v6;
  LODWORD(v6) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v6;
  LODWORD(v6) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v6;
  LODWORD(v6) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v6;
  LODWORD(v6) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v6;
  LODWORD(v6) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v6;
  LODWORD(v6) = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v6;
  LODWORD(v6) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v6;
  result = *((float *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((float *)a2 + 37) = result;
  return result;
}

float CMMsl::MobilityBoutMetrics::MobilityBoutMetrics(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100352A90;
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_BYTE *)(a1 + 181) = *(_BYTE *)(a2 + 181);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 177) = *(_BYTE *)(a2 + 177);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 180) = *(_BYTE *)(a2 + 180);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_BYTE *)(a1 + 178) = *(_BYTE *)(a2 + 178);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 179) = *(_BYTE *)(a2 + 179);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  result = *(float *)(a2 + 148);
  *(float *)(a1 + 148) = result;
  return result;
}

CMMsl *CMMsl::MobilityBoutMetrics::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::MobilityBoutMetrics *v3;
  _BYTE v5[192];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::MobilityBoutMetrics::MobilityBoutMetrics((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::MobilityBoutMetrics *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::MobilityBoutMetrics::formatText(CMMsl::MobilityBoutMetrics *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "asymmetryPercentage", *((float *)this + 8));
    v5 = *((_QWORD *)this + 23);
    if ((v5 & 0x8000000000) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_50;
    }
  }
  else if ((v5 & 0x8000000000) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "asymmetryPercentageIsValid", *((_BYTE *)this + 176));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "asymmetryPercentageRejectionStatus", *((_DWORD *)this + 9));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "boundaryType", *((_DWORD *)this + 10));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "cycleTimeEntropy", *((float *)this + 11));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "cycleTimeMean", *((float *)this + 12));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "cycleTimePoincareSD1", *((float *)this + 13));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "cycleTimePoincareSD2", *((float *)this + 14));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "deviceSide", *((_DWORD *)this + 15));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x10000000000) == 0)
      goto LABEL_12;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "doubleSupportPercentage", *((float *)this + 16));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x10000000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "doubleSupportPercentageIsValid", *((_BYTE *)this + 177));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 1) == 0)
      goto LABEL_14;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "doubleSupportPercentageRejectionStatus", *((_DWORD *)this + 17));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 1) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0)
      goto LABEL_15;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "endTime", *((double *)this + 1));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 0x20000000000) == 0)
      goto LABEL_16;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "invalidGradePercentage", *((double *)this + 2));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x20000000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x40000000000) == 0)
      goto LABEL_17;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "isHeightSet", *((_BYTE *)this + 178));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x40000000000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "isWeightSet", *((_BYTE *)this + 179));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x2000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "numGaitMetrics", *((_DWORD *)this + 18));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x4000) == 0)
  {
LABEL_19:
    if ((v5 & 0x8000) == 0)
      goto LABEL_20;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "rejectionStatus", *((_DWORD *)this + 19));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x8000) == 0)
  {
LABEL_20:
    if ((v5 & 0x10000) == 0)
      goto LABEL_21;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "segmentsRejectedByIsCadenceConcordant", *((_DWORD *)this + 20));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x10000) == 0)
  {
LABEL_21:
    if ((v5 & 0x20000) == 0)
      goto LABEL_22;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "segmentsRejectedByIsFeasibleWalkingSpeed", *((_DWORD *)this + 21));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x20000) == 0)
  {
LABEL_22:
    if ((v5 & 0x40000) == 0)
      goto LABEL_23;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "segmentsRejectedByIsNotRunning", *((_DWORD *)this + 22));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x40000) == 0)
  {
LABEL_23:
    if ((v5 & 0x80000) == 0)
      goto LABEL_24;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "segmentsRejectedByIsPendular", *((_DWORD *)this + 23));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x80000) == 0)
  {
LABEL_24:
    if ((v5 & 0x100000) == 0)
      goto LABEL_25;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "segmentsRejectedByIsSufficientVerticalTwist", *((_DWORD *)this + 24));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x100000) == 0)
  {
LABEL_25:
    if ((v5 & 4) == 0)
      goto LABEL_26;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "segmentsRejectedByIsSwingStanceCycle", *((_DWORD *)this + 25));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 4) == 0)
  {
LABEL_26:
    if ((v5 & 0x200000) == 0)
      goto LABEL_27;
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 3));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x200000) == 0)
  {
LABEL_27:
    if ((v5 & 0x400000) == 0)
      goto LABEL_28;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "stepCount", *((_DWORD *)this + 26));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x400000) == 0)
  {
LABEL_28:
    if ((v5 & 0x800000) == 0)
      goto LABEL_29;
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(a2, "stepIndexOfHarmonicityAP", *((float *)this + 27));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x800000) == 0)
  {
LABEL_29:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_30;
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(a2, "stepIndexOfHarmonicityML", *((float *)this + 28));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_31;
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(a2, "stepIndexOfHarmonicityVT", *((float *)this + 29));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_32;
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(a2, "stepLength", *((float *)this + 30));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x80000000000) == 0)
      goto LABEL_33;
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(a2, "stepLengthEntropy", *((float *)this + 31));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x80000000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_34;
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(a2, "stepLengthIsValid", *((_BYTE *)this + 180));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_35;
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(a2, "stepLengthPoincareSD1", *((float *)this + 32));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_36;
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(a2, "stepLengthPoincareSD2", *((float *)this + 33));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_37;
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(a2, "stepLengthRejectionStatus", *((_DWORD *)this + 34));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_38;
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(a2, "swingIndexOfHarmonicityAP", *((float *)this + 35));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_38:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_39;
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(a2, "swingIndexOfHarmonicityML", *((float *)this + 36));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_39:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_40;
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(a2, "swingIndexOfHarmonicityVT", *((float *)this + 37));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_40:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_41;
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(a2, "terminationReason", *((_DWORD *)this + 38));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_41:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_42;
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(a2, "userHeight", *((float *)this + 39));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_42:
    if ((v5 & 0x1000000000) == 0)
      goto LABEL_43;
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(a2, "userWeight", *((float *)this + 40));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x1000000000) == 0)
  {
LABEL_43:
    if ((v5 & 0x100000000000) == 0)
      goto LABEL_44;
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(a2, "walkingSpeed", *((float *)this + 41));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x100000000000) == 0)
  {
LABEL_44:
    if ((v5 & 0x2000000000) == 0)
      goto LABEL_45;
LABEL_91:
    PB::TextFormatter::format(a2, "walkingSpeedRejectionStatus", *((_DWORD *)this + 42));
    if ((*((_QWORD *)this + 23) & 0x4000000000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_46;
  }
LABEL_90:
  PB::TextFormatter::format(a2, "walkingSpeedIsValid", *((_BYTE *)this + 181));
  v5 = *((_QWORD *)this + 23);
  if ((v5 & 0x2000000000) != 0)
    goto LABEL_91;
LABEL_45:
  if ((v5 & 0x4000000000) != 0)
LABEL_46:
    PB::TextFormatter::format(a2, "workoutType", *((_DWORD *)this + 43));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MobilityBoutMetrics::readFrom(CMMsl::MobilityBoutMetrics *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  BOOL v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  BOOL v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  BOOL v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char v112;
  unsigned int v113;
  uint64_t v114;
  unint64_t v115;
  char v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  char v120;
  unsigned int v121;
  uint64_t v122;
  unint64_t v123;
  char v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  char v128;
  unsigned int v129;
  uint64_t v130;
  unint64_t v131;
  char v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char v136;
  unsigned int v137;
  uint64_t v138;
  unint64_t v139;
  char v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  char v144;
  unsigned int v145;
  uint64_t v146;
  unint64_t v147;
  char v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  char v152;
  unsigned int v153;
  uint64_t v154;
  unint64_t v155;
  char v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  char v160;
  unsigned int v161;
  uint64_t v162;
  unint64_t v163;
  char v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  char v168;
  unsigned int v169;
  uint64_t v170;
  unint64_t v171;
  char v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  int v176;
  BOOL v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  int v181;
  BOOL v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  char v186;
  unsigned int v187;
  uint64_t v188;
  unint64_t v189;
  char v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  char v204;
  unsigned int v205;
  unint64_t v206;
  char v207;
  char v208;
  unsigned int v209;
  unint64_t v210;
  char v211;
  char v212;
  unsigned int v213;
  unint64_t v214;
  char v215;
  char v216;
  unsigned int v217;
  unint64_t v218;
  char v219;
  char v220;
  unsigned int v221;
  unint64_t v222;
  char v223;
  char v224;
  unsigned int v225;
  unint64_t v226;
  char v227;
  char v228;
  unsigned int v229;
  unint64_t v230;
  char v231;
  char v232;
  unsigned int v233;
  unint64_t v234;
  char v235;
  char v236;
  unsigned int v237;
  unint64_t v238;
  char v239;
  char v240;
  unsigned int v241;
  unint64_t v242;
  char v243;
  char v244;
  unsigned int v245;
  unint64_t v246;
  char v247;
  char v248;
  unsigned int v249;
  unint64_t v250;
  char v251;
  char v252;
  unsigned int v253;
  unint64_t v254;
  char v255;
  char v256;
  unsigned int v257;
  unint64_t v258;
  char v259;
  char v260;
  unsigned int v261;
  unint64_t v262;
  char v263;
  char v264;
  unsigned int v265;
  unint64_t v266;
  char v267;
  char v268;
  unsigned int v269;
  unint64_t v270;
  char v271;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_QWORD *)this + 23) |= 4uLL;
          v20 = *((_QWORD *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_221;
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v20);
          goto LABEL_62;
        case 2u:
          *((_QWORD *)this + 23) |= 1uLL;
          v22 = *((_QWORD *)a2 + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_221;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v22);
          goto LABEL_62;
        case 3u:
          *((_QWORD *)this + 23) |= 0x200000uLL;
          v23 = *((_QWORD *)a2 + 1);
          v24 = *((_QWORD *)a2 + 2);
          v25 = *(_QWORD *)a2;
          if (v23 <= 0xFFFFFFFFFFFFFFF5 && v23 + 10 <= v24)
          {
            v26 = 0;
            v27 = 0;
            v28 = 0;
            do
            {
              v29 = v23 + 1;
              *((_QWORD *)a2 + 1) = v23 + 1;
              v30 = *(_BYTE *)(v25 + v23);
              v28 |= (unint64_t)(v30 & 0x7F) << v26;
              if ((v30 & 0x80) == 0)
                goto LABEL_364;
              v26 += 7;
              v23 = v29;
              v14 = v27++ > 8;
            }
            while (!v14);
LABEL_228:
            LODWORD(v28) = 0;
            goto LABEL_364;
          }
          v204 = 0;
          v205 = 0;
          v28 = 0;
          if (v24 <= v23)
            v24 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v24 == v23)
            {
              LODWORD(v28) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v206 = v23 + 1;
              v207 = *(_BYTE *)(v25 + v23);
              *((_QWORD *)a2 + 1) = v206;
              v28 |= (unint64_t)(v207 & 0x7F) << v204;
              if (v207 < 0)
              {
                v204 += 7;
                v23 = v206;
                v14 = v205++ > 8;
                if (v14)
                  goto LABEL_228;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v28) = 0;
            }
            break;
          }
LABEL_364:
          *((_DWORD *)this + 26) = v28;
          goto LABEL_356;
        case 4u:
          *((_QWORD *)this + 23) |= 0x1000000000uLL;
          v31 = *((_QWORD *)a2 + 1);
          if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_221;
          *((_DWORD *)this + 41) = *(_DWORD *)(*(_QWORD *)a2 + v31);
          goto LABEL_354;
        case 5u:
          *((_QWORD *)this + 23) |= 0x100000000000uLL;
          v32 = *((_QWORD *)a2 + 1);
          if (v32 >= *((_QWORD *)a2 + 2))
          {
            v35 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v33 = v32 + 1;
            v34 = *(unsigned __int8 *)(*(_QWORD *)a2 + v32);
            *((_QWORD *)a2 + 1) = v33;
            v35 = v34 != 0;
          }
          *((_BYTE *)this + 181) = v35;
          goto LABEL_356;
        case 6u:
          *((_QWORD *)this + 23) |= 0x800uLL;
          v36 = *((_QWORD *)a2 + 1);
          if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_221;
          *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v36);
          goto LABEL_354;
        case 7u:
          *((_QWORD *)this + 23) |= 0x10000000000uLL;
          v37 = *((_QWORD *)a2 + 1);
          if (v37 >= *((_QWORD *)a2 + 2))
          {
            v40 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v38 = v37 + 1;
            v39 = *(unsigned __int8 *)(*(_QWORD *)a2 + v37);
            *((_QWORD *)a2 + 1) = v38;
            v40 = v39 != 0;
          }
          *((_BYTE *)this + 177) = v40;
          goto LABEL_356;
        case 8u:
          *((_QWORD *)this + 23) |= 0x2000000uLL;
          v41 = *((_QWORD *)a2 + 1);
          if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_221;
          *((_DWORD *)this + 30) = *(_DWORD *)(*(_QWORD *)a2 + v41);
          goto LABEL_354;
        case 9u:
          *((_QWORD *)this + 23) |= 0x80000000000uLL;
          v42 = *((_QWORD *)a2 + 1);
          if (v42 >= *((_QWORD *)a2 + 2))
          {
            v45 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v43 = v42 + 1;
            v44 = *(unsigned __int8 *)(*(_QWORD *)a2 + v42);
            *((_QWORD *)a2 + 1) = v43;
            v45 = v44 != 0;
          }
          *((_BYTE *)this + 180) = v45;
          goto LABEL_356;
        case 0xAu:
          *((_QWORD *)this + 23) |= 0x4000uLL;
          v46 = *((_QWORD *)a2 + 1);
          v47 = *((_QWORD *)a2 + 2);
          v48 = *(_QWORD *)a2;
          if (v46 <= 0xFFFFFFFFFFFFFFF5 && v46 + 10 <= v47)
          {
            v49 = 0;
            v50 = 0;
            v51 = 0;
            do
            {
              v52 = v46 + 1;
              *((_QWORD *)a2 + 1) = v46 + 1;
              v53 = *(_BYTE *)(v48 + v46);
              v51 |= (unint64_t)(v53 & 0x7F) << v49;
              if ((v53 & 0x80) == 0)
                goto LABEL_368;
              v49 += 7;
              v46 = v52;
              v14 = v50++ > 8;
            }
            while (!v14);
LABEL_241:
            LODWORD(v51) = 0;
            goto LABEL_368;
          }
          v208 = 0;
          v209 = 0;
          v51 = 0;
          if (v47 <= v46)
            v47 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v47 == v46)
            {
              LODWORD(v51) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v210 = v46 + 1;
              v211 = *(_BYTE *)(v48 + v46);
              *((_QWORD *)a2 + 1) = v210;
              v51 |= (unint64_t)(v211 & 0x7F) << v208;
              if (v211 < 0)
              {
                v208 += 7;
                v46 = v210;
                v14 = v209++ > 8;
                if (v14)
                  goto LABEL_241;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v51) = 0;
            }
            break;
          }
LABEL_368:
          *((_DWORD *)this + 19) = v51;
          goto LABEL_356;
        case 0xBu:
          *((_QWORD *)this + 23) |= 2uLL;
          v54 = *((_QWORD *)a2 + 1);
          if (v54 > 0xFFFFFFFFFFFFFFF7 || v54 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_221;
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v54);
LABEL_62:
          v55 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_355;
        case 0xCu:
          *((_QWORD *)this + 23) |= 8uLL;
          v56 = *((_QWORD *)a2 + 1);
          if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_221;
          *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v56);
          goto LABEL_354;
        case 0xDu:
          *((_QWORD *)this + 23) |= 0x8000000000uLL;
          v57 = *((_QWORD *)a2 + 1);
          if (v57 >= *((_QWORD *)a2 + 2))
          {
            v60 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v58 = v57 + 1;
            v59 = *(unsigned __int8 *)(*(_QWORD *)a2 + v57);
            *((_QWORD *)a2 + 1) = v58;
            v60 = v59 != 0;
          }
          *((_BYTE *)this + 176) = v60;
          goto LABEL_356;
        case 0xEu:
          *((_QWORD *)this + 23) |= 0x2000uLL;
          v61 = *((_QWORD *)a2 + 1);
          v62 = *((_QWORD *)a2 + 2);
          v63 = *(_QWORD *)a2;
          if (v61 <= 0xFFFFFFFFFFFFFFF5 && v61 + 10 <= v62)
          {
            v64 = 0;
            v65 = 0;
            v66 = 0;
            do
            {
              v67 = v61 + 1;
              *((_QWORD *)a2 + 1) = v61 + 1;
              v68 = *(_BYTE *)(v63 + v61);
              v66 |= (unint64_t)(v68 & 0x7F) << v64;
              if ((v68 & 0x80) == 0)
                goto LABEL_372;
              v64 += 7;
              v61 = v67;
              v14 = v65++ > 8;
            }
            while (!v14);
LABEL_250:
            LODWORD(v66) = 0;
            goto LABEL_372;
          }
          v212 = 0;
          v213 = 0;
          v66 = 0;
          if (v62 <= v61)
            v62 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v62 == v61)
            {
              LODWORD(v66) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v214 = v61 + 1;
              v215 = *(_BYTE *)(v63 + v61);
              *((_QWORD *)a2 + 1) = v214;
              v66 |= (unint64_t)(v215 & 0x7F) << v212;
              if (v215 < 0)
              {
                v212 += 7;
                v61 = v214;
                v14 = v213++ > 8;
                if (v14)
                  goto LABEL_250;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v66) = 0;
            }
            break;
          }
LABEL_372:
          *((_DWORD *)this + 18) = v66;
          goto LABEL_356;
        case 0xFu:
          *((_QWORD *)this + 23) |= 0x200000000uLL;
          v69 = *((_QWORD *)a2 + 1);
          v70 = *((_QWORD *)a2 + 2);
          v71 = *(_QWORD *)a2;
          if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
          {
            v72 = 0;
            v73 = 0;
            v74 = 0;
            do
            {
              v75 = v69 + 1;
              *((_QWORD *)a2 + 1) = v69 + 1;
              v76 = *(_BYTE *)(v71 + v69);
              v74 |= (unint64_t)(v76 & 0x7F) << v72;
              if ((v76 & 0x80) == 0)
                goto LABEL_376;
              v72 += 7;
              v69 = v75;
              v14 = v73++ > 8;
            }
            while (!v14);
LABEL_257:
            LODWORD(v74) = 0;
            goto LABEL_376;
          }
          v216 = 0;
          v217 = 0;
          v74 = 0;
          if (v70 <= v69)
            v70 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v70 == v69)
            {
              LODWORD(v74) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v218 = v69 + 1;
              v219 = *(_BYTE *)(v71 + v69);
              *((_QWORD *)a2 + 1) = v218;
              v74 |= (unint64_t)(v219 & 0x7F) << v216;
              if (v219 < 0)
              {
                v216 += 7;
                v69 = v218;
                v14 = v217++ > 8;
                if (v14)
                  goto LABEL_257;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v74) = 0;
            }
            break;
          }
LABEL_376:
          *((_DWORD *)this + 38) = v74;
          goto LABEL_356;
        case 0x10u:
          *((_QWORD *)this + 23) |= 0x4000000000uLL;
          v77 = *((_QWORD *)a2 + 1);
          v78 = *((_QWORD *)a2 + 2);
          v79 = *(_QWORD *)a2;
          if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
          {
            v80 = 0;
            v81 = 0;
            v82 = 0;
            do
            {
              v83 = v77 + 1;
              *((_QWORD *)a2 + 1) = v77 + 1;
              v84 = *(_BYTE *)(v79 + v77);
              v82 |= (unint64_t)(v84 & 0x7F) << v80;
              if ((v84 & 0x80) == 0)
                goto LABEL_380;
              v80 += 7;
              v77 = v83;
              v14 = v81++ > 8;
            }
            while (!v14);
LABEL_264:
            LODWORD(v82) = 0;
            goto LABEL_380;
          }
          v220 = 0;
          v221 = 0;
          v82 = 0;
          if (v78 <= v77)
            v78 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v78 == v77)
            {
              LODWORD(v82) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v222 = v77 + 1;
              v223 = *(_BYTE *)(v79 + v77);
              *((_QWORD *)a2 + 1) = v222;
              v82 |= (unint64_t)(v223 & 0x7F) << v220;
              if (v223 < 0)
              {
                v220 += 7;
                v77 = v222;
                v14 = v221++ > 8;
                if (v14)
                  goto LABEL_264;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v82) = 0;
            }
            break;
          }
LABEL_380:
          *((_DWORD *)this + 43) = v82;
          goto LABEL_356;
        case 0x11u:
          *((_QWORD *)this + 23) |= 0x100000uLL;
          v85 = *((_QWORD *)a2 + 1);
          v86 = *((_QWORD *)a2 + 2);
          v87 = *(_QWORD *)a2;
          if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
          {
            v88 = 0;
            v89 = 0;
            v90 = 0;
            do
            {
              v91 = v85 + 1;
              *((_QWORD *)a2 + 1) = v85 + 1;
              v92 = *(_BYTE *)(v87 + v85);
              v90 |= (unint64_t)(v92 & 0x7F) << v88;
              if ((v92 & 0x80) == 0)
                goto LABEL_384;
              v88 += 7;
              v85 = v91;
              v14 = v89++ > 8;
            }
            while (!v14);
LABEL_271:
            LODWORD(v90) = 0;
            goto LABEL_384;
          }
          v224 = 0;
          v225 = 0;
          v90 = 0;
          if (v86 <= v85)
            v86 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v86 == v85)
            {
              LODWORD(v90) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v226 = v85 + 1;
              v227 = *(_BYTE *)(v87 + v85);
              *((_QWORD *)a2 + 1) = v226;
              v90 |= (unint64_t)(v227 & 0x7F) << v224;
              if (v227 < 0)
              {
                v224 += 7;
                v85 = v226;
                v14 = v225++ > 8;
                if (v14)
                  goto LABEL_271;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v90) = 0;
            }
            break;
          }
LABEL_384:
          *((_DWORD *)this + 25) = v90;
          goto LABEL_356;
        case 0x12u:
          *((_QWORD *)this + 23) |= 0x20000uLL;
          v93 = *((_QWORD *)a2 + 1);
          v94 = *((_QWORD *)a2 + 2);
          v95 = *(_QWORD *)a2;
          if (v93 <= 0xFFFFFFFFFFFFFFF5 && v93 + 10 <= v94)
          {
            v96 = 0;
            v97 = 0;
            v98 = 0;
            do
            {
              v99 = v93 + 1;
              *((_QWORD *)a2 + 1) = v93 + 1;
              v100 = *(_BYTE *)(v95 + v93);
              v98 |= (unint64_t)(v100 & 0x7F) << v96;
              if ((v100 & 0x80) == 0)
                goto LABEL_388;
              v96 += 7;
              v93 = v99;
              v14 = v97++ > 8;
            }
            while (!v14);
LABEL_278:
            LODWORD(v98) = 0;
            goto LABEL_388;
          }
          v228 = 0;
          v229 = 0;
          v98 = 0;
          if (v94 <= v93)
            v94 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v94 == v93)
            {
              LODWORD(v98) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v230 = v93 + 1;
              v231 = *(_BYTE *)(v95 + v93);
              *((_QWORD *)a2 + 1) = v230;
              v98 |= (unint64_t)(v231 & 0x7F) << v228;
              if (v231 < 0)
              {
                v228 += 7;
                v93 = v230;
                v14 = v229++ > 8;
                if (v14)
                  goto LABEL_278;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v98) = 0;
            }
            break;
          }
LABEL_388:
          *((_DWORD *)this + 22) = v98;
          goto LABEL_356;
        case 0x13u:
          *((_QWORD *)this + 23) |= 0x10000uLL;
          v101 = *((_QWORD *)a2 + 1);
          v102 = *((_QWORD *)a2 + 2);
          v103 = *(_QWORD *)a2;
          if (v101 <= 0xFFFFFFFFFFFFFFF5 && v101 + 10 <= v102)
          {
            v104 = 0;
            v105 = 0;
            v106 = 0;
            do
            {
              v107 = v101 + 1;
              *((_QWORD *)a2 + 1) = v101 + 1;
              v108 = *(_BYTE *)(v103 + v101);
              v106 |= (unint64_t)(v108 & 0x7F) << v104;
              if ((v108 & 0x80) == 0)
                goto LABEL_392;
              v104 += 7;
              v101 = v107;
              v14 = v105++ > 8;
            }
            while (!v14);
LABEL_285:
            LODWORD(v106) = 0;
            goto LABEL_392;
          }
          v232 = 0;
          v233 = 0;
          v106 = 0;
          if (v102 <= v101)
            v102 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v102 == v101)
            {
              LODWORD(v106) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v234 = v101 + 1;
              v235 = *(_BYTE *)(v103 + v101);
              *((_QWORD *)a2 + 1) = v234;
              v106 |= (unint64_t)(v235 & 0x7F) << v232;
              if (v235 < 0)
              {
                v232 += 7;
                v101 = v234;
                v14 = v233++ > 8;
                if (v14)
                  goto LABEL_285;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v106) = 0;
            }
            break;
          }
LABEL_392:
          *((_DWORD *)this + 21) = v106;
          goto LABEL_356;
        case 0x14u:
          *((_QWORD *)this + 23) |= 0x40000uLL;
          v109 = *((_QWORD *)a2 + 1);
          v110 = *((_QWORD *)a2 + 2);
          v111 = *(_QWORD *)a2;
          if (v109 <= 0xFFFFFFFFFFFFFFF5 && v109 + 10 <= v110)
          {
            v112 = 0;
            v113 = 0;
            v114 = 0;
            do
            {
              v115 = v109 + 1;
              *((_QWORD *)a2 + 1) = v109 + 1;
              v116 = *(_BYTE *)(v111 + v109);
              v114 |= (unint64_t)(v116 & 0x7F) << v112;
              if ((v116 & 0x80) == 0)
                goto LABEL_396;
              v112 += 7;
              v109 = v115;
              v14 = v113++ > 8;
            }
            while (!v14);
LABEL_292:
            LODWORD(v114) = 0;
            goto LABEL_396;
          }
          v236 = 0;
          v237 = 0;
          v114 = 0;
          if (v110 <= v109)
            v110 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v110 == v109)
            {
              LODWORD(v114) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v238 = v109 + 1;
              v239 = *(_BYTE *)(v111 + v109);
              *((_QWORD *)a2 + 1) = v238;
              v114 |= (unint64_t)(v239 & 0x7F) << v236;
              if (v239 < 0)
              {
                v236 += 7;
                v109 = v238;
                v14 = v237++ > 8;
                if (v14)
                  goto LABEL_292;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v114) = 0;
            }
            break;
          }
LABEL_396:
          *((_DWORD *)this + 23) = v114;
          goto LABEL_356;
        case 0x15u:
          *((_QWORD *)this + 23) |= 0x80000uLL;
          v117 = *((_QWORD *)a2 + 1);
          v118 = *((_QWORD *)a2 + 2);
          v119 = *(_QWORD *)a2;
          if (v117 <= 0xFFFFFFFFFFFFFFF5 && v117 + 10 <= v118)
          {
            v120 = 0;
            v121 = 0;
            v122 = 0;
            do
            {
              v123 = v117 + 1;
              *((_QWORD *)a2 + 1) = v117 + 1;
              v124 = *(_BYTE *)(v119 + v117);
              v122 |= (unint64_t)(v124 & 0x7F) << v120;
              if ((v124 & 0x80) == 0)
                goto LABEL_400;
              v120 += 7;
              v117 = v123;
              v14 = v121++ > 8;
            }
            while (!v14);
LABEL_299:
            LODWORD(v122) = 0;
            goto LABEL_400;
          }
          v240 = 0;
          v241 = 0;
          v122 = 0;
          if (v118 <= v117)
            v118 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v118 == v117)
            {
              LODWORD(v122) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v242 = v117 + 1;
              v243 = *(_BYTE *)(v119 + v117);
              *((_QWORD *)a2 + 1) = v242;
              v122 |= (unint64_t)(v243 & 0x7F) << v240;
              if (v243 < 0)
              {
                v240 += 7;
                v117 = v242;
                v14 = v241++ > 8;
                if (v14)
                  goto LABEL_299;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v122) = 0;
            }
            break;
          }
LABEL_400:
          *((_DWORD *)this + 24) = v122;
          goto LABEL_356;
        case 0x16u:
          *((_QWORD *)this + 23) |= 0x8000uLL;
          v125 = *((_QWORD *)a2 + 1);
          v126 = *((_QWORD *)a2 + 2);
          v127 = *(_QWORD *)a2;
          if (v125 <= 0xFFFFFFFFFFFFFFF5 && v125 + 10 <= v126)
          {
            v128 = 0;
            v129 = 0;
            v130 = 0;
            do
            {
              v131 = v125 + 1;
              *((_QWORD *)a2 + 1) = v125 + 1;
              v132 = *(_BYTE *)(v127 + v125);
              v130 |= (unint64_t)(v132 & 0x7F) << v128;
              if ((v132 & 0x80) == 0)
                goto LABEL_404;
              v128 += 7;
              v125 = v131;
              v14 = v129++ > 8;
            }
            while (!v14);
LABEL_306:
            LODWORD(v130) = 0;
            goto LABEL_404;
          }
          v244 = 0;
          v245 = 0;
          v130 = 0;
          if (v126 <= v125)
            v126 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v126 == v125)
            {
              LODWORD(v130) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v246 = v125 + 1;
              v247 = *(_BYTE *)(v127 + v125);
              *((_QWORD *)a2 + 1) = v246;
              v130 |= (unint64_t)(v247 & 0x7F) << v244;
              if (v247 < 0)
              {
                v244 += 7;
                v125 = v246;
                v14 = v245++ > 8;
                if (v14)
                  goto LABEL_306;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v130) = 0;
            }
            break;
          }
LABEL_404:
          *((_DWORD *)this + 20) = v130;
          goto LABEL_356;
        case 0x17u:
          *((_QWORD *)this + 23) |= 0x400uLL;
          v133 = *((_QWORD *)a2 + 1);
          v134 = *((_QWORD *)a2 + 2);
          v135 = *(_QWORD *)a2;
          if (v133 <= 0xFFFFFFFFFFFFFFF5 && v133 + 10 <= v134)
          {
            v136 = 0;
            v137 = 0;
            v138 = 0;
            do
            {
              v139 = v133 + 1;
              *((_QWORD *)a2 + 1) = v133 + 1;
              v140 = *(_BYTE *)(v135 + v133);
              v138 |= (unint64_t)(v140 & 0x7F) << v136;
              if ((v140 & 0x80) == 0)
                goto LABEL_408;
              v136 += 7;
              v133 = v139;
              v14 = v137++ > 8;
            }
            while (!v14);
LABEL_313:
            LODWORD(v138) = 0;
            goto LABEL_408;
          }
          v248 = 0;
          v249 = 0;
          v138 = 0;
          if (v134 <= v133)
            v134 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v134 == v133)
            {
              LODWORD(v138) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v250 = v133 + 1;
              v251 = *(_BYTE *)(v135 + v133);
              *((_QWORD *)a2 + 1) = v250;
              v138 |= (unint64_t)(v251 & 0x7F) << v248;
              if (v251 < 0)
              {
                v248 += 7;
                v133 = v250;
                v14 = v249++ > 8;
                if (v14)
                  goto LABEL_313;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v138) = 0;
            }
            break;
          }
LABEL_408:
          *((_DWORD *)this + 15) = v138;
          goto LABEL_356;
        case 0x18u:
          *((_QWORD *)this + 23) |= 0x2000000000uLL;
          v141 = *((_QWORD *)a2 + 1);
          v142 = *((_QWORD *)a2 + 2);
          v143 = *(_QWORD *)a2;
          if (v141 <= 0xFFFFFFFFFFFFFFF5 && v141 + 10 <= v142)
          {
            v144 = 0;
            v145 = 0;
            v146 = 0;
            do
            {
              v147 = v141 + 1;
              *((_QWORD *)a2 + 1) = v141 + 1;
              v148 = *(_BYTE *)(v143 + v141);
              v146 |= (unint64_t)(v148 & 0x7F) << v144;
              if ((v148 & 0x80) == 0)
                goto LABEL_412;
              v144 += 7;
              v141 = v147;
              v14 = v145++ > 8;
            }
            while (!v14);
LABEL_320:
            LODWORD(v146) = 0;
            goto LABEL_412;
          }
          v252 = 0;
          v253 = 0;
          v146 = 0;
          if (v142 <= v141)
            v142 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v142 == v141)
            {
              LODWORD(v146) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v254 = v141 + 1;
              v255 = *(_BYTE *)(v143 + v141);
              *((_QWORD *)a2 + 1) = v254;
              v146 |= (unint64_t)(v255 & 0x7F) << v252;
              if (v255 < 0)
              {
                v252 += 7;
                v141 = v254;
                v14 = v253++ > 8;
                if (v14)
                  goto LABEL_320;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v146) = 0;
            }
            break;
          }
LABEL_412:
          *((_DWORD *)this + 42) = v146;
          goto LABEL_356;
        case 0x19u:
          *((_QWORD *)this + 23) |= 0x1000uLL;
          v149 = *((_QWORD *)a2 + 1);
          v150 = *((_QWORD *)a2 + 2);
          v151 = *(_QWORD *)a2;
          if (v149 <= 0xFFFFFFFFFFFFFFF5 && v149 + 10 <= v150)
          {
            v152 = 0;
            v153 = 0;
            v154 = 0;
            do
            {
              v155 = v149 + 1;
              *((_QWORD *)a2 + 1) = v149 + 1;
              v156 = *(_BYTE *)(v151 + v149);
              v154 |= (unint64_t)(v156 & 0x7F) << v152;
              if ((v156 & 0x80) == 0)
                goto LABEL_416;
              v152 += 7;
              v149 = v155;
              v14 = v153++ > 8;
            }
            while (!v14);
LABEL_327:
            LODWORD(v154) = 0;
            goto LABEL_416;
          }
          v256 = 0;
          v257 = 0;
          v154 = 0;
          if (v150 <= v149)
            v150 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v150 == v149)
            {
              LODWORD(v154) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v258 = v149 + 1;
              v259 = *(_BYTE *)(v151 + v149);
              *((_QWORD *)a2 + 1) = v258;
              v154 |= (unint64_t)(v259 & 0x7F) << v256;
              if (v259 < 0)
              {
                v256 += 7;
                v149 = v258;
                v14 = v257++ > 8;
                if (v14)
                  goto LABEL_327;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v154) = 0;
            }
            break;
          }
LABEL_416:
          *((_DWORD *)this + 17) = v154;
          goto LABEL_356;
        case 0x1Au:
          *((_QWORD *)this + 23) |= 0x20000000uLL;
          v157 = *((_QWORD *)a2 + 1);
          v158 = *((_QWORD *)a2 + 2);
          v159 = *(_QWORD *)a2;
          if (v157 <= 0xFFFFFFFFFFFFFFF5 && v157 + 10 <= v158)
          {
            v160 = 0;
            v161 = 0;
            v162 = 0;
            do
            {
              v163 = v157 + 1;
              *((_QWORD *)a2 + 1) = v157 + 1;
              v164 = *(_BYTE *)(v159 + v157);
              v162 |= (unint64_t)(v164 & 0x7F) << v160;
              if ((v164 & 0x80) == 0)
                goto LABEL_420;
              v160 += 7;
              v157 = v163;
              v14 = v161++ > 8;
            }
            while (!v14);
LABEL_334:
            LODWORD(v162) = 0;
            goto LABEL_420;
          }
          v260 = 0;
          v261 = 0;
          v162 = 0;
          if (v158 <= v157)
            v158 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v158 == v157)
            {
              LODWORD(v162) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v262 = v157 + 1;
              v263 = *(_BYTE *)(v159 + v157);
              *((_QWORD *)a2 + 1) = v262;
              v162 |= (unint64_t)(v263 & 0x7F) << v260;
              if (v263 < 0)
              {
                v260 += 7;
                v157 = v262;
                v14 = v261++ > 8;
                if (v14)
                  goto LABEL_334;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v162) = 0;
            }
            break;
          }
LABEL_420:
          *((_DWORD *)this + 34) = v162;
          goto LABEL_356;
        case 0x1Bu:
          *((_QWORD *)this + 23) |= 0x10uLL;
          v165 = *((_QWORD *)a2 + 1);
          v166 = *((_QWORD *)a2 + 2);
          v167 = *(_QWORD *)a2;
          if (v165 <= 0xFFFFFFFFFFFFFFF5 && v165 + 10 <= v166)
          {
            v168 = 0;
            v169 = 0;
            v170 = 0;
            do
            {
              v171 = v165 + 1;
              *((_QWORD *)a2 + 1) = v165 + 1;
              v172 = *(_BYTE *)(v167 + v165);
              v170 |= (unint64_t)(v172 & 0x7F) << v168;
              if ((v172 & 0x80) == 0)
                goto LABEL_424;
              v168 += 7;
              v165 = v171;
              v14 = v169++ > 8;
            }
            while (!v14);
LABEL_341:
            LODWORD(v170) = 0;
            goto LABEL_424;
          }
          v264 = 0;
          v265 = 0;
          v170 = 0;
          if (v166 <= v165)
            v166 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v166 == v165)
            {
              LODWORD(v170) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v266 = v165 + 1;
              v267 = *(_BYTE *)(v167 + v165);
              *((_QWORD *)a2 + 1) = v266;
              v170 |= (unint64_t)(v267 & 0x7F) << v264;
              if (v267 < 0)
              {
                v264 += 7;
                v165 = v266;
                v14 = v265++ > 8;
                if (v14)
                  goto LABEL_341;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v170) = 0;
            }
            break;
          }
LABEL_424:
          *((_DWORD *)this + 9) = v170;
          goto LABEL_356;
        case 0x1Cu:
          *((_QWORD *)this + 23) |= 0x400000000uLL;
          v173 = *((_QWORD *)a2 + 1);
          if (v173 > 0xFFFFFFFFFFFFFFFBLL || v173 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_221;
          *((_DWORD *)this + 39) = *(_DWORD *)(*(_QWORD *)a2 + v173);
          goto LABEL_354;
        case 0x1Du:
          *((_QWORD *)this + 23) |= 0x20000000000uLL;
          v174 = *((_QWORD *)a2 + 1);
          if (v174 >= *((_QWORD *)a2 + 2))
          {
            v177 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v175 = v174 + 1;
            v176 = *(unsigned __int8 *)(*(_QWORD *)a2 + v174);
            *((_QWORD *)a2 + 1) = v175;
            v177 = v176 != 0;
          }
          *((_BYTE *)this + 178) = v177;
          goto LABEL_356;
        case 0x1Eu:
          *((_QWORD *)this + 23) |= 0x800000000uLL;
          v178 = *((_QWORD *)a2 + 1);
          if (v178 > 0xFFFFFFFFFFFFFFFBLL || v178 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_221;
          *((_DWORD *)this + 40) = *(_DWORD *)(*(_QWORD *)a2 + v178);
          goto LABEL_354;
        case 0x1Fu:
          *((_QWORD *)this + 23) |= 0x40000000000uLL;
          v179 = *((_QWORD *)a2 + 1);
          if (v179 >= *((_QWORD *)a2 + 2))
          {
            v182 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v180 = v179 + 1;
            v181 = *(unsigned __int8 *)(*(_QWORD *)a2 + v179);
            *((_QWORD *)a2 + 1) = v180;
            v182 = v181 != 0;
          }
          *((_BYTE *)this + 179) = v182;
          goto LABEL_356;
        case 0x20u:
          *((_QWORD *)this + 23) |= 0x20uLL;
          v183 = *((_QWORD *)a2 + 1);
          v184 = *((_QWORD *)a2 + 2);
          v185 = *(_QWORD *)a2;
          if (v183 <= 0xFFFFFFFFFFFFFFF5 && v183 + 10 <= v184)
          {
            v186 = 0;
            v187 = 0;
            v188 = 0;
            do
            {
              v189 = v183 + 1;
              *((_QWORD *)a2 + 1) = v183 + 1;
              v190 = *(_BYTE *)(v185 + v183);
              v188 |= (unint64_t)(v190 & 0x7F) << v186;
              if ((v190 & 0x80) == 0)
                goto LABEL_428;
              v186 += 7;
              v183 = v189;
              v14 = v187++ > 8;
            }
            while (!v14);
LABEL_352:
            LODWORD(v188) = 0;
            goto LABEL_428;
          }
          v268 = 0;
          v269 = 0;
          v188 = 0;
          if (v184 <= v183)
            v184 = *((_QWORD *)a2 + 1);
          break;
        case 0x21u:
          *((_QWORD *)this + 23) |= 0x80uLL;
          v191 = *((_QWORD *)a2 + 1);
          if (v191 > 0xFFFFFFFFFFFFFFFBLL || v191 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_221;
          *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v191);
          goto LABEL_354;
        case 0x22u:
          *((_QWORD *)this + 23) |= 0x4000000uLL;
          v192 = *((_QWORD *)a2 + 1);
          if (v192 > 0xFFFFFFFFFFFFFFFBLL || v192 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_221;
          *((_DWORD *)this + 31) = *(_DWORD *)(*(_QWORD *)a2 + v192);
          goto LABEL_354;
        case 0x23u:
          *((_QWORD *)this + 23) |= 0x8000000uLL;
          v193 = *((_QWORD *)a2 + 1);
          if (v193 > 0xFFFFFFFFFFFFFFFBLL || v193 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_221;
          *((_DWORD *)this + 32) = *(_DWORD *)(*(_QWORD *)a2 + v193);
          goto LABEL_354;
        case 0x24u:
          *((_QWORD *)this + 23) |= 0x10000000uLL;
          v194 = *((_QWORD *)a2 + 1);
          if (v194 > 0xFFFFFFFFFFFFFFFBLL || v194 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_221;
          *((_DWORD *)this + 33) = *(_DWORD *)(*(_QWORD *)a2 + v194);
          goto LABEL_354;
        case 0x25u:
          *((_QWORD *)this + 23) |= 0x40uLL;
          v195 = *((_QWORD *)a2 + 1);
          if (v195 > 0xFFFFFFFFFFFFFFFBLL || v195 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_221;
          *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v195);
          goto LABEL_354;
        case 0x26u:
          *((_QWORD *)this + 23) |= 0x100uLL;
          v196 = *((_QWORD *)a2 + 1);
          if (v196 > 0xFFFFFFFFFFFFFFFBLL || v196 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_221;
          *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v196);
          goto LABEL_354;
        case 0x27u:
          *((_QWORD *)this + 23) |= 0x200uLL;
          v197 = *((_QWORD *)a2 + 1);
          if (v197 > 0xFFFFFFFFFFFFFFFBLL || v197 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_221;
          *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v197);
          goto LABEL_354;
        case 0x28u:
          *((_QWORD *)this + 23) |= 0x400000uLL;
          v198 = *((_QWORD *)a2 + 1);
          if (v198 > 0xFFFFFFFFFFFFFFFBLL || v198 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_221;
          *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v198);
          goto LABEL_354;
        case 0x29u:
          *((_QWORD *)this + 23) |= 0x800000uLL;
          v199 = *((_QWORD *)a2 + 1);
          if (v199 > 0xFFFFFFFFFFFFFFFBLL || v199 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_221;
          *((_DWORD *)this + 28) = *(_DWORD *)(*(_QWORD *)a2 + v199);
          goto LABEL_354;
        case 0x2Au:
          *((_QWORD *)this + 23) |= 0x1000000uLL;
          v200 = *((_QWORD *)a2 + 1);
          if (v200 > 0xFFFFFFFFFFFFFFFBLL || v200 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_221;
          *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v200);
          goto LABEL_354;
        case 0x2Bu:
          *((_QWORD *)this + 23) |= 0x40000000uLL;
          v201 = *((_QWORD *)a2 + 1);
          if (v201 > 0xFFFFFFFFFFFFFFFBLL || v201 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_221;
          *((_DWORD *)this + 35) = *(_DWORD *)(*(_QWORD *)a2 + v201);
          goto LABEL_354;
        case 0x2Cu:
          *((_QWORD *)this + 23) |= 0x80000000uLL;
          v202 = *((_QWORD *)a2 + 1);
          if (v202 > 0xFFFFFFFFFFFFFFFBLL || v202 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_221;
          *((_DWORD *)this + 36) = *(_DWORD *)(*(_QWORD *)a2 + v202);
          goto LABEL_354;
        case 0x2Du:
          *((_QWORD *)this + 23) |= (unint64_t)&_mh_execute_header;
          v203 = *((_QWORD *)a2 + 1);
          if (v203 <= 0xFFFFFFFFFFFFFFFBLL && v203 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 37) = *(_DWORD *)(*(_QWORD *)a2 + v203);
LABEL_354:
            v55 = *((_QWORD *)a2 + 1) + 4;
LABEL_355:
            *((_QWORD *)a2 + 1) = v55;
          }
          else
          {
LABEL_221:
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_356;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_356;
      }
      while (1)
      {
        if (v184 == v183)
        {
          LODWORD(v188) = 0;
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_428;
        }
        v270 = v183 + 1;
        v271 = *(_BYTE *)(v185 + v183);
        *((_QWORD *)a2 + 1) = v270;
        v188 |= (unint64_t)(v271 & 0x7F) << v268;
        if ((v271 & 0x80) == 0)
          break;
        v268 += 7;
        v183 = v270;
        v14 = v269++ > 8;
        if (v14)
          goto LABEL_352;
      }
      if (*((_BYTE *)a2 + 24))
        LODWORD(v188) = 0;
LABEL_428:
      *((_DWORD *)this + 10) = v188;
LABEL_356:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MobilityBoutMetrics::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = this;
  v4 = *(_QWORD *)(this + 184);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24), 1u);
    v4 = *(_QWORD *)(v3 + 184);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 0x200000) == 0)
        goto LABEL_4;
      goto LABEL_49;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 2u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x200000) == 0)
  {
LABEL_4:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_5;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 104), 3u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_5:
    if ((v4 & 0x100000000000) == 0)
      goto LABEL_6;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 164), 4u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x100000000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x800) == 0)
      goto LABEL_7;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 181), 5u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x800) == 0)
  {
LABEL_7:
    if ((v4 & 0x10000000000) == 0)
      goto LABEL_8;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 6u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x10000000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_9;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 177), 7u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x80000000000) == 0)
      goto LABEL_10;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(float *)(v3 + 120), 8u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x80000000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x4000) == 0)
      goto LABEL_11;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 180), 9u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x4000) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0)
      goto LABEL_12;
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 76), 0xAu);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 2) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0)
      goto LABEL_13;
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 0xBu);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 0x8000000000) == 0)
      goto LABEL_14;
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 0xCu);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x8000000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 176), 0xDu);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x2000) == 0)
  {
LABEL_15:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_16;
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 72), 0xEu);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x4000000000) == 0)
      goto LABEL_17;
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 152), 0xFu);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x4000000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x100000) == 0)
      goto LABEL_18;
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 172), 0x10u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x100000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 100), 0x11u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x20000) == 0)
  {
LABEL_19:
    if ((v4 & 0x10000) == 0)
      goto LABEL_20;
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 88), 0x12u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x10000) == 0)
  {
LABEL_20:
    if ((v4 & 0x40000) == 0)
      goto LABEL_21;
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 84), 0x13u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x40000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80000) == 0)
      goto LABEL_22;
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 92), 0x14u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x80000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0)
      goto LABEL_23;
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 96), 0x15u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x8000) == 0)
  {
LABEL_23:
    if ((v4 & 0x400) == 0)
      goto LABEL_24;
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 80), 0x16u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x400) == 0)
  {
LABEL_24:
    if ((v4 & 0x2000000000) == 0)
      goto LABEL_25;
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 60), 0x17u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x2000000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x1000) == 0)
      goto LABEL_26;
    goto LABEL_71;
  }
LABEL_70:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 168), 0x18u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x1000) == 0)
  {
LABEL_26:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_27;
    goto LABEL_72;
  }
LABEL_71:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 68), 0x19u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_27:
    if ((v4 & 0x10) == 0)
      goto LABEL_28;
    goto LABEL_73;
  }
LABEL_72:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 136), 0x1Au);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x10) == 0)
  {
LABEL_28:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_29;
    goto LABEL_74;
  }
LABEL_73:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 36), 0x1Bu);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x20000000000) == 0)
      goto LABEL_30;
    goto LABEL_75;
  }
LABEL_74:
  this = PB::Writer::write(a2, *(float *)(v3 + 156), 0x1Cu);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x20000000000) == 0)
  {
LABEL_30:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_31;
    goto LABEL_76;
  }
LABEL_75:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 178), 0x1Du);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x40000000000) == 0)
      goto LABEL_32;
    goto LABEL_77;
  }
LABEL_76:
  this = PB::Writer::write(a2, *(float *)(v3 + 160), 0x1Eu);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x40000000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x20) == 0)
      goto LABEL_33;
    goto LABEL_78;
  }
LABEL_77:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 179), 0x1Fu);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x20) == 0)
  {
LABEL_33:
    if ((v4 & 0x80) == 0)
      goto LABEL_34;
    goto LABEL_79;
  }
LABEL_78:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 0x20u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x80) == 0)
  {
LABEL_34:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_80;
  }
LABEL_79:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 0x21u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_81;
  }
LABEL_80:
  this = PB::Writer::write(a2, *(float *)(v3 + 124), 0x22u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_37;
    goto LABEL_82;
  }
LABEL_81:
  this = PB::Writer::write(a2, *(float *)(v3 + 128), 0x23u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_37:
    if ((v4 & 0x40) == 0)
      goto LABEL_38;
    goto LABEL_83;
  }
LABEL_82:
  this = PB::Writer::write(a2, *(float *)(v3 + 132), 0x24u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x40) == 0)
  {
LABEL_38:
    if ((v4 & 0x100) == 0)
      goto LABEL_39;
    goto LABEL_84;
  }
LABEL_83:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 0x25u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x100) == 0)
  {
LABEL_39:
    if ((v4 & 0x200) == 0)
      goto LABEL_40;
    goto LABEL_85;
  }
LABEL_84:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0x26u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x200) == 0)
  {
LABEL_40:
    if ((v4 & 0x400000) == 0)
      goto LABEL_41;
    goto LABEL_86;
  }
LABEL_85:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 0x27u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x400000) == 0)
  {
LABEL_41:
    if ((v4 & 0x800000) == 0)
      goto LABEL_42;
    goto LABEL_87;
  }
LABEL_86:
  this = PB::Writer::write(a2, *(float *)(v3 + 108), 0x28u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x800000) == 0)
  {
LABEL_42:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_43;
    goto LABEL_88;
  }
LABEL_87:
  this = PB::Writer::write(a2, *(float *)(v3 + 112), 0x29u);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_43:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_44;
    goto LABEL_89;
  }
LABEL_88:
  this = PB::Writer::write(a2, *(float *)(v3 + 116), 0x2Au);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_44:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_45;
    goto LABEL_90;
  }
LABEL_89:
  this = PB::Writer::write(a2, *(float *)(v3 + 140), 0x2Bu);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_45:
    if ((v4 & 0x100000000) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 148), 0x2Du);
  }
LABEL_90:
  this = PB::Writer::write(a2, *(float *)(v3 + 144), 0x2Cu);
  if ((*(_QWORD *)(v3 + 184) & 0x100000000) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 148), 0x2Du);
  return this;
}

uint64_t CMMsl::MobilityBoutMetrics::hash_value(CMMsl::MobilityBoutMetrics *this)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  double v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  float v46;
  uint64_t v47;
  float v48;
  uint64_t v49;
  float v50;
  uint64_t v51;
  float v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;

  v1 = *((_QWORD *)this + 23);
  if ((v1 & 4) == 0)
  {
    v2 = 0;
    if ((v1 & 1) != 0)
      goto LABEL_3;
LABEL_93:
    v72 = 0.0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_6;
    goto LABEL_94;
  }
  if (*((double *)this + 3) == 0.0)
    v2 = 0;
  else
    v2 = *((_QWORD *)this + 3);
  if ((v1 & 1) == 0)
    goto LABEL_93;
LABEL_3:
  v3 = *((double *)this + 1);
  if (v3 == 0.0)
    v3 = 0.0;
  v72 = v3;
  if ((v1 & 0x200000) != 0)
  {
LABEL_6:
    v71 = *((unsigned int *)this + 26);
    if ((v1 & 0x1000000000) != 0)
      goto LABEL_7;
LABEL_95:
    v70 = 0;
    if ((v1 & 0x100000000000) != 0)
      goto LABEL_10;
    goto LABEL_96;
  }
LABEL_94:
  v71 = 0;
  if ((v1 & 0x1000000000) == 0)
    goto LABEL_95;
LABEL_7:
  v4 = *((float *)this + 41);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  v70 = v5;
  if ((v1 & 0x100000000000) != 0)
  {
LABEL_10:
    v69 = *((unsigned __int8 *)this + 181);
    if ((v1 & 0x800) != 0)
      goto LABEL_11;
LABEL_97:
    v68 = 0;
    if ((v1 & 0x10000000000) != 0)
      goto LABEL_14;
    goto LABEL_98;
  }
LABEL_96:
  v69 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_97;
LABEL_11:
  v6 = *((float *)this + 16);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  v68 = v7;
  if ((v1 & 0x10000000000) != 0)
  {
LABEL_14:
    v67 = *((unsigned __int8 *)this + 177);
    if ((v1 & 0x2000000) != 0)
      goto LABEL_15;
LABEL_99:
    v66 = 0;
    if ((v1 & 0x80000000000) != 0)
      goto LABEL_18;
    goto LABEL_100;
  }
LABEL_98:
  v67 = 0;
  if ((v1 & 0x2000000) == 0)
    goto LABEL_99;
LABEL_15:
  v8 = *((float *)this + 30);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  v66 = v9;
  if ((v1 & 0x80000000000) != 0)
  {
LABEL_18:
    v65 = *((unsigned __int8 *)this + 180);
    if ((v1 & 0x4000) != 0)
      goto LABEL_19;
    goto LABEL_101;
  }
LABEL_100:
  v65 = 0;
  if ((v1 & 0x4000) != 0)
  {
LABEL_19:
    v64 = *((unsigned int *)this + 19);
    if ((v1 & 2) != 0)
      goto LABEL_20;
LABEL_102:
    v63 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_23;
LABEL_103:
    v62 = 0;
    if ((v1 & 0x8000000000) != 0)
      goto LABEL_26;
    goto LABEL_104;
  }
LABEL_101:
  v64 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_102;
LABEL_20:
  v10 = *((double *)this + 2);
  if (v10 == 0.0)
    v10 = 0.0;
  v63 = v10;
  if ((v1 & 8) == 0)
    goto LABEL_103;
LABEL_23:
  v11 = *((float *)this + 8);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  v62 = v12;
  if ((v1 & 0x8000000000) != 0)
  {
LABEL_26:
    v61 = *((unsigned __int8 *)this + 176);
    if ((v1 & 0x2000) != 0)
      goto LABEL_27;
    goto LABEL_105;
  }
LABEL_104:
  v61 = 0;
  if ((v1 & 0x2000) != 0)
  {
LABEL_27:
    v60 = *((unsigned int *)this + 18);
    if ((v1 & 0x200000000) != 0)
      goto LABEL_28;
    goto LABEL_106;
  }
LABEL_105:
  v60 = 0;
  if ((v1 & 0x200000000) != 0)
  {
LABEL_28:
    v59 = *((unsigned int *)this + 38);
    if ((v1 & 0x4000000000) != 0)
      goto LABEL_29;
    goto LABEL_107;
  }
LABEL_106:
  v59 = 0;
  if ((v1 & 0x4000000000) != 0)
  {
LABEL_29:
    v58 = *((unsigned int *)this + 43);
    if ((v1 & 0x100000) != 0)
      goto LABEL_30;
    goto LABEL_108;
  }
LABEL_107:
  v58 = 0;
  if ((v1 & 0x100000) != 0)
  {
LABEL_30:
    v57 = *((unsigned int *)this + 25);
    if ((v1 & 0x20000) != 0)
      goto LABEL_31;
    goto LABEL_109;
  }
LABEL_108:
  v57 = 0;
  if ((v1 & 0x20000) != 0)
  {
LABEL_31:
    v56 = *((unsigned int *)this + 22);
    if ((v1 & 0x10000) != 0)
      goto LABEL_32;
    goto LABEL_110;
  }
LABEL_109:
  v56 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_32:
    v55 = *((unsigned int *)this + 21);
    if ((v1 & 0x40000) != 0)
      goto LABEL_33;
    goto LABEL_111;
  }
LABEL_110:
  v55 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_33:
    v13 = *((unsigned int *)this + 23);
    if ((v1 & 0x80000) != 0)
      goto LABEL_34;
    goto LABEL_112;
  }
LABEL_111:
  v13 = 0;
  if ((v1 & 0x80000) != 0)
  {
LABEL_34:
    v14 = *((unsigned int *)this + 24);
    if ((v1 & 0x8000) != 0)
      goto LABEL_35;
    goto LABEL_113;
  }
LABEL_112:
  v14 = 0;
  if ((v1 & 0x8000) != 0)
  {
LABEL_35:
    v15 = *((unsigned int *)this + 20);
    if ((v1 & 0x400) != 0)
      goto LABEL_36;
    goto LABEL_114;
  }
LABEL_113:
  v15 = 0;
  if ((v1 & 0x400) != 0)
  {
LABEL_36:
    v16 = *((unsigned int *)this + 15);
    if ((v1 & 0x2000000000) != 0)
      goto LABEL_37;
    goto LABEL_115;
  }
LABEL_114:
  v16 = 0;
  if ((v1 & 0x2000000000) != 0)
  {
LABEL_37:
    v17 = *((unsigned int *)this + 42);
    if ((v1 & 0x1000) != 0)
      goto LABEL_38;
    goto LABEL_116;
  }
LABEL_115:
  v17 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_38:
    v18 = *((unsigned int *)this + 17);
    if ((v1 & 0x20000000) != 0)
      goto LABEL_39;
    goto LABEL_117;
  }
LABEL_116:
  v18 = 0;
  if ((v1 & 0x20000000) != 0)
  {
LABEL_39:
    v19 = *((unsigned int *)this + 34);
    if ((v1 & 0x10) != 0)
      goto LABEL_40;
    goto LABEL_118;
  }
LABEL_117:
  v19 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_40:
    v20 = *((unsigned int *)this + 9);
    if ((v1 & 0x400000000) != 0)
      goto LABEL_41;
LABEL_119:
    v22 = 0;
    if ((v1 & 0x20000000000) != 0)
      goto LABEL_44;
    goto LABEL_120;
  }
LABEL_118:
  v20 = 0;
  if ((v1 & 0x400000000) == 0)
    goto LABEL_119;
LABEL_41:
  v21 = *((float *)this + 39);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  if ((v1 & 0x20000000000) != 0)
  {
LABEL_44:
    v23 = *((unsigned __int8 *)this + 178);
    if ((v1 & 0x800000000) != 0)
      goto LABEL_45;
LABEL_121:
    v25 = 0;
    if ((v1 & 0x40000000000) != 0)
      goto LABEL_48;
    goto LABEL_122;
  }
LABEL_120:
  v23 = 0;
  if ((v1 & 0x800000000) == 0)
    goto LABEL_121;
LABEL_45:
  v24 = *((float *)this + 40);
  v25 = LODWORD(v24);
  if (v24 == 0.0)
    v25 = 0;
  if ((v1 & 0x40000000000) != 0)
  {
LABEL_48:
    v26 = *((unsigned __int8 *)this + 179);
    if ((v1 & 0x20) != 0)
      goto LABEL_49;
    goto LABEL_123;
  }
LABEL_122:
  v26 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_49:
    v27 = *((unsigned int *)this + 10);
    if ((v1 & 0x80) != 0)
      goto LABEL_50;
LABEL_124:
    v29 = 0;
    if ((v1 & 0x4000000) != 0)
      goto LABEL_53;
LABEL_125:
    v31 = 0;
    if ((v1 & 0x8000000) != 0)
      goto LABEL_56;
LABEL_126:
    v33 = 0;
    if ((v1 & 0x10000000) != 0)
      goto LABEL_59;
LABEL_127:
    v35 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_62;
LABEL_128:
    v37 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_65;
LABEL_129:
    v39 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_68;
LABEL_130:
    v41 = 0;
    if ((v1 & 0x400000) != 0)
      goto LABEL_71;
LABEL_131:
    v43 = 0;
    if ((v1 & 0x800000) != 0)
      goto LABEL_74;
LABEL_132:
    v45 = 0;
    if ((v1 & 0x1000000) != 0)
      goto LABEL_77;
LABEL_133:
    v47 = 0;
    if ((v1 & 0x40000000) != 0)
      goto LABEL_80;
LABEL_134:
    v49 = 0;
    if ((v1 & 0x80000000) != 0)
      goto LABEL_83;
    goto LABEL_135;
  }
LABEL_123:
  v27 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_124;
LABEL_50:
  v28 = *((float *)this + 12);
  v29 = LODWORD(v28);
  if (v28 == 0.0)
    v29 = 0;
  if ((v1 & 0x4000000) == 0)
    goto LABEL_125;
LABEL_53:
  v30 = *((float *)this + 31);
  v31 = LODWORD(v30);
  if (v30 == 0.0)
    v31 = 0;
  if ((v1 & 0x8000000) == 0)
    goto LABEL_126;
LABEL_56:
  v32 = *((float *)this + 32);
  v33 = LODWORD(v32);
  if (v32 == 0.0)
    v33 = 0;
  if ((v1 & 0x10000000) == 0)
    goto LABEL_127;
LABEL_59:
  v34 = *((float *)this + 33);
  v35 = LODWORD(v34);
  if (v34 == 0.0)
    v35 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_128;
LABEL_62:
  v36 = *((float *)this + 11);
  v37 = LODWORD(v36);
  if (v36 == 0.0)
    v37 = 0;
  if ((v1 & 0x100) == 0)
    goto LABEL_129;
LABEL_65:
  v38 = *((float *)this + 13);
  v39 = LODWORD(v38);
  if (v38 == 0.0)
    v39 = 0;
  if ((v1 & 0x200) == 0)
    goto LABEL_130;
LABEL_68:
  v40 = *((float *)this + 14);
  v41 = LODWORD(v40);
  if (v40 == 0.0)
    v41 = 0;
  if ((v1 & 0x400000) == 0)
    goto LABEL_131;
LABEL_71:
  v42 = *((float *)this + 27);
  v43 = LODWORD(v42);
  if (v42 == 0.0)
    v43 = 0;
  if ((v1 & 0x800000) == 0)
    goto LABEL_132;
LABEL_74:
  v44 = *((float *)this + 28);
  v45 = LODWORD(v44);
  if (v44 == 0.0)
    v45 = 0;
  if ((v1 & 0x1000000) == 0)
    goto LABEL_133;
LABEL_77:
  v46 = *((float *)this + 29);
  v47 = LODWORD(v46);
  if (v46 == 0.0)
    v47 = 0;
  if ((v1 & 0x40000000) == 0)
    goto LABEL_134;
LABEL_80:
  v48 = *((float *)this + 35);
  v49 = LODWORD(v48);
  if (v48 == 0.0)
    v49 = 0;
  if ((v1 & 0x80000000) != 0)
  {
LABEL_83:
    v50 = *((float *)this + 36);
    v51 = LODWORD(v50);
    if (v50 == 0.0)
      v51 = 0;
    if ((v1 & 0x100000000) != 0)
      goto LABEL_86;
LABEL_136:
    v53 = 0;
    return *(_QWORD *)&v72 ^ v2 ^ v71 ^ v70 ^ v69 ^ v68 ^ v67 ^ v66 ^ v65 ^ v64 ^ *(_QWORD *)&v63 ^ v62 ^ v61 ^ v60 ^ v59 ^ v58 ^ v57 ^ v56 ^ v55 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v22 ^ v23 ^ v25 ^ v26 ^ v27 ^ v29 ^ v31 ^ v33 ^ v35 ^ v37 ^ v39 ^ v41 ^ v43 ^ v45 ^ v47 ^ v49 ^ v51 ^ v53;
  }
LABEL_135:
  v51 = 0;
  if ((v1 & 0x100000000) == 0)
    goto LABEL_136;
LABEL_86:
  v52 = *((float *)this + 37);
  v53 = LODWORD(v52);
  if (v52 == 0.0)
    v53 = 0;
  return *(_QWORD *)&v72 ^ v2 ^ v71 ^ v70 ^ v69 ^ v68 ^ v67 ^ v66 ^ v65 ^ v64 ^ *(_QWORD *)&v63 ^ v62 ^ v61 ^ v60 ^ v59 ^ v58 ^ v57 ^ v56 ^ v55 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v22 ^ v23 ^ v25 ^ v26 ^ v27 ^ v29 ^ v31 ^ v33 ^ v35 ^ v37 ^ v39 ^ v41 ^ v43 ^ v45 ^ v47 ^ v49 ^ v51 ^ v53;
}

void CMMsl::MobilitySmoothedGaitMetrics::~MobilitySmoothedGaitMetrics(CMMsl::MobilitySmoothedGaitMetrics *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::MobilitySmoothedGaitMetrics::MobilitySmoothedGaitMetrics(CMMsl::MobilitySmoothedGaitMetrics *this, const CMMsl::MobilitySmoothedGaitMetrics *a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)this = off_100352AC8;
  *((_DWORD *)this + 10) = 0;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 40) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 40) & 0x40) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 9);
    v3 |= 0x40u;
    *((_BYTE *)this + 40) = v3;
    *((_DWORD *)this + 9) = v4;
    v2 = *((_BYTE *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 8);
    v3 |= 0x20u;
    *((_BYTE *)this + 40) = v3;
    *((_DWORD *)this + 8) = v4;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *((_BYTE *)this + 40) = v3;
  *((_DWORD *)this + 6) = v4;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  LODWORD(v4) = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *((_BYTE *)this + 40) = v3;
  *((_DWORD *)this + 5) = v4;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0)
      return *(float *)&v4;
    goto LABEL_16;
  }
LABEL_15:
  LODWORD(v4) = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *((_BYTE *)this + 40) = v3;
  *((_DWORD *)this + 7) = v4;
  if ((*((_BYTE *)a2 + 40) & 2) == 0)
    return *(float *)&v4;
LABEL_16:
  LODWORD(v4) = *((_DWORD *)a2 + 4);
  *((_BYTE *)this + 40) = v3 | 2;
  *((_DWORD *)this + 4) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::MobilitySmoothedGaitMetrics::operator=(uint64_t a1, const CMMsl::MobilitySmoothedGaitMetrics *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;

  if ((const CMMsl::MobilitySmoothedGaitMetrics *)a1 != a2)
  {
    CMMsl::MobilitySmoothedGaitMetrics::MobilitySmoothedGaitMetrics((CMMsl::MobilitySmoothedGaitMetrics *)&v8, a2);
    v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    v12 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v11;
    v11 = v5;
    v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    v10 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::MobilitySmoothedGaitMetrics *a2, CMMsl::MobilitySmoothedGaitMetrics *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

float CMMsl::MobilitySmoothedGaitMetrics::MobilitySmoothedGaitMetrics(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100352AC8;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_100352AC8;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::MobilitySmoothedGaitMetrics::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _QWORD v10[2];
  __int128 v11;
  uint64_t v12;
  int v13;

  if (a1 != a2)
  {
    v10[0] = off_100352AC8;
    v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v13 = *(_DWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v10[1] = v5;
    v12 = *(_QWORD *)(a1 + 32);
    v6 = *(_OWORD *)(a1 + 16);
    v7 = *(_OWORD *)(a2 + 16);
    v8 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 40) = v3;
    *(_QWORD *)(a1 + 32) = v8;
    *(_OWORD *)(a1 + 16) = v7;
    v11 = v6;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::MobilitySmoothedGaitMetrics::formatText(CMMsl::MobilitySmoothedGaitMetrics *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "asymmetryProbability", *((float *)this + 4));
    v5 = *((_BYTE *)this + 40);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*((_BYTE *)this + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "cycleTime", *((float *)this + 5));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "distance", *((float *)this + 6));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "doubleSupportPercentage", *((float *)this + 7));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(a2, "stepLength", *((float *)this + 8));
    if ((*((_BYTE *)this + 40) & 0x40) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 1));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 0x20) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 0x40) != 0)
LABEL_8:
    PB::TextFormatter::format(a2, "walkingSpeed", *((float *)this + 9));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MobilitySmoothedGaitMetrics::readFrom(CMMsl::MobilitySmoothedGaitMetrics *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 40) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_44;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_47;
        case 2u:
          *((_BYTE *)this + 40) |= 0x40u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_44;
          *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_46;
        case 3u:
          *((_BYTE *)this + 40) |= 0x20u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_44;
          *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_46;
        case 4u:
          *((_BYTE *)this + 40) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_44;
          *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_46;
        case 5u:
          *((_BYTE *)this + 40) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_44;
          *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_46;
        case 6u:
          *((_BYTE *)this + 40) |= 0x10u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_44;
          *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_46;
        case 7u:
          *((_BYTE *)this + 40) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_46:
            v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_47:
            *((_QWORD *)a2 + 1) = v2;
          }
          else
          {
LABEL_44:
            *((_BYTE *)a2 + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MobilitySmoothedGaitMetrics::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 40);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(this + 40) & 0x40) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 2u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 3u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 4u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 5u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 16), 7u);
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 6u);
  if ((*(_BYTE *)(v3 + 40) & 2) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 16), 7u);
  return this;
}

uint64_t CMMsl::MobilitySmoothedGaitMetrics::hash_value(CMMsl::MobilitySmoothedGaitMetrics *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;

  if ((*((_BYTE *)this + 40) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 40) & 0x40) != 0)
      goto LABEL_3;
LABEL_24:
    v3 = 0;
    if ((*((_BYTE *)this + 40) & 0x20) != 0)
      goto LABEL_6;
LABEL_25:
    v5 = 0;
    if ((*((_BYTE *)this + 40) & 8) != 0)
      goto LABEL_9;
LABEL_26:
    v7 = 0;
    if ((*((_BYTE *)this + 40) & 4) != 0)
      goto LABEL_12;
LABEL_27:
    v9 = 0;
    if ((*((_BYTE *)this + 40) & 0x10) != 0)
      goto LABEL_15;
    goto LABEL_28;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 40) & 0x40) == 0)
    goto LABEL_24;
LABEL_3:
  v2 = *((float *)this + 9);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 40) & 0x20) == 0)
    goto LABEL_25;
LABEL_6:
  v4 = *((float *)this + 8);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((*((_BYTE *)this + 40) & 8) == 0)
    goto LABEL_26;
LABEL_9:
  v6 = *((float *)this + 6);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((*((_BYTE *)this + 40) & 4) == 0)
    goto LABEL_27;
LABEL_12:
  v8 = *((float *)this + 5);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  if ((*((_BYTE *)this + 40) & 0x10) != 0)
  {
LABEL_15:
    v10 = *((float *)this + 7);
    v11 = LODWORD(v10);
    if (v10 == 0.0)
      v11 = 0;
    if ((*((_BYTE *)this + 40) & 2) != 0)
      goto LABEL_18;
LABEL_29:
    v13 = 0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13;
  }
LABEL_28:
  v11 = 0;
  if ((*((_BYTE *)this + 40) & 2) == 0)
    goto LABEL_29;
LABEL_18:
  v12 = *((float *)this + 4);
  v13 = LODWORD(v12);
  if (v12 == 0.0)
    v13 = 0;
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13;
}

void CMMsl::ModelBasedBioMotionClassification::~ModelBasedBioMotionClassification(CMMsl::ModelBasedBioMotionClassification *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100352B00;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100352B00;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100352B00;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::ModelBasedBioMotionClassification::ModelBasedBioMotionClassification(_QWORD *this, const CMMsl::ModelBasedBioMotionClassification *a2)
{
  *this = off_100352B00;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::ModelBasedBioMotionClassification *CMMsl::ModelBasedBioMotionClassification::operator=(const CMMsl::ModelBasedBioMotionClassification *a1, const CMMsl::ModelBasedBioMotionClassification *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::ModelBasedBioMotionClassification *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::ModelBasedBioMotionClassification::ModelBasedBioMotionClassification(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_100352B00;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::ModelBasedBioMotionClassification *a2, CMMsl::ModelBasedBioMotionClassification *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::ModelBasedBioMotionClassification::ModelBasedBioMotionClassification(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100352B00;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100352B00;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::ModelBasedBioMotionClassification::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_100352B00;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::ModelBasedBioMotionClassification::formatText(CMMsl::ModelBasedBioMotionClassification *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ModelBasedBioMotionClassification::readFrom(CMMsl::ModelBasedBioMotionClassification *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::ModelBasedBioMotionClassification::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

CMMsl::BioMotionClassification *CMMsl::ModelBasedBioMotionClassification::hash_value(CMMsl::ModelBasedBioMotionClassification *this)
{
  CMMsl::BioMotionClassification *result;

  result = (CMMsl::BioMotionClassification *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::BioMotionClassification *)CMMsl::BioMotionClassification::hash_value(result);
  return result;
}

uint64_t CMMsl::ModelBasedBioMotionClassification::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

void CMMsl::MotionActivity::~MotionActivity(CMMsl::MotionActivity *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::MotionActivity::MotionActivity(uint64_t this, const CMMsl::MotionActivity *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  char v8;
  int v9;
  uint64_t v10;
  char v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;

  *(_QWORD *)this = off_100352B38;
  *(_DWORD *)(this + 116) = 0;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x10000) != 0)
  {
    v4 = *((_DWORD *)a2 + 23);
    v3 = 0x10000;
    *(_DWORD *)(this + 116) = 0x10000;
    *(_DWORD *)(this + 92) = v4;
    v2 = *((_DWORD *)a2 + 29);
    if ((v2 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x200) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 16);
    v3 |= 0x200u;
    *(_DWORD *)(this + 116) = v3;
    *(_DWORD *)(this + 64) = v5;
    v2 = *((_DWORD *)a2 + 29);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    v6 = *((_DWORD *)a2 + 12);
    v3 |= 0x20u;
    *(_DWORD *)(this + 116) = v3;
    *(_DWORD *)(this + 48) = v6;
    v2 = *((_DWORD *)a2 + 29);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x100000) == 0)
        goto LABEL_9;
      goto LABEL_34;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 17);
  v3 |= 0x400u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 68) = v7;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x100000) == 0)
  {
LABEL_9:
    if ((v2 & 0x8000) == 0)
      goto LABEL_10;
    goto LABEL_35;
  }
LABEL_34:
  v8 = *((_BYTE *)a2 + 108);
  v3 |= 0x100000u;
  *(_DWORD *)(this + 116) = v3;
  *(_BYTE *)(this + 108) = v8;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x8000) == 0)
  {
LABEL_10:
    if ((v2 & 4) == 0)
      goto LABEL_11;
    goto LABEL_36;
  }
LABEL_35:
  v9 = *((_DWORD *)a2 + 22);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 88) = v9;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 4) == 0)
  {
LABEL_11:
    if ((v2 & 0x200000) == 0)
      goto LABEL_12;
    goto LABEL_37;
  }
LABEL_36:
  v10 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *(_DWORD *)(this + 116) = v3;
  *(_QWORD *)(this + 24) = v10;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x200000) == 0)
  {
LABEL_12:
    if ((v2 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_38;
  }
LABEL_37:
  v11 = *((_BYTE *)a2 + 109);
  v3 |= 0x200000u;
  *(_DWORD *)(this + 116) = v3;
  *(_BYTE *)(this + 109) = v11;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x100) == 0)
  {
LABEL_13:
    if ((v2 & 1) == 0)
      goto LABEL_14;
    goto LABEL_39;
  }
LABEL_38:
  v12 = *((_DWORD *)a2 + 15);
  v3 |= 0x100u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 60) = v12;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 1) == 0)
  {
LABEL_14:
    if ((v2 & 2) == 0)
      goto LABEL_15;
    goto LABEL_40;
  }
LABEL_39:
  v13 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 116) = v3;
  *(_QWORD *)(this + 8) = v13;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 2) == 0)
  {
LABEL_15:
    if ((v2 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_41;
  }
LABEL_40:
  v14 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 116) = v3;
  *(_QWORD *)(this + 16) = v14;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x1000) == 0)
  {
LABEL_16:
    if ((v2 & 0x800) == 0)
      goto LABEL_17;
    goto LABEL_42;
  }
LABEL_41:
  v15 = *((_DWORD *)a2 + 19);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 76) = v15;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x800) == 0)
  {
LABEL_17:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_18;
    goto LABEL_43;
  }
LABEL_42:
  v16 = *((_DWORD *)a2 + 18);
  v3 |= 0x800u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 72) = v16;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_19;
    goto LABEL_44;
  }
LABEL_43:
  v17 = *((_BYTE *)a2 + 113);
  v3 |= 0x2000000u;
  *(_DWORD *)(this + 116) = v3;
  *(_BYTE *)(this + 113) = v17;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x400000) == 0)
      goto LABEL_20;
    goto LABEL_45;
  }
LABEL_44:
  v18 = *((_BYTE *)a2 + 112);
  v3 |= 0x1000000u;
  *(_DWORD *)(this + 116) = v3;
  *(_BYTE *)(this + 112) = v18;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x400000) == 0)
  {
LABEL_20:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_21;
    goto LABEL_46;
  }
LABEL_45:
  v19 = *((_BYTE *)a2 + 110);
  v3 |= 0x400000u;
  *(_DWORD *)(this + 116) = v3;
  *(_BYTE *)(this + 110) = v19;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_21:
    if ((v2 & 0x800000) == 0)
      goto LABEL_22;
    goto LABEL_47;
  }
LABEL_46:
  v20 = *((_BYTE *)a2 + 114);
  v3 |= 0x4000000u;
  *(_DWORD *)(this + 116) = v3;
  *(_BYTE *)(this + 114) = v20;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x800000) == 0)
  {
LABEL_22:
    if ((v2 & 0x40000) == 0)
      goto LABEL_23;
    goto LABEL_48;
  }
LABEL_47:
  v21 = *((_BYTE *)a2 + 111);
  v3 |= 0x800000u;
  *(_DWORD *)(this + 116) = v3;
  *(_BYTE *)(this + 111) = v21;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x40000) == 0)
  {
LABEL_23:
    if ((v2 & 0x80) == 0)
      goto LABEL_24;
    goto LABEL_49;
  }
LABEL_48:
  v22 = *((_DWORD *)a2 + 25);
  v3 |= 0x40000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 100) = v22;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x80) == 0)
  {
LABEL_24:
    if ((v2 & 0x40) == 0)
      goto LABEL_25;
    goto LABEL_50;
  }
LABEL_49:
  v23 = *((_DWORD *)a2 + 14);
  v3 |= 0x80u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 56) = v23;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x40) == 0)
  {
LABEL_25:
    if ((v2 & 0x4000) == 0)
      goto LABEL_26;
    goto LABEL_51;
  }
LABEL_50:
  v24 = *((_DWORD *)a2 + 13);
  v3 |= 0x40u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 52) = v24;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x4000) == 0)
  {
LABEL_26:
    if ((v2 & 0x80000) == 0)
      goto LABEL_27;
    goto LABEL_52;
  }
LABEL_51:
  v25 = *((_DWORD *)a2 + 21);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 84) = v25;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x80000) == 0)
  {
LABEL_27:
    if ((v2 & 8) == 0)
      goto LABEL_28;
    goto LABEL_53;
  }
LABEL_52:
  v26 = *((_DWORD *)a2 + 26);
  v3 |= 0x80000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 104) = v26;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 8) == 0)
  {
LABEL_28:
    if ((v2 & 0x10) == 0)
      goto LABEL_29;
    goto LABEL_54;
  }
LABEL_53:
  v27 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_DWORD *)(this + 116) = v3;
  *(_QWORD *)(this + 32) = v27;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x10) == 0)
  {
LABEL_29:
    if ((v2 & 0x20000) == 0)
      goto LABEL_30;
    goto LABEL_55;
  }
LABEL_54:
  v28 = *((_QWORD *)a2 + 5);
  v3 |= 0x10u;
  *(_DWORD *)(this + 116) = v3;
  *(_QWORD *)(this + 40) = v28;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x20000) == 0)
  {
LABEL_30:
    if ((v2 & 0x2000) == 0)
      return this;
LABEL_56:
    v30 = *((_DWORD *)a2 + 20);
    *(_DWORD *)(this + 116) = v3 | 0x2000;
    *(_DWORD *)(this + 80) = v30;
    return this;
  }
LABEL_55:
  v29 = *((_DWORD *)a2 + 24);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 96) = v29;
  if ((*((_DWORD *)a2 + 29) & 0x2000) != 0)
    goto LABEL_56;
  return this;
}

CMMsl *CMMsl::MotionActivity::operator=(CMMsl *a1, const CMMsl::MotionActivity *a2)
{
  CMMsl::MotionActivity *v3;
  _BYTE v5[120];

  if (a1 != a2)
  {
    CMMsl::MotionActivity::MotionActivity((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::MotionActivity *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::MotionActivity *a2, CMMsl::MotionActivity *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  double result;
  uint64_t v18;

  v3 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v3;
  v4 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v4;
  v5 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v5;
  v6 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v6;
  v7 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 108);
  *((_BYTE *)this + 108) = *((_BYTE *)a2 + 108);
  *((_BYTE *)a2 + 108) = v7;
  v8 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v8;
  v9 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v9;
  LOBYTE(v7) = *((_BYTE *)this + 109);
  *((_BYTE *)this + 109) = *((_BYTE *)a2 + 109);
  *((_BYTE *)a2 + 109) = v7;
  v10 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v10;
  v11 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v11;
  v12 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v12;
  v13 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v13;
  v14 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v14;
  LOBYTE(v14) = *((_BYTE *)this + 113);
  *((_BYTE *)this + 113) = *((_BYTE *)a2 + 113);
  *((_BYTE *)a2 + 113) = v14;
  LOBYTE(v14) = *((_BYTE *)this + 112);
  *((_BYTE *)this + 112) = *((_BYTE *)a2 + 112);
  *((_BYTE *)a2 + 112) = v14;
  LOBYTE(v14) = *((_BYTE *)this + 110);
  *((_BYTE *)this + 110) = *((_BYTE *)a2 + 110);
  *((_BYTE *)a2 + 110) = v14;
  LOBYTE(v14) = *((_BYTE *)this + 114);
  *((_BYTE *)this + 114) = *((_BYTE *)a2 + 114);
  *((_BYTE *)a2 + 114) = v14;
  LOBYTE(v14) = *((_BYTE *)this + 111);
  *((_BYTE *)this + 111) = *((_BYTE *)a2 + 111);
  *((_BYTE *)a2 + 111) = v14;
  v15 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v15;
  LODWORD(v12) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v12;
  LODWORD(v12) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v12;
  LODWORD(v12) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v12;
  v16 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v16;
  result = *((double *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((double *)a2 + 4) = result;
  v18 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v18;
  LODWORD(v18) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v18;
  LODWORD(v18) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v18;
  return result;
}

double CMMsl::MotionActivity::MotionActivity(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100352B38;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a2 + 116) = 0;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 109) = *(_BYTE *)(a2 + 109);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_BYTE *)(a1 + 110) = *(_BYTE *)(a2 + 110);
  *(_BYTE *)(a1 + 114) = *(_BYTE *)(a2 + 114);
  *(_BYTE *)(a1 + 111) = *(_BYTE *)(a2 + 111);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  return result;
}

CMMsl *CMMsl::MotionActivity::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::MotionActivity *v3;
  _BYTE v5[120];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::MotionActivity::MotionActivity((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::MotionActivity *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::MotionActivity::formatText(CMMsl::MotionActivity *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(a2, "confidence", *((_DWORD *)this + 12));
    v5 = *((_DWORD *)this + 29);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_32;
    }
  }
  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "drivingArmLikelihoodSum", *((float *)this + 13));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0)
      goto LABEL_5;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "drivingStowedLikelihoodSum", *((float *)this + 14));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "estExitTime", *((double *)this + 1));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 0x100000) == 0)
      goto LABEL_7;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "exitState", *((_DWORD *)this + 15));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x100000) == 0)
  {
LABEL_7:
    if ((v5 & 0x200000) == 0)
      goto LABEL_8;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "isStanding", *((_BYTE *)this + 108));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x200000) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "isVehicleConnected", *((_BYTE *)this + 109));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "mountedConfidence", *((_DWORD *)this + 16));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "mountedState", *((_DWORD *)this + 17));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "rawConfidence", *((_DWORD *)this + 18));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "rawType", *((_DWORD *)this + 19));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 0x4000) == 0)
      goto LABEL_14;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "source", *((_DWORD *)this + 20));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x4000) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0)
      goto LABEL_15;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "ssLikelihoodSum", *((float *)this + 21));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 2));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 4) == 0)
      goto LABEL_17;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "tilt", *((float *)this + 22));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 4) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 3));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "type", *((_DWORD *)this + 23));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x400000) == 0)
      goto LABEL_20;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "typeYouth", *((_DWORD *)this + 24));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x400000) == 0)
  {
LABEL_20:
    if ((v5 & 0x800000) == 0)
      goto LABEL_21;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "vehicularBasebandHint", *((_BYTE *)this + 110));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x800000) == 0)
  {
LABEL_21:
    if ((v5 & 0x40000) == 0)
      goto LABEL_22;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "vehicularBtHint", *((_BYTE *)this + 111));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x40000) == 0)
  {
LABEL_22:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_23;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "vehicularConfidence", *((_DWORD *)this + 25));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_24;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "vehicularGpsHint", *((_BYTE *)this + 112));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_24:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_25;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "vehicularMotionHint", *((_BYTE *)this + 113));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_25:
    if ((v5 & 8) == 0)
      goto LABEL_26;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "vehicularWifiHint", *((_BYTE *)this + 114));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 8) == 0)
  {
LABEL_26:
    if ((v5 & 0x80000) == 0)
      goto LABEL_27;
LABEL_55:
    PB::TextFormatter::format(a2, "workoutDetectionType", *((_DWORD *)this + 26));
    if ((*((_DWORD *)this + 29) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_28;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "workoutDetectionTime", *((double *)this + 4));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x80000) != 0)
    goto LABEL_55;
LABEL_27:
  if ((v5 & 0x10) != 0)
LABEL_28:
    PB::TextFormatter::format(a2, "workoutEscalationTime", *((_QWORD *)this + 5));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MotionActivity::readFrom(CMMsl::MotionActivity *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t result;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  BOOL v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  int v61;
  BOOL v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char v76;
  unsigned int v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char v84;
  unsigned int v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  unint64_t v89;
  unint64_t v90;
  int v91;
  BOOL v92;
  unint64_t v93;
  unint64_t v94;
  int v95;
  BOOL v96;
  unint64_t v97;
  unint64_t v98;
  int v99;
  BOOL v100;
  unint64_t v101;
  unint64_t v102;
  int v103;
  BOOL v104;
  unint64_t v105;
  unint64_t v106;
  int v107;
  BOOL v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char v112;
  unsigned int v113;
  uint64_t v114;
  unint64_t v115;
  char v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  char v124;
  unsigned int v125;
  uint64_t v126;
  unint64_t v127;
  char v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  char v133;
  unsigned int v134;
  uint64_t v135;
  unint64_t v136;
  char v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  char v141;
  unsigned int v142;
  uint64_t v143;
  unint64_t v144;
  char v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  char v149;
  unsigned int v150;
  uint64_t v151;
  unint64_t v152;
  char v153;
  char v154;
  unsigned int v155;
  unint64_t v156;
  char v157;
  char v158;
  unsigned int v159;
  unint64_t v160;
  char v161;
  char v162;
  unsigned int v163;
  unint64_t v164;
  char v165;
  char v166;
  unsigned int v167;
  unint64_t v168;
  char v169;
  char v170;
  unsigned int v171;
  unint64_t v172;
  char v173;
  char v174;
  unsigned int v175;
  unint64_t v176;
  char v177;
  char v178;
  unsigned int v179;
  unint64_t v180;
  char v181;
  char v182;
  unsigned int v183;
  unint64_t v184;
  char v185;
  char v186;
  unsigned int v187;
  unint64_t v188;
  char v189;
  char v190;
  unsigned int v191;
  unint64_t v192;
  char v193;
  char v194;
  unsigned int v195;
  unint64_t v196;
  char v197;
  char v198;
  unsigned int v199;
  unint64_t v200;
  char v201;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_DWORD *)this + 29) |= 0x10000u;
          v20 = *((_QWORD *)a2 + 1);
          v21 = *((_QWORD *)a2 + 2);
          v22 = *(_QWORD *)a2;
          if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v21)
          {
            v154 = 0;
            v155 = 0;
            v25 = 0;
            if (v21 <= v20)
              v21 = *((_QWORD *)a2 + 1);
            do
            {
              if (v21 == v20)
              {
                LODWORD(v25) = 0;
                *((_BYTE *)a2 + 24) = 1;
                goto LABEL_251;
              }
              v156 = v20 + 1;
              v157 = *(_BYTE *)(v22 + v20);
              *((_QWORD *)a2 + 1) = v156;
              v25 |= (unint64_t)(v157 & 0x7F) << v154;
              if ((v157 & 0x80) == 0)
              {
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_251;
              }
              v154 += 7;
              v20 = v156;
              v14 = v155++ > 8;
            }
            while (!v14);
LABEL_153:
            LODWORD(v25) = 0;
          }
          else
          {
            v23 = 0;
            v24 = 0;
            v25 = 0;
            while (1)
            {
              v26 = v20 + 1;
              *((_QWORD *)a2 + 1) = v20 + 1;
              v27 = *(_BYTE *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0)
                break;
              v23 += 7;
              v20 = v26;
              v14 = v24++ > 8;
              if (v14)
                goto LABEL_153;
            }
          }
LABEL_251:
          *((_DWORD *)this + 23) = v25;
          goto LABEL_296;
        case 2u:
          *((_DWORD *)this + 29) |= 0x200u;
          v29 = *((_QWORD *)a2 + 1);
          v30 = *((_QWORD *)a2 + 2);
          v31 = *(_QWORD *)a2;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            v32 = 0;
            v33 = 0;
            v34 = 0;
            do
            {
              v35 = v29 + 1;
              *((_QWORD *)a2 + 1) = v29 + 1;
              v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0)
                goto LABEL_255;
              v32 += 7;
              v29 = v35;
              v14 = v33++ > 8;
            }
            while (!v14);
LABEL_160:
            LODWORD(v34) = 0;
            goto LABEL_255;
          }
          v158 = 0;
          v159 = 0;
          v34 = 0;
          if (v30 <= v29)
            v30 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v160 = v29 + 1;
              v161 = *(_BYTE *)(v31 + v29);
              *((_QWORD *)a2 + 1) = v160;
              v34 |= (unint64_t)(v161 & 0x7F) << v158;
              if (v161 < 0)
              {
                v158 += 7;
                v29 = v160;
                v14 = v159++ > 8;
                if (v14)
                  goto LABEL_160;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v34) = 0;
            }
            break;
          }
LABEL_255:
          *((_DWORD *)this + 16) = v34;
          goto LABEL_296;
        case 3u:
          *((_DWORD *)this + 29) |= 0x20u;
          v37 = *((_QWORD *)a2 + 1);
          v38 = *((_QWORD *)a2 + 2);
          v39 = *(_QWORD *)a2;
          if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
          {
            v40 = 0;
            v41 = 0;
            v42 = 0;
            do
            {
              v43 = v37 + 1;
              *((_QWORD *)a2 + 1) = v37 + 1;
              v44 = *(_BYTE *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0)
                goto LABEL_259;
              v40 += 7;
              v37 = v43;
              v14 = v41++ > 8;
            }
            while (!v14);
LABEL_167:
            LODWORD(v42) = 0;
            goto LABEL_259;
          }
          v162 = 0;
          v163 = 0;
          v42 = 0;
          if (v38 <= v37)
            v38 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v38 == v37)
            {
              LODWORD(v42) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v164 = v37 + 1;
              v165 = *(_BYTE *)(v39 + v37);
              *((_QWORD *)a2 + 1) = v164;
              v42 |= (unint64_t)(v165 & 0x7F) << v162;
              if (v165 < 0)
              {
                v162 += 7;
                v37 = v164;
                v14 = v163++ > 8;
                if (v14)
                  goto LABEL_167;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v42) = 0;
            }
            break;
          }
LABEL_259:
          *((_DWORD *)this + 12) = v42;
          goto LABEL_296;
        case 4u:
          *((_DWORD *)this + 29) |= 0x400u;
          v45 = *((_QWORD *)a2 + 1);
          v46 = *((_QWORD *)a2 + 2);
          v47 = *(_QWORD *)a2;
          if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
          {
            v48 = 0;
            v49 = 0;
            v50 = 0;
            do
            {
              v51 = v45 + 1;
              *((_QWORD *)a2 + 1) = v45 + 1;
              v52 = *(_BYTE *)(v47 + v45);
              v50 |= (unint64_t)(v52 & 0x7F) << v48;
              if ((v52 & 0x80) == 0)
                goto LABEL_263;
              v48 += 7;
              v45 = v51;
              v14 = v49++ > 8;
            }
            while (!v14);
LABEL_174:
            LODWORD(v50) = 0;
            goto LABEL_263;
          }
          v166 = 0;
          v167 = 0;
          v50 = 0;
          if (v46 <= v45)
            v46 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v46 == v45)
            {
              LODWORD(v50) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v168 = v45 + 1;
              v169 = *(_BYTE *)(v47 + v45);
              *((_QWORD *)a2 + 1) = v168;
              v50 |= (unint64_t)(v169 & 0x7F) << v166;
              if (v169 < 0)
              {
                v166 += 7;
                v45 = v168;
                v14 = v167++ > 8;
                if (v14)
                  goto LABEL_174;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v50) = 0;
            }
            break;
          }
LABEL_263:
          *((_DWORD *)this + 17) = v50;
          goto LABEL_296;
        case 5u:
          *((_DWORD *)this + 29) |= 0x100000u;
          v53 = *((_QWORD *)a2 + 1);
          if (v53 >= *((_QWORD *)a2 + 2))
          {
            v56 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v54 = v53 + 1;
            v55 = *(unsigned __int8 *)(*(_QWORD *)a2 + v53);
            *((_QWORD *)a2 + 1) = v54;
            v56 = v55 != 0;
          }
          *((_BYTE *)this + 108) = v56;
          goto LABEL_296;
        case 6u:
          *((_DWORD *)this + 29) |= 0x8000u;
          v57 = *((_QWORD *)a2 + 1);
          if (v57 > 0xFFFFFFFFFFFFFFFBLL || v57 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_125;
          *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v57);
          goto LABEL_115;
        case 7u:
          *((_DWORD *)this + 29) |= 4u;
          v58 = *((_QWORD *)a2 + 1);
          if (v58 > 0xFFFFFFFFFFFFFFF7 || v58 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_125;
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v58);
          goto LABEL_246;
        case 8u:
          *((_DWORD *)this + 29) |= 0x200000u;
          v59 = *((_QWORD *)a2 + 1);
          if (v59 >= *((_QWORD *)a2 + 2))
          {
            v62 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v60 = v59 + 1;
            v61 = *(unsigned __int8 *)(*(_QWORD *)a2 + v59);
            *((_QWORD *)a2 + 1) = v60;
            v62 = v61 != 0;
          }
          *((_BYTE *)this + 109) = v62;
          goto LABEL_296;
        case 9u:
          *((_DWORD *)this + 29) |= 0x100u;
          v63 = *((_QWORD *)a2 + 1);
          v64 = *((_QWORD *)a2 + 2);
          v65 = *(_QWORD *)a2;
          if (v63 <= 0xFFFFFFFFFFFFFFF5 && v63 + 10 <= v64)
          {
            v66 = 0;
            v67 = 0;
            v68 = 0;
            do
            {
              v69 = v63 + 1;
              *((_QWORD *)a2 + 1) = v63 + 1;
              v70 = *(_BYTE *)(v65 + v63);
              v68 |= (unint64_t)(v70 & 0x7F) << v66;
              if ((v70 & 0x80) == 0)
                goto LABEL_267;
              v66 += 7;
              v63 = v69;
              v14 = v67++ > 8;
            }
            while (!v14);
LABEL_185:
            LODWORD(v68) = 0;
            goto LABEL_267;
          }
          v170 = 0;
          v171 = 0;
          v68 = 0;
          if (v64 <= v63)
            v64 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v64 == v63)
            {
              LODWORD(v68) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v172 = v63 + 1;
              v173 = *(_BYTE *)(v65 + v63);
              *((_QWORD *)a2 + 1) = v172;
              v68 |= (unint64_t)(v173 & 0x7F) << v170;
              if (v173 < 0)
              {
                v170 += 7;
                v63 = v172;
                v14 = v171++ > 8;
                if (v14)
                  goto LABEL_185;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v68) = 0;
            }
            break;
          }
LABEL_267:
          *((_DWORD *)this + 15) = v68;
          goto LABEL_296;
        case 0xAu:
          *((_DWORD *)this + 29) |= 1u;
          v71 = *((_QWORD *)a2 + 1);
          if (v71 > 0xFFFFFFFFFFFFFFF7 || v71 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_125;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v71);
          goto LABEL_246;
        case 0xBu:
          *((_DWORD *)this + 29) |= 2u;
          v72 = *((_QWORD *)a2 + 1);
          if (v72 > 0xFFFFFFFFFFFFFFF7 || v72 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_125;
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v72);
          goto LABEL_246;
        case 0xCu:
          *((_DWORD *)this + 29) |= 0x1000u;
          v73 = *((_QWORD *)a2 + 1);
          v74 = *((_QWORD *)a2 + 2);
          v75 = *(_QWORD *)a2;
          if (v73 <= 0xFFFFFFFFFFFFFFF5 && v73 + 10 <= v74)
          {
            v76 = 0;
            v77 = 0;
            v78 = 0;
            do
            {
              v79 = v73 + 1;
              *((_QWORD *)a2 + 1) = v73 + 1;
              v80 = *(_BYTE *)(v75 + v73);
              v78 |= (unint64_t)(v80 & 0x7F) << v76;
              if ((v80 & 0x80) == 0)
                goto LABEL_271;
              v76 += 7;
              v73 = v79;
              v14 = v77++ > 8;
            }
            while (!v14);
LABEL_192:
            LODWORD(v78) = 0;
            goto LABEL_271;
          }
          v174 = 0;
          v175 = 0;
          v78 = 0;
          if (v74 <= v73)
            v74 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v74 == v73)
            {
              LODWORD(v78) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v176 = v73 + 1;
              v177 = *(_BYTE *)(v75 + v73);
              *((_QWORD *)a2 + 1) = v176;
              v78 |= (unint64_t)(v177 & 0x7F) << v174;
              if (v177 < 0)
              {
                v174 += 7;
                v73 = v176;
                v14 = v175++ > 8;
                if (v14)
                  goto LABEL_192;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v78) = 0;
            }
            break;
          }
LABEL_271:
          *((_DWORD *)this + 19) = v78;
          goto LABEL_296;
        case 0xDu:
          *((_DWORD *)this + 29) |= 0x800u;
          v81 = *((_QWORD *)a2 + 1);
          v82 = *((_QWORD *)a2 + 2);
          v83 = *(_QWORD *)a2;
          if (v81 <= 0xFFFFFFFFFFFFFFF5 && v81 + 10 <= v82)
          {
            v84 = 0;
            v85 = 0;
            v86 = 0;
            do
            {
              v87 = v81 + 1;
              *((_QWORD *)a2 + 1) = v81 + 1;
              v88 = *(_BYTE *)(v83 + v81);
              v86 |= (unint64_t)(v88 & 0x7F) << v84;
              if ((v88 & 0x80) == 0)
                goto LABEL_275;
              v84 += 7;
              v81 = v87;
              v14 = v85++ > 8;
            }
            while (!v14);
LABEL_199:
            LODWORD(v86) = 0;
            goto LABEL_275;
          }
          v178 = 0;
          v179 = 0;
          v86 = 0;
          if (v82 <= v81)
            v82 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v82 == v81)
            {
              LODWORD(v86) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v180 = v81 + 1;
              v181 = *(_BYTE *)(v83 + v81);
              *((_QWORD *)a2 + 1) = v180;
              v86 |= (unint64_t)(v181 & 0x7F) << v178;
              if (v181 < 0)
              {
                v178 += 7;
                v81 = v180;
                v14 = v179++ > 8;
                if (v14)
                  goto LABEL_199;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v86) = 0;
            }
            break;
          }
LABEL_275:
          *((_DWORD *)this + 18) = v86;
          goto LABEL_296;
        case 0xEu:
          *((_DWORD *)this + 29) |= 0x2000000u;
          v89 = *((_QWORD *)a2 + 1);
          if (v89 >= *((_QWORD *)a2 + 2))
          {
            v92 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v90 = v89 + 1;
            v91 = *(unsigned __int8 *)(*(_QWORD *)a2 + v89);
            *((_QWORD *)a2 + 1) = v90;
            v92 = v91 != 0;
          }
          *((_BYTE *)this + 113) = v92;
          goto LABEL_296;
        case 0xFu:
          *((_DWORD *)this + 29) |= 0x1000000u;
          v93 = *((_QWORD *)a2 + 1);
          if (v93 >= *((_QWORD *)a2 + 2))
          {
            v96 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v94 = v93 + 1;
            v95 = *(unsigned __int8 *)(*(_QWORD *)a2 + v93);
            *((_QWORD *)a2 + 1) = v94;
            v96 = v95 != 0;
          }
          *((_BYTE *)this + 112) = v96;
          goto LABEL_296;
        case 0x10u:
          *((_DWORD *)this + 29) |= 0x400000u;
          v97 = *((_QWORD *)a2 + 1);
          if (v97 >= *((_QWORD *)a2 + 2))
          {
            v100 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v98 = v97 + 1;
            v99 = *(unsigned __int8 *)(*(_QWORD *)a2 + v97);
            *((_QWORD *)a2 + 1) = v98;
            v100 = v99 != 0;
          }
          *((_BYTE *)this + 110) = v100;
          goto LABEL_296;
        case 0x11u:
          *((_DWORD *)this + 29) |= 0x4000000u;
          v101 = *((_QWORD *)a2 + 1);
          if (v101 >= *((_QWORD *)a2 + 2))
          {
            v104 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v102 = v101 + 1;
            v103 = *(unsigned __int8 *)(*(_QWORD *)a2 + v101);
            *((_QWORD *)a2 + 1) = v102;
            v104 = v103 != 0;
          }
          *((_BYTE *)this + 114) = v104;
          goto LABEL_296;
        case 0x12u:
          *((_DWORD *)this + 29) |= 0x800000u;
          v105 = *((_QWORD *)a2 + 1);
          if (v105 >= *((_QWORD *)a2 + 2))
          {
            v108 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v106 = v105 + 1;
            v107 = *(unsigned __int8 *)(*(_QWORD *)a2 + v105);
            *((_QWORD *)a2 + 1) = v106;
            v108 = v107 != 0;
          }
          *((_BYTE *)this + 111) = v108;
          goto LABEL_296;
        case 0x13u:
          *((_DWORD *)this + 29) |= 0x40000u;
          v109 = *((_QWORD *)a2 + 1);
          v110 = *((_QWORD *)a2 + 2);
          v111 = *(_QWORD *)a2;
          if (v109 <= 0xFFFFFFFFFFFFFFF5 && v109 + 10 <= v110)
          {
            v112 = 0;
            v113 = 0;
            v114 = 0;
            do
            {
              v115 = v109 + 1;
              *((_QWORD *)a2 + 1) = v109 + 1;
              v116 = *(_BYTE *)(v111 + v109);
              v114 |= (unint64_t)(v116 & 0x7F) << v112;
              if ((v116 & 0x80) == 0)
                goto LABEL_279;
              v112 += 7;
              v109 = v115;
              v14 = v113++ > 8;
            }
            while (!v14);
LABEL_216:
            LODWORD(v114) = 0;
            goto LABEL_279;
          }
          v182 = 0;
          v183 = 0;
          v114 = 0;
          if (v110 <= v109)
            v110 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v110 == v109)
            {
              LODWORD(v114) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v184 = v109 + 1;
              v185 = *(_BYTE *)(v111 + v109);
              *((_QWORD *)a2 + 1) = v184;
              v114 |= (unint64_t)(v185 & 0x7F) << v182;
              if (v185 < 0)
              {
                v182 += 7;
                v109 = v184;
                v14 = v183++ > 8;
                if (v14)
                  goto LABEL_216;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v114) = 0;
            }
            break;
          }
LABEL_279:
          *((_DWORD *)this + 25) = v114;
          goto LABEL_296;
        case 0x14u:
          *((_DWORD *)this + 29) |= 0x80u;
          v117 = *((_QWORD *)a2 + 1);
          if (v117 > 0xFFFFFFFFFFFFFFFBLL || v117 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_125;
          *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v117);
          goto LABEL_115;
        case 0x15u:
          *((_DWORD *)this + 29) |= 0x40u;
          v118 = *((_QWORD *)a2 + 1);
          if (v118 > 0xFFFFFFFFFFFFFFFBLL || v118 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_125;
          *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v118);
          goto LABEL_115;
        case 0x16u:
          *((_DWORD *)this + 29) |= 0x4000u;
          v119 = *((_QWORD *)a2 + 1);
          if (v119 > 0xFFFFFFFFFFFFFFFBLL || v119 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_125;
          *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v119);
LABEL_115:
          v120 = *((_QWORD *)a2 + 1) + 4;
          goto LABEL_247;
        case 0x17u:
          *((_DWORD *)this + 29) |= 0x80000u;
          v121 = *((_QWORD *)a2 + 1);
          v122 = *((_QWORD *)a2 + 2);
          v123 = *(_QWORD *)a2;
          if (v121 <= 0xFFFFFFFFFFFFFFF5 && v121 + 10 <= v122)
          {
            v124 = 0;
            v125 = 0;
            v126 = 0;
            do
            {
              v127 = v121 + 1;
              *((_QWORD *)a2 + 1) = v121 + 1;
              v128 = *(_BYTE *)(v123 + v121);
              v126 |= (unint64_t)(v128 & 0x7F) << v124;
              if ((v128 & 0x80) == 0)
                goto LABEL_283;
              v124 += 7;
              v121 = v127;
              v14 = v125++ > 8;
            }
            while (!v14);
LABEL_223:
            LODWORD(v126) = 0;
            goto LABEL_283;
          }
          v186 = 0;
          v187 = 0;
          v126 = 0;
          if (v122 <= v121)
            v122 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v122 == v121)
            {
              LODWORD(v126) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v188 = v121 + 1;
              v189 = *(_BYTE *)(v123 + v121);
              *((_QWORD *)a2 + 1) = v188;
              v126 |= (unint64_t)(v189 & 0x7F) << v186;
              if (v189 < 0)
              {
                v186 += 7;
                v121 = v188;
                v14 = v187++ > 8;
                if (v14)
                  goto LABEL_223;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v126) = 0;
            }
            break;
          }
LABEL_283:
          *((_DWORD *)this + 26) = v126;
          goto LABEL_296;
        case 0x18u:
          *((_DWORD *)this + 29) |= 8u;
          v129 = *((_QWORD *)a2 + 1);
          if (v129 <= 0xFFFFFFFFFFFFFFF7 && v129 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v129);
LABEL_246:
            v120 = *((_QWORD *)a2 + 1) + 8;
LABEL_247:
            *((_QWORD *)a2 + 1) = v120;
          }
          else
          {
LABEL_125:
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_296;
        case 0x19u:
          *((_DWORD *)this + 29) |= 0x10u;
          v130 = *((_QWORD *)a2 + 1);
          v131 = *((_QWORD *)a2 + 2);
          v132 = *(_QWORD *)a2;
          if (v130 <= 0xFFFFFFFFFFFFFFF5 && v130 + 10 <= v131)
          {
            v133 = 0;
            v134 = 0;
            v135 = 0;
            do
            {
              v136 = v130 + 1;
              *((_QWORD *)a2 + 1) = v130 + 1;
              v137 = *(_BYTE *)(v132 + v130);
              v135 |= (unint64_t)(v137 & 0x7F) << v133;
              if ((v137 & 0x80) == 0)
                goto LABEL_287;
              v133 += 7;
              v130 = v136;
              v14 = v134++ > 8;
            }
            while (!v14);
LABEL_230:
            v135 = 0;
            goto LABEL_287;
          }
          v190 = 0;
          v191 = 0;
          v135 = 0;
          if (v131 <= v130)
            v131 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v131 == v130)
            {
              v135 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v192 = v130 + 1;
              v193 = *(_BYTE *)(v132 + v130);
              *((_QWORD *)a2 + 1) = v192;
              v135 |= (unint64_t)(v193 & 0x7F) << v190;
              if (v193 < 0)
              {
                v190 += 7;
                v130 = v192;
                v14 = v191++ > 8;
                if (v14)
                  goto LABEL_230;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v135 = 0;
            }
            break;
          }
LABEL_287:
          *((_QWORD *)this + 5) = v135;
          goto LABEL_296;
        case 0x1Au:
          *((_DWORD *)this + 29) |= 0x20000u;
          v138 = *((_QWORD *)a2 + 1);
          v139 = *((_QWORD *)a2 + 2);
          v140 = *(_QWORD *)a2;
          if (v138 <= 0xFFFFFFFFFFFFFFF5 && v138 + 10 <= v139)
          {
            v141 = 0;
            v142 = 0;
            v143 = 0;
            do
            {
              v144 = v138 + 1;
              *((_QWORD *)a2 + 1) = v138 + 1;
              v145 = *(_BYTE *)(v140 + v138);
              v143 |= (unint64_t)(v145 & 0x7F) << v141;
              if ((v145 & 0x80) == 0)
                goto LABEL_291;
              v141 += 7;
              v138 = v144;
              v14 = v142++ > 8;
            }
            while (!v14);
LABEL_237:
            LODWORD(v143) = 0;
            goto LABEL_291;
          }
          v194 = 0;
          v195 = 0;
          v143 = 0;
          if (v139 <= v138)
            v139 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v139 == v138)
            {
              LODWORD(v143) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v196 = v138 + 1;
              v197 = *(_BYTE *)(v140 + v138);
              *((_QWORD *)a2 + 1) = v196;
              v143 |= (unint64_t)(v197 & 0x7F) << v194;
              if (v197 < 0)
              {
                v194 += 7;
                v138 = v196;
                v14 = v195++ > 8;
                if (v14)
                  goto LABEL_237;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v143) = 0;
            }
            break;
          }
LABEL_291:
          *((_DWORD *)this + 24) = v143;
          goto LABEL_296;
        case 0x1Bu:
          *((_DWORD *)this + 29) |= 0x2000u;
          v146 = *((_QWORD *)a2 + 1);
          v147 = *((_QWORD *)a2 + 2);
          v148 = *(_QWORD *)a2;
          if (v146 <= 0xFFFFFFFFFFFFFFF5 && v146 + 10 <= v147)
          {
            v149 = 0;
            v150 = 0;
            v151 = 0;
            do
            {
              v152 = v146 + 1;
              *((_QWORD *)a2 + 1) = v146 + 1;
              v153 = *(_BYTE *)(v148 + v146);
              v151 |= (unint64_t)(v153 & 0x7F) << v149;
              if ((v153 & 0x80) == 0)
                goto LABEL_295;
              v149 += 7;
              v146 = v152;
              v14 = v150++ > 8;
            }
            while (!v14);
LABEL_244:
            LODWORD(v151) = 0;
            goto LABEL_295;
          }
          v198 = 0;
          v199 = 0;
          v151 = 0;
          if (v147 <= v146)
            v147 = *((_QWORD *)a2 + 1);
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_296;
      }
      while (1)
      {
        if (v147 == v146)
        {
          LODWORD(v151) = 0;
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_295;
        }
        v200 = v146 + 1;
        v201 = *(_BYTE *)(v148 + v146);
        *((_QWORD *)a2 + 1) = v200;
        v151 |= (unint64_t)(v201 & 0x7F) << v198;
        if ((v201 & 0x80) == 0)
          break;
        v198 += 7;
        v146 = v200;
        v14 = v199++ > 8;
        if (v14)
          goto LABEL_244;
      }
      if (*((_BYTE *)a2 + 24))
        LODWORD(v151) = 0;
LABEL_295:
      *((_DWORD *)this + 20) = v151;
LABEL_296:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MotionActivity::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 116);
  if ((v4 & 0x10000) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 92), 1u);
    v4 = *(_DWORD *)(v3 + 116);
    if ((v4 & 0x200) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_31;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 64), 2u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 3u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x100000) == 0)
      goto LABEL_6;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 68), 4u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x100000) == 0)
  {
LABEL_6:
    if ((v4 & 0x8000) == 0)
      goto LABEL_7;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 108), 5u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x8000) == 0)
  {
LABEL_7:
    if ((v4 & 4) == 0)
      goto LABEL_8;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 6u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 0x200000) == 0)
      goto LABEL_9;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 7u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x200000) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 109), 8u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 1) == 0)
      goto LABEL_11;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 60), 9u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 1) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0)
      goto LABEL_12;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 0xAu);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 2) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 0xBu);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x800) == 0)
      goto LABEL_14;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 76), 0xCu);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x800) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_15;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 72), 0xDu);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_16;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 113), 0xEu);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x400000) == 0)
      goto LABEL_17;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 112), 0xFu);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x400000) == 0)
  {
LABEL_17:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_18;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 110), 0x10u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x800000) == 0)
      goto LABEL_19;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 114), 0x11u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x800000) == 0)
  {
LABEL_19:
    if ((v4 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 111), 0x12u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40000) == 0)
  {
LABEL_20:
    if ((v4 & 0x80) == 0)
      goto LABEL_21;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 100), 0x13u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x80) == 0)
  {
LABEL_21:
    if ((v4 & 0x40) == 0)
      goto LABEL_22;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 0x14u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40) == 0)
  {
LABEL_22:
    if ((v4 & 0x4000) == 0)
      goto LABEL_23;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0x15u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x4000) == 0)
  {
LABEL_23:
    if ((v4 & 0x80000) == 0)
      goto LABEL_24;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 0x16u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x80000) == 0)
  {
LABEL_24:
    if ((v4 & 8) == 0)
      goto LABEL_25;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 104), 0x17u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 8) == 0)
  {
LABEL_25:
    if ((v4 & 0x10) == 0)
      goto LABEL_26;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 0x18u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x10) == 0)
  {
LABEL_26:
    if ((v4 & 0x20000) == 0)
      goto LABEL_27;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 40), 0x19u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20000) == 0)
  {
LABEL_27:
    if ((v4 & 0x2000) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 80), 0x1Bu);
  }
LABEL_54:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 96), 0x1Au);
  if ((*(_DWORD *)(v3 + 116) & 0x2000) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 80), 0x1Bu);
  return this;
}

uint64_t CMMsl::MotionActivity::hash_value(CMMsl::MotionActivity *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *((_DWORD *)this + 29);
  if ((v1 & 0x10000) != 0)
  {
    v2 = *((unsigned int *)this + 23);
    if ((v1 & 0x200) != 0)
    {
LABEL_3:
      v3 = *((unsigned int *)this + 16);
      if ((v1 & 0x20) != 0)
        goto LABEL_4;
      goto LABEL_47;
    }
  }
  else
  {
    v2 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_4:
    v4 = *((unsigned int *)this + 12);
    if ((v1 & 0x400) != 0)
      goto LABEL_5;
    goto LABEL_48;
  }
LABEL_47:
  v4 = 0;
  if ((v1 & 0x400) != 0)
  {
LABEL_5:
    v5 = *((unsigned int *)this + 17);
    if ((v1 & 0x100000) != 0)
      goto LABEL_6;
    goto LABEL_49;
  }
LABEL_48:
  v5 = 0;
  if ((v1 & 0x100000) != 0)
  {
LABEL_6:
    v6 = *((unsigned __int8 *)this + 108);
    if ((v1 & 0x8000) != 0)
      goto LABEL_7;
LABEL_50:
    v8 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_10;
LABEL_51:
    v9 = 0.0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_13;
    goto LABEL_52;
  }
LABEL_49:
  v6 = 0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_50;
LABEL_7:
  v7 = *((float *)this + 22);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_51;
LABEL_10:
  v9 = *((double *)this + 3);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((v1 & 0x200000) != 0)
  {
LABEL_13:
    v10 = *((unsigned __int8 *)this + 109);
    if ((v1 & 0x100) != 0)
      goto LABEL_14;
    goto LABEL_53;
  }
LABEL_52:
  v10 = 0;
  if ((v1 & 0x100) != 0)
  {
LABEL_14:
    v11 = *((unsigned int *)this + 15);
    if ((v1 & 1) != 0)
      goto LABEL_15;
LABEL_54:
    v12 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_18;
LABEL_55:
    v13 = 0.0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_21;
    goto LABEL_56;
  }
LABEL_53:
  v11 = 0;
  if ((v1 & 1) == 0)
    goto LABEL_54;
LABEL_15:
  v12 = *((double *)this + 1);
  if (v12 == 0.0)
    v12 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_55;
LABEL_18:
  v13 = *((double *)this + 2);
  if (v13 == 0.0)
    v13 = 0.0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_21:
    v14 = *((unsigned int *)this + 19);
    if ((v1 & 0x800) != 0)
      goto LABEL_22;
    goto LABEL_57;
  }
LABEL_56:
  v14 = 0;
  if ((v1 & 0x800) != 0)
  {
LABEL_22:
    v15 = *((unsigned int *)this + 18);
    if ((v1 & 0x2000000) != 0)
      goto LABEL_23;
    goto LABEL_58;
  }
LABEL_57:
  v15 = 0;
  if ((v1 & 0x2000000) != 0)
  {
LABEL_23:
    v16 = *((unsigned __int8 *)this + 113);
    if ((v1 & 0x1000000) != 0)
      goto LABEL_24;
    goto LABEL_59;
  }
LABEL_58:
  v16 = 0;
  if ((v1 & 0x1000000) != 0)
  {
LABEL_24:
    v17 = *((unsigned __int8 *)this + 112);
    if ((v1 & 0x400000) != 0)
      goto LABEL_25;
    goto LABEL_60;
  }
LABEL_59:
  v17 = 0;
  if ((v1 & 0x400000) != 0)
  {
LABEL_25:
    v18 = *((unsigned __int8 *)this + 110);
    if ((v1 & 0x4000000) != 0)
      goto LABEL_26;
    goto LABEL_61;
  }
LABEL_60:
  v18 = 0;
  if ((v1 & 0x4000000) != 0)
  {
LABEL_26:
    v19 = *((unsigned __int8 *)this + 114);
    if ((v1 & 0x800000) != 0)
      goto LABEL_27;
    goto LABEL_62;
  }
LABEL_61:
  v19 = 0;
  if ((v1 & 0x800000) != 0)
  {
LABEL_27:
    v20 = *((unsigned __int8 *)this + 111);
    if ((v1 & 0x40000) != 0)
      goto LABEL_28;
    goto LABEL_63;
  }
LABEL_62:
  v20 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_28:
    v21 = *((unsigned int *)this + 25);
    if ((v1 & 0x80) != 0)
      goto LABEL_29;
LABEL_64:
    v23 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_32;
LABEL_65:
    v25 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_35;
LABEL_66:
    v27 = 0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_38;
    goto LABEL_67;
  }
LABEL_63:
  v21 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_64;
LABEL_29:
  v22 = *((float *)this + 14);
  v23 = LODWORD(v22);
  if (v22 == 0.0)
    v23 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_65;
LABEL_32:
  v24 = *((float *)this + 13);
  v25 = LODWORD(v24);
  if (v24 == 0.0)
    v25 = 0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_66;
LABEL_35:
  v26 = *((float *)this + 21);
  v27 = LODWORD(v26);
  if (v26 == 0.0)
    v27 = 0;
  if ((v1 & 0x80000) != 0)
  {
LABEL_38:
    v28 = *((unsigned int *)this + 26);
    if ((v1 & 8) != 0)
      goto LABEL_39;
LABEL_68:
    v29 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_42;
    goto LABEL_69;
  }
LABEL_67:
  v28 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_68;
LABEL_39:
  v29 = *((double *)this + 4);
  if (v29 == 0.0)
    v29 = 0.0;
  if ((v1 & 0x10) != 0)
  {
LABEL_42:
    v30 = *((_QWORD *)this + 5);
    if ((v1 & 0x20000) != 0)
      goto LABEL_43;
LABEL_70:
    v31 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_44;
LABEL_71:
    v32 = 0;
    return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v8 ^ *(_QWORD *)&v9 ^ v10 ^ v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v23 ^ v25 ^ v27 ^ v28 ^ *(_QWORD *)&v29 ^ v30 ^ v31 ^ v32;
  }
LABEL_69:
  v30 = 0;
  if ((v1 & 0x20000) == 0)
    goto LABEL_70;
LABEL_43:
  v31 = *((unsigned int *)this + 24);
  if ((v1 & 0x2000) == 0)
    goto LABEL_71;
LABEL_44:
  v32 = *((unsigned int *)this + 20);
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v8 ^ *(_QWORD *)&v9 ^ v10 ^ v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v23 ^ v25 ^ v27 ^ v28 ^ *(_QWORD *)&v29 ^ v30 ^ v31 ^ v32;
}

void CMMsl::MotionActivityReplay::~MotionActivityReplay(CMMsl::MotionActivityReplay *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::MotionActivityReplay::MotionActivityReplay(uint64_t this, const CMMsl::MotionActivityReplay *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  int v6;
  char v7;
  char v8;
  char v9;
  char v10;
  int v11;
  int v12;

  *(_QWORD *)this = off_100352B70;
  *(_DWORD *)(this + 36) = 0;
  v2 = *((_WORD *)a2 + 18);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_WORD *)(this + 36) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_WORD *)a2 + 18);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 7);
    v3 |= 0x10u;
    *(_WORD *)(this + 36) = v3;
    *(_DWORD *)(this + 28) = v5;
    v2 = *((_WORD *)a2 + 18);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *(_WORD *)(this + 36) = v3;
    *(_DWORD *)(this + 24) = v6;
    v2 = *((_WORD *)a2 + 18);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_BYTE *)a2 + 34);
  v3 |= 0x80u;
  *(_WORD *)(this + 36) = v3;
  *(_BYTE *)(this + 34) = v7;
  v2 = *((_WORD *)a2 + 18);
  if ((v2 & 0x100) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_17;
  }
LABEL_16:
  v8 = *((_BYTE *)a2 + 35);
  v3 |= 0x100u;
  *(_WORD *)(this + 36) = v3;
  *(_BYTE *)(this + 35) = v8;
  v2 = *((_WORD *)a2 + 18);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_18;
  }
LABEL_17:
  v9 = *((_BYTE *)a2 + 32);
  v3 |= 0x20u;
  *(_WORD *)(this + 36) = v3;
  *(_BYTE *)(this + 32) = v9;
  v2 = *((_WORD *)a2 + 18);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 2) == 0)
      goto LABEL_12;
    goto LABEL_19;
  }
LABEL_18:
  v10 = *((_BYTE *)a2 + 33);
  v3 |= 0x40u;
  *(_WORD *)(this + 36) = v3;
  *(_BYTE *)(this + 33) = v10;
  v2 = *((_WORD *)a2 + 18);
  if ((v2 & 2) == 0)
  {
LABEL_12:
    if ((v2 & 4) == 0)
      return this;
LABEL_20:
    v12 = *((_DWORD *)a2 + 5);
    *(_WORD *)(this + 36) = v3 | 4;
    *(_DWORD *)(this + 20) = v12;
    return this;
  }
LABEL_19:
  v11 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *(_WORD *)(this + 36) = v3;
  *(_DWORD *)(this + 16) = v11;
  if ((*((_WORD *)a2 + 18) & 4) != 0)
    goto LABEL_20;
  return this;
}

uint64_t CMMsl::MotionActivityReplay::operator=(uint64_t a1, const CMMsl::MotionActivityReplay *a2)
{
  int v3;
  uint64_t v4;
  int v5;
  __int128 v6;
  _BYTE v8[8];
  uint64_t v9;
  __int128 v10;
  int v11;
  int v12;

  if ((const CMMsl::MotionActivityReplay *)a1 != a2)
  {
    CMMsl::MotionActivityReplay::MotionActivityReplay((uint64_t)v8, a2);
    v3 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v12;
    v12 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v9 = v4;
    v5 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v11;
    v11 = v5;
    v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    v10 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::MotionActivityReplay *a2, CMMsl::MotionActivityReplay *a3)
{
  int v3;
  double result;
  int v5;
  int v6;
  int v7;
  int v8;

  v3 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v5 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v5;
  v6 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 34);
  *((_BYTE *)this + 34) = *((_BYTE *)a2 + 34);
  *((_BYTE *)a2 + 34) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 35);
  *((_BYTE *)this + 35) = *((_BYTE *)a2 + 35);
  *((_BYTE *)a2 + 35) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 32);
  *((_BYTE *)this + 32) = *((_BYTE *)a2 + 32);
  *((_BYTE *)a2 + 32) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 33);
  *((_BYTE *)this + 33) = *((_BYTE *)a2 + 33);
  *((_BYTE *)a2 + 33) = v6;
  v7 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v7;
  v8 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v8;
  return result;
}

double CMMsl::MotionActivityReplay::MotionActivityReplay(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100352B70;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100352B70;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return result;
}

uint64_t CMMsl::MotionActivityReplay::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  __int128 v8;
  _QWORD v10[2];
  __int128 v11;
  int v12;
  int v13;

  if (a1 != a2)
  {
    v10[0] = off_100352B70;
    v3 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a2 + 36) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v13 = *(_DWORD *)(a1 + 36);
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v10[1] = v5;
    v6 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    v12 = v6;
    v7 = *(_OWORD *)(a1 + 16);
    v8 = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 36) = v3;
    *(_OWORD *)(a1 + 16) = v8;
    v11 = v7;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::MotionActivityReplay::formatText(CMMsl::MotionActivityReplay *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 18);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "iostime", *((double *)this + 1));
    v5 = *((_WORD *)this + 18);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "outdoorCyclingStateMachineFrom", *((_DWORD *)this + 4));
  v5 = *((_WORD *)this + 18);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "outdoorCyclingStateMachineTo", *((_DWORD *)this + 5));
  v5 = *((_WORD *)this + 18);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "workoutLocationType", *((_DWORD *)this + 6));
  v5 = *((_WORD *)this + 18);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "workoutPause", *((_BYTE *)this + 32));
  v5 = *((_WORD *)this + 18);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "workoutResume", *((_BYTE *)this + 33));
  v5 = *((_WORD *)this + 18);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
LABEL_19:
    PB::TextFormatter::format(a2, "workoutStop", *((_BYTE *)this + 35));
    if ((*((_WORD *)this + 18) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_10;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "workoutStart", *((_BYTE *)this + 34));
  v5 = *((_WORD *)this + 18);
  if ((v5 & 0x100) != 0)
    goto LABEL_19;
LABEL_9:
  if ((v5 & 0x10) != 0)
LABEL_10:
    PB::TextFormatter::format(a2, "workoutType", *((_DWORD *)this + 7));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MotionActivityReplay::readFrom(CMMsl::MotionActivityReplay *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  uint64_t result;
  int v33;
  BOOL v34;
  int v35;
  BOOL v36;
  int v37;
  BOOL v38;
  int v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  unint64_t v67;
  char v68;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 18) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_120;
            case 2u:
              *((_WORD *)this + 18) |= 0x10u;
              v20 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v21 = *(_QWORD *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_104;
                  }
                  v55 = v20++;
                  v56 = *(_BYTE *)(v21 + v55);
                  *((_QWORD *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
LABEL_103:
                    v2 = v55 + 1;
                    goto LABEL_104;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v24) = 0;
                goto LABEL_103;
              }
              v22 = 0;
              v23 = 0;
              v24 = 0;
              do
              {
                v2 = v20 + 1;
                *((_QWORD *)a2 + 1) = v20 + 1;
                v25 = *(_BYTE *)(v21 + v20);
                v24 |= (unint64_t)(v25 & 0x7F) << v22;
                if ((v25 & 0x80) == 0)
                  goto LABEL_104;
                v22 += 7;
                v20 = v2;
                v14 = v23++ > 8;
              }
              while (!v14);
              LODWORD(v24) = 0;
LABEL_104:
              *((_DWORD *)this + 7) = v24;
              goto LABEL_120;
            case 3u:
              *((_WORD *)this + 18) |= 8u;
              v26 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v27 = *(_QWORD *)a2;
              if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v30 = 0;
                if (v2 <= v26)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v26)
                  {
                    LODWORD(v30) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_109;
                  }
                  v59 = v26++;
                  v60 = *(_BYTE *)(v27 + v59);
                  *((_QWORD *)a2 + 1) = v26;
                  v30 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v30) = 0;
LABEL_108:
                    v2 = v59 + 1;
                    goto LABEL_109;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v30) = 0;
                goto LABEL_108;
              }
              v28 = 0;
              v29 = 0;
              v30 = 0;
              do
              {
                v2 = v26 + 1;
                *((_QWORD *)a2 + 1) = v26 + 1;
                v31 = *(_BYTE *)(v27 + v26);
                v30 |= (unint64_t)(v31 & 0x7F) << v28;
                if ((v31 & 0x80) == 0)
                  goto LABEL_109;
                v28 += 7;
                v26 = v2;
                v14 = v29++ > 8;
              }
              while (!v14);
              LODWORD(v30) = 0;
LABEL_109:
              *((_DWORD *)this + 6) = v30;
              goto LABEL_120;
            case 0xAu:
              *((_WORD *)this + 18) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v34 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v34 = v33 != 0;
              }
              *((_BYTE *)this + 34) = v34;
              goto LABEL_120;
            case 0xBu:
              *((_WORD *)this + 18) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v36 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v35 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v36 = v35 != 0;
              }
              *((_BYTE *)this + 35) = v36;
              goto LABEL_120;
            case 0xCu:
              *((_WORD *)this + 18) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v38 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v37 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v38 = v37 != 0;
              }
              *((_BYTE *)this + 32) = v38;
              goto LABEL_120;
            case 0xDu:
              *((_WORD *)this + 18) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v40 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v39 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v40 = v39 != 0;
              }
              *((_BYTE *)this + 33) = v40;
              goto LABEL_120;
            case 0x15u:
              *((_WORD *)this + 18) |= 2u;
              v41 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v42 = *(_QWORD *)a2;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                v61 = 0;
                v62 = 0;
                v45 = 0;
                if (v2 <= v41)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_114;
                  }
                  v63 = v41++;
                  v64 = *(_BYTE *)(v42 + v63);
                  *((_QWORD *)a2 + 1) = v41;
                  v45 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0)
                    break;
                  v61 += 7;
                  v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_113:
                    v2 = v63 + 1;
                    goto LABEL_114;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v45) = 0;
                goto LABEL_113;
              }
              v43 = 0;
              v44 = 0;
              v45 = 0;
              do
              {
                v2 = v41 + 1;
                *((_QWORD *)a2 + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0)
                  goto LABEL_114;
                v43 += 7;
                v41 = v2;
                v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_114:
              *((_DWORD *)this + 4) = v45;
              goto LABEL_120;
            case 0x16u:
              *((_WORD *)this + 18) |= 4u;
              v47 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v48 = *(_QWORD *)a2;
              if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
              {
                v65 = 0;
                v66 = 0;
                v51 = 0;
                if (v2 <= v47)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v47)
                  {
                    LODWORD(v51) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_119;
                  }
                  v67 = v47++;
                  v68 = *(_BYTE *)(v48 + v67);
                  *((_QWORD *)a2 + 1) = v47;
                  v51 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0)
                    break;
                  v65 += 7;
                  v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v51) = 0;
LABEL_118:
                    v2 = v67 + 1;
                    goto LABEL_119;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v51) = 0;
                goto LABEL_118;
              }
              v49 = 0;
              v50 = 0;
              v51 = 0;
              do
              {
                v2 = v47 + 1;
                *((_QWORD *)a2 + 1) = v47 + 1;
                v52 = *(_BYTE *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0)
                  goto LABEL_119;
                v49 += 7;
                v47 = v2;
                v14 = v50++ > 8;
              }
              while (!v14);
              LODWORD(v51) = 0;
LABEL_119:
              *((_DWORD *)this + 5) = v51;
LABEL_120:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_120;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::MotionActivityReplay::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 36);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_WORD *)(v3 + 36);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 2u);
  v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 3u);
  v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 34), 0xAu);
  v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 35), 0xBu);
  v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 32), 0xCu);
  v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 2) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 33), 0xDu);
  v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 2) == 0)
  {
LABEL_9:
    if ((v4 & 4) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 0x16u);
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 0x15u);
  if ((*(_WORD *)(v3 + 36) & 4) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 0x16u);
  return this;
}

uint64_t CMMsl::MotionActivityReplay::hash_value(CMMsl::MotionActivityReplay *this)
{
  __int16 v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *((_WORD *)this + 18);
  if ((v1 & 1) != 0)
  {
    v2 = *((double *)this + 1);
    if (v2 == 0.0)
      v2 = 0.0;
    if ((v1 & 0x10) != 0)
    {
LABEL_3:
      v3 = *((int *)this + 7);
      if ((v1 & 8) != 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else
  {
    v2 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_4:
    v4 = *((int *)this + 6);
    if ((v1 & 0x80) != 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  v4 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_5:
    v5 = *((unsigned __int8 *)this + 34);
    if ((*((_WORD *)this + 18) & 0x100) != 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  v5 = 0;
  if ((*((_WORD *)this + 18) & 0x100) != 0)
  {
LABEL_6:
    v6 = *((unsigned __int8 *)this + 35);
    if ((v1 & 0x20) != 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  v6 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_7:
    v7 = *((unsigned __int8 *)this + 32);
    if ((v1 & 0x40) != 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  v7 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_8:
    v8 = *((unsigned __int8 *)this + 33);
    if ((v1 & 2) != 0)
      goto LABEL_9;
LABEL_20:
    v9 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_10;
LABEL_21:
    v10 = 0;
    return v3 ^ *(_QWORD *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10;
  }
LABEL_19:
  v8 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_20;
LABEL_9:
  v9 = *((int *)this + 4);
  if ((v1 & 4) == 0)
    goto LABEL_21;
LABEL_10:
  v10 = *((int *)this + 5);
  return v3 ^ *(_QWORD *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10;
}

void CMMsl::MotionContextActivity::~MotionContextActivity(CMMsl::MotionContextActivity *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100352BA8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100352BA8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100352BA8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::MotionContextActivity::MotionContextActivity(uint64_t this, const CMMsl::MotionContextActivity *a2)
{
  char v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)this = off_100352BA8;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 24) = 0;
  if ((*((_BYTE *)a2 + 28) & 2) != 0)
  {
    v3 = *((_DWORD *)a2 + 6);
    *(_BYTE *)(this + 28) = 2;
    *(_DWORD *)(this + 24) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 28) & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*((_BYTE *)a2 + 28) & 1) != 0)
  {
LABEL_5:
    v4 = *((_QWORD *)a2 + 2);
    *(_BYTE *)(this + 28) = v2;
    *(_QWORD *)(this + 16) = v4;
  }
LABEL_6:
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::MotionContextActivity *CMMsl::MotionContextActivity::operator=(const CMMsl::MotionContextActivity *a1, const CMMsl::MotionContextActivity *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (**v8)(CMMsl::MotionContextActivity *__hidden);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    CMMsl::MotionContextActivity::MotionContextActivity((uint64_t)&v8, a2);
    v4 = *((_QWORD *)a1 + 2);
    v3 = *((_QWORD *)a1 + 3);
    v5 = v11;
    *((_QWORD *)a1 + 2) = v10;
    *((_QWORD *)a1 + 3) = v5;
    v10 = v4;
    v11 = v3;
    v6 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v9;
    v8 = off_100352BA8;
    v9 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::MotionContextActivity *a2, CMMsl::MotionContextActivity *a3)
{
  int v3;
  int v4;
  double result;
  uint64_t v6;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  return result;
}

uint64_t CMMsl::MotionContextActivity::MotionContextActivity(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_100352BA8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

_QWORD *CMMsl::MotionContextActivity::operator=(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];

  if (a1 != (_QWORD *)a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a2 + 16);
    v5 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 28) = 0;
    v7 = a1[2];
    v6 = a1[3];
    a1[2] = v4;
    a1[3] = v5;
    v10[2] = v7;
    v10[3] = v6;
    v8 = a1[1];
    a1[1] = v3;
    v10[0] = off_100352BA8;
    v10[1] = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::MotionContextActivity::formatText(CMMsl::MotionContextActivity *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  char v6;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "impulse");
  v6 = *((_BYTE *)this + 28);
  if ((v6 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 6));
    v6 = *((_BYTE *)this + 28);
  }
  if ((v6 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MotionContextActivity::readFrom(CMMsl::MotionContextActivity *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t result;
  char v31;
  unsigned int v32;
  unint64_t v33;
  char v34;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
        operator new();
      if ((_DWORD)v20 == 2)
      {
        *((_BYTE *)this + 28) |= 1u;
        v29 = *((_QWORD *)a2 + 1);
        if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v29);
          *((_QWORD *)a2 + 1) += 8;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 28) |= 2u;
        v21 = *((_QWORD *)a2 + 1);
        v22 = *((_QWORD *)a2 + 2);
        v23 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v22)
        {
          v31 = 0;
          v32 = 0;
          v26 = 0;
          if (v22 <= v21)
            v22 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_48;
            }
            v33 = v21 + 1;
            v34 = *(_BYTE *)(v23 + v21);
            *((_QWORD *)a2 + 1) = v33;
            v26 |= (unint64_t)(v34 & 0x7F) << v31;
            if ((v34 & 0x80) == 0)
              break;
            v31 += 7;
            v21 = v33;
            v14 = v32++ > 8;
            if (v14)
            {
LABEL_43:
              LODWORD(v26) = 0;
              goto LABEL_48;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v26) = 0;
        }
        else
        {
          v24 = 0;
          v25 = 0;
          v26 = 0;
          while (1)
          {
            v27 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v28 = *(_BYTE *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0)
              break;
            v24 += 7;
            v21 = v27;
            v14 = v25++ > 8;
            if (v14)
              goto LABEL_43;
          }
        }
LABEL_48:
        *((_DWORD *)this + 6) = v26;
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MotionContextActivity::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  const PB::Base *v5;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 24), 1u);
    v4 = *(_BYTE *)(v3 + 28);
  }
  if ((v4 & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
  v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
    return PB::Writer::writeSubmessage(a2, v5, 3u);
  return this;
}

uint64_t CMMsl::MotionContextActivity::hash_value(CMMsl::MotionContextActivity *this)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  if ((*((_BYTE *)this + 28) & 2) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 28) & 1) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0.0;
    goto LABEL_8;
  }
  v1 = *((int *)this + 6);
  if ((*((_BYTE *)this + 28) & 1) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((double *)this + 2);
  if (v2 == 0.0)
    v2 = 0.0;
LABEL_8:
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v4 = *(int *)(v3 + 16);
    if ((*(_BYTE *)(v3 + 20) & 2) == 0)
      v4 = 0;
    v5 = *(double *)(v3 + 8) == 0.0 || (*(_BYTE *)(v3 + 20) & 1) == 0;
    v6 = *(_QWORD *)(v3 + 8);
    if (v5)
      v6 = 0;
    v3 = v6 ^ v4;
  }
  return *(_QWORD *)&v2 ^ v1 ^ v3;
}

uint64_t CMMsl::MotionContextActivity::makeImpulse(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

void CMMsl::MotionGPSLocation::~MotionGPSLocation(CMMsl::MotionGPSLocation *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_100352BE0;
  v2 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_100352BE0;
  v2 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_100352BE0;
  v2 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::MotionGPSLocation::MotionGPSLocation(uint64_t this, const CMMsl::MotionGPSLocation *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;

  *(_QWORD *)this = off_100352BE0;
  *(_QWORD *)(this + 112) = 0;
  *(_DWORD *)(this + 180) = 0;
  v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x800) != 0)
  {
    v4 = *((_QWORD *)a2 + 12);
    v3 = 2048;
    *(_DWORD *)(this + 180) = 2048;
    *(_QWORD *)(this + 96) = v4;
    v2 = *((_DWORD *)a2 + 45);
    if ((v2 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x40) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 7);
    v3 |= 0x40u;
    *(_DWORD *)(this + 180) = v3;
    *(_QWORD *)(this + 56) = v5;
    v2 = *((_DWORD *)a2 + 45);
  }
LABEL_6:
  if ((v2 & 0x80) != 0)
  {
    v10 = *((_QWORD *)a2 + 8);
    v3 |= 0x80u;
    *(_DWORD *)(this + 180) = v3;
    *(_QWORD *)(this + 64) = v10;
    v2 = *((_DWORD *)a2 + 45);
    if ((v2 & 0x200) == 0)
    {
LABEL_8:
      if ((v2 & 0x400) == 0)
        goto LABEL_9;
      goto LABEL_39;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_8;
  }
  v11 = *((_QWORD *)a2 + 10);
  v3 |= 0x200u;
  *(_DWORD *)(this + 180) = v3;
  *(_QWORD *)(this + 80) = v11;
  v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x400) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_40;
  }
LABEL_39:
  v12 = *((_QWORD *)a2 + 11);
  v3 |= 0x400u;
  *(_DWORD *)(this + 180) = v3;
  *(_QWORD *)(this + 88) = v12;
  v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0)
      goto LABEL_11;
    goto LABEL_41;
  }
LABEL_40:
  v13 = *((_QWORD *)a2 + 6);
  v3 |= 0x20u;
  *(_DWORD *)(this + 180) = v3;
  *(_QWORD *)(this + 48) = v13;
  v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 2) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0)
      goto LABEL_12;
    goto LABEL_42;
  }
LABEL_41:
  v14 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 180) = v3;
  *(_QWORD *)(this + 16) = v14;
  v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 1) == 0)
      goto LABEL_13;
    goto LABEL_43;
  }
LABEL_42:
  v15 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *(_DWORD *)(this + 180) = v3;
  *(_QWORD *)(this + 24) = v15;
  v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 1) == 0)
  {
LABEL_13:
    if ((v2 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_44;
  }
LABEL_43:
  v16 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 180) = v3;
  *(_QWORD *)(this + 8) = v16;
  v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x2000) == 0)
  {
LABEL_14:
    if ((v2 & 0x800000) == 0)
      goto LABEL_15;
    goto LABEL_45;
  }
LABEL_44:
  v17 = *((_QWORD *)a2 + 15);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 180) = v3;
  *(_QWORD *)(this + 120) = v17;
  v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x800000) == 0)
  {
LABEL_15:
    if ((v2 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_46;
  }
LABEL_45:
  v18 = *((_DWORD *)a2 + 41);
  v3 |= 0x800000u;
  *(_DWORD *)(this + 180) = v3;
  *(_DWORD *)(this + 164) = v18;
  v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x1000) == 0)
  {
LABEL_16:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_17;
    goto LABEL_47;
  }
LABEL_46:
  v19 = *((_QWORD *)a2 + 13);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 180) = v3;
  *(_QWORD *)(this + 104) = v19;
  v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_18;
    goto LABEL_48;
  }
LABEL_47:
  v20 = *((_DWORD *)a2 + 42);
  v3 |= 0x1000000u;
  *(_DWORD *)(this + 180) = v3;
  *(_DWORD *)(this + 168) = v20;
  v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_49;
  }
LABEL_48:
  v21 = *((_DWORD *)a2 + 43);
  v3 |= 0x2000000u;
  *(_DWORD *)(this + 180) = v3;
  *(_DWORD *)(this + 172) = v21;
  v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x20000) == 0)
  {
LABEL_19:
    if ((v2 & 0x80000) == 0)
      goto LABEL_20;
    goto LABEL_50;
  }
LABEL_49:
  v22 = *((_DWORD *)a2 + 35);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 180) = v3;
  *(_DWORD *)(this + 140) = v22;
  v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x80000) == 0)
  {
LABEL_20:
    if ((v2 & 0x40000) == 0)
      goto LABEL_21;
    goto LABEL_51;
  }
LABEL_50:
  v23 = *((_DWORD *)a2 + 37);
  v3 |= 0x80000u;
  *(_DWORD *)(this + 180) = v3;
  *(_DWORD *)(this + 148) = v23;
  v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x40000) == 0)
  {
LABEL_21:
    if ((v2 & 0x100) == 0)
      goto LABEL_22;
    goto LABEL_52;
  }
LABEL_51:
  v24 = *((_DWORD *)a2 + 36);
  v3 |= 0x40000u;
  *(_DWORD *)(this + 180) = v3;
  *(_DWORD *)(this + 144) = v24;
  v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x100) == 0)
  {
LABEL_22:
    if ((v2 & 8) == 0)
      goto LABEL_23;
    goto LABEL_53;
  }
LABEL_52:
  v25 = *((_QWORD *)a2 + 9);
  v3 |= 0x100u;
  *(_DWORD *)(this + 180) = v3;
  *(_QWORD *)(this + 72) = v25;
  v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 8) == 0)
  {
LABEL_23:
    if ((v2 & 0x10) == 0)
      goto LABEL_24;
    goto LABEL_54;
  }
LABEL_53:
  v26 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_DWORD *)(this + 180) = v3;
  *(_QWORD *)(this + 32) = v26;
  v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x10) == 0)
  {
LABEL_24:
    if ((v2 & 0x200000) == 0)
      goto LABEL_25;
    goto LABEL_55;
  }
LABEL_54:
  v27 = *((_QWORD *)a2 + 5);
  v3 |= 0x10u;
  *(_DWORD *)(this + 180) = v3;
  *(_QWORD *)(this + 40) = v27;
  v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x200000) == 0)
  {
LABEL_25:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_26;
    goto LABEL_56;
  }
LABEL_55:
  v28 = *((_DWORD *)a2 + 39);
  v3 |= 0x200000u;
  *(_DWORD *)(this + 180) = v3;
  *(_DWORD *)(this + 156) = v28;
  v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_26:
    if ((v2 & 0x400000) == 0)
      goto LABEL_27;
    goto LABEL_57;
  }
LABEL_56:
  v3 |= 0x4000000u;
  *(_DWORD *)(this + 176) = *((_DWORD *)a2 + 44);
  *(_DWORD *)(this + 180) = v3;
  v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x400000) == 0)
  {
LABEL_27:
    if ((v2 & 0x10000) == 0)
      goto LABEL_28;
    goto LABEL_58;
  }
LABEL_57:
  v29 = *((_DWORD *)a2 + 40);
  v3 |= 0x400000u;
  *(_DWORD *)(this + 180) = v3;
  *(_DWORD *)(this + 160) = v29;
  v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x10000) == 0)
  {
LABEL_28:
    if ((v2 & 0x100000) == 0)
      goto LABEL_30;
    goto LABEL_29;
  }
LABEL_58:
  v30 = *((_DWORD *)a2 + 34);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 180) = v3;
  *(_DWORD *)(this + 136) = v30;
  if ((*((_DWORD *)a2 + 45) & 0x100000) != 0)
  {
LABEL_29:
    v6 = *((_DWORD *)a2 + 38);
    *(_DWORD *)(this + 180) = v3 | 0x100000;
    *(_DWORD *)(this + 152) = v6;
  }
LABEL_30:
  if (*((_QWORD *)a2 + 14))
    operator new();
  v7 = *((_DWORD *)a2 + 45);
  if ((v7 & 0x8000) != 0)
  {
    v8 = *((_DWORD *)a2 + 33);
    *(_DWORD *)(this + 180) |= 0x8000u;
    *(_DWORD *)(this + 132) = v8;
    v7 = *((_DWORD *)a2 + 45);
  }
  if ((v7 & 0x4000) != 0)
  {
    v9 = *((_DWORD *)a2 + 32);
    *(_DWORD *)(this + 180) |= 0x4000u;
    *(_DWORD *)(this + 128) = v9;
  }
  return this;
}

CMMsl *CMMsl::MotionGPSLocation::operator=(CMMsl *a1, const CMMsl::MotionGPSLocation *a2)
{
  CMMsl::MotionGPSLocation *v3;
  float v4;
  uint64_t v5;
  _QWORD v7[14];
  uint64_t v8;

  if (a1 != a2)
  {
    CMMsl::MotionGPSLocation::MotionGPSLocation((uint64_t)v7, a2);
    v4 = CMMsl::swap(a1, (CMMsl::MotionGPSLocation *)v7, v3);
    v5 = v8;
    v7[0] = off_100352BE0;
    v8 = 0;
    if (v5)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v5 + 8))(v5, v4);
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::MotionGPSLocation *a2, CMMsl::MotionGPSLocation *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  float result;

  v3 = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v3;
  v4 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v4;
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v5;
  v6 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v6;
  v7 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v7;
  v8 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v8;
  v9 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v9;
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v10;
  v11 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v11;
  v12 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v12;
  v13 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v13;
  v14 = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v14;
  v15 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v15;
  LODWORD(v15) = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v15;
  v16 = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v16;
  LODWORD(v15) = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v15;
  LODWORD(v15) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v15;
  LODWORD(v15) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v15;
  v17 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v17;
  v18 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v18;
  v19 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v19;
  v20 = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v20;
  v21 = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v21;
  v22 = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v22;
  v23 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v23;
  v24 = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v24;
  v25 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v25;
  LODWORD(v25) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v25;
  result = *((float *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((float *)a2 + 32) = result;
  return result;
}

uint64_t CMMsl::MotionGPSLocation::MotionGPSLocation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_100352BE0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a2 + 180) = 0;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  v4 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  v5 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  return a1;
}

CMMsl *CMMsl::MotionGPSLocation::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::MotionGPSLocation *v3;
  float v4;
  uint64_t v5;
  _QWORD v7[14];
  uint64_t v8;

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::MotionGPSLocation::MotionGPSLocation((uint64_t)v7, a2);
    v4 = CMMsl::swap(a1, (CMMsl::MotionGPSLocation *)v7, v3);
    v5 = v8;
    v7[0] = off_100352BE0;
    v8 = 0;
    if (v5)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v5 + 8))(v5, v4);
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

uint64_t CMMsl::MotionGPSLocation::formatText(CMMsl::MotionGPSLocation *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;
  uint64_t v6;
  int v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 45);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "altitude", *((double *)this + 1));
    v5 = *((_DWORD *)this + 45);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_35;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "course", *((double *)this + 2));
  v5 = *((_DWORD *)this + 45);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "courseAccuracy", *((double *)this + 3));
  v5 = *((_DWORD *)this + 45);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "deltaDistance", *((double *)this + 4));
  v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x4000) == 0)
      goto LABEL_7;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "deltaDistanceAccuracy", *((double *)this + 5));
  v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x4000) == 0)
  {
LABEL_7:
    if ((v5 & 0x8000) == 0)
      goto LABEL_8;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "demConfidence", *((float *)this + 32));
  v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x8000) == 0)
  {
LABEL_8:
    if ((v5 & 0x10000) == 0)
      goto LABEL_9;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "demNumContiguousFlatPoints", *((_DWORD *)this + 33));
  v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x10000) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "gnssModesOfOperation", *((_DWORD *)this + 34));
  v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x20000) == 0)
      goto LABEL_11;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "horizontalAccuracy", *((double *)this + 6));
  v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x20000) == 0)
  {
LABEL_11:
    if ((v5 & 0x40000) == 0)
      goto LABEL_12;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "horzUncSemiMaj", *((float *)this + 35));
  v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x40000) == 0)
  {
LABEL_12:
    if ((v5 & 0x80000) == 0)
      goto LABEL_13;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "horzUncSemiMajAz", *((float *)this + 36));
  v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x80000) == 0)
  {
LABEL_13:
    if ((v5 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "horzUncSemiMin", *((float *)this + 37));
  v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x40) == 0)
  {
LABEL_14:
    if ((v5 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "latitude", *((double *)this + 7));
  v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x80) == 0)
  {
LABEL_15:
    if ((v5 & 0x100000) == 0)
      goto LABEL_16;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "longitude", *((double *)this + 8));
  v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x100000) == 0)
  {
LABEL_16:
    if ((v5 & 0x100) == 0)
      goto LABEL_17;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "notificationType", *((_DWORD *)this + 38));
  v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x100) == 0)
  {
LABEL_17:
    if ((v5 & 0x200000) == 0)
      goto LABEL_18;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "odometer", *((double *)this + 9));
  v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x200000) == 0)
  {
LABEL_18:
    if ((v5 & 0x400000) == 0)
      goto LABEL_19;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "originDevice", *((_DWORD *)this + 39));
  v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x400000) == 0)
  {
LABEL_19:
    if ((v5 & 0x200) == 0)
      goto LABEL_20;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "roadClass", *((_DWORD *)this + 40));
  v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x200) == 0)
  {
LABEL_20:
    if ((v5 & 0x400) == 0)
      goto LABEL_21;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "speed", *((double *)this + 10));
  v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x400) == 0)
  {
LABEL_21:
    if ((v5 & 0x800) == 0)
      goto LABEL_22;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "speedAccuracy", *((double *)this + 11));
  v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x800) == 0)
  {
LABEL_22:
    if ((v5 & 0x1000) == 0)
      goto LABEL_24;
    goto LABEL_23;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 12));
  if ((*((_DWORD *)this + 45) & 0x1000) != 0)
LABEL_23:
    PB::TextFormatter::format(a2, "timestampGps", *((double *)this + 13));
LABEL_24:
  v6 = *((_QWORD *)this + 14);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "trackRunData");
  v7 = *((_DWORD *)this + 45);
  if ((v7 & 0x800000) != 0)
  {
    PB::TextFormatter::format(a2, "type", *((_DWORD *)this + 41));
    v7 = *((_DWORD *)this + 45);
    if ((v7 & 0x1000000) == 0)
    {
LABEL_28:
      if ((v7 & 0x2000000) == 0)
        goto LABEL_29;
      goto LABEL_57;
    }
  }
  else if ((v7 & 0x1000000) == 0)
  {
    goto LABEL_28;
  }
  PB::TextFormatter::format(a2, "undulation", *((float *)this + 42));
  v7 = *((_DWORD *)this + 45);
  if ((v7 & 0x2000000) == 0)
  {
LABEL_29:
    if ((v7 & 0x2000) == 0)
      goto LABEL_30;
LABEL_58:
    PB::TextFormatter::format(a2, "verticalAccuracy", *((double *)this + 15));
    if ((*((_DWORD *)this + 45) & 0x4000000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_31;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "undulationModel", *((_DWORD *)this + 43));
  v7 = *((_DWORD *)this + 45);
  if ((v7 & 0x2000) != 0)
    goto LABEL_58;
LABEL_30:
  if ((v7 & 0x4000000) != 0)
LABEL_31:
    PB::TextFormatter::format(a2, "wayForm", *((_DWORD *)this + 44));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MotionGPSLocation::readFrom(CMMsl::MotionGPSLocation *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char v75;
  unsigned int v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char v91;
  unsigned int v92;
  uint64_t v93;
  unint64_t v94;
  char v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  char v99;
  unsigned int v100;
  uint64_t v101;
  unint64_t v102;
  char v103;
  unint64_t v104;
  char v105;
  unsigned int v106;
  unint64_t v107;
  char v108;
  char v109;
  unsigned int v110;
  unint64_t v111;
  char v112;
  char v113;
  unsigned int v114;
  unint64_t v115;
  char v116;
  char v117;
  unsigned int v118;
  unint64_t v119;
  char v120;
  char v121;
  unsigned int v122;
  unint64_t v123;
  char v124;
  char v125;
  unsigned int v126;
  unint64_t v127;
  char v128;
  char v129;
  unsigned int v130;
  unint64_t v131;
  char v132;
  char v133;
  unsigned int v134;
  unint64_t v135;
  char v136;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_DWORD *)this + 45) |= 0x800u;
          v20 = *((_QWORD *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_138;
          *((_QWORD *)this + 12) = *(_QWORD *)(*(_QWORD *)a2 + v20);
          goto LABEL_92;
        case 2u:
          *((_DWORD *)this + 45) |= 0x40u;
          v22 = *((_QWORD *)a2 + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_138;
          *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v22);
          goto LABEL_92;
        case 3u:
          *((_DWORD *)this + 45) |= 0x80u;
          v23 = *((_QWORD *)a2 + 1);
          if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_138;
          *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v23);
          goto LABEL_92;
        case 4u:
          *((_DWORD *)this + 45) |= 0x200u;
          v24 = *((_QWORD *)a2 + 1);
          if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_138;
          *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v24);
          goto LABEL_92;
        case 5u:
          *((_DWORD *)this + 45) |= 0x400u;
          v25 = *((_QWORD *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_138;
          *((_QWORD *)this + 11) = *(_QWORD *)(*(_QWORD *)a2 + v25);
          goto LABEL_92;
        case 6u:
          *((_DWORD *)this + 45) |= 0x20u;
          v26 = *((_QWORD *)a2 + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_138;
          *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v26);
          goto LABEL_92;
        case 7u:
          *((_DWORD *)this + 45) |= 2u;
          v27 = *((_QWORD *)a2 + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_138;
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v27);
          goto LABEL_92;
        case 8u:
          *((_DWORD *)this + 45) |= 4u;
          v28 = *((_QWORD *)a2 + 1);
          if (v28 > 0xFFFFFFFFFFFFFFF7 || v28 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_138;
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v28);
          goto LABEL_92;
        case 9u:
          *((_DWORD *)this + 45) |= 1u;
          v29 = *((_QWORD *)a2 + 1);
          if (v29 > 0xFFFFFFFFFFFFFFF7 || v29 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_138;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v29);
          goto LABEL_92;
        case 0xAu:
          *((_DWORD *)this + 45) |= 0x2000u;
          v30 = *((_QWORD *)a2 + 1);
          if (v30 > 0xFFFFFFFFFFFFFFF7 || v30 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_138;
          *((_QWORD *)this + 15) = *(_QWORD *)(*(_QWORD *)a2 + v30);
          goto LABEL_92;
        case 0xBu:
          *((_DWORD *)this + 45) |= 0x800000u;
          v31 = *((_QWORD *)a2 + 1);
          v32 = *((_QWORD *)a2 + 2);
          v33 = *(_QWORD *)a2;
          if (v31 <= 0xFFFFFFFFFFFFFFF5 && v31 + 10 <= v32)
          {
            v34 = 0;
            v35 = 0;
            v36 = 0;
            do
            {
              v37 = v31 + 1;
              *((_QWORD *)a2 + 1) = v31 + 1;
              v38 = *(_BYTE *)(v33 + v31);
              v36 |= (unint64_t)(v38 & 0x7F) << v34;
              if ((v38 & 0x80) == 0)
                goto LABEL_213;
              v34 += 7;
              v31 = v37;
              v14 = v35++ > 8;
            }
            while (!v14);
LABEL_145:
            LODWORD(v36) = 0;
            goto LABEL_213;
          }
          v105 = 0;
          v106 = 0;
          v36 = 0;
          if (v32 <= v31)
            v32 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v32 == v31)
            {
              LODWORD(v36) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v107 = v31 + 1;
              v108 = *(_BYTE *)(v33 + v31);
              *((_QWORD *)a2 + 1) = v107;
              v36 |= (unint64_t)(v108 & 0x7F) << v105;
              if (v108 < 0)
              {
                v105 += 7;
                v31 = v107;
                v14 = v106++ > 8;
                if (v14)
                  goto LABEL_145;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v36) = 0;
            }
            break;
          }
LABEL_213:
          *((_DWORD *)this + 41) = v36;
          goto LABEL_198;
        case 0xCu:
          *((_DWORD *)this + 45) |= 0x1000u;
          v39 = *((_QWORD *)a2 + 1);
          if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_138;
          *((_QWORD *)this + 13) = *(_QWORD *)(*(_QWORD *)a2 + v39);
          goto LABEL_92;
        case 0xDu:
          *((_DWORD *)this + 45) |= 0x1000000u;
          v40 = *((_QWORD *)a2 + 1);
          if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_138;
          *((_DWORD *)this + 42) = *(_DWORD *)(*(_QWORD *)a2 + v40);
          goto LABEL_196;
        case 0xEu:
          *((_DWORD *)this + 45) |= 0x2000000u;
          v41 = *((_QWORD *)a2 + 1);
          v42 = *((_QWORD *)a2 + 2);
          v43 = *(_QWORD *)a2;
          if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
          {
            v44 = 0;
            v45 = 0;
            v46 = 0;
            do
            {
              v47 = v41 + 1;
              *((_QWORD *)a2 + 1) = v41 + 1;
              v48 = *(_BYTE *)(v43 + v41);
              v46 |= (unint64_t)(v48 & 0x7F) << v44;
              if ((v48 & 0x80) == 0)
                goto LABEL_216;
              v44 += 7;
              v41 = v47;
              v14 = v45++ > 8;
            }
            while (!v14);
LABEL_152:
            LODWORD(v46) = 0;
            goto LABEL_216;
          }
          v109 = 0;
          v110 = 0;
          v46 = 0;
          if (v42 <= v41)
            v42 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v42 == v41)
            {
              LODWORD(v46) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v111 = v41 + 1;
              v112 = *(_BYTE *)(v43 + v41);
              *((_QWORD *)a2 + 1) = v111;
              v46 |= (unint64_t)(v112 & 0x7F) << v109;
              if (v112 < 0)
              {
                v109 += 7;
                v41 = v111;
                v14 = v110++ > 8;
                if (v14)
                  goto LABEL_152;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v46) = 0;
            }
            break;
          }
LABEL_216:
          *((_DWORD *)this + 43) = v46;
          goto LABEL_198;
        case 0xFu:
          *((_DWORD *)this + 45) |= 0x20000u;
          v49 = *((_QWORD *)a2 + 1);
          if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_138;
          *((_DWORD *)this + 35) = *(_DWORD *)(*(_QWORD *)a2 + v49);
          goto LABEL_196;
        case 0x10u:
          *((_DWORD *)this + 45) |= 0x80000u;
          v50 = *((_QWORD *)a2 + 1);
          if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_138;
          *((_DWORD *)this + 37) = *(_DWORD *)(*(_QWORD *)a2 + v50);
          goto LABEL_196;
        case 0x11u:
          *((_DWORD *)this + 45) |= 0x40000u;
          v51 = *((_QWORD *)a2 + 1);
          if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_138;
          *((_DWORD *)this + 36) = *(_DWORD *)(*(_QWORD *)a2 + v51);
          goto LABEL_196;
        case 0x12u:
          *((_DWORD *)this + 45) |= 0x100u;
          v52 = *((_QWORD *)a2 + 1);
          if (v52 > 0xFFFFFFFFFFFFFFF7 || v52 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_138;
          *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v52);
          goto LABEL_92;
        case 0x13u:
          *((_DWORD *)this + 45) |= 8u;
          v53 = *((_QWORD *)a2 + 1);
          if (v53 > 0xFFFFFFFFFFFFFFF7 || v53 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_138;
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v53);
          goto LABEL_92;
        case 0x14u:
          *((_DWORD *)this + 45) |= 0x10u;
          v54 = *((_QWORD *)a2 + 1);
          if (v54 > 0xFFFFFFFFFFFFFFF7 || v54 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_138;
          *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v54);
LABEL_92:
          v55 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_197;
        case 0x15u:
          *((_DWORD *)this + 45) |= 0x200000u;
          v56 = *((_QWORD *)a2 + 1);
          v57 = *((_QWORD *)a2 + 2);
          v58 = *(_QWORD *)a2;
          if (v56 <= 0xFFFFFFFFFFFFFFF5 && v56 + 10 <= v57)
          {
            v59 = 0;
            v60 = 0;
            v61 = 0;
            do
            {
              v62 = v56 + 1;
              *((_QWORD *)a2 + 1) = v56 + 1;
              v63 = *(_BYTE *)(v58 + v56);
              v61 |= (unint64_t)(v63 & 0x7F) << v59;
              if ((v63 & 0x80) == 0)
                goto LABEL_219;
              v59 += 7;
              v56 = v62;
              v14 = v60++ > 8;
            }
            while (!v14);
LABEL_159:
            LODWORD(v61) = 0;
            goto LABEL_219;
          }
          v113 = 0;
          v114 = 0;
          v61 = 0;
          if (v57 <= v56)
            v57 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v57 == v56)
            {
              LODWORD(v61) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v115 = v56 + 1;
              v116 = *(_BYTE *)(v58 + v56);
              *((_QWORD *)a2 + 1) = v115;
              v61 |= (unint64_t)(v116 & 0x7F) << v113;
              if (v116 < 0)
              {
                v113 += 7;
                v56 = v115;
                v14 = v114++ > 8;
                if (v14)
                  goto LABEL_159;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v61) = 0;
            }
            break;
          }
LABEL_219:
          *((_DWORD *)this + 39) = v61;
          goto LABEL_198;
        case 0x16u:
          *((_DWORD *)this + 45) |= 0x4000000u;
          v64 = *((_QWORD *)a2 + 1);
          v65 = *((_QWORD *)a2 + 2);
          v66 = *(_QWORD *)a2;
          if (v64 <= 0xFFFFFFFFFFFFFFF5 && v64 + 10 <= v65)
          {
            v67 = 0;
            v68 = 0;
            v69 = 0;
            do
            {
              v70 = v64 + 1;
              *((_QWORD *)a2 + 1) = v64 + 1;
              v71 = *(_BYTE *)(v66 + v64);
              v69 |= (unint64_t)(v71 & 0x7F) << v67;
              if ((v71 & 0x80) == 0)
                goto LABEL_222;
              v67 += 7;
              v64 = v70;
              v14 = v68++ > 8;
            }
            while (!v14);
LABEL_166:
            LODWORD(v69) = 0;
            goto LABEL_222;
          }
          v117 = 0;
          v118 = 0;
          v69 = 0;
          if (v65 <= v64)
            v65 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v65 == v64)
            {
              LODWORD(v69) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v119 = v64 + 1;
              v120 = *(_BYTE *)(v66 + v64);
              *((_QWORD *)a2 + 1) = v119;
              v69 |= (unint64_t)(v120 & 0x7F) << v117;
              if (v120 < 0)
              {
                v117 += 7;
                v64 = v119;
                v14 = v118++ > 8;
                if (v14)
                  goto LABEL_166;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v69) = 0;
            }
            break;
          }
LABEL_222:
          *((_DWORD *)this + 44) = v69;
          goto LABEL_198;
        case 0x17u:
          *((_DWORD *)this + 45) |= 0x400000u;
          v72 = *((_QWORD *)a2 + 1);
          v73 = *((_QWORD *)a2 + 2);
          v74 = *(_QWORD *)a2;
          if (v72 <= 0xFFFFFFFFFFFFFFF5 && v72 + 10 <= v73)
          {
            v75 = 0;
            v76 = 0;
            v77 = 0;
            do
            {
              v78 = v72 + 1;
              *((_QWORD *)a2 + 1) = v72 + 1;
              v79 = *(_BYTE *)(v74 + v72);
              v77 |= (unint64_t)(v79 & 0x7F) << v75;
              if ((v79 & 0x80) == 0)
                goto LABEL_225;
              v75 += 7;
              v72 = v78;
              v14 = v76++ > 8;
            }
            while (!v14);
LABEL_173:
            LODWORD(v77) = 0;
            goto LABEL_225;
          }
          v121 = 0;
          v122 = 0;
          v77 = 0;
          if (v73 <= v72)
            v73 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v73 == v72)
            {
              LODWORD(v77) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v123 = v72 + 1;
              v124 = *(_BYTE *)(v74 + v72);
              *((_QWORD *)a2 + 1) = v123;
              v77 |= (unint64_t)(v124 & 0x7F) << v121;
              if (v124 < 0)
              {
                v121 += 7;
                v72 = v123;
                v14 = v122++ > 8;
                if (v14)
                  goto LABEL_173;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v77) = 0;
            }
            break;
          }
LABEL_225:
          *((_DWORD *)this + 40) = v77;
          goto LABEL_198;
        case 0x18u:
          *((_DWORD *)this + 45) |= 0x10000u;
          v80 = *((_QWORD *)a2 + 1);
          v81 = *((_QWORD *)a2 + 2);
          v82 = *(_QWORD *)a2;
          if (v80 <= 0xFFFFFFFFFFFFFFF5 && v80 + 10 <= v81)
          {
            v83 = 0;
            v84 = 0;
            v85 = 0;
            do
            {
              v86 = v80 + 1;
              *((_QWORD *)a2 + 1) = v80 + 1;
              v87 = *(_BYTE *)(v82 + v80);
              v85 |= (unint64_t)(v87 & 0x7F) << v83;
              if ((v87 & 0x80) == 0)
                goto LABEL_228;
              v83 += 7;
              v80 = v86;
              v14 = v84++ > 8;
            }
            while (!v14);
LABEL_180:
            LODWORD(v85) = 0;
            goto LABEL_228;
          }
          v125 = 0;
          v126 = 0;
          v85 = 0;
          if (v81 <= v80)
            v81 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v81 == v80)
            {
              LODWORD(v85) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v127 = v80 + 1;
              v128 = *(_BYTE *)(v82 + v80);
              *((_QWORD *)a2 + 1) = v127;
              v85 |= (unint64_t)(v128 & 0x7F) << v125;
              if (v128 < 0)
              {
                v125 += 7;
                v80 = v127;
                v14 = v126++ > 8;
                if (v14)
                  goto LABEL_180;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v85) = 0;
            }
            break;
          }
LABEL_228:
          *((_DWORD *)this + 34) = v85;
          goto LABEL_198;
        case 0x19u:
          *((_DWORD *)this + 45) |= 0x100000u;
          v88 = *((_QWORD *)a2 + 1);
          v89 = *((_QWORD *)a2 + 2);
          v90 = *(_QWORD *)a2;
          if (v88 <= 0xFFFFFFFFFFFFFFF5 && v88 + 10 <= v89)
          {
            v91 = 0;
            v92 = 0;
            v93 = 0;
            do
            {
              v94 = v88 + 1;
              *((_QWORD *)a2 + 1) = v88 + 1;
              v95 = *(_BYTE *)(v90 + v88);
              v93 |= (unint64_t)(v95 & 0x7F) << v91;
              if ((v95 & 0x80) == 0)
                goto LABEL_231;
              v91 += 7;
              v88 = v94;
              v14 = v92++ > 8;
            }
            while (!v14);
LABEL_187:
            LODWORD(v93) = 0;
            goto LABEL_231;
          }
          v129 = 0;
          v130 = 0;
          v93 = 0;
          if (v89 <= v88)
            v89 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v89 == v88)
            {
              LODWORD(v93) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v131 = v88 + 1;
              v132 = *(_BYTE *)(v90 + v88);
              *((_QWORD *)a2 + 1) = v131;
              v93 |= (unint64_t)(v132 & 0x7F) << v129;
              if (v132 < 0)
              {
                v129 += 7;
                v88 = v131;
                v14 = v130++ > 8;
                if (v14)
                  goto LABEL_187;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v93) = 0;
            }
            break;
          }
LABEL_231:
          *((_DWORD *)this + 38) = v93;
          goto LABEL_198;
        case 0x1Au:
          operator new();
        case 0x1Bu:
          *((_DWORD *)this + 45) |= 0x8000u;
          v96 = *((_QWORD *)a2 + 1);
          v97 = *((_QWORD *)a2 + 2);
          v98 = *(_QWORD *)a2;
          if (v96 <= 0xFFFFFFFFFFFFFFF5 && v96 + 10 <= v97)
          {
            v99 = 0;
            v100 = 0;
            v101 = 0;
            do
            {
              v102 = v96 + 1;
              *((_QWORD *)a2 + 1) = v96 + 1;
              v103 = *(_BYTE *)(v98 + v96);
              v101 |= (unint64_t)(v103 & 0x7F) << v99;
              if ((v103 & 0x80) == 0)
                goto LABEL_234;
              v99 += 7;
              v96 = v102;
              v14 = v100++ > 8;
            }
            while (!v14);
LABEL_194:
            LODWORD(v101) = 0;
            goto LABEL_234;
          }
          v133 = 0;
          v134 = 0;
          v101 = 0;
          if (v97 <= v96)
            v97 = *((_QWORD *)a2 + 1);
          break;
        case 0x1Cu:
          *((_DWORD *)this + 45) |= 0x4000u;
          v104 = *((_QWORD *)a2 + 1);
          if (v104 <= 0xFFFFFFFFFFFFFFFBLL && v104 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 32) = *(_DWORD *)(*(_QWORD *)a2 + v104);
LABEL_196:
            v55 = *((_QWORD *)a2 + 1) + 4;
LABEL_197:
            *((_QWORD *)a2 + 1) = v55;
          }
          else
          {
LABEL_138:
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_198;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_198;
      }
      while (1)
      {
        if (v97 == v96)
        {
          LODWORD(v101) = 0;
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_234;
        }
        v135 = v96 + 1;
        v136 = *(_BYTE *)(v98 + v96);
        *((_QWORD *)a2 + 1) = v135;
        v101 |= (unint64_t)(v136 & 0x7F) << v133;
        if ((v136 & 0x80) == 0)
          break;
        v133 += 7;
        v96 = v135;
        v14 = v134++ > 8;
        if (v14)
          goto LABEL_194;
      }
      if (*((_BYTE *)a2 + 24))
        LODWORD(v101) = 0;
LABEL_234:
      *((_DWORD *)this + 33) = v101;
LABEL_198:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MotionGPSLocation::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;
  const PB::Base *v5;
  int v6;

  v3 = this;
  v4 = *(_DWORD *)(this + 180);
  if ((v4 & 0x800) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 96), 1u);
    v4 = *(_DWORD *)(v3 + 180);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_35;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 2u);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x80) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 3u);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(double *)(v3 + 80), 4u);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x400) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(double *)(v3 + 88), 5u);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0)
      goto LABEL_8;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 6u);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 7u);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 1) == 0)
      goto LABEL_10;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 8u);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 1) == 0)
  {
LABEL_10:
    if ((v4 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 9u);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x2000) == 0)
  {
LABEL_11:
    if ((v4 & 0x800000) == 0)
      goto LABEL_12;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(double *)(v3 + 120), 0xAu);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x800000) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 164), 0xBu);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_14;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(double *)(v3 + 104), 0xCu);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_15;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 168), 0xDu);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000) == 0)
      goto LABEL_16;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 172), 0xEu);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x20000) == 0)
  {
LABEL_16:
    if ((v4 & 0x80000) == 0)
      goto LABEL_17;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 140), 0xFu);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x80000) == 0)
  {
LABEL_17:
    if ((v4 & 0x40000) == 0)
      goto LABEL_18;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 148), 0x10u);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x40000) == 0)
  {
LABEL_18:
    if ((v4 & 0x100) == 0)
      goto LABEL_19;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 144), 0x11u);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x100) == 0)
  {
LABEL_19:
    if ((v4 & 8) == 0)
      goto LABEL_20;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 0x12u);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 8) == 0)
  {
LABEL_20:
    if ((v4 & 0x10) == 0)
      goto LABEL_21;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 0x13u);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x10) == 0)
  {
LABEL_21:
    if ((v4 & 0x200000) == 0)
      goto LABEL_22;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 0x14u);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x200000) == 0)
  {
LABEL_22:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_23;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 156), 0x15u);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 176), 0x16u);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x400000) == 0)
  {
LABEL_24:
    if ((v4 & 0x10000) == 0)
      goto LABEL_25;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 160), 0x17u);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x10000) == 0)
  {
LABEL_25:
    if ((v4 & 0x100000) == 0)
      goto LABEL_27;
    goto LABEL_26;
  }
LABEL_56:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 136), 0x18u);
  if ((*(_DWORD *)(v3 + 180) & 0x100000) != 0)
LABEL_26:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 152), 0x19u);
LABEL_27:
  v5 = *(const PB::Base **)(v3 + 112);
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5, 0x1Au);
  v6 = *(_DWORD *)(v3 + 180);
  if ((v6 & 0x8000) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 132), 0x1Bu);
    v6 = *(_DWORD *)(v3 + 180);
  }
  if ((v6 & 0x4000) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 128), 0x1Cu);
  return this;
}

unint64_t CMMsl::MotionGPSLocation::hash_value(CMMsl::MotionGPSLocation *this)
{
  CMMsl::MotionGPSLocation *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  CMMsl::MotionGPSLocation *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v1 = this;
  v2 = *((_DWORD *)this + 45);
  if ((v2 & 0x800) == 0)
  {
    v3 = 0;
    if ((v2 & 0x40) != 0)
      goto LABEL_3;
LABEL_82:
    v4 = 0;
    if ((v2 & 0x80) != 0)
      goto LABEL_7;
LABEL_83:
    v5 = 0;
    if ((v2 & 0x200) != 0)
      goto LABEL_11;
LABEL_84:
    v6 = 0;
    if ((v2 & 0x400) != 0)
      goto LABEL_15;
LABEL_85:
    v7 = 0;
    if ((v2 & 0x20) != 0)
      goto LABEL_19;
LABEL_86:
    v8 = 0;
    if ((v2 & 2) != 0)
      goto LABEL_23;
LABEL_87:
    v9 = 0;
    if ((v2 & 4) != 0)
      goto LABEL_27;
LABEL_88:
    v10 = 0;
    if ((v2 & 1) != 0)
      goto LABEL_31;
LABEL_89:
    v11 = 0;
    if ((v2 & 0x2000) != 0)
      goto LABEL_35;
LABEL_90:
    v12 = 0;
    if ((v2 & 0x800000) != 0)
      goto LABEL_39;
    goto LABEL_91;
  }
  if (*((double *)this + 12) == 0.0)
    v3 = 0;
  else
    v3 = *((_QWORD *)this + 12);
  if ((v2 & 0x40) == 0)
    goto LABEL_82;
LABEL_3:
  if (*((double *)this + 7) == 0.0)
    v4 = 0;
  else
    v4 = *((_QWORD *)this + 7);
  if ((v2 & 0x80) == 0)
    goto LABEL_83;
LABEL_7:
  if (*((double *)this + 8) == 0.0)
    v5 = 0;
  else
    v5 = *((_QWORD *)this + 8);
  if ((v2 & 0x200) == 0)
    goto LABEL_84;
LABEL_11:
  if (*((double *)this + 10) == 0.0)
    v6 = 0;
  else
    v6 = *((_QWORD *)this + 10);
  if ((v2 & 0x400) == 0)
    goto LABEL_85;
LABEL_15:
  if (*((double *)this + 11) == 0.0)
    v7 = 0;
  else
    v7 = *((_QWORD *)this + 11);
  if ((v2 & 0x20) == 0)
    goto LABEL_86;
LABEL_19:
  if (*((double *)this + 6) == 0.0)
    v8 = 0;
  else
    v8 = *((_QWORD *)this + 6);
  if ((v2 & 2) == 0)
    goto LABEL_87;
LABEL_23:
  if (*((double *)this + 2) == 0.0)
    v9 = 0;
  else
    v9 = *((_QWORD *)this + 2);
  if ((v2 & 4) == 0)
    goto LABEL_88;
LABEL_27:
  if (*((double *)this + 3) == 0.0)
    v10 = 0;
  else
    v10 = *((_QWORD *)this + 3);
  if ((v2 & 1) == 0)
    goto LABEL_89;
LABEL_31:
  if (*((double *)this + 1) == 0.0)
    v11 = 0;
  else
    v11 = *((_QWORD *)this + 1);
  if ((v2 & 0x2000) == 0)
    goto LABEL_90;
LABEL_35:
  if (*((double *)this + 15) == 0.0)
    v12 = 0;
  else
    v12 = *((_QWORD *)this + 15);
  if ((v2 & 0x800000) != 0)
  {
LABEL_39:
    v13 = *((unsigned int *)this + 41);
    if ((v2 & 0x1000) != 0)
      goto LABEL_40;
LABEL_92:
    v14 = 0;
    if ((v2 & 0x1000000) != 0)
      goto LABEL_44;
LABEL_93:
    v16 = 0;
    if ((v2 & 0x2000000) != 0)
      goto LABEL_48;
    goto LABEL_94;
  }
LABEL_91:
  v13 = 0;
  if ((v2 & 0x1000) == 0)
    goto LABEL_92;
LABEL_40:
  if (*((double *)this + 13) == 0.0)
    v14 = 0;
  else
    v14 = *((_QWORD *)this + 13);
  if ((v2 & 0x1000000) == 0)
    goto LABEL_93;
LABEL_44:
  v15 = *((float *)this + 42);
  if (v15 == 0.0)
    v16 = 0;
  else
    v16 = LODWORD(v15);
  if ((v2 & 0x2000000) != 0)
  {
LABEL_48:
    v17 = *((unsigned int *)this + 43);
    if ((v2 & 0x20000) != 0)
      goto LABEL_49;
LABEL_95:
    v19 = 0;
    if ((v2 & 0x80000) != 0)
      goto LABEL_53;
LABEL_96:
    v21 = 0;
    if ((v2 & 0x40000) != 0)
      goto LABEL_57;
LABEL_97:
    v23 = 0;
    if ((v2 & 0x100) != 0)
      goto LABEL_61;
LABEL_98:
    v24 = 0;
    if ((v2 & 8) != 0)
      goto LABEL_65;
LABEL_99:
    v25 = 0;
    if ((v2 & 0x10) != 0)
      goto LABEL_69;
LABEL_100:
    v26 = 0;
    if ((v2 & 0x200000) != 0)
      goto LABEL_73;
    goto LABEL_101;
  }
LABEL_94:
  v17 = 0;
  if ((v2 & 0x20000) == 0)
    goto LABEL_95;
LABEL_49:
  v18 = *((float *)this + 35);
  if (v18 == 0.0)
    v19 = 0;
  else
    v19 = LODWORD(v18);
  if ((v2 & 0x80000) == 0)
    goto LABEL_96;
LABEL_53:
  v20 = *((float *)this + 37);
  if (v20 == 0.0)
    v21 = 0;
  else
    v21 = LODWORD(v20);
  if ((v2 & 0x40000) == 0)
    goto LABEL_97;
LABEL_57:
  v22 = *((float *)this + 36);
  if (v22 == 0.0)
    v23 = 0;
  else
    v23 = LODWORD(v22);
  if ((v2 & 0x100) == 0)
    goto LABEL_98;
LABEL_61:
  if (*((double *)this + 9) == 0.0)
    v24 = 0;
  else
    v24 = *((_QWORD *)this + 9);
  if ((v2 & 8) == 0)
    goto LABEL_99;
LABEL_65:
  if (*((double *)this + 4) == 0.0)
    v25 = 0;
  else
    v25 = *((_QWORD *)this + 4);
  if ((v2 & 0x10) == 0)
    goto LABEL_100;
LABEL_69:
  if (*((double *)this + 5) == 0.0)
    v26 = 0;
  else
    v26 = *((_QWORD *)this + 5);
  if ((v2 & 0x200000) != 0)
  {
LABEL_73:
    v27 = *((unsigned int *)this + 39);
    if ((v2 & 0x4000000) != 0)
      goto LABEL_74;
    goto LABEL_102;
  }
LABEL_101:
  v27 = 0;
  if ((v2 & 0x4000000) != 0)
  {
LABEL_74:
    v28 = *((int *)this + 44);
    if ((v2 & 0x400000) != 0)
      goto LABEL_75;
    goto LABEL_103;
  }
LABEL_102:
  v28 = 0;
  if ((v2 & 0x400000) != 0)
  {
LABEL_75:
    v29 = *((int *)this + 40);
    if ((v2 & 0x10000) != 0)
      goto LABEL_76;
LABEL_104:
    v30 = 0;
    if ((v2 & 0x100000) != 0)
      goto LABEL_77;
    goto LABEL_105;
  }
LABEL_103:
  v29 = 0;
  if ((v2 & 0x10000) == 0)
    goto LABEL_104;
LABEL_76:
  v30 = *((unsigned int *)this + 34);
  if ((v2 & 0x100000) != 0)
  {
LABEL_77:
    v61 = *((int *)this + 38);
    goto LABEL_106;
  }
LABEL_105:
  v61 = 0;
LABEL_106:
  v31 = *((_QWORD *)this + 14);
  if (v31)
  {
    v58 = v3;
    v50 = v25;
    v32 = v4;
    v56 = v5;
    v48 = v27;
    v33 = v6;
    v54 = v7;
    v45 = v30;
    v46 = v29;
    v34 = v8;
    v35 = v9;
    v52 = v23;
    v36 = v10;
    v60 = v11;
    v53 = v21;
    v37 = v1;
    v59 = v12;
    v51 = v24;
    v38 = v13;
    v57 = v14;
    v49 = v26;
    v39 = v16;
    v55 = v17;
    v47 = v28;
    v40 = v19;
    v31 = CMMsl::TrackRunData::hash_value((CMMsl::TrackRunData *)v31);
    v19 = v40;
    v7 = v54;
    v17 = v55;
    v16 = v39;
    v5 = v56;
    v14 = v57;
    v13 = v38;
    v12 = v59;
    v11 = v60;
    v1 = v37;
    v21 = v53;
    v10 = v36;
    v24 = v51;
    v23 = v52;
    v9 = v35;
    v30 = v45;
    v8 = v34;
    v29 = v46;
    v28 = v47;
    v6 = v33;
    v27 = v48;
    v26 = v49;
    v4 = v32;
    v25 = v50;
    v3 = v58;
  }
  if ((v2 & 0x8000) == 0)
  {
    v41 = 0;
    if ((v2 & 0x4000) != 0)
      goto LABEL_110;
LABEL_114:
    v43 = 0;
    return v4 ^ v3 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v16 ^ v17 ^ v19 ^ v21 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30 ^ v61 ^ v31 ^ v41 ^ v43;
  }
  v41 = *((int *)v1 + 33);
  if ((v2 & 0x4000) == 0)
    goto LABEL_114;
LABEL_110:
  v42 = *((float *)v1 + 32);
  v43 = LODWORD(v42);
  if (v42 == 0.0)
    v43 = 0;
  return v4 ^ v3 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v16 ^ v17 ^ v19 ^ v21 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30 ^ v61 ^ v31 ^ v41 ^ v43;
}

uint64_t CMMsl::MotionGPSLocation::makeTrackRunData(uint64_t this)
{
  if (!*(_QWORD *)(this + 112))
    operator new();
  return this;
}

void CMMsl::MotionHint::~MotionHint(CMMsl::MotionHint *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::MotionHint::MotionHint(uint64_t this, const CMMsl::MotionHint *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;

  *(_QWORD *)this = off_100352C18;
  *(_DWORD *)(this + 24) = 0;
  v2 = *((_BYTE *)a2 + 24);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 24) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 24);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 24) & 2) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *(_BYTE *)(this + 24) = v3;
    *(_DWORD *)(this + 16) = v5;
    v2 = *((_BYTE *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *((_DWORD *)a2 + 5);
    *(_BYTE *)(this + 24) = v3 | 4;
    *(_DWORD *)(this + 20) = v6;
  }
  return this;
}

uint64_t CMMsl::MotionHint::operator=(uint64_t a1, uint64_t a2, double a3)
{
  int v3;
  int v4;
  char v6;
  char v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  int v13;

  if (a1 != a2)
  {
    v12[0] = off_100352C18;
    v13 = 0;
    v6 = *(_BYTE *)(a2 + 24);
    if ((v6 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      v7 = 1;
      LOBYTE(v13) = 1;
      if ((v6 & 2) != 0)
      {
LABEL_4:
        v3 = *(_DWORD *)(a2 + 16);
        v7 |= 2u;
        LOBYTE(v13) = v7;
        if ((v6 & 4) != 0)
          goto LABEL_8;
        goto LABEL_9;
      }
    }
    else
    {
      v7 = 0;
      if ((*(_BYTE *)(a2 + 24) & 2) != 0)
        goto LABEL_4;
    }
    if ((v6 & 4) != 0)
    {
LABEL_8:
      v4 = *(_DWORD *)(a2 + 20);
      LOBYTE(v13) = v7 | 4;
    }
LABEL_9:
    v8 = v13;
    v13 = *(_DWORD *)(a1 + 24);
    v9 = *(_QWORD *)(a1 + 8);
    v10 = *(_QWORD *)(a1 + 16);
    *(double *)(a1 + 8) = a3;
    *(_DWORD *)(a1 + 16) = v3;
    *(_DWORD *)(a1 + 20) = v4;
    *(_DWORD *)(a1 + 24) = v8;
    v12[1] = v9;
    v12[2] = v10;
    PB::Base::~Base((PB::Base *)v12);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::MotionHint *a2, CMMsl::MotionHint *a3)
{
  int v3;
  double result;
  int v5;
  int v6;

  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  v6 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v6;
  return result;
}

double CMMsl::MotionHint::MotionHint(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100352C18;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100352C18;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return result;
}

uint64_t CMMsl::MotionHint::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  int v8;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v7[0] = off_100352C18;
    v8 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v3;
    v7[1] = v4;
    v7[2] = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

uint64_t CMMsl::MotionHint::formatText(CMMsl::MotionHint *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 2) == 0)
  {
    if ((*((_BYTE *)this + 24) & 1) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    if ((*((_BYTE *)this + 24) & 4) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_4;
  }
  PB::TextFormatter::format(a2, "event", *((_DWORD *)this + 4));
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 1) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "value", *((_DWORD *)this + 5));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MotionHint::readFrom(CMMsl::MotionHint *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t result;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((_BYTE *)this + 24) |= 4u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v34 = 0;
          v35 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_62;
            }
            v36 = v21++;
            v37 = *(_BYTE *)(v22 + v36);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0)
              break;
            v34 += 7;
            v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_61;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v25) = 0;
LABEL_61:
          v2 = v36 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_62:
        *((_DWORD *)this + 5) = v25;
      }
      else if ((_DWORD)v20 == 2)
      {
        *((_BYTE *)this + 24) |= 2u;
        v27 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v28 = *(_QWORD *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v31 = 0;
          if (v2 <= v27)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_67;
            }
            v40 = v27++;
            v41 = *(_BYTE *)(v28 + v40);
            *((_QWORD *)a2 + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_66;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v31) = 0;
LABEL_66:
          v2 = v40 + 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v2 = v27 + 1;
            *((_QWORD *)a2 + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v2;
            v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_67:
        *((_DWORD *)this + 4) = v31;
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 24) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MotionHint::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 24);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        return this;
      return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 3u);
    }
  }
  else if ((*(_BYTE *)(this + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 2u);
  if ((*(_BYTE *)(v3 + 24) & 4) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 3u);
  return this;
}

uint64_t CMMsl::MotionHint::hash_value(CMMsl::MotionHint *this)
{
  double v1;
  uint64_t v2;
  uint64_t v3;

  if ((*((_BYTE *)this + 24) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 24) & 2) != 0)
      goto LABEL_3;
LABEL_8:
    v2 = 0;
    if ((*((_BYTE *)this + 24) & 4) != 0)
      goto LABEL_4;
LABEL_9:
    v3 = 0;
    return v2 ^ *(_QWORD *)&v1 ^ v3;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 24) & 2) == 0)
    goto LABEL_8;
LABEL_3:
  v2 = *((unsigned int *)this + 4);
  if ((*((_BYTE *)this + 24) & 4) == 0)
    goto LABEL_9;
LABEL_4:
  v3 = *((unsigned int *)this + 5);
  return v2 ^ *(_QWORD *)&v1 ^ v3;
}

void CMMsl::MotionLocation::~MotionLocation(CMMsl::MotionLocation *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::MotionLocation::MotionLocation(uint64_t this, const CMMsl::MotionLocation *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;

  *(_QWORD *)this = off_100352C50;
  *(_DWORD *)(this + 220) = 0;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x40000) != 0)
  {
    v4 = *((_QWORD *)a2 + 19);
    v3 = 0x40000;
    *(_DWORD *)(this + 220) = 0x40000;
    *(_QWORD *)(this + 152) = v4;
    v2 = *((_DWORD *)a2 + 55);
    if ((v2 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x100) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 9);
    v3 |= 0x100u;
    *(_DWORD *)(this + 220) = v3;
    *(_QWORD *)(this + 72) = v5;
    v2 = *((_DWORD *)a2 + 55);
  }
LABEL_6:
  if ((v2 & 0x200) != 0)
  {
    v6 = *((_QWORD *)a2 + 10);
    v3 |= 0x200u;
    *(_DWORD *)(this + 220) = v3;
    *(_QWORD *)(this + 80) = v6;
    v2 = *((_DWORD *)a2 + 55);
    if ((v2 & 0x10000) == 0)
    {
LABEL_8:
      if ((v2 & 0x20000) == 0)
        goto LABEL_9;
      goto LABEL_39;
    }
  }
  else if ((v2 & 0x10000) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 17);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 220) = v3;
  *(_QWORD *)(this + 136) = v7;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x20000) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_40;
  }
LABEL_39:
  v8 = *((_QWORD *)a2 + 18);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 220) = v3;
  *(_QWORD *)(this + 144) = v8;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0)
      goto LABEL_11;
    goto LABEL_41;
  }
LABEL_40:
  v9 = *((_QWORD *)a2 + 8);
  v3 |= 0x80u;
  *(_DWORD *)(this + 220) = v3;
  *(_QWORD *)(this + 64) = v9;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 2) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0)
      goto LABEL_12;
    goto LABEL_42;
  }
LABEL_41:
  v10 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 220) = v3;
  *(_QWORD *)(this + 16) = v10;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 1) == 0)
      goto LABEL_13;
    goto LABEL_43;
  }
LABEL_42:
  v11 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *(_DWORD *)(this + 220) = v3;
  *(_QWORD *)(this + 24) = v11;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 1) == 0)
  {
LABEL_13:
    if ((v2 & 0x100000) == 0)
      goto LABEL_14;
    goto LABEL_44;
  }
LABEL_43:
  v12 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 220) = v3;
  *(_QWORD *)(this + 8) = v12;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x100000) == 0)
  {
LABEL_14:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_15;
    goto LABEL_45;
  }
LABEL_44:
  v13 = *((_QWORD *)a2 + 21);
  v3 |= 0x100000u;
  *(_DWORD *)(this + 220) = v3;
  *(_QWORD *)(this + 168) = v13;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x80000) == 0)
      goto LABEL_16;
    goto LABEL_46;
  }
LABEL_45:
  v14 = *((_DWORD *)a2 + 51);
  v3 |= 0x10000000u;
  *(_DWORD *)(this + 220) = v3;
  *(_DWORD *)(this + 204) = v14;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x80000) == 0)
  {
LABEL_16:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_17;
    goto LABEL_47;
  }
LABEL_46:
  v15 = *((_QWORD *)a2 + 20);
  v3 |= 0x80000u;
  *(_DWORD *)(this + 220) = v3;
  *(_QWORD *)(this + 160) = v15;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_18;
    goto LABEL_48;
  }
LABEL_47:
  v16 = *((_DWORD *)a2 + 52);
  v3 |= 0x20000000u;
  *(_DWORD *)(this + 220) = v3;
  *(_DWORD *)(this + 208) = v16;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x200000) == 0)
      goto LABEL_19;
    goto LABEL_49;
  }
LABEL_48:
  v17 = *((_DWORD *)a2 + 53);
  v3 |= 0x40000000u;
  *(_DWORD *)(this + 220) = v3;
  *(_DWORD *)(this + 212) = v17;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x200000) == 0)
  {
LABEL_19:
    if ((v2 & 0x800000) == 0)
      goto LABEL_20;
    goto LABEL_50;
  }
LABEL_49:
  v18 = *((_DWORD *)a2 + 44);
  v3 |= 0x200000u;
  *(_DWORD *)(this + 220) = v3;
  *(_DWORD *)(this + 176) = v18;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x800000) == 0)
  {
LABEL_20:
    if ((v2 & 0x400000) == 0)
      goto LABEL_21;
    goto LABEL_51;
  }
LABEL_50:
  v19 = *((_DWORD *)a2 + 46);
  v3 |= 0x800000u;
  *(_DWORD *)(this + 220) = v3;
  *(_DWORD *)(this + 184) = v19;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x400000) == 0)
  {
LABEL_21:
    if ((v2 & 0x800) == 0)
      goto LABEL_22;
    goto LABEL_52;
  }
LABEL_51:
  v20 = *((_DWORD *)a2 + 45);
  v3 |= 0x400000u;
  *(_DWORD *)(this + 220) = v3;
  *(_DWORD *)(this + 180) = v20;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x800) == 0)
  {
LABEL_22:
    if ((v2 & 8) == 0)
      goto LABEL_23;
    goto LABEL_53;
  }
LABEL_52:
  v21 = *((_QWORD *)a2 + 12);
  v3 |= 0x800u;
  *(_DWORD *)(this + 220) = v3;
  *(_QWORD *)(this + 96) = v21;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 8) == 0)
  {
LABEL_23:
    if ((v2 & 0x10) == 0)
      goto LABEL_24;
    goto LABEL_54;
  }
LABEL_53:
  v22 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_DWORD *)(this + 220) = v3;
  *(_QWORD *)(this + 32) = v22;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x10) == 0)
  {
LABEL_24:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_25;
    goto LABEL_55;
  }
LABEL_54:
  v23 = *((_QWORD *)a2 + 5);
  v3 |= 0x10u;
  *(_DWORD *)(this + 220) = v3;
  *(_QWORD *)(this + 40) = v23;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_26;
    goto LABEL_56;
  }
LABEL_55:
  v24 = *((_DWORD *)a2 + 48);
  v3 |= 0x2000000u;
  *(_DWORD *)(this + 220) = v3;
  *(_DWORD *)(this + 192) = v24;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_26:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_27;
    goto LABEL_57;
  }
LABEL_56:
  v25 = *((_DWORD *)a2 + 50);
  v3 |= 0x8000000u;
  *(_DWORD *)(this + 220) = v3;
  *(_DWORD *)(this + 200) = v25;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_27:
    if ((v2 & 0x20) == 0)
      goto LABEL_28;
    goto LABEL_58;
  }
LABEL_57:
  v26 = *((_DWORD *)a2 + 47);
  v3 |= 0x1000000u;
  *(_DWORD *)(this + 220) = v3;
  *(_DWORD *)(this + 188) = v26;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x20) == 0)
  {
LABEL_28:
    if ((v2 & 0x40) == 0)
      goto LABEL_29;
    goto LABEL_59;
  }
LABEL_58:
  v27 = *((_QWORD *)a2 + 6);
  v3 |= 0x20u;
  *(_DWORD *)(this + 220) = v3;
  *(_QWORD *)(this + 48) = v27;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x40) == 0)
  {
LABEL_29:
    if ((v2 & 0x8000) == 0)
      goto LABEL_30;
    goto LABEL_60;
  }
LABEL_59:
  v28 = *((_QWORD *)a2 + 7);
  v3 |= 0x40u;
  *(_DWORD *)(this + 220) = v3;
  *(_QWORD *)(this + 56) = v28;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x8000) == 0)
  {
LABEL_30:
    if ((v2 & 0x400) == 0)
      goto LABEL_31;
    goto LABEL_61;
  }
LABEL_60:
  v29 = *((_QWORD *)a2 + 16);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 220) = v3;
  *(_QWORD *)(this + 128) = v29;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x400) == 0)
  {
LABEL_31:
    if ((v2 & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_62;
  }
LABEL_61:
  v30 = *((_QWORD *)a2 + 11);
  v3 |= 0x400u;
  *(_DWORD *)(this + 220) = v3;
  *(_QWORD *)(this + 88) = v30;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x1000) == 0)
      goto LABEL_33;
    goto LABEL_63;
  }
LABEL_62:
  v31 = *((_BYTE *)a2 + 216);
  v3 |= 0x80000000;
  *(_DWORD *)(this + 220) = v3;
  *(_BYTE *)(this + 216) = v31;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x1000) == 0)
  {
LABEL_33:
    if ((v2 & 0x4000) == 0)
      goto LABEL_34;
    goto LABEL_64;
  }
LABEL_63:
  v32 = *((_QWORD *)a2 + 13);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 220) = v3;
  *(_QWORD *)(this + 104) = v32;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x4000) == 0)
  {
LABEL_34:
    if ((v2 & 0x2000) == 0)
      goto LABEL_35;
    goto LABEL_65;
  }
LABEL_64:
  v33 = *((_QWORD *)a2 + 15);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 220) = v3;
  *(_QWORD *)(this + 120) = v33;
  v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x2000) == 0)
  {
LABEL_35:
    if ((v2 & 0x4000000) == 0)
      return this;
LABEL_66:
    v35 = *((_DWORD *)a2 + 49);
    *(_DWORD *)(this + 220) = v3 | 0x4000000;
    *(_DWORD *)(this + 196) = v35;
    return this;
  }
LABEL_65:
  v34 = *((_QWORD *)a2 + 14);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 220) = v3;
  *(_QWORD *)(this + 112) = v34;
  if ((*((_DWORD *)a2 + 55) & 0x4000000) != 0)
    goto LABEL_66;
  return this;
}

CMMsl *CMMsl::MotionLocation::operator=(CMMsl *a1, const CMMsl::MotionLocation *a2)
{
  CMMsl::MotionLocation *v3;
  _BYTE v5[224];

  if (a1 != a2)
  {
    CMMsl::MotionLocation::MotionLocation((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::MotionLocation *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::MotionLocation *a2, CMMsl::MotionLocation *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double result;
  int v30;

  v3 = *((_DWORD *)this + 55);
  *((_DWORD *)this + 55) = *((_DWORD *)a2 + 55);
  *((_DWORD *)a2 + 55) = v3;
  v4 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v4;
  v5 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v5;
  v6 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v6;
  v7 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v7;
  v8 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v8;
  v9 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v9;
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v10;
  v11 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v11;
  v12 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v12;
  v13 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
  *((_QWORD *)a2 + 21) = v13;
  v14 = *((_DWORD *)this + 51);
  *((_DWORD *)this + 51) = *((_DWORD *)a2 + 51);
  *((_DWORD *)a2 + 51) = v14;
  v15 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 20) = v15;
  LODWORD(v15) = *((_DWORD *)this + 52);
  *((_DWORD *)this + 52) = *((_DWORD *)a2 + 52);
  *((_DWORD *)a2 + 52) = v15;
  v16 = *((_DWORD *)this + 53);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 53);
  *((_DWORD *)a2 + 53) = v16;
  LODWORD(v15) = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v15;
  LODWORD(v15) = *((_DWORD *)this + 46);
  *((_DWORD *)this + 46) = *((_DWORD *)a2 + 46);
  *((_DWORD *)a2 + 46) = v15;
  LODWORD(v15) = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v15;
  v17 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v17;
  v18 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v18;
  v19 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v19;
  v20 = *((_DWORD *)this + 48);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_DWORD *)a2 + 48) = v20;
  v21 = *((_DWORD *)this + 50);
  *((_DWORD *)this + 50) = *((_DWORD *)a2 + 50);
  *((_DWORD *)a2 + 50) = v21;
  v22 = *((_DWORD *)this + 47);
  *((_DWORD *)this + 47) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = v22;
  v23 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v23;
  v24 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v24;
  v25 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v25;
  v26 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v26;
  LOBYTE(v22) = *((_BYTE *)this + 216);
  *((_BYTE *)this + 216) = *((_BYTE *)a2 + 216);
  *((_BYTE *)a2 + 216) = v22;
  v27 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v27;
  v28 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v28;
  result = *((double *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((double *)a2 + 14) = result;
  v30 = *((_DWORD *)this + 49);
  *((_DWORD *)this + 49) = *((_DWORD *)a2 + 49);
  *((_DWORD *)a2 + 49) = v30;
  return result;
}

double CMMsl::MotionLocation::MotionLocation(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100352C50;
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(_DWORD *)(a2 + 220) = 0;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  result = *(double *)(a2 + 112);
  *(double *)(a1 + 112) = result;
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  return result;
}

CMMsl *CMMsl::MotionLocation::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::MotionLocation *v3;
  _BYTE v5[224];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::MotionLocation::MotionLocation((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::MotionLocation *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::MotionLocation::formatText(CMMsl::MotionLocation *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "altitude", *((double *)this + 1));
    v5 = *((_DWORD *)this + 55);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_37;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "course", *((double *)this + 2));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "courseAccuracy", *((double *)this + 3));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "deltaDistance", *((double *)this + 4));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "deltaDistanceAccuracy", *((double *)this + 5));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "groundAltitude", *((double *)this + 6));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "groundAltitudeUncertainty", *((double *)this + 7));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x200000) == 0)
      goto LABEL_10;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "horizontalAccuracy", *((double *)this + 8));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x200000) == 0)
  {
LABEL_10:
    if ((v5 & 0x400000) == 0)
      goto LABEL_11;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "horzUncSemiMaj", *((float *)this + 44));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x400000) == 0)
  {
LABEL_11:
    if ((v5 & 0x800000) == 0)
      goto LABEL_12;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "horzUncSemiMajAz", *((float *)this + 45));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x800000) == 0)
  {
LABEL_12:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "horzUncSemiMin", *((float *)this + 46));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "isPrefilteredLocation", *((_BYTE *)this + 216));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x100) == 0)
  {
LABEL_14:
    if ((v5 & 0x200) == 0)
      goto LABEL_15;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "latitude", *((double *)this + 9));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x200) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_16;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "longitude", *((double *)this + 10));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x400) == 0)
      goto LABEL_17;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "matchQuality", *((_DWORD *)this + 47));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x400) == 0)
  {
LABEL_17:
    if ((v5 & 0x800) == 0)
      goto LABEL_18;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "maxAbsSlope", *((double *)this + 11));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x800) == 0)
  {
LABEL_18:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_19;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "odometer", *((double *)this + 12));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_19:
    if ((v5 & 0x1000) == 0)
      goto LABEL_20;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "originDevice", *((_DWORD *)this + 48));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x1000) == 0)
  {
LABEL_20:
    if ((v5 & 0x2000) == 0)
      goto LABEL_21;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "rawAltitude", *((double *)this + 13));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x2000) == 0)
  {
LABEL_21:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_22;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "rawUndulation", *((double *)this + 14));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_22:
    if ((v5 & 0x4000) == 0)
      goto LABEL_23;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "rawUndulationModel", *((_DWORD *)this + 49));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x4000) == 0)
  {
LABEL_23:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_24;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "rawVerticalAccuracy", *((double *)this + 15));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_24:
    if ((v5 & 0x8000) == 0)
      goto LABEL_25;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "signalEnvironment", *((_DWORD *)this + 50));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x8000) == 0)
  {
LABEL_25:
    if ((v5 & 0x10000) == 0)
      goto LABEL_26;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "slope", *((double *)this + 16));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x10000) == 0)
  {
LABEL_26:
    if ((v5 & 0x20000) == 0)
      goto LABEL_27;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "speed", *((double *)this + 17));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x20000) == 0)
  {
LABEL_27:
    if ((v5 & 0x40000) == 0)
      goto LABEL_28;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "speedAccuracy", *((double *)this + 18));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x40000) == 0)
  {
LABEL_28:
    if ((v5 & 0x80000) == 0)
      goto LABEL_29;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 19));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x80000) == 0)
  {
LABEL_29:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_30;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "timestampGps", *((double *)this + 20));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_31;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "type", *((_DWORD *)this + 51));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_32;
LABEL_65:
    PB::TextFormatter::format(a2, "undulationModel", *((_DWORD *)this + 53));
    if ((*((_DWORD *)this + 55) & 0x100000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_33;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "undulation", *((float *)this + 52));
  v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x40000000) != 0)
    goto LABEL_65;
LABEL_32:
  if ((v5 & 0x100000) != 0)
LABEL_33:
    PB::TextFormatter::format(a2, "verticalAccuracy", *((double *)this + 21));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MotionLocation::readFrom(CMMsl::MotionLocation *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  int v51;
  BOOL v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  unint64_t v81;
  char v82;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 55) |= 0x40000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_136;
              *((_QWORD *)this + 19) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_189;
            case 2u:
              *((_DWORD *)this + 55) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_136;
              *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_189;
            case 3u:
              *((_DWORD *)this + 55) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_136;
              *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_189;
            case 4u:
              *((_DWORD *)this + 55) |= 0x10000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_136;
              *((_QWORD *)this + 17) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_189;
            case 5u:
              *((_DWORD *)this + 55) |= 0x20000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_136;
              *((_QWORD *)this + 18) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_189;
            case 6u:
              *((_DWORD *)this + 55) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_136;
              *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_189;
            case 7u:
              *((_DWORD *)this + 55) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_136;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_189;
            case 8u:
              *((_DWORD *)this + 55) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_136;
              *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_189;
            case 9u:
              *((_DWORD *)this + 55) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_136;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_189;
            case 0xAu:
              *((_DWORD *)this + 55) |= 0x100000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_136;
              *((_QWORD *)this + 21) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_189;
            case 0xBu:
              *((_DWORD *)this + 55) |= 0x10000000u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_200;
                  }
                  v61 = v21++;
                  v62 = *(_BYTE *)(v22 + v61);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_199:
                    v2 = v61 + 1;
                    goto LABEL_200;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_199;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_200;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_200:
              *((_DWORD *)this + 51) = v25;
              goto LABEL_191;
            case 0xCu:
              *((_DWORD *)this + 55) |= 0x80000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_136;
              *((_QWORD *)this + 20) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_189;
            case 0xDu:
              *((_DWORD *)this + 55) |= 0x20000000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_136;
              *((_DWORD *)this + 52) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_83;
            case 0xEu:
              *((_DWORD *)this + 55) |= 0x40000000u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_205;
                  }
                  v65 = v27++;
                  v66 = *(_BYTE *)(v28 + v65);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_204:
                    v2 = v65 + 1;
                    goto LABEL_205;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_204;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_205;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_205:
              *((_DWORD *)this + 53) = v31;
              goto LABEL_191;
            case 0xFu:
              *((_DWORD *)this + 55) |= 0x200000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_136;
              *((_DWORD *)this + 44) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_83;
            case 0x10u:
              *((_DWORD *)this + 55) |= 0x800000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_136;
              *((_DWORD *)this + 46) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_83;
            case 0x11u:
              *((_DWORD *)this + 55) |= 0x400000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_136;
              *((_DWORD *)this + 45) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_83:
              v2 = *((_QWORD *)a2 + 1) + 4;
              goto LABEL_190;
            case 0x12u:
              *((_DWORD *)this + 55) |= 0x800u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_136;
              *((_QWORD *)this + 12) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_189;
            case 0x13u:
              *((_DWORD *)this + 55) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_136;
              *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_189;
            case 0x14u:
              *((_DWORD *)this + 55) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_136;
              *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_189;
            case 0x15u:
              *((_DWORD *)this + 55) |= 0x2000000u;
              v33 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v67 = 0;
                v68 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_210;
                  }
                  v69 = v33++;
                  v70 = *(_BYTE *)(v34 + v69);
                  *((_QWORD *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0)
                    break;
                  v67 += 7;
                  v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_209:
                    v2 = v69 + 1;
                    goto LABEL_210;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v37) = 0;
                goto LABEL_209;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)a2 + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_210;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_210:
              *((_DWORD *)this + 48) = v37;
              goto LABEL_191;
            case 0x16u:
              *((_DWORD *)this + 55) |= 0x8000000u;
              v39 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v40 = *(_QWORD *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v71 = 0;
                v72 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_215;
                  }
                  v73 = v39++;
                  v74 = *(_BYTE *)(v40 + v73);
                  *((_QWORD *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0)
                    break;
                  v71 += 7;
                  v14 = v72++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_214:
                    v2 = v73 + 1;
                    goto LABEL_215;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v43) = 0;
                goto LABEL_214;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)a2 + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_215;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_215:
              *((_DWORD *)this + 50) = v43;
              goto LABEL_191;
            case 0x17u:
              *((_DWORD *)this + 55) |= 0x1000000u;
              v45 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v46 = *(_QWORD *)a2;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v75 = 0;
                v76 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_220;
                  }
                  v77 = v45++;
                  v78 = *(_BYTE *)(v46 + v77);
                  *((_QWORD *)a2 + 1) = v45;
                  v49 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0)
                    break;
                  v75 += 7;
                  v14 = v76++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_219:
                    v2 = v77 + 1;
                    goto LABEL_220;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v49) = 0;
                goto LABEL_219;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)a2 + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_220;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_220:
              *((_DWORD *)this + 47) = v49;
              goto LABEL_191;
            case 0x18u:
              *((_DWORD *)this + 55) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_136;
              *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_189;
            case 0x19u:
              *((_DWORD *)this + 55) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_136;
              *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_189;
            case 0x1Au:
              *((_DWORD *)this + 55) |= 0x8000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_136;
              *((_QWORD *)this + 16) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_189;
            case 0x1Bu:
              *((_DWORD *)this + 55) |= 0x400u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_136;
              *((_QWORD *)this + 11) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_189;
            case 0x1Cu:
              *((_DWORD *)this + 55) |= 0x80000000;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v52 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v51 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v52 = v51 != 0;
              }
              *((_BYTE *)this + 216) = v52;
              goto LABEL_191;
            case 0x1Du:
              *((_DWORD *)this + 55) |= 0x1000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_136;
              *((_QWORD *)this + 13) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_189;
            case 0x1Eu:
              *((_DWORD *)this + 55) |= 0x4000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_136;
              *((_QWORD *)this + 15) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_189;
            case 0x1Fu:
              *((_DWORD *)this + 55) |= 0x2000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 14) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_189:
                v2 = *((_QWORD *)a2 + 1) + 8;
LABEL_190:
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_136:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_191;
            case 0x20u:
              *((_DWORD *)this + 55) |= 0x4000000u;
              v53 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v54 = *(_QWORD *)a2;
              if (v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v2)
              {
                v79 = 0;
                v80 = 0;
                v57 = 0;
                if (v2 <= v53)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v53)
                  {
                    LODWORD(v57) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_225;
                  }
                  v81 = v53++;
                  v82 = *(_BYTE *)(v54 + v81);
                  *((_QWORD *)a2 + 1) = v53;
                  v57 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0)
                    break;
                  v79 += 7;
                  v14 = v80++ > 8;
                  if (v14)
                  {
                    LODWORD(v57) = 0;
LABEL_224:
                    v2 = v81 + 1;
                    goto LABEL_225;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v57) = 0;
                goto LABEL_224;
              }
              v55 = 0;
              v56 = 0;
              v57 = 0;
              do
              {
                v2 = v53 + 1;
                *((_QWORD *)a2 + 1) = v53 + 1;
                v58 = *(_BYTE *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0)
                  goto LABEL_225;
                v55 += 7;
                v53 = v2;
                v14 = v56++ > 8;
              }
              while (!v14);
              LODWORD(v57) = 0;
LABEL_225:
              *((_DWORD *)this + 49) = v57;
LABEL_191:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_191;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::MotionLocation::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 220);
  if ((v4 & 0x40000) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 152), 1u);
    v4 = *(_DWORD *)(v3 + 220);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0)
        goto LABEL_4;
      goto LABEL_36;
    }
  }
  else if ((v4 & 0x100) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 2u);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 0x10000) == 0)
      goto LABEL_5;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(double *)(v3 + 80), 3u);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x10000) == 0)
  {
LABEL_5:
    if ((v4 & 0x20000) == 0)
      goto LABEL_6;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(double *)(v3 + 136), 4u);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x20000) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 144), 5u);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0)
      goto LABEL_8;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 6u);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 7u);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 1) == 0)
      goto LABEL_10;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 8u);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 1) == 0)
  {
LABEL_10:
    if ((v4 & 0x100000) == 0)
      goto LABEL_11;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 9u);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x100000) == 0)
  {
LABEL_11:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_12;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(double *)(v3 + 168), 0xAu);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x80000) == 0)
      goto LABEL_13;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 204), 0xBu);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x80000) == 0)
  {
LABEL_13:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_14;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(double *)(v3 + 160), 0xCu);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_15;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(float *)(v3 + 208), 0xDu);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x200000) == 0)
      goto LABEL_16;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 212), 0xEu);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x200000) == 0)
  {
LABEL_16:
    if ((v4 & 0x800000) == 0)
      goto LABEL_17;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 176), 0xFu);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x800000) == 0)
  {
LABEL_17:
    if ((v4 & 0x400000) == 0)
      goto LABEL_18;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 184), 0x10u);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x400000) == 0)
  {
LABEL_18:
    if ((v4 & 0x800) == 0)
      goto LABEL_19;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 180), 0x11u);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x800) == 0)
  {
LABEL_19:
    if ((v4 & 8) == 0)
      goto LABEL_20;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(double *)(v3 + 96), 0x12u);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 8) == 0)
  {
LABEL_20:
    if ((v4 & 0x10) == 0)
      goto LABEL_21;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 0x13u);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x10) == 0)
  {
LABEL_21:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_22;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 0x14u);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_23;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 192), 0x15u);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_24;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 200), 0x16u);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v4 & 0x20) == 0)
      goto LABEL_25;
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 188), 0x17u);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x20) == 0)
  {
LABEL_25:
    if ((v4 & 0x40) == 0)
      goto LABEL_26;
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 0x18u);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x40) == 0)
  {
LABEL_26:
    if ((v4 & 0x8000) == 0)
      goto LABEL_27;
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 0x19u);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x8000) == 0)
  {
LABEL_27:
    if ((v4 & 0x400) == 0)
      goto LABEL_28;
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(double *)(v3 + 128), 0x1Au);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x400) == 0)
  {
LABEL_28:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(double *)(v3 + 88), 0x1Bu);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x1000) == 0)
      goto LABEL_30;
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 216), 0x1Cu);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x1000) == 0)
  {
LABEL_30:
    if ((v4 & 0x4000) == 0)
      goto LABEL_31;
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::write(a2, *(double *)(v3 + 104), 0x1Du);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x4000) == 0)
  {
LABEL_31:
    if ((v4 & 0x2000) == 0)
      goto LABEL_32;
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::write(a2, *(double *)(v3 + 120), 0x1Eu);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x2000) == 0)
  {
LABEL_32:
    if ((v4 & 0x4000000) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 196), 0x20u);
  }
LABEL_64:
  this = PB::Writer::write(a2, *(double *)(v3 + 112), 0x1Fu);
  if ((*(_DWORD *)(v3 + 220) & 0x4000000) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 196), 0x20u);
  return this;
}

uint64_t CMMsl::MotionLocation::hash_value(CMMsl::MotionLocation *this)
{
  int v1;
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  double v37;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;

  v1 = *((_DWORD *)this + 55);
  if ((v1 & 0x40000) == 0)
  {
    v39 = 0.0;
    if ((v1 & 0x100) != 0)
      goto LABEL_3;
LABEL_102:
    v2 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_7;
LABEL_103:
    v43 = 0.0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_10;
LABEL_104:
    v42 = 0.0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_13;
LABEL_105:
    v41 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_16;
LABEL_106:
    v40 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_19;
LABEL_107:
    v7 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_23;
LABEL_108:
    v8 = 0;
    if ((v1 & 1) != 0)
      goto LABEL_27;
LABEL_109:
    v9 = 0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_31;
LABEL_110:
    v10 = 0;
    if ((v1 & 0x10000000) != 0)
      goto LABEL_35;
    goto LABEL_111;
  }
  v37 = *((double *)this + 19);
  if (v37 == 0.0)
    v37 = 0.0;
  v39 = v37;
  if ((v1 & 0x100) == 0)
    goto LABEL_102;
LABEL_3:
  if (*((double *)this + 9) == 0.0)
    v2 = 0;
  else
    v2 = *((_QWORD *)this + 9);
  if ((v1 & 0x200) == 0)
    goto LABEL_103;
LABEL_7:
  v3 = *((double *)this + 10);
  if (v3 == 0.0)
    v3 = 0.0;
  v43 = v3;
  if ((v1 & 0x10000) == 0)
    goto LABEL_104;
LABEL_10:
  v4 = *((double *)this + 17);
  if (v4 == 0.0)
    v4 = 0.0;
  v42 = v4;
  if ((v1 & 0x20000) == 0)
    goto LABEL_105;
LABEL_13:
  v5 = *((double *)this + 18);
  if (v5 == 0.0)
    v5 = 0.0;
  v41 = v5;
  if ((v1 & 0x80) == 0)
    goto LABEL_106;
LABEL_16:
  v6 = *((double *)this + 8);
  if (v6 == 0.0)
    v6 = 0.0;
  v40 = v6;
  if ((v1 & 2) == 0)
    goto LABEL_107;
LABEL_19:
  if (*((double *)this + 2) == 0.0)
    v7 = 0;
  else
    v7 = *((_QWORD *)this + 2);
  if ((v1 & 4) == 0)
    goto LABEL_108;
LABEL_23:
  if (*((double *)this + 3) == 0.0)
    v8 = 0;
  else
    v8 = *((_QWORD *)this + 3);
  if ((v1 & 1) == 0)
    goto LABEL_109;
LABEL_27:
  if (*((double *)this + 1) == 0.0)
    v9 = 0;
  else
    v9 = *((_QWORD *)this + 1);
  if ((v1 & 0x100000) == 0)
    goto LABEL_110;
LABEL_31:
  if (*((double *)this + 21) == 0.0)
    v10 = 0;
  else
    v10 = *((_QWORD *)this + 21);
  if ((v1 & 0x10000000) != 0)
  {
LABEL_35:
    v11 = *((unsigned int *)this + 51);
    if ((v1 & 0x80000) != 0)
      goto LABEL_36;
LABEL_112:
    v12 = 0;
    if ((v1 & 0x20000000) != 0)
      goto LABEL_40;
LABEL_113:
    v14 = 0;
    if ((v1 & 0x40000000) != 0)
      goto LABEL_44;
    goto LABEL_114;
  }
LABEL_111:
  v11 = 0;
  if ((v1 & 0x80000) == 0)
    goto LABEL_112;
LABEL_36:
  if (*((double *)this + 20) == 0.0)
    v12 = 0;
  else
    v12 = *((_QWORD *)this + 20);
  if ((v1 & 0x20000000) == 0)
    goto LABEL_113;
LABEL_40:
  v13 = *((float *)this + 52);
  if (v13 == 0.0)
    v14 = 0;
  else
    v14 = LODWORD(v13);
  if ((v1 & 0x40000000) != 0)
  {
LABEL_44:
    v15 = *((unsigned int *)this + 53);
    if ((v1 & 0x200000) != 0)
      goto LABEL_45;
LABEL_115:
    v17 = 0;
    if ((v1 & 0x800000) != 0)
      goto LABEL_49;
LABEL_116:
    v19 = 0;
    if ((v1 & 0x400000) != 0)
      goto LABEL_53;
LABEL_117:
    v21 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_57;
LABEL_118:
    v22 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_61;
LABEL_119:
    v23 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_65;
LABEL_120:
    v24 = 0;
    if ((v1 & 0x2000000) != 0)
      goto LABEL_69;
    goto LABEL_121;
  }
LABEL_114:
  v15 = 0;
  if ((v1 & 0x200000) == 0)
    goto LABEL_115;
LABEL_45:
  v16 = *((float *)this + 44);
  if (v16 == 0.0)
    v17 = 0;
  else
    v17 = LODWORD(v16);
  if ((v1 & 0x800000) == 0)
    goto LABEL_116;
LABEL_49:
  v18 = *((float *)this + 46);
  if (v18 == 0.0)
    v19 = 0;
  else
    v19 = LODWORD(v18);
  if ((v1 & 0x400000) == 0)
    goto LABEL_117;
LABEL_53:
  v20 = *((float *)this + 45);
  if (v20 == 0.0)
    v21 = 0;
  else
    v21 = LODWORD(v20);
  if ((v1 & 0x800) == 0)
    goto LABEL_118;
LABEL_57:
  if (*((double *)this + 12) == 0.0)
    v22 = 0;
  else
    v22 = *((_QWORD *)this + 12);
  if ((v1 & 8) == 0)
    goto LABEL_119;
LABEL_61:
  if (*((double *)this + 4) == 0.0)
    v23 = 0;
  else
    v23 = *((_QWORD *)this + 4);
  if ((v1 & 0x10) == 0)
    goto LABEL_120;
LABEL_65:
  if (*((double *)this + 5) == 0.0)
    v24 = 0;
  else
    v24 = *((_QWORD *)this + 5);
  if ((v1 & 0x2000000) != 0)
  {
LABEL_69:
    v25 = *((unsigned int *)this + 48);
    if ((v1 & 0x8000000) != 0)
      goto LABEL_70;
    goto LABEL_122;
  }
LABEL_121:
  v25 = 0;
  if ((v1 & 0x8000000) != 0)
  {
LABEL_70:
    v26 = *((unsigned int *)this + 50);
    if ((v1 & 0x1000000) != 0)
      goto LABEL_71;
    goto LABEL_123;
  }
LABEL_122:
  v26 = 0;
  if ((v1 & 0x1000000) != 0)
  {
LABEL_71:
    v27 = *((unsigned int *)this + 47);
    if ((v1 & 0x20) != 0)
      goto LABEL_72;
LABEL_124:
    v28 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_76;
LABEL_125:
    v29 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_80;
LABEL_126:
    v30 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_84;
LABEL_127:
    v31 = 0;
    if (v1 < 0)
      goto LABEL_88;
    goto LABEL_128;
  }
LABEL_123:
  v27 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_124;
LABEL_72:
  if (*((double *)this + 6) == 0.0)
    v28 = 0;
  else
    v28 = *((_QWORD *)this + 6);
  if ((v1 & 0x40) == 0)
    goto LABEL_125;
LABEL_76:
  if (*((double *)this + 7) == 0.0)
    v29 = 0;
  else
    v29 = *((_QWORD *)this + 7);
  if ((v1 & 0x8000) == 0)
    goto LABEL_126;
LABEL_80:
  if (*((double *)this + 16) == 0.0)
    v30 = 0;
  else
    v30 = *((_QWORD *)this + 16);
  if ((v1 & 0x400) == 0)
    goto LABEL_127;
LABEL_84:
  if (*((double *)this + 11) == 0.0)
    v31 = 0;
  else
    v31 = *((_QWORD *)this + 11);
  if (v1 < 0)
  {
LABEL_88:
    v32 = *((unsigned __int8 *)this + 216);
    if ((v1 & 0x1000) != 0)
      goto LABEL_89;
LABEL_129:
    v33 = 0.0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_92;
LABEL_130:
    v34 = 0.0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_95;
    goto LABEL_131;
  }
LABEL_128:
  v32 = 0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_129;
LABEL_89:
  v33 = *((double *)this + 13);
  if (v33 == 0.0)
    v33 = 0.0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_130;
LABEL_92:
  v34 = *((double *)this + 15);
  if (v34 == 0.0)
    v34 = 0.0;
  if ((v1 & 0x2000) != 0)
  {
LABEL_95:
    v35 = *((double *)this + 14);
    if (v35 == 0.0)
      v35 = 0.0;
    if ((v1 & 0x4000000) != 0)
      goto LABEL_98;
LABEL_132:
    v36 = 0;
    return v2 ^ *(_QWORD *)&v39 ^ *(_QWORD *)&v43 ^ *(_QWORD *)&v42 ^ *(_QWORD *)&v41 ^ *(_QWORD *)&v40 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v14 ^ v15 ^ v17 ^ v19 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30 ^ v31 ^ v32 ^ *(_QWORD *)&v33 ^ *(_QWORD *)&v34 ^ *(_QWORD *)&v35 ^ v36;
  }
LABEL_131:
  v35 = 0.0;
  if ((v1 & 0x4000000) == 0)
    goto LABEL_132;
LABEL_98:
  v36 = *((unsigned int *)this + 49);
  return v2 ^ *(_QWORD *)&v39 ^ *(_QWORD *)&v43 ^ *(_QWORD *)&v42 ^ *(_QWORD *)&v41 ^ *(_QWORD *)&v40 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v14 ^ v15 ^ v17 ^ v19 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30 ^ v31 ^ v32 ^ *(_QWORD *)&v33 ^ *(_QWORD *)&v34 ^ *(_QWORD *)&v35 ^ v36;
}

void CMMsl::MotionLoiAltitudeData::~MotionLoiAltitudeData(CMMsl::MotionLoiAltitudeData *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_100352C88;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::MotionLoiAltitudeData::~MotionLoiAltitudeData(this);
  operator delete();
}

CMMsl::MotionLoiAltitudeData *CMMsl::MotionLoiAltitudeData::MotionLoiAltitudeData(CMMsl::MotionLoiAltitudeData *this, const CMMsl::MotionLoiAltitudeData *a2)
{
  char *v3;

  *(_QWORD *)this = off_100352C88;
  *(_OWORD *)((char *)this + 8) = 0u;
  v3 = (char *)this + 8;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if (this != a2)
  {
    sub_100239350(v3, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
    sub_100239350((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3);
  }
  return this;
}

uint64_t CMMsl::MotionLoiAltitudeData::operator=(uint64_t a1, const CMMsl::MotionLoiAltitudeData *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  __int128 v9;
  __int128 v10;

  if ((const CMMsl::MotionLoiAltitudeData *)a1 != a2)
  {
    CMMsl::MotionLoiAltitudeData::MotionLoiAltitudeData((CMMsl::MotionLoiAltitudeData *)v7, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v8 = v3;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v10;
    v10 = v5;
    CMMsl::MotionLoiAltitudeData::~MotionLoiAltitudeData((CMMsl::MotionLoiAltitudeData *)v7);
  }
  return a1;
}

_QWORD *CMMsl::swap(_QWORD *this, CMMsl::MotionLoiAltitudeData *a2, CMMsl::MotionLoiAltitudeData *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = this[4];
  this[4] = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  v7 = this[5];
  this[5] = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  v8 = this[6];
  this[6] = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v8;
  return this;
}

uint64_t CMMsl::MotionLoiAltitudeData::MotionLoiAltitudeData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = off_100352C88;
  v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  sub_100239458(v4, (__n128 *)(a2 + 32));
  return a1;
}

{
  uint64_t v4;

  *(_QWORD *)a1 = off_100352C88;
  v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  sub_100239458(v4, (__n128 *)(a2 + 32));
  return a1;
}

uint64_t CMMsl::MotionLoiAltitudeData::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void (**v11)(CMMsl::MotionLoiAltitudeData *__hidden);
  __int128 v12;
  __int128 v13;
  __int128 v14;

  if (a1 != a2)
  {
    v11 = off_100352C88;
    v3 = *(_QWORD *)(a2 + 24);
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v5 = *(_QWORD *)(a2 + 48);
    v6 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v4;
    v8 = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v3;
    v12 = v7;
    v13 = v8;
    v9 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 32) = v6;
    *(_QWORD *)(a1 + 48) = v5;
    v14 = v9;
    CMMsl::MotionLoiAltitudeData::~MotionLoiAltitudeData((CMMsl::MotionLoiAltitudeData *)&v11);
  }
  return a1;
}

uint64_t CMMsl::MotionLoiAltitudeData::formatText(CMMsl::MotionLoiAltitudeData *this, PB::TextFormatter *a2, const char *a3)
{
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (double *)*((_QWORD *)this + 1);
  v6 = (double *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "loiAltitude", v7);
  }
  v8 = (double *)*((_QWORD *)this + 4);
  v9 = (double *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "loiVerticalUncertainty", v10);
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::MotionLoiAltitudeData::readFrom(CMMsl::MotionLoiAltitudeData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  char *v9;
  void **v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  _QWORD *v56;
  unint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  _BYTE v77[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 32);
    v9 = (char *)this + 48;
    v10 = (void **)((char *)this + 8);
    v11 = (char *)this + 24;
    while (1)
    {
      v12 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v19 = 0;
        v20 = 0;
        v15 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v21 = v2 + 1;
          v22 = *(_BYTE *)(v12 + v2);
          *((_QWORD *)a2 + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0)
            goto LABEL_21;
          v19 += 7;
          v2 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            v15 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v25 = v15 >> 3;
      if ((v15 >> 3) == 2)
        break;
      if ((_DWORD)v25 == 1)
      {
        if (v24 != 2)
        {
          v55 = (char *)*((_QWORD *)this + 2);
          v54 = *((_QWORD *)this + 3);
          if ((unint64_t)v55 >= v54)
          {
            v59 = (char *)*v10;
            v60 = (v55 - (_BYTE *)*v10) >> 3;
            v61 = v60 + 1;
            if ((unint64_t)(v60 + 1) >> 61)
LABEL_122:
              sub_10000D5F8();
            v62 = v54 - (_QWORD)v59;
            if (v62 >> 2 > v61)
              v61 = v62 >> 2;
            if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
              v63 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v63 = v61;
            if (v63)
            {
              v64 = (char *)sub_10000D60C((uint64_t)v11, v63);
              v59 = (char *)*((_QWORD *)this + 1);
              v55 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v64 = 0;
            }
            v71 = &v64[8 * v60];
            *(_QWORD *)v71 = 0;
            v56 = v71 + 8;
            while (v55 != v59)
            {
              v72 = *((_QWORD *)v55 - 1);
              v55 -= 8;
              *((_QWORD *)v71 - 1) = v72;
              v71 -= 8;
            }
            *((_QWORD *)this + 1) = v71;
            *((_QWORD *)this + 2) = v56;
            *((_QWORD *)this + 3) = &v64[8 * v63];
            if (v59)
              operator delete(v59);
          }
          else
          {
            *(_QWORD *)v55 = 0;
            v56 = v55 + 8;
          }
          *((_QWORD *)this + 2) = v56;
LABEL_110:
          v75 = *((_QWORD *)a2 + 1);
          if (v75 <= 0xFFFFFFFFFFFFFFF7 && v75 + 8 <= *((_QWORD *)a2 + 2))
          {
            *(v56 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v75);
            *((_QWORD *)a2 + 1) += 8;
          }
          else
          {
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_114;
        }
        if ((PB::Reader::placeMark(a2, v77) & 1) != 0)
          return 0;
        v26 = *((_QWORD *)a2 + 1);
        v27 = *((_QWORD *)a2 + 2);
        while (v26 < v27 && !*((_BYTE *)a2 + 24))
        {
          v29 = (char *)*((_QWORD *)this + 2);
          v28 = *((_QWORD *)this + 3);
          if ((unint64_t)v29 >= v28)
          {
            v31 = (char *)*v10;
            v32 = (v29 - (_BYTE *)*v10) >> 3;
            v33 = v32 + 1;
            if ((unint64_t)(v32 + 1) >> 61)
              goto LABEL_122;
            v34 = v28 - (_QWORD)v31;
            if (v34 >> 2 > v33)
              v33 = v34 >> 2;
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
              v35 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v35 = v33;
            if (v35)
            {
              v36 = (char *)sub_10000D60C((uint64_t)v11, v35);
              v31 = (char *)*((_QWORD *)this + 1);
              v29 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v36 = 0;
            }
            v37 = &v36[8 * v32];
            *(_QWORD *)v37 = 0;
            v30 = v37 + 8;
            while (v29 != v31)
            {
              v38 = *((_QWORD *)v29 - 1);
              v29 -= 8;
              *((_QWORD *)v37 - 1) = v38;
              v37 -= 8;
            }
            *((_QWORD *)this + 1) = v37;
            *((_QWORD *)this + 2) = v30;
            *((_QWORD *)this + 3) = &v36[8 * v35];
            if (v31)
              operator delete(v31);
          }
          else
          {
            *(_QWORD *)v29 = 0;
            v30 = v29 + 8;
          }
          *((_QWORD *)this + 2) = v30;
          v39 = *((_QWORD *)a2 + 1);
          if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_78;
          *(v30 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v39);
          v27 = *((_QWORD *)a2 + 2);
          v26 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v26;
        }
LABEL_79:
        PB::Reader::recallMark(a2, v77);
        goto LABEL_114;
      }
      if ((PB::Reader::skip(a2, v25, v24, 0) & 1) == 0)
        return 0;
LABEL_114:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    if (v24 != 2)
    {
      v58 = (char *)*((_QWORD *)this + 5);
      v57 = *((_QWORD *)this + 6);
      if ((unint64_t)v58 >= v57)
      {
        v65 = (char *)*v8;
        v66 = (v58 - (_BYTE *)*v8) >> 3;
        v67 = v66 + 1;
        if ((unint64_t)(v66 + 1) >> 61)
LABEL_123:
          sub_10000D5F8();
        v68 = v57 - (_QWORD)v65;
        if (v68 >> 2 > v67)
          v67 = v68 >> 2;
        if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8)
          v69 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v69 = v67;
        if (v69)
        {
          v70 = (char *)sub_10000D60C((uint64_t)v9, v69);
          v65 = (char *)*((_QWORD *)this + 4);
          v58 = (char *)*((_QWORD *)this + 5);
        }
        else
        {
          v70 = 0;
        }
        v73 = &v70[8 * v66];
        *(_QWORD *)v73 = 0;
        v56 = v73 + 8;
        while (v58 != v65)
        {
          v74 = *((_QWORD *)v58 - 1);
          v58 -= 8;
          *((_QWORD *)v73 - 1) = v74;
          v73 -= 8;
        }
        *((_QWORD *)this + 4) = v73;
        *((_QWORD *)this + 5) = v56;
        *((_QWORD *)this + 6) = &v70[8 * v69];
        if (v65)
          operator delete(v65);
      }
      else
      {
        *(_QWORD *)v58 = 0;
        v56 = v58 + 8;
      }
      *((_QWORD *)this + 5) = v56;
      goto LABEL_110;
    }
    if ((PB::Reader::placeMark(a2, v77) & 1) != 0)
      return 0;
    v40 = *((_QWORD *)a2 + 1);
    v41 = *((_QWORD *)a2 + 2);
    while (v40 < v41 && !*((_BYTE *)a2 + 24))
    {
      v43 = (char *)*((_QWORD *)this + 5);
      v42 = *((_QWORD *)this + 6);
      if ((unint64_t)v43 >= v42)
      {
        v45 = (char *)*v8;
        v46 = (v43 - (_BYTE *)*v8) >> 3;
        v47 = v46 + 1;
        if ((unint64_t)(v46 + 1) >> 61)
          goto LABEL_123;
        v48 = v42 - (_QWORD)v45;
        if (v48 >> 2 > v47)
          v47 = v48 >> 2;
        if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
          v49 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v49 = v47;
        if (v49)
        {
          v50 = (char *)sub_10000D60C((uint64_t)v9, v49);
          v45 = (char *)*((_QWORD *)this + 4);
          v43 = (char *)*((_QWORD *)this + 5);
        }
        else
        {
          v50 = 0;
        }
        v51 = &v50[8 * v46];
        *(_QWORD *)v51 = 0;
        v44 = v51 + 8;
        while (v43 != v45)
        {
          v52 = *((_QWORD *)v43 - 1);
          v43 -= 8;
          *((_QWORD *)v51 - 1) = v52;
          v51 -= 8;
        }
        *((_QWORD *)this + 4) = v51;
        *((_QWORD *)this + 5) = v44;
        *((_QWORD *)this + 6) = &v50[8 * v49];
        if (v45)
          operator delete(v45);
      }
      else
      {
        *(_QWORD *)v43 = 0;
        v44 = v43 + 8;
      }
      *((_QWORD *)this + 5) = v44;
      v53 = *((_QWORD *)a2 + 1);
      if (v53 > 0xFFFFFFFFFFFFFFF7 || v53 + 8 > *((_QWORD *)a2 + 2))
      {
LABEL_78:
        *((_BYTE *)a2 + 24) = 1;
        goto LABEL_79;
      }
      *(v44 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v53);
      v41 = *((_QWORD *)a2 + 2);
      v40 = *((_QWORD *)a2 + 1) + 8;
      *((_QWORD *)a2 + 1) = v40;
    }
    goto LABEL_79;
  }
  return v4 == 0;
}

uint64_t CMMsl::MotionLoiAltitudeData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;

  v3 = this;
  v4 = *(double **)(this + 8);
  v5 = *(double **)(this + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6, 1u);
  }
  v8 = *(double **)(v3 + 32);
  v7 = *(double **)(v3 + 40);
  while (v8 != v7)
  {
    v9 = *v8++;
    this = PB::Writer::write(a2, v9, 2u);
  }
  return this;
}

uint64_t CMMsl::MotionLoiAltitudeData::hash_value(CMMsl::MotionLoiAltitudeData *this)
{
  uint64_t v2;

  v2 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  return PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4)) ^ v2;
}

void CMMsl::MotionLoiData::~MotionLoiData(CMMsl::MotionLoiData *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::MotionLoiData::MotionLoiData(uint64_t this, const CMMsl::MotionLoiData *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char v15;

  *(_QWORD *)this = off_100352CC0;
  *(_DWORD *)(this + 84) = -1;
  *(_DWORD *)(this + 92) = 0;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x40) != 0)
  {
    v4 = *((_QWORD *)a2 + 7);
    v3 = 64;
    *(_WORD *)(this + 92) = 64;
    *(_QWORD *)(this + 56) = v4;
    v2 = *((_WORD *)a2 + 46);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 6);
    v3 |= 0x20u;
    *(_WORD *)(this + 92) = v3;
    *(_QWORD *)(this + 48) = v5;
    v2 = *((_WORD *)a2 + 46);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *((_QWORD *)a2 + 3);
    v3 |= 4u;
    *(_WORD *)(this + 92) = v3;
    *(_QWORD *)(this + 24) = v6;
    v2 = *((_WORD *)a2 + 46);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_19;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 92) = v3;
  *(_QWORD *)(this + 8) = v7;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  v8 = *((_QWORD *)a2 + 5);
  v3 |= 0x10u;
  *(_WORD *)(this + 92) = v3;
  *(_QWORD *)(this + 40) = v8;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x200) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  v9 = *((_DWORD *)a2 + 20);
  v3 |= 0x200u;
  *(_WORD *)(this + 92) = v3;
  *(_DWORD *)(this + 80) = v9;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_22;
  }
LABEL_21:
  v10 = *((_QWORD *)a2 + 9);
  v3 |= 0x100u;
  *(_WORD *)(this + 92) = v3;
  *(_QWORD *)(this + 72) = v10;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0)
      goto LABEL_13;
    goto LABEL_23;
  }
LABEL_22:
  v11 = *((_QWORD *)a2 + 8);
  v3 |= 0x80u;
  *(_WORD *)(this + 92) = v3;
  *(_QWORD *)(this + 64) = v11;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_24;
  }
LABEL_23:
  v12 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 92) = v3;
  *(_QWORD *)(this + 16) = v12;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x400) == 0)
  {
LABEL_14:
    if ((v2 & 8) == 0)
      goto LABEL_15;
    goto LABEL_25;
  }
LABEL_24:
  v13 = *((_DWORD *)a2 + 21);
  v3 |= 0x400u;
  *(_WORD *)(this + 92) = v3;
  *(_DWORD *)(this + 84) = v13;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 8) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0)
      return this;
LABEL_26:
    v15 = *((_BYTE *)a2 + 88);
    *(_WORD *)(this + 92) = v3 | 0x800;
    *(_BYTE *)(this + 88) = v15;
    return this;
  }
LABEL_25:
  v14 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 92) = v3;
  *(_QWORD *)(this + 32) = v14;
  if ((*((_WORD *)a2 + 46) & 0x800) != 0)
    goto LABEL_26;
  return this;
}

CMMsl *CMMsl::MotionLoiData::operator=(CMMsl *a1, const CMMsl::MotionLoiData *a2)
{
  CMMsl::MotionLoiData *v3;
  _BYTE v5[96];

  if (a1 != a2)
  {
    CMMsl::MotionLoiData::MotionLoiData((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::MotionLoiData *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::MotionLoiData *a2, CMMsl::MotionLoiData *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;

  v3 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v3;
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v4;
  v5 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v5;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v7;
  v8 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  v9 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v9;
  v10 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v10;
  v11 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v11;
  v12 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v12;
  result = *((double *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((double *)a2 + 4) = result;
  LOBYTE(v3) = *((_BYTE *)this + 88);
  *((_BYTE *)this + 88) = *((_BYTE *)a2 + 88);
  *((_BYTE *)a2 + 88) = v3;
  return result;
}

double CMMsl::MotionLoiData::MotionLoiData(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100352CC0;
  *(_DWORD *)(a1 + 84) = -1;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 92) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  return result;
}

CMMsl *CMMsl::MotionLoiData::operator=(CMMsl *this, uint64_t a2, CMMsl::MotionLoiData *a3)
{
  uint64_t v4;
  void (**v6)(CMMsl::MotionLoiData *__hidden);
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  int v14;

  if (this != (CMMsl *)a2)
  {
    v6 = off_100352CC0;
    v14 = *(_DWORD *)(a2 + 92);
    *(_DWORD *)(a2 + 92) = 0;
    v9 = *(_OWORD *)(a2 + 40);
    v10 = *(_OWORD *)(a2 + 56);
    v7 = *(_OWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 80);
    v11 = *(_QWORD *)(a2 + 72);
    v12 = v4;
    v8 = *(_OWORD *)(a2 + 24);
    v13 = *(_BYTE *)(a2 + 88);
    CMMsl::swap(this, (CMMsl::MotionLoiData *)&v6, a3);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return this;
}

uint64_t CMMsl::MotionLoiData::formatText(CMMsl::MotionLoiData *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 46);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "arrivalDate", *((double *)this + 1));
    v5 = *((_WORD *)this + 46);
    if ((v5 & 0x200) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((*((_WORD *)this + 46) & 0x200) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "confidence", *((_DWORD *)this + 20));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "confidenceOfGeoLocation", *((double *)this + 2));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "departureDate", *((double *)this + 3));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x800) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "distanceToLoi", *((double *)this + 4));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 0x800) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "hashedLatLong", *((_BYTE *)this + 88));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "horizontalAccuracy", *((double *)this + 5));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "latitude", *((double *)this + 6));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "longitude", *((double *)this + 7));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0)
      goto LABEL_12;
LABEL_25:
    PB::TextFormatter::format(a2, "uncertaintyOfGeoLocation", *((double *)this + 8));
    if ((*((_WORD *)this + 46) & 0x100) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_13;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "type", *((_DWORD *)this + 21));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 0x80) != 0)
    goto LABEL_25;
LABEL_12:
  if ((v5 & 0x100) != 0)
LABEL_13:
    PB::TextFormatter::format(a2, "withinDistance", *((double *)this + 9));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MotionLoiData::readFrom(CMMsl::MotionLoiData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  char v35;
  unsigned int v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 46) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_64;
              *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_84;
            case 2u:
              *((_WORD *)this + 46) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_64;
              *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_84;
            case 3u:
              *((_WORD *)this + 46) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_64;
              *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_84;
            case 4u:
              *((_WORD *)this + 46) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_64;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_84;
            case 5u:
              *((_WORD *)this + 46) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_64;
              *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_84;
            case 6u:
              *((_WORD *)this + 46) |= 0x200u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v35 = 0;
                v36 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_89;
                  }
                  v37 = v21++;
                  v38 = *(_BYTE *)(v22 + v37);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v38 & 0x7F) << v35;
                  if ((v38 & 0x80) == 0)
                    break;
                  v35 += 7;
                  v14 = v36++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_88:
                    v2 = v37 + 1;
                    goto LABEL_89;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_88;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_89;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_89:
              *((_DWORD *)this + 20) = v25;
              goto LABEL_95;
            case 7u:
              *((_WORD *)this + 46) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_64;
              *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_84;
            case 8u:
              *((_WORD *)this + 46) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_64;
              *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_84;
            case 9u:
              *((_WORD *)this + 46) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_64;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_84;
            case 0xAu:
              *((_WORD *)this + 46) |= 0x400u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v39 = 0;
                v40 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_94;
                  }
                  v41 = v27++;
                  v42 = *(_BYTE *)(v28 + v41);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0)
                    break;
                  v39 += 7;
                  v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_93:
                    v2 = v41 + 1;
                    goto LABEL_94;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_93;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_94;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_94:
              *((_DWORD *)this + 21) = v31;
LABEL_95:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xBu:
              *((_WORD *)this + 46) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_84:
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_64:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_95;
            case 0xCu:
              *((_WORD *)this + 46) |= 0x800u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v34 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v34 = v33 != 0;
              }
              *((_BYTE *)this + 88) = v34;
              goto LABEL_95;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_95;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::MotionLoiData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 92);
  if ((v4 & 0x40) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 56), 1u);
    v4 = *(_WORD *)(v3 + 92);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 2u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 3u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 4u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 5u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 80), 6u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 7u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 8u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 9u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 8) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 84), 0xAu);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 8) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0)
      return this;
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 88), 0xCu);
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 0xBu);
  if ((*(_WORD *)(v3 + 92) & 0x800) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 88), 0xCu);
  return this;
}

uint64_t CMMsl::MotionLoiData::hash_value(CMMsl::MotionLoiData *this)
{
  __int16 v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  double v12;
  uint64_t v13;

  v1 = *((_WORD *)this + 46);
  if ((v1 & 0x40) == 0)
  {
    v2 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_3;
LABEL_33:
    v3 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_6;
LABEL_34:
    v4 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_9;
LABEL_35:
    v5 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_12;
LABEL_36:
    v6 = 0.0;
    if ((*((_WORD *)this + 46) & 0x200) != 0)
      goto LABEL_15;
    goto LABEL_37;
  }
  v2 = *((double *)this + 7);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_33;
LABEL_3:
  v3 = *((double *)this + 6);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_34;
LABEL_6:
  v4 = *((double *)this + 3);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_35;
LABEL_9:
  v5 = *((double *)this + 1);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_36;
LABEL_12:
  v6 = *((double *)this + 5);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((*((_WORD *)this + 46) & 0x200) != 0)
  {
LABEL_15:
    v7 = *((unsigned int *)this + 20);
    if ((*((_WORD *)this + 46) & 0x100) != 0)
      goto LABEL_16;
LABEL_38:
    v8 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_19;
LABEL_39:
    v9 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_22;
LABEL_40:
    v10 = 0.0;
    if ((*((_WORD *)this + 46) & 0x400) != 0)
      goto LABEL_25;
    goto LABEL_41;
  }
LABEL_37:
  v7 = 0;
  if ((*((_WORD *)this + 46) & 0x100) == 0)
    goto LABEL_38;
LABEL_16:
  v8 = *((double *)this + 9);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((v1 & 0x80) == 0)
    goto LABEL_39;
LABEL_19:
  v9 = *((double *)this + 8);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_40;
LABEL_22:
  v10 = *((double *)this + 2);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((*((_WORD *)this + 46) & 0x400) != 0)
  {
LABEL_25:
    v11 = *((int *)this + 21);
    if ((v1 & 8) != 0)
      goto LABEL_26;
    goto LABEL_42;
  }
LABEL_41:
  v11 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_26:
    v12 = *((double *)this + 4);
    if (v12 == 0.0)
      v12 = 0.0;
    if ((*((_WORD *)this + 46) & 0x800) != 0)
      goto LABEL_29;
LABEL_43:
    v13 = 0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ v11 ^ *(_QWORD *)&v12 ^ v13;
  }
LABEL_42:
  v12 = 0.0;
  if ((*((_WORD *)this + 46) & 0x800) == 0)
    goto LABEL_43;
LABEL_29:
  v13 = *((unsigned __int8 *)this + 88);
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ v11 ^ *(_QWORD *)&v12 ^ v13;
}

void CMMsl::MotionStateUpdate::~MotionStateUpdate(CMMsl::MotionStateUpdate *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_100352CF8;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_100352CF8;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_100352CF8;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::MotionStateUpdate::MotionStateUpdate(uint64_t this, const CMMsl::MotionStateUpdate *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;

  *(_QWORD *)this = off_100352CF8;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 192) = 0;
  v2 = *((_QWORD *)a2 + 24);
  if ((v2 & 0x8000) != 0)
  {
    v4 = *((_DWORD *)a2 + 25);
    v3 = 0x8000;
    *(_QWORD *)(this + 192) = 0x8000;
    *(_DWORD *)(this + 100) = v4;
    v2 = *((_QWORD *)a2 + 24);
    if ((v2 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x100) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 18);
    v3 |= 0x100uLL;
    *(_QWORD *)(this + 192) = v3;
    *(_DWORD *)(this + 72) = v5;
    v2 = *((_QWORD *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 0x10000) != 0)
  {
    v9 = *((_DWORD *)a2 + 26);
    v3 |= 0x10000uLL;
    *(_QWORD *)(this + 192) = v3;
    *(_DWORD *)(this + 104) = v9;
    v2 = *((_QWORD *)a2 + 24);
    if ((v2 & 0x20000) == 0)
    {
LABEL_8:
      if ((v2 & 0x800) == 0)
        goto LABEL_9;
      goto LABEL_49;
    }
  }
  else if ((v2 & 0x20000) == 0)
  {
    goto LABEL_8;
  }
  v10 = *((_DWORD *)a2 + 27);
  v3 |= 0x20000uLL;
  *(_QWORD *)(this + 192) = v3;
  *(_DWORD *)(this + 108) = v10;
  v2 = *((_QWORD *)a2 + 24);
  if ((v2 & 0x800) == 0)
  {
LABEL_9:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_10;
    goto LABEL_50;
  }
LABEL_49:
  v11 = *((_DWORD *)a2 + 21);
  v3 |= 0x800uLL;
  *(_QWORD *)(this + 192) = v3;
  *(_DWORD *)(this + 84) = v11;
  v2 = *((_QWORD *)a2 + 24);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_51;
  }
LABEL_50:
  v12 = *((_DWORD *)a2 + 37);
  v3 |= 0x8000000uLL;
  *(_QWORD *)(this + 192) = v3;
  *(_DWORD *)(this + 148) = v12;
  v2 = *((_QWORD *)a2 + 24);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_52;
  }
LABEL_51:
  v13 = *((_DWORD *)a2 + 23);
  v3 |= 0x2000uLL;
  *(_QWORD *)(this + 192) = v3;
  *(_DWORD *)(this + 92) = v13;
  v2 = *((_QWORD *)a2 + 24);
  if ((v2 & 0x1000) == 0)
  {
LABEL_12:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_13;
    goto LABEL_53;
  }
LABEL_52:
  v14 = *((_DWORD *)a2 + 22);
  v3 |= 0x1000uLL;
  *(_QWORD *)(this + 192) = v3;
  *(_DWORD *)(this + 88) = v14;
  v2 = *((_QWORD *)a2 + 24);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0)
      goto LABEL_14;
    goto LABEL_54;
  }
LABEL_53:
  v15 = *((_DWORD *)a2 + 34);
  v3 |= 0x1000000uLL;
  *(_QWORD *)(this + 192) = v3;
  *(_DWORD *)(this + 136) = v15;
  v2 = *((_QWORD *)a2 + 24);
  if ((v2 & 8) == 0)
  {
LABEL_14:
    if ((v2 & 1) == 0)
      goto LABEL_15;
    goto LABEL_55;
  }
LABEL_54:
  v16 = *((_QWORD *)a2 + 5);
  v3 |= 8uLL;
  *(_QWORD *)(this + 192) = v3;
  *(_QWORD *)(this + 40) = v16;
  v2 = *((_QWORD *)a2 + 24);
  if ((v2 & 1) == 0)
  {
LABEL_15:
    if ((v2 & 4) == 0)
      goto LABEL_16;
    goto LABEL_56;
  }
LABEL_55:
  v17 = *((_QWORD *)a2 + 1);
  v3 |= 1uLL;
  *(_QWORD *)(this + 192) = v3;
  *(_QWORD *)(this + 8) = v17;
  v2 = *((_QWORD *)a2 + 24);
  if ((v2 & 4) == 0)
  {
LABEL_16:
    if ((v2 & 2) == 0)
      goto LABEL_17;
    goto LABEL_57;
  }
LABEL_56:
  v18 = *((_QWORD *)a2 + 3);
  v3 |= 4uLL;
  *(_QWORD *)(this + 192) = v3;
  *(_QWORD *)(this + 24) = v18;
  v2 = *((_QWORD *)a2 + 24);
  if ((v2 & 2) == 0)
  {
LABEL_17:
    if ((v2 & 0x80) == 0)
      goto LABEL_18;
    goto LABEL_58;
  }
LABEL_57:
  v19 = *((_QWORD *)a2 + 2);
  v3 |= 2uLL;
  *(_QWORD *)(this + 192) = v3;
  *(_QWORD *)(this + 16) = v19;
  v2 = *((_QWORD *)a2 + 24);
  if ((v2 & 0x80) == 0)
  {
LABEL_18:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_19;
    goto LABEL_59;
  }
LABEL_58:
  v20 = *((_DWORD *)a2 + 17);
  v3 |= 0x80uLL;
  *(_QWORD *)(this + 192) = v3;
  *(_DWORD *)(this + 68) = v20;
  v2 = *((_QWORD *)a2 + 24);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_20;
    goto LABEL_60;
  }
LABEL_59:
  v21 = *((_DWORD *)a2 + 39);
  v3 |= 0x20000000uLL;
  *(_QWORD *)(this + 192) = v3;
  *(_DWORD *)(this + 156) = v21;
  v2 = *((_QWORD *)a2 + 24);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x4000) == 0)
      goto LABEL_21;
    goto LABEL_61;
  }
LABEL_60:
  v22 = *((_DWORD *)a2 + 36);
  v3 |= 0x4000000uLL;
  *(_QWORD *)(this + 192) = v3;
  *(_DWORD *)(this + 144) = v22;
  v2 = *((_QWORD *)a2 + 24);
  if ((v2 & 0x4000) == 0)
  {
LABEL_21:
    if ((v2 & 0x400000) == 0)
      goto LABEL_22;
    goto LABEL_62;
  }
LABEL_61:
  v23 = *((_DWORD *)a2 + 24);
  v3 |= 0x4000uLL;
  *(_QWORD *)(this + 192) = v3;
  *(_DWORD *)(this + 96) = v23;
  v2 = *((_QWORD *)a2 + 24);
  if ((v2 & 0x400000) == 0)
  {
LABEL_22:
    if ((v2 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_63;
  }
LABEL_62:
  v24 = *((_DWORD *)a2 + 32);
  v3 |= 0x400000uLL;
  *(_QWORD *)(this + 192) = v3;
  *(_DWORD *)(this + 128) = v24;
  v2 = *((_QWORD *)a2 + 24);
  if ((v2 & 0x200000) == 0)
  {
LABEL_23:
    if ((v2 & 0x800000) == 0)
      goto LABEL_24;
    goto LABEL_64;
  }
LABEL_63:
  v25 = *((_DWORD *)a2 + 31);
  v3 |= 0x200000uLL;
  *(_QWORD *)(this + 192) = v3;
  *(_DWORD *)(this + 124) = v25;
  v2 = *((_QWORD *)a2 + 24);
  if ((v2 & 0x800000) == 0)
  {
LABEL_24:
    if ((v2 & 0x10) == 0)
      goto LABEL_25;
    goto LABEL_65;
  }
LABEL_64:
  v26 = *((_DWORD *)a2 + 33);
  v3 |= 0x800000uLL;
  *(_QWORD *)(this + 192) = v3;
  *(_DWORD *)(this + 132) = v26;
  v2 = *((_QWORD *)a2 + 24);
  if ((v2 & 0x10) == 0)
  {
LABEL_25:
    if ((v2 & 0x800000000) == 0)
      goto LABEL_26;
    goto LABEL_66;
  }
LABEL_65:
  v27 = *((_QWORD *)a2 + 6);
  v3 |= 0x10uLL;
  *(_QWORD *)(this + 192) = v3;
  *(_QWORD *)(this + 48) = v27;
  v2 = *((_QWORD *)a2 + 24);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_26:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_27;
    goto LABEL_67;
  }
LABEL_66:
  v28 = *((_DWORD *)a2 + 45);
  v3 |= 0x800000000uLL;
  *(_QWORD *)(this + 192) = v3;
  *(_DWORD *)(this + 180) = v28;
  v2 = *((_QWORD *)a2 + 24);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_27:
    if ((v2 & 0x100000) == 0)
      goto LABEL_28;
    goto LABEL_68;
  }
LABEL_67:
  v29 = *((_DWORD *)a2 + 40);
  v3 |= 0x40000000uLL;
  *(_QWORD *)(this + 192) = v3;
  *(_DWORD *)(this + 160) = v29;
  v2 = *((_QWORD *)a2 + 24);
  if ((v2 & 0x100000) == 0)
  {
LABEL_28:
    if ((v2 & 0x80000) == 0)
      goto LABEL_29;
    goto LABEL_69;
  }
LABEL_68:
  v30 = *((_DWORD *)a2 + 30);
  v3 |= 0x100000uLL;
  *(_QWORD *)(this + 192) = v3;
  *(_DWORD *)(this + 120) = v30;
  v2 = *((_QWORD *)a2 + 24);
  if ((v2 & 0x80000) == 0)
  {
LABEL_29:
    if ((v2 & 0x40000) == 0)
      goto LABEL_31;
    goto LABEL_30;
  }
LABEL_69:
  v31 = *((_DWORD *)a2 + 29);
  v3 |= 0x80000uLL;
  *(_QWORD *)(this + 192) = v3;
  *(_DWORD *)(this + 116) = v31;
  if ((*((_QWORD *)a2 + 24) & 0x40000) != 0)
  {
LABEL_30:
    v6 = *((_DWORD *)a2 + 28);
    *(_QWORD *)(this + 192) = v3 | 0x40000;
    *(_DWORD *)(this + 112) = v6;
  }
LABEL_31:
  if (*((_QWORD *)a2 + 4))
    operator new();
  v7 = *((_QWORD *)a2 + 24);
  if ((v7 & 0x400) != 0)
  {
    v32 = *((_DWORD *)a2 + 20);
    *(_QWORD *)(this + 192) |= 0x400uLL;
    *(_DWORD *)(this + 80) = v32;
    v7 = *((_QWORD *)a2 + 24);
    if ((v7 & 0x200) == 0)
    {
LABEL_35:
      if ((v7 & 0x2000000) == 0)
        goto LABEL_36;
      goto LABEL_73;
    }
  }
  else if ((v7 & 0x200) == 0)
  {
    goto LABEL_35;
  }
  v33 = *((_DWORD *)a2 + 19);
  *(_QWORD *)(this + 192) |= 0x200uLL;
  *(_DWORD *)(this + 76) = v33;
  v7 = *((_QWORD *)a2 + 24);
  if ((v7 & 0x2000000) == 0)
  {
LABEL_36:
    if ((v7 & 0x1000000000) == 0)
      goto LABEL_37;
    goto LABEL_74;
  }
LABEL_73:
  v34 = *((_DWORD *)a2 + 35);
  *(_QWORD *)(this + 192) |= 0x2000000uLL;
  *(_DWORD *)(this + 140) = v34;
  v7 = *((_QWORD *)a2 + 24);
  if ((v7 & 0x1000000000) == 0)
  {
LABEL_37:
    if ((v7 & 0x20) == 0)
      goto LABEL_38;
    goto LABEL_75;
  }
LABEL_74:
  v35 = *((_DWORD *)a2 + 46);
  *(_QWORD *)(this + 192) |= 0x1000000000uLL;
  *(_DWORD *)(this + 184) = v35;
  v7 = *((_QWORD *)a2 + 24);
  if ((v7 & 0x20) == 0)
  {
LABEL_38:
    if ((v7 & 0x10000000) == 0)
      goto LABEL_39;
    goto LABEL_76;
  }
LABEL_75:
  v36 = *((_QWORD *)a2 + 7);
  *(_QWORD *)(this + 192) |= 0x20uLL;
  *(_QWORD *)(this + 56) = v36;
  v7 = *((_QWORD *)a2 + 24);
  if ((v7 & 0x10000000) == 0)
  {
LABEL_39:
    if ((v7 & 0x2000000000) == 0)
      goto LABEL_40;
    goto LABEL_77;
  }
LABEL_76:
  v37 = *((_DWORD *)a2 + 38);
  *(_QWORD *)(this + 192) |= 0x10000000uLL;
  *(_DWORD *)(this + 152) = v37;
  v7 = *((_QWORD *)a2 + 24);
  if ((v7 & 0x2000000000) == 0)
  {
LABEL_40:
    if ((v7 & 0x40) == 0)
      goto LABEL_41;
    goto LABEL_78;
  }
LABEL_77:
  v38 = *((_DWORD *)a2 + 47);
  *(_QWORD *)(this + 192) |= 0x2000000000uLL;
  *(_DWORD *)(this + 188) = v38;
  v7 = *((_QWORD *)a2 + 24);
  if ((v7 & 0x40) == 0)
  {
LABEL_41:
    if ((v7 & 0x80000000) == 0)
      goto LABEL_42;
    goto LABEL_79;
  }
LABEL_78:
  v39 = *((_DWORD *)a2 + 16);
  *(_QWORD *)(this + 192) |= 0x40uLL;
  *(_DWORD *)(this + 64) = v39;
  v7 = *((_QWORD *)a2 + 24);
  if ((v7 & 0x80000000) == 0)
  {
LABEL_42:
    if ((v7 & 0x100000000) == 0)
      goto LABEL_43;
    goto LABEL_80;
  }
LABEL_79:
  v40 = *((_DWORD *)a2 + 41);
  *(_QWORD *)(this + 192) |= 0x80000000uLL;
  *(_DWORD *)(this + 164) = v40;
  v7 = *((_QWORD *)a2 + 24);
  if ((v7 & 0x100000000) == 0)
  {
LABEL_43:
    if ((v7 & 0x200000000) == 0)
      goto LABEL_44;
    goto LABEL_81;
  }
LABEL_80:
  v41 = *((_DWORD *)a2 + 42);
  *(_QWORD *)(this + 192) |= (unint64_t)&_mh_execute_header;
  *(_DWORD *)(this + 168) = v41;
  v7 = *((_QWORD *)a2 + 24);
  if ((v7 & 0x200000000) == 0)
  {
LABEL_44:
    if ((v7 & 0x400000000) == 0)
      return this;
    goto LABEL_45;
  }
LABEL_81:
  v42 = *((_DWORD *)a2 + 43);
  *(_QWORD *)(this + 192) |= 0x200000000uLL;
  *(_DWORD *)(this + 172) = v42;
  if ((*((_QWORD *)a2 + 24) & 0x400000000) == 0)
    return this;
LABEL_45:
  v8 = *((_DWORD *)a2 + 44);
  *(_QWORD *)(this + 192) |= 0x400000000uLL;
  *(_DWORD *)(this + 176) = v8;
  return this;
}

CMMsl *CMMsl::MotionStateUpdate::operator=(CMMsl *a1, const CMMsl::MotionStateUpdate *a2)
{
  CMMsl::MotionStateUpdate *v3;
  float v4;
  uint64_t v5;
  _QWORD v7[4];
  uint64_t v8;

  if (a1 != a2)
  {
    CMMsl::MotionStateUpdate::MotionStateUpdate((uint64_t)v7, a2);
    v4 = CMMsl::swap(a1, (CMMsl::MotionStateUpdate *)v7, v3);
    v5 = v8;
    v7[0] = off_100352CF8;
    v8 = 0;
    if (v5)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v5 + 8))(v5, v4);
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::MotionStateUpdate *a2, CMMsl::MotionStateUpdate *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float result;

  v3 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = *((_QWORD *)a2 + 24);
  *((_QWORD *)a2 + 24) = v3;
  LODWORD(v3) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v3;
  LODWORD(v3) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  LODWORD(v3) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v3;
  LODWORD(v3) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v3;
  LODWORD(v3) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v3;
  LODWORD(v3) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v3;
  LODWORD(v3) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v3;
  LODWORD(v3) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v3;
  LODWORD(v3) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v3;
  v4 = *((_QWORD *)this + 3);
  v5 = *((_QWORD *)this + 4);
  v6 = *((_QWORD *)a2 + 4);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 4) = v6;
  *((_QWORD *)a2 + 3) = v4;
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  LODWORD(v7) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v7;
  LODWORD(v7) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v7;
  v8 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v8;
  LODWORD(v8) = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v8;
  LODWORD(v8) = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v8;
  LODWORD(v8) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v8;
  LODWORD(v8) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v8;
  LODWORD(v8) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  v9 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v9;
  v10 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v10;
  LODWORD(v10) = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v10;
  LODWORD(v10) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v10;
  LODWORD(v10) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v10;
  LODWORD(v10) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v10;
  LODWORD(v10) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v10;
  *((_DWORD *)a2 + 28) = v8;
  *((_QWORD *)a2 + 4) = v5;
  LODWORD(v10) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v10;
  LODWORD(v10) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v10;
  LODWORD(v10) = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v10;
  LODWORD(v8) = *((_DWORD *)this + 46);
  *((_DWORD *)this + 46) = *((_DWORD *)a2 + 46);
  *((_DWORD *)a2 + 46) = v8;
  v11 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v11;
  LODWORD(v11) = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v11;
  LODWORD(v11) = *((_DWORD *)this + 47);
  *((_DWORD *)this + 47) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = v11;
  LODWORD(v11) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v11;
  LODWORD(v10) = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v10;
  LODWORD(v10) = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v10;
  result = *((float *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((float *)a2 + 43) = result;
  LODWORD(v11) = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v11;
  return result;
}

uint64_t CMMsl::MotionStateUpdate::MotionStateUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = off_100352CF8;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 192) = 0;
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_QWORD *)(a1 + 32) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  return a1;
}

CMMsl *CMMsl::MotionStateUpdate::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::MotionStateUpdate *v3;
  float v4;
  uint64_t v5;
  _QWORD v7[4];
  uint64_t v8;

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::MotionStateUpdate::MotionStateUpdate((uint64_t)v7, a2);
    v4 = CMMsl::swap(a1, (CMMsl::MotionStateUpdate *)v7, v3);
    v5 = v8;
    v7[0] = off_100352CF8;
    v8 = 0;
    if (v5)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v5 + 8))(v5, v4);
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

uint64_t CMMsl::MotionStateUpdate::formatText(CMMsl::MotionStateUpdate *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(a2, "alsLux", *((_DWORD *)this + 16));
    v5 = *((_QWORD *)this + 24);
    if ((v5 & 0x80) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_46;
    }
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "caltype", *((_DWORD *)this + 17));
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "confidence", *((_DWORD *)this + 18));
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "drivingArmLikelihoodSum", *((float *)this + 19));
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 0x800) == 0)
      goto LABEL_7;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "drivingStowedLikelihoodSum", *((float *)this + 20));
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x800) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0)
      goto LABEL_8;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "exitState", *((_DWORD *)this + 21));
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "hidTimestamp", *((double *)this + 1));
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x1000) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "isMoving", *((_DWORD *)this + 22));
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000) == 0)
      goto LABEL_11;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "isVehicular", *((_DWORD *)this + 23));
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x4000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "machineFrequency", *((float *)this + 24));
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x8000) == 0)
  {
LABEL_12:
    if ((v5 & 0x10000) == 0)
      goto LABEL_13;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "motionType", *((_DWORD *)this + 25));
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x10000) == 0)
  {
LABEL_13:
    if ((v5 & 0x20000) == 0)
      goto LABEL_14;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "mounted", *((_DWORD *)this + 26));
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x20000) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0)
      goto LABEL_15;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "mountedConfidence", *((_DWORD *)this + 27));
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 0x40000) == 0)
      goto LABEL_16;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "now", *((_QWORD *)this + 2));
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x40000) == 0)
  {
LABEL_16:
    if ((v5 & 0x80000) == 0)
      goto LABEL_17;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "rawConfidence", *((_DWORD *)this + 28));
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x80000) == 0)
  {
LABEL_17:
    if ((v5 & 0x100000) == 0)
      goto LABEL_18;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "rawIsVehicular", *((_DWORD *)this + 29));
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x100000) == 0)
  {
LABEL_18:
    if ((v5 & 0x200000) == 0)
      goto LABEL_19;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "rawMotionType", *((_DWORD *)this + 30));
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x200000) == 0)
  {
LABEL_19:
    if ((v5 & 0x400000) == 0)
      goto LABEL_20;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "rowStrokeAmplitude", *((float *)this + 31));
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x400000) == 0)
  {
LABEL_20:
    if ((v5 & 0x800000) == 0)
      goto LABEL_21;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "rowStrokeFrequency", *((float *)this + 32));
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x800000) == 0)
  {
LABEL_21:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_22;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "rowStrokePower", *((float *)this + 33));
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_22:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_23;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "seq", *((_DWORD *)this + 34));
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_24;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "ssLikelihoodSum", *((float *)this + 35));
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_24:
    if ((v5 & 4) == 0)
      goto LABEL_25;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "standing", *((_DWORD *)this + 36));
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 4) == 0)
  {
LABEL_25:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_26;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "startTime", *((_QWORD *)this + 3));
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_27;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "turn", *((_DWORD *)this + 37));
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_28;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "typeYouth", *((_DWORD *)this + 38));
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_29;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "vectorMagnitude", *((float *)this + 39));
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_30;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "vehicleExitState", *((_DWORD *)this + 40));
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_31;
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "vehicleProbabilityLongTermMean0", *((float *)this + 41));
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_32;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "vehicleProbabilityLongTermMean1", *((float *)this + 42));
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_33;
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(a2, "vehicleProbabilityLongTermMean2", *((float *)this + 43));
  v5 = *((_QWORD *)this + 24);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_35;
    goto LABEL_34;
  }
LABEL_75:
  PB::TextFormatter::format(a2, "vehicleType", *((_DWORD *)this + 44));
  if ((*((_QWORD *)this + 24) & 0x800000000) != 0)
LABEL_34:
    PB::TextFormatter::format(a2, "vehicularConfidence", *((_DWORD *)this + 45));
LABEL_35:
  v6 = *((_QWORD *)this + 4);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "vehicularFlags");
  v7 = *((_QWORD *)this + 24);
  if ((v7 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "wallStartTime", *((double *)this + 5));
    v7 = *((_QWORD *)this + 24);
    if ((v7 & 0x10) == 0)
    {
LABEL_39:
      if ((v7 & 0x1000000000) == 0)
        goto LABEL_40;
      goto LABEL_79;
    }
  }
  else if ((v7 & 0x10) == 0)
  {
    goto LABEL_39;
  }
  PB::TextFormatter::format(a2, "workoutDetectionTime", *((_QWORD *)this + 6));
  v7 = *((_QWORD *)this + 24);
  if ((v7 & 0x1000000000) == 0)
  {
LABEL_40:
    if ((v7 & 0x20) == 0)
      goto LABEL_41;
LABEL_80:
    PB::TextFormatter::format(a2, "workoutEscalationTime", *((_QWORD *)this + 7));
    if ((*((_QWORD *)this + 24) & 0x2000000000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_42;
  }
LABEL_79:
  PB::TextFormatter::format(a2, "workoutDetectionType", *((_DWORD *)this + 46));
  v7 = *((_QWORD *)this + 24);
  if ((v7 & 0x20) != 0)
    goto LABEL_80;
LABEL_41:
  if ((v7 & 0x2000000000) != 0)
LABEL_42:
    PB::TextFormatter::format(a2, "youthClassificationReason", *((_DWORD *)this + 47));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MotionStateUpdate::readFrom(CMMsl::MotionStateUpdate *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t result;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  char v99;
  unsigned int v100;
  uint64_t v101;
  unint64_t v102;
  char v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  char v107;
  unsigned int v108;
  uint64_t v109;
  unint64_t v110;
  char v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  char v115;
  unsigned int v116;
  uint64_t v117;
  unint64_t v118;
  char v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  char v124;
  unsigned int v125;
  uint64_t v126;
  unint64_t v127;
  char v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char v136;
  unsigned int v137;
  uint64_t v138;
  unint64_t v139;
  char v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  char v144;
  unsigned int v145;
  uint64_t v146;
  unint64_t v147;
  char v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  char v152;
  unsigned int v153;
  uint64_t v154;
  unint64_t v155;
  char v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  char v160;
  unsigned int v161;
  uint64_t v162;
  unint64_t v163;
  char v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  char v168;
  unsigned int v169;
  uint64_t v170;
  unint64_t v171;
  char v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  char v176;
  unsigned int v177;
  uint64_t v178;
  unint64_t v179;
  char v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  char v187;
  unsigned int v188;
  uint64_t v189;
  unint64_t v190;
  char v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  char v195;
  unsigned int v196;
  uint64_t v197;
  unint64_t v198;
  char v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  char v203;
  unsigned int v204;
  uint64_t v205;
  unint64_t v206;
  char v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  char v211;
  unsigned int v212;
  uint64_t v213;
  unint64_t v214;
  char v215;
  unint64_t v216;
  unint64_t v217;
  uint64_t v218;
  char v219;
  unsigned int v220;
  uint64_t v221;
  unint64_t v222;
  char v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  char v230;
  unsigned int v231;
  uint64_t v232;
  unint64_t v233;
  char v234;
  char v235;
  unsigned int v236;
  unint64_t v237;
  char v238;
  char v239;
  unsigned int v240;
  unint64_t v241;
  char v242;
  char v243;
  unsigned int v244;
  unint64_t v245;
  char v246;
  char v247;
  unsigned int v248;
  unint64_t v249;
  char v250;
  char v251;
  unsigned int v252;
  unint64_t v253;
  char v254;
  char v255;
  unsigned int v256;
  unint64_t v257;
  char v258;
  char v259;
  unsigned int v260;
  unint64_t v261;
  char v262;
  char v263;
  unsigned int v264;
  unint64_t v265;
  char v266;
  char v267;
  unsigned int v268;
  unint64_t v269;
  char v270;
  char v271;
  unsigned int v272;
  unint64_t v273;
  char v274;
  char v275;
  unsigned int v276;
  unint64_t v277;
  char v278;
  char v279;
  unsigned int v280;
  unint64_t v281;
  char v282;
  char v283;
  unsigned int v284;
  unint64_t v285;
  char v286;
  char v287;
  unsigned int v288;
  unint64_t v289;
  char v290;
  char v291;
  unsigned int v292;
  unint64_t v293;
  char v294;
  char v295;
  unsigned int v296;
  unint64_t v297;
  char v298;
  char v299;
  unsigned int v300;
  unint64_t v301;
  char v302;
  char v303;
  unsigned int v304;
  unint64_t v305;
  char v306;
  char v307;
  unsigned int v308;
  unint64_t v309;
  char v310;
  char v311;
  unsigned int v312;
  unint64_t v313;
  char v314;
  char v315;
  unsigned int v316;
  unint64_t v317;
  char v318;
  char v319;
  unsigned int v320;
  unint64_t v321;
  char v322;
  char v323;
  unsigned int v324;
  unint64_t v325;
  char v326;
  char v327;
  unsigned int v328;
  unint64_t v329;
  char v330;
  char v331;
  unsigned int v332;
  unint64_t v333;
  char v334;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_QWORD *)this + 24) |= 0x8000uLL;
          v20 = *((_QWORD *)a2 + 1);
          v21 = *((_QWORD *)a2 + 2);
          v22 = *(_QWORD *)a2;
          if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
          {
            v23 = 0;
            v24 = 0;
            v25 = 0;
            do
            {
              v26 = v20 + 1;
              *((_QWORD *)a2 + 1) = v20 + 1;
              v27 = *(_BYTE *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0)
                goto LABEL_445;
              v23 += 7;
              v20 = v26;
              v14 = v24++ > 8;
            }
            while (!v14);
LABEL_246:
            LODWORD(v25) = 0;
            goto LABEL_445;
          }
          v235 = 0;
          v236 = 0;
          v25 = 0;
          if (v21 <= v20)
            v21 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v21 == v20)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v237 = v20 + 1;
              v238 = *(_BYTE *)(v22 + v20);
              *((_QWORD *)a2 + 1) = v237;
              v25 |= (unint64_t)(v238 & 0x7F) << v235;
              if (v238 < 0)
              {
                v235 += 7;
                v20 = v237;
                v14 = v236++ > 8;
                if (v14)
                  goto LABEL_246;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v25) = 0;
            }
            break;
          }
LABEL_445:
          *((_DWORD *)this + 25) = v25;
          goto LABEL_518;
        case 2u:
          *((_QWORD *)this + 24) |= 0x100uLL;
          v29 = *((_QWORD *)a2 + 1);
          v30 = *((_QWORD *)a2 + 2);
          v31 = *(_QWORD *)a2;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            v32 = 0;
            v33 = 0;
            v34 = 0;
            do
            {
              v35 = v29 + 1;
              *((_QWORD *)a2 + 1) = v29 + 1;
              v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0)
                goto LABEL_448;
              v32 += 7;
              v29 = v35;
              v14 = v33++ > 8;
            }
            while (!v14);
LABEL_253:
            LODWORD(v34) = 0;
            goto LABEL_448;
          }
          v239 = 0;
          v240 = 0;
          v34 = 0;
          if (v30 <= v29)
            v30 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v241 = v29 + 1;
              v242 = *(_BYTE *)(v31 + v29);
              *((_QWORD *)a2 + 1) = v241;
              v34 |= (unint64_t)(v242 & 0x7F) << v239;
              if (v242 < 0)
              {
                v239 += 7;
                v29 = v241;
                v14 = v240++ > 8;
                if (v14)
                  goto LABEL_253;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v34) = 0;
            }
            break;
          }
LABEL_448:
          *((_DWORD *)this + 18) = v34;
          goto LABEL_518;
        case 3u:
          *((_QWORD *)this + 24) |= 0x10000uLL;
          v37 = *((_QWORD *)a2 + 1);
          v38 = *((_QWORD *)a2 + 2);
          v39 = *(_QWORD *)a2;
          if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
          {
            v40 = 0;
            v41 = 0;
            v42 = 0;
            do
            {
              v43 = v37 + 1;
              *((_QWORD *)a2 + 1) = v37 + 1;
              v44 = *(_BYTE *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0)
                goto LABEL_451;
              v40 += 7;
              v37 = v43;
              v14 = v41++ > 8;
            }
            while (!v14);
LABEL_260:
            LODWORD(v42) = 0;
            goto LABEL_451;
          }
          v243 = 0;
          v244 = 0;
          v42 = 0;
          if (v38 <= v37)
            v38 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v38 == v37)
            {
              LODWORD(v42) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v245 = v37 + 1;
              v246 = *(_BYTE *)(v39 + v37);
              *((_QWORD *)a2 + 1) = v245;
              v42 |= (unint64_t)(v246 & 0x7F) << v243;
              if (v246 < 0)
              {
                v243 += 7;
                v37 = v245;
                v14 = v244++ > 8;
                if (v14)
                  goto LABEL_260;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v42) = 0;
            }
            break;
          }
LABEL_451:
          *((_DWORD *)this + 26) = v42;
          goto LABEL_518;
        case 4u:
          *((_QWORD *)this + 24) |= 0x20000uLL;
          v45 = *((_QWORD *)a2 + 1);
          v46 = *((_QWORD *)a2 + 2);
          v47 = *(_QWORD *)a2;
          if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
          {
            v48 = 0;
            v49 = 0;
            v50 = 0;
            do
            {
              v51 = v45 + 1;
              *((_QWORD *)a2 + 1) = v45 + 1;
              v52 = *(_BYTE *)(v47 + v45);
              v50 |= (unint64_t)(v52 & 0x7F) << v48;
              if ((v52 & 0x80) == 0)
                goto LABEL_454;
              v48 += 7;
              v45 = v51;
              v14 = v49++ > 8;
            }
            while (!v14);
LABEL_267:
            LODWORD(v50) = 0;
            goto LABEL_454;
          }
          v247 = 0;
          v248 = 0;
          v50 = 0;
          if (v46 <= v45)
            v46 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v46 == v45)
            {
              LODWORD(v50) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v249 = v45 + 1;
              v250 = *(_BYTE *)(v47 + v45);
              *((_QWORD *)a2 + 1) = v249;
              v50 |= (unint64_t)(v250 & 0x7F) << v247;
              if (v250 < 0)
              {
                v247 += 7;
                v45 = v249;
                v14 = v248++ > 8;
                if (v14)
                  goto LABEL_267;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v50) = 0;
            }
            break;
          }
LABEL_454:
          *((_DWORD *)this + 27) = v50;
          goto LABEL_518;
        case 5u:
          *((_QWORD *)this + 24) |= 0x800uLL;
          v53 = *((_QWORD *)a2 + 1);
          v54 = *((_QWORD *)a2 + 2);
          v55 = *(_QWORD *)a2;
          if (v53 <= 0xFFFFFFFFFFFFFFF5 && v53 + 10 <= v54)
          {
            v56 = 0;
            v57 = 0;
            v58 = 0;
            do
            {
              v59 = v53 + 1;
              *((_QWORD *)a2 + 1) = v53 + 1;
              v60 = *(_BYTE *)(v55 + v53);
              v58 |= (unint64_t)(v60 & 0x7F) << v56;
              if ((v60 & 0x80) == 0)
                goto LABEL_457;
              v56 += 7;
              v53 = v59;
              v14 = v57++ > 8;
            }
            while (!v14);
LABEL_274:
            LODWORD(v58) = 0;
            goto LABEL_457;
          }
          v251 = 0;
          v252 = 0;
          v58 = 0;
          if (v54 <= v53)
            v54 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v54 == v53)
            {
              LODWORD(v58) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v253 = v53 + 1;
              v254 = *(_BYTE *)(v55 + v53);
              *((_QWORD *)a2 + 1) = v253;
              v58 |= (unint64_t)(v254 & 0x7F) << v251;
              if (v254 < 0)
              {
                v251 += 7;
                v53 = v253;
                v14 = v252++ > 8;
                if (v14)
                  goto LABEL_274;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v58) = 0;
            }
            break;
          }
LABEL_457:
          *((_DWORD *)this + 21) = v58;
          goto LABEL_518;
        case 6u:
          *((_QWORD *)this + 24) |= 0x8000000uLL;
          v61 = *((_QWORD *)a2 + 1);
          v62 = *((_QWORD *)a2 + 2);
          v63 = *(_QWORD *)a2;
          if (v61 <= 0xFFFFFFFFFFFFFFF5 && v61 + 10 <= v62)
          {
            v64 = 0;
            v65 = 0;
            v66 = 0;
            do
            {
              v67 = v61 + 1;
              *((_QWORD *)a2 + 1) = v61 + 1;
              v68 = *(_BYTE *)(v63 + v61);
              v66 |= (unint64_t)(v68 & 0x7F) << v64;
              if ((v68 & 0x80) == 0)
                goto LABEL_460;
              v64 += 7;
              v61 = v67;
              v14 = v65++ > 8;
            }
            while (!v14);
LABEL_281:
            LODWORD(v66) = 0;
            goto LABEL_460;
          }
          v255 = 0;
          v256 = 0;
          v66 = 0;
          if (v62 <= v61)
            v62 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v62 == v61)
            {
              LODWORD(v66) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v257 = v61 + 1;
              v258 = *(_BYTE *)(v63 + v61);
              *((_QWORD *)a2 + 1) = v257;
              v66 |= (unint64_t)(v258 & 0x7F) << v255;
              if (v258 < 0)
              {
                v255 += 7;
                v61 = v257;
                v14 = v256++ > 8;
                if (v14)
                  goto LABEL_281;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v66) = 0;
            }
            break;
          }
LABEL_460:
          *((_DWORD *)this + 37) = v66;
          goto LABEL_518;
        case 7u:
          *((_QWORD *)this + 24) |= 0x2000uLL;
          v69 = *((_QWORD *)a2 + 1);
          v70 = *((_QWORD *)a2 + 2);
          v71 = *(_QWORD *)a2;
          if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
          {
            v72 = 0;
            v73 = 0;
            v74 = 0;
            do
            {
              v75 = v69 + 1;
              *((_QWORD *)a2 + 1) = v69 + 1;
              v76 = *(_BYTE *)(v71 + v69);
              v74 |= (unint64_t)(v76 & 0x7F) << v72;
              if ((v76 & 0x80) == 0)
                goto LABEL_463;
              v72 += 7;
              v69 = v75;
              v14 = v73++ > 8;
            }
            while (!v14);
LABEL_288:
            LODWORD(v74) = 0;
            goto LABEL_463;
          }
          v259 = 0;
          v260 = 0;
          v74 = 0;
          if (v70 <= v69)
            v70 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v70 == v69)
            {
              LODWORD(v74) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v261 = v69 + 1;
              v262 = *(_BYTE *)(v71 + v69);
              *((_QWORD *)a2 + 1) = v261;
              v74 |= (unint64_t)(v262 & 0x7F) << v259;
              if (v262 < 0)
              {
                v259 += 7;
                v69 = v261;
                v14 = v260++ > 8;
                if (v14)
                  goto LABEL_288;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v74) = 0;
            }
            break;
          }
LABEL_463:
          *((_DWORD *)this + 23) = v74;
          goto LABEL_518;
        case 8u:
          *((_QWORD *)this + 24) |= 0x1000uLL;
          v77 = *((_QWORD *)a2 + 1);
          v78 = *((_QWORD *)a2 + 2);
          v79 = *(_QWORD *)a2;
          if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
          {
            v80 = 0;
            v81 = 0;
            v82 = 0;
            do
            {
              v83 = v77 + 1;
              *((_QWORD *)a2 + 1) = v77 + 1;
              v84 = *(_BYTE *)(v79 + v77);
              v82 |= (unint64_t)(v84 & 0x7F) << v80;
              if ((v84 & 0x80) == 0)
                goto LABEL_466;
              v80 += 7;
              v77 = v83;
              v14 = v81++ > 8;
            }
            while (!v14);
LABEL_295:
            LODWORD(v82) = 0;
            goto LABEL_466;
          }
          v263 = 0;
          v264 = 0;
          v82 = 0;
          if (v78 <= v77)
            v78 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v78 == v77)
            {
              LODWORD(v82) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v265 = v77 + 1;
              v266 = *(_BYTE *)(v79 + v77);
              *((_QWORD *)a2 + 1) = v265;
              v82 |= (unint64_t)(v266 & 0x7F) << v263;
              if (v266 < 0)
              {
                v263 += 7;
                v77 = v265;
                v14 = v264++ > 8;
                if (v14)
                  goto LABEL_295;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v82) = 0;
            }
            break;
          }
LABEL_466:
          *((_DWORD *)this + 22) = v82;
          goto LABEL_518;
        case 9u:
          *((_QWORD *)this + 24) |= 0x1000000uLL;
          v85 = *((_QWORD *)a2 + 1);
          v86 = *((_QWORD *)a2 + 2);
          v87 = *(_QWORD *)a2;
          if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
          {
            v88 = 0;
            v89 = 0;
            v90 = 0;
            do
            {
              v91 = v85 + 1;
              *((_QWORD *)a2 + 1) = v85 + 1;
              v92 = *(_BYTE *)(v87 + v85);
              v90 |= (unint64_t)(v92 & 0x7F) << v88;
              if ((v92 & 0x80) == 0)
                goto LABEL_469;
              v88 += 7;
              v85 = v91;
              v14 = v89++ > 8;
            }
            while (!v14);
LABEL_302:
            LODWORD(v90) = 0;
            goto LABEL_469;
          }
          v267 = 0;
          v268 = 0;
          v90 = 0;
          if (v86 <= v85)
            v86 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v86 == v85)
            {
              LODWORD(v90) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v269 = v85 + 1;
              v270 = *(_BYTE *)(v87 + v85);
              *((_QWORD *)a2 + 1) = v269;
              v90 |= (unint64_t)(v270 & 0x7F) << v267;
              if (v270 < 0)
              {
                v267 += 7;
                v85 = v269;
                v14 = v268++ > 8;
                if (v14)
                  goto LABEL_302;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v90) = 0;
            }
            break;
          }
LABEL_469:
          *((_DWORD *)this + 34) = v90;
          goto LABEL_518;
        case 0xAu:
          *((_QWORD *)this + 24) |= 8uLL;
          v93 = *((_QWORD *)a2 + 1);
          if (v93 > 0xFFFFFFFFFFFFFFF7 || v93 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_232;
          *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v93);
          goto LABEL_93;
        case 0xBu:
          *((_QWORD *)this + 24) |= 1uLL;
          v94 = *((_QWORD *)a2 + 1);
          if (v94 > 0xFFFFFFFFFFFFFFF7 || v94 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_232;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v94);
LABEL_93:
          v95 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_417;
        case 0xCu:
          *((_QWORD *)this + 24) |= 4uLL;
          v96 = *((_QWORD *)a2 + 1);
          v97 = *((_QWORD *)a2 + 2);
          v98 = *(_QWORD *)a2;
          if (v96 <= 0xFFFFFFFFFFFFFFF5 && v96 + 10 <= v97)
          {
            v99 = 0;
            v100 = 0;
            v101 = 0;
            do
            {
              v102 = v96 + 1;
              *((_QWORD *)a2 + 1) = v96 + 1;
              v103 = *(_BYTE *)(v98 + v96);
              v101 |= (unint64_t)(v103 & 0x7F) << v99;
              if ((v103 & 0x80) == 0)
                goto LABEL_472;
              v99 += 7;
              v96 = v102;
              v14 = v100++ > 8;
            }
            while (!v14);
LABEL_309:
            v101 = 0;
            goto LABEL_472;
          }
          v271 = 0;
          v272 = 0;
          v101 = 0;
          if (v97 <= v96)
            v97 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v97 == v96)
            {
              v101 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v273 = v96 + 1;
              v274 = *(_BYTE *)(v98 + v96);
              *((_QWORD *)a2 + 1) = v273;
              v101 |= (unint64_t)(v274 & 0x7F) << v271;
              if (v274 < 0)
              {
                v271 += 7;
                v96 = v273;
                v14 = v272++ > 8;
                if (v14)
                  goto LABEL_309;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v101 = 0;
            }
            break;
          }
LABEL_472:
          *((_QWORD *)this + 3) = v101;
          goto LABEL_518;
        case 0xDu:
          *((_QWORD *)this + 24) |= 2uLL;
          v104 = *((_QWORD *)a2 + 1);
          v105 = *((_QWORD *)a2 + 2);
          v106 = *(_QWORD *)a2;
          if (v104 <= 0xFFFFFFFFFFFFFFF5 && v104 + 10 <= v105)
          {
            v107 = 0;
            v108 = 0;
            v109 = 0;
            do
            {
              v110 = v104 + 1;
              *((_QWORD *)a2 + 1) = v104 + 1;
              v111 = *(_BYTE *)(v106 + v104);
              v109 |= (unint64_t)(v111 & 0x7F) << v107;
              if ((v111 & 0x80) == 0)
                goto LABEL_475;
              v107 += 7;
              v104 = v110;
              v14 = v108++ > 8;
            }
            while (!v14);
LABEL_316:
            v109 = 0;
            goto LABEL_475;
          }
          v275 = 0;
          v276 = 0;
          v109 = 0;
          if (v105 <= v104)
            v105 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v105 == v104)
            {
              v109 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v277 = v104 + 1;
              v278 = *(_BYTE *)(v106 + v104);
              *((_QWORD *)a2 + 1) = v277;
              v109 |= (unint64_t)(v278 & 0x7F) << v275;
              if (v278 < 0)
              {
                v275 += 7;
                v104 = v277;
                v14 = v276++ > 8;
                if (v14)
                  goto LABEL_316;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v109 = 0;
            }
            break;
          }
LABEL_475:
          *((_QWORD *)this + 2) = v109;
          goto LABEL_518;
        case 0xEu:
          *((_QWORD *)this + 24) |= 0x80uLL;
          v112 = *((_QWORD *)a2 + 1);
          v113 = *((_QWORD *)a2 + 2);
          v114 = *(_QWORD *)a2;
          if (v112 <= 0xFFFFFFFFFFFFFFF5 && v112 + 10 <= v113)
          {
            v115 = 0;
            v116 = 0;
            v117 = 0;
            do
            {
              v118 = v112 + 1;
              *((_QWORD *)a2 + 1) = v112 + 1;
              v119 = *(_BYTE *)(v114 + v112);
              v117 |= (unint64_t)(v119 & 0x7F) << v115;
              if ((v119 & 0x80) == 0)
                goto LABEL_478;
              v115 += 7;
              v112 = v118;
              v14 = v116++ > 8;
            }
            while (!v14);
LABEL_323:
            LODWORD(v117) = 0;
            goto LABEL_478;
          }
          v279 = 0;
          v280 = 0;
          v117 = 0;
          if (v113 <= v112)
            v113 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v113 == v112)
            {
              LODWORD(v117) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v281 = v112 + 1;
              v282 = *(_BYTE *)(v114 + v112);
              *((_QWORD *)a2 + 1) = v281;
              v117 |= (unint64_t)(v282 & 0x7F) << v279;
              if (v282 < 0)
              {
                v279 += 7;
                v112 = v281;
                v14 = v280++ > 8;
                if (v14)
                  goto LABEL_323;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v117) = 0;
            }
            break;
          }
LABEL_478:
          *((_DWORD *)this + 17) = v117;
          goto LABEL_518;
        case 0xFu:
          *((_QWORD *)this + 24) |= 0x20000000uLL;
          v120 = *((_QWORD *)a2 + 1);
          if (v120 > 0xFFFFFFFFFFFFFFFBLL || v120 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_232;
          *((_DWORD *)this + 39) = *(_DWORD *)(*(_QWORD *)a2 + v120);
          goto LABEL_416;
        case 0x10u:
          *((_QWORD *)this + 24) |= 0x4000000uLL;
          v121 = *((_QWORD *)a2 + 1);
          v122 = *((_QWORD *)a2 + 2);
          v123 = *(_QWORD *)a2;
          if (v121 <= 0xFFFFFFFFFFFFFFF5 && v121 + 10 <= v122)
          {
            v124 = 0;
            v125 = 0;
            v126 = 0;
            do
            {
              v127 = v121 + 1;
              *((_QWORD *)a2 + 1) = v121 + 1;
              v128 = *(_BYTE *)(v123 + v121);
              v126 |= (unint64_t)(v128 & 0x7F) << v124;
              if ((v128 & 0x80) == 0)
                goto LABEL_481;
              v124 += 7;
              v121 = v127;
              v14 = v125++ > 8;
            }
            while (!v14);
LABEL_330:
            LODWORD(v126) = 0;
            goto LABEL_481;
          }
          v283 = 0;
          v284 = 0;
          v126 = 0;
          if (v122 <= v121)
            v122 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v122 == v121)
            {
              LODWORD(v126) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v285 = v121 + 1;
              v286 = *(_BYTE *)(v123 + v121);
              *((_QWORD *)a2 + 1) = v285;
              v126 |= (unint64_t)(v286 & 0x7F) << v283;
              if (v286 < 0)
              {
                v283 += 7;
                v121 = v285;
                v14 = v284++ > 8;
                if (v14)
                  goto LABEL_330;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v126) = 0;
            }
            break;
          }
LABEL_481:
          *((_DWORD *)this + 36) = v126;
          goto LABEL_518;
        case 0x11u:
          *((_QWORD *)this + 24) |= 0x4000uLL;
          v129 = *((_QWORD *)a2 + 1);
          if (v129 > 0xFFFFFFFFFFFFFFFBLL || v129 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_232;
          *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v129);
          goto LABEL_416;
        case 0x12u:
          *((_QWORD *)this + 24) |= 0x400000uLL;
          v130 = *((_QWORD *)a2 + 1);
          if (v130 > 0xFFFFFFFFFFFFFFFBLL || v130 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_232;
          *((_DWORD *)this + 32) = *(_DWORD *)(*(_QWORD *)a2 + v130);
          goto LABEL_416;
        case 0x13u:
          *((_QWORD *)this + 24) |= 0x200000uLL;
          v131 = *((_QWORD *)a2 + 1);
          if (v131 > 0xFFFFFFFFFFFFFFFBLL || v131 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_232;
          *((_DWORD *)this + 31) = *(_DWORD *)(*(_QWORD *)a2 + v131);
          goto LABEL_416;
        case 0x14u:
          *((_QWORD *)this + 24) |= 0x800000uLL;
          v132 = *((_QWORD *)a2 + 1);
          if (v132 > 0xFFFFFFFFFFFFFFFBLL || v132 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_232;
          *((_DWORD *)this + 33) = *(_DWORD *)(*(_QWORD *)a2 + v132);
          goto LABEL_416;
        case 0x15u:
          *((_QWORD *)this + 24) |= 0x10uLL;
          v133 = *((_QWORD *)a2 + 1);
          v134 = *((_QWORD *)a2 + 2);
          v135 = *(_QWORD *)a2;
          if (v133 <= 0xFFFFFFFFFFFFFFF5 && v133 + 10 <= v134)
          {
            v136 = 0;
            v137 = 0;
            v138 = 0;
            do
            {
              v139 = v133 + 1;
              *((_QWORD *)a2 + 1) = v133 + 1;
              v140 = *(_BYTE *)(v135 + v133);
              v138 |= (unint64_t)(v140 & 0x7F) << v136;
              if ((v140 & 0x80) == 0)
                goto LABEL_484;
              v136 += 7;
              v133 = v139;
              v14 = v137++ > 8;
            }
            while (!v14);
LABEL_337:
            v138 = 0;
            goto LABEL_484;
          }
          v287 = 0;
          v288 = 0;
          v138 = 0;
          if (v134 <= v133)
            v134 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v134 == v133)
            {
              v138 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v289 = v133 + 1;
              v290 = *(_BYTE *)(v135 + v133);
              *((_QWORD *)a2 + 1) = v289;
              v138 |= (unint64_t)(v290 & 0x7F) << v287;
              if (v290 < 0)
              {
                v287 += 7;
                v133 = v289;
                v14 = v288++ > 8;
                if (v14)
                  goto LABEL_337;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v138 = 0;
            }
            break;
          }
LABEL_484:
          *((_QWORD *)this + 6) = v138;
          goto LABEL_518;
        case 0x16u:
          *((_QWORD *)this + 24) |= 0x800000000uLL;
          v141 = *((_QWORD *)a2 + 1);
          v142 = *((_QWORD *)a2 + 2);
          v143 = *(_QWORD *)a2;
          if (v141 <= 0xFFFFFFFFFFFFFFF5 && v141 + 10 <= v142)
          {
            v144 = 0;
            v145 = 0;
            v146 = 0;
            do
            {
              v147 = v141 + 1;
              *((_QWORD *)a2 + 1) = v141 + 1;
              v148 = *(_BYTE *)(v143 + v141);
              v146 |= (unint64_t)(v148 & 0x7F) << v144;
              if ((v148 & 0x80) == 0)
                goto LABEL_487;
              v144 += 7;
              v141 = v147;
              v14 = v145++ > 8;
            }
            while (!v14);
LABEL_344:
            LODWORD(v146) = 0;
            goto LABEL_487;
          }
          v291 = 0;
          v292 = 0;
          v146 = 0;
          if (v142 <= v141)
            v142 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v142 == v141)
            {
              LODWORD(v146) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v293 = v141 + 1;
              v294 = *(_BYTE *)(v143 + v141);
              *((_QWORD *)a2 + 1) = v293;
              v146 |= (unint64_t)(v294 & 0x7F) << v291;
              if (v294 < 0)
              {
                v291 += 7;
                v141 = v293;
                v14 = v292++ > 8;
                if (v14)
                  goto LABEL_344;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v146) = 0;
            }
            break;
          }
LABEL_487:
          *((_DWORD *)this + 45) = v146;
          goto LABEL_518;
        case 0x17u:
          *((_QWORD *)this + 24) |= 0x40000000uLL;
          v149 = *((_QWORD *)a2 + 1);
          v150 = *((_QWORD *)a2 + 2);
          v151 = *(_QWORD *)a2;
          if (v149 <= 0xFFFFFFFFFFFFFFF5 && v149 + 10 <= v150)
          {
            v152 = 0;
            v153 = 0;
            v154 = 0;
            do
            {
              v155 = v149 + 1;
              *((_QWORD *)a2 + 1) = v149 + 1;
              v156 = *(_BYTE *)(v151 + v149);
              v154 |= (unint64_t)(v156 & 0x7F) << v152;
              if ((v156 & 0x80) == 0)
                goto LABEL_490;
              v152 += 7;
              v149 = v155;
              v14 = v153++ > 8;
            }
            while (!v14);
LABEL_351:
            LODWORD(v154) = 0;
            goto LABEL_490;
          }
          v295 = 0;
          v296 = 0;
          v154 = 0;
          if (v150 <= v149)
            v150 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v150 == v149)
            {
              LODWORD(v154) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v297 = v149 + 1;
              v298 = *(_BYTE *)(v151 + v149);
              *((_QWORD *)a2 + 1) = v297;
              v154 |= (unint64_t)(v298 & 0x7F) << v295;
              if (v298 < 0)
              {
                v295 += 7;
                v149 = v297;
                v14 = v296++ > 8;
                if (v14)
                  goto LABEL_351;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v154) = 0;
            }
            break;
          }
LABEL_490:
          *((_DWORD *)this + 40) = v154;
          goto LABEL_518;
        case 0x18u:
          *((_QWORD *)this + 24) |= 0x100000uLL;
          v157 = *((_QWORD *)a2 + 1);
          v158 = *((_QWORD *)a2 + 2);
          v159 = *(_QWORD *)a2;
          if (v157 <= 0xFFFFFFFFFFFFFFF5 && v157 + 10 <= v158)
          {
            v160 = 0;
            v161 = 0;
            v162 = 0;
            do
            {
              v163 = v157 + 1;
              *((_QWORD *)a2 + 1) = v157 + 1;
              v164 = *(_BYTE *)(v159 + v157);
              v162 |= (unint64_t)(v164 & 0x7F) << v160;
              if ((v164 & 0x80) == 0)
                goto LABEL_493;
              v160 += 7;
              v157 = v163;
              v14 = v161++ > 8;
            }
            while (!v14);
LABEL_358:
            LODWORD(v162) = 0;
            goto LABEL_493;
          }
          v299 = 0;
          v300 = 0;
          v162 = 0;
          if (v158 <= v157)
            v158 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v158 == v157)
            {
              LODWORD(v162) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v301 = v157 + 1;
              v302 = *(_BYTE *)(v159 + v157);
              *((_QWORD *)a2 + 1) = v301;
              v162 |= (unint64_t)(v302 & 0x7F) << v299;
              if (v302 < 0)
              {
                v299 += 7;
                v157 = v301;
                v14 = v300++ > 8;
                if (v14)
                  goto LABEL_358;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v162) = 0;
            }
            break;
          }
LABEL_493:
          *((_DWORD *)this + 30) = v162;
          goto LABEL_518;
        case 0x19u:
          *((_QWORD *)this + 24) |= 0x80000uLL;
          v165 = *((_QWORD *)a2 + 1);
          v166 = *((_QWORD *)a2 + 2);
          v167 = *(_QWORD *)a2;
          if (v165 <= 0xFFFFFFFFFFFFFFF5 && v165 + 10 <= v166)
          {
            v168 = 0;
            v169 = 0;
            v170 = 0;
            do
            {
              v171 = v165 + 1;
              *((_QWORD *)a2 + 1) = v165 + 1;
              v172 = *(_BYTE *)(v167 + v165);
              v170 |= (unint64_t)(v172 & 0x7F) << v168;
              if ((v172 & 0x80) == 0)
                goto LABEL_496;
              v168 += 7;
              v165 = v171;
              v14 = v169++ > 8;
            }
            while (!v14);
LABEL_365:
            LODWORD(v170) = 0;
            goto LABEL_496;
          }
          v303 = 0;
          v304 = 0;
          v170 = 0;
          if (v166 <= v165)
            v166 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v166 == v165)
            {
              LODWORD(v170) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v305 = v165 + 1;
              v306 = *(_BYTE *)(v167 + v165);
              *((_QWORD *)a2 + 1) = v305;
              v170 |= (unint64_t)(v306 & 0x7F) << v303;
              if (v306 < 0)
              {
                v303 += 7;
                v165 = v305;
                v14 = v304++ > 8;
                if (v14)
                  goto LABEL_365;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v170) = 0;
            }
            break;
          }
LABEL_496:
          *((_DWORD *)this + 29) = v170;
          goto LABEL_518;
        case 0x1Au:
          *((_QWORD *)this + 24) |= 0x40000uLL;
          v173 = *((_QWORD *)a2 + 1);
          v174 = *((_QWORD *)a2 + 2);
          v175 = *(_QWORD *)a2;
          if (v173 <= 0xFFFFFFFFFFFFFFF5 && v173 + 10 <= v174)
          {
            v176 = 0;
            v177 = 0;
            v178 = 0;
            do
            {
              v179 = v173 + 1;
              *((_QWORD *)a2 + 1) = v173 + 1;
              v180 = *(_BYTE *)(v175 + v173);
              v178 |= (unint64_t)(v180 & 0x7F) << v176;
              if ((v180 & 0x80) == 0)
                goto LABEL_499;
              v176 += 7;
              v173 = v179;
              v14 = v177++ > 8;
            }
            while (!v14);
LABEL_372:
            LODWORD(v178) = 0;
            goto LABEL_499;
          }
          v307 = 0;
          v308 = 0;
          v178 = 0;
          if (v174 <= v173)
            v174 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v174 == v173)
            {
              LODWORD(v178) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v309 = v173 + 1;
              v310 = *(_BYTE *)(v175 + v173);
              *((_QWORD *)a2 + 1) = v309;
              v178 |= (unint64_t)(v310 & 0x7F) << v307;
              if (v310 < 0)
              {
                v307 += 7;
                v173 = v309;
                v14 = v308++ > 8;
                if (v14)
                  goto LABEL_372;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v178) = 0;
            }
            break;
          }
LABEL_499:
          *((_DWORD *)this + 28) = v178;
          goto LABEL_518;
        case 0x1Bu:
          operator new();
        case 0x1Cu:
          *((_QWORD *)this + 24) |= 0x400uLL;
          v181 = *((_QWORD *)a2 + 1);
          if (v181 > 0xFFFFFFFFFFFFFFFBLL || v181 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_232;
          *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v181);
          goto LABEL_416;
        case 0x1Du:
          *((_QWORD *)this + 24) |= 0x200uLL;
          v182 = *((_QWORD *)a2 + 1);
          if (v182 > 0xFFFFFFFFFFFFFFFBLL || v182 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_232;
          *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v182);
          goto LABEL_416;
        case 0x1Eu:
          *((_QWORD *)this + 24) |= 0x2000000uLL;
          v183 = *((_QWORD *)a2 + 1);
          if (v183 > 0xFFFFFFFFFFFFFFFBLL || v183 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_232;
          *((_DWORD *)this + 35) = *(_DWORD *)(*(_QWORD *)a2 + v183);
          goto LABEL_416;
        case 0x1Fu:
          *((_QWORD *)this + 24) |= 0x1000000000uLL;
          v184 = *((_QWORD *)a2 + 1);
          v185 = *((_QWORD *)a2 + 2);
          v186 = *(_QWORD *)a2;
          if (v184 <= 0xFFFFFFFFFFFFFFF5 && v184 + 10 <= v185)
          {
            v187 = 0;
            v188 = 0;
            v189 = 0;
            do
            {
              v190 = v184 + 1;
              *((_QWORD *)a2 + 1) = v184 + 1;
              v191 = *(_BYTE *)(v186 + v184);
              v189 |= (unint64_t)(v191 & 0x7F) << v187;
              if ((v191 & 0x80) == 0)
                goto LABEL_502;
              v187 += 7;
              v184 = v190;
              v14 = v188++ > 8;
            }
            while (!v14);
LABEL_379:
            LODWORD(v189) = 0;
            goto LABEL_502;
          }
          v311 = 0;
          v312 = 0;
          v189 = 0;
          if (v185 <= v184)
            v185 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v185 == v184)
            {
              LODWORD(v189) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v313 = v184 + 1;
              v314 = *(_BYTE *)(v186 + v184);
              *((_QWORD *)a2 + 1) = v313;
              v189 |= (unint64_t)(v314 & 0x7F) << v311;
              if (v314 < 0)
              {
                v311 += 7;
                v184 = v313;
                v14 = v312++ > 8;
                if (v14)
                  goto LABEL_379;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v189) = 0;
            }
            break;
          }
LABEL_502:
          *((_DWORD *)this + 46) = v189;
          goto LABEL_518;
        case 0x20u:
          *((_QWORD *)this + 24) |= 0x20uLL;
          v192 = *((_QWORD *)a2 + 1);
          v193 = *((_QWORD *)a2 + 2);
          v194 = *(_QWORD *)a2;
          if (v192 <= 0xFFFFFFFFFFFFFFF5 && v192 + 10 <= v193)
          {
            v195 = 0;
            v196 = 0;
            v197 = 0;
            do
            {
              v198 = v192 + 1;
              *((_QWORD *)a2 + 1) = v192 + 1;
              v199 = *(_BYTE *)(v194 + v192);
              v197 |= (unint64_t)(v199 & 0x7F) << v195;
              if ((v199 & 0x80) == 0)
                goto LABEL_505;
              v195 += 7;
              v192 = v198;
              v14 = v196++ > 8;
            }
            while (!v14);
LABEL_386:
            v197 = 0;
            goto LABEL_505;
          }
          v315 = 0;
          v316 = 0;
          v197 = 0;
          if (v193 <= v192)
            v193 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v193 == v192)
            {
              v197 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v317 = v192 + 1;
              v318 = *(_BYTE *)(v194 + v192);
              *((_QWORD *)a2 + 1) = v317;
              v197 |= (unint64_t)(v318 & 0x7F) << v315;
              if (v318 < 0)
              {
                v315 += 7;
                v192 = v317;
                v14 = v316++ > 8;
                if (v14)
                  goto LABEL_386;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v197 = 0;
            }
            break;
          }
LABEL_505:
          *((_QWORD *)this + 7) = v197;
          goto LABEL_518;
        case 0x21u:
          *((_QWORD *)this + 24) |= 0x10000000uLL;
          v200 = *((_QWORD *)a2 + 1);
          v201 = *((_QWORD *)a2 + 2);
          v202 = *(_QWORD *)a2;
          if (v200 <= 0xFFFFFFFFFFFFFFF5 && v200 + 10 <= v201)
          {
            v203 = 0;
            v204 = 0;
            v205 = 0;
            do
            {
              v206 = v200 + 1;
              *((_QWORD *)a2 + 1) = v200 + 1;
              v207 = *(_BYTE *)(v202 + v200);
              v205 |= (unint64_t)(v207 & 0x7F) << v203;
              if ((v207 & 0x80) == 0)
                goto LABEL_508;
              v203 += 7;
              v200 = v206;
              v14 = v204++ > 8;
            }
            while (!v14);
LABEL_393:
            LODWORD(v205) = 0;
            goto LABEL_508;
          }
          v319 = 0;
          v320 = 0;
          v205 = 0;
          if (v201 <= v200)
            v201 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v201 == v200)
            {
              LODWORD(v205) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v321 = v200 + 1;
              v322 = *(_BYTE *)(v202 + v200);
              *((_QWORD *)a2 + 1) = v321;
              v205 |= (unint64_t)(v322 & 0x7F) << v319;
              if (v322 < 0)
              {
                v319 += 7;
                v200 = v321;
                v14 = v320++ > 8;
                if (v14)
                  goto LABEL_393;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v205) = 0;
            }
            break;
          }
LABEL_508:
          *((_DWORD *)this + 38) = v205;
          goto LABEL_518;
        case 0x22u:
          *((_QWORD *)this + 24) |= 0x2000000000uLL;
          v208 = *((_QWORD *)a2 + 1);
          v209 = *((_QWORD *)a2 + 2);
          v210 = *(_QWORD *)a2;
          if (v208 <= 0xFFFFFFFFFFFFFFF5 && v208 + 10 <= v209)
          {
            v211 = 0;
            v212 = 0;
            v213 = 0;
            do
            {
              v214 = v208 + 1;
              *((_QWORD *)a2 + 1) = v208 + 1;
              v215 = *(_BYTE *)(v210 + v208);
              v213 |= (unint64_t)(v215 & 0x7F) << v211;
              if ((v215 & 0x80) == 0)
                goto LABEL_511;
              v211 += 7;
              v208 = v214;
              v14 = v212++ > 8;
            }
            while (!v14);
LABEL_400:
            LODWORD(v213) = 0;
            goto LABEL_511;
          }
          v323 = 0;
          v324 = 0;
          v213 = 0;
          if (v209 <= v208)
            v209 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v209 == v208)
            {
              LODWORD(v213) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v325 = v208 + 1;
              v326 = *(_BYTE *)(v210 + v208);
              *((_QWORD *)a2 + 1) = v325;
              v213 |= (unint64_t)(v326 & 0x7F) << v323;
              if (v326 < 0)
              {
                v323 += 7;
                v208 = v325;
                v14 = v324++ > 8;
                if (v14)
                  goto LABEL_400;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v213) = 0;
            }
            break;
          }
LABEL_511:
          *((_DWORD *)this + 47) = v213;
          goto LABEL_518;
        case 0x23u:
          *((_QWORD *)this + 24) |= 0x40uLL;
          v216 = *((_QWORD *)a2 + 1);
          v217 = *((_QWORD *)a2 + 2);
          v218 = *(_QWORD *)a2;
          if (v216 <= 0xFFFFFFFFFFFFFFF5 && v216 + 10 <= v217)
          {
            v219 = 0;
            v220 = 0;
            v221 = 0;
            do
            {
              v222 = v216 + 1;
              *((_QWORD *)a2 + 1) = v216 + 1;
              v223 = *(_BYTE *)(v218 + v216);
              v221 |= (unint64_t)(v223 & 0x7F) << v219;
              if ((v223 & 0x80) == 0)
                goto LABEL_514;
              v219 += 7;
              v216 = v222;
              v14 = v220++ > 8;
            }
            while (!v14);
LABEL_407:
            LODWORD(v221) = 0;
            goto LABEL_514;
          }
          v327 = 0;
          v328 = 0;
          v221 = 0;
          if (v217 <= v216)
            v217 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v217 == v216)
            {
              LODWORD(v221) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v329 = v216 + 1;
              v330 = *(_BYTE *)(v218 + v216);
              *((_QWORD *)a2 + 1) = v329;
              v221 |= (unint64_t)(v330 & 0x7F) << v327;
              if (v330 < 0)
              {
                v327 += 7;
                v216 = v329;
                v14 = v328++ > 8;
                if (v14)
                  goto LABEL_407;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v221) = 0;
            }
            break;
          }
LABEL_514:
          *((_DWORD *)this + 16) = v221;
          goto LABEL_518;
        case 0x24u:
          *((_QWORD *)this + 24) |= 0x80000000uLL;
          v224 = *((_QWORD *)a2 + 1);
          if (v224 > 0xFFFFFFFFFFFFFFFBLL || v224 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_232;
          *((_DWORD *)this + 41) = *(_DWORD *)(*(_QWORD *)a2 + v224);
          goto LABEL_416;
        case 0x25u:
          *((_QWORD *)this + 24) |= (unint64_t)&_mh_execute_header;
          v225 = *((_QWORD *)a2 + 1);
          if (v225 > 0xFFFFFFFFFFFFFFFBLL || v225 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_232;
          *((_DWORD *)this + 42) = *(_DWORD *)(*(_QWORD *)a2 + v225);
          goto LABEL_416;
        case 0x26u:
          *((_QWORD *)this + 24) |= 0x200000000uLL;
          v226 = *((_QWORD *)a2 + 1);
          if (v226 <= 0xFFFFFFFFFFFFFFFBLL && v226 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 43) = *(_DWORD *)(*(_QWORD *)a2 + v226);
LABEL_416:
            v95 = *((_QWORD *)a2 + 1) + 4;
LABEL_417:
            *((_QWORD *)a2 + 1) = v95;
          }
          else
          {
LABEL_232:
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_518;
        case 0x27u:
          *((_QWORD *)this + 24) |= 0x400000000uLL;
          v227 = *((_QWORD *)a2 + 1);
          v228 = *((_QWORD *)a2 + 2);
          v229 = *(_QWORD *)a2;
          if (v227 <= 0xFFFFFFFFFFFFFFF5 && v227 + 10 <= v228)
          {
            v230 = 0;
            v231 = 0;
            v232 = 0;
            do
            {
              v233 = v227 + 1;
              *((_QWORD *)a2 + 1) = v227 + 1;
              v234 = *(_BYTE *)(v229 + v227);
              v232 |= (unint64_t)(v234 & 0x7F) << v230;
              if ((v234 & 0x80) == 0)
                goto LABEL_517;
              v230 += 7;
              v227 = v233;
              v14 = v231++ > 8;
            }
            while (!v14);
LABEL_414:
            LODWORD(v232) = 0;
            goto LABEL_517;
          }
          v331 = 0;
          v332 = 0;
          v232 = 0;
          if (v228 <= v227)
            v228 = *((_QWORD *)a2 + 1);
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_518;
      }
      while (1)
      {
        if (v228 == v227)
        {
          LODWORD(v232) = 0;
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_517;
        }
        v333 = v227 + 1;
        v334 = *(_BYTE *)(v229 + v227);
        *((_QWORD *)a2 + 1) = v333;
        v232 |= (unint64_t)(v334 & 0x7F) << v331;
        if ((v334 & 0x80) == 0)
          break;
        v331 += 7;
        v227 = v333;
        v14 = v332++ > 8;
        if (v14)
          goto LABEL_414;
      }
      if (*((_BYTE *)a2 + 24))
        LODWORD(v232) = 0;
LABEL_517:
      *((_DWORD *)this + 44) = v232;
LABEL_518:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::VehicularFlagsData::VehicularFlagsData(uint64_t this)
{
  *(_QWORD *)this = off_100354FF8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100354FF8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::MotionStateUpdate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  uint64_t v4;
  const PB::Base *v5;
  uint64_t v6;

  v3 = this;
  v4 = *(_QWORD *)(this + 192);
  if ((v4 & 0x8000) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 100), 1u);
    v4 = *(_QWORD *)(v3 + 192);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x10000) == 0)
        goto LABEL_4;
      goto LABEL_45;
    }
  }
  else if ((v4 & 0x100) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 72), 2u);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x10000) == 0)
  {
LABEL_4:
    if ((v4 & 0x20000) == 0)
      goto LABEL_5;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 104), 3u);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x20000) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 108), 4u);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_7;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 84), 5u);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 148), 6u);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 92), 7u);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_10;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 88), 8u);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0)
      goto LABEL_11;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 136), 9u);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 1) == 0)
      goto LABEL_12;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 0xAu);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 1) == 0)
  {
LABEL_12:
    if ((v4 & 4) == 0)
      goto LABEL_13;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 0xBu);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 4) == 0)
  {
LABEL_13:
    if ((v4 & 2) == 0)
      goto LABEL_14;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 24), 0xCu);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 2) == 0)
  {
LABEL_14:
    if ((v4 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 16), 0xDu);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x80) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_16;
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 68), 0xEu);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_17;
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(float *)(v3 + 156), 0xFu);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x4000) == 0)
      goto LABEL_18;
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 144), 0x10u);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x4000) == 0)
  {
LABEL_18:
    if ((v4 & 0x400000) == 0)
      goto LABEL_19;
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 0x11u);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x400000) == 0)
  {
LABEL_19:
    if ((v4 & 0x200000) == 0)
      goto LABEL_20;
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(float *)(v3 + 128), 0x12u);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x200000) == 0)
  {
LABEL_20:
    if ((v4 & 0x800000) == 0)
      goto LABEL_21;
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(float *)(v3 + 124), 0x13u);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x800000) == 0)
  {
LABEL_21:
    if ((v4 & 0x10) == 0)
      goto LABEL_22;
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::write(a2, *(float *)(v3 + 132), 0x14u);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x10) == 0)
  {
LABEL_22:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_23;
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 48), 0x15u);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_24;
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 180), 0x16u);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_24:
    if ((v4 & 0x100000) == 0)
      goto LABEL_25;
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 160), 0x17u);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x100000) == 0)
  {
LABEL_25:
    if ((v4 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 120), 0x18u);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x80000) == 0)
  {
LABEL_26:
    if ((v4 & 0x40000) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
LABEL_67:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 116), 0x19u);
  if ((*(_QWORD *)(v3 + 192) & 0x40000) != 0)
LABEL_27:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 112), 0x1Au);
LABEL_28:
  v5 = *(const PB::Base **)(v3 + 32);
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5, 0x1Bu);
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x400) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 80), 0x1Cu);
    v6 = *(_QWORD *)(v3 + 192);
    if ((v6 & 0x200) == 0)
    {
LABEL_32:
      if ((v6 & 0x2000000) == 0)
        goto LABEL_33;
      goto LABEL_71;
    }
  }
  else if ((v6 & 0x200) == 0)
  {
    goto LABEL_32;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 0x1Du);
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x2000000) == 0)
  {
LABEL_33:
    if ((v6 & 0x1000000000) == 0)
      goto LABEL_34;
    goto LABEL_72;
  }
LABEL_71:
  this = PB::Writer::write(a2, *(float *)(v3 + 140), 0x1Eu);
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x1000000000) == 0)
  {
LABEL_34:
    if ((v6 & 0x20) == 0)
      goto LABEL_35;
    goto LABEL_73;
  }
LABEL_72:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 184), 0x1Fu);
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x20) == 0)
  {
LABEL_35:
    if ((v6 & 0x10000000) == 0)
      goto LABEL_36;
    goto LABEL_74;
  }
LABEL_73:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 56), 0x20u);
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x10000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x2000000000) == 0)
      goto LABEL_37;
    goto LABEL_75;
  }
LABEL_74:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 152), 0x21u);
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x2000000000) == 0)
  {
LABEL_37:
    if ((v6 & 0x40) == 0)
      goto LABEL_38;
    goto LABEL_76;
  }
LABEL_75:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 188), 0x22u);
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x40) == 0)
  {
LABEL_38:
    if ((v6 & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_77;
  }
LABEL_76:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 64), 0x23u);
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x80000000) == 0)
  {
LABEL_39:
    if ((v6 & 0x100000000) == 0)
      goto LABEL_40;
    goto LABEL_78;
  }
LABEL_77:
  this = PB::Writer::write(a2, *(float *)(v3 + 164), 0x24u);
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x100000000) == 0)
  {
LABEL_40:
    if ((v6 & 0x200000000) == 0)
      goto LABEL_41;
    goto LABEL_79;
  }
LABEL_78:
  this = PB::Writer::write(a2, *(float *)(v3 + 168), 0x25u);
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x200000000) == 0)
  {
LABEL_41:
    if ((v6 & 0x400000000) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 176), 0x27u);
  }
LABEL_79:
  this = PB::Writer::write(a2, *(float *)(v3 + 172), 0x26u);
  if ((*(_QWORD *)(v3 + 192) & 0x400000000) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 176), 0x27u);
  return this;
}

BOOL CMMsl::VehicularFlagsData::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 0x10) == 0 || *(unsigned __int8 *)(a1 + 15) != *(unsigned __int8 *)(a2 + 15))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 20) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 8) == 0 || *(unsigned __int8 *)(a1 + 14) != *(unsigned __int8 *)(a2 + 14))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 2) == 0 || *(unsigned __int8 *)(a1 + 12) != *(unsigned __int8 *)(a2 + 12))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 20) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 0x20) == 0 || *(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 20) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 4) == 0 || *(unsigned __int8 *)(a1 + 13) != *(unsigned __int8 *)(a2 + 13))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 1) == 0;
  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
    return (*(_BYTE *)(a2 + 20) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  return v2;
}

unint64_t CMMsl::MotionStateUpdate::hash_value(CMMsl::MotionStateUpdate *this)
{
  CMMsl::MotionStateUpdate *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  CMMsl::MotionStateUpdate *v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  uint64_t v47;
  float v48;
  uint64_t v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v1 = this;
  v2 = *((_QWORD *)this + 24);
  if ((v2 & 0x8000) != 0)
  {
    v3 = *((unsigned int *)this + 25);
    if ((v2 & 0x100) != 0)
    {
LABEL_3:
      v4 = *((unsigned int *)this + 18);
      if ((v2 & 0x10000) != 0)
        goto LABEL_4;
      goto LABEL_47;
    }
  }
  else
  {
    v3 = 0;
    if ((v2 & 0x100) != 0)
      goto LABEL_3;
  }
  v4 = 0;
  if ((v2 & 0x10000) != 0)
  {
LABEL_4:
    v5 = *((unsigned int *)this + 26);
    if ((v2 & 0x20000) != 0)
      goto LABEL_5;
    goto LABEL_48;
  }
LABEL_47:
  v5 = 0;
  if ((v2 & 0x20000) != 0)
  {
LABEL_5:
    v6 = *((unsigned int *)this + 27);
    if ((v2 & 0x800) != 0)
      goto LABEL_6;
    goto LABEL_49;
  }
LABEL_48:
  v6 = 0;
  if ((v2 & 0x800) != 0)
  {
LABEL_6:
    v7 = *((unsigned int *)this + 21);
    if ((v2 & 0x8000000) != 0)
      goto LABEL_7;
    goto LABEL_50;
  }
LABEL_49:
  v7 = 0;
  if ((v2 & 0x8000000) != 0)
  {
LABEL_7:
    v8 = *((unsigned int *)this + 37);
    if ((v2 & 0x2000) != 0)
      goto LABEL_8;
    goto LABEL_51;
  }
LABEL_50:
  v8 = 0;
  if ((v2 & 0x2000) != 0)
  {
LABEL_8:
    v9 = *((unsigned int *)this + 23);
    if ((v2 & 0x1000) != 0)
      goto LABEL_9;
    goto LABEL_52;
  }
LABEL_51:
  v9 = 0;
  if ((v2 & 0x1000) != 0)
  {
LABEL_9:
    v10 = *((unsigned int *)this + 22);
    if ((v2 & 0x1000000) != 0)
      goto LABEL_10;
    goto LABEL_53;
  }
LABEL_52:
  v10 = 0;
  if ((v2 & 0x1000000) != 0)
  {
LABEL_10:
    v11 = *((unsigned int *)this + 34);
    if ((v2 & 8) != 0)
      goto LABEL_11;
LABEL_54:
    v12 = 0;
    if ((v2 & 1) != 0)
      goto LABEL_15;
LABEL_55:
    v13 = 0;
    if ((v2 & 4) != 0)
      goto LABEL_19;
    goto LABEL_56;
  }
LABEL_53:
  v11 = 0;
  if ((v2 & 8) == 0)
    goto LABEL_54;
LABEL_11:
  if (*((double *)this + 5) == 0.0)
    v12 = 0;
  else
    v12 = *((_QWORD *)this + 5);
  if ((v2 & 1) == 0)
    goto LABEL_55;
LABEL_15:
  if (*((double *)this + 1) == 0.0)
    v13 = 0;
  else
    v13 = *((_QWORD *)this + 1);
  if ((v2 & 4) != 0)
  {
LABEL_19:
    v14 = *((_QWORD *)this + 3);
    if ((v2 & 2) != 0)
      goto LABEL_20;
    goto LABEL_57;
  }
LABEL_56:
  v14 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_20:
    v15 = *((_QWORD *)this + 2);
    if ((v2 & 0x80) != 0)
      goto LABEL_21;
    goto LABEL_58;
  }
LABEL_57:
  v15 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_21:
    v16 = *((unsigned int *)this + 17);
    if ((v2 & 0x20000000) != 0)
      goto LABEL_22;
LABEL_59:
    v18 = 0;
    if ((v2 & 0x4000000) != 0)
      goto LABEL_26;
    goto LABEL_60;
  }
LABEL_58:
  v16 = 0;
  if ((v2 & 0x20000000) == 0)
    goto LABEL_59;
LABEL_22:
  v17 = *((float *)this + 39);
  if (v17 == 0.0)
    v18 = 0;
  else
    v18 = LODWORD(v17);
  if ((v2 & 0x4000000) != 0)
  {
LABEL_26:
    v61 = *((unsigned int *)this + 36);
    if ((v2 & 0x4000) != 0)
      goto LABEL_27;
LABEL_61:
    v71 = 0;
    if ((v2 & 0x400000) != 0)
      goto LABEL_30;
LABEL_62:
    v70 = 0;
    if ((v2 & 0x200000) != 0)
      goto LABEL_33;
LABEL_63:
    v69 = 0;
    if ((v2 & 0x800000) != 0)
      goto LABEL_36;
LABEL_64:
    v68 = 0;
    if ((v2 & 0x10) != 0)
      goto LABEL_39;
    goto LABEL_65;
  }
LABEL_60:
  v61 = 0;
  if ((v2 & 0x4000) == 0)
    goto LABEL_61;
LABEL_27:
  v19 = *((float *)this + 24);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  v71 = v20;
  if ((v2 & 0x400000) == 0)
    goto LABEL_62;
LABEL_30:
  v21 = *((float *)this + 32);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  v70 = v22;
  if ((v2 & 0x200000) == 0)
    goto LABEL_63;
LABEL_33:
  v23 = *((float *)this + 31);
  v24 = LODWORD(v23);
  if (v23 == 0.0)
    v24 = 0;
  v69 = v24;
  if ((v2 & 0x800000) == 0)
    goto LABEL_64;
LABEL_36:
  v25 = *((float *)this + 33);
  v26 = LODWORD(v25);
  if (v25 == 0.0)
    v26 = 0;
  v68 = v26;
  if ((v2 & 0x10) != 0)
  {
LABEL_39:
    v67 = *((_QWORD *)this + 6);
    if ((v2 & 0x800000000) != 0)
      goto LABEL_40;
    goto LABEL_66;
  }
LABEL_65:
  v67 = 0;
  if ((v2 & 0x800000000) != 0)
  {
LABEL_40:
    v66 = *((unsigned int *)this + 45);
    if ((v2 & 0x40000000) != 0)
      goto LABEL_41;
    goto LABEL_67;
  }
LABEL_66:
  v66 = 0;
  if ((v2 & 0x40000000) != 0)
  {
LABEL_41:
    v65 = *((unsigned int *)this + 40);
    if ((v2 & 0x100000) != 0)
      goto LABEL_42;
    goto LABEL_68;
  }
LABEL_67:
  v65 = 0;
  if ((v2 & 0x100000) != 0)
  {
LABEL_42:
    v64 = *((unsigned int *)this + 30);
    if ((v2 & 0x80000) != 0)
      goto LABEL_43;
LABEL_69:
    v63 = 0;
    if ((v2 & 0x40000) != 0)
      goto LABEL_44;
    goto LABEL_70;
  }
LABEL_68:
  v64 = 0;
  if ((v2 & 0x80000) == 0)
    goto LABEL_69;
LABEL_43:
  v63 = *((unsigned int *)this + 29);
  if ((v2 & 0x40000) != 0)
  {
LABEL_44:
    v62 = *((unsigned int *)this + 28);
    goto LABEL_71;
  }
LABEL_70:
  v62 = 0;
LABEL_71:
  v27 = *((_QWORD *)this + 4);
  if (v27)
  {
    v57 = v8;
    v58 = v9;
    v28 = v3;
    v60 = v11;
    v29 = v4;
    v59 = v13;
    v30 = v5;
    v55 = v14;
    v56 = v16;
    v31 = v6;
    v32 = v15;
    v33 = v7;
    v34 = v12;
    v35 = v1;
    v27 = CMMsl::VehicularFlagsData::hash_value((CMMsl::VehicularFlagsData *)v27);
    v1 = v35;
    v12 = v34;
    v7 = v33;
    v15 = v32;
    v6 = v31;
    v14 = v55;
    v16 = v56;
    v5 = v30;
    v4 = v29;
    v9 = v58;
    v13 = v59;
    v11 = v60;
    v3 = v28;
    v8 = v57;
  }
  if ((v2 & 0x400) == 0)
  {
    v36 = 0;
    if ((v2 & 0x200) != 0)
      goto LABEL_75;
LABEL_99:
    v38 = 0;
    if ((v2 & 0x2000000) != 0)
      goto LABEL_78;
LABEL_100:
    v40 = 0;
    if ((v2 & 0x1000000000) != 0)
      goto LABEL_81;
    goto LABEL_101;
  }
  v53 = *((float *)v1 + 20);
  v36 = LODWORD(v53);
  if (v53 == 0.0)
    v36 = 0;
  if ((v2 & 0x200) == 0)
    goto LABEL_99;
LABEL_75:
  v37 = *((float *)v1 + 19);
  v38 = LODWORD(v37);
  if (v37 == 0.0)
    v38 = 0;
  if ((v2 & 0x2000000) == 0)
    goto LABEL_100;
LABEL_78:
  v39 = *((float *)v1 + 35);
  v40 = LODWORD(v39);
  if (v39 == 0.0)
    v40 = 0;
  if ((v2 & 0x1000000000) != 0)
  {
LABEL_81:
    v41 = *((unsigned int *)v1 + 46);
    if ((v2 & 0x20) != 0)
      goto LABEL_82;
    goto LABEL_102;
  }
LABEL_101:
  v41 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_82:
    v42 = *((_QWORD *)v1 + 7);
    if ((v2 & 0x10000000) != 0)
      goto LABEL_83;
    goto LABEL_103;
  }
LABEL_102:
  v42 = 0;
  if ((v2 & 0x10000000) != 0)
  {
LABEL_83:
    v43 = *((unsigned int *)v1 + 38);
    if ((v2 & 0x2000000000) != 0)
      goto LABEL_84;
    goto LABEL_104;
  }
LABEL_103:
  v43 = 0;
  if ((v2 & 0x2000000000) != 0)
  {
LABEL_84:
    v44 = *((unsigned int *)v1 + 47);
    if ((v2 & 0x40) != 0)
      goto LABEL_85;
    goto LABEL_105;
  }
LABEL_104:
  v44 = 0;
  if ((v2 & 0x40) != 0)
  {
LABEL_85:
    v45 = *((unsigned int *)v1 + 16);
    if ((v2 & 0x80000000) != 0)
      goto LABEL_86;
LABEL_106:
    v47 = 0;
    if ((v2 & 0x100000000) != 0)
      goto LABEL_89;
LABEL_107:
    v49 = 0;
    if ((v2 & 0x200000000) != 0)
      goto LABEL_92;
    goto LABEL_108;
  }
LABEL_105:
  v45 = 0;
  if ((v2 & 0x80000000) == 0)
    goto LABEL_106;
LABEL_86:
  v46 = *((float *)v1 + 41);
  v47 = LODWORD(v46);
  if (v46 == 0.0)
    v47 = 0;
  if ((v2 & 0x100000000) == 0)
    goto LABEL_107;
LABEL_89:
  v48 = *((float *)v1 + 42);
  v49 = LODWORD(v48);
  if (v48 == 0.0)
    v49 = 0;
  if ((v2 & 0x200000000) != 0)
  {
LABEL_92:
    v50 = *((float *)v1 + 43);
    v51 = LODWORD(v50);
    if (v50 == 0.0)
      v51 = 0;
    if ((v2 & 0x400000000) != 0)
      goto LABEL_95;
LABEL_109:
    v52 = 0;
    return v4 ^ v3 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v18 ^ v61 ^ v71 ^ v70 ^ v69 ^ v68 ^ v67 ^ v66 ^ v65 ^ v64 ^ v63 ^ v62 ^ v27 ^ v36 ^ v38 ^ v40 ^ v41 ^ v42 ^ v43 ^ v44 ^ v45 ^ v47 ^ v49 ^ v51 ^ v52;
  }
LABEL_108:
  v51 = 0;
  if ((v2 & 0x400000000) == 0)
    goto LABEL_109;
LABEL_95:
  v52 = *((unsigned int *)v1 + 44);
  return v4 ^ v3 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v18 ^ v61 ^ v71 ^ v70 ^ v69 ^ v68 ^ v67 ^ v66 ^ v65 ^ v64 ^ v63 ^ v62 ^ v27 ^ v36 ^ v38 ^ v40 ^ v41 ^ v42 ^ v43 ^ v44 ^ v45 ^ v47 ^ v49 ^ v51 ^ v52;
}

uint64_t CMMsl::MotionStateUpdate::makeVehicularFlags(uint64_t this)
{
  if (!*(_QWORD *)(this + 32))
    operator new();
  return this;
}

void CMMsl::MotionWifiAssociation::~MotionWifiAssociation(CMMsl::MotionWifiAssociation *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::MotionWifiAssociation::MotionWifiAssociation(uint64_t this, const CMMsl::MotionWifiAssociation *a2)
{
  char v2;

  *(_QWORD *)this = off_100352D30;
  *(_DWORD *)(this + 12) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_BYTE *)a2 + 8);
    *(_BYTE *)(this + 12) = 1;
    *(_BYTE *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::MotionWifiAssociation::operator=(uint64_t a1, uint64_t a2)
{
  char v3;
  int v4;
  char v5;
  void (**v7)(CMMsl::MotionWifiAssociation *__hidden);
  char v8;
  int v9;

  if (a1 != a2)
  {
    v7 = off_100352D30;
    v3 = *(_BYTE *)(a2 + 8);
    v4 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(_BYTE *)(a2 + 12) & 1;
    v9 = v4;
    v5 = *(_BYTE *)(a1 + 8);
    *(_BYTE *)(a1 + 8) = v3;
    v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

{
  int v3;
  char v4;
  int v5;
  void (**v7)(CMMsl::MotionWifiAssociation *__hidden);
  char v8;
  int v9;

  if (a1 != a2)
  {
    v7 = off_100352D30;
    v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    v4 = *(_BYTE *)(a2 + 8);
    v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    v9 = v5;
    LOBYTE(v3) = *(_BYTE *)(a1 + 8);
    *(_BYTE *)(a1 + 8) = v4;
    v8 = v3;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::MotionWifiAssociation *a2, CMMsl::MotionWifiAssociation *a3)
{
  int v3;

  v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 8);
  *(_BYTE *)(this + 8) = *((_BYTE *)a2 + 8);
  *((_BYTE *)a2 + 8) = v3;
  return this;
}

uint64_t CMMsl::MotionWifiAssociation::formatText(CMMsl::MotionWifiAssociation *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 12) & 1) != 0)
    PB::TextFormatter::format(a2, "isWifiAssociated", *((_BYTE *)this + 8));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MotionWifiAssociation::readFrom(CMMsl::MotionWifiAssociation *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 12) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        if (v2 >= v3)
        {
          v21 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v21 = v20 != 0;
        }
        *((_BYTE *)this + 8) = v21;
      }
      else
      {
        result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MotionWifiAssociation::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 12) & 1) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(this + 8), 1u);
  return this;
}

uint64_t CMMsl::MotionWifiAssociation::hash_value(CMMsl::MotionWifiAssociation *this)
{
  if ((*((_BYTE *)this + 12) & 1) != 0)
    return *((unsigned __int8 *)this + 8);
  else
    return 0;
}

void CMMsl::MotionWifiLocation::~MotionWifiLocation(CMMsl::MotionWifiLocation *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100352D68;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100352D68;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100352D68;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::MotionWifiLocation::MotionWifiLocation(_QWORD *this, const CMMsl::MotionWifiLocation *a2)
{
  *this = off_100352D68;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::MotionWifiLocation *CMMsl::MotionWifiLocation::operator=(const CMMsl::MotionWifiLocation *a1, const CMMsl::MotionWifiLocation *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::MotionWifiLocation *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::MotionWifiLocation::MotionWifiLocation(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_100352D68;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::MotionWifiLocation *a2, CMMsl::MotionWifiLocation *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::MotionWifiLocation::MotionWifiLocation(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100352D68;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100352D68;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::MotionWifiLocation::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_100352D68;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::MotionWifiLocation::formatText(CMMsl::MotionWifiLocation *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MotionWifiLocation::readFrom(CMMsl::MotionWifiLocation *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MotionWifiLocation::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

CMMsl::MotionGPSLocation *CMMsl::MotionWifiLocation::hash_value(CMMsl::MotionWifiLocation *this)
{
  CMMsl::MotionGPSLocation *result;

  result = (CMMsl::MotionGPSLocation *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::MotionGPSLocation *)CMMsl::MotionGPSLocation::hash_value(result);
  return result;
}

uint64_t CMMsl::MotionWifiLocation::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

void CMMsl::MovementStats::~MovementStats(CMMsl::MovementStats *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::MovementStats::MovementStats(CMMsl::MovementStats *this, const CMMsl::MovementStats *a2)
{
  float result;

  *(_QWORD *)this = off_100352DA0;
  *((_DWORD *)this + 3) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    result = *((float *)a2 + 2);
    *((_BYTE *)this + 12) = 1;
    *((float *)this + 2) = result;
  }
  return result;
}

uint64_t CMMsl::MovementStats::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  void (**v7)(CMMsl::MovementStats *__hidden);
  int v8;
  int v9;

  if (a1 != a2)
  {
    v7 = off_100352DA0;
    v3 = *(_DWORD *)(a2 + 8);
    v4 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(_BYTE *)(a2 + 12) & 1;
    v9 = v4;
    v5 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v3;
    v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

{
  int v3;
  int v4;
  int v5;
  int v6;
  void (**v8)(CMMsl::MovementStats *__hidden);
  int v9;
  int v10;

  if (a1 != a2)
  {
    v8 = off_100352DA0;
    v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    v4 = *(_DWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    v10 = v5;
    v6 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v4;
    v9 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::MovementStats *a2, CMMsl::MovementStats *a3)
{
  int v3;
  float result;

  v3 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  result = *((float *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((float *)a2 + 2) = result;
  return result;
}

uint64_t CMMsl::MovementStats::formatText(CMMsl::MovementStats *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 12) & 1) != 0)
    PB::TextFormatter::format(a2, "walkingVariable01", *((float *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MovementStats::readFrom(CMMsl::MovementStats *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 12) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 2) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MovementStats::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 12) & 1) != 0)
    return PB::Writer::write(a2, *(float *)(this + 8), 1u);
  return this;
}

float CMMsl::MovementStats::hash_value(CMMsl::MovementStats *this)
{
  float result;

  if ((*((_BYTE *)this + 12) & 1) != 0)
    return *((float *)this + 2);
  return result;
}

void CMMsl::MovementStatsGravityProjection::~MovementStatsGravityProjection(CMMsl::MovementStatsGravityProjection *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_100352DD8;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::MovementStatsGravityProjection::~MovementStatsGravityProjection(this);
  operator delete();
}

CMMsl::MovementStatsGravityProjection *CMMsl::MovementStatsGravityProjection::MovementStatsGravityProjection(CMMsl::MovementStatsGravityProjection *this, const CMMsl::MovementStatsGravityProjection *a2)
{
  char *v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  *(_QWORD *)this = off_100352DD8;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *((_DWORD *)this + 19) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  v5 = *((_BYTE *)a2 + 76);
  if ((v5 & 2) != 0)
  {
    v7 = *((_QWORD *)a2 + 8);
    v6 = 2;
    *((_BYTE *)this + 76) = 2;
    *((_QWORD *)this + 8) = v7;
    v5 = *((_BYTE *)a2 + 76);
    if ((v5 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((*((_BYTE *)a2 + 76) & 1) != 0)
  {
LABEL_5:
    v8 = *((_QWORD *)a2 + 7);
    v6 |= 1u;
    *((_BYTE *)this + 76) = v6;
    *((_QWORD *)this + 7) = v8;
    v5 = *((_BYTE *)a2 + 76);
  }
LABEL_6:
  if ((v5 & 4) != 0)
  {
    v9 = *((_DWORD *)a2 + 18);
    *((_BYTE *)this + 76) = v6 | 4;
    *((_DWORD *)this + 18) = v9;
  }
  if (this != a2)
  {
    sub_100020CE4((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
    sub_100020CE4(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  }
  return this;
}

uint64_t CMMsl::MovementStatsGravityProjection::operator=(uint64_t a1, const CMMsl::MovementStatsGravityProjection *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;

  if ((const CMMsl::MovementStatsGravityProjection *)a1 != a2)
  {
    CMMsl::MovementStatsGravityProjection::MovementStatsGravityProjection((CMMsl::MovementStatsGravityProjection *)&v10, a2);
    v3 = *(_DWORD *)(a1 + 76);
    *(_DWORD *)(a1 + 76) = v17;
    v17 = v3;
    v4 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v15;
    v15 = v4;
    v5 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v14;
    v14 = v5;
    LODWORD(v5) = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v16;
    v16 = v5;
    v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    v13 = v6;
    v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    v11 = v7;
    v8 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    v12 = v8;
    CMMsl::MovementStatsGravityProjection::~MovementStatsGravityProjection((CMMsl::MovementStatsGravityProjection *)&v10);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::MovementStatsGravityProjection *a2, CMMsl::MovementStatsGravityProjection *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  float result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v3;
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v4;
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v5;
  result = *((float *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((float *)a2 + 18) = result;
  v7 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v7;
  v8 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  v9 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v9;
  v10 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v10;
  v11 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v11;
  v12 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v12;
  return result;
}

uint64_t CMMsl::MovementStatsGravityProjection::MovementStatsGravityProjection(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_100352DD8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a2 + 76) = 0;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  sub_100239458(a1 + 32, (__n128 *)(a2 + 32));
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  return a1;
}

uint64_t CMMsl::MovementStatsGravityProjection::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;

  if (a1 != a2)
  {
    CMMsl::MovementStatsGravityProjection::MovementStatsGravityProjection((uint64_t)&v10, a2);
    v3 = *(_DWORD *)(a1 + 76);
    *(_DWORD *)(a1 + 76) = v17;
    v17 = v3;
    v4 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v15;
    v15 = v4;
    v5 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v14;
    v14 = v5;
    LODWORD(v5) = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v16;
    v16 = v5;
    v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    v13 = v6;
    v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    v11 = v7;
    v8 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    v12 = v8;
    CMMsl::MovementStatsGravityProjection::~MovementStatsGravityProjection((CMMsl::MovementStatsGravityProjection *)&v10);
  }
  return a1;
}

uint64_t CMMsl::MovementStatsGravityProjection::formatText(CMMsl::MovementStatsGravityProjection *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  char v11;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (float *)*((_QWORD *)this + 1);
  v6 = (float *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "accel", v7);
  }
  if ((*((_BYTE *)this + 76) & 1) != 0)
    PB::TextFormatter::format(a2, "adjustedTimestamp", *((double *)this + 7));
  v8 = (float *)*((_QWORD *)this + 4);
  v9 = (float *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "gravity", v10);
  }
  v11 = *((_BYTE *)this + 76);
  if ((v11 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "rawProjectedSignal", *((float *)this + 18));
    v11 = *((_BYTE *)this + 76);
  }
  if ((v11 & 2) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 8));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::MovementStatsGravityProjection::readFrom(CMMsl::MovementStatsGravityProjection *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  char *v9;
  void **v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  _DWORD *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  _DWORD *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  int v62;
  unint64_t v63;
  char v64;
  unsigned int v65;
  unint64_t v66;
  char v67;
  unint64_t v68;
  char *v69;
  _DWORD *v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  int v86;
  char *v87;
  int v88;
  unint64_t v89;
  _BYTE v92[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 8);
    v9 = (char *)this + 24;
    v10 = (void **)((char *)this + 32);
    v11 = (char *)this + 48;
    while (1)
    {
      v12 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 76) |= 2u;
          v25 = *((_QWORD *)a2 + 1);
          v26 = *((_QWORD *)a2 + 2);
          v27 = *(_QWORD *)a2;
          if (v25 <= 0xFFFFFFFFFFFFFFF5 && v25 + 10 <= v26)
          {
            v28 = 0;
            v29 = 0;
            v30 = 0;
            do
            {
              v31 = v25 + 1;
              *((_QWORD *)a2 + 1) = v25 + 1;
              v32 = *(_BYTE *)(v27 + v25);
              v30 |= (unint64_t)(v32 & 0x7F) << v28;
              if ((v32 & 0x80) == 0)
                goto LABEL_118;
              v28 += 7;
              v25 = v31;
              v18 = v29++ > 8;
            }
            while (!v18);
LABEL_92:
            v30 = 0;
            goto LABEL_118;
          }
          v64 = 0;
          v65 = 0;
          v30 = 0;
          if (v26 <= v25)
            v26 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v26 == v25)
            {
              v30 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v66 = v25 + 1;
              v67 = *(_BYTE *)(v27 + v25);
              *((_QWORD *)a2 + 1) = v66;
              v30 |= (unint64_t)(v67 & 0x7F) << v64;
              if (v67 < 0)
              {
                v64 += 7;
                v25 = v66;
                v18 = v65++ > 8;
                if (v18)
                  goto LABEL_92;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v30 = 0;
            }
            break;
          }
LABEL_118:
          *((_QWORD *)this + 8) = v30;
          goto LABEL_139;
        case 2u:
          *((_BYTE *)this + 76) |= 1u;
          v33 = *((_QWORD *)a2 + 1);
          if (v33 > 0xFFFFFFFFFFFFFFF7 || v33 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_135;
          *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v33);
          v34 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_138;
        case 3u:
          *((_BYTE *)this + 76) |= 4u;
          v35 = *((_QWORD *)a2 + 1);
          if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_135;
          *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v35);
          goto LABEL_137;
        case 4u:
          if (v24 != 2)
          {
            v69 = (char *)*((_QWORD *)this + 5);
            v68 = *((_QWORD *)this + 6);
            if ((unint64_t)v69 >= v68)
            {
              v73 = (char *)*v10;
              v74 = (v69 - (_BYTE *)*v10) >> 2;
              v75 = v74 + 1;
              if ((unint64_t)(v74 + 1) >> 62)
LABEL_149:
                sub_10000D5F8();
              v76 = v68 - (_QWORD)v73;
              if (v76 >> 1 > v75)
                v75 = v76 >> 1;
              if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL)
                v77 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v77 = v75;
              if (v77)
              {
                v78 = (char *)sub_100020E2C((uint64_t)v11, v77);
                v73 = (char *)*((_QWORD *)this + 4);
                v69 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v78 = 0;
              }
              v85 = &v78[4 * v74];
              *(_DWORD *)v85 = 0;
              v70 = v85 + 4;
              while (v69 != v73)
              {
                v86 = *((_DWORD *)v69 - 1);
                v69 -= 4;
                *((_DWORD *)v85 - 1) = v86;
                v85 -= 4;
              }
              *((_QWORD *)this + 4) = v85;
              *((_QWORD *)this + 5) = v70;
              *((_QWORD *)this + 6) = &v78[4 * v77];
              if (v73)
                operator delete(v73);
            }
            else
            {
              *(_DWORD *)v69 = 0;
              v70 = v69 + 4;
            }
            *((_QWORD *)this + 5) = v70;
            goto LABEL_133;
          }
          if ((PB::Reader::placeMark(a2, v92) & 1) != 0)
            return 0;
          v36 = *((_QWORD *)a2 + 1);
          v37 = *((_QWORD *)a2 + 2);
          while (v36 < v37 && !*((_BYTE *)a2 + 24))
          {
            v39 = (char *)*((_QWORD *)this + 5);
            v38 = *((_QWORD *)this + 6);
            if ((unint64_t)v39 >= v38)
            {
              v41 = (char *)*v10;
              v42 = (v39 - (_BYTE *)*v10) >> 2;
              v43 = v42 + 1;
              if ((unint64_t)(v42 + 1) >> 62)
                goto LABEL_149;
              v44 = v38 - (_QWORD)v41;
              if (v44 >> 1 > v43)
                v43 = v44 >> 1;
              if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
                v45 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v45 = v43;
              if (v45)
              {
                v46 = (char *)sub_100020E2C((uint64_t)v11, v45);
                v41 = (char *)*((_QWORD *)this + 4);
                v39 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v46 = 0;
              }
              v47 = &v46[4 * v42];
              *(_DWORD *)v47 = 0;
              v40 = v47 + 4;
              while (v39 != v41)
              {
                v48 = *((_DWORD *)v39 - 1);
                v39 -= 4;
                *((_DWORD *)v47 - 1) = v48;
                v47 -= 4;
              }
              *((_QWORD *)this + 4) = v47;
              *((_QWORD *)this + 5) = v40;
              *((_QWORD *)this + 6) = &v46[4 * v45];
              if (v41)
                operator delete(v41);
            }
            else
            {
              *(_DWORD *)v39 = 0;
              v40 = v39 + 4;
            }
            *((_QWORD *)this + 5) = v40;
            v49 = *((_QWORD *)a2 + 1);
            if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_97;
            *(v40 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v49);
            v37 = *((_QWORD *)a2 + 2);
            v36 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v36;
          }
          goto LABEL_98;
        case 5u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark(a2, v92) & 1) != 0)
              return 0;
            v50 = *((_QWORD *)a2 + 1);
            v51 = *((_QWORD *)a2 + 2);
            while (v50 < v51 && !*((_BYTE *)a2 + 24))
            {
              v53 = (char *)*((_QWORD *)this + 2);
              v52 = *((_QWORD *)this + 3);
              if ((unint64_t)v53 >= v52)
              {
                v55 = (char *)*v8;
                v56 = (v53 - (_BYTE *)*v8) >> 2;
                v57 = v56 + 1;
                if ((unint64_t)(v56 + 1) >> 62)
                  goto LABEL_150;
                v58 = v52 - (_QWORD)v55;
                if (v58 >> 1 > v57)
                  v57 = v58 >> 1;
                if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
                  v59 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v59 = v57;
                if (v59)
                {
                  v60 = (char *)sub_100020E2C((uint64_t)v9, v59);
                  v55 = (char *)*((_QWORD *)this + 1);
                  v53 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v60 = 0;
                }
                v61 = &v60[4 * v56];
                *(_DWORD *)v61 = 0;
                v54 = v61 + 4;
                while (v53 != v55)
                {
                  v62 = *((_DWORD *)v53 - 1);
                  v53 -= 4;
                  *((_DWORD *)v61 - 1) = v62;
                  v61 -= 4;
                }
                *((_QWORD *)this + 1) = v61;
                *((_QWORD *)this + 2) = v54;
                *((_QWORD *)this + 3) = &v60[4 * v59];
                if (v55)
                  operator delete(v55);
              }
              else
              {
                *(_DWORD *)v53 = 0;
                v54 = v53 + 4;
              }
              *((_QWORD *)this + 2) = v54;
              v63 = *((_QWORD *)a2 + 1);
              if (v63 > 0xFFFFFFFFFFFFFFFBLL || v63 + 4 > *((_QWORD *)a2 + 2))
              {
LABEL_97:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v54 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v63);
              v51 = *((_QWORD *)a2 + 2);
              v50 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v50;
            }
LABEL_98:
            PB::Reader::recallMark(a2, v92);
          }
          else
          {
            v72 = (char *)*((_QWORD *)this + 2);
            v71 = *((_QWORD *)this + 3);
            if ((unint64_t)v72 >= v71)
            {
              v79 = (char *)*v8;
              v80 = (v72 - (_BYTE *)*v8) >> 2;
              v81 = v80 + 1;
              if ((unint64_t)(v80 + 1) >> 62)
LABEL_150:
                sub_10000D5F8();
              v82 = v71 - (_QWORD)v79;
              if (v82 >> 1 > v81)
                v81 = v82 >> 1;
              if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL)
                v83 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v83 = v81;
              if (v83)
              {
                v84 = (char *)sub_100020E2C((uint64_t)v9, v83);
                v79 = (char *)*((_QWORD *)this + 1);
                v72 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v84 = 0;
              }
              v87 = &v84[4 * v80];
              *(_DWORD *)v87 = 0;
              v70 = v87 + 4;
              while (v72 != v79)
              {
                v88 = *((_DWORD *)v72 - 1);
                v72 -= 4;
                *((_DWORD *)v87 - 1) = v88;
                v87 -= 4;
              }
              *((_QWORD *)this + 1) = v87;
              *((_QWORD *)this + 2) = v70;
              *((_QWORD *)this + 3) = &v84[4 * v83];
              if (v79)
                operator delete(v79);
            }
            else
            {
              *(_DWORD *)v72 = 0;
              v70 = v72 + 4;
            }
            *((_QWORD *)this + 2) = v70;
LABEL_133:
            v89 = *((_QWORD *)a2 + 1);
            if (v89 <= 0xFFFFFFFFFFFFFFFBLL && v89 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v70 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v89);
LABEL_137:
              v34 = *((_QWORD *)a2 + 1) + 4;
LABEL_138:
              *((_QWORD *)a2 + 1) = v34;
            }
            else
            {
LABEL_135:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_139:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v24, 0) & 1) == 0)
            return 0;
          goto LABEL_139;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MovementStatsGravityProjection::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;

  v3 = this;
  v4 = *(_BYTE *)(this + 76);
  if ((v4 & 2) == 0)
  {
    if ((*(_BYTE *)(this + 76) & 1) == 0)
      goto LABEL_3;
LABEL_13:
    this = PB::Writer::write(a2, *(double *)(v3 + 56), 2u);
    if ((*(_BYTE *)(v3 + 76) & 4) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 64), 1u);
  v4 = *(_BYTE *)(v3 + 76);
  if ((v4 & 1) != 0)
    goto LABEL_13;
LABEL_3:
  if ((v4 & 4) != 0)
LABEL_4:
    this = PB::Writer::write(a2, *(float *)(v3 + 72), 3u);
LABEL_5:
  v5 = *(float **)(v3 + 32);
  v6 = *(float **)(v3 + 40);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7, 4u);
  }
  v9 = *(float **)(v3 + 8);
  v8 = *(float **)(v3 + 16);
  while (v9 != v8)
  {
    v10 = *v9++;
    this = PB::Writer::write(a2, v10, 5u);
  }
  return this;
}

uint64_t CMMsl::MovementStatsGravityProjection::hash_value(CMMsl::MovementStatsGravityProjection *this)
{
  uint64_t v2;
  double v3;
  float v4;
  uint64_t v5;
  uint64_t v6;

  if ((*((_BYTE *)this + 76) & 2) != 0)
  {
    v2 = *((_QWORD *)this + 8);
    if ((*((_BYTE *)this + 76) & 1) != 0)
    {
LABEL_3:
      v3 = *((double *)this + 7);
      if (v3 == 0.0)
        v3 = 0.0;
      if ((*((_BYTE *)this + 76) & 4) != 0)
        goto LABEL_6;
LABEL_11:
      v5 = 0;
      goto LABEL_12;
    }
  }
  else
  {
    v2 = 0;
    if ((*((_BYTE *)this + 76) & 1) != 0)
      goto LABEL_3;
  }
  v3 = 0.0;
  if ((*((_BYTE *)this + 76) & 4) == 0)
    goto LABEL_11;
LABEL_6:
  v4 = *((float *)this + 18);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
LABEL_12:
  v6 = *(_QWORD *)&v3 ^ v2 ^ v5 ^ PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
  return v6 ^ PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
}

void CMMsl::MovementStatsSignal::~MovementStatsSignal(CMMsl::MovementStatsSignal *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::MovementStatsSignal::MovementStatsSignal(CMMsl::MovementStatsSignal *this, const CMMsl::MovementStatsSignal *a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)this = off_100352E10;
  *((_DWORD *)this + 10) = 0;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 40) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 40) & 8) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *((_BYTE *)this + 40) = v3;
    *((_DWORD *)this + 6) = v4;
    v2 = *((_BYTE *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 0x40) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 9);
    v3 |= 0x40u;
    *((_BYTE *)this + 40) = v3;
    *((_DWORD *)this + 9) = v4;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *((_BYTE *)this + 40) = v3;
  *((_DWORD *)this + 4) = v4;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  LODWORD(v4) = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *((_BYTE *)this + 40) = v3;
  *((_DWORD *)this + 8) = v4;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x10) == 0)
      return *(float *)&v4;
    goto LABEL_16;
  }
LABEL_15:
  LODWORD(v4) = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *((_BYTE *)this + 40) = v3;
  *((_DWORD *)this + 5) = v4;
  if ((*((_BYTE *)a2 + 40) & 0x10) == 0)
    return *(float *)&v4;
LABEL_16:
  LODWORD(v4) = *((_DWORD *)a2 + 7);
  *((_BYTE *)this + 40) = v3 | 0x10;
  *((_DWORD *)this + 7) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::MovementStatsSignal::operator=(uint64_t a1, const CMMsl::MovementStatsSignal *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;

  if ((const CMMsl::MovementStatsSignal *)a1 != a2)
  {
    CMMsl::MovementStatsSignal::MovementStatsSignal((CMMsl::MovementStatsSignal *)&v8, a2);
    v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    v12 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v11;
    v11 = v5;
    v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    v10 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::MovementStatsSignal *a2, CMMsl::MovementStatsSignal *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  result = *((float *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((float *)a2 + 7) = result;
  return result;
}

float CMMsl::MovementStatsSignal::MovementStatsSignal(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100352E10;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_100352E10;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  return result;
}

uint64_t CMMsl::MovementStatsSignal::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _QWORD v10[2];
  __int128 v11;
  uint64_t v12;
  int v13;

  if (a1 != a2)
  {
    v10[0] = off_100352E10;
    v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v13 = *(_DWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v10[1] = v5;
    v12 = *(_QWORD *)(a1 + 32);
    v6 = *(_OWORD *)(a1 + 16);
    v7 = *(_OWORD *)(a2 + 16);
    v8 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 40) = v3;
    *(_QWORD *)(a1 + 32) = v8;
    *(_OWORD *)(a1 + 16) = v7;
    v11 = v6;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::MovementStatsSignal::formatText(CMMsl::MovementStatsSignal *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "cadence", *((float *)this + 4));
    v5 = *((_BYTE *)this + 40);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*((_BYTE *)this + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "horizontalRotationRateFiltered", *((float *)this + 5));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "sample", *((float *)this + 6));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(a2, "verticalUserAcceleration", *((float *)this + 8));
    if ((*((_BYTE *)this + 40) & 0x40) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "verticalRotationRateFiltered", *((float *)this + 7));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 0x20) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 0x40) != 0)
LABEL_8:
    PB::TextFormatter::format(a2, "walkSpeedFilteredSample", *((float *)this + 9));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MovementStatsSignal::readFrom(CMMsl::MovementStatsSignal *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 40) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_44;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_47;
        case 2u:
          *((_BYTE *)this + 40) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_44;
          *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_46;
        case 3u:
          *((_BYTE *)this + 40) |= 0x40u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_44;
          *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_46;
        case 4u:
          *((_BYTE *)this + 40) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_44;
          *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_46;
        case 5u:
          *((_BYTE *)this + 40) |= 0x20u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_44;
          *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_46;
        case 6u:
          *((_BYTE *)this + 40) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_44;
          *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_46;
        case 7u:
          *((_BYTE *)this + 40) |= 0x10u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_46:
            v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_47:
            *((_QWORD *)a2 + 1) = v2;
          }
          else
          {
LABEL_44:
            *((_BYTE *)a2 + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MovementStatsSignal::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 40);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(this + 40) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 3u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 4u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 5u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 28), 7u);
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 6u);
  if ((*(_BYTE *)(v3 + 40) & 0x10) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 28), 7u);
  return this;
}

uint64_t CMMsl::MovementStatsSignal::hash_value(CMMsl::MovementStatsSignal *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;

  if ((*((_BYTE *)this + 40) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 40) & 8) != 0)
      goto LABEL_3;
LABEL_24:
    v3 = 0;
    if ((*((_BYTE *)this + 40) & 0x40) != 0)
      goto LABEL_6;
LABEL_25:
    v5 = 0;
    if ((*((_BYTE *)this + 40) & 2) != 0)
      goto LABEL_9;
LABEL_26:
    v7 = 0;
    if ((*((_BYTE *)this + 40) & 0x20) != 0)
      goto LABEL_12;
LABEL_27:
    v9 = 0;
    if ((*((_BYTE *)this + 40) & 4) != 0)
      goto LABEL_15;
    goto LABEL_28;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 40) & 8) == 0)
    goto LABEL_24;
LABEL_3:
  v2 = *((float *)this + 6);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 40) & 0x40) == 0)
    goto LABEL_25;
LABEL_6:
  v4 = *((float *)this + 9);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((*((_BYTE *)this + 40) & 2) == 0)
    goto LABEL_26;
LABEL_9:
  v6 = *((float *)this + 4);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((*((_BYTE *)this + 40) & 0x20) == 0)
    goto LABEL_27;
LABEL_12:
  v8 = *((float *)this + 8);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  if ((*((_BYTE *)this + 40) & 4) != 0)
  {
LABEL_15:
    v10 = *((float *)this + 5);
    v11 = LODWORD(v10);
    if (v10 == 0.0)
      v11 = 0;
    if ((*((_BYTE *)this + 40) & 0x10) != 0)
      goto LABEL_18;
LABEL_29:
    v13 = 0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13;
  }
LABEL_28:
  v11 = 0;
  if ((*((_BYTE *)this + 40) & 0x10) == 0)
    goto LABEL_29;
LABEL_18:
  v12 = *((float *)this + 7);
  v13 = LODWORD(v12);
  if (v12 == 0.0)
    v13 = 0;
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13;
}

void CMMsl::NatalieData::~NatalieData(CMMsl::NatalieData *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::NatalieData::NatalieData(uint64_t this, const CMMsl::NatalieData *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  *(_QWORD *)this = off_100352E48;
  *(_DWORD *)(this + 68) = 0;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x10) != 0)
  {
    v4 = *((_QWORD *)a2 + 5);
    v3 = 16;
    *(_WORD *)(this + 68) = 16;
    *(_QWORD *)(this + 40) = v4;
    v2 = *((_WORD *)a2 + 34);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 12);
    v3 |= 0x20u;
    *(_WORD *)(this + 68) = v3;
    *(_DWORD *)(this + 48) = v5;
    v2 = *((_WORD *)a2 + 34);
  }
LABEL_6:
  if ((v2 & 0x400) != 0)
  {
    v6 = *((_BYTE *)a2 + 65);
    v3 |= 0x400u;
    *(_WORD *)(this + 68) = v3;
    *(_BYTE *)(this + 65) = v6;
    v2 = *((_WORD *)a2 + 34);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 68) = v3;
  *(_QWORD *)(this + 16) = v7;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  v8 = *((_DWORD *)a2 + 13);
  v3 |= 0x40u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 52) = v8;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  v9 = *((_DWORD *)a2 + 15);
  v3 |= 0x100u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 60) = v9;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  v10 = *((_DWORD *)a2 + 14);
  v3 |= 0x80u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 56) = v10;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  v11 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *(_WORD *)(this + 68) = v3;
  *(_QWORD *)(this + 24) = v11;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 1) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  v12 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 68) = v3;
  *(_QWORD *)(this + 32) = v12;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 1) == 0)
  {
LABEL_14:
    if ((v2 & 0x200) == 0)
      return this;
LABEL_24:
    v14 = *((_BYTE *)a2 + 64);
    *(_WORD *)(this + 68) = v3 | 0x200;
    *(_BYTE *)(this + 64) = v14;
    return this;
  }
LABEL_23:
  v13 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 68) = v3;
  *(_QWORD *)(this + 8) = v13;
  if ((*((_WORD *)a2 + 34) & 0x200) != 0)
    goto LABEL_24;
  return this;
}

CMMsl *CMMsl::NatalieData::operator=(CMMsl *a1, const CMMsl::NatalieData *a2)
{
  CMMsl::NatalieData *v3;
  _BYTE v5[72];

  if (a1 != a2)
  {
    CMMsl::NatalieData::NatalieData((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::NatalieData *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::NatalieData *a2, CMMsl::NatalieData *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  v3 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v3;
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v4;
  v5 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  LOBYTE(v5) = *((_BYTE *)this + 65);
  *((_BYTE *)this + 65) = *((_BYTE *)a2 + 65);
  *((_BYTE *)a2 + 65) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v7;
  v8 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v8;
  v9 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v9;
  v10 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v10;
  v11 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v11;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v9) = *((_BYTE *)this + 64);
  *((_BYTE *)this + 64) = *((_BYTE *)a2 + 64);
  *((_BYTE *)a2 + 64) = v9;
  return result;
}

double CMMsl::NatalieData::NatalieData(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100352E48;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a2 + 68) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return result;
}

CMMsl *CMMsl::NatalieData::operator=(CMMsl *this, uint64_t a2, CMMsl::NatalieData *a3)
{
  __int128 v4;
  void (**v6)(CMMsl::NatalieData *__hidden);
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int16 v11;
  int v12;

  if (this != (CMMsl *)a2)
  {
    v6 = off_100352E48;
    v12 = *(_DWORD *)(a2 + 68);
    *(_DWORD *)(a2 + 68) = 0;
    v9 = *(_QWORD *)(a2 + 40);
    v10 = *(_OWORD *)(a2 + 48);
    v4 = *(_OWORD *)(a2 + 24);
    v7 = *(_OWORD *)(a2 + 8);
    v8 = v4;
    v11 = *(_WORD *)(a2 + 64);
    CMMsl::swap(this, (CMMsl::NatalieData *)&v6, a3);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return this;
}

uint64_t CMMsl::NatalieData::formatText(CMMsl::NatalieData *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(a2, "activityType", *((_DWORD *)this + 12));
    v5 = *((_WORD *)this + 34);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 0x200) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "duration", *((double *)this + 1));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x200) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "fGpsAvailability", *((_BYTE *)this + 64));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "fractionalGrade", *((double *)this + 2));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "gradeType", *((_DWORD *)this + 13));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "hrmin", *((double *)this + 3));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "isStanding", *((_BYTE *)this + 65));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 8) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "metSource", *((_DWORD *)this + 14));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 8) == 0)
  {
LABEL_10:
    if ((v5 & 0x100) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(a2, "rawGradeType", *((_DWORD *)this + 15));
    if ((*((_WORD *)this + 34) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "mets", *((double *)this + 4));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x100) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x10) != 0)
LABEL_12:
    PB::TextFormatter::format(a2, "startTime", *((double *)this + 5));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::NatalieData::readFrom(CMMsl::NatalieData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  int v47;
  BOOL v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  unint64_t v63;
  char v64;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 34) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_68;
              *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_104;
            case 2u:
              *((_WORD *)this + 34) |= 0x20u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_109;
                  }
                  v51 = v21++;
                  v52 = *(_BYTE *)(v22 + v51);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_108:
                    v2 = v51 + 1;
                    goto LABEL_109;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_108;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_109;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_109:
              *((_DWORD *)this + 12) = v25;
              goto LABEL_125;
            case 3u:
              *((_WORD *)this + 34) |= 0x400u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v28 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v28 = v27 != 0;
              }
              *((_BYTE *)this + 65) = v28;
              goto LABEL_125;
            case 4u:
              *((_WORD *)this + 34) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_68;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_104;
            case 5u:
              *((_WORD *)this + 34) |= 0x40u;
              v29 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v30 = *(_QWORD *)a2;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v33 = 0;
                if (v2 <= v29)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_114;
                  }
                  v55 = v29++;
                  v56 = *(_BYTE *)(v30 + v55);
                  *((_QWORD *)a2 + 1) = v29;
                  v33 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_113:
                    v2 = v55 + 1;
                    goto LABEL_114;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v33) = 0;
                goto LABEL_113;
              }
              v31 = 0;
              v32 = 0;
              v33 = 0;
              do
              {
                v2 = v29 + 1;
                *((_QWORD *)a2 + 1) = v29 + 1;
                v34 = *(_BYTE *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0)
                  goto LABEL_114;
                v31 += 7;
                v29 = v2;
                v14 = v32++ > 8;
              }
              while (!v14);
              LODWORD(v33) = 0;
LABEL_114:
              *((_DWORD *)this + 13) = v33;
              goto LABEL_125;
            case 6u:
              *((_WORD *)this + 34) |= 0x100u;
              v35 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v36 = *(_QWORD *)a2;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v39 = 0;
                if (v2 <= v35)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_119;
                  }
                  v59 = v35++;
                  v60 = *(_BYTE *)(v36 + v59);
                  *((_QWORD *)a2 + 1) = v35;
                  v39 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_118:
                    v2 = v59 + 1;
                    goto LABEL_119;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v39) = 0;
                goto LABEL_118;
              }
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v2 = v35 + 1;
                *((_QWORD *)a2 + 1) = v35 + 1;
                v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0)
                  goto LABEL_119;
                v37 += 7;
                v35 = v2;
                v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_119:
              *((_DWORD *)this + 15) = v39;
              goto LABEL_125;
            case 7u:
              *((_WORD *)this + 34) |= 0x80u;
              v41 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v42 = *(_QWORD *)a2;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                v61 = 0;
                v62 = 0;
                v45 = 0;
                if (v2 <= v41)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_124;
                  }
                  v63 = v41++;
                  v64 = *(_BYTE *)(v42 + v63);
                  *((_QWORD *)a2 + 1) = v41;
                  v45 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0)
                    break;
                  v61 += 7;
                  v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_123:
                    v2 = v63 + 1;
                    goto LABEL_124;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v45) = 0;
                goto LABEL_123;
              }
              v43 = 0;
              v44 = 0;
              v45 = 0;
              do
              {
                v2 = v41 + 1;
                *((_QWORD *)a2 + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0)
                  goto LABEL_124;
                v43 += 7;
                v41 = v2;
                v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_124:
              *((_DWORD *)this + 14) = v45;
LABEL_125:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 8u:
              *((_WORD *)this + 34) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_68;
              *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_104;
            case 9u:
              *((_WORD *)this + 34) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_68;
              *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_104;
            case 0xAu:
              *((_WORD *)this + 34) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_104:
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_68:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_125;
            case 0xBu:
              *((_WORD *)this + 34) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v48 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v47 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v48 = v47 != 0;
              }
              *((_BYTE *)this + 64) = v48;
              goto LABEL_125;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_125;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::NatalieData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 68);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 40), 1u);
    v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 2u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 65), 3u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 4u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 52), 5u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 60), 6u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 56), 7u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 8u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 1) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 9u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 1) == 0)
  {
LABEL_11:
    if ((v4 & 0x200) == 0)
      return this;
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 64), 0xBu);
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 0xAu);
  if ((*(_WORD *)(v3 + 68) & 0x200) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 64), 0xBu);
  return this;
}

uint64_t CMMsl::NatalieData::hash_value(CMMsl::NatalieData *this)
{
  __int16 v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;

  v1 = *((_WORD *)this + 34);
  if ((v1 & 0x10) != 0)
  {
    v2 = *((double *)this + 5);
    if (v2 == 0.0)
      v2 = 0.0;
    if ((v1 & 0x20) != 0)
    {
LABEL_3:
      v3 = *((unsigned int *)this + 12);
      if ((*((_WORD *)this + 34) & 0x400) != 0)
        goto LABEL_4;
      goto LABEL_25;
    }
  }
  else
  {
    v2 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((*((_WORD *)this + 34) & 0x400) != 0)
  {
LABEL_4:
    v4 = *((unsigned __int8 *)this + 65);
    if ((v1 & 2) != 0)
      goto LABEL_5;
LABEL_26:
    v5 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_8;
    goto LABEL_27;
  }
LABEL_25:
  v4 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_26;
LABEL_5:
  v5 = *((double *)this + 2);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 0x40) != 0)
  {
LABEL_8:
    v6 = *((unsigned int *)this + 13);
    if ((*((_WORD *)this + 34) & 0x100) != 0)
      goto LABEL_9;
    goto LABEL_28;
  }
LABEL_27:
  v6 = 0;
  if ((*((_WORD *)this + 34) & 0x100) != 0)
  {
LABEL_9:
    v7 = *((unsigned int *)this + 15);
    if ((v1 & 0x80) != 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  v7 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_10:
    v8 = *((unsigned int *)this + 14);
    if ((v1 & 4) != 0)
      goto LABEL_11;
LABEL_30:
    v9 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_14;
LABEL_31:
    v10 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_17;
    goto LABEL_32;
  }
LABEL_29:
  v8 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_30;
LABEL_11:
  v9 = *((double *)this + 3);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_31;
LABEL_14:
  v10 = *((double *)this + 4);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((v1 & 1) != 0)
  {
LABEL_17:
    v11 = *((double *)this + 1);
    if (v11 == 0.0)
      v11 = 0.0;
    if ((*((_WORD *)this + 34) & 0x200) != 0)
      goto LABEL_20;
LABEL_33:
    v12 = 0;
    return v3 ^ *(_QWORD *)&v2 ^ v4 ^ *(_QWORD *)&v5 ^ v6 ^ v7 ^ v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ v12;
  }
LABEL_32:
  v11 = 0.0;
  if ((*((_WORD *)this + 34) & 0x200) == 0)
    goto LABEL_33;
LABEL_20:
  v12 = *((unsigned __int8 *)this + 64);
  return v3 ^ *(_QWORD *)&v2 ^ v4 ^ *(_QWORD *)&v5 ^ v6 ^ v7 ^ v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ v12;
}

void CMMsl::NonlinearBiasFit::~NonlinearBiasFit(CMMsl::NonlinearBiasFit *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  *(_QWORD *)this = off_100352E80;
  v2 = (void *)*((_QWORD *)this + 19);
  if (v2)
  {
    *((_QWORD *)this + 20) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 16);
  if (v3)
  {
    *((_QWORD *)this + 17) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 13);
  if (v4)
  {
    *((_QWORD *)this + 14) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 10);
  if (v5)
  {
    *((_QWORD *)this + 11) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 7);
  if (v6)
  {
    *((_QWORD *)this + 8) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 4);
  if (v7)
  {
    *((_QWORD *)this + 5) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 1);
  if (v8)
  {
    *((_QWORD *)this + 2) = v8;
    operator delete(v8);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::NonlinearBiasFit::~NonlinearBiasFit(this);
  operator delete();
}

CMMsl::NonlinearBiasFit *CMMsl::NonlinearBiasFit::NonlinearBiasFit(CMMsl::NonlinearBiasFit *this, const CMMsl::NonlinearBiasFit *a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  int v8;

  *(_QWORD *)this = off_100352E80;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  v5 = (char *)this + 56;
  *(_OWORD *)((char *)this + 104) = 0u;
  v6 = (char *)this + 104;
  *(_OWORD *)((char *)this + 152) = 0u;
  v7 = (char *)this + 152;
  *((_DWORD *)this + 45) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_QWORD *)this + 21) = 0;
  if (this != a2)
  {
    sub_100020CE4((char *)this + 128, *((char **)a2 + 16), *((_QWORD *)a2 + 17), (uint64_t)(*((_QWORD *)a2 + 17) - *((_QWORD *)a2 + 16)) >> 2);
    sub_100020CE4(v6, *((char **)a2 + 13), *((_QWORD *)a2 + 14), (uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 2);
    sub_100020CE4(v7, *((char **)a2 + 19), *((_QWORD *)a2 + 20), (uint64_t)(*((_QWORD *)a2 + 20) - *((_QWORD *)a2 + 19)) >> 2);
  }
  if ((*((_BYTE *)a2 + 180) & 1) != 0)
  {
    v8 = *((_DWORD *)a2 + 44);
    *((_BYTE *)this + 180) |= 1u;
    *((_DWORD *)this + 44) = v8;
  }
  if (this != a2)
  {
    sub_100020CE4((char *)this + 80, *((char **)a2 + 10), *((_QWORD *)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 2);
    sub_100020CE4(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
    sub_100020CE4((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
    sub_100020CE4(v5, *((char **)a2 + 7), *((_QWORD *)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 2);
  }
  return this;
}

CMMsl *CMMsl::NonlinearBiasFit::operator=(CMMsl *a1, const CMMsl::NonlinearBiasFit *a2)
{
  CMMsl::NonlinearBiasFit *v3;
  _BYTE v5[184];

  if (a1 != a2)
  {
    CMMsl::NonlinearBiasFit::NonlinearBiasFit((CMMsl::NonlinearBiasFit *)v5, a2);
    CMMsl::swap(a1, (CMMsl::NonlinearBiasFit *)v5, v3);
    CMMsl::NonlinearBiasFit::~NonlinearBiasFit((CMMsl::NonlinearBiasFit *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::NonlinearBiasFit *a2, CMMsl::NonlinearBiasFit *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v3;
  v4 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v4;
  v5 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v5;
  v6 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v6;
  v7 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v7;
  v8 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v8;
  v9 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v9;
  v10 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v10;
  v11 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 20) = v11;
  v12 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
  *((_QWORD *)a2 + 21) = v12;
  result = *((float *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((float *)a2 + 44) = result;
  v14 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v14;
  v15 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v15;
  v16 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v16;
  v17 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v17;
  v18 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v18;
  v19 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v19;
  v20 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v20;
  v21 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v21;
  v22 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v22;
  v23 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v23;
  v24 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v24;
  v25 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v25;
  return result;
}

uint64_t CMMsl::NonlinearBiasFit::NonlinearBiasFit(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_100352E80;
  v4 = a1 + 32;
  v5 = a1 + 80;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a2 + 180) = 0;
  sub_100239458(a1 + 128, (__n128 *)(a2 + 128));
  sub_100239458(a1 + 104, (__n128 *)(a2 + 104));
  sub_100239458(a1 + 152, (__n128 *)(a2 + 152));
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  sub_100239458(v5, (__n128 *)(a2 + 80));
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  sub_100239458(v4, (__n128 *)(a2 + 32));
  sub_100239458(a1 + 56, (__n128 *)(a2 + 56));
  return a1;
}

CMMsl *CMMsl::NonlinearBiasFit::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::NonlinearBiasFit *v3;
  _BYTE v5[184];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::NonlinearBiasFit::NonlinearBiasFit((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::NonlinearBiasFit *)v5, v3);
    CMMsl::NonlinearBiasFit::~NonlinearBiasFit((CMMsl::NonlinearBiasFit *)v5);
  }
  return a1;
}

uint64_t CMMsl::NonlinearBiasFit::formatText(CMMsl::NonlinearBiasFit *this, PB::TextFormatter *a2, const char *a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  float *v17;
  float *v18;
  float v19;
  float *v20;
  float *v21;
  float v22;
  float *v23;
  float *v24;
  float v25;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (unsigned int *)*((_QWORD *)this + 10);
  v6 = (unsigned int *)*((_QWORD *)this + 11);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "error", v7);
  }
  v8 = (unsigned int *)*((_QWORD *)this + 1);
  v9 = (unsigned int *)*((_QWORD *)this + 2);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "errorX", v10);
  }
  v11 = (unsigned int *)*((_QWORD *)this + 4);
  v12 = (unsigned int *)*((_QWORD *)this + 5);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(a2, "errorY", v13);
  }
  v14 = (unsigned int *)*((_QWORD *)this + 7);
  v15 = (unsigned int *)*((_QWORD *)this + 8);
  while (v14 != v15)
  {
    v16 = *v14++;
    PB::TextFormatter::format(a2, "errorZ", v16);
  }
  v17 = (float *)*((_QWORD *)this + 13);
  v18 = (float *)*((_QWORD *)this + 14);
  while (v17 != v18)
  {
    v19 = *v17++;
    PB::TextFormatter::format(a2, "intercept", v19);
  }
  if ((*((_BYTE *)this + 180) & 1) != 0)
    PB::TextFormatter::format(a2, "overlap", *((float *)this + 44));
  v20 = (float *)*((_QWORD *)this + 16);
  v21 = (float *)*((_QWORD *)this + 17);
  while (v20 != v21)
  {
    v22 = *v20++;
    PB::TextFormatter::format(a2, "slope", v22);
  }
  v23 = (float *)*((_QWORD *)this + 19);
  v24 = (float *)*((_QWORD *)this + 20);
  while (v23 != v24)
  {
    v25 = *v23++;
    PB::TextFormatter::format(a2, "temperature", v25);
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::NonlinearBiasFit::readFrom(CMMsl::NonlinearBiasFit *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  _DWORD *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  _DWORD *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  _DWORD *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  BOOL v80;
  char v81;
  unsigned int v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  char v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  int v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  char v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  char v109;
  unsigned int v110;
  uint64_t v111;
  unint64_t v112;
  char v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  char v127;
  unsigned int v128;
  uint64_t v129;
  unint64_t v130;
  char v131;
  char v132;
  unsigned int v133;
  uint64_t v134;
  unint64_t v135;
  char v136;
  char *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char *v142;
  char *v143;
  char *v144;
  int v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  char v150;
  unsigned int v151;
  uint64_t v152;
  unint64_t v153;
  char v154;
  char v155;
  unsigned int v156;
  uint64_t v157;
  unint64_t v158;
  char v159;
  unint64_t v160;
  char *v161;
  _DWORD *v162;
  unint64_t v163;
  char *v164;
  unint64_t v165;
  char *v166;
  unint64_t v167;
  char *v168;
  _DWORD *v169;
  unint64_t v170;
  char *v171;
  unint64_t v172;
  char *v173;
  unint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t v204;
  char *v205;
  char *v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  unint64_t v210;
  char *v211;
  char *v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  char *v217;
  char *v218;
  int v219;
  char *v220;
  int v221;
  char *v222;
  int v223;
  unint64_t v224;
  char *v225;
  int v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  char v230;
  unsigned int v231;
  unint64_t v233;
  char v234;
  uint64_t v235;
  unint64_t v236;
  char v237;
  char *v238;
  int v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  char v243;
  unsigned int v244;
  unint64_t v246;
  char v247;
  unint64_t v248;
  char v249;
  char *v250;
  int v251;
  unint64_t v252;
  unint64_t v253;
  uint64_t v254;
  char v255;
  unsigned int v256;
  unint64_t v258;
  char v259;
  unint64_t v260;
  char v261;
  char *v262;
  int v263;
  unint64_t v264;
  unint64_t v265;
  uint64_t v266;
  char v267;
  unsigned int v268;
  unint64_t v270;
  char v271;
  unint64_t v272;
  char v273;
  void **v276;
  void **v277;
  void **v278;
  void **v279;
  char *v280;
  char *v281;
  char *v282;
  void **v283;
  void **v284;
  void **v285;
  _BYTE v286[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (_QWORD *)((char *)this + 72);
    v277 = (void **)((char *)this + 32);
    v278 = (void **)((char *)this + 56);
    v9 = (_QWORD *)((char *)this + 48);
    v276 = (void **)((char *)this + 8);
    v10 = (_QWORD *)((char *)this + 24);
    v11 = (_QWORD *)((char *)this + 96);
    v285 = (void **)((char *)this + 152);
    v282 = (char *)this + 168;
    v284 = (void **)((char *)this + 104);
    v281 = (char *)this + 120;
    v283 = (void **)((char *)this + 128);
    v279 = (void **)((char *)this + 80);
    v280 = (char *)this + 144;
    while (1)
    {
      v12 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v80 = v14++ > 8;
        if (v80)
          goto LABEL_20;
      }
LABEL_21:
      v23 = v15 & 7;
      if (v23 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          if (v23 != 2)
          {
            v161 = (char *)*((_QWORD *)this + 17);
            v160 = *((_QWORD *)this + 18);
            if ((unint64_t)v161 >= v160)
            {
              v176 = (char *)*v283;
              v177 = (v161 - (_BYTE *)*v283) >> 2;
              v178 = v177 + 1;
              if ((unint64_t)(v177 + 1) >> 62)
LABEL_482:
                sub_10000D5F8();
              v179 = v160 - (_QWORD)v176;
              if (v179 >> 1 > v178)
                v178 = v179 >> 1;
              if ((unint64_t)v179 >= 0x7FFFFFFFFFFFFFFCLL)
                v180 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v180 = v178;
              if (v180)
              {
                v181 = (char *)sub_100020E2C((uint64_t)v280, v180);
                v176 = (char *)*((_QWORD *)this + 16);
                v161 = (char *)*((_QWORD *)this + 17);
              }
              else
              {
                v181 = 0;
              }
              v218 = &v181[4 * v177];
              *(_DWORD *)v218 = 0;
              v162 = v218 + 4;
              while (v161 != v176)
              {
                v219 = *((_DWORD *)v161 - 1);
                v161 -= 4;
                *((_DWORD *)v218 - 1) = v219;
                v218 -= 4;
              }
              *((_QWORD *)this + 16) = v218;
              *((_QWORD *)this + 17) = v162;
              *((_QWORD *)this + 18) = &v181[4 * v180];
              if (v176)
                operator delete(v176);
            }
            else
            {
              *(_DWORD *)v161 = 0;
              v162 = v161 + 4;
            }
            *((_QWORD *)this + 17) = v162;
            goto LABEL_374;
          }
          if ((PB::Reader::placeMark(a2, v286) & 1) != 0)
            return 0;
          v24 = *((_QWORD *)a2 + 1);
          v25 = *((_QWORD *)a2 + 2);
          while (v24 < v25 && !*((_BYTE *)a2 + 24))
          {
            v27 = (char *)*((_QWORD *)this + 17);
            v26 = *((_QWORD *)this + 18);
            if ((unint64_t)v27 >= v26)
            {
              v29 = (char *)*v283;
              v30 = (v27 - (_BYTE *)*v283) >> 2;
              v31 = v30 + 1;
              if ((unint64_t)(v30 + 1) >> 62)
                goto LABEL_482;
              v32 = v26 - (_QWORD)v29;
              if (v32 >> 1 > v31)
                v31 = v32 >> 1;
              if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
                v33 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v33 = v31;
              if (v33)
              {
                v34 = (char *)sub_100020E2C((uint64_t)v280, v33);
                v29 = (char *)*((_QWORD *)this + 16);
                v27 = (char *)*((_QWORD *)this + 17);
              }
              else
              {
                v34 = 0;
              }
              v35 = &v34[4 * v30];
              *(_DWORD *)v35 = 0;
              v28 = v35 + 4;
              while (v27 != v29)
              {
                v36 = *((_DWORD *)v27 - 1);
                v27 -= 4;
                *((_DWORD *)v35 - 1) = v36;
                v35 -= 4;
              }
              *((_QWORD *)this + 16) = v35;
              *((_QWORD *)this + 17) = v28;
              *((_QWORD *)this + 18) = &v34[4 * v33];
              if (v29)
                operator delete(v29);
            }
            else
            {
              *(_DWORD *)v27 = 0;
              v28 = v27 + 4;
            }
            *((_QWORD *)this + 17) = v28;
            v37 = *((_QWORD *)a2 + 1);
            if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_295;
            *(v28 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v37);
            v25 = *((_QWORD *)a2 + 2);
            v24 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v24;
          }
          goto LABEL_296;
        case 2u:
          if (v23 != 2)
          {
            v164 = (char *)*((_QWORD *)this + 14);
            v163 = *((_QWORD *)this + 15);
            if ((unint64_t)v164 >= v163)
            {
              v182 = (char *)*v284;
              v183 = (v164 - (_BYTE *)*v284) >> 2;
              v184 = v183 + 1;
              if ((unint64_t)(v183 + 1) >> 62)
LABEL_483:
                sub_10000D5F8();
              v185 = v163 - (_QWORD)v182;
              if (v185 >> 1 > v184)
                v184 = v185 >> 1;
              if ((unint64_t)v185 >= 0x7FFFFFFFFFFFFFFCLL)
                v186 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v186 = v184;
              if (v186)
              {
                v187 = (char *)sub_100020E2C((uint64_t)v281, v186);
                v182 = (char *)*((_QWORD *)this + 13);
                v164 = (char *)*((_QWORD *)this + 14);
              }
              else
              {
                v187 = 0;
              }
              v220 = &v187[4 * v183];
              *(_DWORD *)v220 = 0;
              v162 = v220 + 4;
              while (v164 != v182)
              {
                v221 = *((_DWORD *)v164 - 1);
                v164 -= 4;
                *((_DWORD *)v220 - 1) = v221;
                v220 -= 4;
              }
              *((_QWORD *)this + 13) = v220;
              *((_QWORD *)this + 14) = v162;
              *((_QWORD *)this + 15) = &v187[4 * v186];
              if (v182)
                operator delete(v182);
            }
            else
            {
              *(_DWORD *)v164 = 0;
              v162 = v164 + 4;
            }
            *((_QWORD *)this + 14) = v162;
            goto LABEL_374;
          }
          if ((PB::Reader::placeMark(a2, v286) & 1) != 0)
            return 0;
          v38 = *((_QWORD *)a2 + 1);
          v39 = *((_QWORD *)a2 + 2);
          while (v38 < v39 && !*((_BYTE *)a2 + 24))
          {
            v41 = (char *)*((_QWORD *)this + 14);
            v40 = *((_QWORD *)this + 15);
            if ((unint64_t)v41 >= v40)
            {
              v43 = (char *)*v284;
              v44 = (v41 - (_BYTE *)*v284) >> 2;
              v45 = v44 + 1;
              if ((unint64_t)(v44 + 1) >> 62)
                goto LABEL_483;
              v46 = v40 - (_QWORD)v43;
              if (v46 >> 1 > v45)
                v45 = v46 >> 1;
              if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
                v47 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v47 = v45;
              if (v47)
              {
                v48 = (char *)sub_100020E2C((uint64_t)v281, v47);
                v43 = (char *)*((_QWORD *)this + 13);
                v41 = (char *)*((_QWORD *)this + 14);
              }
              else
              {
                v48 = 0;
              }
              v49 = &v48[4 * v44];
              *(_DWORD *)v49 = 0;
              v42 = v49 + 4;
              while (v41 != v43)
              {
                v50 = *((_DWORD *)v41 - 1);
                v41 -= 4;
                *((_DWORD *)v49 - 1) = v50;
                v49 -= 4;
              }
              *((_QWORD *)this + 13) = v49;
              *((_QWORD *)this + 14) = v42;
              *((_QWORD *)this + 15) = &v48[4 * v47];
              if (v43)
                operator delete(v43);
            }
            else
            {
              *(_DWORD *)v41 = 0;
              v42 = v41 + 4;
            }
            *((_QWORD *)this + 14) = v42;
            v51 = *((_QWORD *)a2 + 1);
            if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_295;
            *(v42 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v51);
            v39 = *((_QWORD *)a2 + 2);
            v38 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v38;
          }
          goto LABEL_296;
        case 3u:
          if (v23 != 2)
          {
            v166 = (char *)*((_QWORD *)this + 20);
            v165 = *((_QWORD *)this + 21);
            if ((unint64_t)v166 >= v165)
            {
              v188 = (char *)*v285;
              v189 = (v166 - (_BYTE *)*v285) >> 2;
              v190 = v189 + 1;
              if ((unint64_t)(v189 + 1) >> 62)
LABEL_484:
                sub_10000D5F8();
              v191 = v165 - (_QWORD)v188;
              if (v191 >> 1 > v190)
                v190 = v191 >> 1;
              if ((unint64_t)v191 >= 0x7FFFFFFFFFFFFFFCLL)
                v192 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v192 = v190;
              if (v192)
              {
                v193 = (char *)sub_100020E2C((uint64_t)v282, v192);
                v188 = (char *)*((_QWORD *)this + 19);
                v166 = (char *)*((_QWORD *)this + 20);
              }
              else
              {
                v193 = 0;
              }
              v222 = &v193[4 * v189];
              *(_DWORD *)v222 = 0;
              v162 = v222 + 4;
              while (v166 != v188)
              {
                v223 = *((_DWORD *)v166 - 1);
                v166 -= 4;
                *((_DWORD *)v222 - 1) = v223;
                v222 -= 4;
              }
              *((_QWORD *)this + 19) = v222;
              *((_QWORD *)this + 20) = v162;
              *((_QWORD *)this + 21) = &v193[4 * v192];
              if (v188)
                operator delete(v188);
            }
            else
            {
              *(_DWORD *)v166 = 0;
              v162 = v166 + 4;
            }
            *((_QWORD *)this + 20) = v162;
LABEL_374:
            v224 = *((_QWORD *)a2 + 1);
            if (v224 <= 0xFFFFFFFFFFFFFFFBLL && v224 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v162 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v224);
LABEL_378:
              *((_QWORD *)a2 + 1) += 4;
            }
            else
            {
LABEL_376:
              *((_BYTE *)a2 + 24) = 1;
            }
            goto LABEL_472;
          }
          if ((PB::Reader::placeMark(a2, v286) & 1) != 0)
            return 0;
          v52 = *((_QWORD *)a2 + 1);
          v53 = *((_QWORD *)a2 + 2);
          while (v52 < v53 && !*((_BYTE *)a2 + 24))
          {
            v55 = (char *)*((_QWORD *)this + 20);
            v54 = *((_QWORD *)this + 21);
            if ((unint64_t)v55 >= v54)
            {
              v57 = (char *)*v285;
              v58 = (v55 - (_BYTE *)*v285) >> 2;
              v59 = v58 + 1;
              if ((unint64_t)(v58 + 1) >> 62)
                goto LABEL_484;
              v60 = v54 - (_QWORD)v57;
              if (v60 >> 1 > v59)
                v59 = v60 >> 1;
              if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL)
                v61 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v61 = v59;
              if (v61)
              {
                v62 = (char *)sub_100020E2C((uint64_t)v282, v61);
                v57 = (char *)*((_QWORD *)this + 19);
                v55 = (char *)*((_QWORD *)this + 20);
              }
              else
              {
                v62 = 0;
              }
              v63 = &v62[4 * v58];
              *(_DWORD *)v63 = 0;
              v56 = v63 + 4;
              while (v55 != v57)
              {
                v64 = *((_DWORD *)v55 - 1);
                v55 -= 4;
                *((_DWORD *)v63 - 1) = v64;
                v63 -= 4;
              }
              *((_QWORD *)this + 19) = v63;
              *((_QWORD *)this + 20) = v56;
              *((_QWORD *)this + 21) = &v62[4 * v61];
              if (v57)
                operator delete(v57);
            }
            else
            {
              *(_DWORD *)v55 = 0;
              v56 = v55 + 4;
            }
            *((_QWORD *)this + 20) = v56;
            v65 = *((_QWORD *)a2 + 1);
            if (v65 > 0xFFFFFFFFFFFFFFFBLL || v65 + 4 > *((_QWORD *)a2 + 2))
            {
LABEL_295:
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_296;
            }
            *(v56 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v65);
            v53 = *((_QWORD *)a2 + 2);
            v52 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v52;
          }
          goto LABEL_296;
        case 4u:
          *((_BYTE *)this + 180) |= 1u;
          v66 = *((_QWORD *)a2 + 1);
          if (v66 > 0xFFFFFFFFFFFFFFFBLL || v66 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_376;
          *((_DWORD *)this + 44) = *(_DWORD *)(*(_QWORD *)a2 + v66);
          goto LABEL_378;
        case 5u:
          if (v23 == 2)
          {
            if ((PB::Reader::placeMark(a2, v286) & 1) != 0)
              return 0;
            if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
            {
              v67 = (char *)*((_QWORD *)this + 11);
              do
              {
                if ((unint64_t)v67 >= *v11)
                {
                  v68 = (char *)*v279;
                  v69 = (v67 - (_BYTE *)*v279) >> 2;
                  v70 = v69 + 1;
                  if ((unint64_t)(v69 + 1) >> 62)
                    goto LABEL_485;
                  v71 = *v11 - (_QWORD)v68;
                  if (v71 >> 1 > v70)
                    v70 = v71 >> 1;
                  if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL)
                    v72 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v72 = v70;
                  if (v72)
                  {
                    v73 = (char *)sub_100020E2C((uint64_t)v11, v72);
                    v68 = (char *)*((_QWORD *)this + 10);
                    v67 = (char *)*((_QWORD *)this + 11);
                  }
                  else
                  {
                    v73 = 0;
                  }
                  v74 = &v73[4 * v69];
                  *(_DWORD *)v74 = 0;
                  v75 = v74 + 4;
                  while (v67 != v68)
                  {
                    v76 = *((_DWORD *)v67 - 1);
                    v67 -= 4;
                    *((_DWORD *)v74 - 1) = v76;
                    v74 -= 4;
                  }
                  *((_QWORD *)this + 10) = v74;
                  *((_QWORD *)this + 11) = v75;
                  *((_QWORD *)this + 12) = &v73[4 * v72];
                  if (v68)
                    operator delete(v68);
                  v67 = v75;
                }
                else
                {
                  *(_DWORD *)v67 = 0;
                  v67 += 4;
                }
                *((_QWORD *)this + 11) = v67;
                v78 = *((_QWORD *)a2 + 1);
                v77 = *((_QWORD *)a2 + 2);
                v79 = *(_QWORD *)a2;
                v80 = v78 > 0xFFFFFFFFFFFFFFF5 || v78 + 10 > v77;
                if (v80)
                {
                  v81 = 0;
                  v82 = 0;
                  v88 = 0;
                  if (v77 <= v78)
                    v83 = *((_QWORD *)a2 + 1);
                  else
                    v83 = *((_QWORD *)a2 + 2);
                  while (1)
                  {
                    if (v83 == v78)
                      goto LABEL_280;
                    v84 = v78++;
                    v85 = *(_BYTE *)(v79 + v84);
                    *((_QWORD *)a2 + 1) = v78;
                    v88 |= (unint64_t)(v85 & 0x7F) << v81;
                    if ((v85 & 0x80) == 0)
                      break;
                    v81 += 7;
                    v80 = v82++ > 8;
                    if (v80)
                    {
                      LODWORD(v88) = 0;
                      goto LABEL_141;
                    }
                  }
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v88) = 0;
LABEL_141:
                  v89 = v84 + 1;
                }
                else
                {
                  v86 = 0;
                  v87 = 0;
                  v88 = 0;
                  while (1)
                  {
                    v89 = v78 + 1;
                    *((_QWORD *)a2 + 1) = v78 + 1;
                    v90 = *(_BYTE *)(v79 + v78);
                    v88 |= (unint64_t)(v90 & 0x7F) << v86;
                    if ((v90 & 0x80) == 0)
                      break;
                    v86 += 7;
                    v78 = v89;
                    v80 = v87++ > 8;
                    if (v80)
                    {
                      LODWORD(v88) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v67 - 1) = v88;
              }
              while (v89 < v77 && !*((_BYTE *)a2 + 24));
            }
            goto LABEL_296;
          }
          v168 = (char *)*((_QWORD *)this + 11);
          v167 = *((_QWORD *)this + 12);
          if ((unint64_t)v168 >= v167)
          {
            v194 = (char *)*v279;
            v195 = (v168 - (_BYTE *)*v279) >> 2;
            v196 = v195 + 1;
            if ((unint64_t)(v195 + 1) >> 62)
LABEL_485:
              sub_10000D5F8();
            v197 = v167 - (_QWORD)v194;
            if (v197 >> 1 > v196)
              v196 = v197 >> 1;
            if ((unint64_t)v197 >= 0x7FFFFFFFFFFFFFFCLL)
              v198 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v198 = v196;
            if (v198)
            {
              v199 = (char *)sub_100020E2C((uint64_t)v11, v198);
              v194 = (char *)*((_QWORD *)this + 10);
              v168 = (char *)*((_QWORD *)this + 11);
            }
            else
            {
              v199 = 0;
            }
            v225 = &v199[4 * v195];
            *(_DWORD *)v225 = 0;
            v169 = v225 + 4;
            while (v168 != v194)
            {
              v226 = *((_DWORD *)v168 - 1);
              v168 -= 4;
              *((_DWORD *)v225 - 1) = v226;
              v225 -= 4;
            }
            *((_QWORD *)this + 10) = v225;
            *((_QWORD *)this + 11) = v169;
            *((_QWORD *)this + 12) = &v199[4 * v198];
            if (v194)
              operator delete(v194);
          }
          else
          {
            *(_DWORD *)v168 = 0;
            v169 = v168 + 4;
          }
          *((_QWORD *)this + 11) = v169;
          v227 = *((_QWORD *)a2 + 1);
          v228 = *((_QWORD *)a2 + 2);
          v229 = *(_QWORD *)a2;
          v230 = 0;
          v231 = 0;
          if (v227 <= 0xFFFFFFFFFFFFFFF5 && v227 + 10 <= v228)
          {
            v235 = 0;
            while (1)
            {
              v236 = v227 + 1;
              *((_QWORD *)a2 + 1) = v227 + 1;
              v237 = *(_BYTE *)(v229 + v227);
              v235 |= (unint64_t)(v237 & 0x7F) << v230;
              if ((v237 & 0x80) == 0)
                goto LABEL_471;
              v230 += 7;
              v227 = v236;
              v80 = v231++ > 8;
              if (v80)
                goto LABEL_470;
            }
          }
          v235 = 0;
          if (v228 <= v227)
            v228 = *((_QWORD *)a2 + 1);
          while (v228 != v227)
          {
            v233 = v227 + 1;
            v234 = *(_BYTE *)(v229 + v227);
            *((_QWORD *)a2 + 1) = v233;
            v235 |= (unint64_t)(v234 & 0x7F) << v230;
            if ((v234 & 0x80) == 0)
              goto LABEL_464;
            v230 += 7;
            v227 = v233;
            v80 = v231++ > 8;
            if (v80)
              goto LABEL_470;
          }
          goto LABEL_463;
        case 6u:
          if (v23 == 2)
          {
            if ((PB::Reader::placeMark(a2, v286) & 1) != 0)
              return 0;
            if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
            {
              v67 = (char *)*((_QWORD *)this + 2);
              do
              {
                if ((unint64_t)v67 >= *v10)
                {
                  v91 = (char *)*v276;
                  v92 = (v67 - (_BYTE *)*v276) >> 2;
                  v93 = v92 + 1;
                  if ((unint64_t)(v92 + 1) >> 62)
                    goto LABEL_486;
                  v94 = *v10 - (_QWORD)v91;
                  if (v94 >> 1 > v93)
                    v93 = v94 >> 1;
                  if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFFCLL)
                    v95 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v95 = v93;
                  if (v95)
                  {
                    v96 = (char *)sub_100020E2C((uint64_t)v10, v95);
                    v91 = (char *)*((_QWORD *)this + 1);
                    v67 = (char *)*((_QWORD *)this + 2);
                  }
                  else
                  {
                    v96 = 0;
                  }
                  v97 = &v96[4 * v92];
                  *(_DWORD *)v97 = 0;
                  v98 = v97 + 4;
                  while (v67 != v91)
                  {
                    v99 = *((_DWORD *)v67 - 1);
                    v67 -= 4;
                    *((_DWORD *)v97 - 1) = v99;
                    v97 -= 4;
                  }
                  *((_QWORD *)this + 1) = v97;
                  *((_QWORD *)this + 2) = v98;
                  *((_QWORD *)this + 3) = &v96[4 * v95];
                  if (v91)
                    operator delete(v91);
                  v67 = v98;
                }
                else
                {
                  *(_DWORD *)v67 = 0;
                  v67 += 4;
                }
                *((_QWORD *)this + 2) = v67;
                v101 = *((_QWORD *)a2 + 1);
                v100 = *((_QWORD *)a2 + 2);
                v102 = *(_QWORD *)a2;
                if (v101 > 0xFFFFFFFFFFFFFFF5 || v101 + 10 > v100)
                {
                  v104 = 0;
                  v105 = 0;
                  v111 = 0;
                  if (v100 <= v101)
                    v106 = *((_QWORD *)a2 + 1);
                  else
                    v106 = *((_QWORD *)a2 + 2);
                  while (1)
                  {
                    if (v106 == v101)
                      goto LABEL_280;
                    v107 = v101++;
                    v108 = *(_BYTE *)(v102 + v107);
                    *((_QWORD *)a2 + 1) = v101;
                    v111 |= (unint64_t)(v108 & 0x7F) << v104;
                    if ((v108 & 0x80) == 0)
                      break;
                    v104 += 7;
                    v80 = v105++ > 8;
                    if (v80)
                    {
                      LODWORD(v111) = 0;
                      goto LABEL_186;
                    }
                  }
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v111) = 0;
LABEL_186:
                  v112 = v107 + 1;
                }
                else
                {
                  v109 = 0;
                  v110 = 0;
                  v111 = 0;
                  while (1)
                  {
                    v112 = v101 + 1;
                    *((_QWORD *)a2 + 1) = v101 + 1;
                    v113 = *(_BYTE *)(v102 + v101);
                    v111 |= (unint64_t)(v113 & 0x7F) << v109;
                    if ((v113 & 0x80) == 0)
                      break;
                    v109 += 7;
                    v101 = v112;
                    v80 = v110++ > 8;
                    if (v80)
                    {
                      LODWORD(v111) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v67 - 1) = v111;
              }
              while (v112 < v100 && !*((_BYTE *)a2 + 24));
            }
            goto LABEL_296;
          }
          v171 = (char *)*((_QWORD *)this + 2);
          v170 = *((_QWORD *)this + 3);
          if ((unint64_t)v171 >= v170)
          {
            v200 = (char *)*v276;
            v201 = (v171 - (_BYTE *)*v276) >> 2;
            v202 = v201 + 1;
            if ((unint64_t)(v201 + 1) >> 62)
LABEL_486:
              sub_10000D5F8();
            v203 = v170 - (_QWORD)v200;
            if (v203 >> 1 > v202)
              v202 = v203 >> 1;
            if ((unint64_t)v203 >= 0x7FFFFFFFFFFFFFFCLL)
              v204 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v204 = v202;
            if (v204)
            {
              v205 = (char *)sub_100020E2C((uint64_t)v10, v204);
              v200 = (char *)*((_QWORD *)this + 1);
              v171 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v205 = 0;
            }
            v238 = &v205[4 * v201];
            *(_DWORD *)v238 = 0;
            v169 = v238 + 4;
            while (v171 != v200)
            {
              v239 = *((_DWORD *)v171 - 1);
              v171 -= 4;
              *((_DWORD *)v238 - 1) = v239;
              v238 -= 4;
            }
            *((_QWORD *)this + 1) = v238;
            *((_QWORD *)this + 2) = v169;
            *((_QWORD *)this + 3) = &v205[4 * v204];
            if (v200)
              operator delete(v200);
          }
          else
          {
            *(_DWORD *)v171 = 0;
            v169 = v171 + 4;
          }
          *((_QWORD *)this + 2) = v169;
          v240 = *((_QWORD *)a2 + 1);
          v241 = *((_QWORD *)a2 + 2);
          v242 = *(_QWORD *)a2;
          v243 = 0;
          v244 = 0;
          if (v240 <= 0xFFFFFFFFFFFFFFF5 && v240 + 10 <= v241)
          {
            v235 = 0;
            while (1)
            {
              v248 = v240 + 1;
              *((_QWORD *)a2 + 1) = v240 + 1;
              v249 = *(_BYTE *)(v242 + v240);
              v235 |= (unint64_t)(v249 & 0x7F) << v243;
              if ((v249 & 0x80) == 0)
                goto LABEL_471;
              v243 += 7;
              v240 = v248;
              v80 = v244++ > 8;
              if (v80)
                goto LABEL_470;
            }
          }
          v235 = 0;
          if (v241 <= v240)
            v241 = *((_QWORD *)a2 + 1);
          while (v241 != v240)
          {
            v246 = v240 + 1;
            v247 = *(_BYTE *)(v242 + v240);
            *((_QWORD *)a2 + 1) = v246;
            v235 |= (unint64_t)(v247 & 0x7F) << v243;
            if ((v247 & 0x80) == 0)
              goto LABEL_464;
            v243 += 7;
            v240 = v246;
            v80 = v244++ > 8;
            if (v80)
              goto LABEL_470;
          }
          goto LABEL_463;
        case 7u:
          if (v23 == 2)
          {
            if ((PB::Reader::placeMark(a2, v286) & 1) != 0)
              return 0;
            if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
            {
              v67 = (char *)*((_QWORD *)this + 5);
              do
              {
                if ((unint64_t)v67 >= *v9)
                {
                  v114 = (char *)*v277;
                  v115 = (v67 - (_BYTE *)*v277) >> 2;
                  v116 = v115 + 1;
                  if ((unint64_t)(v115 + 1) >> 62)
                    goto LABEL_487;
                  v117 = *v9 - (_QWORD)v114;
                  if (v117 >> 1 > v116)
                    v116 = v117 >> 1;
                  if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFFCLL)
                    v118 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v118 = v116;
                  if (v118)
                  {
                    v119 = (char *)sub_100020E2C((uint64_t)v9, v118);
                    v114 = (char *)*((_QWORD *)this + 4);
                    v67 = (char *)*((_QWORD *)this + 5);
                  }
                  else
                  {
                    v119 = 0;
                  }
                  v120 = &v119[4 * v115];
                  *(_DWORD *)v120 = 0;
                  v121 = v120 + 4;
                  while (v67 != v114)
                  {
                    v122 = *((_DWORD *)v67 - 1);
                    v67 -= 4;
                    *((_DWORD *)v120 - 1) = v122;
                    v120 -= 4;
                  }
                  *((_QWORD *)this + 4) = v120;
                  *((_QWORD *)this + 5) = v121;
                  *((_QWORD *)this + 6) = &v119[4 * v118];
                  if (v114)
                    operator delete(v114);
                  v67 = v121;
                }
                else
                {
                  *(_DWORD *)v67 = 0;
                  v67 += 4;
                }
                *((_QWORD *)this + 5) = v67;
                v124 = *((_QWORD *)a2 + 1);
                v123 = *((_QWORD *)a2 + 2);
                v125 = *(_QWORD *)a2;
                if (v124 > 0xFFFFFFFFFFFFFFF5 || v124 + 10 > v123)
                {
                  v127 = 0;
                  v128 = 0;
                  v134 = 0;
                  if (v123 <= v124)
                    v129 = *((_QWORD *)a2 + 1);
                  else
                    v129 = *((_QWORD *)a2 + 2);
                  while (1)
                  {
                    if (v129 == v124)
                      goto LABEL_280;
                    v130 = v124++;
                    v131 = *(_BYTE *)(v125 + v130);
                    *((_QWORD *)a2 + 1) = v124;
                    v134 |= (unint64_t)(v131 & 0x7F) << v127;
                    if ((v131 & 0x80) == 0)
                      break;
                    v127 += 7;
                    v80 = v128++ > 8;
                    if (v80)
                    {
                      LODWORD(v134) = 0;
                      goto LABEL_231;
                    }
                  }
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v134) = 0;
LABEL_231:
                  v135 = v130 + 1;
                }
                else
                {
                  v132 = 0;
                  v133 = 0;
                  v134 = 0;
                  while (1)
                  {
                    v135 = v124 + 1;
                    *((_QWORD *)a2 + 1) = v124 + 1;
                    v136 = *(_BYTE *)(v125 + v124);
                    v134 |= (unint64_t)(v136 & 0x7F) << v132;
                    if ((v136 & 0x80) == 0)
                      break;
                    v132 += 7;
                    v124 = v135;
                    v80 = v133++ > 8;
                    if (v80)
                    {
                      LODWORD(v134) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v67 - 1) = v134;
              }
              while (v135 < v123 && !*((_BYTE *)a2 + 24));
            }
            goto LABEL_296;
          }
          v173 = (char *)*((_QWORD *)this + 5);
          v172 = *((_QWORD *)this + 6);
          if ((unint64_t)v173 >= v172)
          {
            v206 = (char *)*v277;
            v207 = (v173 - (_BYTE *)*v277) >> 2;
            v208 = v207 + 1;
            if ((unint64_t)(v207 + 1) >> 62)
LABEL_487:
              sub_10000D5F8();
            v209 = v172 - (_QWORD)v206;
            if (v209 >> 1 > v208)
              v208 = v209 >> 1;
            if ((unint64_t)v209 >= 0x7FFFFFFFFFFFFFFCLL)
              v210 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v210 = v208;
            if (v210)
            {
              v211 = (char *)sub_100020E2C((uint64_t)v9, v210);
              v206 = (char *)*((_QWORD *)this + 4);
              v173 = (char *)*((_QWORD *)this + 5);
            }
            else
            {
              v211 = 0;
            }
            v250 = &v211[4 * v207];
            *(_DWORD *)v250 = 0;
            v169 = v250 + 4;
            while (v173 != v206)
            {
              v251 = *((_DWORD *)v173 - 1);
              v173 -= 4;
              *((_DWORD *)v250 - 1) = v251;
              v250 -= 4;
            }
            *((_QWORD *)this + 4) = v250;
            *((_QWORD *)this + 5) = v169;
            *((_QWORD *)this + 6) = &v211[4 * v210];
            if (v206)
              operator delete(v206);
          }
          else
          {
            *(_DWORD *)v173 = 0;
            v169 = v173 + 4;
          }
          *((_QWORD *)this + 5) = v169;
          v252 = *((_QWORD *)a2 + 1);
          v253 = *((_QWORD *)a2 + 2);
          v254 = *(_QWORD *)a2;
          v255 = 0;
          v256 = 0;
          if (v252 <= 0xFFFFFFFFFFFFFFF5 && v252 + 10 <= v253)
          {
            v235 = 0;
            while (1)
            {
              v260 = v252 + 1;
              *((_QWORD *)a2 + 1) = v252 + 1;
              v261 = *(_BYTE *)(v254 + v252);
              v235 |= (unint64_t)(v261 & 0x7F) << v255;
              if ((v261 & 0x80) == 0)
                goto LABEL_471;
              v255 += 7;
              v252 = v260;
              v80 = v256++ > 8;
              if (v80)
                goto LABEL_470;
            }
          }
          v235 = 0;
          if (v253 <= v252)
            v253 = *((_QWORD *)a2 + 1);
          while (v253 != v252)
          {
            v258 = v252 + 1;
            v259 = *(_BYTE *)(v254 + v252);
            *((_QWORD *)a2 + 1) = v258;
            v235 |= (unint64_t)(v259 & 0x7F) << v255;
            if ((v259 & 0x80) == 0)
              goto LABEL_464;
            v255 += 7;
            v252 = v258;
            v80 = v256++ > 8;
            if (v80)
              goto LABEL_470;
          }
          goto LABEL_463;
        case 8u:
          if (v23 == 2)
          {
            if ((PB::Reader::placeMark(a2, v286) & 1) != 0)
              return 0;
            if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
            {
              v67 = (char *)*((_QWORD *)this + 8);
              do
              {
                if ((unint64_t)v67 >= *v8)
                {
                  v137 = (char *)*v278;
                  v138 = (v67 - (_BYTE *)*v278) >> 2;
                  v139 = v138 + 1;
                  if ((unint64_t)(v138 + 1) >> 62)
                    goto LABEL_488;
                  v140 = *v8 - (_QWORD)v137;
                  if (v140 >> 1 > v139)
                    v139 = v140 >> 1;
                  if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFFCLL)
                    v141 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v141 = v139;
                  if (v141)
                  {
                    v142 = (char *)sub_100020E2C((uint64_t)v8, v141);
                    v137 = (char *)*((_QWORD *)this + 7);
                    v67 = (char *)*((_QWORD *)this + 8);
                  }
                  else
                  {
                    v142 = 0;
                  }
                  v143 = &v142[4 * v138];
                  *(_DWORD *)v143 = 0;
                  v144 = v143 + 4;
                  while (v67 != v137)
                  {
                    v145 = *((_DWORD *)v67 - 1);
                    v67 -= 4;
                    *((_DWORD *)v143 - 1) = v145;
                    v143 -= 4;
                  }
                  *((_QWORD *)this + 7) = v143;
                  *((_QWORD *)this + 8) = v144;
                  *((_QWORD *)this + 9) = &v142[4 * v141];
                  if (v137)
                    operator delete(v137);
                  v67 = v144;
                }
                else
                {
                  *(_DWORD *)v67 = 0;
                  v67 += 4;
                }
                *((_QWORD *)this + 8) = v67;
                v147 = *((_QWORD *)a2 + 1);
                v146 = *((_QWORD *)a2 + 2);
                v148 = *(_QWORD *)a2;
                if (v147 <= 0xFFFFFFFFFFFFFFF5 && v147 + 10 <= v146)
                {
                  v155 = 0;
                  v156 = 0;
                  v157 = 0;
                  while (1)
                  {
                    v158 = v147 + 1;
                    *((_QWORD *)a2 + 1) = v147 + 1;
                    v159 = *(_BYTE *)(v148 + v147);
                    v157 |= (unint64_t)(v159 & 0x7F) << v155;
                    if ((v159 & 0x80) == 0)
                      goto LABEL_277;
                    v155 += 7;
                    v147 = v158;
                    v80 = v156++ > 8;
                    if (v80)
                    {
                      LODWORD(v157) = 0;
                      goto LABEL_277;
                    }
                  }
                }
                v150 = 0;
                v151 = 0;
                v157 = 0;
                if (v146 <= v147)
                  v152 = *((_QWORD *)a2 + 1);
                else
                  v152 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v152 == v147)
                  {
LABEL_280:
                    *((_BYTE *)a2 + 24) = 1;
                    *((_DWORD *)v67 - 1) = 0;
                    goto LABEL_296;
                  }
                  v153 = v147++;
                  v154 = *(_BYTE *)(v148 + v153);
                  *((_QWORD *)a2 + 1) = v147;
                  v157 |= (unint64_t)(v154 & 0x7F) << v150;
                  if ((v154 & 0x80) == 0)
                    break;
                  v150 += 7;
                  v80 = v151++ > 8;
                  if (v80)
                  {
                    LODWORD(v157) = 0;
                    goto LABEL_276;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v157) = 0;
LABEL_276:
                v158 = v153 + 1;
LABEL_277:
                *((_DWORD *)v67 - 1) = v157;
              }
              while (v158 < v146 && !*((_BYTE *)a2 + 24));
            }
LABEL_296:
            PB::Reader::recallMark(a2, v286);
          }
          else
          {
            v175 = (char *)*((_QWORD *)this + 8);
            v174 = *((_QWORD *)this + 9);
            if ((unint64_t)v175 >= v174)
            {
              v212 = (char *)*v278;
              v213 = (v175 - (_BYTE *)*v278) >> 2;
              v214 = v213 + 1;
              if ((unint64_t)(v213 + 1) >> 62)
LABEL_488:
                sub_10000D5F8();
              v215 = v174 - (_QWORD)v212;
              if (v215 >> 1 > v214)
                v214 = v215 >> 1;
              if ((unint64_t)v215 >= 0x7FFFFFFFFFFFFFFCLL)
                v216 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v216 = v214;
              if (v216)
              {
                v217 = (char *)sub_100020E2C((uint64_t)v8, v216);
                v212 = (char *)*((_QWORD *)this + 7);
                v175 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v217 = 0;
              }
              v262 = &v217[4 * v213];
              *(_DWORD *)v262 = 0;
              v169 = v262 + 4;
              while (v175 != v212)
              {
                v263 = *((_DWORD *)v175 - 1);
                v175 -= 4;
                *((_DWORD *)v262 - 1) = v263;
                v262 -= 4;
              }
              *((_QWORD *)this + 7) = v262;
              *((_QWORD *)this + 8) = v169;
              *((_QWORD *)this + 9) = &v217[4 * v216];
              if (v212)
                operator delete(v212);
            }
            else
            {
              *(_DWORD *)v175 = 0;
              v169 = v175 + 4;
            }
            *((_QWORD *)this + 8) = v169;
            v264 = *((_QWORD *)a2 + 1);
            v265 = *((_QWORD *)a2 + 2);
            v266 = *(_QWORD *)a2;
            v267 = 0;
            v268 = 0;
            if (v264 > 0xFFFFFFFFFFFFFFF5 || v264 + 10 > v265)
            {
              v235 = 0;
              if (v265 <= v264)
                v265 = *((_QWORD *)a2 + 1);
              while (v265 != v264)
              {
                v270 = v264 + 1;
                v271 = *(_BYTE *)(v266 + v264);
                *((_QWORD *)a2 + 1) = v270;
                v235 |= (unint64_t)(v271 & 0x7F) << v267;
                if ((v271 & 0x80) == 0)
                {
LABEL_464:
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v235) = 0;
                  goto LABEL_471;
                }
                v267 += 7;
                v264 = v270;
                v80 = v268++ > 8;
                if (v80)
                {
LABEL_470:
                  LODWORD(v235) = 0;
                  goto LABEL_471;
                }
              }
LABEL_463:
              LODWORD(v235) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v235 = 0;
              while (1)
              {
                v272 = v264 + 1;
                *((_QWORD *)a2 + 1) = v264 + 1;
                v273 = *(_BYTE *)(v266 + v264);
                v235 |= (unint64_t)(v273 & 0x7F) << v267;
                if ((v273 & 0x80) == 0)
                  break;
                v267 += 7;
                v264 = v272;
                v80 = v268++ > 8;
                if (v80)
                  goto LABEL_470;
              }
            }
LABEL_471:
            *(v169 - 1) = v235;
          }
LABEL_472:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v23, 0) & 1) == 0)
            return 0;
          goto LABEL_472;
      }
    }
    v18 = 0;
    v19 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v20 = v2 + 1;
      v21 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)a2 + 1) = v20;
      v15 |= (unint64_t)(v21 & 0x7F) << v18;
      if ((v21 & 0x80) == 0)
        goto LABEL_21;
      v18 += 7;
      v2 = v20;
      if (v19++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::NonlinearBiasFit::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  float *v10;
  float *v11;
  float v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;

  v3 = this;
  v4 = *(float **)(this + 128);
  v5 = *(float **)(this + 136);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6, 1u);
  }
  v7 = *(float **)(v3 + 104);
  v8 = *(float **)(v3 + 112);
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::write(a2, v9, 2u);
  }
  v10 = *(float **)(v3 + 152);
  v11 = *(float **)(v3 + 160);
  while (v10 != v11)
  {
    v12 = *v10++;
    this = PB::Writer::write(a2, v12, 3u);
  }
  if ((*(_BYTE *)(v3 + 180) & 1) != 0)
    this = PB::Writer::write(a2, *(float *)(v3 + 176), 4u);
  v13 = *(unsigned int **)(v3 + 80);
  v14 = *(unsigned int **)(v3 + 88);
  while (v13 != v14)
  {
    v15 = *v13++;
    this = PB::Writer::writeVarInt(a2, v15, 5u);
  }
  v16 = *(unsigned int **)(v3 + 8);
  v17 = *(unsigned int **)(v3 + 16);
  while (v16 != v17)
  {
    v18 = *v16++;
    this = PB::Writer::writeVarInt(a2, v18, 6u);
  }
  v19 = *(unsigned int **)(v3 + 32);
  v20 = *(unsigned int **)(v3 + 40);
  while (v19 != v20)
  {
    v21 = *v19++;
    this = PB::Writer::writeVarInt(a2, v21, 7u);
  }
  v23 = *(unsigned int **)(v3 + 56);
  v22 = *(unsigned int **)(v3 + 64);
  while (v23 != v22)
  {
    v24 = *v23++;
    this = PB::Writer::writeVarInt(a2, v24, 8u);
  }
  return this;
}

uint64_t CMMsl::NonlinearBiasFit::hash_value(CMMsl::NonlinearBiasFit *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = PBHashBytes(*((_QWORD *)this + 16), *((_QWORD *)this + 17) - *((_QWORD *)this + 16));
  v3 = PBHashBytes(*((_QWORD *)this + 13), *((_QWORD *)this + 14) - *((_QWORD *)this + 13));
  v4 = PBHashBytes(*((_QWORD *)this + 19), *((_QWORD *)this + 20) - *((_QWORD *)this + 19));
  if ((*((_BYTE *)this + 180) & 1) != 0)
  {
    v6 = *((float *)this + 44);
    v5 = LODWORD(v6);
    if (v6 == 0.0)
      v5 = 0;
  }
  else
  {
    v5 = 0;
  }
  v7 = v3 ^ v2 ^ v4 ^ v5;
  v8 = PBHashBytes(*((_QWORD *)this + 10), *((_QWORD *)this + 11) - *((_QWORD *)this + 10));
  v9 = v8 ^ PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  v10 = v7 ^ v9 ^ PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
  return v10 ^ PBHashBytes(*((_QWORD *)this + 7), *((_QWORD *)this + 8) - *((_QWORD *)this + 7));
}

void CMMsl::ODTPose::~ODTPose(CMMsl::ODTPose *this)
{
  void *v2;

  *(_QWORD *)this = off_100352EB8;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::ODTPose::~ODTPose(this);
  operator delete();
}

CMMsl::ODTPose *CMMsl::ODTPose::ODTPose(CMMsl::ODTPose *this, const CMMsl::ODTPose *a2)
{
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = off_100352EB8;
  *((_QWORD *)this + 1) = 0;
  v3 = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 10) = 0;
  if ((*((_BYTE *)a2 + 40) & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 4);
    *((_BYTE *)this + 40) = 1;
    *((_QWORD *)this + 4) = v4;
  }
  if (this != a2)
    sub_100239350(v3, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
  return this;
}

uint64_t CMMsl::ODTPose::operator=(uint64_t a1, const CMMsl::ODTPose *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  if ((const CMMsl::ODTPose *)a1 != a2)
  {
    CMMsl::ODTPose::ODTPose((CMMsl::ODTPose *)&v8, a2);
    v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    v12 = v3;
    v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v11;
    v11 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v5;
    v6 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v10;
    v10 = v6;
    CMMsl::ODTPose::~ODTPose((CMMsl::ODTPose *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::ODTPose *a2, CMMsl::ODTPose *a3)
{
  int v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  result = *((double *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((double *)a2 + 4) = result;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  return result;
}

uint64_t CMMsl::ODTPose::ODTPose(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_100352EB8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  return a1;
}

{
  *(_QWORD *)a1 = off_100352EB8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  return a1;
}

uint64_t CMMsl::ODTPose::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  int v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  void (**v12)(CMMsl::ODTPose *__hidden);
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  if (a1 != a2)
  {
    v12 = off_100352EB8;
    v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    v4 = *(_QWORD *)(a2 + 32);
    v5 = *(_QWORD *)(a2 + 24);
    v6 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v7 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v3;
    v16 = v7;
    v8 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v4;
    v15 = v8;
    v9 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    v13 = v9;
    v10 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v5;
    v14 = v10;
    CMMsl::ODTPose::~ODTPose((CMMsl::ODTPose *)&v12);
  }
  return a1;
}

uint64_t CMMsl::ODTPose::formatText(CMMsl::ODTPose *this, PB::TextFormatter *a2, const char *a3)
{
  double *v5;
  double *v6;
  double v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (double *)*((_QWORD *)this + 1);
  v6 = (double *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "pose", v7);
  }
  if ((*((_BYTE *)this + 40) & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::ODTPose::readFrom(CMMsl::ODTPose *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  char *v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE v52[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 8);
    v9 = (char *)this + 24;
    do
    {
      v10 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v17 = 0;
        v18 = 0;
        v13 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v19 = v2 + 1;
          v20 = *(_BYTE *)(v10 + v2);
          *((_QWORD *)a2 + 1) = v19;
          v13 |= (unint64_t)(v20 & 0x7F) << v17;
          if ((v20 & 0x80) == 0)
            goto LABEL_21;
          v17 += 7;
          v2 = v19;
          if (v18++ >= 9)
          {
LABEL_20:
            v13 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        if (v12++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v22 = v13 & 7;
      if (v22 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v23 = v13 >> 3;
      if ((v13 >> 3) == 2)
      {
        if (v22 != 2)
        {
          v40 = (char *)*((_QWORD *)this + 2);
          v39 = *((_QWORD *)this + 3);
          if ((unint64_t)v40 >= v39)
          {
            v42 = (char *)*v8;
            v43 = (v40 - (_BYTE *)*v8) >> 3;
            v44 = v43 + 1;
            if ((unint64_t)(v43 + 1) >> 61)
LABEL_84:
              sub_10000D5F8();
            v45 = v39 - (_QWORD)v42;
            if (v45 >> 2 > v44)
              v44 = v45 >> 2;
            if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
              v46 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v46 = v44;
            if (v46)
            {
              v47 = (char *)sub_10000D60C((uint64_t)v9, v46);
              v42 = (char *)*((_QWORD *)this + 1);
              v40 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v47 = 0;
            }
            v48 = &v47[8 * v43];
            *(_QWORD *)v48 = 0;
            v41 = v48 + 8;
            while (v40 != v42)
            {
              v49 = *((_QWORD *)v40 - 1);
              v40 -= 8;
              *((_QWORD *)v48 - 1) = v49;
              v48 -= 8;
            }
            *((_QWORD *)this + 1) = v48;
            *((_QWORD *)this + 2) = v41;
            *((_QWORD *)this + 3) = &v47[8 * v46];
            if (v42)
              operator delete(v42);
          }
          else
          {
            *(_QWORD *)v40 = 0;
            v41 = v40 + 8;
          }
          *((_QWORD *)this + 2) = v41;
          v50 = *((_QWORD *)a2 + 1);
          if (v50 > 0xFFFFFFFFFFFFFFF7 || v50 + 8 > *((_QWORD *)a2 + 2))
          {
LABEL_73:
            *((_BYTE *)a2 + 24) = 1;
            goto LABEL_76;
          }
          *(v41 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v50);
          goto LABEL_75;
        }
        if ((PB::Reader::placeMark(a2, v52) & 1) != 0)
          return 0;
        v25 = *((_QWORD *)a2 + 1);
        v26 = *((_QWORD *)a2 + 2);
        while (v25 < v26 && !*((_BYTE *)a2 + 24))
        {
          v28 = (char *)*((_QWORD *)this + 2);
          v27 = *((_QWORD *)this + 3);
          if ((unint64_t)v28 >= v27)
          {
            v30 = (char *)*v8;
            v31 = (v28 - (_BYTE *)*v8) >> 3;
            v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) >> 61)
              goto LABEL_84;
            v33 = v27 - (_QWORD)v30;
            if (v33 >> 2 > v32)
              v32 = v33 >> 2;
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
              v34 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v34 = v32;
            if (v34)
            {
              v35 = (char *)sub_10000D60C((uint64_t)v9, v34);
              v30 = (char *)*((_QWORD *)this + 1);
              v28 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v35 = 0;
            }
            v36 = &v35[8 * v31];
            *(_QWORD *)v36 = 0;
            v29 = v36 + 8;
            while (v28 != v30)
            {
              v37 = *((_QWORD *)v28 - 1);
              v28 -= 8;
              *((_QWORD *)v36 - 1) = v37;
              v36 -= 8;
            }
            *((_QWORD *)this + 1) = v36;
            *((_QWORD *)this + 2) = v29;
            *((_QWORD *)this + 3) = &v35[8 * v34];
            if (v30)
              operator delete(v30);
          }
          else
          {
            *(_QWORD *)v28 = 0;
            v29 = v28 + 8;
          }
          *((_QWORD *)this + 2) = v29;
          v38 = *((_QWORD *)a2 + 1);
          if (v38 > 0xFFFFFFFFFFFFFFF7 || v38 + 8 > *((_QWORD *)a2 + 2))
          {
            *((_BYTE *)a2 + 24) = 1;
            break;
          }
          *(v29 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v38);
          v26 = *((_QWORD *)a2 + 2);
          v25 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v25;
        }
        PB::Reader::recallMark(a2, v52);
      }
      else
      {
        if ((_DWORD)v23 == 1)
        {
          *((_BYTE *)this + 40) |= 1u;
          v24 = *((_QWORD *)a2 + 1);
          if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_73;
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v24);
LABEL_75:
          *((_QWORD *)a2 + 1) += 8;
          goto LABEL_76;
        }
        if ((PB::Reader::skip(a2, v23, v22, 0) & 1) == 0)
          return 0;
      }
LABEL_76:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::ODTPose::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;

  v3 = this;
  if ((*(_BYTE *)(this + 40) & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 32), 1u);
  v5 = *(double **)(v3 + 8);
  v4 = *(double **)(v3 + 16);
  while (v5 != v4)
  {
    v6 = *v5++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  return this;
}

uint64_t CMMsl::ODTPose::hash_value(CMMsl::ODTPose *this)
{
  uint64_t v1;

  if ((*((_BYTE *)this + 40) & 1) != 0)
  {
    if (*((double *)this + 4) == 0.0)
      v1 = 0;
    else
      v1 = *((_QWORD *)this + 4);
  }
  else
  {
    v1 = 0;
  }
  return PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1)) ^ v1;
}

void CMMsl::Odometer::~Odometer(CMMsl::Odometer *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::Odometer::Odometer(uint64_t this, const CMMsl::Odometer *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  char v17;

  *(_QWORD *)this = off_100352EF0;
  *(_DWORD *)(this + 100) = 0;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x80) != 0)
  {
    v4 = *((_QWORD *)a2 + 8);
    v3 = 128;
    *(_WORD *)(this + 100) = 128;
    *(_QWORD *)(this + 64) = v4;
    v2 = *((_WORD *)a2 + 50);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *(_WORD *)(this + 100) = v3;
    *(_QWORD *)(this + 16) = v5;
    v2 = *((_WORD *)a2 + 50);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    v6 = *((_QWORD *)a2 + 1);
    v3 |= 1u;
    *(_WORD *)(this + 100) = v3;
    *(_QWORD *)(this + 8) = v6;
    v2 = *((_WORD *)a2 + 50);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_21;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *(_WORD *)(this + 100) = v3;
  *(_QWORD *)(this + 24) = v7;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  v8 = *((_QWORD *)a2 + 7);
  v3 |= 0x40u;
  *(_WORD *)(this + 100) = v3;
  *(_QWORD *)(this + 56) = v8;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  v9 = *((_QWORD *)a2 + 6);
  v3 |= 0x20u;
  *(_WORD *)(this + 100) = v3;
  *(_QWORD *)(this + 48) = v9;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x10) == 0)
  {
LABEL_11:
    if ((v2 & 8) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  v10 = *((_QWORD *)a2 + 5);
  v3 |= 0x10u;
  *(_WORD *)(this + 100) = v3;
  *(_QWORD *)(this + 40) = v10;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 8) == 0)
  {
LABEL_12:
    if ((v2 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_25;
  }
LABEL_24:
  v11 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 100) = v3;
  *(_QWORD *)(this + 32) = v11;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x100) == 0)
  {
LABEL_13:
    if ((v2 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_26;
  }
LABEL_25:
  v12 = *((_QWORD *)a2 + 9);
  v3 |= 0x100u;
  *(_WORD *)(this + 100) = v3;
  *(_QWORD *)(this + 72) = v12;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x400) == 0)
  {
LABEL_14:
    if ((v2 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_27;
  }
LABEL_26:
  v13 = *((_DWORD *)a2 + 21);
  v3 |= 0x400u;
  *(_WORD *)(this + 100) = v3;
  *(_DWORD *)(this + 84) = v13;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x800) == 0)
  {
LABEL_15:
    if ((v2 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_28;
  }
LABEL_27:
  v14 = *((_DWORD *)a2 + 22);
  v3 |= 0x800u;
  *(_WORD *)(this + 100) = v3;
  *(_DWORD *)(this + 88) = v14;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x1000) == 0)
  {
LABEL_16:
    if ((v2 & 0x200) == 0)
      goto LABEL_17;
    goto LABEL_29;
  }
LABEL_28:
  v15 = *((_DWORD *)a2 + 23);
  v3 |= 0x1000u;
  *(_WORD *)(this + 100) = v3;
  *(_DWORD *)(this + 92) = v15;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x200) == 0)
  {
LABEL_17:
    if ((v2 & 0x2000) == 0)
      return this;
LABEL_30:
    v17 = *((_BYTE *)a2 + 96);
    *(_WORD *)(this + 100) = v3 | 0x2000;
    *(_BYTE *)(this + 96) = v17;
    return this;
  }
LABEL_29:
  v16 = *((_DWORD *)a2 + 20);
  v3 |= 0x200u;
  *(_WORD *)(this + 100) = v3;
  *(_DWORD *)(this + 80) = v16;
  if ((*((_WORD *)a2 + 50) & 0x2000) != 0)
    goto LABEL_30;
  return this;
}

CMMsl *CMMsl::Odometer::operator=(CMMsl *a1, const CMMsl::Odometer *a2)
{
  CMMsl::Odometer *v3;
  _BYTE v5[104];

  if (a1 != a2)
  {
    CMMsl::Odometer::Odometer((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::Odometer *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::Odometer *a2, CMMsl::Odometer *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  int v13;
  int v14;
  int v15;
  int v16;

  v3 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v3;
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v8;
  v9 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v9;
  v10 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v10;
  v11 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v11;
  result = *((double *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((double *)a2 + 9) = result;
  v13 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v13;
  v14 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v14;
  v15 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v15;
  v16 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v16;
  LOBYTE(v16) = *((_BYTE *)this + 96);
  *((_BYTE *)this + 96) = *((_BYTE *)a2 + 96);
  *((_BYTE *)a2 + 96) = v16;
  return result;
}

double CMMsl::Odometer::Odometer(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100352EF0;
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a2 + 100) = 0;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  result = *(double *)(a2 + 72);
  *(double *)(a1 + 72) = result;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  return result;
}

CMMsl *CMMsl::Odometer::operator=(CMMsl *this, uint64_t a2, CMMsl::Odometer *a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  void (**v8)(CMMsl::Odometer *__hidden);
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  char v15;
  int v16;

  if (this != (CMMsl *)a2)
  {
    v8 = off_100352EF0;
    v16 = *(_DWORD *)(a2 + 100);
    *(_DWORD *)(a2 + 100) = 0;
    v4 = *(_OWORD *)(a2 + 8);
    v5 = *(_OWORD *)(a2 + 56);
    v11 = *(_OWORD *)(a2 + 40);
    v12 = v5;
    v6 = *(_OWORD *)(a2 + 24);
    v9 = v4;
    v10 = v6;
    v13 = *(_QWORD *)(a2 + 72);
    v14 = *(_OWORD *)(a2 + 80);
    v15 = *(_BYTE *)(a2 + 96);
    CMMsl::swap(this, (CMMsl::Odometer *)&v8, a3);
    PB::Base::~Base((PB::Base *)&v8);
  }
  return this;
}

uint64_t CMMsl::Odometer::formatText(CMMsl::Odometer *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 50);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "accuracy", *((double *)this + 1));
    v5 = *((_WORD *)this + 50);
    if ((v5 & 0x200) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((*((_WORD *)this + 50) & 0x200) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "batchedLocationFixType", *((_DWORD *)this + 20));
  v5 = *((_WORD *)this + 50);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "distance", *((double *)this + 2));
  v5 = *((_WORD *)this + 50);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "gpsAltitude", *((double *)this + 3));
  v5 = *((_WORD *)this + 50);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "gpsSpeedAccuracy", *((double *)this + 4));
  v5 = *((_WORD *)this + 50);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "odometer", *((double *)this + 5));
  v5 = *((_WORD *)this + 50);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "originDevice", *((_DWORD *)this + 21));
  v5 = *((_WORD *)this + 50);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "quality", *((_DWORD *)this + 22));
  v5 = *((_WORD *)this + 50);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "rawSpeed", *((double *)this + 6));
  v5 = *((_WORD *)this + 50);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "speed", *((double *)this + 7));
  v5 = *((_WORD *)this + 50);
  if ((v5 & 0x80) == 0)
  {
LABEL_12:
    if ((v5 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 8));
  v5 = *((_WORD *)this + 50);
  if ((v5 & 0x100) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0)
      goto LABEL_14;
LABEL_29:
    PB::TextFormatter::format(a2, "trackRunOdometerHasBeenCorrected", *((_BYTE *)this + 96));
    if ((*((_WORD *)this + 50) & 0x1000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_15;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "timestampGps", *((double *)this + 9));
  v5 = *((_WORD *)this + 50);
  if ((v5 & 0x2000) != 0)
    goto LABEL_29;
LABEL_14:
  if ((v5 & 0x1000) != 0)
LABEL_15:
    PB::TextFormatter::format(a2, "type", *((_DWORD *)this + 23));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Odometer::readFrom(CMMsl::Odometer *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  int v45;
  BOOL v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 50) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_50;
              *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_112;
            case 2u:
              *((_WORD *)this + 50) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_50;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_112;
            case 3u:
              *((_WORD *)this + 50) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_50;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_112;
            case 4u:
              *((_WORD *)this + 50) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_50;
              *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_112;
            case 5u:
              *((_WORD *)this + 50) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_50;
              *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_112;
            case 6u:
              *((_WORD *)this + 50) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_50;
              *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_112;
            case 7u:
              *((_WORD *)this + 50) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_50;
              *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_112;
            case 8u:
              *((_WORD *)this + 50) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_50;
              *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_112;
            case 9u:
              *((_WORD *)this + 50) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_112:
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_50:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_133;
            case 0xAu:
              *((_WORD *)this + 50) |= 0x400u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_117;
                  }
                  v49 = v21++;
                  v50 = *(_BYTE *)(v22 + v49);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_116:
                    v2 = v49 + 1;
                    goto LABEL_117;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_116;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_117;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_117:
              *((_DWORD *)this + 21) = v25;
              goto LABEL_133;
            case 0xBu:
              *((_WORD *)this + 50) |= 0x800u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_122;
                  }
                  v53 = v27++;
                  v54 = *(_BYTE *)(v28 + v53);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_121:
                    v2 = v53 + 1;
                    goto LABEL_122;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_121;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_122;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_122:
              *((_DWORD *)this + 22) = v31;
              goto LABEL_133;
            case 0xCu:
              *((_WORD *)this + 50) |= 0x1000u;
              v33 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v55 = 0;
                v56 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_127;
                  }
                  v57 = v33++;
                  v58 = *(_BYTE *)(v34 + v57);
                  *((_QWORD *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0)
                    break;
                  v55 += 7;
                  v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_126:
                    v2 = v57 + 1;
                    goto LABEL_127;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v37) = 0;
                goto LABEL_126;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)a2 + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_127;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_127:
              *((_DWORD *)this + 23) = v37;
              goto LABEL_133;
            case 0xDu:
              *((_WORD *)this + 50) |= 0x200u;
              v39 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v40 = *(_QWORD *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_132;
                  }
                  v61 = v39++;
                  v62 = *(_BYTE *)(v40 + v61);
                  *((_QWORD *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_131:
                    v2 = v61 + 1;
                    goto LABEL_132;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v43) = 0;
                goto LABEL_131;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)a2 + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_132;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_132:
              *((_DWORD *)this + 20) = v43;
LABEL_133:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xEu:
              *((_WORD *)this + 50) |= 0x2000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v46 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v45 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v46 = v45 != 0;
              }
              *((_BYTE *)this + 96) = v46;
              goto LABEL_133;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_133;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::Odometer::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 100);
  if ((v4 & 0x80) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 64), 1u);
    v4 = *(_WORD *)(v3 + 100);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 3u);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 4u);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 5u);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 6u);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 7u);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 8u);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 9u);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 84), 0xAu);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 88), 0xBu);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 92), 0xCu);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x200) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000) == 0)
      return this;
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 96), 0xEu);
  }
LABEL_28:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 80), 0xDu);
  if ((*(_WORD *)(v3 + 100) & 0x2000) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 96), 0xEu);
  return this;
}

uint64_t CMMsl::Odometer::hash_value(CMMsl::Odometer *this)
{
  __int16 v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *((_WORD *)this + 50);
  if ((v1 & 0x80) == 0)
  {
    v2 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_3;
LABEL_35:
    v3 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_6;
LABEL_36:
    v4 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_9;
LABEL_37:
    v5 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_12;
LABEL_38:
    v6 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_15;
LABEL_39:
    v7 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_18;
LABEL_40:
    v8 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_21;
LABEL_41:
    v9 = 0.0;
    if ((*((_WORD *)this + 50) & 0x100) != 0)
      goto LABEL_24;
LABEL_42:
    v10 = 0.0;
    if ((*((_WORD *)this + 50) & 0x400) != 0)
      goto LABEL_27;
    goto LABEL_43;
  }
  v2 = *((double *)this + 8);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_35;
LABEL_3:
  v3 = *((double *)this + 2);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_36;
LABEL_6:
  v4 = *((double *)this + 1);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_37;
LABEL_9:
  v5 = *((double *)this + 3);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 0x40) == 0)
    goto LABEL_38;
LABEL_12:
  v6 = *((double *)this + 7);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_39;
LABEL_15:
  v7 = *((double *)this + 6);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_40;
LABEL_18:
  v8 = *((double *)this + 5);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_41;
LABEL_21:
  v9 = *((double *)this + 4);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((*((_WORD *)this + 50) & 0x100) == 0)
    goto LABEL_42;
LABEL_24:
  v10 = *((double *)this + 9);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((*((_WORD *)this + 50) & 0x400) != 0)
  {
LABEL_27:
    v11 = *((unsigned int *)this + 21);
    if ((*((_WORD *)this + 50) & 0x800) != 0)
      goto LABEL_28;
    goto LABEL_44;
  }
LABEL_43:
  v11 = 0;
  if ((*((_WORD *)this + 50) & 0x800) != 0)
  {
LABEL_28:
    v12 = *((unsigned int *)this + 22);
    if ((*((_WORD *)this + 50) & 0x1000) != 0)
      goto LABEL_29;
    goto LABEL_45;
  }
LABEL_44:
  v12 = 0;
  if ((*((_WORD *)this + 50) & 0x1000) != 0)
  {
LABEL_29:
    v13 = *((unsigned int *)this + 23);
    if ((*((_WORD *)this + 50) & 0x200) != 0)
      goto LABEL_30;
LABEL_46:
    v14 = 0;
    if ((*((_WORD *)this + 50) & 0x2000) != 0)
      goto LABEL_31;
LABEL_47:
    v15 = 0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15;
  }
LABEL_45:
  v13 = 0;
  if ((*((_WORD *)this + 50) & 0x200) == 0)
    goto LABEL_46;
LABEL_30:
  v14 = *((unsigned int *)this + 20);
  if ((*((_WORD *)this + 50) & 0x2000) == 0)
    goto LABEL_47;
LABEL_31:
  v15 = *((unsigned __int8 *)this + 96);
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15;
}

void CMMsl::OdometerWithAltitude::~OdometerWithAltitude(CMMsl::OdometerWithAltitude *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_100352F28;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_100352F28;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_100352F28;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::OdometerWithAltitude::OdometerWithAltitude(uint64_t this, const CMMsl::OdometerWithAltitude *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)this = off_100352F28;
  *(_QWORD *)(this + 72) = 0;
  *(_DWORD *)(this + 80) = 0;
  if (*((_QWORD *)a2 + 9))
    operator new();
  v2 = *((_BYTE *)a2 + 80);
  if ((v2 & 4) != 0)
  {
    v4 = *((_QWORD *)a2 + 3);
    *(_BYTE *)(this + 80) |= 4u;
    *(_QWORD *)(this + 24) = v4;
    v2 = *((_BYTE *)a2 + 80);
    if ((v2 & 8) == 0)
    {
LABEL_5:
      if ((v2 & 0x40) == 0)
        goto LABEL_6;
      goto LABEL_15;
    }
  }
  else if ((*((_BYTE *)a2 + 80) & 8) == 0)
  {
    goto LABEL_5;
  }
  v5 = *((_QWORD *)a2 + 4);
  *(_BYTE *)(this + 80) |= 8u;
  *(_QWORD *)(this + 32) = v5;
  v2 = *((_BYTE *)a2 + 80);
  if ((v2 & 0x40) == 0)
  {
LABEL_6:
    if ((v2 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  v6 = *((_QWORD *)a2 + 7);
  *(_BYTE *)(this + 80) |= 0x40u;
  *(_QWORD *)(this + 56) = v6;
  v2 = *((_BYTE *)a2 + 80);
  if ((v2 & 0x80) == 0)
  {
LABEL_7:
    if ((v2 & 2) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  v7 = *((_QWORD *)a2 + 8);
  *(_BYTE *)(this + 80) |= 0x80u;
  *(_QWORD *)(this + 64) = v7;
  v2 = *((_BYTE *)a2 + 80);
  if ((v2 & 2) == 0)
  {
LABEL_8:
    if ((v2 & 1) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  v8 = *((_QWORD *)a2 + 2);
  *(_BYTE *)(this + 80) |= 2u;
  *(_QWORD *)(this + 16) = v8;
  v2 = *((_BYTE *)a2 + 80);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  v9 = *((_QWORD *)a2 + 1);
  *(_BYTE *)(this + 80) |= 1u;
  *(_QWORD *)(this + 8) = v9;
  v2 = *((_BYTE *)a2 + 80);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x10) == 0)
      return this;
    goto LABEL_11;
  }
LABEL_19:
  v10 = *((_QWORD *)a2 + 6);
  *(_BYTE *)(this + 80) |= 0x20u;
  *(_QWORD *)(this + 48) = v10;
  if ((*((_BYTE *)a2 + 80) & 0x10) == 0)
    return this;
LABEL_11:
  v3 = *((_QWORD *)a2 + 5);
  *(_BYTE *)(this + 80) |= 0x10u;
  *(_QWORD *)(this + 40) = v3;
  return this;
}

uint64_t CMMsl::OdometerWithAltitude::operator=(uint64_t a1, const CMMsl::OdometerWithAltitude *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  void (**v10)(CMMsl::OdometerWithAltitude *__hidden);
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int v16;

  if ((const CMMsl::OdometerWithAltitude *)a1 != a2)
  {
    CMMsl::OdometerWithAltitude::OdometerWithAltitude((uint64_t)&v10, a2);
    v3 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a1 + 80) = v16;
    v16 = v3;
    v4 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v15;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    v6 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v14;
    v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    v11 = v7;
    v12 = v5;
    v8 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    v13 = v8;
    v14 = v6;
    v10 = off_100352F28;
    v15 = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::OdometerWithAltitude *a2, CMMsl::OdometerWithAltitude *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  v3 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v3;
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v4;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  v7 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v7;
  v8 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v8;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v9;
  v10 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v10;
  v11 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v11;
  result = *((double *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((double *)a2 + 5) = result;
  return result;
}

uint64_t CMMsl::OdometerWithAltitude::OdometerWithAltitude(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_100352F28;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = 0;
  v4 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  v5 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t CMMsl::OdometerWithAltitude::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  void (**v10)(CMMsl::OdometerWithAltitude *__hidden);
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int v16;

  if (a1 != a2)
  {
    CMMsl::OdometerWithAltitude::OdometerWithAltitude((uint64_t)&v10, a2);
    v3 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a1 + 80) = v16;
    v16 = v3;
    v4 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v15;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    v6 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v14;
    v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    v11 = v7;
    v12 = v5;
    v8 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    v13 = v8;
    v14 = v6;
    v10 = off_100352F28;
    v15 = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::OdometerWithAltitude::formatText(CMMsl::OdometerWithAltitude *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 80);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "gpsCourseAccuracy", *((double *)this + 1));
    v5 = *((_BYTE *)this + 80);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((*((_BYTE *)this + 80) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "gpsCourseRadians", *((double *)this + 2));
  v5 = *((_BYTE *)this + 80);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "groundAltitude", *((double *)this + 3));
  v5 = *((_BYTE *)this + 80);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "groundAltitudeUncertainty", *((double *)this + 4));
  v5 = *((_BYTE *)this + 80);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "maxAbsSlope", *((double *)this + 5));
  v5 = *((_BYTE *)this + 80);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
LABEL_18:
    PB::TextFormatter::format(a2, "smoothedGPSAltitude", *((double *)this + 7));
    if ((*((_BYTE *)this + 80) & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "slope", *((double *)this + 6));
  v5 = *((_BYTE *)this + 80);
  if ((v5 & 0x40) != 0)
    goto LABEL_18;
LABEL_8:
  if ((v5 & 0x80) == 0)
    goto LABEL_9;
LABEL_19:
  PB::TextFormatter::format(a2, "smoothedGPSAltitudeUncertainty", *((double *)this + 8));
LABEL_9:
  v6 = *((_QWORD *)this + 9);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::OdometerWithAltitude::readFrom(CMMsl::OdometerWithAltitude *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          if (v10++ > 8)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              operator new();
            case 2u:
              *((_BYTE *)this + 80) |= 4u;
              v21 = *((_QWORD *)a2 + 1);
              if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_48;
              *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v21);
              goto LABEL_50;
            case 3u:
              *((_BYTE *)this + 80) |= 8u;
              v22 = *((_QWORD *)a2 + 1);
              if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_48;
              *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v22);
              goto LABEL_50;
            case 4u:
              *((_BYTE *)this + 80) |= 0x40u;
              v23 = *((_QWORD *)a2 + 1);
              if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_48;
              *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v23);
              goto LABEL_50;
            case 5u:
              *((_BYTE *)this + 80) |= 0x80u;
              v24 = *((_QWORD *)a2 + 1);
              if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_48;
              *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v24);
              goto LABEL_50;
            case 6u:
              *((_BYTE *)this + 80) |= 2u;
              v25 = *((_QWORD *)a2 + 1);
              if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_48;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v25);
              goto LABEL_50;
            case 7u:
              *((_BYTE *)this + 80) |= 1u;
              v26 = *((_QWORD *)a2 + 1);
              if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_48;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v26);
              goto LABEL_50;
            case 8u:
              *((_BYTE *)this + 80) |= 0x20u;
              v27 = *((_QWORD *)a2 + 1);
              if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_48;
              *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v27);
              goto LABEL_50;
            case 9u:
              *((_BYTE *)this + 80) |= 0x10u;
              v28 = *((_QWORD *)a2 + 1);
              if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v28);
LABEL_50:
                *((_QWORD *)a2 + 1) += 8;
              }
              else
              {
LABEL_48:
                *((_BYTE *)a2 + 24) = 1;
              }
LABEL_51:
              v2 = *((_QWORD *)a2 + 1);
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || *((_BYTE *)a2 + 24))
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              goto LABEL_51;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::OdometerWithAltitude::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  char v5;

  v3 = this;
  v4 = *(const PB::Base **)(this + 72);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  v5 = *(_BYTE *)(v3 + 80);
  if ((v5 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 24), 2u);
    v5 = *(_BYTE *)(v3 + 80);
    if ((v5 & 8) == 0)
    {
LABEL_5:
      if ((v5 & 0x40) == 0)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else if ((*(_BYTE *)(v3 + 80) & 8) == 0)
  {
    goto LABEL_5;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 3u);
  v5 = *(_BYTE *)(v3 + 80);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 4u);
  v5 = *(_BYTE *)(v3 + 80);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 2) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 5u);
  v5 = *(_BYTE *)(v3 + 80);
  if ((v5 & 2) == 0)
  {
LABEL_8:
    if ((v5 & 1) == 0)
      goto LABEL_9;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 6u);
  v5 = *(_BYTE *)(v3 + 80);
  if ((v5 & 1) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 7u);
  v5 = *(_BYTE *)(v3 + 80);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x10) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 40), 9u);
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 8u);
  if ((*(_BYTE *)(v3 + 80) & 0x10) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 40), 9u);
  return this;
}

unint64_t CMMsl::OdometerWithAltitude::hash_value(CMMsl::OdometerWithAltitude *this)
{
  unint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;

  v2 = *((_QWORD *)this + 9);
  if (v2)
    v2 = CMMsl::Odometer::hash_value((CMMsl::Odometer *)v2);
  if ((*((_BYTE *)this + 80) & 4) == 0)
  {
    v3 = 0.0;
    if ((*((_BYTE *)this + 80) & 8) != 0)
      goto LABEL_5;
LABEL_29:
    v4 = 0.0;
    if ((*((_BYTE *)this + 80) & 0x40) != 0)
      goto LABEL_8;
LABEL_30:
    v5 = 0.0;
    if ((*((_BYTE *)this + 80) & 0x80) != 0)
      goto LABEL_11;
LABEL_31:
    v6 = 0.0;
    if ((*((_BYTE *)this + 80) & 2) != 0)
      goto LABEL_14;
LABEL_32:
    v7 = 0.0;
    if ((*((_BYTE *)this + 80) & 1) != 0)
      goto LABEL_17;
LABEL_33:
    v8 = 0.0;
    if ((*((_BYTE *)this + 80) & 0x20) != 0)
      goto LABEL_20;
    goto LABEL_34;
  }
  v3 = *((double *)this + 3);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((*((_BYTE *)this + 80) & 8) == 0)
    goto LABEL_29;
LABEL_5:
  v4 = *((double *)this + 4);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((*((_BYTE *)this + 80) & 0x40) == 0)
    goto LABEL_30;
LABEL_8:
  v5 = *((double *)this + 7);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((*((_BYTE *)this + 80) & 0x80) == 0)
    goto LABEL_31;
LABEL_11:
  v6 = *((double *)this + 8);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((*((_BYTE *)this + 80) & 2) == 0)
    goto LABEL_32;
LABEL_14:
  v7 = *((double *)this + 2);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((*((_BYTE *)this + 80) & 1) == 0)
    goto LABEL_33;
LABEL_17:
  v8 = *((double *)this + 1);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((*((_BYTE *)this + 80) & 0x20) != 0)
  {
LABEL_20:
    v9 = *((double *)this + 6);
    if (v9 == 0.0)
      v9 = 0.0;
    if ((*((_BYTE *)this + 80) & 0x10) != 0)
      goto LABEL_23;
LABEL_35:
    v10 = 0.0;
    return *(_QWORD *)&v3 ^ v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10;
  }
LABEL_34:
  v9 = 0.0;
  if ((*((_BYTE *)this + 80) & 0x10) == 0)
    goto LABEL_35;
LABEL_23:
  v10 = *((double *)this + 5);
  if (v10 == 0.0)
    v10 = 0.0;
  return *(_QWORD *)&v3 ^ v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10;
}

uint64_t CMMsl::OdometerWithAltitude::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 72))
    operator new();
  return this;
}

void CMMsl::OnsetHeartRateData::~OnsetHeartRateData(CMMsl::OnsetHeartRateData *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::OnsetHeartRateData::OnsetHeartRateData(uint64_t this, const CMMsl::OnsetHeartRateData *a2)
{
  __int16 v2;
  __int16 v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;

  *(_QWORD *)this = off_100352F60;
  *(_DWORD *)(this + 68) = 0;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x40) != 0)
  {
    v4 = *((_DWORD *)a2 + 13);
    v3 = 64;
    *(_WORD *)(this + 68) = 64;
    *(_DWORD *)(this + 52) = v4;
    v2 = *((_WORD *)a2 + 34);
    if ((v2 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 14);
    v3 |= 0x80u;
    *(_WORD *)(this + 68) = v3;
    *(_DWORD *)(this + 56) = v5;
    v2 = *((_WORD *)a2 + 34);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *(_WORD *)(this + 68) = v3;
    *(_QWORD *)(this + 16) = v6;
    v2 = *((_WORD *)a2 + 34);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0)
        goto LABEL_9;
      goto LABEL_17;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 68) = v3;
  *(_QWORD *)(this + 8) = v7;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_18;
  }
LABEL_17:
  v8 = *((_BYTE *)a2 + 64);
  v3 |= 0x200u;
  *(_WORD *)(this + 68) = v3;
  *(_BYTE *)(this + 64) = v8;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0)
      goto LABEL_11;
    goto LABEL_19;
  }
LABEL_18:
  v9 = *((_QWORD *)a2 + 5);
  v3 |= 0x10u;
  *(_WORD *)(this + 68) = v3;
  *(_QWORD *)(this + 40) = v9;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 8) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0)
      goto LABEL_12;
    goto LABEL_20;
  }
LABEL_19:
  v10 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 68) = v3;
  *(_QWORD *)(this + 32) = v10;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_21;
  }
LABEL_20:
  v11 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *(_WORD *)(this + 68) = v3;
  *(_QWORD *)(this + 24) = v11;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x100) == 0)
  {
LABEL_13:
    if ((v2 & 0x20) == 0)
      return this;
LABEL_22:
    v13 = *((_DWORD *)a2 + 12);
    *(_WORD *)(this + 68) = v3 | 0x20;
    *(_DWORD *)(this + 48) = v13;
    return this;
  }
LABEL_21:
  v12 = *((_DWORD *)a2 + 15);
  v3 |= 0x100u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 60) = v12;
  if ((*((_WORD *)a2 + 34) & 0x20) != 0)
    goto LABEL_22;
  return this;
}

uint64_t CMMsl::OnsetHeartRateData::operator=(uint64_t a1, const CMMsl::OnsetHeartRateData *a2)
{
  int v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _BYTE v9[8];
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  char v14;
  int v15;

  if ((const CMMsl::OnsetHeartRateData *)a1 != a2)
  {
    CMMsl::OnsetHeartRateData::OnsetHeartRateData((uint64_t)v9, a2);
    v3 = *(_DWORD *)(a1 + 68);
    *(_DWORD *)(a1 + 68) = v15;
    v15 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    LOBYTE(v3) = *(_BYTE *)(a1 + 64);
    *(_BYTE *)(a1 + 64) = v14;
    v14 = v3;
    v5 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v12;
    v12 = v5;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v10 = v4;
    v11 = v6;
    v7 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a1 + 48) = v13;
    v13 = v7;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::OnsetHeartRateData *a2, CMMsl::OnsetHeartRateData *a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  int v11;
  int v12;

  v3 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v3;
  v4 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  v5 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v7;
  LOBYTE(v5) = *((_BYTE *)this + 64);
  *((_BYTE *)this + 64) = *((_BYTE *)a2 + 64);
  *((_BYTE *)a2 + 64) = v5;
  v8 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v9;
  result = *((double *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((double *)a2 + 3) = result;
  v11 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v11;
  v12 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v12;
  return result;
}

double CMMsl::OnsetHeartRateData::OnsetHeartRateData(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100352F60;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a2 + 68) = 0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return result;
}

uint64_t CMMsl::OnsetHeartRateData::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  void (**v14)(CMMsl::OnsetHeartRateData *__hidden);
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  char v19;
  int v20;

  if (a1 != a2)
  {
    v14 = off_100352F60;
    v3 = *(_DWORD *)(a2 + 68);
    *(_DWORD *)(a2 + 68) = 0;
    v4 = *(_BYTE *)(a2 + 64);
    v5 = *(_QWORD *)(a2 + 40);
    v20 = *(_DWORD *)(a1 + 68);
    v6 = *(_OWORD *)(a1 + 8);
    v7 = *(_OWORD *)(a2 + 8);
    v8 = *(_BYTE *)(a1 + 64);
    *(_BYTE *)(a1 + 64) = v4;
    v19 = v8;
    v17 = *(_QWORD *)(a1 + 40);
    v9 = *(_OWORD *)(a1 + 24);
    v10 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 40) = v5;
    *(_OWORD *)(a1 + 24) = v10;
    v15 = v6;
    v16 = v9;
    v11 = *(_OWORD *)(a1 + 48);
    v12 = *(_OWORD *)(a2 + 48);
    *(_DWORD *)(a1 + 68) = v3;
    *(_OWORD *)(a1 + 48) = v12;
    v18 = v11;
    PB::Base::~Base((PB::Base *)&v14);
  }
  return a1;
}

uint64_t CMMsl::OnsetHeartRateData::formatText(CMMsl::OnsetHeartRateData *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 34);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "confidence", *((double *)this + 1));
    v5 = *((_WORD *)this + 34);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "context", *((_DWORD *)this + 12));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "dataSource", *((_DWORD *)this + 13));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 2) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "error", *((_BYTE *)this + 64));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 2) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "heartRate", *((double *)this + 2));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "interpolation", *((_DWORD *)this + 14));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 4) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "mode", *((_DWORD *)this + 15));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 4) == 0)
  {
LABEL_9:
    if ((v5 & 8) == 0)
      goto LABEL_10;
LABEL_21:
    PB::TextFormatter::format(a2, "startTime", *((double *)this + 4));
    if ((*((_WORD *)this + 34) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_11;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "sinceLastGood", *((double *)this + 3));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 8) != 0)
    goto LABEL_21;
LABEL_10:
  if ((v5 & 0x10) != 0)
LABEL_11:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 5));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::OnsetHeartRateData::readFrom(CMMsl::OnsetHeartRateData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 34) |= 0x40u;
              v20 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v21 = *(_QWORD *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_105;
                  }
                  v49 = v20++;
                  v50 = *(_BYTE *)(v21 + v49);
                  *((_QWORD *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_104;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v24) = 0;
LABEL_104:
                v2 = v49 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)a2 + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_105;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_105:
              *((_DWORD *)this + 13) = v24;
              goto LABEL_121;
            case 2u:
              *((_WORD *)this + 34) |= 0x80u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_110;
                  }
                  v53 = v27++;
                  v54 = *(_BYTE *)(v28 + v53);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_109:
                    v2 = v53 + 1;
                    goto LABEL_110;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_109;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_110;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_110:
              *((_DWORD *)this + 14) = v31;
              goto LABEL_121;
            case 3u:
              *((_WORD *)this + 34) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_54;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_100;
            case 4u:
              *((_WORD *)this + 34) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_54;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_100;
            case 5u:
              *((_WORD *)this + 34) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v34 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v34 = v33 != 0;
              }
              *((_BYTE *)this + 64) = v34;
              goto LABEL_121;
            case 6u:
              *((_WORD *)this + 34) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_54;
              *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_100;
            case 7u:
              *((_WORD *)this + 34) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_54;
              *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_100;
            case 8u:
              *((_WORD *)this + 34) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_100:
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_54:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_121;
            case 9u:
              *((_WORD *)this + 34) |= 0x100u;
              v35 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v36 = *(_QWORD *)a2;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                v55 = 0;
                v56 = 0;
                v39 = 0;
                if (v2 <= v35)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_115;
                  }
                  v57 = v35++;
                  v58 = *(_BYTE *)(v36 + v57);
                  *((_QWORD *)a2 + 1) = v35;
                  v39 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0)
                    break;
                  v55 += 7;
                  v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_114:
                    v2 = v57 + 1;
                    goto LABEL_115;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v39) = 0;
                goto LABEL_114;
              }
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v2 = v35 + 1;
                *((_QWORD *)a2 + 1) = v35 + 1;
                v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0)
                  goto LABEL_115;
                v37 += 7;
                v35 = v2;
                v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_115:
              *((_DWORD *)this + 15) = v39;
              goto LABEL_121;
            case 0xAu:
              *((_WORD *)this + 34) |= 0x20u;
              v41 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v42 = *(_QWORD *)a2;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v45 = 0;
                if (v2 <= v41)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_120;
                  }
                  v61 = v41++;
                  v62 = *(_BYTE *)(v42 + v61);
                  *((_QWORD *)a2 + 1) = v41;
                  v45 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_119:
                    v2 = v61 + 1;
                    goto LABEL_120;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v45) = 0;
                goto LABEL_119;
              }
              v43 = 0;
              v44 = 0;
              v45 = 0;
              do
              {
                v2 = v41 + 1;
                *((_QWORD *)a2 + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0)
                  goto LABEL_120;
                v43 += 7;
                v41 = v2;
                v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_120:
              *((_DWORD *)this + 12) = v45;
LABEL_121:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_121;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::OnsetHeartRateData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 68);
  if ((v4 & 0x40) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 52), 1u);
    v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 56), 2u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 4u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 64), 5u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 6u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 7u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 8u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 0xAu);
  }
LABEL_20:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 60), 9u);
  if ((*(_WORD *)(v3 + 68) & 0x20) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 0xAu);
  return this;
}

uint64_t CMMsl::OnsetHeartRateData::hash_value(CMMsl::OnsetHeartRateData *this)
{
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *((_WORD *)this + 34);
  if ((v1 & 0x40) != 0)
  {
    v2 = *((unsigned int *)this + 13);
    if ((v1 & 0x80) != 0)
    {
LABEL_3:
      v3 = *((unsigned int *)this + 14);
      if ((v1 & 2) != 0)
        goto LABEL_4;
LABEL_24:
      v4 = 0.0;
      if ((v1 & 1) != 0)
        goto LABEL_7;
LABEL_25:
      v5 = 0.0;
      if ((*((_WORD *)this + 34) & 0x200) != 0)
        goto LABEL_10;
      goto LABEL_26;
    }
  }
  else
  {
    v2 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_24;
LABEL_4:
  v4 = *((double *)this + 2);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_25;
LABEL_7:
  v5 = *((double *)this + 1);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((*((_WORD *)this + 34) & 0x200) != 0)
  {
LABEL_10:
    v6 = *((unsigned __int8 *)this + 64);
    if ((v1 & 0x10) != 0)
      goto LABEL_11;
LABEL_27:
    v7 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_14;
LABEL_28:
    v8 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_17;
LABEL_29:
    v9 = 0.0;
    if ((*((_WORD *)this + 34) & 0x100) != 0)
      goto LABEL_20;
LABEL_30:
    v10 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_21;
LABEL_31:
    v11 = 0;
    return v3 ^ v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ v10 ^ v11;
  }
LABEL_26:
  v6 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_27;
LABEL_11:
  v7 = *((double *)this + 5);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_28;
LABEL_14:
  v8 = *((double *)this + 4);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_29;
LABEL_17:
  v9 = *((double *)this + 3);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((*((_WORD *)this + 34) & 0x100) == 0)
    goto LABEL_30;
LABEL_20:
  v10 = *((unsigned int *)this + 15);
  if ((v1 & 0x20) == 0)
    goto LABEL_31;
LABEL_21:
  v11 = *((unsigned int *)this + 12);
  return v3 ^ v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ v10 ^ v11;
}

void CMMsl::Orientation::~Orientation(CMMsl::Orientation *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::Orientation::Orientation(uint64_t this, const CMMsl::Orientation *a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)this = off_100352F98;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::Orientation::operator=(uint64_t a1, uint64_t a2, double a3)
{
  int v3;
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;

  if (a1 != a2)
  {
    v11[0] = off_100352F98;
    HIDWORD(v12) = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      BYTE4(v12) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v3 = *(_DWORD *)(a2 + 16);
        BYTE4(v12) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = HIDWORD(v12);
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_QWORD *)(a1 + 16);
    *(double *)(a1 + 8) = a3;
    *(_DWORD *)(a1 + 16) = v3;
    *(_DWORD *)(a1 + 20) = v7;
    v11[1] = v8;
    v12 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::Orientation *a2, CMMsl::Orientation *a3)
{
  int v3;
  double result;
  int v5;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  return result;
}

double CMMsl::Orientation::Orientation(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100352F98;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100352F98;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::Orientation::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  if (a1 != a2)
  {
    v8[0] = off_100352F98;
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    v8[1] = v5;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::Orientation::formatText(CMMsl::Orientation *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "orientation", *((_DWORD *)this + 4));
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Orientation::readFrom(CMMsl::Orientation *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_47;
            }
            v30 = v21++;
            v31 = *(_BYTE *)(v22 + v30);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v25) = 0;
LABEL_46:
          v2 = v30 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v25;
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::Orientation::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 2u);
  return this;
}

uint64_t CMMsl::Orientation::hash_value(CMMsl::Orientation *this)
{
  double v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0;
    return v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((unsigned int *)this + 4);
  return v2 ^ *(_QWORD *)&v1;
}

void CMMsl::PDRAlgType::~PDRAlgType(CMMsl::PDRAlgType *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::PDRAlgType::PDRAlgType(uint64_t this, const CMMsl::PDRAlgType *a2)
{
  int v2;

  *(_QWORD *)this = off_100352FD0;
  *(_QWORD *)(this + 8) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::PDRAlgType::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v6[0] = off_100352FD0;
    v3 = *(unsigned __int8 *)(a2 + 12);
    v4 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = (v3 << 31 >> 31) & *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = v3 & 1;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v6[0] = off_100352FD0;
    v3 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 12) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PDRAlgType *a2, CMMsl::PDRAlgType *a3)
{
  int v3;
  int v4;

  v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  v4 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  return this;
}

uint64_t CMMsl::PDRAlgType::formatText(CMMsl::PDRAlgType *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 12) & 1) != 0)
    PB::TextFormatter::format(a2, "type", *((_DWORD *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PDRAlgType::readFrom(CMMsl::PDRAlgType *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 12) |= 1u;
        v20 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v3 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          else
            v2 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_43;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
LABEL_42:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)a2 + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 2) = v24;
      }
      else
      {
        result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PDRAlgType::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 12) & 1) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 8), 1u);
  return this;
}

uint64_t CMMsl::PDRAlgType::hash_value(CMMsl::PDRAlgType *this)
{
  if ((*((_BYTE *)this + 12) & 1) != 0)
    return *((int *)this + 2);
  else
    return 0;
}

void CMMsl::PDRDOTEstimatorState::~PDRDOTEstimatorState(CMMsl::PDRDOTEstimatorState *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::PDRDOTEstimatorState::PDRDOTEstimatorState(CMMsl::PDRDOTEstimatorState *this, const CMMsl::PDRDOTEstimatorState *a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)this = off_100353008;
  *((_DWORD *)this + 8) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 32) = 1;
    *((double *)this + 1) = result;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *((_BYTE *)this + 32) = v3;
    *((_DWORD *)this + 6) = LODWORD(result);
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0)
      return result;
LABEL_10:
    result = *((double *)a2 + 2);
    *((_BYTE *)this + 32) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
  LODWORD(result) = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((_BYTE *)this + 32) = v3;
  *((_DWORD *)this + 7) = LODWORD(result);
  if ((*((_BYTE *)a2 + 32) & 2) != 0)
    goto LABEL_10;
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorState::operator=(uint64_t a1, const CMMsl::PDRDOTEstimatorState *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  uint64_t v9;
  int v10;

  if ((const CMMsl::PDRDOTEstimatorState *)a1 != a2)
  {
    CMMsl::PDRDOTEstimatorState::PDRDOTEstimatorState((CMMsl::PDRDOTEstimatorState *)v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRDOTEstimatorState *a2, CMMsl::PDRDOTEstimatorState *a3)
{
  int v3;
  uint64_t v4;
  double result;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::PDRDOTEstimatorState::PDRDOTEstimatorState(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100353008;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100353008;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorState::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  void (**v8)(CMMsl::PDRDOTEstimatorState *__hidden);
  __int128 v9;
  uint64_t v10;
  int v11;

  if (a1 != a2)
  {
    v8 = off_100353008;
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v11 = *(_DWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    v9 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::PDRDOTEstimatorState::formatText(CMMsl::PDRDOTEstimatorState *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "dot", *((float *)this + 6));
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
      if ((*((_BYTE *)this + 32) & 2) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "dotUnc", *((float *)this + 7));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PDRDOTEstimatorState::readFrom(CMMsl::PDRDOTEstimatorState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 32) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_36;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_38;
        case 2u:
          *((_BYTE *)this + 32) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_36;
          *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_33;
        case 3u:
          *((_BYTE *)this + 32) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_36;
          *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_33:
          v2 = *((_QWORD *)a2 + 1) + 4;
          goto LABEL_39;
        case 4u:
          *((_BYTE *)this + 32) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_38:
            v2 = *((_QWORD *)a2 + 1) + 8;
LABEL_39:
            *((_QWORD *)a2 + 1) = v2;
          }
          else
          {
LABEL_36:
            *((_BYTE *)a2 + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PDRDOTEstimatorState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 16), 4u);
  }
LABEL_8:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 3u);
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16), 4u);
  return this;
}

uint64_t CMMsl::PDRDOTEstimatorState::hash_value(CMMsl::PDRDOTEstimatorState *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  double v6;

  if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_3;
LABEL_15:
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 32) & 4) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((float *)this + 6);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 32) & 8) != 0)
  {
LABEL_6:
    v4 = *((float *)this + 7);
    v5 = LODWORD(v4);
    if (v4 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 32) & 2) != 0)
      goto LABEL_9;
LABEL_17:
    v6 = 0.0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ *(_QWORD *)&v6;
  }
LABEL_16:
  v5 = 0;
  if ((*((_BYTE *)this + 32) & 2) == 0)
    goto LABEL_17;
LABEL_9:
  v6 = *((double *)this + 2);
  if (v6 == 0.0)
    v6 = 0.0;
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ *(_QWORD *)&v6;
}

void CMMsl::PDRDOTEstimatorStateArmSwing::~PDRDOTEstimatorStateArmSwing(CMMsl::PDRDOTEstimatorStateArmSwing *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::PDRDOTEstimatorStateArmSwing::PDRDOTEstimatorStateArmSwing(CMMsl::PDRDOTEstimatorStateArmSwing *this, const CMMsl::PDRDOTEstimatorStateArmSwing *a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)this = off_100353040;
  *((_DWORD *)this + 8) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 32) = 1;
    *((double *)this + 1) = result;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *((_BYTE *)this + 32) = v3;
    *((_DWORD *)this + 6) = LODWORD(result);
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0)
      return result;
LABEL_10:
    result = *((double *)a2 + 2);
    *((_BYTE *)this + 32) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
  LODWORD(result) = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((_BYTE *)this + 32) = v3;
  *((_DWORD *)this + 7) = LODWORD(result);
  if ((*((_BYTE *)a2 + 32) & 2) != 0)
    goto LABEL_10;
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorStateArmSwing::operator=(uint64_t a1, const CMMsl::PDRDOTEstimatorStateArmSwing *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  uint64_t v9;
  int v10;

  if ((const CMMsl::PDRDOTEstimatorStateArmSwing *)a1 != a2)
  {
    CMMsl::PDRDOTEstimatorStateArmSwing::PDRDOTEstimatorStateArmSwing((CMMsl::PDRDOTEstimatorStateArmSwing *)v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRDOTEstimatorStateArmSwing *a2, CMMsl::PDRDOTEstimatorStateArmSwing *a3)
{
  int v3;
  uint64_t v4;
  double result;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::PDRDOTEstimatorStateArmSwing::PDRDOTEstimatorStateArmSwing(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100353040;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100353040;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorStateArmSwing::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  void (**v8)(CMMsl::PDRDOTEstimatorStateArmSwing *__hidden);
  __int128 v9;
  uint64_t v10;
  int v11;

  if (a1 != a2)
  {
    v8 = off_100353040;
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v11 = *(_DWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    v9 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::PDRDOTEstimatorStateArmSwing::formatText(CMMsl::PDRDOTEstimatorStateArmSwing *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "dot", *((float *)this + 6));
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
      if ((*((_BYTE *)this + 32) & 2) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "dotUnc", *((float *)this + 7));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PDRDOTEstimatorStateArmSwing::readFrom(CMMsl::PDRDOTEstimatorStateArmSwing *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 32) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_36;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_38;
        case 2u:
          *((_BYTE *)this + 32) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_36;
          *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_33;
        case 3u:
          *((_BYTE *)this + 32) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_36;
          *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_33:
          v2 = *((_QWORD *)a2 + 1) + 4;
          goto LABEL_39;
        case 4u:
          *((_BYTE *)this + 32) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_38:
            v2 = *((_QWORD *)a2 + 1) + 8;
LABEL_39:
            *((_QWORD *)a2 + 1) = v2;
          }
          else
          {
LABEL_36:
            *((_BYTE *)a2 + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PDRDOTEstimatorStateArmSwing::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 16), 4u);
  }
LABEL_8:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 3u);
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16), 4u);
  return this;
}

uint64_t CMMsl::PDRDOTEstimatorStateArmSwing::hash_value(CMMsl::PDRDOTEstimatorStateArmSwing *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  double v6;

  if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_3;
LABEL_15:
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 32) & 4) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((float *)this + 6);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 32) & 8) != 0)
  {
LABEL_6:
    v4 = *((float *)this + 7);
    v5 = LODWORD(v4);
    if (v4 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 32) & 2) != 0)
      goto LABEL_9;
LABEL_17:
    v6 = 0.0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ *(_QWORD *)&v6;
  }
LABEL_16:
  v5 = 0;
  if ((*((_BYTE *)this + 32) & 2) == 0)
    goto LABEL_17;
LABEL_9:
  v6 = *((double *)this + 2);
  if (v6 == 0.0)
    v6 = 0.0;
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ *(_QWORD *)&v6;
}

void CMMsl::PDRDOTEstimatorStateBody::~PDRDOTEstimatorStateBody(CMMsl::PDRDOTEstimatorStateBody *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::PDRDOTEstimatorStateBody::PDRDOTEstimatorStateBody(CMMsl::PDRDOTEstimatorStateBody *this, const CMMsl::PDRDOTEstimatorStateBody *a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)this = off_100353078;
  *((_DWORD *)this + 8) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 32) = 1;
    *((double *)this + 1) = result;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *((_BYTE *)this + 32) = v3;
    *((_DWORD *)this + 6) = LODWORD(result);
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0)
      return result;
LABEL_10:
    result = *((double *)a2 + 2);
    *((_BYTE *)this + 32) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
  LODWORD(result) = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((_BYTE *)this + 32) = v3;
  *((_DWORD *)this + 7) = LODWORD(result);
  if ((*((_BYTE *)a2 + 32) & 2) != 0)
    goto LABEL_10;
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorStateBody::operator=(uint64_t a1, const CMMsl::PDRDOTEstimatorStateBody *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  uint64_t v9;
  int v10;

  if ((const CMMsl::PDRDOTEstimatorStateBody *)a1 != a2)
  {
    CMMsl::PDRDOTEstimatorStateBody::PDRDOTEstimatorStateBody((CMMsl::PDRDOTEstimatorStateBody *)v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRDOTEstimatorStateBody *a2, CMMsl::PDRDOTEstimatorStateBody *a3)
{
  int v3;
  uint64_t v4;
  double result;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::PDRDOTEstimatorStateBody::PDRDOTEstimatorStateBody(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100353078;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100353078;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorStateBody::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  void (**v8)(CMMsl::PDRDOTEstimatorStateBody *__hidden);
  __int128 v9;
  uint64_t v10;
  int v11;

  if (a1 != a2)
  {
    v8 = off_100353078;
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v11 = *(_DWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    v9 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::PDRDOTEstimatorStateBody::formatText(CMMsl::PDRDOTEstimatorStateBody *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "dot", *((float *)this + 6));
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
      if ((*((_BYTE *)this + 32) & 2) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "dotUnc", *((float *)this + 7));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PDRDOTEstimatorStateBody::readFrom(CMMsl::PDRDOTEstimatorStateBody *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 32) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_36;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_38;
        case 2u:
          *((_BYTE *)this + 32) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_36;
          *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_33;
        case 3u:
          *((_BYTE *)this + 32) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_36;
          *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_33:
          v2 = *((_QWORD *)a2 + 1) + 4;
          goto LABEL_39;
        case 4u:
          *((_BYTE *)this + 32) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_38:
            v2 = *((_QWORD *)a2 + 1) + 8;
LABEL_39:
            *((_QWORD *)a2 + 1) = v2;
          }
          else
          {
LABEL_36:
            *((_BYTE *)a2 + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PDRDOTEstimatorStateBody::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 16), 4u);
  }
LABEL_8:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 3u);
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16), 4u);
  return this;
}

uint64_t CMMsl::PDRDOTEstimatorStateBody::hash_value(CMMsl::PDRDOTEstimatorStateBody *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  double v6;

  if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_3;
LABEL_15:
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 32) & 4) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((float *)this + 6);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 32) & 8) != 0)
  {
LABEL_6:
    v4 = *((float *)this + 7);
    v5 = LODWORD(v4);
    if (v4 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 32) & 2) != 0)
      goto LABEL_9;
LABEL_17:
    v6 = 0.0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ *(_QWORD *)&v6;
  }
LABEL_16:
  v5 = 0;
  if ((*((_BYTE *)this + 32) & 2) == 0)
    goto LABEL_17;
LABEL_9:
  v6 = *((double *)this + 2);
  if (v6 == 0.0)
    v6 = 0.0;
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ *(_QWORD *)&v6;
}

void CMMsl::PDRDOTEstimatorStateBodyDebug::~PDRDOTEstimatorStateBodyDebug(CMMsl::PDRDOTEstimatorStateBodyDebug *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_1003530B0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::PDRDOTEstimatorStateBodyDebug::~PDRDOTEstimatorStateBodyDebug(this);
  operator delete();
}

CMMsl::PDRDOTEstimatorStateBodyDebug *CMMsl::PDRDOTEstimatorStateBodyDebug::PDRDOTEstimatorStateBodyDebug(CMMsl::PDRDOTEstimatorStateBodyDebug *this, const CMMsl::PDRDOTEstimatorStateBodyDebug *a2)
{
  char *v4;
  uint64_t v5;
  char v6;
  char v7;
  int v9;
  char v10;

  *(_QWORD *)this = off_1003530B0;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *((_DWORD *)this + 18) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if ((*((_BYTE *)a2 + 72) & 1) != 0)
  {
    v5 = *((_QWORD *)a2 + 7);
    *((_BYTE *)this + 72) = 1;
    *((_QWORD *)this + 7) = v5;
  }
  if (this != a2)
  {
    sub_100020CE4(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
    sub_100020CE4((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
  }
  v6 = *((_BYTE *)a2 + 72);
  if ((v6 & 2) == 0)
  {
    if ((*((_BYTE *)a2 + 72) & 8) == 0)
      goto LABEL_7;
LABEL_11:
    v10 = *((_BYTE *)a2 + 69);
    *((_BYTE *)this + 72) |= 8u;
    *((_BYTE *)this + 69) = v10;
    if ((*((_BYTE *)a2 + 72) & 4) == 0)
      return this;
    goto LABEL_8;
  }
  v9 = *((_DWORD *)a2 + 16);
  *((_BYTE *)this + 72) |= 2u;
  *((_DWORD *)this + 16) = v9;
  v6 = *((_BYTE *)a2 + 72);
  if ((v6 & 8) != 0)
    goto LABEL_11;
LABEL_7:
  if ((v6 & 4) != 0)
  {
LABEL_8:
    v7 = *((_BYTE *)a2 + 68);
    *((_BYTE *)this + 72) |= 4u;
    *((_BYTE *)this + 68) = v7;
  }
  return this;
}

uint64_t CMMsl::PDRDOTEstimatorStateBodyDebug::operator=(uint64_t a1, const CMMsl::PDRDOTEstimatorStateBodyDebug *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  char v15;
  char v16;
  int v17;

  if ((const CMMsl::PDRDOTEstimatorStateBodyDebug *)a1 != a2)
  {
    CMMsl::PDRDOTEstimatorStateBodyDebug::PDRDOTEstimatorStateBodyDebug((CMMsl::PDRDOTEstimatorStateBodyDebug *)&v9, a2);
    v3 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v17;
    v17 = v3;
    v4 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v13;
    v13 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v5;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v11 = v6;
    v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v7;
    LODWORD(v4) = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    v14 = v4;
    LOBYTE(v3) = *(_BYTE *)(a1 + 69);
    *(_BYTE *)(a1 + 69) = v16;
    v16 = v3;
    LOBYTE(v3) = *(_BYTE *)(a1 + 68);
    *(_BYTE *)(a1 + 68) = v15;
    v15 = v3;
    CMMsl::PDRDOTEstimatorStateBodyDebug::~PDRDOTEstimatorStateBodyDebug((CMMsl::PDRDOTEstimatorStateBodyDebug *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::PDRDOTEstimatorStateBodyDebug *a2, CMMsl::PDRDOTEstimatorStateBodyDebug *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float result;

  v3 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v8;
  v9 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v9;
  v10 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v10;
  result = *((float *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((float *)a2 + 16) = result;
  LOBYTE(v10) = *((_BYTE *)this + 69);
  *((_BYTE *)this + 69) = *((_BYTE *)a2 + 69);
  *((_BYTE *)a2 + 69) = v10;
  LOBYTE(v10) = *((_BYTE *)this + 68);
  *((_BYTE *)this + 68) = *((_BYTE *)a2 + 68);
  *((_BYTE *)a2 + 68) = v10;
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorStateBodyDebug::PDRDOTEstimatorStateBodyDebug(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = off_1003530B0;
  v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  sub_100239458(v4, (__n128 *)(a2 + 32));
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 69) = *(_BYTE *)(a2 + 69);
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
  return a1;
}

uint64_t CMMsl::PDRDOTEstimatorStateBodyDebug::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  char v15;
  char v16;
  int v17;

  if (a1 != a2)
  {
    CMMsl::PDRDOTEstimatorStateBodyDebug::PDRDOTEstimatorStateBodyDebug((uint64_t)&v9, a2);
    v3 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v17;
    v17 = v3;
    v4 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v13;
    v13 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v5;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v11 = v6;
    v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v7;
    LODWORD(v4) = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    v14 = v4;
    LOBYTE(v3) = *(_BYTE *)(a1 + 69);
    *(_BYTE *)(a1 + 69) = v16;
    v16 = v3;
    LOBYTE(v3) = *(_BYTE *)(a1 + 68);
    *(_BYTE *)(a1 + 68) = v15;
    v15 = v3;
    CMMsl::PDRDOTEstimatorStateBodyDebug::~PDRDOTEstimatorStateBodyDebug((CMMsl::PDRDOTEstimatorStateBodyDebug *)&v9);
  }
  return a1;
}

uint64_t CMMsl::PDRDOTEstimatorStateBodyDebug::formatText(CMMsl::PDRDOTEstimatorStateBodyDebug *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  char v11;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (float *)*((_QWORD *)this + 1);
  v6 = (float *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "dotVector", v7);
  }
  if ((*((_BYTE *)this + 72) & 4) != 0)
    PB::TextFormatter::format(a2, "hasValidTNBFrame", *((_BYTE *)this + 68));
  v8 = (float *)*((_QWORD *)this + 4);
  v9 = (float *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "headingVector", v10);
  }
  v11 = *((_BYTE *)this + 72);
  if ((v11 & 8) == 0)
  {
    if ((*((_BYTE *)this + 72) & 1) == 0)
      goto LABEL_9;
LABEL_13:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 7));
    if ((*((_BYTE *)this + 72) & 2) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_10;
  }
  PB::TextFormatter::format(a2, "isPedestrian", *((_BYTE *)this + 69));
  v11 = *((_BYTE *)this + 72);
  if ((v11 & 1) != 0)
    goto LABEL_13;
LABEL_9:
  if ((v11 & 2) != 0)
LABEL_10:
    PB::TextFormatter::format(a2, "uncertainty", *((float *)this + 16));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::PDRDOTEstimatorStateBodyDebug::readFrom(CMMsl::PDRDOTEstimatorStateBodyDebug *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  char *v9;
  void **v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  _DWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _DWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  BOOL v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  BOOL v63;
  unint64_t v64;
  char *v65;
  _DWORD *v66;
  unint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  int v82;
  char *v83;
  int v84;
  unint64_t v85;
  _BYTE v87[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 32);
    v9 = (char *)this + 48;
    v10 = (void **)((char *)this + 8);
    v11 = (char *)this + 24;
    while (1)
    {
      v12 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 72) |= 1u;
          v25 = *((_QWORD *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_125;
          *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v25);
          v26 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_128;
        case 2u:
          if (v24 != 2)
          {
            v65 = (char *)*((_QWORD *)this + 2);
            v64 = *((_QWORD *)this + 3);
            if ((unint64_t)v65 >= v64)
            {
              v69 = (char *)*v10;
              v70 = (v65 - (_BYTE *)*v10) >> 2;
              v71 = v70 + 1;
              if ((unint64_t)(v70 + 1) >> 62)
LABEL_137:
                sub_10000D5F8();
              v72 = v64 - (_QWORD)v69;
              if (v72 >> 1 > v71)
                v71 = v72 >> 1;
              if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL)
                v73 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v73 = v71;
              if (v73)
              {
                v74 = (char *)sub_100020E2C((uint64_t)v11, v73);
                v69 = (char *)*((_QWORD *)this + 1);
                v65 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v74 = 0;
              }
              v81 = &v74[4 * v70];
              *(_DWORD *)v81 = 0;
              v66 = v81 + 4;
              while (v65 != v69)
              {
                v82 = *((_DWORD *)v65 - 1);
                v65 -= 4;
                *((_DWORD *)v81 - 1) = v82;
                v81 -= 4;
              }
              *((_QWORD *)this + 1) = v81;
              *((_QWORD *)this + 2) = v66;
              *((_QWORD *)this + 3) = &v74[4 * v73];
              if (v69)
                operator delete(v69);
            }
            else
            {
              *(_DWORD *)v65 = 0;
              v66 = v65 + 4;
            }
            *((_QWORD *)this + 2) = v66;
            goto LABEL_123;
          }
          if ((PB::Reader::placeMark(a2, v87) & 1) != 0)
            return 0;
          v27 = *((_QWORD *)a2 + 1);
          v28 = *((_QWORD *)a2 + 2);
          while (v27 < v28 && !*((_BYTE *)a2 + 24))
          {
            v30 = (char *)*((_QWORD *)this + 2);
            v29 = *((_QWORD *)this + 3);
            if ((unint64_t)v30 >= v29)
            {
              v32 = (char *)*v10;
              v33 = (v30 - (_BYTE *)*v10) >> 2;
              v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 62)
                goto LABEL_137;
              v35 = v29 - (_QWORD)v32;
              if (v35 >> 1 > v34)
                v34 = v35 >> 1;
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
                v36 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v36 = v34;
              if (v36)
              {
                v37 = (char *)sub_100020E2C((uint64_t)v11, v36);
                v32 = (char *)*((_QWORD *)this + 1);
                v30 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v37 = 0;
              }
              v38 = &v37[4 * v33];
              *(_DWORD *)v38 = 0;
              v31 = v38 + 4;
              while (v30 != v32)
              {
                v39 = *((_DWORD *)v30 - 1);
                v30 -= 4;
                *((_DWORD *)v38 - 1) = v39;
                v38 -= 4;
              }
              *((_QWORD *)this + 1) = v38;
              *((_QWORD *)this + 2) = v31;
              *((_QWORD *)this + 3) = &v37[4 * v36];
              if (v32)
                operator delete(v32);
            }
            else
            {
              *(_DWORD *)v30 = 0;
              v31 = v30 + 4;
            }
            *((_QWORD *)this + 2) = v31;
            v40 = *((_QWORD *)a2 + 1);
            if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_91;
            *(v31 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v40);
            v28 = *((_QWORD *)a2 + 2);
            v27 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v27;
          }
          goto LABEL_92;
        case 3u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark(a2, v87) & 1) != 0)
              return 0;
            v41 = *((_QWORD *)a2 + 1);
            v42 = *((_QWORD *)a2 + 2);
            while (v41 < v42 && !*((_BYTE *)a2 + 24))
            {
              v44 = (char *)*((_QWORD *)this + 5);
              v43 = *((_QWORD *)this + 6);
              if ((unint64_t)v44 >= v43)
              {
                v46 = (char *)*v8;
                v47 = (v44 - (_BYTE *)*v8) >> 2;
                v48 = v47 + 1;
                if ((unint64_t)(v47 + 1) >> 62)
                  goto LABEL_138;
                v49 = v43 - (_QWORD)v46;
                if (v49 >> 1 > v48)
                  v48 = v49 >> 1;
                if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
                  v50 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v50 = v48;
                if (v50)
                {
                  v51 = (char *)sub_100020E2C((uint64_t)v9, v50);
                  v46 = (char *)*((_QWORD *)this + 4);
                  v44 = (char *)*((_QWORD *)this + 5);
                }
                else
                {
                  v51 = 0;
                }
                v52 = &v51[4 * v47];
                *(_DWORD *)v52 = 0;
                v45 = v52 + 4;
                while (v44 != v46)
                {
                  v53 = *((_DWORD *)v44 - 1);
                  v44 -= 4;
                  *((_DWORD *)v52 - 1) = v53;
                  v52 -= 4;
                }
                *((_QWORD *)this + 4) = v52;
                *((_QWORD *)this + 5) = v45;
                *((_QWORD *)this + 6) = &v51[4 * v50];
                if (v46)
                  operator delete(v46);
              }
              else
              {
                *(_DWORD *)v44 = 0;
                v45 = v44 + 4;
              }
              *((_QWORD *)this + 5) = v45;
              v54 = *((_QWORD *)a2 + 1);
              if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((_QWORD *)a2 + 2))
              {
LABEL_91:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v45 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v54);
              v42 = *((_QWORD *)a2 + 2);
              v41 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v41;
            }
LABEL_92:
            PB::Reader::recallMark(a2, v87);
          }
          else
          {
            v68 = (char *)*((_QWORD *)this + 5);
            v67 = *((_QWORD *)this + 6);
            if ((unint64_t)v68 >= v67)
            {
              v75 = (char *)*v8;
              v76 = (v68 - (_BYTE *)*v8) >> 2;
              v77 = v76 + 1;
              if ((unint64_t)(v76 + 1) >> 62)
LABEL_138:
                sub_10000D5F8();
              v78 = v67 - (_QWORD)v75;
              if (v78 >> 1 > v77)
                v77 = v78 >> 1;
              if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL)
                v79 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v79 = v77;
              if (v79)
              {
                v80 = (char *)sub_100020E2C((uint64_t)v9, v79);
                v75 = (char *)*((_QWORD *)this + 4);
                v68 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v80 = 0;
              }
              v83 = &v80[4 * v76];
              *(_DWORD *)v83 = 0;
              v66 = v83 + 4;
              while (v68 != v75)
              {
                v84 = *((_DWORD *)v68 - 1);
                v68 -= 4;
                *((_DWORD *)v83 - 1) = v84;
                v83 -= 4;
              }
              *((_QWORD *)this + 4) = v83;
              *((_QWORD *)this + 5) = v66;
              *((_QWORD *)this + 6) = &v80[4 * v79];
              if (v75)
                operator delete(v75);
            }
            else
            {
              *(_DWORD *)v68 = 0;
              v66 = v68 + 4;
            }
            *((_QWORD *)this + 5) = v66;
LABEL_123:
            v85 = *((_QWORD *)a2 + 1);
            if (v85 <= 0xFFFFFFFFFFFFFFFBLL && v85 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v66 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v85);
LABEL_127:
              v26 = *((_QWORD *)a2 + 1) + 4;
LABEL_128:
              *((_QWORD *)a2 + 1) = v26;
            }
            else
            {
LABEL_125:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_129:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || *((_BYTE *)a2 + 24))
            return v4 == 0;
          break;
        case 4u:
          *((_BYTE *)this + 72) |= 2u;
          v55 = *((_QWORD *)a2 + 1);
          if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_125;
          *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v55);
          goto LABEL_127;
        case 5u:
          *((_BYTE *)this + 72) |= 8u;
          v56 = *((_QWORD *)a2 + 1);
          if (v56 >= *((_QWORD *)a2 + 2))
          {
            v59 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v57 = v56 + 1;
            v58 = *(unsigned __int8 *)(*(_QWORD *)a2 + v56);
            *((_QWORD *)a2 + 1) = v57;
            v59 = v58 != 0;
          }
          *((_BYTE *)this + 69) = v59;
          goto LABEL_129;
        case 6u:
          *((_BYTE *)this + 72) |= 4u;
          v60 = *((_QWORD *)a2 + 1);
          if (v60 >= *((_QWORD *)a2 + 2))
          {
            v63 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v61 = v60 + 1;
            v62 = *(unsigned __int8 *)(*(_QWORD *)a2 + v60);
            *((_QWORD *)a2 + 1) = v61;
            v63 = v62 != 0;
          }
          *((_BYTE *)this + 68) = v63;
          goto LABEL_129;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v24, 0) & 1) == 0)
            return 0;
          goto LABEL_129;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PDRDOTEstimatorStateBodyDebug::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  char v10;

  v3 = this;
  if ((*(_BYTE *)(this + 72) & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 56), 1u);
  v4 = *(float **)(v3 + 8);
  v5 = *(float **)(v3 + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  v7 = *(float **)(v3 + 32);
  v8 = *(float **)(v3 + 40);
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::write(a2, v9, 3u);
  }
  v10 = *(_BYTE *)(v3 + 72);
  if ((v10 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 64), 4u);
    v10 = *(_BYTE *)(v3 + 72);
    if ((v10 & 8) == 0)
    {
LABEL_11:
      if ((v10 & 4) == 0)
        return this;
      return PB::Writer::write(a2, *(_BYTE *)(v3 + 68), 6u);
    }
  }
  else if ((*(_BYTE *)(v3 + 72) & 8) == 0)
  {
    goto LABEL_11;
  }
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 69), 5u);
  if ((*(_BYTE *)(v3 + 72) & 4) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 68), 6u);
  return this;
}

uint64_t CMMsl::PDRDOTEstimatorStateBodyDebug::hash_value(CMMsl::PDRDOTEstimatorStateBodyDebug *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;

  if ((*((_BYTE *)this + 72) & 1) != 0)
  {
    if (*((double *)this + 7) == 0.0)
      v2 = 0;
    else
      v2 = *((_QWORD *)this + 7);
  }
  else
  {
    v2 = 0;
  }
  v3 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  v4 = PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
  if ((*((_BYTE *)this + 72) & 2) == 0)
  {
    v5 = 0;
    if ((*((_BYTE *)this + 72) & 8) != 0)
      goto LABEL_8;
LABEL_13:
    v6 = 0;
    if ((*((_BYTE *)this + 72) & 4) != 0)
      goto LABEL_9;
LABEL_14:
    v7 = 0;
    return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7;
  }
  v8 = *((float *)this + 16);
  v5 = LODWORD(v8);
  if (v8 == 0.0)
    v5 = 0;
  if ((*((_BYTE *)this + 72) & 8) == 0)
    goto LABEL_13;
LABEL_8:
  v6 = *((unsigned __int8 *)this + 69);
  if ((*((_BYTE *)this + 72) & 4) == 0)
    goto LABEL_14;
LABEL_9:
  v7 = *((unsigned __int8 *)this + 68);
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7;
}

void CMMsl::PDRDOTEstimatorStateDebug::~PDRDOTEstimatorStateDebug(CMMsl::PDRDOTEstimatorStateDebug *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::PDRDOTEstimatorStateDebug::PDRDOTEstimatorStateDebug(CMMsl::PDRDOTEstimatorStateDebug *this, const CMMsl::PDRDOTEstimatorStateDebug *a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)this = off_1003530E8;
  *((_DWORD *)this + 8) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 32) = 1;
    *((double *)this + 1) = result;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *((_BYTE *)this + 32) = v3;
    *((_DWORD *)this + 6) = LODWORD(result);
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0)
      return result;
LABEL_10:
    result = *((double *)a2 + 2);
    *((_BYTE *)this + 32) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
  LODWORD(result) = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((_BYTE *)this + 32) = v3;
  *((_DWORD *)this + 7) = LODWORD(result);
  if ((*((_BYTE *)a2 + 32) & 2) != 0)
    goto LABEL_10;
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorStateDebug::operator=(uint64_t a1, const CMMsl::PDRDOTEstimatorStateDebug *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  uint64_t v9;
  int v10;

  if ((const CMMsl::PDRDOTEstimatorStateDebug *)a1 != a2)
  {
    CMMsl::PDRDOTEstimatorStateDebug::PDRDOTEstimatorStateDebug((CMMsl::PDRDOTEstimatorStateDebug *)v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRDOTEstimatorStateDebug *a2, CMMsl::PDRDOTEstimatorStateDebug *a3)
{
  int v3;
  uint64_t v4;
  double result;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::PDRDOTEstimatorStateDebug::PDRDOTEstimatorStateDebug(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_1003530E8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_1003530E8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorStateDebug::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  void (**v8)(CMMsl::PDRDOTEstimatorStateDebug *__hidden);
  __int128 v9;
  uint64_t v10;
  int v11;

  if (a1 != a2)
  {
    v8 = off_1003530E8;
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v11 = *(_DWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    v9 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::PDRDOTEstimatorStateDebug::formatText(CMMsl::PDRDOTEstimatorStateDebug *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "dotMeasurement", *((float *)this + 6));
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
      if ((*((_BYTE *)this + 32) & 2) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "dotMeasurementUnc", *((float *)this + 7));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PDRDOTEstimatorStateDebug::readFrom(CMMsl::PDRDOTEstimatorStateDebug *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 32) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_36;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_38;
        case 2u:
          *((_BYTE *)this + 32) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_36;
          *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_33;
        case 3u:
          *((_BYTE *)this + 32) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_36;
          *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_33:
          v2 = *((_QWORD *)a2 + 1) + 4;
          goto LABEL_39;
        case 4u:
          *((_BYTE *)this + 32) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_38:
            v2 = *((_QWORD *)a2 + 1) + 8;
LABEL_39:
            *((_QWORD *)a2 + 1) = v2;
          }
          else
          {
LABEL_36:
            *((_BYTE *)a2 + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PDRDOTEstimatorStateDebug::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 16), 4u);
  }
LABEL_8:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 3u);
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16), 4u);
  return this;
}

uint64_t CMMsl::PDRDOTEstimatorStateDebug::hash_value(CMMsl::PDRDOTEstimatorStateDebug *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  double v6;

  if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_3;
LABEL_15:
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 32) & 4) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((float *)this + 6);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 32) & 8) != 0)
  {
LABEL_6:
    v4 = *((float *)this + 7);
    v5 = LODWORD(v4);
    if (v4 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 32) & 2) != 0)
      goto LABEL_9;
LABEL_17:
    v6 = 0.0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ *(_QWORD *)&v6;
  }
LABEL_16:
  v5 = 0;
  if ((*((_BYTE *)this + 32) & 2) == 0)
    goto LABEL_17;
LABEL_9:
  v6 = *((double *)this + 2);
  if (v6 == 0.0)
    v6 = 0.0;
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ *(_QWORD *)&v6;
}

void CMMsl::PDRDOTEstimatorStateHeading::~PDRDOTEstimatorStateHeading(CMMsl::PDRDOTEstimatorStateHeading *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::PDRDOTEstimatorStateHeading::PDRDOTEstimatorStateHeading(CMMsl::PDRDOTEstimatorStateHeading *this, const CMMsl::PDRDOTEstimatorStateHeading *a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)this = off_100353120;
  *((_DWORD *)this + 8) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 32) = 1;
    *((double *)this + 1) = result;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *((_BYTE *)this + 32) = v3;
    *((_DWORD *)this + 6) = LODWORD(result);
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0)
      return result;
LABEL_10:
    result = *((double *)a2 + 2);
    *((_BYTE *)this + 32) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
  LODWORD(result) = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((_BYTE *)this + 32) = v3;
  *((_DWORD *)this + 7) = LODWORD(result);
  if ((*((_BYTE *)a2 + 32) & 2) != 0)
    goto LABEL_10;
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorStateHeading::operator=(uint64_t a1, const CMMsl::PDRDOTEstimatorStateHeading *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  uint64_t v9;
  int v10;

  if ((const CMMsl::PDRDOTEstimatorStateHeading *)a1 != a2)
  {
    CMMsl::PDRDOTEstimatorStateHeading::PDRDOTEstimatorStateHeading((CMMsl::PDRDOTEstimatorStateHeading *)v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRDOTEstimatorStateHeading *a2, CMMsl::PDRDOTEstimatorStateHeading *a3)
{
  int v3;
  uint64_t v4;
  double result;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::PDRDOTEstimatorStateHeading::PDRDOTEstimatorStateHeading(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100353120;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100353120;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorStateHeading::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  void (**v8)(CMMsl::PDRDOTEstimatorStateHeading *__hidden);
  __int128 v9;
  uint64_t v10;
  int v11;

  if (a1 != a2)
  {
    v8 = off_100353120;
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v11 = *(_DWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    v9 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::PDRDOTEstimatorStateHeading::formatText(CMMsl::PDRDOTEstimatorStateHeading *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "dot", *((float *)this + 6));
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
      if ((*((_BYTE *)this + 32) & 2) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "dotUnc", *((float *)this + 7));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PDRDOTEstimatorStateHeading::readFrom(CMMsl::PDRDOTEstimatorStateHeading *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 32) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_36;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_38;
        case 2u:
          *((_BYTE *)this + 32) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_36;
          *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_33;
        case 3u:
          *((_BYTE *)this + 32) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_36;
          *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_33:
          v2 = *((_QWORD *)a2 + 1) + 4;
          goto LABEL_39;
        case 4u:
          *((_BYTE *)this + 32) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_38:
            v2 = *((_QWORD *)a2 + 1) + 8;
LABEL_39:
            *((_QWORD *)a2 + 1) = v2;
          }
          else
          {
LABEL_36:
            *((_BYTE *)a2 + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PDRDOTEstimatorStateHeading::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 16), 4u);
  }
LABEL_8:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 3u);
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16), 4u);
  return this;
}

uint64_t CMMsl::PDRDOTEstimatorStateHeading::hash_value(CMMsl::PDRDOTEstimatorStateHeading *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  double v6;

  if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_3;
LABEL_15:
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 32) & 4) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((float *)this + 6);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 32) & 8) != 0)
  {
LABEL_6:
    v4 = *((float *)this + 7);
    v5 = LODWORD(v4);
    if (v4 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 32) & 2) != 0)
      goto LABEL_9;
LABEL_17:
    v6 = 0.0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ *(_QWORD *)&v6;
  }
LABEL_16:
  v5 = 0;
  if ((*((_BYTE *)this + 32) & 2) == 0)
    goto LABEL_17;
LABEL_9:
  v6 = *((double *)this + 2);
  if (v6 == 0.0)
    v6 = 0.0;
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ *(_QWORD *)&v6;
}

void CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::~PDRDOTEstimatorUncertaintyModelOnBody(CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::PDRDOTEstimatorUncertaintyModelOnBody(CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *this, const CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)this = off_100353158;
  *((_DWORD *)this + 10) = 0;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 40) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 40) & 4) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *((_BYTE *)this + 40) = v3;
    *((_DWORD *)this + 5) = v4;
    v2 = *((_BYTE *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((_BYTE *)this + 40) = v3;
    *((_DWORD *)this + 4) = v4;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *((_BYTE *)this + 40) = v3;
  *((_DWORD *)this + 8) = v4;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *((_BYTE *)this + 40) = v3;
  *((_DWORD *)this + 9) = v4;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0)
      return *(float *)&v4;
    goto LABEL_16;
  }
LABEL_15:
  LODWORD(v4) = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *((_BYTE *)this + 40) = v3;
  *((_DWORD *)this + 7) = v4;
  if ((*((_BYTE *)a2 + 40) & 8) == 0)
    return *(float *)&v4;
LABEL_16:
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  *((_BYTE *)this + 40) = v3 | 8;
  *((_DWORD *)this + 6) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::operator=(uint64_t a1, const CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;

  if ((const CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *)a1 != a2)
  {
    CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::PDRDOTEstimatorUncertaintyModelOnBody((CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *)&v8, a2);
    v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    v12 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v11;
    v11 = v5;
    v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    v10 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *a2, CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  return result;
}

float CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::PDRDOTEstimatorUncertaintyModelOnBody(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100353158;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_100353158;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _QWORD v10[2];
  __int128 v11;
  uint64_t v12;
  int v13;

  if (a1 != a2)
  {
    v10[0] = off_100353158;
    v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v13 = *(_DWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v10[1] = v5;
    v12 = *(_QWORD *)(a1 + 32);
    v6 = *(_OWORD *)(a1 + 16);
    v7 = *(_OWORD *)(a2 + 16);
    v8 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 40) = v3;
    *(_QWORD *)(a1 + 32) = v8;
    *(_OWORD *)(a1 + 16) = v7;
    v11 = v6;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::formatText(CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "dotDeltaBufferMaxAbs", *((float *)this + 4));
    v5 = *((_BYTE *)this + 40);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*((_BYTE *)this + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "dotDeltaBufferVar", *((float *)this + 5));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "dotErrorEstimate", *((float *)this + 6));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "dotRelativeChangeOverBuffer", *((float *)this + 7));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(a2, "headingRelativeChangeOverBuffer", *((float *)this + 9));
    if ((*((_BYTE *)this + 40) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "headingDeltaBufferVar", *((float *)this + 8));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 0x40) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 1) != 0)
LABEL_8:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::readFrom(CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 40) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_44;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_47;
        case 2u:
          *((_BYTE *)this + 40) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_44;
          *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_46;
        case 3u:
          *((_BYTE *)this + 40) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_44;
          *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_46;
        case 4u:
          *((_BYTE *)this + 40) |= 0x20u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_44;
          *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_46;
        case 5u:
          *((_BYTE *)this + 40) |= 0x40u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_44;
          *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_46;
        case 6u:
          *((_BYTE *)this + 40) |= 0x10u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_44;
          *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_46;
        case 7u:
          *((_BYTE *)this + 40) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_46:
            v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_47:
            *((_QWORD *)a2 + 1) = v2;
          }
          else
          {
LABEL_44:
            *((_BYTE *)a2 + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 40);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(this + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 2u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 3u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 4u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 5u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 24), 7u);
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 6u);
  if ((*(_BYTE *)(v3 + 40) & 8) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 24), 7u);
  return this;
}

uint64_t CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::hash_value(CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;

  if ((*((_BYTE *)this + 40) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 40) & 4) != 0)
      goto LABEL_3;
LABEL_24:
    v3 = 0;
    if ((*((_BYTE *)this + 40) & 2) != 0)
      goto LABEL_6;
LABEL_25:
    v5 = 0;
    if ((*((_BYTE *)this + 40) & 0x20) != 0)
      goto LABEL_9;
LABEL_26:
    v7 = 0;
    if ((*((_BYTE *)this + 40) & 0x40) != 0)
      goto LABEL_12;
LABEL_27:
    v9 = 0;
    if ((*((_BYTE *)this + 40) & 0x10) != 0)
      goto LABEL_15;
    goto LABEL_28;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 40) & 4) == 0)
    goto LABEL_24;
LABEL_3:
  v2 = *((float *)this + 5);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 40) & 2) == 0)
    goto LABEL_25;
LABEL_6:
  v4 = *((float *)this + 4);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((*((_BYTE *)this + 40) & 0x20) == 0)
    goto LABEL_26;
LABEL_9:
  v6 = *((float *)this + 8);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((*((_BYTE *)this + 40) & 0x40) == 0)
    goto LABEL_27;
LABEL_12:
  v8 = *((float *)this + 9);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  if ((*((_BYTE *)this + 40) & 0x10) != 0)
  {
LABEL_15:
    v10 = *((float *)this + 7);
    v11 = LODWORD(v10);
    if (v10 == 0.0)
      v11 = 0;
    if ((*((_BYTE *)this + 40) & 8) != 0)
      goto LABEL_18;
LABEL_29:
    v13 = 0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13;
  }
LABEL_28:
  v11 = 0;
  if ((*((_BYTE *)this + 40) & 8) == 0)
    goto LABEL_29;
LABEL_18:
  v12 = *((float *)this + 6);
  v13 = LODWORD(v12);
  if (v12 == 0.0)
    v13 = 0;
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13;
}

void CMMsl::PDRDOTMeasurementSelectorState::~PDRDOTMeasurementSelectorState(CMMsl::PDRDOTMeasurementSelectorState *this)
{
  void *v2;

  *(_QWORD *)this = off_100353190;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::PDRDOTMeasurementSelectorState::~PDRDOTMeasurementSelectorState(this);
  operator delete();
}

CMMsl::PDRDOTMeasurementSelectorState *CMMsl::PDRDOTMeasurementSelectorState::PDRDOTMeasurementSelectorState(CMMsl::PDRDOTMeasurementSelectorState *this, const CMMsl::PDRDOTMeasurementSelectorState *a2)
{
  char *v4;
  char v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  *(_QWORD *)this = off_100353190;
  *((_QWORD *)this + 1) = 0;
  v4 = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 13) = 0;
  if ((*((_BYTE *)a2 + 52) & 1) != 0)
  {
    v6 = *((_QWORD *)a2 + 4);
    *((_BYTE *)this + 52) = 1;
    *((_QWORD *)this + 4) = v6;
    v5 = 5;
    if ((*((_BYTE *)a2 + 52) & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 4;
  if ((*((_BYTE *)a2 + 52) & 4) != 0)
  {
LABEL_5:
    v7 = *((_DWORD *)a2 + 12);
    *((_BYTE *)this + 52) = v5;
    *((_DWORD *)this + 12) = v7;
  }
LABEL_6:
  if (this != a2)
    sub_100020CE4(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  if ((*((_BYTE *)a2 + 52) & 2) != 0)
  {
    v8 = *((_QWORD *)a2 + 5);
    *((_BYTE *)this + 52) |= 2u;
    *((_QWORD *)this + 5) = v8;
  }
  return this;
}

uint64_t CMMsl::PDRDOTMeasurementSelectorState::operator=(uint64_t a1, const CMMsl::PDRDOTMeasurementSelectorState *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE v8[8];
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  if ((const CMMsl::PDRDOTMeasurementSelectorState *)a1 != a2)
  {
    CMMsl::PDRDOTMeasurementSelectorState::PDRDOTMeasurementSelectorState((CMMsl::PDRDOTMeasurementSelectorState *)v8, a2);
    v3 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v12;
    v12 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v10;
    v10 = v5;
    v6 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v11;
    v11 = v6;
    CMMsl::PDRDOTMeasurementSelectorState::~PDRDOTMeasurementSelectorState((CMMsl::PDRDOTMeasurementSelectorState *)v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRDOTMeasurementSelectorState *a2, CMMsl::PDRDOTMeasurementSelectorState *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  v3 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  result = *((double *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((double *)a2 + 5) = result;
  return result;
}

uint64_t CMMsl::PDRDOTMeasurementSelectorState::PDRDOTMeasurementSelectorState(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_100353190;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

{
  *(_QWORD *)a1 = off_100353190;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t CMMsl::PDRDOTMeasurementSelectorState::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  void (**v11)(CMMsl::PDRDOTMeasurementSelectorState *__hidden);
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  if (a1 != a2)
  {
    v11 = off_100353190;
    v3 = *(_QWORD *)(a2 + 24);
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v5 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 52) = 0;
    v15 = *(_QWORD *)(a1 + 48);
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v4;
    v12 = v6;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v3;
    v13 = v7;
    v8 = *(_OWORD *)(a1 + 32);
    v9 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = v5;
    *(_OWORD *)(a1 + 32) = v9;
    v14 = v8;
    CMMsl::PDRDOTMeasurementSelectorState::~PDRDOTMeasurementSelectorState((CMMsl::PDRDOTMeasurementSelectorState *)&v11);
  }
  return a1;
}

uint64_t CMMsl::PDRDOTMeasurementSelectorState::formatText(CMMsl::PDRDOTMeasurementSelectorState *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;
  char v8;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 52) & 4) != 0)
    PB::TextFormatter::format(a2, "placementFiltered", *((_DWORD *)this + 12));
  v5 = (float *)*((_QWORD *)this + 1);
  v6 = (float *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "placementProbabilityFiltered", v7);
  }
  v8 = *((_BYTE *)this + 52);
  if ((v8 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
    v8 = *((_BYTE *)this + 52);
  }
  if ((v8 & 2) != 0)
    PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 5));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::PDRDOTMeasurementSelectorState::readFrom(CMMsl::PDRDOTMeasurementSelectorState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  char *v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  _DWORD *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  unint64_t v50;
  char v51;
  unint64_t v52;
  char *v53;
  _DWORD *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  int v62;
  unint64_t v63;
  _BYTE v66[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 8);
    v9 = (char *)this + 24;
    while (1)
    {
      v10 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v16 = v12++ > 8;
        if (v16)
          goto LABEL_20;
      }
LABEL_21:
      v22 = v13 & 7;
      if (v22 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 52) |= 1u;
          v23 = *((_QWORD *)a2 + 1);
          if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_95;
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v23);
          goto LABEL_60;
        case 2u:
          *((_BYTE *)this + 52) |= 4u;
          v24 = *((_QWORD *)a2 + 1);
          v25 = *((_QWORD *)a2 + 2);
          v26 = *(_QWORD *)a2;
          if (v24 <= 0xFFFFFFFFFFFFFFF5 && v24 + 10 <= v25)
          {
            v27 = 0;
            v28 = 0;
            v29 = 0;
            do
            {
              v30 = v24 + 1;
              *((_QWORD *)a2 + 1) = v24 + 1;
              v31 = *(_BYTE *)(v26 + v24);
              v29 |= (unint64_t)(v31 & 0x7F) << v27;
              if ((v31 & 0x80) == 0)
                goto LABEL_84;
              v27 += 7;
              v24 = v30;
              v16 = v28++ > 8;
            }
            while (!v16);
LABEL_70:
            LODWORD(v29) = 0;
            goto LABEL_84;
          }
          v48 = 0;
          v49 = 0;
          v29 = 0;
          if (v25 <= v24)
            v25 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v25 == v24)
            {
              LODWORD(v29) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v50 = v24 + 1;
              v51 = *(_BYTE *)(v26 + v24);
              *((_QWORD *)a2 + 1) = v50;
              v29 |= (unint64_t)(v51 & 0x7F) << v48;
              if (v51 < 0)
              {
                v48 += 7;
                v24 = v50;
                v16 = v49++ > 8;
                if (v16)
                  goto LABEL_70;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v29) = 0;
            }
            break;
          }
LABEL_84:
          *((_DWORD *)this + 12) = v29;
          goto LABEL_96;
        case 3u:
          if (v22 == 2)
          {
            if ((PB::Reader::placeMark(a2, v66) & 1) != 0)
              return 0;
            v32 = *((_QWORD *)a2 + 1);
            v33 = *((_QWORD *)a2 + 2);
            while (v32 < v33 && !*((_BYTE *)a2 + 24))
            {
              v35 = (char *)*((_QWORD *)this + 2);
              v34 = *((_QWORD *)this + 3);
              if ((unint64_t)v35 >= v34)
              {
                v37 = (char *)*v8;
                v38 = (v35 - (_BYTE *)*v8) >> 2;
                v39 = v38 + 1;
                if ((unint64_t)(v38 + 1) >> 62)
                  goto LABEL_107;
                v40 = v34 - (_QWORD)v37;
                if (v40 >> 1 > v39)
                  v39 = v40 >> 1;
                if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
                  v41 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v41 = v39;
                if (v41)
                {
                  v42 = (char *)sub_100020E2C((uint64_t)v9, v41);
                  v37 = (char *)*((_QWORD *)this + 1);
                  v35 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v42 = 0;
                }
                v43 = &v42[4 * v38];
                *(_DWORD *)v43 = 0;
                v36 = v43 + 4;
                while (v35 != v37)
                {
                  v44 = *((_DWORD *)v35 - 1);
                  v35 -= 4;
                  *((_DWORD *)v43 - 1) = v44;
                  v43 -= 4;
                }
                *((_QWORD *)this + 1) = v43;
                *((_QWORD *)this + 2) = v36;
                *((_QWORD *)this + 3) = &v42[4 * v41];
                if (v37)
                  operator delete(v37);
              }
              else
              {
                *(_DWORD *)v35 = 0;
                v36 = v35 + 4;
              }
              *((_QWORD *)this + 2) = v36;
              v45 = *((_QWORD *)a2 + 1);
              if (v45 > 0xFFFFFFFFFFFFFFFBLL || v45 + 4 > *((_QWORD *)a2 + 2))
              {
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v36 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v45);
              v33 = *((_QWORD *)a2 + 2);
              v32 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v32;
            }
            PB::Reader::recallMark(a2, v66);
          }
          else
          {
            v53 = (char *)*((_QWORD *)this + 2);
            v52 = *((_QWORD *)this + 3);
            if ((unint64_t)v53 >= v52)
            {
              v55 = (char *)*v8;
              v56 = (v53 - (_BYTE *)*v8) >> 2;
              v57 = v56 + 1;
              if ((unint64_t)(v56 + 1) >> 62)
LABEL_107:
                sub_10000D5F8();
              v58 = v52 - (_QWORD)v55;
              if (v58 >> 1 > v57)
                v57 = v58 >> 1;
              if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
                v59 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v59 = v57;
              if (v59)
              {
                v60 = (char *)sub_100020E2C((uint64_t)v9, v59);
                v55 = (char *)*((_QWORD *)this + 1);
                v53 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v60 = 0;
              }
              v61 = &v60[4 * v56];
              *(_DWORD *)v61 = 0;
              v54 = v61 + 4;
              while (v53 != v55)
              {
                v62 = *((_DWORD *)v53 - 1);
                v53 -= 4;
                *((_DWORD *)v61 - 1) = v62;
                v61 -= 4;
              }
              *((_QWORD *)this + 1) = v61;
              *((_QWORD *)this + 2) = v54;
              *((_QWORD *)this + 3) = &v60[4 * v59];
              if (v55)
                operator delete(v55);
            }
            else
            {
              *(_DWORD *)v53 = 0;
              v54 = v53 + 4;
            }
            *((_QWORD *)this + 2) = v54;
            v63 = *((_QWORD *)a2 + 1);
            if (v63 <= 0xFFFFFFFFFFFFFFFBLL && v63 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v54 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v63);
              v47 = *((_QWORD *)a2 + 1) + 4;
LABEL_61:
              *((_QWORD *)a2 + 1) = v47;
            }
            else
            {
LABEL_95:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_96:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 4u:
          *((_BYTE *)this + 52) |= 2u;
          v46 = *((_QWORD *)a2 + 1);
          if (v46 > 0xFFFFFFFFFFFFFFF7 || v46 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_95;
          *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v46);
LABEL_60:
          v47 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_61;
        default:
          if ((PB::Reader::skip(a2, v13 >> 3, v22, 0) & 1) == 0)
            return 0;
          goto LABEL_96;
      }
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_21;
      v17 += 7;
      v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PDRDOTMeasurementSelectorState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  float *v5;
  float *v6;
  float v7;

  v3 = this;
  v4 = *(_BYTE *)(this + 52);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32), 1u);
    v4 = *(_BYTE *)(v3 + 52);
  }
  if ((v4 & 4) != 0)
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 2u);
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7, 3u);
  }
  if ((*(_BYTE *)(v3 + 52) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 40), 4u);
  return this;
}

uint64_t CMMsl::PDRDOTMeasurementSelectorState::hash_value(CMMsl::PDRDOTMeasurementSelectorState *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;

  if ((*((_BYTE *)this + 52) & 1) != 0)
  {
    if (*((double *)this + 4) == 0.0)
      v2 = 0;
    else
      v2 = *((_QWORD *)this + 4);
    if ((*((_BYTE *)this + 52) & 4) != 0)
      goto LABEL_3;
  }
  else
  {
    v2 = 0;
    if ((*((_BYTE *)this + 52) & 4) != 0)
    {
LABEL_3:
      v3 = *((unsigned int *)this + 12);
      goto LABEL_9;
    }
  }
  v3 = 0;
LABEL_9:
  v4 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  if ((*((_BYTE *)this + 52) & 2) != 0)
  {
    v5 = *((double *)this + 5);
    if (v5 == 0.0)
      v5 = 0.0;
  }
  else
  {
    v5 = 0.0;
  }
  return v3 ^ v2 ^ *(_QWORD *)&v5 ^ v4;
}

void CMMsl::PDRFeatures::~PDRFeatures(CMMsl::PDRFeatures *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::PDRFeatures::PDRFeatures(CMMsl::PDRFeatures *this, const CMMsl::PDRFeatures *a2)
{
  int v2;
  int v3;
  double result;

  *(_QWORD *)this = off_1003531C8;
  *((_DWORD *)this + 27) = 0;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    v3 = 1;
    *((_DWORD *)this + 27) = 1;
    *((double *)this + 1) = result;
    v2 = *((_DWORD *)a2 + 27);
    if ((v2 & 0x40000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x40000) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 22);
    v3 |= 0x40000u;
    *((_DWORD *)this + 27) = v3;
    *((_DWORD *)this + 22) = LODWORD(result);
    v2 = *((_DWORD *)a2 + 27);
  }
LABEL_6:
  if ((v2 & 0x100000) != 0)
  {
    LODWORD(result) = *((_DWORD *)a2 + 24);
    v3 |= 0x100000u;
    *((_DWORD *)this + 27) = v3;
    *((_DWORD *)this + 24) = LODWORD(result);
    v2 = *((_DWORD *)a2 + 27);
    if ((v2 & 0x80000) == 0)
    {
LABEL_8:
      if ((v2 & 0x200000) == 0)
        goto LABEL_9;
      goto LABEL_30;
    }
  }
  else if ((v2 & 0x80000) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(result) = *((_DWORD *)a2 + 23);
  v3 |= 0x80000u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 23) = LODWORD(result);
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x200000) == 0)
  {
LABEL_9:
    if ((v2 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_31;
  }
LABEL_30:
  LODWORD(result) = *((_DWORD *)a2 + 25);
  v3 |= 0x200000u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 25) = LODWORD(result);
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x400) == 0)
  {
LABEL_10:
    if ((v2 & 0x1000) == 0)
      goto LABEL_11;
    goto LABEL_32;
  }
LABEL_31:
  LODWORD(result) = *((_DWORD *)a2 + 14);
  v3 |= 0x400u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 14) = LODWORD(result);
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x1000) == 0)
  {
LABEL_11:
    if ((v2 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_33;
  }
LABEL_32:
  LODWORD(result) = *((_DWORD *)a2 + 16);
  v3 |= 0x1000u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 16) = LODWORD(result);
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x800) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_34;
  }
LABEL_33:
  LODWORD(result) = *((_DWORD *)a2 + 15);
  v3 |= 0x800u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 15) = LODWORD(result);
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 4) == 0)
      goto LABEL_14;
    goto LABEL_35;
  }
LABEL_34:
  LODWORD(result) = *((_DWORD *)a2 + 17);
  v3 |= 0x2000u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 17) = LODWORD(result);
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 4) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0)
      goto LABEL_15;
    goto LABEL_36;
  }
LABEL_35:
  LODWORD(result) = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 6) = LODWORD(result);
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x10) == 0)
  {
LABEL_15:
    if ((v2 & 8) == 0)
      goto LABEL_16;
    goto LABEL_37;
  }
LABEL_36:
  LODWORD(result) = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 8) = LODWORD(result);
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 8) == 0)
  {
LABEL_16:
    if ((v2 & 0x20) == 0)
      goto LABEL_17;
    goto LABEL_38;
  }
LABEL_37:
  LODWORD(result) = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 7) = LODWORD(result);
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x20) == 0)
  {
LABEL_17:
    if ((v2 & 0x400000) == 0)
      goto LABEL_18;
    goto LABEL_39;
  }
LABEL_38:
  LODWORD(result) = *((_DWORD *)a2 + 9);
  v3 |= 0x20u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 9) = LODWORD(result);
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x400000) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0)
      goto LABEL_19;
    goto LABEL_40;
  }
LABEL_39:
  LODWORD(result) = *((_DWORD *)a2 + 26);
  v3 |= 0x400000u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 26) = LODWORD(result);
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x80) == 0)
  {
LABEL_19:
    if ((v2 & 0x40) == 0)
      goto LABEL_20;
    goto LABEL_41;
  }
LABEL_40:
  LODWORD(result) = *((_DWORD *)a2 + 11);
  v3 |= 0x80u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 11) = LODWORD(result);
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x40) == 0)
  {
LABEL_20:
    if ((v2 & 0x200) == 0)
      goto LABEL_21;
    goto LABEL_42;
  }
LABEL_41:
  LODWORD(result) = *((_DWORD *)a2 + 10);
  v3 |= 0x40u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 10) = LODWORD(result);
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x200) == 0)
  {
LABEL_21:
    if ((v2 & 0x100) == 0)
      goto LABEL_22;
    goto LABEL_43;
  }
LABEL_42:
  LODWORD(result) = *((_DWORD *)a2 + 13);
  v3 |= 0x200u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 13) = LODWORD(result);
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x100) == 0)
  {
LABEL_22:
    if ((v2 & 0x8000) == 0)
      goto LABEL_23;
    goto LABEL_44;
  }
LABEL_43:
  LODWORD(result) = *((_DWORD *)a2 + 12);
  v3 |= 0x100u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 12) = LODWORD(result);
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x8000) == 0)
  {
LABEL_23:
    if ((v2 & 0x4000) == 0)
      goto LABEL_24;
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(result) = *((_DWORD *)a2 + 19);
  v3 |= 0x8000u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 19) = LODWORD(result);
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x4000) == 0)
  {
LABEL_24:
    if ((v2 & 0x20000) == 0)
      goto LABEL_25;
    goto LABEL_46;
  }
LABEL_45:
  LODWORD(result) = *((_DWORD *)a2 + 18);
  v3 |= 0x4000u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 18) = LODWORD(result);
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x20000) == 0)
  {
LABEL_25:
    if ((v2 & 0x10000) == 0)
      goto LABEL_26;
    goto LABEL_47;
  }
LABEL_46:
  LODWORD(result) = *((_DWORD *)a2 + 21);
  v3 |= 0x20000u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 21) = LODWORD(result);
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x10000) == 0)
  {
LABEL_26:
    if ((v2 & 2) == 0)
      return result;
LABEL_48:
    result = *((double *)a2 + 2);
    *((_DWORD *)this + 27) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
LABEL_47:
  LODWORD(result) = *((_DWORD *)a2 + 20);
  v3 |= 0x10000u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 20) = LODWORD(result);
  if ((*((_DWORD *)a2 + 27) & 2) != 0)
    goto LABEL_48;
  return result;
}

CMMsl *CMMsl::PDRFeatures::operator=(CMMsl *a1, const CMMsl::PDRFeatures *a2)
{
  CMMsl::PDRFeatures *v3;
  _BYTE v5[112];

  if (a1 != a2)
  {
    CMMsl::PDRFeatures::PDRFeatures((CMMsl::PDRFeatures *)v5, a2);
    CMMsl::swap(a1, (CMMsl::PDRFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRFeatures *a2, CMMsl::PDRFeatures *a3)
{
  int v3;
  uint64_t v4;
  double result;

  v3 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v4;
  LODWORD(v4) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  LODWORD(v4) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v4;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  LODWORD(v4) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  LODWORD(v4) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v4;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::PDRFeatures::PDRFeatures(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_1003531C8;
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a2 + 108) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

CMMsl *CMMsl::PDRFeatures::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::PDRFeatures *v3;
  _BYTE v5[112];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::PDRFeatures::PDRFeatures((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::PDRFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::PDRFeatures::formatText(CMMsl::PDRFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "pitchMean", *((float *)this + 6));
    v5 = *((_DWORD *)this + 27);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_28;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "pitchStd", *((float *)this + 7));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "rollMeanAbs", *((float *)this + 8));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "rollStd", *((float *)this + 9));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "rotRateInerFFTAmpXYHigh", *((float *)this + 10));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "rotRateInerFFTAmpXYPed", *((float *)this + 11));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "rotRateInerFFTAmpZHigh", *((float *)this + 12));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "rotRateInerFFTAmpZPed", *((float *)this + 13));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "rotRateInerXYMean", *((float *)this + 14));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "rotRateInerXYStd", *((float *)this + 15));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "rotRateInerZMean", *((float *)this + 16));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 1) == 0)
      goto LABEL_14;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "rotRateInerZStd", *((float *)this + 17));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 1) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0)
      goto LABEL_15;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "userAccelInerFFTAmpXYHigh", *((float *)this + 18));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "userAccelInerFFTAmpXYPed", *((float *)this + 19));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "userAccelInerFFTAmpZHigh", *((float *)this + 20));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "userAccelInerFFTAmpZPed", *((float *)this + 21));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "userAccelInerXYMean", *((float *)this + 22));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "userAccelInerXYStd", *((float *)this + 23));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0)
      goto LABEL_23;
LABEL_47:
    PB::TextFormatter::format(a2, "userAccelInerZStd", *((float *)this + 25));
    if ((*((_DWORD *)this + 27) & 0x400000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_24;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "userAccelInerZMean", *((float *)this + 24));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x200000) != 0)
    goto LABEL_47;
LABEL_23:
  if ((v5 & 0x400000) != 0)
LABEL_24:
    PB::TextFormatter::format(a2, "yawStd", *((float *)this + 26));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PDRFeatures::readFrom(CMMsl::PDRFeatures *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_DWORD *)this + 27) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_93;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_88;
        case 2u:
          *((_DWORD *)this + 27) |= 0x40000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_93;
          *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_95;
        case 3u:
          *((_DWORD *)this + 27) |= 0x100000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_93;
          *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_95;
        case 4u:
          *((_DWORD *)this + 27) |= 0x80000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_93;
          *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_95;
        case 5u:
          *((_DWORD *)this + 27) |= 0x200000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_93;
          *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_95;
        case 6u:
          *((_DWORD *)this + 27) |= 0x400u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_93;
          *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_95;
        case 7u:
          *((_DWORD *)this + 27) |= 0x1000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_93;
          *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_95;
        case 8u:
          *((_DWORD *)this + 27) |= 0x800u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_93;
          *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_95;
        case 9u:
          *((_DWORD *)this + 27) |= 0x2000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_93;
          *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_95;
        case 0xAu:
          *((_DWORD *)this + 27) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_93;
          *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_95;
        case 0xBu:
          *((_DWORD *)this + 27) |= 0x10u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_93;
          *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_95;
        case 0xCu:
          *((_DWORD *)this + 27) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_93;
          *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_95;
        case 0xDu:
          *((_DWORD *)this + 27) |= 0x20u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_93;
          *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_95;
        case 0xEu:
          *((_DWORD *)this + 27) |= 0x400000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_93;
          *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_95;
        case 0xFu:
          *((_DWORD *)this + 27) |= 0x80u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_93;
          *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_95;
        case 0x10u:
          *((_DWORD *)this + 27) |= 0x40u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_93;
          *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_95;
        case 0x11u:
          *((_DWORD *)this + 27) |= 0x200u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_93;
          *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_95;
        case 0x12u:
          *((_DWORD *)this + 27) |= 0x100u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_93;
          *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_95;
        case 0x13u:
          *((_DWORD *)this + 27) |= 0x8000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_93;
          *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_95;
        case 0x14u:
          *((_DWORD *)this + 27) |= 0x4000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_93;
          *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_95;
        case 0x15u:
          *((_DWORD *)this + 27) |= 0x20000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_93;
          *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_95;
        case 0x16u:
          *((_DWORD *)this + 27) |= 0x10000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_93;
          *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_95:
          v2 = *((_QWORD *)a2 + 1) + 4;
          goto LABEL_96;
        case 0x17u:
          *((_DWORD *)this + 27) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          {
LABEL_93:
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_88:
            v2 = *((_QWORD *)a2 + 1) + 8;
LABEL_96:
            *((_QWORD *)a2 + 1) = v2;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PDRFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 108);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_DWORD *)(v3 + 108);
    if ((v4 & 0x40000) == 0)
    {
LABEL_3:
      if ((v4 & 0x100000) == 0)
        goto LABEL_4;
      goto LABEL_27;
    }
  }
  else if ((v4 & 0x40000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 2u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x100000) == 0)
  {
LABEL_4:
    if ((v4 & 0x80000) == 0)
      goto LABEL_5;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 3u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x80000) == 0)
  {
LABEL_5:
    if ((v4 & 0x200000) == 0)
      goto LABEL_6;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 92), 4u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x200000) == 0)
  {
LABEL_6:
    if ((v4 & 0x400) == 0)
      goto LABEL_7;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 5u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x400) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000) == 0)
      goto LABEL_8;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 6u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x1000) == 0)
  {
LABEL_8:
    if ((v4 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 7u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x800) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 8u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0)
      goto LABEL_11;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 9u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 4) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 0xAu);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0)
      goto LABEL_13;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 0xBu);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 0x20) == 0)
      goto LABEL_14;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 0xCu);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x20) == 0)
  {
LABEL_14:
    if ((v4 & 0x400000) == 0)
      goto LABEL_15;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 0xDu);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x400000) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0)
      goto LABEL_16;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 0xEu);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x80) == 0)
  {
LABEL_16:
    if ((v4 & 0x40) == 0)
      goto LABEL_17;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 0xFu);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x40) == 0)
  {
LABEL_17:
    if ((v4 & 0x200) == 0)
      goto LABEL_18;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 0x10u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x200) == 0)
  {
LABEL_18:
    if ((v4 & 0x100) == 0)
      goto LABEL_19;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0x11u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x100) == 0)
  {
LABEL_19:
    if ((v4 & 0x8000) == 0)
      goto LABEL_20;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 0x12u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x8000) == 0)
  {
LABEL_20:
    if ((v4 & 0x4000) == 0)
      goto LABEL_21;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 0x13u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x4000) == 0)
  {
LABEL_21:
    if ((v4 & 0x20000) == 0)
      goto LABEL_22;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0x14u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x20000) == 0)
  {
LABEL_22:
    if ((v4 & 0x10000) == 0)
      goto LABEL_23;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 0x15u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x10000) == 0)
  {
LABEL_23:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 16), 0x17u);
  }
LABEL_46:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0x16u);
  if ((*(_DWORD *)(v3 + 108) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16), 0x17u);
  return this;
}

uint64_t CMMsl::PDRFeatures::hash_value(CMMsl::PDRFeatures *this)
{
  int v1;
  double v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  double v45;

  v1 = *((_DWORD *)this + 27);
  if ((v1 & 1) == 0)
  {
    v2 = 0.0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_3;
LABEL_72:
    v4 = 0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_6;
LABEL_73:
    v6 = 0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_9;
LABEL_74:
    v8 = 0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_12;
LABEL_75:
    v10 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_15;
LABEL_76:
    v12 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_18;
LABEL_77:
    v14 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_21;
LABEL_78:
    v16 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_24;
LABEL_79:
    v18 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_27;
LABEL_80:
    v20 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_30;
LABEL_81:
    v22 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_33;
LABEL_82:
    v24 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_36;
LABEL_83:
    v26 = 0;
    if ((v1 & 0x400000) != 0)
      goto LABEL_39;
LABEL_84:
    v28 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_42;
LABEL_85:
    v30 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_45;
LABEL_86:
    v32 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_48;
LABEL_87:
    v34 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_51;
LABEL_88:
    v36 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_54;
LABEL_89:
    v38 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_57;
LABEL_90:
    v40 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_60;
LABEL_91:
    v42 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_63;
    goto LABEL_92;
  }
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 0x40000) == 0)
    goto LABEL_72;
LABEL_3:
  v3 = *((float *)this + 22);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((v1 & 0x100000) == 0)
    goto LABEL_73;
LABEL_6:
  v5 = *((float *)this + 24);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 0x80000) == 0)
    goto LABEL_74;
LABEL_9:
  v7 = *((float *)this + 23);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x200000) == 0)
    goto LABEL_75;
LABEL_12:
  v9 = *((float *)this + 25);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 0x400) == 0)
    goto LABEL_76;
LABEL_15:
  v11 = *((float *)this + 14);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_77;
LABEL_18:
  v13 = *((float *)this + 16);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_78;
LABEL_21:
  v15 = *((float *)this + 15);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_79;
LABEL_24:
  v17 = *((float *)this + 17);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_80;
LABEL_27:
  v19 = *((float *)this + 6);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_81;
LABEL_30:
  v21 = *((float *)this + 8);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_82;
LABEL_33:
  v23 = *((float *)this + 7);
  v24 = LODWORD(v23);
  if (v23 == 0.0)
    v24 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_83;
LABEL_36:
  v25 = *((float *)this + 9);
  v26 = LODWORD(v25);
  if (v25 == 0.0)
    v26 = 0;
  if ((v1 & 0x400000) == 0)
    goto LABEL_84;
LABEL_39:
  v27 = *((float *)this + 26);
  v28 = LODWORD(v27);
  if (v27 == 0.0)
    v28 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_85;
LABEL_42:
  v29 = *((float *)this + 11);
  v30 = LODWORD(v29);
  if (v29 == 0.0)
    v30 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_86;
LABEL_45:
  v31 = *((float *)this + 10);
  v32 = LODWORD(v31);
  if (v31 == 0.0)
    v32 = 0;
  if ((v1 & 0x200) == 0)
    goto LABEL_87;
LABEL_48:
  v33 = *((float *)this + 13);
  v34 = LODWORD(v33);
  if (v33 == 0.0)
    v34 = 0;
  if ((v1 & 0x100) == 0)
    goto LABEL_88;
LABEL_51:
  v35 = *((float *)this + 12);
  v36 = LODWORD(v35);
  if (v35 == 0.0)
    v36 = 0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_89;
LABEL_54:
  v37 = *((float *)this + 19);
  v38 = LODWORD(v37);
  if (v37 == 0.0)
    v38 = 0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_90;
LABEL_57:
  v39 = *((float *)this + 18);
  v40 = LODWORD(v39);
  if (v39 == 0.0)
    v40 = 0;
  if ((v1 & 0x20000) == 0)
    goto LABEL_91;
LABEL_60:
  v41 = *((float *)this + 21);
  v42 = LODWORD(v41);
  if (v41 == 0.0)
    v42 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_63:
    v43 = *((float *)this + 20);
    v44 = LODWORD(v43);
    if (v43 == 0.0)
      v44 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_66;
LABEL_93:
    v45 = 0.0;
    return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v42 ^ v44 ^ *(_QWORD *)&v45;
  }
LABEL_92:
  v44 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_93;
LABEL_66:
  v45 = *((double *)this + 2);
  if (v45 == 0.0)
    v45 = 0.0;
  return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v42 ^ v44 ^ *(_QWORD *)&v45;
}

void CMMsl::PDRFenceReference::~PDRFenceReference(CMMsl::PDRFenceReference *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::PDRFenceReference::PDRFenceReference(CMMsl::PDRFenceReference *this, const CMMsl::PDRFenceReference *a2)
{
  char v2;
  uint64_t v3;

  *(_QWORD *)this = off_100353200;
  *((_DWORD *)this + 5) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) == 0)
  {
    v2 = 2;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return *(float *)&v3;
    goto LABEL_5;
  }
  v3 = *((_QWORD *)a2 + 1);
  *((_BYTE *)this + 20) = 1;
  *((_QWORD *)this + 1) = v3;
  v2 = 3;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    LODWORD(v3) = *((_DWORD *)a2 + 4);
    *((_BYTE *)this + 20) = v2;
    *((_DWORD *)this + 4) = v3;
  }
  return *(float *)&v3;
}

uint64_t CMMsl::PDRFenceReference::operator=(uint64_t a1, uint64_t a2, double a3, float a4)
{
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  int v9;
  _QWORD v11[2];
  int v12;
  int v13;

  if (a1 != a2)
  {
    v11[0] = off_100353200;
    v13 = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      LOBYTE(v13) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        a4 = *(float *)(a2 + 16);
        LOBYTE(v13) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v13;
    v13 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a3;
    v11[1] = v8;
    v9 = *(_DWORD *)(a1 + 16);
    *(float *)(a1 + 16) = a4;
    v12 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::PDRFenceReference *a2, CMMsl::PDRFenceReference *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

uint64_t CMMsl::PDRFenceReference::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  _QWORD v9[2];
  int v10;
  int v11;

  if (a1 != a2)
  {
    v9[0] = off_100353200;
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a2 + 16);
    v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v9[1] = v7;
    LODWORD(v4) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v5;
    v10 = v4;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::PDRFenceReference::formatText(CMMsl::PDRFenceReference *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "radius", *((float *)this + 4));
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PDRFenceReference::readFrom(CMMsl::PDRFenceReference *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_28;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 4;
      }
      else
      {
        if ((_DWORD)v20 != 1)
        {
          result = PB::Reader::skip(a2, v20, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          goto LABEL_33;
        }
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
        {
LABEL_28:
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_33;
        }
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 8;
      }
      *((_QWORD *)a2 + 1) = v2;
LABEL_33:
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::PDRFenceReference::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 16), 2u);
  return this;
}

uint64_t CMMsl::PDRFenceReference::hash_value(CMMsl::PDRFenceReference *this)
{
  double v1;
  float v2;
  uint64_t v3;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_9:
    v3 = 0;
    return v3 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_9;
LABEL_3:
  v2 = *((float *)this + 4);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  return v3 ^ *(_QWORD *)&v1;
}

void CMMsl::PDRFenceState::~PDRFenceState(CMMsl::PDRFenceState *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::PDRFenceState::PDRFenceState(uint64_t this, const CMMsl::PDRFenceState *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  char v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;

  *(_QWORD *)this = off_100353238;
  *(_DWORD *)(this + 68) = 0;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_WORD *)(this + 68) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_WORD *)a2 + 34);
    if ((v2 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_WORD *)a2 + 34) & 0x200) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 13);
    v3 |= 0x200u;
    *(_WORD *)(this + 68) = v3;
    *(_DWORD *)(this + 52) = v5;
    v2 = *((_WORD *)a2 + 34);
  }
LABEL_6:
  if ((v2 & 0x400) != 0)
  {
    v6 = *((_DWORD *)a2 + 14);
    v3 |= 0x400u;
    *(_WORD *)(this + 68) = v3;
    *(_DWORD *)(this + 56) = v6;
    v2 = *((_WORD *)a2 + 34);
    if ((v2 & 0x800) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_20;
    }
  }
  else if ((v2 & 0x800) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 15);
  v3 |= 0x800u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 60) = v7;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  v8 = *((_DWORD *)a2 + 10);
  v3 |= 0x40u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 40) = v8;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  v9 = *((_DWORD *)a2 + 11);
  v3 |= 0x80u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 44) = v9;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_23;
  }
LABEL_22:
  v10 = *((_DWORD *)a2 + 12);
  v3 |= 0x100u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 48) = v10;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x1000) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0)
      goto LABEL_13;
    goto LABEL_24;
  }
LABEL_23:
  v11 = *((_BYTE *)a2 + 64);
  v3 |= 0x1000u;
  *(_WORD *)(this + 68) = v3;
  *(_BYTE *)(this + 64) = v11;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0)
      goto LABEL_14;
    goto LABEL_25;
  }
LABEL_24:
  v12 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 68) = v3;
  *(_QWORD *)(this + 16) = v12;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 8) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0)
      goto LABEL_15;
    goto LABEL_26;
  }
LABEL_25:
  v13 = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 28) = v13;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x10) == 0)
  {
LABEL_15:
    if ((v2 & 0x20) == 0)
      goto LABEL_16;
    goto LABEL_27;
  }
LABEL_26:
  v14 = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 32) = v14;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x20) == 0)
  {
LABEL_16:
    if ((v2 & 4) == 0)
      return this;
LABEL_28:
    v16 = *((_DWORD *)a2 + 6);
    *(_WORD *)(this + 68) = v3 | 4;
    *(_DWORD *)(this + 24) = v16;
    return this;
  }
LABEL_27:
  v15 = *((_DWORD *)a2 + 9);
  v3 |= 0x20u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 36) = v15;
  if ((*((_WORD *)a2 + 34) & 4) != 0)
    goto LABEL_28;
  return this;
}

CMMsl *CMMsl::PDRFenceState::operator=(CMMsl *a1, const CMMsl::PDRFenceState *a2)
{
  CMMsl::PDRFenceState *v3;
  _BYTE v5[72];

  if (a1 != a2)
  {
    CMMsl::PDRFenceState::PDRFenceState((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::PDRFenceState *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::PDRFenceState *a2, CMMsl::PDRFenceState *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  float result;
  int v7;

  v3 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LOBYTE(v3) = *((_BYTE *)this + 64);
  *((_BYTE *)this + 64) = *((_BYTE *)a2 + 64);
  *((_BYTE *)a2 + 64) = v3;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  LODWORD(v5) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v5;
  LODWORD(v5) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  result = *((float *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((float *)a2 + 9) = result;
  v7 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v7;
  return result;
}

float CMMsl::PDRFenceState::PDRFenceState(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100353238;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a2 + 68) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return result;
}

CMMsl *CMMsl::PDRFenceState::operator=(CMMsl *this, uint64_t a2, CMMsl::PDRFenceState *a3)
{
  void (**v5)(CMMsl::PDRFenceState *__hidden);
  __int128 v6;
  int v7;
  __int128 v8;
  __int128 v9;
  int v10;
  char v11;
  int v12;

  if (this != (CMMsl *)a2)
  {
    v5 = off_100353238;
    v12 = *(_DWORD *)(a2 + 68);
    *(_DWORD *)(a2 + 68) = 0;
    v10 = *(_DWORD *)(a2 + 60);
    v9 = *(_OWORD *)(a2 + 44);
    v11 = *(_BYTE *)(a2 + 64);
    v6 = *(_OWORD *)(a2 + 8);
    v8 = *(_OWORD *)(a2 + 28);
    v7 = *(_DWORD *)(a2 + 24);
    CMMsl::swap(this, (CMMsl::PDRFenceState *)&v5, a3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return this;
}

uint64_t CMMsl::PDRFenceState::formatText(CMMsl::PDRFenceState *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x1000) != 0)
  {
    PB::TextFormatter::format(a2, "didExceedRadius", *((_BYTE *)this + 64));
    v5 = *((_WORD *)this + 34);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "fenceID", *((_DWORD *)this + 6));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "positionRefX", *((float *)this + 7));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "positionRefY", *((float *)this + 8));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "positionRefZ", *((float *)this + 9));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "positionUncX", *((float *)this + 10));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "positionUncY", *((float *)this + 11));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "positionUncZ", *((float *)this + 12));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "positionX", *((float *)this + 13));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "positionY", *((float *)this + 14));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 1) == 0)
      goto LABEL_13;
LABEL_27:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    if ((*((_WORD *)this + 34) & 2) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_14;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "positionZ", *((float *)this + 15));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 1) != 0)
    goto LABEL_27;
LABEL_13:
  if ((v5 & 2) != 0)
LABEL_14:
    PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PDRFenceState::readFrom(CMMsl::PDRFenceState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  unint64_t v31;
  char v32;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 34) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_59;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_50;
            case 2u:
              *((_WORD *)this + 34) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_59;
              *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_77;
            case 3u:
              *((_WORD *)this + 34) |= 0x400u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_59;
              *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_77;
            case 4u:
              *((_WORD *)this + 34) |= 0x800u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_59;
              *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_77;
            case 5u:
              *((_WORD *)this + 34) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_59;
              *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_77;
            case 6u:
              *((_WORD *)this + 34) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_59;
              *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_77;
            case 7u:
              *((_WORD *)this + 34) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_59;
              *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_77;
            case 8u:
              *((_WORD *)this + 34) |= 0x1000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v22 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v22 = v21 != 0;
              }
              *((_BYTE *)this + 64) = v22;
              goto LABEL_84;
            case 9u:
              *((_WORD *)this + 34) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_59;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_50:
              v2 = *((_QWORD *)a2 + 1) + 8;
              goto LABEL_78;
            case 0xAu:
              *((_WORD *)this + 34) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_59;
              *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_77;
            case 0xBu:
              *((_WORD *)this + 34) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_59;
              *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_77;
            case 0xCu:
              *((_WORD *)this + 34) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_77:
                v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_78:
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_59:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_84;
            case 0xDu:
              *((_WORD *)this + 34) |= 4u;
              v23 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v24 = *(_QWORD *)a2;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                v29 = 0;
                v30 = 0;
                v27 = 0;
                if (v2 <= v23)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_83;
                  }
                  v31 = v23++;
                  v32 = *(_BYTE *)(v24 + v31);
                  *((_QWORD *)a2 + 1) = v23;
                  v27 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0)
                    break;
                  v29 += 7;
                  v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_82:
                    v2 = v31 + 1;
                    goto LABEL_83;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v27) = 0;
                goto LABEL_82;
              }
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v2 = v23 + 1;
                *((_QWORD *)a2 + 1) = v23 + 1;
                v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0)
                  goto LABEL_83;
                v25 += 7;
                v23 = v2;
                v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_83:
              *((_DWORD *)this + 6) = v27;
LABEL_84:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_84;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::PDRFenceState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 68);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 0x200) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((*(_WORD *)(this + 68) & 0x200) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 2u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 0x800) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 3u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x800) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 4u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 5u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 6u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 7u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 64), 8u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 9u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 0xAu);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 0xBu);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x20) == 0)
  {
LABEL_13:
    if ((v4 & 4) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 0xDu);
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 0xCu);
  if ((*(_WORD *)(v3 + 68) & 4) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 0xDu);
  return this;
}

uint64_t CMMsl::PDRFenceState::hash_value(CMMsl::PDRFenceState *this)
{
  __int16 v1;
  double v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *((_WORD *)this + 34);
  if ((v1 & 1) == 0)
  {
    v2 = 0.0;
    if ((*((_WORD *)this + 34) & 0x200) != 0)
      goto LABEL_3;
LABEL_38:
    v4 = 0;
    if ((*((_WORD *)this + 34) & 0x400) != 0)
      goto LABEL_6;
LABEL_39:
    v6 = 0;
    if ((*((_WORD *)this + 34) & 0x800) != 0)
      goto LABEL_9;
LABEL_40:
    v8 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_12;
LABEL_41:
    v10 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_15;
LABEL_42:
    v12 = 0;
    if ((*((_WORD *)this + 34) & 0x100) != 0)
      goto LABEL_18;
LABEL_43:
    v14 = 0;
    if ((*((_WORD *)this + 34) & 0x1000) != 0)
      goto LABEL_21;
    goto LABEL_44;
  }
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_WORD *)this + 34) & 0x200) == 0)
    goto LABEL_38;
LABEL_3:
  v3 = *((float *)this + 13);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((*((_WORD *)this + 34) & 0x400) == 0)
    goto LABEL_39;
LABEL_6:
  v5 = *((float *)this + 14);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((*((_WORD *)this + 34) & 0x800) == 0)
    goto LABEL_40;
LABEL_9:
  v7 = *((float *)this + 15);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_41;
LABEL_12:
  v9 = *((float *)this + 10);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_42;
LABEL_15:
  v11 = *((float *)this + 11);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((*((_WORD *)this + 34) & 0x100) == 0)
    goto LABEL_43;
LABEL_18:
  v13 = *((float *)this + 12);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((*((_WORD *)this + 34) & 0x1000) != 0)
  {
LABEL_21:
    v15 = *((unsigned __int8 *)this + 64);
    if ((v1 & 2) != 0)
      goto LABEL_22;
LABEL_45:
    v16 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_25;
LABEL_46:
    v18 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_28;
LABEL_47:
    v20 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_31;
    goto LABEL_48;
  }
LABEL_44:
  v15 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_45;
LABEL_22:
  v16 = *((double *)this + 2);
  if (v16 == 0.0)
    v16 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_46;
LABEL_25:
  v17 = *((float *)this + 7);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_47;
LABEL_28:
  v19 = *((float *)this + 8);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_31:
    v21 = *((float *)this + 9);
    v22 = LODWORD(v21);
    if (v21 == 0.0)
      v22 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_34;
LABEL_49:
    v23 = 0;
    return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v15 ^ *(_QWORD *)&v16 ^ v18 ^ v20 ^ v22 ^ v23;
  }
LABEL_48:
  v22 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_49;
LABEL_34:
  v23 = *((unsigned int *)this + 6);
  return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v15 ^ *(_QWORD *)&v16 ^ v18 ^ v20 ^ v22 ^ v23;
}

void CMMsl::PDRImpulse::~PDRImpulse(CMMsl::PDRImpulse *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::PDRImpulse::PDRImpulse(CMMsl::PDRImpulse *this, const CMMsl::PDRImpulse *a2)
{
  char v2;
  int v3;
  double result;

  *(_QWORD *)this = off_100353270;
  *((_DWORD *)this + 5) = 0;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
    v3 = *((_DWORD *)a2 + 4);
    *((_BYTE *)this + 20) = 2;
    *((_DWORD *)this + 4) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 1);
    *((_BYTE *)this + 20) = v2;
    *((double *)this + 1) = result;
  }
  return result;
}

uint64_t CMMsl::PDRImpulse::operator=(uint64_t a1, uint64_t a2, double a3)
{
  void (**v4)(CMMsl::PDRImpulse *__hidden);
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;

  if (a1 != a2)
  {
    v4 = off_100353270;
    v11[0] = off_100353270;
    HIDWORD(v12) = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 2) != 0)
    {
      LODWORD(v4) = *(_DWORD *)(a2 + 16);
      BYTE4(v12) = 2;
      v6 = 3;
      if ((v5 & 1) != 0)
      {
LABEL_6:
        a3 = *(double *)(a2 + 8);
        BYTE4(v12) = v6;
      }
    }
    else
    {
      v6 = 1;
      if ((*(_BYTE *)(a2 + 20) & 1) != 0)
        goto LABEL_6;
    }
    v7 = HIDWORD(v12);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = (_DWORD)v4;
    *(_DWORD *)(a1 + 20) = v7;
    *(double *)(a1 + 8) = a3;
    v11[1] = v9;
    v12 = v8;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRImpulse *a2, CMMsl::PDRImpulse *a3)
{
  int v3;
  int v4;
  double result;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

uint64_t CMMsl::PDRImpulse::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  if (a1 != a2)
  {
    v8[0] = off_100353270;
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    v6 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    v8[1] = v6;
    v8[2] = v5;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::PDRImpulse::formatText(CMMsl::PDRImpulse *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "type", *((_DWORD *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PDRImpulse::readFrom(CMMsl::PDRImpulse *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 20) |= 2u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_47;
            }
            v30 = v21++;
            v31 = *(_BYTE *)(v22 + v30);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v25) = 0;
LABEL_46:
          v2 = v30 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v25;
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PDRImpulse::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 16), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8), 2u);
  return this;
}

uint64_t CMMsl::PDRImpulse::hash_value(CMMsl::PDRImpulse *this)
{
  uint64_t v1;
  double v2;

  if ((*((_BYTE *)this + 20) & 2) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 20) & 1) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0.0;
    return *(_QWORD *)&v2 ^ v1;
  }
  v1 = *((int *)this + 4);
  if ((*((_BYTE *)this + 20) & 1) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  return *(_QWORD *)&v2 ^ v1;
}

void CMMsl::PDRPedestrianClassifierState::~PDRPedestrianClassifierState(CMMsl::PDRPedestrianClassifierState *this)
{
  void *v2;

  *(_QWORD *)this = off_1003532A8;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::PDRPedestrianClassifierState::~PDRPedestrianClassifierState(this);
  operator delete();
}

CMMsl::PDRPedestrianClassifierState *CMMsl::PDRPedestrianClassifierState::PDRPedestrianClassifierState(CMMsl::PDRPedestrianClassifierState *this, const CMMsl::PDRPedestrianClassifierState *a2)
{
  char *v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  *(_QWORD *)this = off_1003532A8;
  *((_QWORD *)this + 1) = 0;
  v4 = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 13) = 0;
  if ((*((_BYTE *)a2 + 52) & 1) != 0)
  {
    v6 = *((_QWORD *)a2 + 4);
    *((_BYTE *)this + 52) = 1;
    *((_QWORD *)this + 4) = v6;
    v5 = 5;
    if ((*((_BYTE *)a2 + 52) & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 4;
  if ((*((_BYTE *)a2 + 52) & 4) != 0)
  {
LABEL_5:
    v7 = *((_BYTE *)a2 + 48);
    *((_BYTE *)this + 52) = v5;
    *((_BYTE *)this + 48) = v7;
  }
LABEL_6:
  if (this != a2)
    sub_100020CE4(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  if ((*((_BYTE *)a2 + 52) & 2) != 0)
  {
    v8 = *((_QWORD *)a2 + 5);
    *((_BYTE *)this + 52) |= 2u;
    *((_QWORD *)this + 5) = v8;
  }
  return this;
}

uint64_t CMMsl::PDRPedestrianClassifierState::operator=(uint64_t a1, const CMMsl::PDRPedestrianClassifierState *a2)
{
  int v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE v8[8];
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  char v12;
  int v13;

  if ((const CMMsl::PDRPedestrianClassifierState *)a1 != a2)
  {
    CMMsl::PDRPedestrianClassifierState::PDRPedestrianClassifierState((CMMsl::PDRPedestrianClassifierState *)v8, a2);
    v3 = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a1 + 52) = v13;
    v13 = v3;
    LOBYTE(v3) = *(_BYTE *)(a1 + 48);
    *(_BYTE *)(a1 + 48) = v12;
    v12 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v10;
    v10 = v5;
    v6 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v11;
    v11 = v6;
    CMMsl::PDRPedestrianClassifierState::~PDRPedestrianClassifierState((CMMsl::PDRPedestrianClassifierState *)v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRPedestrianClassifierState *a2, CMMsl::PDRPedestrianClassifierState *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  v3 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  LOBYTE(v3) = *((_BYTE *)this + 48);
  *((_BYTE *)this + 48) = *((_BYTE *)a2 + 48);
  *((_BYTE *)a2 + 48) = v3;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  result = *((double *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((double *)a2 + 5) = result;
  return result;
}

uint64_t CMMsl::PDRPedestrianClassifierState::PDRPedestrianClassifierState(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_1003532A8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

{
  *(_QWORD *)a1 = off_1003532A8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t CMMsl::PDRPedestrianClassifierState::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  uint64_t v5;
  __int128 v6;
  char v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  void (**v13)(CMMsl::PDRPedestrianClassifierState *__hidden);
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  char v17;
  int v18;

  if (a1 != a2)
  {
    v13 = off_1003532A8;
    v3 = *(_DWORD *)(a2 + 52);
    *(_DWORD *)(a2 + 52) = 0;
    v4 = *(_BYTE *)(a2 + 48);
    v5 = *(_QWORD *)(a2 + 24);
    v6 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v18 = *(_DWORD *)(a1 + 52);
    v7 = *(_BYTE *)(a1 + 48);
    *(_BYTE *)(a1 + 48) = v4;
    v17 = v7;
    v8 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    v14 = v8;
    v9 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v5;
    v15 = v9;
    v10 = *(_OWORD *)(a1 + 32);
    v11 = *(_OWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 52) = v3;
    *(_OWORD *)(a1 + 32) = v11;
    v16 = v10;
    CMMsl::PDRPedestrianClassifierState::~PDRPedestrianClassifierState((CMMsl::PDRPedestrianClassifierState *)&v13);
  }
  return a1;
}

uint64_t CMMsl::PDRPedestrianClassifierState::formatText(CMMsl::PDRPedestrianClassifierState *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;
  char v8;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 52) & 4) != 0)
    PB::TextFormatter::format(a2, "isPedestrian", *((_BYTE *)this + 48));
  v5 = (float *)*((_QWORD *)this + 1);
  v6 = (float *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "pedestrianClassProbability", v7);
  }
  v8 = *((_BYTE *)this + 52);
  if ((v8 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
    v8 = *((_BYTE *)this + 52);
  }
  if ((v8 & 2) != 0)
    PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 5));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::PDRPedestrianClassifierState::readFrom(CMMsl::PDRPedestrianClassifierState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  char *v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  BOOL v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  _DWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  _DWORD *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  int v54;
  unint64_t v55;
  _BYTE v57[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 8);
    v9 = (char *)this + 24;
    while (1)
    {
      v10 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        if (v12++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v22 = v13 & 7;
      if (v22 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 52) |= 1u;
          v23 = *((_QWORD *)a2 + 1);
          if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_81;
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v23);
          goto LABEL_55;
        case 2u:
          *((_BYTE *)this + 52) |= 4u;
          v24 = *((_QWORD *)a2 + 1);
          if (v24 >= *((_QWORD *)a2 + 2))
          {
            v27 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v25 = v24 + 1;
            v26 = *(unsigned __int8 *)(*(_QWORD *)a2 + v24);
            *((_QWORD *)a2 + 1) = v25;
            v27 = v26 != 0;
          }
          *((_BYTE *)this + 48) = v27;
          goto LABEL_82;
        case 3u:
          if (v22 == 2)
          {
            if ((PB::Reader::placeMark(a2, v57) & 1) != 0)
              return 0;
            v28 = *((_QWORD *)a2 + 1);
            v29 = *((_QWORD *)a2 + 2);
            while (v28 < v29 && !*((_BYTE *)a2 + 24))
            {
              v31 = (char *)*((_QWORD *)this + 2);
              v30 = *((_QWORD *)this + 3);
              if ((unint64_t)v31 >= v30)
              {
                v33 = (char *)*v8;
                v34 = (v31 - (_BYTE *)*v8) >> 2;
                v35 = v34 + 1;
                if ((unint64_t)(v34 + 1) >> 62)
                  goto LABEL_91;
                v36 = v30 - (_QWORD)v33;
                if (v36 >> 1 > v35)
                  v35 = v36 >> 1;
                if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
                  v37 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v37 = v35;
                if (v37)
                {
                  v38 = (char *)sub_100020E2C((uint64_t)v9, v37);
                  v33 = (char *)*((_QWORD *)this + 1);
                  v31 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v38 = 0;
                }
                v39 = &v38[4 * v34];
                *(_DWORD *)v39 = 0;
                v32 = v39 + 4;
                while (v31 != v33)
                {
                  v40 = *((_DWORD *)v31 - 1);
                  v31 -= 4;
                  *((_DWORD *)v39 - 1) = v40;
                  v39 -= 4;
                }
                *((_QWORD *)this + 1) = v39;
                *((_QWORD *)this + 2) = v32;
                *((_QWORD *)this + 3) = &v38[4 * v37];
                if (v33)
                  operator delete(v33);
              }
              else
              {
                *(_DWORD *)v31 = 0;
                v32 = v31 + 4;
              }
              *((_QWORD *)this + 2) = v32;
              v41 = *((_QWORD *)a2 + 1);
              if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((_QWORD *)a2 + 2))
              {
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v32 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v41);
              v29 = *((_QWORD *)a2 + 2);
              v28 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v28;
            }
            PB::Reader::recallMark(a2, v57);
          }
          else
          {
            v45 = (char *)*((_QWORD *)this + 2);
            v44 = *((_QWORD *)this + 3);
            if ((unint64_t)v45 >= v44)
            {
              v47 = (char *)*v8;
              v48 = (v45 - (_BYTE *)*v8) >> 2;
              v49 = v48 + 1;
              if ((unint64_t)(v48 + 1) >> 62)
LABEL_91:
                sub_10000D5F8();
              v50 = v44 - (_QWORD)v47;
              if (v50 >> 1 > v49)
                v49 = v50 >> 1;
              if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
                v51 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v51 = v49;
              if (v51)
              {
                v52 = (char *)sub_100020E2C((uint64_t)v9, v51);
                v47 = (char *)*((_QWORD *)this + 1);
                v45 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v52 = 0;
              }
              v53 = &v52[4 * v48];
              *(_DWORD *)v53 = 0;
              v46 = v53 + 4;
              while (v45 != v47)
              {
                v54 = *((_DWORD *)v45 - 1);
                v45 -= 4;
                *((_DWORD *)v53 - 1) = v54;
                v53 -= 4;
              }
              *((_QWORD *)this + 1) = v53;
              *((_QWORD *)this + 2) = v46;
              *((_QWORD *)this + 3) = &v52[4 * v51];
              if (v47)
                operator delete(v47);
            }
            else
            {
              *(_DWORD *)v45 = 0;
              v46 = v45 + 4;
            }
            *((_QWORD *)this + 2) = v46;
            v55 = *((_QWORD *)a2 + 1);
            if (v55 <= 0xFFFFFFFFFFFFFFFBLL && v55 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v46 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v55);
              v43 = *((_QWORD *)a2 + 1) + 4;
LABEL_56:
              *((_QWORD *)a2 + 1) = v43;
            }
            else
            {
LABEL_81:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_82:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || *((_BYTE *)a2 + 24))
            return v4 == 0;
          break;
        case 4u:
          *((_BYTE *)this + 52) |= 2u;
          v42 = *((_QWORD *)a2 + 1);
          if (v42 > 0xFFFFFFFFFFFFFFF7 || v42 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_81;
          *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v42);
LABEL_55:
          v43 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_56;
        default:
          if ((PB::Reader::skip(a2, v13 >> 3, v22, 0) & 1) == 0)
            return 0;
          goto LABEL_82;
      }
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_21;
      v17 += 7;
      v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PDRPedestrianClassifierState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  float *v5;
  float *v6;
  float v7;

  v3 = this;
  v4 = *(_BYTE *)(this + 52);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32), 1u);
    v4 = *(_BYTE *)(v3 + 52);
  }
  if ((v4 & 4) != 0)
    this = PB::Writer::write(a2, *(_BYTE *)(v3 + 48), 2u);
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7, 3u);
  }
  if ((*(_BYTE *)(v3 + 52) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 40), 4u);
  return this;
}

uint64_t CMMsl::PDRPedestrianClassifierState::hash_value(CMMsl::PDRPedestrianClassifierState *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;

  if ((*((_BYTE *)this + 52) & 1) != 0)
  {
    if (*((double *)this + 4) == 0.0)
      v2 = 0;
    else
      v2 = *((_QWORD *)this + 4);
    if ((*((_BYTE *)this + 52) & 4) != 0)
      goto LABEL_3;
  }
  else
  {
    v2 = 0;
    if ((*((_BYTE *)this + 52) & 4) != 0)
    {
LABEL_3:
      v3 = *((unsigned __int8 *)this + 48);
      goto LABEL_9;
    }
  }
  v3 = 0;
LABEL_9:
  v4 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  if ((*((_BYTE *)this + 52) & 2) != 0)
  {
    v5 = *((double *)this + 5);
    if (v5 == 0.0)
      v5 = 0.0;
  }
  else
  {
    v5 = 0.0;
  }
  return v3 ^ v2 ^ *(_QWORD *)&v5 ^ v4;
}

void CMMsl::PDRPlacementClassifierState::~PDRPlacementClassifierState(CMMsl::PDRPlacementClassifierState *this)
{
  void *v2;

  *(_QWORD *)this = off_1003532E0;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::PDRPlacementClassifierState::~PDRPlacementClassifierState(this);
  operator delete();
}

CMMsl::PDRPlacementClassifierState *CMMsl::PDRPlacementClassifierState::PDRPlacementClassifierState(CMMsl::PDRPlacementClassifierState *this, const CMMsl::PDRPlacementClassifierState *a2)
{
  char *v4;
  char v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  *(_QWORD *)this = off_1003532E0;
  *((_QWORD *)this + 1) = 0;
  v4 = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 13) = 0;
  if ((*((_BYTE *)a2 + 52) & 1) != 0)
  {
    v6 = *((_QWORD *)a2 + 4);
    *((_BYTE *)this + 52) = 1;
    *((_QWORD *)this + 4) = v6;
    v5 = 5;
    if ((*((_BYTE *)a2 + 52) & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 4;
  if ((*((_BYTE *)a2 + 52) & 4) != 0)
  {
LABEL_5:
    v7 = *((_DWORD *)a2 + 12);
    *((_BYTE *)this + 52) = v5;
    *((_DWORD *)this + 12) = v7;
  }
LABEL_6:
  if (this != a2)
    sub_100020CE4(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  if ((*((_BYTE *)a2 + 52) & 2) != 0)
  {
    v8 = *((_QWORD *)a2 + 5);
    *((_BYTE *)this + 52) |= 2u;
    *((_QWORD *)this + 5) = v8;
  }
  return this;
}

uint64_t CMMsl::PDRPlacementClassifierState::operator=(uint64_t a1, const CMMsl::PDRPlacementClassifierState *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE v8[8];
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  if ((const CMMsl::PDRPlacementClassifierState *)a1 != a2)
  {
    CMMsl::PDRPlacementClassifierState::PDRPlacementClassifierState((CMMsl::PDRPlacementClassifierState *)v8, a2);
    v3 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v12;
    v12 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v10;
    v10 = v5;
    v6 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v11;
    v11 = v6;
    CMMsl::PDRPlacementClassifierState::~PDRPlacementClassifierState((CMMsl::PDRPlacementClassifierState *)v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRPlacementClassifierState *a2, CMMsl::PDRPlacementClassifierState *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  v3 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  result = *((double *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((double *)a2 + 5) = result;
  return result;
}

uint64_t CMMsl::PDRPlacementClassifierState::PDRPlacementClassifierState(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_1003532E0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

{
  *(_QWORD *)a1 = off_1003532E0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t CMMsl::PDRPlacementClassifierState::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  void (**v11)(CMMsl::PDRPlacementClassifierState *__hidden);
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  if (a1 != a2)
  {
    v11 = off_1003532E0;
    v3 = *(_QWORD *)(a2 + 24);
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v5 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 52) = 0;
    v15 = *(_QWORD *)(a1 + 48);
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v4;
    v12 = v6;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v3;
    v13 = v7;
    v8 = *(_OWORD *)(a1 + 32);
    v9 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = v5;
    *(_OWORD *)(a1 + 32) = v9;
    v14 = v8;
    CMMsl::PDRPlacementClassifierState::~PDRPlacementClassifierState((CMMsl::PDRPlacementClassifierState *)&v11);
  }
  return a1;
}

uint64_t CMMsl::PDRPlacementClassifierState::formatText(CMMsl::PDRPlacementClassifierState *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;
  char v8;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 52) & 4) != 0)
    PB::TextFormatter::format(a2, "placement", *((_DWORD *)this + 12));
  v5 = (float *)*((_QWORD *)this + 1);
  v6 = (float *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "placementProbability", v7);
  }
  v8 = *((_BYTE *)this + 52);
  if ((v8 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
    v8 = *((_BYTE *)this + 52);
  }
  if ((v8 & 2) != 0)
    PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 5));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::PDRPlacementClassifierState::readFrom(CMMsl::PDRPlacementClassifierState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  char *v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  _DWORD *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  unint64_t v50;
  char v51;
  unint64_t v52;
  char *v53;
  _DWORD *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  int v62;
  unint64_t v63;
  _BYTE v66[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 8);
    v9 = (char *)this + 24;
    while (1)
    {
      v10 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v16 = v12++ > 8;
        if (v16)
          goto LABEL_20;
      }
LABEL_21:
      v22 = v13 & 7;
      if (v22 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 52) |= 1u;
          v23 = *((_QWORD *)a2 + 1);
          if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_95;
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v23);
          goto LABEL_60;
        case 2u:
          *((_BYTE *)this + 52) |= 4u;
          v24 = *((_QWORD *)a2 + 1);
          v25 = *((_QWORD *)a2 + 2);
          v26 = *(_QWORD *)a2;
          if (v24 <= 0xFFFFFFFFFFFFFFF5 && v24 + 10 <= v25)
          {
            v27 = 0;
            v28 = 0;
            v29 = 0;
            do
            {
              v30 = v24 + 1;
              *((_QWORD *)a2 + 1) = v24 + 1;
              v31 = *(_BYTE *)(v26 + v24);
              v29 |= (unint64_t)(v31 & 0x7F) << v27;
              if ((v31 & 0x80) == 0)
                goto LABEL_84;
              v27 += 7;
              v24 = v30;
              v16 = v28++ > 8;
            }
            while (!v16);
LABEL_70:
            LODWORD(v29) = 0;
            goto LABEL_84;
          }
          v48 = 0;
          v49 = 0;
          v29 = 0;
          if (v25 <= v24)
            v25 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v25 == v24)
            {
              LODWORD(v29) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v50 = v24 + 1;
              v51 = *(_BYTE *)(v26 + v24);
              *((_QWORD *)a2 + 1) = v50;
              v29 |= (unint64_t)(v51 & 0x7F) << v48;
              if (v51 < 0)
              {
                v48 += 7;
                v24 = v50;
                v16 = v49++ > 8;
                if (v16)
                  goto LABEL_70;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v29) = 0;
            }
            break;
          }
LABEL_84:
          *((_DWORD *)this + 12) = v29;
          goto LABEL_96;
        case 3u:
          if (v22 == 2)
          {
            if ((PB::Reader::placeMark(a2, v66) & 1) != 0)
              return 0;
            v32 = *((_QWORD *)a2 + 1);
            v33 = *((_QWORD *)a2 + 2);
            while (v32 < v33 && !*((_BYTE *)a2 + 24))
            {
              v35 = (char *)*((_QWORD *)this + 2);
              v34 = *((_QWORD *)this + 3);
              if ((unint64_t)v35 >= v34)
              {
                v37 = (char *)*v8;
                v38 = (v35 - (_BYTE *)*v8) >> 2;
                v39 = v38 + 1;
                if ((unint64_t)(v38 + 1) >> 62)
                  goto LABEL_107;
                v40 = v34 - (_QWORD)v37;
                if (v40 >> 1 > v39)
                  v39 = v40 >> 1;
                if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
                  v41 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v41 = v39;
                if (v41)
                {
                  v42 = (char *)sub_100020E2C((uint64_t)v9, v41);
                  v37 = (char *)*((_QWORD *)this + 1);
                  v35 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v42 = 0;
                }
                v43 = &v42[4 * v38];
                *(_DWORD *)v43 = 0;
                v36 = v43 + 4;
                while (v35 != v37)
                {
                  v44 = *((_DWORD *)v35 - 1);
                  v35 -= 4;
                  *((_DWORD *)v43 - 1) = v44;
                  v43 -= 4;
                }
                *((_QWORD *)this + 1) = v43;
                *((_QWORD *)this + 2) = v36;
                *((_QWORD *)this + 3) = &v42[4 * v41];
                if (v37)
                  operator delete(v37);
              }
              else
              {
                *(_DWORD *)v35 = 0;
                v36 = v35 + 4;
              }
              *((_QWORD *)this + 2) = v36;
              v45 = *((_QWORD *)a2 + 1);
              if (v45 > 0xFFFFFFFFFFFFFFFBLL || v45 + 4 > *((_QWORD *)a2 + 2))
              {
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v36 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v45);
              v33 = *((_QWORD *)a2 + 2);
              v32 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v32;
            }
            PB::Reader::recallMark(a2, v66);
          }
          else
          {
            v53 = (char *)*((_QWORD *)this + 2);
            v52 = *((_QWORD *)this + 3);
            if ((unint64_t)v53 >= v52)
            {
              v55 = (char *)*v8;
              v56 = (v53 - (_BYTE *)*v8) >> 2;
              v57 = v56 + 1;
              if ((unint64_t)(v56 + 1) >> 62)
LABEL_107:
                sub_10000D5F8();
              v58 = v52 - (_QWORD)v55;
              if (v58 >> 1 > v57)
                v57 = v58 >> 1;
              if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
                v59 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v59 = v57;
              if (v59)
              {
                v60 = (char *)sub_100020E2C((uint64_t)v9, v59);
                v55 = (char *)*((_QWORD *)this + 1);
                v53 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v60 = 0;
              }
              v61 = &v60[4 * v56];
              *(_DWORD *)v61 = 0;
              v54 = v61 + 4;
              while (v53 != v55)
              {
                v62 = *((_DWORD *)v53 - 1);
                v53 -= 4;
                *((_DWORD *)v61 - 1) = v62;
                v61 -= 4;
              }
              *((_QWORD *)this + 1) = v61;
              *((_QWORD *)this + 2) = v54;
              *((_QWORD *)this + 3) = &v60[4 * v59];
              if (v55)
                operator delete(v55);
            }
            else
            {
              *(_DWORD *)v53 = 0;
              v54 = v53 + 4;
            }
            *((_QWORD *)this + 2) = v54;
            v63 = *((_QWORD *)a2 + 1);
            if (v63 <= 0xFFFFFFFFFFFFFFFBLL && v63 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v54 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v63);
              v47 = *((_QWORD *)a2 + 1) + 4;
LABEL_61:
              *((_QWORD *)a2 + 1) = v47;
            }
            else
            {
LABEL_95:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_96:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 4u:
          *((_BYTE *)this + 52) |= 2u;
          v46 = *((_QWORD *)a2 + 1);
          if (v46 > 0xFFFFFFFFFFFFFFF7 || v46 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_95;
          *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v46);
LABEL_60:
          v47 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_61;
        default:
          if ((PB::Reader::skip(a2, v13 >> 3, v22, 0) & 1) == 0)
            return 0;
          goto LABEL_96;
      }
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_21;
      v17 += 7;
      v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PDRPlacementClassifierState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  float *v5;
  float *v6;
  float v7;

  v3 = this;
  v4 = *(_BYTE *)(this + 52);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32), 1u);
    v4 = *(_BYTE *)(v3 + 52);
  }
  if ((v4 & 4) != 0)
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 2u);
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7, 3u);
  }
  if ((*(_BYTE *)(v3 + 52) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 40), 4u);
  return this;
}

uint64_t CMMsl::PDRPlacementClassifierState::hash_value(CMMsl::PDRPlacementClassifierState *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;

  if ((*((_BYTE *)this + 52) & 1) != 0)
  {
    if (*((double *)this + 4) == 0.0)
      v2 = 0;
    else
      v2 = *((_QWORD *)this + 4);
    if ((*((_BYTE *)this + 52) & 4) != 0)
      goto LABEL_3;
  }
  else
  {
    v2 = 0;
    if ((*((_BYTE *)this + 52) & 4) != 0)
    {
LABEL_3:
      v3 = *((unsigned int *)this + 12);
      goto LABEL_9;
    }
  }
  v3 = 0;
LABEL_9:
  v4 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  if ((*((_BYTE *)this + 52) & 2) != 0)
  {
    v5 = *((double *)this + 5);
    if (v5 == 0.0)
      v5 = 0.0;
  }
  else
  {
    v5 = 0.0;
  }
  return v3 ^ v2 ^ *(_QWORD *)&v5 ^ v4;
}

void CMMsl::PDRSpeedEstimatorState::~PDRSpeedEstimatorState(CMMsl::PDRSpeedEstimatorState *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::PDRSpeedEstimatorState::PDRSpeedEstimatorState(CMMsl::PDRSpeedEstimatorState *this, const CMMsl::PDRSpeedEstimatorState *a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)this = off_100353318;
  *((_DWORD *)this + 8) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 32) = 1;
    *((double *)this + 1) = result;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *((_BYTE *)this + 32) = v3;
    *((_DWORD *)this + 6) = LODWORD(result);
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0)
      return result;
LABEL_10:
    result = *((double *)a2 + 2);
    *((_BYTE *)this + 32) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
  LODWORD(result) = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((_BYTE *)this + 32) = v3;
  *((_DWORD *)this + 7) = LODWORD(result);
  if ((*((_BYTE *)a2 + 32) & 2) != 0)
    goto LABEL_10;
  return result;
}

uint64_t CMMsl::PDRSpeedEstimatorState::operator=(uint64_t a1, const CMMsl::PDRSpeedEstimatorState *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  uint64_t v9;
  int v10;

  if ((const CMMsl::PDRSpeedEstimatorState *)a1 != a2)
  {
    CMMsl::PDRSpeedEstimatorState::PDRSpeedEstimatorState((CMMsl::PDRSpeedEstimatorState *)v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRSpeedEstimatorState *a2, CMMsl::PDRSpeedEstimatorState *a3)
{
  int v3;
  uint64_t v4;
  double result;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::PDRSpeedEstimatorState::PDRSpeedEstimatorState(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100353318;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100353318;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::PDRSpeedEstimatorState::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  void (**v8)(CMMsl::PDRSpeedEstimatorState *__hidden);
  __int128 v9;
  uint64_t v10;
  int v11;

  if (a1 != a2)
  {
    v8 = off_100353318;
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v11 = *(_DWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    v9 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::PDRSpeedEstimatorState::formatText(CMMsl::PDRSpeedEstimatorState *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "speed", *((float *)this + 6));
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
      if ((*((_BYTE *)this + 32) & 2) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "speedUnc", *((float *)this + 7));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PDRSpeedEstimatorState::readFrom(CMMsl::PDRSpeedEstimatorState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 32) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_36;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_38;
        case 2u:
          *((_BYTE *)this + 32) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_36;
          *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_33;
        case 3u:
          *((_BYTE *)this + 32) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_36;
          *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_33:
          v2 = *((_QWORD *)a2 + 1) + 4;
          goto LABEL_39;
        case 4u:
          *((_BYTE *)this + 32) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_38:
            v2 = *((_QWORD *)a2 + 1) + 8;
LABEL_39:
            *((_QWORD *)a2 + 1) = v2;
          }
          else
          {
LABEL_36:
            *((_BYTE *)a2 + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PDRSpeedEstimatorState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 16), 4u);
  }
LABEL_8:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 3u);
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16), 4u);
  return this;
}

uint64_t CMMsl::PDRSpeedEstimatorState::hash_value(CMMsl::PDRSpeedEstimatorState *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  double v6;

  if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_3;
LABEL_15:
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 32) & 4) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((float *)this + 6);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 32) & 8) != 0)
  {
LABEL_6:
    v4 = *((float *)this + 7);
    v5 = LODWORD(v4);
    if (v4 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 32) & 2) != 0)
      goto LABEL_9;
LABEL_17:
    v6 = 0.0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ *(_QWORD *)&v6;
  }
LABEL_16:
  v5 = 0;
  if ((*((_BYTE *)this + 32) & 2) == 0)
    goto LABEL_17;
LABEL_9:
  v6 = *((double *)this + 2);
  if (v6 == 0.0)
    v6 = 0.0;
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ *(_QWORD *)&v6;
}

void CMMsl::PDRSpeedEstimatorStateDebug::~PDRSpeedEstimatorStateDebug(CMMsl::PDRSpeedEstimatorStateDebug *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::PDRSpeedEstimatorStateDebug::PDRSpeedEstimatorStateDebug(CMMsl::PDRSpeedEstimatorStateDebug *this, const CMMsl::PDRSpeedEstimatorStateDebug *a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)this = off_100353350;
  *((_DWORD *)this + 8) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 32) = 1;
    *((double *)this + 1) = result;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *((_BYTE *)this + 32) = v3;
    *((_DWORD *)this + 6) = LODWORD(result);
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0)
      return result;
LABEL_10:
    result = *((double *)a2 + 2);
    *((_BYTE *)this + 32) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
  LODWORD(result) = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((_BYTE *)this + 32) = v3;
  *((_DWORD *)this + 7) = LODWORD(result);
  if ((*((_BYTE *)a2 + 32) & 2) != 0)
    goto LABEL_10;
  return result;
}

uint64_t CMMsl::PDRSpeedEstimatorStateDebug::operator=(uint64_t a1, const CMMsl::PDRSpeedEstimatorStateDebug *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  uint64_t v9;
  int v10;

  if ((const CMMsl::PDRSpeedEstimatorStateDebug *)a1 != a2)
  {
    CMMsl::PDRSpeedEstimatorStateDebug::PDRSpeedEstimatorStateDebug((CMMsl::PDRSpeedEstimatorStateDebug *)v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRSpeedEstimatorStateDebug *a2, CMMsl::PDRSpeedEstimatorStateDebug *a3)
{
  int v3;
  uint64_t v4;
  double result;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::PDRSpeedEstimatorStateDebug::PDRSpeedEstimatorStateDebug(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100353350;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100353350;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::PDRSpeedEstimatorStateDebug::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  void (**v8)(CMMsl::PDRSpeedEstimatorStateDebug *__hidden);
  __int128 v9;
  uint64_t v10;
  int v11;

  if (a1 != a2)
  {
    v8 = off_100353350;
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v11 = *(_DWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    v9 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::PDRSpeedEstimatorStateDebug::formatText(CMMsl::PDRSpeedEstimatorStateDebug *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "speed", *((float *)this + 6));
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
      if ((*((_BYTE *)this + 32) & 2) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "speedUnc", *((float *)this + 7));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PDRSpeedEstimatorStateDebug::readFrom(CMMsl::PDRSpeedEstimatorStateDebug *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 32) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_36;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_38;
        case 2u:
          *((_BYTE *)this + 32) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_36;
          *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_33;
        case 3u:
          *((_BYTE *)this + 32) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_36;
          *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_33:
          v2 = *((_QWORD *)a2 + 1) + 4;
          goto LABEL_39;
        case 4u:
          *((_BYTE *)this + 32) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_38:
            v2 = *((_QWORD *)a2 + 1) + 8;
LABEL_39:
            *((_QWORD *)a2 + 1) = v2;
          }
          else
          {
LABEL_36:
            *((_BYTE *)a2 + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PDRSpeedEstimatorStateDebug::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 16), 4u);
  }
LABEL_8:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 3u);
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16), 4u);
  return this;
}

uint64_t CMMsl::PDRSpeedEstimatorStateDebug::hash_value(CMMsl::PDRSpeedEstimatorStateDebug *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  double v6;

  if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_3;
LABEL_15:
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 32) & 4) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((float *)this + 6);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 32) & 8) != 0)
  {
LABEL_6:
    v4 = *((float *)this + 7);
    v5 = LODWORD(v4);
    if (v4 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 32) & 2) != 0)
      goto LABEL_9;
LABEL_17:
    v6 = 0.0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ *(_QWORD *)&v6;
  }
LABEL_16:
  v5 = 0;
  if ((*((_BYTE *)this + 32) & 2) == 0)
    goto LABEL_17;
LABEL_9:
  v6 = *((double *)this + 2);
  if (v6 == 0.0)
    v6 = 0.0;
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ *(_QWORD *)&v6;
}

void CMMsl::PDRVelocityEstimatorState::~PDRVelocityEstimatorState(CMMsl::PDRVelocityEstimatorState *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::PDRVelocityEstimatorState::PDRVelocityEstimatorState(CMMsl::PDRVelocityEstimatorState *this, const CMMsl::PDRVelocityEstimatorState *a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)this = off_100353388;
  *((_DWORD *)this + 12) = 0;
  v2 = *((_BYTE *)a2 + 48);
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 48) = 1;
    *((double *)this + 1) = result;
    v2 = *((_BYTE *)a2 + 48);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 48) & 0x20) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 9);
    v3 |= 0x20u;
    *((_BYTE *)this + 48) = v3;
    *((_DWORD *)this + 9) = LODWORD(result);
    v2 = *((_BYTE *)a2 + 48);
  }
LABEL_6:
  if ((v2 & 0x40) != 0)
  {
    LODWORD(result) = *((_DWORD *)a2 + 10);
    v3 |= 0x40u;
    *((_BYTE *)this + 48) = v3;
    *((_DWORD *)this + 10) = LODWORD(result);
    v2 = *((_BYTE *)a2 + 48);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        goto LABEL_9;
      goto LABEL_15;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(result) = *((_DWORD *)a2 + 11);
  v3 |= 0x80u;
  *((_BYTE *)this + 48) = v3;
  *((_DWORD *)this + 11) = LODWORD(result);
  v2 = *((_BYTE *)a2 + 48);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0)
      goto LABEL_10;
    goto LABEL_16;
  }
LABEL_15:
  LODWORD(result) = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *((_BYTE *)this + 48) = v3;
  *((_DWORD *)this + 6) = LODWORD(result);
  v2 = *((_BYTE *)a2 + 48);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_17;
  }
LABEL_16:
  LODWORD(result) = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((_BYTE *)this + 48) = v3;
  *((_DWORD *)this + 7) = LODWORD(result);
  v2 = *((_BYTE *)a2 + 48);
  if ((v2 & 0x10) == 0)
  {
LABEL_11:
    if ((v2 & 2) == 0)
      return result;
LABEL_18:
    result = *((double *)a2 + 2);
    *((_BYTE *)this + 48) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
LABEL_17:
  LODWORD(result) = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *((_BYTE *)this + 48) = v3;
  *((_DWORD *)this + 8) = LODWORD(result);
  if ((*((_BYTE *)a2 + 48) & 2) != 0)
    goto LABEL_18;
  return result;
}

uint64_t CMMsl::PDRVelocityEstimatorState::operator=(uint64_t a1, const CMMsl::PDRVelocityEstimatorState *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _BYTE v8[8];
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  int v12;

  if ((const CMMsl::PDRVelocityEstimatorState *)a1 != a2)
  {
    CMMsl::PDRVelocityEstimatorState::PDRVelocityEstimatorState((CMMsl::PDRVelocityEstimatorState *)v8, a2);
    v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v12;
    v12 = v3;
    v4 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v11;
    v11 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v6;
    v10 = v5;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRVelocityEstimatorState *a2, CMMsl::PDRVelocityEstimatorState *a3)
{
  int v3;
  uint64_t v4;
  double result;

  v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::PDRVelocityEstimatorState::PDRVelocityEstimatorState(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100353388;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100353388;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::PDRVelocityEstimatorState::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  void (**v9)(CMMsl::PDRVelocityEstimatorState *__hidden);
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  int v13;

  if (a1 != a2)
  {
    v9 = off_100353388;
    v3 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 48) = 0;
    v13 = *(_DWORD *)(a1 + 48);
    v12 = *(_QWORD *)(a1 + 40);
    v4 = *(_OWORD *)(a1 + 24);
    v5 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v5;
    v6 = *(_OWORD *)(a1 + 8);
    v7 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 48) = v3;
    *(_OWORD *)(a1 + 8) = v7;
    v10 = v6;
    v11 = v4;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::PDRVelocityEstimatorState::formatText(CMMsl::PDRVelocityEstimatorState *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    v5 = *((_BYTE *)this + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*((_BYTE *)this + 48) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "velocityUncX", *((float *)this + 6));
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "velocityUncY", *((float *)this + 7));
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "velocityUncZ", *((float *)this + 8));
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
LABEL_16:
    PB::TextFormatter::format(a2, "velocityY", *((float *)this + 10));
    if ((*((_BYTE *)this + 48) & 0x80) == 0)
      return PB::TextFormatter::endObject(a2);
LABEL_17:
    PB::TextFormatter::format(a2, "velocityZ", *((float *)this + 11));
    return PB::TextFormatter::endObject(a2);
  }
LABEL_15:
  PB::TextFormatter::format(a2, "velocityX", *((float *)this + 9));
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 0x40) != 0)
    goto LABEL_16;
LABEL_8:
  if (v5 < 0)
    goto LABEL_17;
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PDRVelocityEstimatorState::readFrom(CMMsl::PDRVelocityEstimatorState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 48) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_48;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_43;
        case 2u:
          *((_BYTE *)this + 48) |= 0x20u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_48;
          *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_50;
        case 3u:
          *((_BYTE *)this + 48) |= 0x40u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_48;
          *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_50;
        case 4u:
          *((_BYTE *)this + 48) |= 0x80u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_48;
          *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_50;
        case 5u:
          *((_BYTE *)this + 48) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_48;
          *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_50;
        case 6u:
          *((_BYTE *)this + 48) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_48;
          *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_50;
        case 7u:
          *((_BYTE *)this + 48) |= 0x10u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_48;
          *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_50:
          v2 = *((_QWORD *)a2 + 1) + 4;
          goto LABEL_51;
        case 8u:
          *((_BYTE *)this + 48) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          {
LABEL_48:
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_43:
            v2 = *((_QWORD *)a2 + 1) + 8;
LABEL_51:
            *((_QWORD *)a2 + 1) = v2;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PDRVelocityEstimatorState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 48);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 48);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(this + 48) & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 2u);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 3u);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 4u);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 5u);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 6u);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 16), 8u);
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 7u);
  if ((*(_BYTE *)(v3 + 48) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16), 8u);
  return this;
}

uint64_t CMMsl::PDRVelocityEstimatorState::hash_value(CMMsl::PDRVelocityEstimatorState *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  double v14;

  if ((*((_BYTE *)this + 48) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 48) & 0x20) != 0)
      goto LABEL_3;
LABEL_27:
    v3 = 0;
    if ((*((_BYTE *)this + 48) & 0x40) != 0)
      goto LABEL_6;
LABEL_28:
    v5 = 0;
    if ((*((_BYTE *)this + 48) & 0x80) != 0)
      goto LABEL_9;
LABEL_29:
    v7 = 0;
    if ((*((_BYTE *)this + 48) & 4) != 0)
      goto LABEL_12;
LABEL_30:
    v9 = 0;
    if ((*((_BYTE *)this + 48) & 8) != 0)
      goto LABEL_15;
LABEL_31:
    v11 = 0;
    if ((*((_BYTE *)this + 48) & 0x10) != 0)
      goto LABEL_18;
    goto LABEL_32;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 48) & 0x20) == 0)
    goto LABEL_27;
LABEL_3:
  v2 = *((float *)this + 9);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 48) & 0x40) == 0)
    goto LABEL_28;
LABEL_6:
  v4 = *((float *)this + 10);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((*((_BYTE *)this + 48) & 0x80) == 0)
    goto LABEL_29;
LABEL_9:
  v6 = *((float *)this + 11);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((*((_BYTE *)this + 48) & 4) == 0)
    goto LABEL_30;
LABEL_12:
  v8 = *((float *)this + 6);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  if ((*((_BYTE *)this + 48) & 8) == 0)
    goto LABEL_31;
LABEL_15:
  v10 = *((float *)this + 7);
  v11 = LODWORD(v10);
  if (v10 == 0.0)
    v11 = 0;
  if ((*((_BYTE *)this + 48) & 0x10) != 0)
  {
LABEL_18:
    v12 = *((float *)this + 8);
    v13 = LODWORD(v12);
    if (v12 == 0.0)
      v13 = 0;
    if ((*((_BYTE *)this + 48) & 2) != 0)
      goto LABEL_21;
LABEL_33:
    v14 = 0.0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ *(_QWORD *)&v14;
  }
LABEL_32:
  v13 = 0;
  if ((*((_BYTE *)this + 48) & 2) == 0)
    goto LABEL_33;
LABEL_21:
  v14 = *((double *)this + 2);
  if (v14 == 0.0)
    v14 = 0.0;
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ *(_QWORD *)&v14;
}

void CMMsl::PTSConsumedGNSS::~PTSConsumedGNSS(CMMsl::PTSConsumedGNSS *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1003533C0;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  PB::Base::~Base(this);
}

{
  CMMsl::PTSConsumedGNSS::~PTSConsumedGNSS(this);
  operator delete();
}

_QWORD *CMMsl::PTSConsumedGNSS::PTSConsumedGNSS(_QWORD *this, const CMMsl::PTSConsumedGNSS *a2)
{
  *this = off_1003533C0;
  this[1] = 0;
  this[2] = 0;
  if (*((_QWORD *)a2 + 2))
    operator new();
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

uint64_t CMMsl::PTSConsumedGNSS::operator=(uint64_t a1, const CMMsl::PTSConsumedGNSS *a2)
{
  __int128 v3;
  uint64_t v5;
  __int128 v6;

  if ((const CMMsl::PTSConsumedGNSS *)a1 != a2)
  {
    CMMsl::PTSConsumedGNSS::PTSConsumedGNSS(&v5, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    v6 = v3;
    CMMsl::PTSConsumedGNSS::~PTSConsumedGNSS((CMMsl::PTSConsumedGNSS *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PTSConsumedGNSS *a2, CMMsl::PTSConsumedGNSS *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  return this;
}

_QWORD *CMMsl::PTSConsumedGNSS::PTSConsumedGNSS(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  a1[1] = 0;
  v4 = a1 + 1;
  *a1 = off_1003533C0;
  a1[2] = 0;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v6 = a1[2];
  a1[2] = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v8 = *v4;
  *v4 = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return a1;
}

uint64_t CMMsl::PTSConsumedGNSS::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  void (**v6)(CMMsl::PTSConsumedGNSS *__hidden);
  __int128 v7;

  if (a1 != a2)
  {
    v6 = off_1003533C0;
    v3 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v3;
    v7 = v4;
    CMMsl::PTSConsumedGNSS::~PTSConsumedGNSS((CMMsl::PTSConsumedGNSS *)&v6);
  }
  return a1;
}

uint64_t CMMsl::PTSConsumedGNSS::formatText(CMMsl::PTSConsumedGNSS *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "signalEnvironment");
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PTSConsumedGNSS::readFrom(CMMsl::PTSConsumedGNSS *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  unint64_t v19;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v19 = v10 >> 3;
      if ((v10 >> 3) == 2)
        operator new();
      if ((_DWORD)v19 == 1)
        operator new();
      result = PB::Reader::skip(a2, v19, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PTSConsumedGNSS::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  const PB::Base *v5;

  v3 = this;
  v4 = *(const PB::Base **)(this + 16);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
    return PB::Writer::writeSubmessage(a2, v5, 2u);
  return this;
}

unint64_t CMMsl::PTSConsumedGNSS::hash_value(CMMsl::PTSConsumedGNSS *this)
{
  unint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    v2 = CMMsl::LocationOscarEmu::hash_value((CMMsl::LocationOscarEmu *)v2);
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v4 = *(_BYTE *)(v3 + 12);
    v3 = *(int *)(v3 + 8);
    if ((v4 & 1) == 0)
      v3 = 0;
  }
  return v3 ^ v2;
}

uint64_t CMMsl::PTSConsumedGNSS::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 16))
    operator new();
  return this;
}

uint64_t CMMsl::PTSConsumedGNSS::makeSignalEnvironment(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

void CMMsl::PTSForwardPropagation::~PTSForwardPropagation(CMMsl::PTSForwardPropagation *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1003533F8;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1003533F8;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1003533F8;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::PTSForwardPropagation::PTSForwardPropagation(uint64_t this, const CMMsl::PTSForwardPropagation *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = off_1003533F8;
  *(_QWORD *)(this + 48) = 0;
  *(_DWORD *)(this + 64) = 0;
  v2 = *((_BYTE *)a2 + 64);
  if ((v2 & 0x20) != 0)
  {
    v4 = *((_QWORD *)a2 + 7);
    v3 = 32;
    *(_BYTE *)(this + 64) = 32;
    *(_QWORD *)(this + 56) = v4;
    v2 = *((_BYTE *)a2 + 64);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 64) & 8) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 4);
    v3 |= 8u;
    *(_BYTE *)(this + 64) = v3;
    *(_QWORD *)(this + 32) = v5;
    v2 = *((_BYTE *)a2 + 64);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    v7 = *((_QWORD *)a2 + 5);
    v3 |= 0x10u;
    *(_BYTE *)(this + 64) = v3;
    *(_QWORD *)(this + 40) = v7;
    v2 = *((_BYTE *)a2 + 64);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  v8 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *(_BYTE *)(this + 64) = v3;
  *(_QWORD *)(this + 24) = v8;
  v2 = *((_BYTE *)a2 + 64);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
LABEL_16:
  v9 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_BYTE *)(this + 64) = v3;
  *(_QWORD *)(this + 8) = v9;
  if ((*((_BYTE *)a2 + 64) & 2) != 0)
  {
LABEL_10:
    v6 = *((_QWORD *)a2 + 2);
    *(_BYTE *)(this + 64) = v3 | 2;
    *(_QWORD *)(this + 16) = v6;
  }
LABEL_11:
  if (*((_QWORD *)a2 + 6))
    operator new();
  return this;
}

uint64_t CMMsl::PTSForwardPropagation::operator=(uint64_t a1, const CMMsl::PTSForwardPropagation *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  void (**v10)(CMMsl::PTSForwardPropagation *__hidden);
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  if ((const CMMsl::PTSForwardPropagation *)a1 != a2)
  {
    CMMsl::PTSForwardPropagation::PTSForwardPropagation((uint64_t)&v10, a2);
    v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v16;
    v16 = v3;
    v4 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v15;
    v15 = v4;
    v5 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v13;
    v13 = v5;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    v11 = v7;
    v12 = v6;
    v8 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v14;
    v10 = off_1003533F8;
    v14 = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PTSForwardPropagation *a2, CMMsl::PTSForwardPropagation *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  uint64_t v10;

  v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v4;
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  v6 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  v10 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v10;
  return result;
}

uint64_t CMMsl::PTSForwardPropagation::PTSForwardPropagation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1003533F8;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  v4 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::PTSForwardPropagation::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  void (**v13)(CMMsl::PTSForwardPropagation *__hidden);
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(a2 + 64) = 0;
    v4 = *(_QWORD *)(a2 + 56);
    v5 = *(_QWORD *)(a2 + 40);
    v6 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a2 + 48) = 0;
    v19 = *(_DWORD *)(a1 + 64);
    v18 = *(_QWORD *)(a1 + 56);
    v16 = *(_QWORD *)(a1 + 40);
    v7 = *(_OWORD *)(a1 + 24);
    v8 = *(_OWORD *)(a2 + 8);
    v9 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 64) = v3;
    *(_QWORD *)(a1 + 56) = v4;
    *(_QWORD *)(a1 + 40) = v5;
    *(_OWORD *)(a1 + 24) = v9;
    v10 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v14 = v10;
    v15 = v7;
    v11 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v6;
    v13 = off_1003533F8;
    v17 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    PB::Base::~Base((PB::Base *)&v13);
  }
  return a1;
}

uint64_t CMMsl::PTSForwardPropagation::formatText(CMMsl::PTSForwardPropagation *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 64);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "course", *((double *)this + 1));
    v5 = *((_BYTE *)this + 64);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((*((_BYTE *)this + 64) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "courseAccuracy", *((double *)this + 2));
  v5 = *((_BYTE *)this + 64);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "horizontalAccuracy", *((double *)this + 3));
  v5 = *((_BYTE *)this + 64);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "latitude", *((double *)this + 4));
  if ((*((_BYTE *)this + 64) & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "longitude", *((double *)this + 5));
LABEL_7:
  v6 = *((_QWORD *)this + 6);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "signalEnvironment");
  if ((*((_BYTE *)this + 64) & 0x20) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 7));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PTSForwardPropagation::readFrom(CMMsl::PTSForwardPropagation *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          if (v10++ > 8)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 64) |= 0x20u;
              v20 = *((_QWORD *)a2 + 1);
              if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_41;
              *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v20);
              goto LABEL_44;
            case 2u:
              *((_BYTE *)this + 64) |= 8u;
              v22 = *((_QWORD *)a2 + 1);
              if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_41;
              *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v22);
              goto LABEL_44;
            case 3u:
              *((_BYTE *)this + 64) |= 0x10u;
              v23 = *((_QWORD *)a2 + 1);
              if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_41;
              *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v23);
              goto LABEL_44;
            case 4u:
              *((_BYTE *)this + 64) |= 4u;
              v24 = *((_QWORD *)a2 + 1);
              if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_41;
              *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v24);
              goto LABEL_44;
            case 5u:
              *((_BYTE *)this + 64) |= 1u;
              v25 = *((_QWORD *)a2 + 1);
              if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_41;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v25);
              goto LABEL_44;
            case 6u:
              *((_BYTE *)this + 64) |= 2u;
              v26 = *((_QWORD *)a2 + 1);
              if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v26);
LABEL_44:
                *((_QWORD *)a2 + 1) += 8;
              }
              else
              {
LABEL_41:
                *((_BYTE *)a2 + 24) = 1;
              }
LABEL_45:
              v2 = *((_QWORD *)a2 + 1);
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || *((_BYTE *)a2 + 24))
                return v4 == 0;
              continue;
            case 7u:
              operator new();
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              goto LABEL_45;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::PTSForwardPropagation::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  const PB::Base *v5;

  v3 = this;
  v4 = *(_BYTE *)(this + 64);
  if ((v4 & 0x20) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 56), 1u);
    v4 = *(_BYTE *)(v3 + 64);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(this + 64) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 2u);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 3u);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 4u);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 5u);
  if ((*(_BYTE *)(v3 + 64) & 2) != 0)
LABEL_7:
    this = PB::Writer::write(a2, *(double *)(v3 + 16), 6u);
LABEL_8:
  v5 = *(const PB::Base **)(v3 + 48);
  if (v5)
    return PB::Writer::writeSubmessage(a2, v5, 7u);
  return this;
}

uint64_t CMMsl::PTSForwardPropagation::hash_value(CMMsl::PTSForwardPropagation *this)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  char v8;

  if ((*((_BYTE *)this + 64) & 0x20) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 64) & 8) != 0)
      goto LABEL_3;
LABEL_21:
    v2 = 0.0;
    if ((*((_BYTE *)this + 64) & 0x10) != 0)
      goto LABEL_6;
LABEL_22:
    v3 = 0.0;
    if ((*((_BYTE *)this + 64) & 4) != 0)
      goto LABEL_9;
LABEL_23:
    v4 = 0.0;
    if ((*((_BYTE *)this + 64) & 1) != 0)
      goto LABEL_12;
    goto LABEL_24;
  }
  v1 = *((double *)this + 7);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 64) & 8) == 0)
    goto LABEL_21;
LABEL_3:
  v2 = *((double *)this + 4);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 64) & 0x10) == 0)
    goto LABEL_22;
LABEL_6:
  v3 = *((double *)this + 5);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((*((_BYTE *)this + 64) & 4) == 0)
    goto LABEL_23;
LABEL_9:
  v4 = *((double *)this + 3);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((*((_BYTE *)this + 64) & 1) != 0)
  {
LABEL_12:
    v5 = *((double *)this + 1);
    if (v5 == 0.0)
      v5 = 0.0;
    if ((*((_BYTE *)this + 64) & 2) != 0)
      goto LABEL_15;
LABEL_25:
    v6 = 0.0;
    goto LABEL_26;
  }
LABEL_24:
  v5 = 0.0;
  if ((*((_BYTE *)this + 64) & 2) == 0)
    goto LABEL_25;
LABEL_15:
  v6 = *((double *)this + 2);
  if (v6 == 0.0)
    v6 = 0.0;
LABEL_26:
  v7 = *((_QWORD *)this + 6);
  if (v7)
  {
    v8 = *(_BYTE *)(v7 + 12);
    v7 = *(int *)(v7 + 8);
    if ((v8 & 1) == 0)
      v7 = 0;
  }
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ v7;
}

uint64_t CMMsl::PTSForwardPropagation::makeSignalEnvironment(uint64_t this)
{
  if (!*(_QWORD *)(this + 48))
    operator new();
  return this;
}

void CMMsl::PTSMapMatchedRoute::~PTSMapMatchedRoute(CMMsl::PTSMapMatchedRoute *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100353430;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100353430;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100353430;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::PTSMapMatchedRoute::PTSMapMatchedRoute(_QWORD *this, const CMMsl::PTSMapMatchedRoute *a2)
{
  *this = off_100353430;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::PTSMapMatchedRoute *CMMsl::PTSMapMatchedRoute::operator=(const CMMsl::PTSMapMatchedRoute *a1, const CMMsl::PTSMapMatchedRoute *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::PTSMapMatchedRoute *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::PTSMapMatchedRoute::PTSMapMatchedRoute(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_100353430;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PTSMapMatchedRoute *a2, CMMsl::PTSMapMatchedRoute *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::PTSMapMatchedRoute::PTSMapMatchedRoute(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100353430;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100353430;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::PTSMapMatchedRoute::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_100353430;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::PTSMapMatchedRoute::formatText(CMMsl::PTSMapMatchedRoute *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PTSMapMatchedRoute::readFrom(CMMsl::PTSMapMatchedRoute *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PTSMapMatchedRoute::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

CMMsl::PTSForwardPropagation *CMMsl::PTSMapMatchedRoute::hash_value(CMMsl::PTSMapMatchedRoute *this)
{
  CMMsl::PTSForwardPropagation *result;

  result = (CMMsl::PTSForwardPropagation *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::PTSForwardPropagation *)CMMsl::PTSForwardPropagation::hash_value(result);
  return result;
}

uint64_t CMMsl::PTSMapMatchedRoute::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

void CMMsl::PTSReconstructedRoute::~PTSReconstructedRoute(CMMsl::PTSReconstructedRoute *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100353468;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100353468;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100353468;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::PTSReconstructedRoute::PTSReconstructedRoute(_QWORD *this, const CMMsl::PTSReconstructedRoute *a2)
{
  *this = off_100353468;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::PTSReconstructedRoute *CMMsl::PTSReconstructedRoute::operator=(const CMMsl::PTSReconstructedRoute *a1, const CMMsl::PTSReconstructedRoute *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::PTSReconstructedRoute *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::PTSReconstructedRoute::PTSReconstructedRoute(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_100353468;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PTSReconstructedRoute *a2, CMMsl::PTSReconstructedRoute *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::PTSReconstructedRoute::PTSReconstructedRoute(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100353468;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100353468;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

