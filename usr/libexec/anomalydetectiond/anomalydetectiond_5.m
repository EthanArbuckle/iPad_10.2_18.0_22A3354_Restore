uint64_t CMMsl::PTSReconstructedRoute::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_100353468;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::PTSReconstructedRoute::formatText(CMMsl::PTSReconstructedRoute *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PTSReconstructedRoute::readFrom(CMMsl::PTSReconstructedRoute *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PTSReconstructedRoute::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

CMMsl::PTSForwardPropagation *CMMsl::PTSReconstructedRoute::hash_value(CMMsl::PTSReconstructedRoute *this)
{
  CMMsl::PTSForwardPropagation *result;

  result = (CMMsl::PTSForwardPropagation *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::PTSForwardPropagation *)CMMsl::PTSForwardPropagation::hash_value(result);
  return result;
}

uint64_t CMMsl::PTSReconstructedRoute::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

void CMMsl::PdrMLModelOutput::~PdrMLModelOutput(CMMsl::PdrMLModelOutput *this)
{
  void *v2;

  *(_QWORD *)this = off_1003534A0;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::PdrMLModelOutput::~PdrMLModelOutput(this);
  operator delete();
}

CMMsl::PdrMLModelOutput *CMMsl::PdrMLModelOutput::PdrMLModelOutput(CMMsl::PdrMLModelOutput *this, const CMMsl::PdrMLModelOutput *a2)
{
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = off_1003534A0;
  *((_QWORD *)this + 1) = 0;
  v3 = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 10) = 0;
  if ((*((_BYTE *)a2 + 40) & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 4);
    *((_BYTE *)this + 40) = 1;
    *((_QWORD *)this + 4) = v4;
  }
  if (this != a2)
    sub_100239350(v3, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
  return this;
}

uint64_t CMMsl::PdrMLModelOutput::operator=(uint64_t a1, const CMMsl::PdrMLModelOutput *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  if ((const CMMsl::PdrMLModelOutput *)a1 != a2)
  {
    CMMsl::PdrMLModelOutput::PdrMLModelOutput((CMMsl::PdrMLModelOutput *)&v8, a2);
    v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    v12 = v3;
    v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v11;
    v11 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v5;
    v6 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v10;
    v10 = v6;
    CMMsl::PdrMLModelOutput::~PdrMLModelOutput((CMMsl::PdrMLModelOutput *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PdrMLModelOutput *a2, CMMsl::PdrMLModelOutput *a3)
{
  int v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  result = *((double *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((double *)a2 + 4) = result;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  return result;
}

uint64_t CMMsl::PdrMLModelOutput::PdrMLModelOutput(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_1003534A0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  return a1;
}

{
  *(_QWORD *)a1 = off_1003534A0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  return a1;
}

uint64_t CMMsl::PdrMLModelOutput::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  int v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  void (**v12)(CMMsl::PdrMLModelOutput *__hidden);
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  if (a1 != a2)
  {
    v12 = off_1003534A0;
    v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    v4 = *(_QWORD *)(a2 + 32);
    v5 = *(_QWORD *)(a2 + 24);
    v6 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v7 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v3;
    v16 = v7;
    v8 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v4;
    v15 = v8;
    v9 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    v13 = v9;
    v10 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v5;
    v14 = v10;
    CMMsl::PdrMLModelOutput::~PdrMLModelOutput((CMMsl::PdrMLModelOutput *)&v12);
  }
  return a1;
}

uint64_t CMMsl::PdrMLModelOutput::formatText(CMMsl::PdrMLModelOutput *this, PB::TextFormatter *a2, const char *a3)
{
  double *v5;
  double *v6;
  double v7;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 40) & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
  v5 = (double *)*((_QWORD *)this + 1);
  v6 = (double *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "velocity", v7);
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::PdrMLModelOutput::readFrom(CMMsl::PdrMLModelOutput *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  char *v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE v52[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 8);
    v9 = (char *)this + 24;
    do
    {
      v10 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v17 = 0;
        v18 = 0;
        v13 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v19 = v2 + 1;
          v20 = *(_BYTE *)(v10 + v2);
          *((_QWORD *)a2 + 1) = v19;
          v13 |= (unint64_t)(v20 & 0x7F) << v17;
          if ((v20 & 0x80) == 0)
            goto LABEL_21;
          v17 += 7;
          v2 = v19;
          if (v18++ >= 9)
          {
LABEL_20:
            v13 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        if (v12++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v22 = v13 & 7;
      if (v22 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v23 = v13 >> 3;
      if ((v13 >> 3) == 2)
      {
        if (v22 != 2)
        {
          v40 = (char *)*((_QWORD *)this + 2);
          v39 = *((_QWORD *)this + 3);
          if ((unint64_t)v40 >= v39)
          {
            v42 = (char *)*v8;
            v43 = (v40 - (_BYTE *)*v8) >> 3;
            v44 = v43 + 1;
            if ((unint64_t)(v43 + 1) >> 61)
LABEL_84:
              sub_10000D5F8();
            v45 = v39 - (_QWORD)v42;
            if (v45 >> 2 > v44)
              v44 = v45 >> 2;
            if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
              v46 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v46 = v44;
            if (v46)
            {
              v47 = (char *)sub_10000D60C((uint64_t)v9, v46);
              v42 = (char *)*((_QWORD *)this + 1);
              v40 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v47 = 0;
            }
            v48 = &v47[8 * v43];
            *(_QWORD *)v48 = 0;
            v41 = v48 + 8;
            while (v40 != v42)
            {
              v49 = *((_QWORD *)v40 - 1);
              v40 -= 8;
              *((_QWORD *)v48 - 1) = v49;
              v48 -= 8;
            }
            *((_QWORD *)this + 1) = v48;
            *((_QWORD *)this + 2) = v41;
            *((_QWORD *)this + 3) = &v47[8 * v46];
            if (v42)
              operator delete(v42);
          }
          else
          {
            *(_QWORD *)v40 = 0;
            v41 = v40 + 8;
          }
          *((_QWORD *)this + 2) = v41;
          v50 = *((_QWORD *)a2 + 1);
          if (v50 > 0xFFFFFFFFFFFFFFF7 || v50 + 8 > *((_QWORD *)a2 + 2))
          {
LABEL_73:
            *((_BYTE *)a2 + 24) = 1;
            goto LABEL_76;
          }
          *(v41 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v50);
          goto LABEL_75;
        }
        if ((PB::Reader::placeMark(a2, v52) & 1) != 0)
          return 0;
        v25 = *((_QWORD *)a2 + 1);
        v26 = *((_QWORD *)a2 + 2);
        while (v25 < v26 && !*((_BYTE *)a2 + 24))
        {
          v28 = (char *)*((_QWORD *)this + 2);
          v27 = *((_QWORD *)this + 3);
          if ((unint64_t)v28 >= v27)
          {
            v30 = (char *)*v8;
            v31 = (v28 - (_BYTE *)*v8) >> 3;
            v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) >> 61)
              goto LABEL_84;
            v33 = v27 - (_QWORD)v30;
            if (v33 >> 2 > v32)
              v32 = v33 >> 2;
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
              v34 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v34 = v32;
            if (v34)
            {
              v35 = (char *)sub_10000D60C((uint64_t)v9, v34);
              v30 = (char *)*((_QWORD *)this + 1);
              v28 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v35 = 0;
            }
            v36 = &v35[8 * v31];
            *(_QWORD *)v36 = 0;
            v29 = v36 + 8;
            while (v28 != v30)
            {
              v37 = *((_QWORD *)v28 - 1);
              v28 -= 8;
              *((_QWORD *)v36 - 1) = v37;
              v36 -= 8;
            }
            *((_QWORD *)this + 1) = v36;
            *((_QWORD *)this + 2) = v29;
            *((_QWORD *)this + 3) = &v35[8 * v34];
            if (v30)
              operator delete(v30);
          }
          else
          {
            *(_QWORD *)v28 = 0;
            v29 = v28 + 8;
          }
          *((_QWORD *)this + 2) = v29;
          v38 = *((_QWORD *)a2 + 1);
          if (v38 > 0xFFFFFFFFFFFFFFF7 || v38 + 8 > *((_QWORD *)a2 + 2))
          {
            *((_BYTE *)a2 + 24) = 1;
            break;
          }
          *(v29 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v38);
          v26 = *((_QWORD *)a2 + 2);
          v25 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v25;
        }
        PB::Reader::recallMark(a2, v52);
      }
      else
      {
        if ((_DWORD)v23 == 1)
        {
          *((_BYTE *)this + 40) |= 1u;
          v24 = *((_QWORD *)a2 + 1);
          if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_73;
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v24);
LABEL_75:
          *((_QWORD *)a2 + 1) += 8;
          goto LABEL_76;
        }
        if ((PB::Reader::skip(a2, v23, v22, 0) & 1) == 0)
          return 0;
      }
LABEL_76:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::PdrMLModelOutput::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;

  v3 = this;
  if ((*(_BYTE *)(this + 40) & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 32), 1u);
  v5 = *(double **)(v3 + 8);
  v4 = *(double **)(v3 + 16);
  while (v5 != v4)
  {
    v6 = *v5++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  return this;
}

uint64_t CMMsl::PdrMLModelOutput::hash_value(CMMsl::PdrMLModelOutput *this)
{
  uint64_t v1;

  if ((*((_BYTE *)this + 40) & 1) != 0)
  {
    if (*((double *)this + 4) == 0.0)
      v1 = 0;
    else
      v1 = *((_QWORD *)this + 4);
  }
  else
  {
    v1 = 0;
  }
  return PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1)) ^ v1;
}

void CMMsl::PearlAttitude::~PearlAttitude(CMMsl::PearlAttitude *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = off_1003534D8;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::PearlAttitude::~PearlAttitude(this);
  operator delete();
}

CMMsl::PearlAttitude *CMMsl::PearlAttitude::PearlAttitude(CMMsl::PearlAttitude *this, const CMMsl::PearlAttitude *a2)
{
  char *v4;
  __int16 v5;
  __int16 v6;
  uint64_t v7;
  int v8;
  int v9;
  __int16 v10;
  int v11;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;

  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_QWORD *)this = off_1003534D8;
  *((_DWORD *)this + 31) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 9) = 0;
  v5 = *((_WORD *)a2 + 62);
  if ((v5 & 1) != 0)
  {
    v7 = *((_QWORD *)a2 + 10);
    v6 = 1;
    *((_WORD *)this + 62) = 1;
    *((_QWORD *)this + 10) = v7;
    v5 = *((_WORD *)a2 + 62);
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((v5 & 0x40) != 0)
  {
LABEL_5:
    v8 = *((_DWORD *)a2 + 27);
    v6 |= 0x40u;
    *((_WORD *)this + 62) = v6;
    *((_DWORD *)this + 27) = v8;
    v5 = *((_WORD *)a2 + 62);
  }
LABEL_6:
  if ((v5 & 0x20) != 0)
  {
    v13 = *((_DWORD *)a2 + 26);
    v6 |= 0x20u;
    *((_WORD *)this + 62) = v6;
    *((_DWORD *)this + 26) = v13;
    v5 = *((_WORD *)a2 + 62);
    if ((v5 & 0x200) == 0)
    {
LABEL_8:
      if ((v5 & 2) == 0)
        goto LABEL_9;
      goto LABEL_23;
    }
  }
  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_8;
  }
  v14 = *((_DWORD *)a2 + 30);
  v6 |= 0x200u;
  *((_WORD *)this + 62) = v6;
  *((_DWORD *)this + 30) = v14;
  v5 = *((_WORD *)a2 + 62);
  if ((v5 & 2) == 0)
  {
LABEL_9:
    if ((v5 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  v15 = *((_DWORD *)a2 + 22);
  v6 |= 2u;
  *((_WORD *)this + 62) = v6;
  *((_DWORD *)this + 22) = v15;
  v5 = *((_WORD *)a2 + 62);
  if ((v5 & 0x80) == 0)
  {
LABEL_10:
    if ((v5 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_24:
  v16 = *((_DWORD *)a2 + 28);
  v6 |= 0x80u;
  *((_WORD *)this + 62) = v6;
  *((_DWORD *)this + 28) = v16;
  if ((*((_WORD *)a2 + 62) & 0x10) != 0)
  {
LABEL_11:
    v9 = *((_DWORD *)a2 + 25);
    *((_WORD *)this + 62) = v6 | 0x10;
    *((_DWORD *)this + 25) = v9;
  }
LABEL_12:
  if (this != a2)
    sub_100020CE4(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  v10 = *((_WORD *)a2 + 62);
  if ((v10 & 8) != 0)
  {
    v17 = *((_DWORD *)a2 + 24);
    *((_WORD *)this + 62) |= 8u;
    *((_DWORD *)this + 24) = v17;
    v10 = *((_WORD *)a2 + 62);
    if ((v10 & 0x100) == 0)
    {
LABEL_16:
      if ((v10 & 4) == 0)
        goto LABEL_18;
      goto LABEL_17;
    }
  }
  else if ((*((_WORD *)a2 + 62) & 0x100) == 0)
  {
    goto LABEL_16;
  }
  v18 = *((_DWORD *)a2 + 29);
  *((_WORD *)this + 62) |= 0x100u;
  *((_DWORD *)this + 29) = v18;
  if ((*((_WORD *)a2 + 62) & 4) != 0)
  {
LABEL_17:
    v11 = *((_DWORD *)a2 + 23);
    *((_WORD *)this + 62) |= 4u;
    *((_DWORD *)this + 23) = v11;
  }
LABEL_18:
  if (this != a2)
  {
    sub_100020CE4((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
    sub_100020CE4((char *)this + 56, *((char **)a2 + 7), *((_QWORD *)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 2);
  }
  return this;
}

CMMsl *CMMsl::PearlAttitude::operator=(CMMsl *a1, const CMMsl::PearlAttitude *a2)
{
  CMMsl::PearlAttitude *v3;
  _BYTE v5[128];

  if (a1 != a2)
  {
    CMMsl::PearlAttitude::PearlAttitude((CMMsl::PearlAttitude *)v5, a2);
    CMMsl::swap(a1, (CMMsl::PearlAttitude *)v5, v3);
    CMMsl::PearlAttitude::~PearlAttitude((CMMsl::PearlAttitude *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::PearlAttitude *a2, CMMsl::PearlAttitude *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v3;
  v4 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v4;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LODWORD(v4) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  v5 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v5;
  v6 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v6;
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v7;
  v8 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v8;
  v9 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v9;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v4;
  result = *((float *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((float *)a2 + 23) = result;
  v11 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v11;
  v12 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v12;
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v13;
  v14 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v14;
  v15 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v15;
  v16 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v16;
  return result;
}

uint64_t CMMsl::PearlAttitude::PearlAttitude(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_1003534D8;
  v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  v5 = a1 + 56;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a2 + 124) = 0;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  sub_100239458(v4, (__n128 *)(a2 + 32));
  sub_100239458(v5, (__n128 *)(a2 + 56));
  return a1;
}

CMMsl *CMMsl::PearlAttitude::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::PearlAttitude *v3;
  _BYTE v5[128];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::PearlAttitude::PearlAttitude((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::PearlAttitude *)v5, v3);
    CMMsl::PearlAttitude::~PearlAttitude((CMMsl::PearlAttitude *)v5);
  }
  return a1;
}

uint64_t CMMsl::PearlAttitude::formatText(CMMsl::PearlAttitude *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;
  float *v6;
  float *v7;
  float v8;
  float *v9;
  float *v10;
  float v11;
  __int16 v12;
  float *v13;
  float *v14;
  float v15;
  __int16 v16;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 62);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "distance", *((float *)this + 22));
    v5 = *((_WORD *)this + 62);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_25;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "focalLength", *((float *)this + 23));
  v5 = *((_WORD *)this + 62);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "height", *((float *)this + 24));
  if ((*((_WORD *)this + 62) & 0x10) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "orientation", *((_DWORD *)this + 25));
LABEL_6:
  v6 = (float *)*((_QWORD *)this + 1);
  v7 = (float *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "origin", v8);
  }
  if ((*((_WORD *)this + 62) & 0x20) != 0)
    PB::TextFormatter::format(a2, "pitch", *((float *)this + 26));
  v9 = (float *)*((_QWORD *)this + 4);
  v10 = (float *)*((_QWORD *)this + 5);
  while (v9 != v10)
  {
    v11 = *v9++;
    PB::TextFormatter::format(a2, "principlePoint", v11);
  }
  v12 = *((_WORD *)this + 62);
  if ((v12 & 0x40) != 0)
  {
    PB::TextFormatter::format(a2, "roll", *((float *)this + 27));
    v12 = *((_WORD *)this + 62);
  }
  if ((v12 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 10));
  v13 = (float *)*((_QWORD *)this + 7);
  v14 = (float *)*((_QWORD *)this + 8);
  while (v13 != v14)
  {
    v15 = *v13++;
    PB::TextFormatter::format(a2, "transform", v15);
  }
  v16 = *((_WORD *)this + 62);
  if ((v16 & 0x80) == 0)
  {
    if ((*((_WORD *)this + 62) & 0x100) == 0)
      goto LABEL_20;
LABEL_28:
    PB::TextFormatter::format(a2, "width", *((float *)this + 29));
    if ((*((_WORD *)this + 62) & 0x200) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_21;
  }
  PB::TextFormatter::format(a2, "type", *((_DWORD *)this + 28));
  v16 = *((_WORD *)this + 62);
  if ((v16 & 0x100) != 0)
    goto LABEL_28;
LABEL_20:
  if ((v16 & 0x200) != 0)
LABEL_21:
    PB::TextFormatter::format(a2, "yaw", *((float *)this + 30));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::PearlAttitude::readFrom(CMMsl::PearlAttitude *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  void **v9;
  char *v10;
  void **v11;
  char *v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  BOOL v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  char v23;
  int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  _DWORD *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  _DWORD *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  _DWORD *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  int v91;
  unint64_t v92;
  char v93;
  unsigned int v94;
  unint64_t v95;
  char v96;
  char v97;
  unsigned int v98;
  unint64_t v99;
  char v100;
  unint64_t v101;
  char *v102;
  _DWORD *v103;
  unint64_t v104;
  char *v105;
  unint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  int v127;
  char *v128;
  int v129;
  char *v130;
  int v131;
  unint64_t v132;
  char *v135;
  _BYTE v136[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 56);
    v135 = (char *)this + 72;
    v9 = (void **)((char *)this + 32);
    v10 = (char *)this + 48;
    v11 = (void **)((char *)this + 8);
    v12 = (char *)this + 24;
    while (1)
    {
      v13 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      while (1)
      {
        v17 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v18 = *(_BYTE *)(v13 + v2);
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0)
          break;
        v14 += 7;
        v2 = v17;
        v19 = v15++ > 8;
        if (v19)
          goto LABEL_20;
      }
LABEL_21:
      v25 = v16 & 7;
      if (v25 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v16 >> 3))
      {
        case 1u:
          *((_WORD *)this + 62) |= 1u;
          v26 = *((_QWORD *)a2 + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_212;
          *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v26);
          v27 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_215;
        case 2u:
          *((_WORD *)this + 62) |= 0x40u;
          v28 = *((_QWORD *)a2 + 1);
          if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_212;
          *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v28);
          goto LABEL_214;
        case 3u:
          *((_WORD *)this + 62) |= 0x20u;
          v29 = *((_QWORD *)a2 + 1);
          if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_212;
          *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v29);
          goto LABEL_214;
        case 4u:
          *((_WORD *)this + 62) |= 0x200u;
          v30 = *((_QWORD *)a2 + 1);
          if (v30 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_212;
          *((_DWORD *)this + 30) = *(_DWORD *)(*(_QWORD *)a2 + v30);
          goto LABEL_214;
        case 5u:
          *((_WORD *)this + 62) |= 2u;
          v31 = *((_QWORD *)a2 + 1);
          if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_212;
          *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v31);
          goto LABEL_214;
        case 6u:
          *((_WORD *)this + 62) |= 0x80u;
          v32 = *((_QWORD *)a2 + 1);
          v33 = *((_QWORD *)a2 + 2);
          v34 = *(_QWORD *)a2;
          if (v32 <= 0xFFFFFFFFFFFFFFF5 && v32 + 10 <= v33)
          {
            v35 = 0;
            v36 = 0;
            v37 = 0;
            do
            {
              v38 = v32 + 1;
              *((_QWORD *)a2 + 1) = v32 + 1;
              v39 = *(_BYTE *)(v34 + v32);
              v37 |= (unint64_t)(v39 & 0x7F) << v35;
              if ((v39 & 0x80) == 0)
                goto LABEL_185;
              v35 += 7;
              v32 = v38;
              v19 = v36++ > 8;
            }
            while (!v19);
LABEL_141:
            LODWORD(v37) = 0;
            goto LABEL_185;
          }
          v93 = 0;
          v94 = 0;
          v37 = 0;
          if (v33 <= v32)
            v33 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v33 == v32)
            {
              LODWORD(v37) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v95 = v32 + 1;
              v96 = *(_BYTE *)(v34 + v32);
              *((_QWORD *)a2 + 1) = v95;
              v37 |= (unint64_t)(v96 & 0x7F) << v93;
              if (v96 < 0)
              {
                v93 += 7;
                v32 = v95;
                v19 = v94++ > 8;
                if (v19)
                  goto LABEL_141;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v37) = 0;
            }
            break;
          }
LABEL_185:
          *((_DWORD *)this + 28) = v37;
          goto LABEL_216;
        case 7u:
          *((_WORD *)this + 62) |= 0x10u;
          v40 = *((_QWORD *)a2 + 1);
          v41 = *((_QWORD *)a2 + 2);
          v42 = *(_QWORD *)a2;
          if (v40 <= 0xFFFFFFFFFFFFFFF5 && v40 + 10 <= v41)
          {
            v43 = 0;
            v44 = 0;
            v45 = 0;
            do
            {
              v46 = v40 + 1;
              *((_QWORD *)a2 + 1) = v40 + 1;
              v47 = *(_BYTE *)(v42 + v40);
              v45 |= (unint64_t)(v47 & 0x7F) << v43;
              if ((v47 & 0x80) == 0)
                goto LABEL_188;
              v43 += 7;
              v40 = v46;
              v19 = v44++ > 8;
            }
            while (!v19);
LABEL_148:
            LODWORD(v45) = 0;
            goto LABEL_188;
          }
          v97 = 0;
          v98 = 0;
          v45 = 0;
          if (v41 <= v40)
            v41 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v41 == v40)
            {
              LODWORD(v45) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v99 = v40 + 1;
              v100 = *(_BYTE *)(v42 + v40);
              *((_QWORD *)a2 + 1) = v99;
              v45 |= (unint64_t)(v100 & 0x7F) << v97;
              if (v100 < 0)
              {
                v97 += 7;
                v40 = v99;
                v19 = v98++ > 8;
                if (v19)
                  goto LABEL_148;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v45) = 0;
            }
            break;
          }
LABEL_188:
          *((_DWORD *)this + 25) = v45;
          goto LABEL_216;
        case 8u:
          if (v25 != 2)
          {
            v102 = (char *)*((_QWORD *)this + 2);
            v101 = *((_QWORD *)this + 3);
            if ((unint64_t)v102 >= v101)
            {
              v108 = (char *)*v11;
              v109 = (v102 - (_BYTE *)*v11) >> 2;
              v110 = v109 + 1;
              if ((unint64_t)(v109 + 1) >> 62)
LABEL_226:
                sub_10000D5F8();
              v111 = v101 - (_QWORD)v108;
              if (v111 >> 1 > v110)
                v110 = v111 >> 1;
              if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFFCLL)
                v112 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v112 = v110;
              if (v112)
              {
                v113 = (char *)sub_100020E2C((uint64_t)v12, v112);
                v108 = (char *)*((_QWORD *)this + 1);
                v102 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v113 = 0;
              }
              v126 = &v113[4 * v109];
              *(_DWORD *)v126 = 0;
              v103 = v126 + 4;
              while (v102 != v108)
              {
                v127 = *((_DWORD *)v102 - 1);
                v102 -= 4;
                *((_DWORD *)v126 - 1) = v127;
                v126 -= 4;
              }
              *((_QWORD *)this + 1) = v126;
              *((_QWORD *)this + 2) = v103;
              *((_QWORD *)this + 3) = &v113[4 * v112];
              if (v108)
                operator delete(v108);
            }
            else
            {
              *(_DWORD *)v102 = 0;
              v103 = v102 + 4;
            }
            *((_QWORD *)this + 2) = v103;
            goto LABEL_210;
          }
          if ((PB::Reader::placeMark(a2, v136) & 1) != 0)
            return 0;
          v48 = *((_QWORD *)a2 + 1);
          v49 = *((_QWORD *)a2 + 2);
          while (v48 < v49 && !*((_BYTE *)a2 + 24))
          {
            v51 = (char *)*((_QWORD *)this + 2);
            v50 = *((_QWORD *)this + 3);
            if ((unint64_t)v51 >= v50)
            {
              v53 = (char *)*v11;
              v54 = (v51 - (_BYTE *)*v11) >> 2;
              v55 = v54 + 1;
              if ((unint64_t)(v54 + 1) >> 62)
                goto LABEL_226;
              v56 = v50 - (_QWORD)v53;
              if (v56 >> 1 > v55)
                v55 = v56 >> 1;
              if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL)
                v57 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v57 = v55;
              if (v57)
              {
                v58 = (char *)sub_100020E2C((uint64_t)v12, v57);
                v53 = (char *)*((_QWORD *)this + 1);
                v51 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v58 = 0;
              }
              v59 = &v58[4 * v54];
              *(_DWORD *)v59 = 0;
              v52 = v59 + 4;
              while (v51 != v53)
              {
                v60 = *((_DWORD *)v51 - 1);
                v51 -= 4;
                *((_DWORD *)v59 - 1) = v60;
                v59 -= 4;
              }
              *((_QWORD *)this + 1) = v59;
              *((_QWORD *)this + 2) = v52;
              *((_QWORD *)this + 3) = &v58[4 * v57];
              if (v53)
                operator delete(v53);
            }
            else
            {
              *(_DWORD *)v51 = 0;
              v52 = v51 + 4;
            }
            *((_QWORD *)this + 2) = v52;
            v61 = *((_QWORD *)a2 + 1);
            if (v61 > 0xFFFFFFFFFFFFFFFBLL || v61 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_155;
            *(v52 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v61);
            v49 = *((_QWORD *)a2 + 2);
            v48 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v48;
          }
          goto LABEL_156;
        case 9u:
          *((_WORD *)this + 62) |= 8u;
          v62 = *((_QWORD *)a2 + 1);
          if (v62 > 0xFFFFFFFFFFFFFFFBLL || v62 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_212;
          *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v62);
          goto LABEL_214;
        case 0xAu:
          *((_WORD *)this + 62) |= 0x100u;
          v63 = *((_QWORD *)a2 + 1);
          if (v63 > 0xFFFFFFFFFFFFFFFBLL || v63 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_212;
          *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v63);
          goto LABEL_214;
        case 0xBu:
          *((_WORD *)this + 62) |= 4u;
          v64 = *((_QWORD *)a2 + 1);
          if (v64 > 0xFFFFFFFFFFFFFFFBLL || v64 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_212;
          *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v64);
          goto LABEL_214;
        case 0xCu:
          if (v25 != 2)
          {
            v105 = (char *)*((_QWORD *)this + 5);
            v104 = *((_QWORD *)this + 6);
            if ((unint64_t)v105 >= v104)
            {
              v114 = (char *)*v9;
              v115 = (v105 - (_BYTE *)*v9) >> 2;
              v116 = v115 + 1;
              if ((unint64_t)(v115 + 1) >> 62)
LABEL_227:
                sub_10000D5F8();
              v117 = v104 - (_QWORD)v114;
              if (v117 >> 1 > v116)
                v116 = v117 >> 1;
              if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFFCLL)
                v118 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v118 = v116;
              if (v118)
              {
                v119 = (char *)sub_100020E2C((uint64_t)v10, v118);
                v114 = (char *)*((_QWORD *)this + 4);
                v105 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v119 = 0;
              }
              v128 = &v119[4 * v115];
              *(_DWORD *)v128 = 0;
              v103 = v128 + 4;
              while (v105 != v114)
              {
                v129 = *((_DWORD *)v105 - 1);
                v105 -= 4;
                *((_DWORD *)v128 - 1) = v129;
                v128 -= 4;
              }
              *((_QWORD *)this + 4) = v128;
              *((_QWORD *)this + 5) = v103;
              *((_QWORD *)this + 6) = &v119[4 * v118];
              if (v114)
                operator delete(v114);
            }
            else
            {
              *(_DWORD *)v105 = 0;
              v103 = v105 + 4;
            }
            *((_QWORD *)this + 5) = v103;
            goto LABEL_210;
          }
          if ((PB::Reader::placeMark(a2, v136) & 1) != 0)
            return 0;
          v65 = *((_QWORD *)a2 + 1);
          v66 = *((_QWORD *)a2 + 2);
          while (v65 < v66 && !*((_BYTE *)a2 + 24))
          {
            v68 = (char *)*((_QWORD *)this + 5);
            v67 = *((_QWORD *)this + 6);
            if ((unint64_t)v68 >= v67)
            {
              v70 = (char *)*v9;
              v71 = (v68 - (_BYTE *)*v9) >> 2;
              v72 = v71 + 1;
              if ((unint64_t)(v71 + 1) >> 62)
                goto LABEL_227;
              v73 = v67 - (_QWORD)v70;
              if (v73 >> 1 > v72)
                v72 = v73 >> 1;
              if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL)
                v74 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v74 = v72;
              if (v74)
              {
                v75 = (char *)sub_100020E2C((uint64_t)v10, v74);
                v70 = (char *)*((_QWORD *)this + 4);
                v68 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v75 = 0;
              }
              v76 = &v75[4 * v71];
              *(_DWORD *)v76 = 0;
              v69 = v76 + 4;
              while (v68 != v70)
              {
                v77 = *((_DWORD *)v68 - 1);
                v68 -= 4;
                *((_DWORD *)v76 - 1) = v77;
                v76 -= 4;
              }
              *((_QWORD *)this + 4) = v76;
              *((_QWORD *)this + 5) = v69;
              *((_QWORD *)this + 6) = &v75[4 * v74];
              if (v70)
                operator delete(v70);
            }
            else
            {
              *(_DWORD *)v68 = 0;
              v69 = v68 + 4;
            }
            *((_QWORD *)this + 5) = v69;
            v78 = *((_QWORD *)a2 + 1);
            if (v78 > 0xFFFFFFFFFFFFFFFBLL || v78 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_155;
            *(v69 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v78);
            v66 = *((_QWORD *)a2 + 2);
            v65 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v65;
          }
          goto LABEL_156;
        case 0xDu:
          if (v25 == 2)
          {
            if ((PB::Reader::placeMark(a2, v136) & 1) != 0)
              return 0;
            v79 = *((_QWORD *)a2 + 1);
            v80 = *((_QWORD *)a2 + 2);
            while (v79 < v80 && !*((_BYTE *)a2 + 24))
            {
              v82 = (char *)*((_QWORD *)this + 8);
              v81 = *((_QWORD *)this + 9);
              if ((unint64_t)v82 >= v81)
              {
                v84 = (char *)*v8;
                v85 = (v82 - (_BYTE *)*v8) >> 2;
                v86 = v85 + 1;
                if ((unint64_t)(v85 + 1) >> 62)
                  goto LABEL_228;
                v87 = v81 - (_QWORD)v84;
                if (v87 >> 1 > v86)
                  v86 = v87 >> 1;
                if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL)
                  v88 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v88 = v86;
                if (v88)
                {
                  v89 = (char *)sub_100020E2C((uint64_t)v135, v88);
                  v84 = (char *)*((_QWORD *)this + 7);
                  v82 = (char *)*((_QWORD *)this + 8);
                }
                else
                {
                  v89 = 0;
                }
                v90 = &v89[4 * v85];
                *(_DWORD *)v90 = 0;
                v83 = v90 + 4;
                while (v82 != v84)
                {
                  v91 = *((_DWORD *)v82 - 1);
                  v82 -= 4;
                  *((_DWORD *)v90 - 1) = v91;
                  v90 -= 4;
                }
                *((_QWORD *)this + 7) = v90;
                *((_QWORD *)this + 8) = v83;
                *((_QWORD *)this + 9) = &v89[4 * v88];
                if (v84)
                  operator delete(v84);
              }
              else
              {
                *(_DWORD *)v82 = 0;
                v83 = v82 + 4;
              }
              *((_QWORD *)this + 8) = v83;
              v92 = *((_QWORD *)a2 + 1);
              if (v92 > 0xFFFFFFFFFFFFFFFBLL || v92 + 4 > *((_QWORD *)a2 + 2))
              {
LABEL_155:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v83 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v92);
              v80 = *((_QWORD *)a2 + 2);
              v79 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v79;
            }
LABEL_156:
            PB::Reader::recallMark(a2, v136);
          }
          else
          {
            v107 = (char *)*((_QWORD *)this + 8);
            v106 = *((_QWORD *)this + 9);
            if ((unint64_t)v107 >= v106)
            {
              v120 = (char *)*v8;
              v121 = (v107 - (_BYTE *)*v8) >> 2;
              v122 = v121 + 1;
              if ((unint64_t)(v121 + 1) >> 62)
LABEL_228:
                sub_10000D5F8();
              v123 = v106 - (_QWORD)v120;
              if (v123 >> 1 > v122)
                v122 = v123 >> 1;
              if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFFCLL)
                v124 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v124 = v122;
              if (v124)
              {
                v125 = (char *)sub_100020E2C((uint64_t)v135, v124);
                v120 = (char *)*((_QWORD *)this + 7);
                v107 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v125 = 0;
              }
              v130 = &v125[4 * v121];
              *(_DWORD *)v130 = 0;
              v103 = v130 + 4;
              while (v107 != v120)
              {
                v131 = *((_DWORD *)v107 - 1);
                v107 -= 4;
                *((_DWORD *)v130 - 1) = v131;
                v130 -= 4;
              }
              *((_QWORD *)this + 7) = v130;
              *((_QWORD *)this + 8) = v103;
              *((_QWORD *)this + 9) = &v125[4 * v124];
              if (v120)
                operator delete(v120);
            }
            else
            {
              *(_DWORD *)v107 = 0;
              v103 = v107 + 4;
            }
            *((_QWORD *)this + 8) = v103;
LABEL_210:
            v132 = *((_QWORD *)a2 + 1);
            if (v132 <= 0xFFFFFFFFFFFFFFFBLL && v132 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v103 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v132);
LABEL_214:
              v27 = *((_QWORD *)a2 + 1) + 4;
LABEL_215:
              *((_QWORD *)a2 + 1) = v27;
            }
            else
            {
LABEL_212:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_216:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        default:
          if ((PB::Reader::skip(a2, v16 >> 3, v25, 0) & 1) == 0)
            return 0;
          goto LABEL_216;
      }
    }
    v20 = 0;
    v21 = 0;
    v16 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v22 = v2 + 1;
      v23 = *(_BYTE *)(v13 + v2);
      *((_QWORD *)a2 + 1) = v22;
      v16 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0)
        goto LABEL_21;
      v20 += 7;
      v2 = v22;
      if (v21++ >= 9)
      {
LABEL_20:
        v16 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PearlAttitude::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;
  float *v5;
  float *v6;
  float v7;
  __int16 v8;
  float *v9;
  float *v10;
  float v11;
  float *v12;
  float *v13;
  float v14;

  v3 = this;
  v4 = *(_WORD *)(this + 124);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 80), 1u);
    v4 = *(_WORD *)(v3 + 124);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_25;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 108), 2u);
  v4 = *(_WORD *)(v3 + 124);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 3u);
  v4 = *(_WORD *)(v3 + 124);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      goto LABEL_6;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 120), 4u);
  v4 = *(_WORD *)(v3 + 124);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0)
      goto LABEL_7;
LABEL_28:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 112), 6u);
    if ((*(_WORD *)(v3 + 124) & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 5u);
  v4 = *(_WORD *)(v3 + 124);
  if ((v4 & 0x80) != 0)
    goto LABEL_28;
LABEL_7:
  if ((v4 & 0x10) != 0)
LABEL_8:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 100), 7u);
LABEL_9:
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7, 8u);
  }
  v8 = *(_WORD *)(v3 + 124);
  if ((v8 & 8) == 0)
  {
    if ((*(_WORD *)(v3 + 124) & 0x100) == 0)
      goto LABEL_14;
LABEL_31:
    this = PB::Writer::write(a2, *(float *)(v3 + 116), 0xAu);
    if ((*(_WORD *)(v3 + 124) & 4) == 0)
      goto LABEL_16;
    goto LABEL_15;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 9u);
  v8 = *(_WORD *)(v3 + 124);
  if ((v8 & 0x100) != 0)
    goto LABEL_31;
LABEL_14:
  if ((v8 & 4) != 0)
LABEL_15:
    this = PB::Writer::write(a2, *(float *)(v3 + 92), 0xBu);
LABEL_16:
  v9 = *(float **)(v3 + 32);
  v10 = *(float **)(v3 + 40);
  while (v9 != v10)
  {
    v11 = *v9++;
    this = PB::Writer::write(a2, v11, 0xCu);
  }
  v13 = *(float **)(v3 + 56);
  v12 = *(float **)(v3 + 64);
  while (v13 != v12)
  {
    v14 = *v13++;
    this = PB::Writer::write(a2, v14, 0xDu);
  }
  return this;
}

uint64_t CMMsl::PearlAttitude::hash_value(CMMsl::PearlAttitude *this)
{
  __int16 v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  uint64_t v23;

  v2 = *((_WORD *)this + 62);
  if ((v2 & 1) == 0)
  {
    v3 = 0;
    if ((v2 & 0x40) != 0)
      goto LABEL_3;
LABEL_25:
    v5 = 0;
    if ((v2 & 0x20) != 0)
      goto LABEL_7;
LABEL_26:
    v7 = 0;
    if ((*((_WORD *)this + 62) & 0x200) != 0)
      goto LABEL_11;
LABEL_27:
    v9 = 0;
    if ((v2 & 2) != 0)
      goto LABEL_15;
LABEL_28:
    v11 = 0;
    if ((v2 & 0x80) != 0)
      goto LABEL_19;
LABEL_29:
    v12 = 0;
    if ((v2 & 0x10) != 0)
      goto LABEL_20;
    goto LABEL_30;
  }
  if (*((double *)this + 10) == 0.0)
    v3 = 0;
  else
    v3 = *((_QWORD *)this + 10);
  if ((v2 & 0x40) == 0)
    goto LABEL_25;
LABEL_3:
  v4 = *((float *)this + 27);
  if (v4 == 0.0)
    v5 = 0;
  else
    v5 = LODWORD(v4);
  if ((v2 & 0x20) == 0)
    goto LABEL_26;
LABEL_7:
  v6 = *((float *)this + 26);
  if (v6 == 0.0)
    v7 = 0;
  else
    v7 = LODWORD(v6);
  if ((*((_WORD *)this + 62) & 0x200) == 0)
    goto LABEL_27;
LABEL_11:
  v8 = *((float *)this + 30);
  if (v8 == 0.0)
    v9 = 0;
  else
    v9 = LODWORD(v8);
  if ((v2 & 2) == 0)
    goto LABEL_28;
LABEL_15:
  v10 = *((float *)this + 22);
  if (v10 == 0.0)
    v11 = 0;
  else
    v11 = LODWORD(v10);
  if ((v2 & 0x80) == 0)
    goto LABEL_29;
LABEL_19:
  v12 = *((unsigned int *)this + 28);
  if ((v2 & 0x10) != 0)
  {
LABEL_20:
    v13 = *((unsigned int *)this + 25);
    goto LABEL_31;
  }
LABEL_30:
  v13 = 0;
LABEL_31:
  v14 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  v15 = *((_WORD *)this + 62);
  if ((v15 & 8) != 0)
  {
    v21 = *((float *)this + 24);
    v16 = LODWORD(v21);
    if (v21 == 0.0)
      v16 = 0;
    if ((*((_WORD *)this + 62) & 0x100) != 0)
    {
LABEL_33:
      v17 = *((float *)this + 29);
      v18 = LODWORD(v17);
      if (v17 == 0.0)
        v18 = 0;
      if ((v15 & 4) != 0)
        goto LABEL_36;
LABEL_43:
      v20 = 0;
      goto LABEL_44;
    }
  }
  else
  {
    v16 = 0;
    if ((*((_WORD *)this + 62) & 0x100) != 0)
      goto LABEL_33;
  }
  v18 = 0;
  if ((v15 & 4) == 0)
    goto LABEL_43;
LABEL_36:
  v19 = *((float *)this + 23);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
LABEL_44:
  v22 = v5 ^ v3 ^ v7 ^ v9 ^ v11 ^ v12 ^ v13 ^ v16 ^ v18 ^ v20 ^ v14;
  v23 = PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
  return v22 ^ v23 ^ PBHashBytes(*((_QWORD *)this + 7), *((_QWORD *)this + 8) - *((_QWORD *)this + 7));
}

void CMMsl::PedOdomFusionExtendedModeSegment::~PedOdomFusionExtendedModeSegment(CMMsl::PedOdomFusionExtendedModeSegment *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::PedOdomFusionExtendedModeSegment::PedOdomFusionExtendedModeSegment(uint64_t this, const CMMsl::PedOdomFusionExtendedModeSegment *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;

  *(_QWORD *)this = off_100353510;
  *(_DWORD *)(this + 56) = 0;
  v2 = *((_BYTE *)a2 + 56);
  if ((v2 & 4) != 0)
  {
    v4 = *((_QWORD *)a2 + 3);
    v3 = 4;
    *(_BYTE *)(this + 56) = 4;
    *(_QWORD *)(this + 24) = v4;
    v2 = *((_BYTE *)a2 + 56);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 56) & 8) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 4);
    v3 |= 8u;
    *(_BYTE *)(this + 56) = v3;
    *(_QWORD *)(this + 32) = v5;
    v2 = *((_BYTE *)a2 + 56);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *(_BYTE *)(this + 56) = v3;
    *(_QWORD *)(this + 16) = v6;
    v2 = *((_BYTE *)a2 + 56);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_BYTE *)(this + 56) = v3;
  *(_QWORD *)(this + 8) = v7;
  v2 = *((_BYTE *)a2 + 56);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  v8 = *((_QWORD *)a2 + 5);
  v3 |= 0x10u;
  *(_BYTE *)(this + 56) = v3;
  *(_QWORD *)(this + 40) = v8;
  v2 = *((_BYTE *)a2 + 56);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0)
      return this;
LABEL_16:
    v10 = *((_DWORD *)a2 + 12);
    *(_BYTE *)(this + 56) = v3 | 0x20;
    *(_DWORD *)(this + 48) = v10;
    return this;
  }
LABEL_15:
  v9 = *((_BYTE *)a2 + 52);
  v3 |= 0x40u;
  *(_BYTE *)(this + 56) = v3;
  *(_BYTE *)(this + 52) = v9;
  if ((*((_BYTE *)a2 + 56) & 0x20) != 0)
    goto LABEL_16;
  return this;
}

uint64_t CMMsl::PedOdomFusionExtendedModeSegment::operator=(uint64_t a1, const CMMsl::PedOdomFusionExtendedModeSegment *a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  char v14;
  int v15;

  if ((const CMMsl::PedOdomFusionExtendedModeSegment *)a1 != a2)
  {
    CMMsl::PedOdomFusionExtendedModeSegment::PedOdomFusionExtendedModeSegment((uint64_t)&v9, a2);
    v3 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v15;
    v15 = v3;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v11 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v5;
    v6 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v12;
    v12 = v6;
    LOBYTE(v3) = *(_BYTE *)(a1 + 52);
    *(_BYTE *)(a1 + 52) = v14;
    v14 = v3;
    v7 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v13;
    v13 = v7;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PedOdomFusionExtendedModeSegment *a2, CMMsl::PedOdomFusionExtendedModeSegment *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  int v9;

  v3 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v3;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v7;
  result = *((double *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((double *)a2 + 5) = result;
  LOBYTE(v3) = *((_BYTE *)this + 52);
  *((_BYTE *)this + 52) = *((_BYTE *)a2 + 52);
  *((_BYTE *)a2 + 52) = v3;
  v9 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v9;
  return result;
}

double CMMsl::PedOdomFusionExtendedModeSegment::PedOdomFusionExtendedModeSegment(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100353510;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 40);
  *(double *)(a1 + 40) = result;
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100353510;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 40);
  *(double *)(a1 + 40) = result;
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return result;
}

uint64_t CMMsl::PedOdomFusionExtendedModeSegment::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  char v5;
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  int v10;
  void (**v12)(CMMsl::PedOdomFusionExtendedModeSegment *__hidden);
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  char v17;
  int v18;

  if (a1 != a2)
  {
    v12 = off_100353510;
    v3 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a2 + 56) = 0;
    v4 = *(_QWORD *)(a2 + 40);
    v5 = *(_BYTE *)(a2 + 52);
    v6 = *(_DWORD *)(a2 + 48);
    v18 = *(_DWORD *)(a1 + 56);
    v14 = *(_OWORD *)(a1 + 24);
    v7 = *(_OWORD *)(a1 + 8);
    v8 = *(_OWORD *)(a2 + 8);
    v9 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 56) = v3;
    *(_OWORD *)(a1 + 24) = v9;
    *(_OWORD *)(a1 + 8) = v8;
    v13 = v7;
    *(_QWORD *)&v7 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v4;
    v15 = v7;
    LOBYTE(v3) = *(_BYTE *)(a1 + 52);
    *(_BYTE *)(a1 + 52) = v5;
    v17 = v3;
    v10 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v6;
    v16 = v10;
    PB::Base::~Base((PB::Base *)&v12);
  }
  return a1;
}

uint64_t CMMsl::PedOdomFusionExtendedModeSegment::formatText(CMMsl::PedOdomFusionExtendedModeSegment *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 56);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(a2, "batchedLocationFixType", *((_DWORD *)this + 12));
    v5 = *((_BYTE *)this + 56);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*((_BYTE *)this + 56) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "distOdom", *((double *)this + 1));
  v5 = *((_BYTE *)this + 56);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "distPed", *((double *)this + 2));
  v5 = *((_BYTE *)this + 56);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "isValid", *((_BYTE *)this + 52));
  v5 = *((_BYTE *)this + 56);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(a2, "timeStop", *((double *)this + 4));
    if ((*((_BYTE *)this + 56) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "timeStart", *((double *)this + 3));
  v5 = *((_BYTE *)this + 56);
  if ((v5 & 8) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 0x10) != 0)
LABEL_8:
    PB::TextFormatter::format(a2, "uncOdom", *((double *)this + 5));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PedOdomFusionExtendedModeSegment::readFrom(CMMsl::PedOdomFusionExtendedModeSegment *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  unint64_t v31;
  char v32;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 56) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_38;
              *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_58;
            case 2u:
              *((_BYTE *)this + 56) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_38;
              *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_58;
            case 3u:
              *((_BYTE *)this + 56) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_38;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_58;
            case 4u:
              *((_BYTE *)this + 56) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_38;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_58;
            case 5u:
              *((_BYTE *)this + 56) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_58:
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_38:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_64;
            case 6u:
              *((_BYTE *)this + 56) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v22 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v22 = v21 != 0;
              }
              *((_BYTE *)this + 52) = v22;
              goto LABEL_64;
            case 7u:
              *((_BYTE *)this + 56) |= 0x20u;
              v23 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v24 = *(_QWORD *)a2;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                v29 = 0;
                v30 = 0;
                v27 = 0;
                if (v2 <= v23)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_63;
                  }
                  v31 = v23++;
                  v32 = *(_BYTE *)(v24 + v31);
                  *((_QWORD *)a2 + 1) = v23;
                  v27 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0)
                    break;
                  v29 += 7;
                  v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_62:
                    v2 = v31 + 1;
                    goto LABEL_63;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v27) = 0;
                goto LABEL_62;
              }
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v2 = v23 + 1;
                *((_QWORD *)a2 + 1) = v23 + 1;
                v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0)
                  goto LABEL_63;
                v25 += 7;
                v23 = v2;
                v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_63:
              *((_DWORD *)this + 12) = v27;
LABEL_64:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_64;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::PedOdomFusionExtendedModeSegment::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 56);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24), 1u);
    v4 = *(_BYTE *)(v3 + 56);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(this + 56) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 2u);
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 4u);
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 5u);
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 7u);
  }
LABEL_14:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 52), 6u);
  if ((*(_BYTE *)(v3 + 56) & 0x20) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 7u);
  return this;
}

uint64_t CMMsl::PedOdomFusionExtendedModeSegment::hash_value(CMMsl::PedOdomFusionExtendedModeSegment *this)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;

  if ((*((_BYTE *)this + 56) & 4) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 56) & 8) != 0)
      goto LABEL_3;
LABEL_20:
    v2 = 0.0;
    if ((*((_BYTE *)this + 56) & 2) != 0)
      goto LABEL_6;
LABEL_21:
    v3 = 0.0;
    if ((*((_BYTE *)this + 56) & 1) != 0)
      goto LABEL_9;
LABEL_22:
    v4 = 0.0;
    if ((*((_BYTE *)this + 56) & 0x10) != 0)
      goto LABEL_12;
LABEL_23:
    v5 = 0.0;
    if ((*((_BYTE *)this + 56) & 0x40) != 0)
      goto LABEL_15;
LABEL_24:
    v6 = 0;
    if ((*((_BYTE *)this + 56) & 0x20) != 0)
      goto LABEL_16;
LABEL_25:
    v7 = 0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ v6 ^ v7;
  }
  v1 = *((double *)this + 3);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 56) & 8) == 0)
    goto LABEL_20;
LABEL_3:
  v2 = *((double *)this + 4);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 56) & 2) == 0)
    goto LABEL_21;
LABEL_6:
  v3 = *((double *)this + 2);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((*((_BYTE *)this + 56) & 1) == 0)
    goto LABEL_22;
LABEL_9:
  v4 = *((double *)this + 1);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((*((_BYTE *)this + 56) & 0x10) == 0)
    goto LABEL_23;
LABEL_12:
  v5 = *((double *)this + 5);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((*((_BYTE *)this + 56) & 0x40) == 0)
    goto LABEL_24;
LABEL_15:
  v6 = *((unsigned __int8 *)this + 52);
  if ((*((_BYTE *)this + 56) & 0x20) == 0)
    goto LABEL_25;
LABEL_16:
  v7 = *((int *)this + 12);
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ v6 ^ v7;
}

void CMMsl::PedestrianCalorieModelDebugging::~PedestrianCalorieModelDebugging(CMMsl::PedestrianCalorieModelDebugging *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::PedestrianCalorieModelDebugging::PedestrianCalorieModelDebugging(uint64_t this, const CMMsl::PedestrianCalorieModelDebugging *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  int v19;

  *(_QWORD *)this = off_100353548;
  *(_DWORD *)(this + 116) = 0;
  v2 = *((_WORD *)a2 + 58);
  if ((v2 & 0x80) != 0)
  {
    v4 = *((_QWORD *)a2 + 8);
    v3 = 128;
    *(_WORD *)(this + 116) = 128;
    *(_QWORD *)(this + 64) = v4;
    v2 = *((_WORD *)a2 + 58);
    if ((v2 & 0x2000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_WORD *)a2 + 58) & 0x2000) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 27);
    v3 |= 0x2000u;
    *(_WORD *)(this + 116) = v3;
    *(_DWORD *)(this + 108) = v5;
    v2 = *((_WORD *)a2 + 58);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *((_QWORD *)a2 + 3);
    v3 |= 4u;
    *(_WORD *)(this + 116) = v3;
    *(_QWORD *)(this + 24) = v6;
    v2 = *((_WORD *)a2 + 58);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_23;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 7);
  v3 |= 0x40u;
  *(_WORD *)(this + 116) = v3;
  *(_QWORD *)(this + 56) = v7;
  v2 = *((_WORD *)a2 + 58);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  v8 = *((_QWORD *)a2 + 5);
  v3 |= 0x10u;
  *(_WORD *)(this + 116) = v3;
  *(_QWORD *)(this + 40) = v8;
  v2 = *((_WORD *)a2 + 58);
  if ((v2 & 1) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  v9 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 116) = v3;
  *(_QWORD *)(this + 8) = v9;
  v2 = *((_WORD *)a2 + 58);
  if ((v2 & 2) == 0)
  {
LABEL_11:
    if ((v2 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  v10 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 116) = v3;
  *(_QWORD *)(this + 16) = v10;
  v2 = *((_WORD *)a2 + 58);
  if ((v2 & 0x800) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  v11 = *((_QWORD *)a2 + 12);
  v3 |= 0x800u;
  *(_WORD *)(this + 116) = v3;
  *(_QWORD *)(this + 96) = v11;
  v2 = *((_WORD *)a2 + 58);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  v12 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 116) = v3;
  *(_QWORD *)(this + 32) = v12;
  v2 = *((_WORD *)a2 + 58);
  if ((v2 & 0x100) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_29;
  }
LABEL_28:
  v13 = *((_QWORD *)a2 + 9);
  v3 |= 0x100u;
  *(_WORD *)(this + 116) = v3;
  *(_QWORD *)(this + 72) = v13;
  v2 = *((_WORD *)a2 + 58);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0)
      goto LABEL_16;
    goto LABEL_30;
  }
LABEL_29:
  v14 = *((_QWORD *)a2 + 6);
  v3 |= 0x20u;
  *(_WORD *)(this + 116) = v3;
  *(_QWORD *)(this + 48) = v14;
  v2 = *((_WORD *)a2 + 58);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x200) == 0)
      goto LABEL_17;
    goto LABEL_31;
  }
LABEL_30:
  v15 = *((_QWORD *)a2 + 11);
  v3 |= 0x400u;
  *(_WORD *)(this + 116) = v3;
  *(_QWORD *)(this + 88) = v15;
  v2 = *((_WORD *)a2 + 58);
  if ((v2 & 0x200) == 0)
  {
LABEL_17:
    if ((v2 & 0x8000) == 0)
      goto LABEL_18;
    goto LABEL_32;
  }
LABEL_31:
  v16 = *((_QWORD *)a2 + 10);
  v3 |= 0x200u;
  *(_WORD *)(this + 116) = v3;
  *(_QWORD *)(this + 80) = v16;
  v2 = *((_WORD *)a2 + 58);
  if ((v2 & 0x8000) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_33;
  }
LABEL_32:
  v17 = *((_BYTE *)a2 + 113);
  v3 |= 0x8000u;
  *(_WORD *)(this + 116) = v3;
  *(_BYTE *)(this + 113) = v17;
  v2 = *((_WORD *)a2 + 58);
  if ((v2 & 0x4000) == 0)
  {
LABEL_19:
    if ((v2 & 0x1000) == 0)
      return this;
LABEL_34:
    v19 = *((_DWORD *)a2 + 26);
    *(_WORD *)(this + 116) = v3 | 0x1000;
    *(_DWORD *)(this + 104) = v19;
    return this;
  }
LABEL_33:
  v18 = *((_BYTE *)a2 + 112);
  v3 |= 0x4000u;
  *(_WORD *)(this + 116) = v3;
  *(_BYTE *)(this + 112) = v18;
  if ((*((_WORD *)a2 + 58) & 0x1000) != 0)
    goto LABEL_34;
  return this;
}

CMMsl *CMMsl::PedestrianCalorieModelDebugging::operator=(CMMsl *a1, const CMMsl::PedestrianCalorieModelDebugging *a2)
{
  CMMsl::PedestrianCalorieModelDebugging *v3;
  _BYTE v5[120];

  if (a1 != a2)
  {
    CMMsl::PedestrianCalorieModelDebugging::PedestrianCalorieModelDebugging((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::PedestrianCalorieModelDebugging *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PedestrianCalorieModelDebugging *a2, CMMsl::PedestrianCalorieModelDebugging *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double result;
  int v17;

  v3 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v3;
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v4;
  v5 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v5;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v7;
  v8 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  v9 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v9;
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v10;
  v11 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v11;
  v12 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v12;
  v13 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v13;
  v14 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v14;
  v15 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v15;
  result = *((double *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((double *)a2 + 10) = result;
  LOBYTE(v5) = *((_BYTE *)this + 113);
  *((_BYTE *)this + 113) = *((_BYTE *)a2 + 113);
  *((_BYTE *)a2 + 113) = v5;
  LOBYTE(v5) = *((_BYTE *)this + 112);
  *((_BYTE *)this + 112) = *((_BYTE *)a2 + 112);
  *((_BYTE *)a2 + 112) = v5;
  v17 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v17;
  return result;
}

double CMMsl::PedestrianCalorieModelDebugging::PedestrianCalorieModelDebugging(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100353548;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a2 + 116) = 0;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  result = *(double *)(a2 + 80);
  *(double *)(a1 + 80) = result;
  *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  return result;
}

CMMsl *CMMsl::PedestrianCalorieModelDebugging::operator=(CMMsl *this, uint64_t a2, CMMsl::PedestrianCalorieModelDebugging *a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  void (**v8)(CMMsl::PedestrianCalorieModelDebugging *__hidden);
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  char v17;
  int v18;

  if (this != (CMMsl *)a2)
  {
    v8 = off_100353548;
    v18 = *(_DWORD *)(a2 + 116);
    *(_DWORD *)(a2 + 116) = 0;
    v4 = *(_OWORD *)(a2 + 56);
    v5 = *(_OWORD *)(a2 + 24);
    v9 = *(_OWORD *)(a2 + 8);
    v10 = v5;
    v11 = *(_OWORD *)(a2 + 40);
    v12 = v4;
    v6 = *(_OWORD *)(a2 + 88);
    v13 = *(_OWORD *)(a2 + 72);
    v14 = v6;
    v17 = *(_BYTE *)(a2 + 113);
    v16 = *(_BYTE *)(a2 + 112);
    v15 = *(_QWORD *)(a2 + 104);
    CMMsl::swap(this, (CMMsl::PedestrianCalorieModelDebugging *)&v8, a3);
    PB::Base::~Base((PB::Base *)&v8);
  }
  return this;
}

uint64_t CMMsl::PedestrianCalorieModelDebugging::formatText(CMMsl::PedestrianCalorieModelDebugging *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 58);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "activeTime", *((double *)this + 1));
    v5 = *((_WORD *)this + 58);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_21;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "currentPace", *((double *)this + 2));
  v5 = *((_WORD *)this + 58);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "distance", *((double *)this + 3));
  v5 = *((_WORD *)this + 58);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "duration", *((double *)this + 4));
  v5 = *((_WORD *)this + 58);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x1000) == 0)
      goto LABEL_7;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "firstStepTime", *((double *)this + 5));
  v5 = *((_WORD *)this + 58);
  if ((v5 & 0x1000) == 0)
  {
LABEL_7:
    if ((v5 & 0x4000) == 0)
      goto LABEL_8;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "gradeType", *((_DWORD *)this + 26));
  v5 = *((_WORD *)this + 58);
  if ((v5 & 0x4000) == 0)
  {
LABEL_8:
    if ((v5 & 0x8000) == 0)
      goto LABEL_9;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "isIndoor", *((_BYTE *)this + 112));
  v5 = *((_WORD *)this + 58);
  if ((v5 & 0x8000) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "isMotionOverrideSet", *((_BYTE *)this + 113));
  v5 = *((_WORD *)this + 58);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "metsWR", *((double *)this + 6));
  v5 = *((_WORD *)this + 58);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "rawDistance", *((double *)this + 7));
  v5 = *((_WORD *)this + 58);
  if ((v5 & 0x80) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 8));
  v5 = *((_WORD *)this + 58);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "steps", *((_DWORD *)this + 27));
  v5 = *((_WORD *)this + 58);
  if ((v5 & 0x100) == 0)
  {
LABEL_14:
    if ((v5 & 0x200) == 0)
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "stepsDuration", *((double *)this + 9));
  v5 = *((_WORD *)this + 58);
  if ((v5 & 0x200) == 0)
  {
LABEL_15:
    if ((v5 & 0x400) == 0)
      goto LABEL_16;
LABEL_33:
    PB::TextFormatter::format(a2, "truthMetsStrollerCorrected", *((double *)this + 11));
    if ((*((_WORD *)this + 58) & 0x800) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_17;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "truthMetsGradeCorrected", *((double *)this + 10));
  v5 = *((_WORD *)this + 58);
  if ((v5 & 0x400) != 0)
    goto LABEL_33;
LABEL_16:
  if ((v5 & 0x800) != 0)
LABEL_17:
    PB::TextFormatter::format(a2, "verticalSpeed", *((double *)this + 12));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PedestrianCalorieModelDebugging::readFrom(CMMsl::PedestrianCalorieModelDebugging *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;
  char v41;
  unsigned int v42;
  unint64_t v43;
  char v44;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 58) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_66;
              *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_97;
            case 2u:
              *((_WORD *)this + 58) |= 0x2000u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_102;
                  }
                  v39 = v21++;
                  v40 = *(_BYTE *)(v22 + v39);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_101:
                    v2 = v39 + 1;
                    goto LABEL_102;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_101;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_102;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_102:
              *((_DWORD *)this + 27) = v25;
              goto LABEL_108;
            case 3u:
              *((_WORD *)this + 58) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_66;
              *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_97;
            case 4u:
              *((_WORD *)this + 58) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_66;
              *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_97;
            case 5u:
              *((_WORD *)this + 58) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_66;
              *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_97;
            case 6u:
              *((_WORD *)this + 58) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_66;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_97;
            case 7u:
              *((_WORD *)this + 58) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_66;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_97;
            case 8u:
              *((_WORD *)this + 58) |= 0x800u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_66;
              *((_QWORD *)this + 12) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_97;
            case 9u:
              *((_WORD *)this + 58) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_66;
              *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_97;
            case 0xAu:
              *((_WORD *)this + 58) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_66;
              *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_97;
            case 0xBu:
              *((_WORD *)this + 58) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_66;
              *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_97;
            case 0xCu:
              *((_WORD *)this + 58) |= 0x400u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_66;
              *((_QWORD *)this + 11) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_97;
            case 0xDu:
              *((_WORD *)this + 58) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_97:
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_66:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_108;
            case 0xEu:
              *((_WORD *)this + 58) |= 0x8000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v28 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v28 = v27 != 0;
              }
              *((_BYTE *)this + 113) = v28;
              goto LABEL_108;
            case 0xFu:
              *((_WORD *)this + 58) |= 0x4000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v30 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v30 = v29 != 0;
              }
              *((_BYTE *)this + 112) = v30;
              goto LABEL_108;
            case 0x10u:
              *((_WORD *)this + 58) |= 0x1000u;
              v31 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v32 = *(_QWORD *)a2;
              if (v31 > 0xFFFFFFFFFFFFFFF5 || v31 + 10 > v2)
              {
                v41 = 0;
                v42 = 0;
                v35 = 0;
                if (v2 <= v31)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v31)
                  {
                    LODWORD(v35) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_107;
                  }
                  v43 = v31++;
                  v44 = *(_BYTE *)(v32 + v43);
                  *((_QWORD *)a2 + 1) = v31;
                  v35 |= (unint64_t)(v44 & 0x7F) << v41;
                  if ((v44 & 0x80) == 0)
                    break;
                  v41 += 7;
                  v14 = v42++ > 8;
                  if (v14)
                  {
                    LODWORD(v35) = 0;
LABEL_106:
                    v2 = v43 + 1;
                    goto LABEL_107;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v35) = 0;
                goto LABEL_106;
              }
              v33 = 0;
              v34 = 0;
              v35 = 0;
              do
              {
                v2 = v31 + 1;
                *((_QWORD *)a2 + 1) = v31 + 1;
                v36 = *(_BYTE *)(v32 + v31);
                v35 |= (unint64_t)(v36 & 0x7F) << v33;
                if ((v36 & 0x80) == 0)
                  goto LABEL_107;
                v33 += 7;
                v31 = v2;
                v14 = v34++ > 8;
              }
              while (!v14);
              LODWORD(v35) = 0;
LABEL_107:
              *((_DWORD *)this + 26) = v35;
LABEL_108:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_108;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::PedestrianCalorieModelDebugging::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 116);
  if ((v4 & 0x80) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 64), 1u);
    v4 = *(_WORD *)(v3 + 116);
    if ((v4 & 0x2000) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_20;
    }
  }
  else if ((*(_WORD *)(this + 116) & 0x2000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 108), 2u);
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 3u);
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 4u);
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0)
      goto LABEL_7;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 5u);
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 1) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0)
      goto LABEL_8;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 6u);
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 7u);
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x800) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(double *)(v3 + 96), 8u);
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 9u);
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 0xAu);
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 0xBu);
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(double *)(v3 + 88), 0xCu);
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x200) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000) == 0)
      goto LABEL_15;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(double *)(v3 + 80), 0xDu);
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x8000) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 113), 0xEu);
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x4000) == 0)
  {
LABEL_16:
    if ((v4 & 0x1000) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 104), 0x10u);
  }
LABEL_32:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 112), 0xFu);
  if ((*(_WORD *)(v3 + 116) & 0x1000) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 104), 0x10u);
  return this;
}

uint64_t CMMsl::PedestrianCalorieModelDebugging::hash_value(CMMsl::PedestrianCalorieModelDebugging *this)
{
  __int16 v1;
  double v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *((_WORD *)this + 58);
  if ((v1 & 0x80) != 0)
  {
    v2 = *((double *)this + 8);
    if (v2 == 0.0)
      v2 = 0.0;
    if ((*((_WORD *)this + 58) & 0x2000) != 0)
    {
LABEL_3:
      v3 = *((int *)this + 27);
      if ((v1 & 4) != 0)
        goto LABEL_4;
LABEL_44:
      v4 = 0.0;
      if ((v1 & 0x40) != 0)
        goto LABEL_7;
LABEL_45:
      v5 = 0.0;
      if ((v1 & 0x10) != 0)
        goto LABEL_10;
LABEL_46:
      v6 = 0.0;
      if ((v1 & 1) != 0)
        goto LABEL_13;
LABEL_47:
      v7 = 0.0;
      if ((v1 & 2) != 0)
        goto LABEL_16;
LABEL_48:
      v8 = 0.0;
      if ((*((_WORD *)this + 58) & 0x800) != 0)
        goto LABEL_19;
LABEL_49:
      v9 = 0.0;
      if ((v1 & 8) != 0)
        goto LABEL_22;
LABEL_50:
      v10 = 0.0;
      if ((*((_WORD *)this + 58) & 0x100) != 0)
        goto LABEL_25;
LABEL_51:
      v11 = 0.0;
      if ((v1 & 0x20) != 0)
        goto LABEL_28;
LABEL_52:
      v12 = 0.0;
      if ((*((_WORD *)this + 58) & 0x400) != 0)
        goto LABEL_31;
LABEL_53:
      v13 = 0.0;
      if ((*((_WORD *)this + 58) & 0x200) != 0)
        goto LABEL_34;
LABEL_54:
      v14 = 0.0;
      if ((*((_WORD *)this + 58) & 0x8000) != 0)
        goto LABEL_37;
      goto LABEL_55;
    }
  }
  else
  {
    v2 = 0.0;
    if ((*((_WORD *)this + 58) & 0x2000) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_44;
LABEL_4:
  v4 = *((double *)this + 3);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 0x40) == 0)
    goto LABEL_45;
LABEL_7:
  v5 = *((double *)this + 7);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_46;
LABEL_10:
  v6 = *((double *)this + 5);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_47;
LABEL_13:
  v7 = *((double *)this + 1);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_48;
LABEL_16:
  v8 = *((double *)this + 2);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((*((_WORD *)this + 58) & 0x800) == 0)
    goto LABEL_49;
LABEL_19:
  v9 = *((double *)this + 12);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_50;
LABEL_22:
  v10 = *((double *)this + 4);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((*((_WORD *)this + 58) & 0x100) == 0)
    goto LABEL_51;
LABEL_25:
  v11 = *((double *)this + 9);
  if (v11 == 0.0)
    v11 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_52;
LABEL_28:
  v12 = *((double *)this + 6);
  if (v12 == 0.0)
    v12 = 0.0;
  if ((*((_WORD *)this + 58) & 0x400) == 0)
    goto LABEL_53;
LABEL_31:
  v13 = *((double *)this + 11);
  if (v13 == 0.0)
    v13 = 0.0;
  if ((*((_WORD *)this + 58) & 0x200) == 0)
    goto LABEL_54;
LABEL_34:
  v14 = *((double *)this + 10);
  if (v14 == 0.0)
    v14 = 0.0;
  if ((*((_WORD *)this + 58) & 0x8000) != 0)
  {
LABEL_37:
    v15 = *((unsigned __int8 *)this + 113);
    if ((*((_WORD *)this + 58) & 0x4000) != 0)
      goto LABEL_38;
LABEL_56:
    v16 = 0;
    if ((*((_WORD *)this + 58) & 0x1000) != 0)
      goto LABEL_39;
LABEL_57:
    v17 = 0;
    return v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ v15 ^ v16 ^ v17;
  }
LABEL_55:
  v15 = 0;
  if ((*((_WORD *)this + 58) & 0x4000) == 0)
    goto LABEL_56;
LABEL_38:
  v16 = *((unsigned __int8 *)this + 112);
  if ((*((_WORD *)this + 58) & 0x1000) == 0)
    goto LABEL_57;
LABEL_39:
  v17 = *((unsigned int *)this + 26);
  return v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ v15 ^ v16 ^ v17;
}

void CMMsl::PedestrianFenceExit::~PedestrianFenceExit(CMMsl::PedestrianFenceExit *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::PedestrianFenceExit::PedestrianFenceExit(uint64_t this, const CMMsl::PedestrianFenceExit *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  *(_QWORD *)this = off_100353580;
  *(_QWORD *)(this + 28) = 0xFFFFFFFFLL;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 2) != 0)
  {
    v4 = *((_QWORD *)a2 + 2);
    v3 = 2;
    *(_BYTE *)(this + 32) = 2;
    *(_QWORD *)(this + 16) = v4;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 1) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 1);
    v3 |= 1u;
    *(_BYTE *)(this + 32) = v3;
    *(_QWORD *)(this + 8) = v5;
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0)
      return this;
LABEL_10:
    v7 = *((_DWORD *)a2 + 7);
    *(_BYTE *)(this + 32) = v3 | 8;
    *(_DWORD *)(this + 28) = v7;
    return this;
  }
  v6 = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *(_BYTE *)(this + 32) = v3;
  *(_DWORD *)(this + 24) = v6;
  if ((*((_BYTE *)a2 + 32) & 8) != 0)
    goto LABEL_10;
  return this;
}

uint64_t CMMsl::PedestrianFenceExit::operator=(uint64_t a1, const CMMsl::PedestrianFenceExit *a2)
{
  __int128 v3;
  int v4;
  _BYTE v6[8];
  __int128 v7;
  int v8;
  uint64_t v9;

  if ((const CMMsl::PedestrianFenceExit *)a1 != a2)
  {
    CMMsl::PedestrianFenceExit::PedestrianFenceExit((uint64_t)v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v3;
    v4 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v8;
    v8 = v4;
    *(_QWORD *)&v3 = *(_QWORD *)(a1 + 28);
    *(_QWORD *)(a1 + 28) = v9;
    v9 = v3;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::PedestrianFenceExit *a2, CMMsl::PedestrianFenceExit *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  float result;
  int v7;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  v7 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v7;
  return result;
}

float CMMsl::PedestrianFenceExit::PedestrianFenceExit(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100353580;
  *(_DWORD *)(a1 + 28) = -1;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_100353580;
  *(_DWORD *)(a1 + 28) = -1;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  return result;
}

uint64_t CMMsl::PedestrianFenceExit::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  void (**v8)(CMMsl::PedestrianFenceExit *__hidden);
  __int128 v9;
  int v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v8 = off_100353580;
    v3 = *(_DWORD *)(a2 + 24);
    v4 = *(_QWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 32) = 0;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    v9 = v5;
    LODWORD(v5) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v3;
    v10 = v5;
    v6 = *(_QWORD *)(a1 + 28);
    *(_QWORD *)(a1 + 28) = v4;
    v11 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::PedestrianFenceExit::formatText(CMMsl::PedestrianFenceExit *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "radius", *((float *)this + 6));
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "timestampSet", *((double *)this + 2));
      if ((*((_BYTE *)this + 32) & 8) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "timestampExit", *((double *)this + 1));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 2) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "userResponse", *((_DWORD *)this + 7));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PedestrianFenceExit::readFrom(CMMsl::PedestrianFenceExit *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 32) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_33;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_30;
            case 2u:
              *((_BYTE *)this + 32) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_33;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_30:
              v2 = *((_QWORD *)a2 + 1) + 8;
              goto LABEL_49;
            case 3u:
              *((_BYTE *)this + 32) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
                v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_49:
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_33:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_55;
            case 4u:
              *((_BYTE *)this + 32) |= 8u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_54;
                  }
                  v29 = v21++;
                  v30 = *(_BYTE *)(v22 + v29);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_53:
                    v2 = v29 + 1;
                    goto LABEL_54;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_53;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_54;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_54:
              *((_DWORD *)this + 7) = v25;
LABEL_55:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_55;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::PedestrianFenceExit::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 2u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 4u);
  }
LABEL_8:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 3u);
  if ((*(_BYTE *)(v3 + 32) & 8) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 4u);
  return this;
}

uint64_t CMMsl::PedestrianFenceExit::hash_value(CMMsl::PedestrianFenceExit *this)
{
  double v1;
  double v2;
  float v3;
  uint64_t v4;
  uint64_t v5;

  if ((*((_BYTE *)this + 32) & 2) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 32) & 1) != 0)
      goto LABEL_3;
LABEL_13:
    v2 = 0.0;
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_6;
    goto LABEL_14;
  }
  v1 = *((double *)this + 2);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 32) & 1) == 0)
    goto LABEL_13;
LABEL_3:
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 32) & 4) != 0)
  {
LABEL_6:
    v3 = *((float *)this + 6);
    v4 = LODWORD(v3);
    if (v3 == 0.0)
      v4 = 0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
      goto LABEL_9;
LABEL_15:
    v5 = 0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ v4 ^ v5;
  }
LABEL_14:
  v4 = 0;
  if ((*((_BYTE *)this + 32) & 8) == 0)
    goto LABEL_15;
LABEL_9:
  v5 = *((int *)this + 7);
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ v4 ^ v5;
}

void CMMsl::PedometerPathStraightness::~PedometerPathStraightness(CMMsl::PedometerPathStraightness *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::PedometerPathStraightness::PedometerPathStraightness(CMMsl::PedometerPathStraightness *this, const CMMsl::PedometerPathStraightness *a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)this = off_1003535B8;
  *((_DWORD *)this + 14) = 0;
  v2 = *((_BYTE *)a2 + 56);
  if ((v2 & 8) != 0)
  {
    result = *((double *)a2 + 4);
    v3 = 8;
    *((_BYTE *)this + 56) = 8;
    *((double *)this + 4) = result;
    v2 = *((_BYTE *)a2 + 56);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 56) & 4) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 3);
    v3 |= 4u;
    *((_BYTE *)this + 56) = v3;
    *((double *)this + 3) = result;
    v2 = *((_BYTE *)a2 + 56);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    result = *((double *)a2 + 5);
    v3 |= 0x10u;
    *((_BYTE *)this + 56) = v3;
    *((double *)this + 5) = result;
    v2 = *((_BYTE *)a2 + 56);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 2);
  v3 |= 2u;
  *((_BYTE *)this + 56) = v3;
  *((double *)this + 2) = result;
  v2 = *((_BYTE *)a2 + 56);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0)
      return result;
LABEL_14:
    result = *((double *)a2 + 1);
    *((_BYTE *)this + 56) = v3 | 1;
    *((double *)this + 1) = result;
    return result;
  }
LABEL_13:
  result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((_BYTE *)this + 56) = v3;
  *((double *)this + 6) = result;
  if ((*((_BYTE *)a2 + 56) & 1) != 0)
    goto LABEL_14;
  return result;
}

uint64_t CMMsl::PedometerPathStraightness::operator=(uint64_t a1, const CMMsl::PedometerPathStraightness *a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;

  if ((const CMMsl::PedometerPathStraightness *)a1 != a2)
  {
    CMMsl::PedometerPathStraightness::PedometerPathStraightness((CMMsl::PedometerPathStraightness *)&v8, a2);
    v3 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v12;
    v12 = v3;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v11;
    v11 = v5;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PedometerPathStraightness *a2, CMMsl::PedometerPathStraightness *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  v3 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v6;
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  v8 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v8;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::PedometerPathStraightness::PedometerPathStraightness(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_1003535B8;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_1003535B8;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::PedometerPathStraightness::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  void (**v9)(CMMsl::PedometerPathStraightness *__hidden);
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;

  if (a1 != a2)
  {
    v9 = off_1003535B8;
    v3 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a2 + 56) = 0;
    v13 = *(_DWORD *)(a1 + 56);
    v11 = *(_OWORD *)(a1 + 24);
    v12 = *(_OWORD *)(a1 + 40);
    v4 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a2 + 8);
    v6 = *(_OWORD *)(a2 + 24);
    v7 = *(_OWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 56) = v3;
    *(_OWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 40) = v7;
    *(_OWORD *)(a1 + 8) = v5;
    v10 = v4;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::PedometerPathStraightness::formatText(CMMsl::PedometerPathStraightness *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 56);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "complexHandMotionPercentage", *((double *)this + 1));
    v5 = *((_BYTE *)this + 56);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*((_BYTE *)this + 56) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "confidence", *((double *)this + 2));
  v5 = *((_BYTE *)this + 56);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "endTime", *((double *)this + 3));
  v5 = *((_BYTE *)this + 56);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(a2, "straightnessMetric", *((double *)this + 5));
    if ((*((_BYTE *)this + 56) & 0x20) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 4));
  v5 = *((_BYTE *)this + 56);
  if ((v5 & 0x10) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 0x20) != 0)
LABEL_7:
    PB::TextFormatter::format(a2, "walkPercentage", *((double *)this + 6));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PedometerPathStraightness::readFrom(CMMsl::PedometerPathStraightness *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 56) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_41;
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_43;
        case 2u:
          *((_BYTE *)this + 56) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_41;
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_43;
        case 3u:
          *((_BYTE *)this + 56) |= 0x10u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_41;
          *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_43;
        case 4u:
          *((_BYTE *)this + 56) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_41;
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_43;
        case 5u:
          *((_BYTE *)this + 56) |= 0x20u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_41;
          *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_43;
        case 6u:
          *((_BYTE *)this + 56) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_43:
            v2 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v2;
          }
          else
          {
LABEL_41:
            *((_BYTE *)a2 + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PedometerPathStraightness::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 56);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32), 1u);
    v4 = *(_BYTE *)(v3 + 56);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(this + 56) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 3u);
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 4u);
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 8), 6u);
  }
LABEL_12:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 5u);
  if ((*(_BYTE *)(v3 + 56) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8), 6u);
  return this;
}

uint64_t CMMsl::PedometerPathStraightness::hash_value(CMMsl::PedometerPathStraightness *this)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;

  if ((*((_BYTE *)this + 56) & 8) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 56) & 4) != 0)
      goto LABEL_3;
LABEL_21:
    v2 = 0.0;
    if ((*((_BYTE *)this + 56) & 0x10) != 0)
      goto LABEL_6;
LABEL_22:
    v3 = 0.0;
    if ((*((_BYTE *)this + 56) & 2) != 0)
      goto LABEL_9;
LABEL_23:
    v4 = 0.0;
    if ((*((_BYTE *)this + 56) & 0x20) != 0)
      goto LABEL_12;
    goto LABEL_24;
  }
  v1 = *((double *)this + 4);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 56) & 4) == 0)
    goto LABEL_21;
LABEL_3:
  v2 = *((double *)this + 3);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 56) & 0x10) == 0)
    goto LABEL_22;
LABEL_6:
  v3 = *((double *)this + 5);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((*((_BYTE *)this + 56) & 2) == 0)
    goto LABEL_23;
LABEL_9:
  v4 = *((double *)this + 2);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((*((_BYTE *)this + 56) & 0x20) != 0)
  {
LABEL_12:
    v5 = *((double *)this + 6);
    if (v5 == 0.0)
      v5 = 0.0;
    if ((*((_BYTE *)this + 56) & 1) != 0)
      goto LABEL_15;
LABEL_25:
    v6 = 0.0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6;
  }
LABEL_24:
  v5 = 0.0;
  if ((*((_BYTE *)this + 56) & 1) == 0)
    goto LABEL_25;
LABEL_15:
  v6 = *((double *)this + 1);
  if (v6 == 0.0)
    v6 = 0.0;
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6;
}

void CMMsl::PeerState::~PeerState(CMMsl::PeerState *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::PeerState::PeerState(uint64_t this, const CMMsl::PeerState *a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)this = off_1003535F0;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::PeerState::operator=(uint64_t a1, uint64_t a2, double a3)
{
  int v3;
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;

  if (a1 != a2)
  {
    v11[0] = off_1003535F0;
    HIDWORD(v12) = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      BYTE4(v12) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v3 = *(_DWORD *)(a2 + 16);
        BYTE4(v12) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = HIDWORD(v12);
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_QWORD *)(a1 + 16);
    *(double *)(a1 + 8) = a3;
    *(_DWORD *)(a1 + 16) = v3;
    *(_DWORD *)(a1 + 20) = v7;
    v11[1] = v8;
    v12 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PeerState *a2, CMMsl::PeerState *a3)
{
  int v3;
  double result;
  int v5;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  return result;
}

double CMMsl::PeerState::PeerState(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_1003535F0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_1003535F0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::PeerState::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  if (a1 != a2)
  {
    v8[0] = off_1003535F0;
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    v8[1] = v5;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::PeerState::formatText(CMMsl::PeerState *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "motionState", *((_DWORD *)this + 4));
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PeerState::readFrom(CMMsl::PeerState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_47;
            }
            v30 = v21++;
            v31 = *(_BYTE *)(v22 + v30);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v25) = 0;
LABEL_46:
          v2 = v30 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v25;
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PeerState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 2u);
  return this;
}

uint64_t CMMsl::PeerState::hash_value(CMMsl::PeerState *this)
{
  double v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0;
    return v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((unsigned int *)this + 4);
  return v2 ^ *(_QWORD *)&v1;
}

void CMMsl::PencilDeviceMotion::~PencilDeviceMotion(CMMsl::PencilDeviceMotion *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_100353628;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::PencilDeviceMotion::~PencilDeviceMotion(this);
  operator delete();
}

CMMsl::PencilDeviceMotion *CMMsl::PencilDeviceMotion::PencilDeviceMotion(CMMsl::PencilDeviceMotion *this, const CMMsl::PencilDeviceMotion *a2)
{
  char v4;
  int v5;
  int v6;

  *(_QWORD *)this = off_100353628;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_DWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (*((_QWORD *)a2 + 4))
    operator new();
  if (this != a2)
    sub_100020CE4((char *)this + 8, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  v4 = *((_BYTE *)a2 + 48);
  if ((v4 & 2) != 0)
  {
    v5 = *((_DWORD *)a2 + 11);
    *((_BYTE *)this + 48) |= 2u;
    *((_DWORD *)this + 11) = v5;
    v4 = *((_BYTE *)a2 + 48);
  }
  if ((v4 & 1) != 0)
  {
    v6 = *((_DWORD *)a2 + 10);
    *((_BYTE *)this + 48) |= 1u;
    *((_DWORD *)this + 10) = v6;
  }
  return this;
}

uint64_t CMMsl::PencilDeviceMotion::operator=(uint64_t a1, const CMMsl::PencilDeviceMotion *a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  int v11;

  if ((const CMMsl::PencilDeviceMotion *)a1 != a2)
  {
    CMMsl::PencilDeviceMotion::PencilDeviceMotion((CMMsl::PencilDeviceMotion *)v7, a2);
    v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v11;
    v11 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v8 = v4;
    v9 = v5;
    *(_QWORD *)&v5 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v10;
    v10 = v5;
    CMMsl::PencilDeviceMotion::~PencilDeviceMotion((CMMsl::PencilDeviceMotion *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::PencilDeviceMotion *a2, CMMsl::PencilDeviceMotion *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  float result;

  v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v8;
  result = *((float *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((float *)a2 + 10) = result;
  return result;
}

uint64_t CMMsl::PencilDeviceMotion::PencilDeviceMotion(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = off_100353628;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_100239458(v4, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

uint64_t CMMsl::PencilDeviceMotion::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  int v11;

  if (a1 != a2)
  {
    CMMsl::PencilDeviceMotion::PencilDeviceMotion((uint64_t)v7, a2);
    v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v11;
    v11 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v8 = v4;
    v9 = v5;
    *(_QWORD *)&v5 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v10;
    v10 = v5;
    CMMsl::PencilDeviceMotion::~PencilDeviceMotion((CMMsl::PencilDeviceMotion *)v7);
  }
  return a1;
}

uint64_t CMMsl::PencilDeviceMotion::formatText(CMMsl::PencilDeviceMotion *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;
  uint64_t v8;
  char v9;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (float *)*((_QWORD *)this + 1);
  v6 = (float *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "gyroBias", v7);
  }
  v8 = *((_QWORD *)this + 4);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "super");
  v9 = *((_BYTE *)this + 48);
  if ((v9 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "temperatureGyro", *((float *)this + 10));
    v9 = *((_BYTE *)this + 48);
  }
  if ((v9 & 2) != 0)
    PB::TextFormatter::format(a2, "temperatureGyroBias", *((float *)this + 11));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::PencilDeviceMotion::readFrom(CMMsl::PencilDeviceMotion *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  char *v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  _DWORD *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  _DWORD *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  int v49;
  unint64_t v50;
  _BYTE v52[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 8);
    v9 = (char *)this + 24;
    while (1)
    {
      v10 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        if (v12++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v22 = v13 & 7;
      if (v22 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          if (v22 == 2)
          {
            if ((PB::Reader::placeMark(a2, v52) & 1) != 0)
              return 0;
            v23 = *((_QWORD *)a2 + 1);
            v24 = *((_QWORD *)a2 + 2);
            while (v23 < v24 && !*((_BYTE *)a2 + 24))
            {
              v26 = (char *)*((_QWORD *)this + 2);
              v25 = *((_QWORD *)this + 3);
              if ((unint64_t)v26 >= v25)
              {
                v28 = (char *)*v8;
                v29 = (v26 - (_BYTE *)*v8) >> 2;
                v30 = v29 + 1;
                if ((unint64_t)(v29 + 1) >> 62)
                  goto LABEL_87;
                v31 = v25 - (_QWORD)v28;
                if (v31 >> 1 > v30)
                  v30 = v31 >> 1;
                if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
                  v32 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v32 = v30;
                if (v32)
                {
                  v33 = (char *)sub_100020E2C((uint64_t)v9, v32);
                  v28 = (char *)*((_QWORD *)this + 1);
                  v26 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v33 = 0;
                }
                v34 = &v33[4 * v29];
                *(_DWORD *)v34 = 0;
                v27 = v34 + 4;
                while (v26 != v28)
                {
                  v35 = *((_DWORD *)v26 - 1);
                  v26 -= 4;
                  *((_DWORD *)v34 - 1) = v35;
                  v34 -= 4;
                }
                *((_QWORD *)this + 1) = v34;
                *((_QWORD *)this + 2) = v27;
                *((_QWORD *)this + 3) = &v33[4 * v32];
                if (v28)
                  operator delete(v28);
              }
              else
              {
                *(_DWORD *)v26 = 0;
                v27 = v26 + 4;
              }
              *((_QWORD *)this + 2) = v27;
              v36 = *((_QWORD *)a2 + 1);
              if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((_QWORD *)a2 + 2))
              {
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v27 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v36);
              v24 = *((_QWORD *)a2 + 2);
              v23 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v23;
            }
            PB::Reader::recallMark(a2, v52);
          }
          else
          {
            v40 = (char *)*((_QWORD *)this + 2);
            v39 = *((_QWORD *)this + 3);
            if ((unint64_t)v40 >= v39)
            {
              v42 = (char *)*v8;
              v43 = (v40 - (_BYTE *)*v8) >> 2;
              v44 = v43 + 1;
              if ((unint64_t)(v43 + 1) >> 62)
LABEL_87:
                sub_10000D5F8();
              v45 = v39 - (_QWORD)v42;
              if (v45 >> 1 > v44)
                v44 = v45 >> 1;
              if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
                v46 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v46 = v44;
              if (v46)
              {
                v47 = (char *)sub_100020E2C((uint64_t)v9, v46);
                v42 = (char *)*((_QWORD *)this + 1);
                v40 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v47 = 0;
              }
              v48 = &v47[4 * v43];
              *(_DWORD *)v48 = 0;
              v41 = v48 + 4;
              while (v40 != v42)
              {
                v49 = *((_DWORD *)v40 - 1);
                v40 -= 4;
                *((_DWORD *)v48 - 1) = v49;
                v48 -= 4;
              }
              *((_QWORD *)this + 1) = v48;
              *((_QWORD *)this + 2) = v41;
              *((_QWORD *)this + 3) = &v47[4 * v46];
              if (v42)
                operator delete(v42);
            }
            else
            {
              *(_DWORD *)v40 = 0;
              v41 = v40 + 4;
            }
            *((_QWORD *)this + 2) = v41;
            v50 = *((_QWORD *)a2 + 1);
            if (v50 <= 0xFFFFFFFFFFFFFFFBLL && v50 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v41 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v50);
LABEL_78:
              *((_QWORD *)a2 + 1) += 4;
            }
            else
            {
LABEL_76:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_79:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || *((_BYTE *)a2 + 24))
            return v4 == 0;
          break;
        case 3u:
          *((_BYTE *)this + 48) |= 2u;
          v37 = *((_QWORD *)a2 + 1);
          if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_76;
          *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v37);
          goto LABEL_78;
        case 4u:
          *((_BYTE *)this + 48) |= 1u;
          v38 = *((_QWORD *)a2 + 1);
          if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_76;
          *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v38);
          goto LABEL_78;
        default:
          if ((PB::Reader::skip(a2, v13 >> 3, v22, 0) & 1) == 0)
            return 0;
          goto LABEL_79;
      }
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_21;
      v17 += 7;
      v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PencilDeviceMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  float *v5;
  float *v6;
  float v7;
  char v8;

  v3 = this;
  v4 = *(const PB::Base **)(this + 32);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7, 2u);
  }
  v8 = *(_BYTE *)(v3 + 48);
  if ((v8 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 44), 3u);
    v8 = *(_BYTE *)(v3 + 48);
  }
  if ((v8 & 1) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 40), 4u);
  return this;
}

uint64_t CMMsl::PencilDeviceMotion::hash_value(CMMsl::PencilDeviceMotion *this)
{
  CMMsl::AuxiliaryDeviceMotion *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;

  v2 = (CMMsl::AuxiliaryDeviceMotion *)*((_QWORD *)this + 4);
  if (v2)
    v3 = CMMsl::AuxiliaryDeviceMotion::hash_value(v2);
  else
    v3 = 0;
  v4 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  if ((*((_BYTE *)this + 48) & 2) != 0)
  {
    v8 = *((float *)this + 11);
    v5 = LODWORD(v8);
    if (v8 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 48) & 1) != 0)
      goto LABEL_6;
LABEL_12:
    v7 = 0;
    return v4 ^ v3 ^ v5 ^ v7;
  }
  v5 = 0;
  if ((*((_BYTE *)this + 48) & 1) == 0)
    goto LABEL_12;
LABEL_6:
  v6 = *((float *)this + 10);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  return v4 ^ v3 ^ v5 ^ v7;
}

uint64_t CMMsl::PencilDeviceMotion::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 32))
    operator new();
  return this;
}

void CMMsl::PencilFusionDMYawAlignmentUpdate::~PencilFusionDMYawAlignmentUpdate(CMMsl::PencilFusionDMYawAlignmentUpdate *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::PencilFusionDMYawAlignmentUpdate::PencilFusionDMYawAlignmentUpdate(uint64_t this, const CMMsl::PencilFusionDMYawAlignmentUpdate *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  *(_QWORD *)this = off_100353660;
  *(_DWORD *)(this + 64) = 0;
  v2 = *((_BYTE *)a2 + 64);
  if ((v2 & 0x20) != 0)
  {
    v4 = *((_QWORD *)a2 + 6);
    v3 = 32;
    *(_BYTE *)(this + 64) = 32;
    *(_QWORD *)(this + 48) = v4;
    v2 = *((_BYTE *)a2 + 64);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 64) & 4) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 3);
    v3 |= 4u;
    *(_BYTE *)(this + 64) = v3;
    *(_QWORD *)(this + 24) = v5;
    v2 = *((_BYTE *)a2 + 64);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *((_QWORD *)a2 + 4);
    v3 |= 8u;
    *(_BYTE *)(this + 64) = v3;
    *(_QWORD *)(this + 32) = v6;
    v2 = *((_BYTE *)a2 + 64);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_15;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 14);
  v3 |= 0x40u;
  *(_BYTE *)(this + 64) = v3;
  *(_DWORD *)(this + 56) = v7;
  v2 = *((_BYTE *)a2 + 64);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0)
      goto LABEL_10;
    goto LABEL_16;
  }
LABEL_15:
  v8 = *((_QWORD *)a2 + 5);
  v3 |= 0x10u;
  *(_BYTE *)(this + 64) = v3;
  *(_QWORD *)(this + 40) = v8;
  v2 = *((_BYTE *)a2 + 64);
  if ((v2 & 1) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0)
      goto LABEL_11;
    goto LABEL_17;
  }
LABEL_16:
  v9 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_BYTE *)(this + 64) = v3;
  *(_QWORD *)(this + 8) = v9;
  v2 = *((_BYTE *)a2 + 64);
  if ((v2 & 2) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0)
      return this;
LABEL_18:
    v11 = *((_DWORD *)a2 + 15);
    *(_BYTE *)(this + 64) = v3 | 0x80;
    *(_DWORD *)(this + 60) = v11;
    return this;
  }
LABEL_17:
  v10 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_BYTE *)(this + 64) = v3;
  *(_QWORD *)(this + 16) = v10;
  if ((*((_BYTE *)a2 + 64) & 0x80) != 0)
    goto LABEL_18;
  return this;
}

uint64_t CMMsl::PencilFusionDMYawAlignmentUpdate::operator=(uint64_t a1, const CMMsl::PencilFusionDMYawAlignmentUpdate *a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _BYTE v9[8];
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  if ((const CMMsl::PencilFusionDMYawAlignmentUpdate *)a1 != a2)
  {
    CMMsl::PencilFusionDMYawAlignmentUpdate::PencilFusionDMYawAlignmentUpdate((uint64_t)v9, a2);
    v3 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v4;
    v11 = v3;
    *(_QWORD *)&v4 = v14;
    *(_QWORD *)&v3 = *(_QWORD *)(a1 + 48);
    v5 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 48) = v13;
    *(_QWORD *)(a1 + 56) = v4;
    v6 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v15;
    v15 = v6;
    v7 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v12;
    v12 = v7;
    v13 = v3;
    v14 = v5;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PencilFusionDMYawAlignmentUpdate *a2, CMMsl::PencilFusionDMYawAlignmentUpdate *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  double result;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  v4 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v4;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  result = *((double *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((double *)a2 + 4) = result;
  v7 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v7;
  v8 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  v9 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v9;
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v10;
  LODWORD(v10) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v10;
  return result;
}

double CMMsl::PencilFusionDMYawAlignmentUpdate::PencilFusionDMYawAlignmentUpdate(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100353660;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100353660;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  return result;
}

uint64_t CMMsl::PencilFusionDMYawAlignmentUpdate::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  void (**v11)(CMMsl::PencilFusionDMYawAlignmentUpdate *__hidden);
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(a2 + 64) = 0;
    v4 = *(_QWORD *)(a2 + 40);
    v5 = *(_OWORD *)(a2 + 24);
    v6 = *(_QWORD *)(a1 + 48);
    v7 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    v8 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    v9 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    v11 = off_100353660;
    v17 = *(_DWORD *)(a1 + 64);
    v14 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v4;
    v12 = v9;
    v13 = v8;
    *(_QWORD *)&v9 = *(_QWORD *)(a2 + 56);
    *(_DWORD *)(a1 + 64) = v3;
    *(_QWORD *)(a1 + 56) = v9;
    v15 = v6;
    v16 = v7;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

uint64_t CMMsl::PencilFusionDMYawAlignmentUpdate::formatText(CMMsl::PencilFusionDMYawAlignmentUpdate *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 64);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "firstRingSensorTimeStampMicroSeconds", *((_QWORD *)this + 1));
    v5 = *((_BYTE *)this + 64);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((*((_BYTE *)this + 64) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "lastRingSensorTimeStampMicroSeconds", *((_QWORD *)this + 2));
  v5 = *((_BYTE *)this + 64);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "medianBufferNumSamples", *((_DWORD *)this + 14));
  v5 = *((_BYTE *)this + 64);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "medianNorthAlignmentEstimateRad", *((double *)this + 3));
  v5 = *((_BYTE *)this + 64);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "newNorthAlignmentEstimateRad", *((double *)this + 4));
  v5 = *((_BYTE *)this + 64);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0)
      goto LABEL_8;
LABEL_17:
    PB::TextFormatter::format(a2, "timeElapsedSinceLastUpdateMicroSeconds", *((_QWORD *)this + 5));
    if ((*((_BYTE *)this + 64) & 0x20) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_9;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "numRingSensorSamples", *((_DWORD *)this + 15));
  v5 = *((_BYTE *)this + 64);
  if ((v5 & 0x10) != 0)
    goto LABEL_17;
LABEL_8:
  if ((v5 & 0x20) != 0)
LABEL_9:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 6));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PencilFusionDMYawAlignmentUpdate::readFrom(CMMsl::PencilFusionDMYawAlignmentUpdate *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 64) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_32;
              *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_104;
            case 2u:
              *((_BYTE *)this + 64) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_32;
              *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_104;
            case 3u:
              *((_BYTE *)this + 64) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_104:
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_32:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_130;
            case 4u:
              *((_BYTE *)this + 64) |= 0x40u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_109;
                  }
                  v53 = v21++;
                  v54 = *(_BYTE *)(v22 + v53);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_108:
                    v2 = v53 + 1;
                    goto LABEL_109;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_108;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_109;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_109:
              *((_DWORD *)this + 14) = v25;
              goto LABEL_130;
            case 5u:
              *((_BYTE *)this + 64) |= 0x10u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v55 = 0;
                v56 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_114;
                  }
                  v57 = v27++;
                  v58 = *(_BYTE *)(v28 + v57);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0)
                    break;
                  v55 += 7;
                  v14 = v56++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_113:
                    v2 = v57 + 1;
                    goto LABEL_114;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v31 = 0;
                goto LABEL_113;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_114;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_114:
              *((_QWORD *)this + 5) = v31;
              goto LABEL_130;
            case 6u:
              *((_BYTE *)this + 64) |= 1u;
              v33 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    v37 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_119;
                  }
                  v61 = v33++;
                  v62 = *(_BYTE *)(v34 + v61);
                  *((_QWORD *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    v37 = 0;
LABEL_118:
                    v2 = v61 + 1;
                    goto LABEL_119;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v37 = 0;
                goto LABEL_118;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)a2 + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_119;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              v37 = 0;
LABEL_119:
              *((_QWORD *)this + 1) = v37;
              goto LABEL_130;
            case 7u:
              *((_BYTE *)this + 64) |= 2u;
              v39 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v40 = *(_QWORD *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    v43 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_124;
                  }
                  v65 = v39++;
                  v66 = *(_BYTE *)(v40 + v65);
                  *((_QWORD *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    v43 = 0;
LABEL_123:
                    v2 = v65 + 1;
                    goto LABEL_124;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v43 = 0;
                goto LABEL_123;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)a2 + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_124;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              v43 = 0;
LABEL_124:
              *((_QWORD *)this + 2) = v43;
              goto LABEL_130;
            case 8u:
              *((_BYTE *)this + 64) |= 0x80u;
              v45 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v46 = *(_QWORD *)a2;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v67 = 0;
                v68 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_129;
                  }
                  v69 = v45++;
                  v70 = *(_BYTE *)(v46 + v69);
                  *((_QWORD *)a2 + 1) = v45;
                  v49 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0)
                    break;
                  v67 += 7;
                  v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_128:
                    v2 = v69 + 1;
                    goto LABEL_129;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v49) = 0;
                goto LABEL_128;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)a2 + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_129;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_129:
              *((_DWORD *)this + 15) = v49;
LABEL_130:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_130;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::PencilFusionDMYawAlignmentUpdate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 64);
  if ((v4 & 0x20) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 48), 1u);
    v4 = *(_BYTE *)(v3 + 64);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(this + 64) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 3u);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 56), 4u);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 40), 5u);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 8), 6u);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 60), 8u);
  }
LABEL_16:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 16), 7u);
  if ((*(_BYTE *)(v3 + 64) & 0x80) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 60), 8u);
  return this;
}

uint64_t CMMsl::PencilFusionDMYawAlignmentUpdate::hash_value(CMMsl::PencilFusionDMYawAlignmentUpdate *this)
{
  double v1;
  double v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((*((_BYTE *)this + 64) & 0x20) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 64) & 4) != 0)
      goto LABEL_3;
LABEL_17:
    v2 = 0.0;
    if ((*((_BYTE *)this + 64) & 8) != 0)
      goto LABEL_6;
LABEL_18:
    v3 = 0.0;
    if ((*((_BYTE *)this + 64) & 0x40) != 0)
      goto LABEL_9;
    goto LABEL_19;
  }
  v1 = *((double *)this + 6);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 64) & 4) == 0)
    goto LABEL_17;
LABEL_3:
  v2 = *((double *)this + 3);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 64) & 8) == 0)
    goto LABEL_18;
LABEL_6:
  v3 = *((double *)this + 4);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((*((_BYTE *)this + 64) & 0x40) != 0)
  {
LABEL_9:
    v4 = *((unsigned int *)this + 14);
    if ((*((_BYTE *)this + 64) & 0x10) != 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  v4 = 0;
  if ((*((_BYTE *)this + 64) & 0x10) != 0)
  {
LABEL_10:
    v5 = *((_QWORD *)this + 5);
    if ((*((_BYTE *)this + 64) & 1) != 0)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  v5 = 0;
  if ((*((_BYTE *)this + 64) & 1) != 0)
  {
LABEL_11:
    v6 = *((_QWORD *)this + 1);
    if ((*((_BYTE *)this + 64) & 2) != 0)
      goto LABEL_12;
LABEL_22:
    v7 = 0;
    if ((*((_BYTE *)this + 64) & 0x80) != 0)
      goto LABEL_13;
LABEL_23:
    v8 = 0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8;
  }
LABEL_21:
  v6 = 0;
  if ((*((_BYTE *)this + 64) & 2) == 0)
    goto LABEL_22;
LABEL_12:
  v7 = *((_QWORD *)this + 2);
  if ((*((_BYTE *)this + 64) & 0x80) == 0)
    goto LABEL_23;
LABEL_13:
  v8 = *((unsigned int *)this + 15);
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8;
}

void CMMsl::PencilFusionReplayResult::~PencilFusionReplayResult(CMMsl::PencilFusionReplayResult *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_100353698;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::PencilFusionReplayResult::~PencilFusionReplayResult(this);
  operator delete();
}

CMMsl::PencilFusionReplayResult *CMMsl::PencilFusionReplayResult::PencilFusionReplayResult(CMMsl::PencilFusionReplayResult *this, const CMMsl::PencilFusionReplayResult *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = off_100353698;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 16) = 0;
  if (*((_QWORD *)a2 + 6))
    operator new();
  if ((*((_BYTE *)a2 + 64) & 4) != 0)
  {
    v4 = *((_QWORD *)a2 + 7);
    *((_BYTE *)this + 64) |= 4u;
    *((_QWORD *)this + 7) = v4;
  }
  if (this != a2)
    sub_100239350((char *)this + 8, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
  v5 = *((_BYTE *)a2 + 64);
  if ((v5 & 1) != 0)
  {
    v6 = *((_QWORD *)a2 + 4);
    *((_BYTE *)this + 64) |= 1u;
    *((_QWORD *)this + 4) = v6;
    v5 = *((_BYTE *)a2 + 64);
  }
  if ((v5 & 2) != 0)
  {
    v7 = *((_QWORD *)a2 + 5);
    *((_BYTE *)this + 64) |= 2u;
    *((_QWORD *)this + 5) = v7;
  }
  return this;
}

uint64_t CMMsl::PencilFusionReplayResult::operator=(uint64_t a1, const CMMsl::PencilFusionReplayResult *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  _BYTE v11[8];
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  if ((const CMMsl::PencilFusionReplayResult *)a1 != a2)
  {
    CMMsl::PencilFusionReplayResult::PencilFusionReplayResult((CMMsl::PencilFusionReplayResult *)v11, a2);
    v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v17;
    v17 = v3;
    v4 = *(_QWORD *)(a1 + 48);
    v5 = *(_QWORD *)(a1 + 56);
    v6 = v16;
    *(_QWORD *)(a1 + 48) = v15;
    *(_QWORD *)(a1 + 56) = v6;
    v15 = v4;
    v16 = v5;
    v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    v12 = v7;
    v8 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v13;
    v13 = v8;
    v9 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v14;
    v14 = v9;
    CMMsl::PencilFusionReplayResult::~PencilFusionReplayResult((CMMsl::PencilFusionReplayResult *)v11);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PencilFusionReplayResult *a2, CMMsl::PencilFusionReplayResult *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_DWORD *)(this + 64);
  *(_DWORD *)(this + 64) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  v4 = *(_QWORD *)(this + 48);
  v5 = *(_QWORD *)(this + 56);
  v6 = *((_QWORD *)a2 + 7);
  *(_QWORD *)(this + 48) = *((_QWORD *)a2 + 6);
  *(_QWORD *)(this + 56) = v6;
  *((_QWORD *)a2 + 6) = v4;
  *((_QWORD *)a2 + 7) = v5;
  v7 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v7;
  v8 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v8;
  v9 = *(_QWORD *)(this + 24);
  v10 = *(_QWORD *)(this + 32);
  v11 = *((_QWORD *)a2 + 4);
  *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
  *(_QWORD *)(this + 32) = v11;
  *((_QWORD *)a2 + 3) = v9;
  *((_QWORD *)a2 + 4) = v10;
  v12 = *(_QWORD *)(this + 40);
  *(_QWORD *)(this + 40) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v12;
  return this;
}

uint64_t CMMsl::PencilFusionReplayResult::PencilFusionReplayResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = off_100353698;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  v6 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  sub_100239458(v4, (__n128 *)(a2 + 8));
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t CMMsl::PencilFusionReplayResult::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  _BYTE v11[8];
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  if (a1 != a2)
  {
    CMMsl::PencilFusionReplayResult::PencilFusionReplayResult((uint64_t)v11, a2);
    v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v17;
    v17 = v3;
    v4 = *(_QWORD *)(a1 + 48);
    v5 = *(_QWORD *)(a1 + 56);
    v6 = v16;
    *(_QWORD *)(a1 + 48) = v15;
    *(_QWORD *)(a1 + 56) = v6;
    v15 = v4;
    v16 = v5;
    v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    v12 = v7;
    v8 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v13;
    v13 = v8;
    v9 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v14;
    v14 = v9;
    CMMsl::PencilFusionReplayResult::~PencilFusionReplayResult((CMMsl::PencilFusionReplayResult *)v11);
  }
  return a1;
}

uint64_t CMMsl::PencilFusionReplayResult::formatText(CMMsl::PencilFusionReplayResult *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;
  double *v6;
  double *v7;
  double v8;
  uint64_t v9;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 64);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "lastAuxTimeStampMicroSeconds", *((_QWORD *)this + 4));
    v5 = *((_BYTE *)this + 64);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "lastRingSensorTimeStampMicroSeconds", *((_QWORD *)this + 5));
  v6 = (double *)*((_QWORD *)this + 1);
  v7 = (double *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "qSP", v8);
  }
  v9 = *((_QWORD *)this + 6);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, a2, "super");
  if ((*((_BYTE *)this + 64) & 4) != 0)
    PB::TextFormatter::format(a2, "timeStampMicroSeconds", *((_QWORD *)this + 7));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::PencilFusionReplayResult::readFrom(CMMsl::PencilFusionReplayResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  char *v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  unint64_t v63;
  char v64;
  unint64_t v65;
  char *v66;
  _QWORD *v67;
  char v68;
  unsigned int v69;
  unint64_t v70;
  char v71;
  char v72;
  unsigned int v73;
  unint64_t v74;
  char v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  _BYTE v87[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 8);
    v9 = (char *)this + 24;
    while (1)
    {
      v10 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v16 = v12++ > 8;
        if (v16)
          goto LABEL_20;
      }
LABEL_21:
      v22 = v13 & 7;
      if (v22 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          *((_BYTE *)this + 64) |= 4u;
          v23 = *((_QWORD *)a2 + 1);
          v24 = *((_QWORD *)a2 + 2);
          v25 = *(_QWORD *)a2;
          if (v23 <= 0xFFFFFFFFFFFFFFF5 && v23 + 10 <= v24)
          {
            v26 = 0;
            v27 = 0;
            v28 = 0;
            do
            {
              v29 = v23 + 1;
              *((_QWORD *)a2 + 1) = v23 + 1;
              v30 = *(_BYTE *)(v25 + v23);
              v28 |= (unint64_t)(v30 & 0x7F) << v26;
              if ((v30 & 0x80) == 0)
                goto LABEL_108;
              v26 += 7;
              v23 = v29;
              v16 = v27++ > 8;
            }
            while (!v16);
LABEL_78:
            v28 = 0;
            goto LABEL_108;
          }
          v61 = 0;
          v62 = 0;
          v28 = 0;
          if (v24 <= v23)
            v24 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v24 == v23)
            {
              v28 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v63 = v23 + 1;
              v64 = *(_BYTE *)(v25 + v23);
              *((_QWORD *)a2 + 1) = v63;
              v28 |= (unint64_t)(v64 & 0x7F) << v61;
              if (v64 < 0)
              {
                v61 += 7;
                v23 = v63;
                v16 = v62++ > 8;
                if (v16)
                  goto LABEL_78;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v28 = 0;
            }
            break;
          }
LABEL_108:
          *((_QWORD *)this + 7) = v28;
          goto LABEL_126;
        case 3u:
          if (v22 == 2)
          {
            if ((PB::Reader::placeMark(a2, v87) & 1) != 0)
              return 0;
            v31 = *((_QWORD *)a2 + 1);
            v32 = *((_QWORD *)a2 + 2);
            while (v31 < v32 && !*((_BYTE *)a2 + 24))
            {
              v34 = (char *)*((_QWORD *)this + 2);
              v33 = *((_QWORD *)this + 3);
              if ((unint64_t)v34 >= v33)
              {
                v36 = (char *)*v8;
                v37 = (v34 - (_BYTE *)*v8) >> 3;
                v38 = v37 + 1;
                if ((unint64_t)(v37 + 1) >> 61)
                  goto LABEL_136;
                v39 = v33 - (_QWORD)v36;
                if (v39 >> 2 > v38)
                  v38 = v39 >> 2;
                if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
                  v40 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v40 = v38;
                if (v40)
                {
                  v41 = (char *)sub_10000D60C((uint64_t)v9, v40);
                  v36 = (char *)*((_QWORD *)this + 1);
                  v34 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v41 = 0;
                }
                v42 = &v41[8 * v37];
                *(_QWORD *)v42 = 0;
                v35 = v42 + 8;
                while (v34 != v36)
                {
                  v43 = *((_QWORD *)v34 - 1);
                  v34 -= 8;
                  *((_QWORD *)v42 - 1) = v43;
                  v42 -= 8;
                }
                *((_QWORD *)this + 1) = v42;
                *((_QWORD *)this + 2) = v35;
                *((_QWORD *)this + 3) = &v41[8 * v40];
                if (v36)
                  operator delete(v36);
              }
              else
              {
                *(_QWORD *)v34 = 0;
                v35 = v34 + 8;
              }
              *((_QWORD *)this + 2) = v35;
              v44 = *((_QWORD *)a2 + 1);
              if (v44 > 0xFFFFFFFFFFFFFFF7 || v44 + 8 > *((_QWORD *)a2 + 2))
              {
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v35 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v44);
              v32 = *((_QWORD *)a2 + 2);
              v31 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v31;
            }
            PB::Reader::recallMark(a2, v87);
          }
          else
          {
            v66 = (char *)*((_QWORD *)this + 2);
            v65 = *((_QWORD *)this + 3);
            if ((unint64_t)v66 >= v65)
            {
              v76 = (char *)*v8;
              v77 = (v66 - (_BYTE *)*v8) >> 3;
              v78 = v77 + 1;
              if ((unint64_t)(v77 + 1) >> 61)
LABEL_136:
                sub_10000D5F8();
              v79 = v65 - (_QWORD)v76;
              if (v79 >> 2 > v78)
                v78 = v79 >> 2;
              if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8)
                v80 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v80 = v78;
              if (v80)
              {
                v81 = (char *)sub_10000D60C((uint64_t)v9, v80);
                v76 = (char *)*((_QWORD *)this + 1);
                v66 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v81 = 0;
              }
              v82 = &v81[8 * v77];
              *(_QWORD *)v82 = 0;
              v67 = v82 + 8;
              while (v66 != v76)
              {
                v83 = *((_QWORD *)v66 - 1);
                v66 -= 8;
                *((_QWORD *)v82 - 1) = v83;
                v82 -= 8;
              }
              *((_QWORD *)this + 1) = v82;
              *((_QWORD *)this + 2) = v67;
              *((_QWORD *)this + 3) = &v81[8 * v80];
              if (v76)
                operator delete(v76);
            }
            else
            {
              *(_QWORD *)v66 = 0;
              v67 = v66 + 8;
            }
            *((_QWORD *)this + 2) = v67;
            v84 = *((_QWORD *)a2 + 1);
            if (v84 <= 0xFFFFFFFFFFFFFFF7 && v84 + 8 <= *((_QWORD *)a2 + 2))
            {
              *(v67 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v84);
              *((_QWORD *)a2 + 1) += 8;
            }
            else
            {
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_126:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 4u:
          *((_BYTE *)this + 64) |= 1u;
          v45 = *((_QWORD *)a2 + 1);
          v46 = *((_QWORD *)a2 + 2);
          v47 = *(_QWORD *)a2;
          if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
          {
            v48 = 0;
            v49 = 0;
            v50 = 0;
            do
            {
              v51 = v45 + 1;
              *((_QWORD *)a2 + 1) = v45 + 1;
              v52 = *(_BYTE *)(v47 + v45);
              v50 |= (unint64_t)(v52 & 0x7F) << v48;
              if ((v52 & 0x80) == 0)
                goto LABEL_111;
              v48 += 7;
              v45 = v51;
              v16 = v49++ > 8;
            }
            while (!v16);
LABEL_87:
            v50 = 0;
            goto LABEL_111;
          }
          v68 = 0;
          v69 = 0;
          v50 = 0;
          if (v46 <= v45)
            v46 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v46 == v45)
            {
              v50 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v70 = v45 + 1;
              v71 = *(_BYTE *)(v47 + v45);
              *((_QWORD *)a2 + 1) = v70;
              v50 |= (unint64_t)(v71 & 0x7F) << v68;
              if (v71 < 0)
              {
                v68 += 7;
                v45 = v70;
                v16 = v69++ > 8;
                if (v16)
                  goto LABEL_87;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v50 = 0;
            }
            break;
          }
LABEL_111:
          *((_QWORD *)this + 4) = v50;
          goto LABEL_126;
        case 5u:
          *((_BYTE *)this + 64) |= 2u;
          v53 = *((_QWORD *)a2 + 1);
          v54 = *((_QWORD *)a2 + 2);
          v55 = *(_QWORD *)a2;
          if (v53 <= 0xFFFFFFFFFFFFFFF5 && v53 + 10 <= v54)
          {
            v56 = 0;
            v57 = 0;
            v58 = 0;
            do
            {
              v59 = v53 + 1;
              *((_QWORD *)a2 + 1) = v53 + 1;
              v60 = *(_BYTE *)(v55 + v53);
              v58 |= (unint64_t)(v60 & 0x7F) << v56;
              if ((v60 & 0x80) == 0)
                goto LABEL_114;
              v56 += 7;
              v53 = v59;
              v16 = v57++ > 8;
            }
            while (!v16);
LABEL_94:
            v58 = 0;
            goto LABEL_114;
          }
          v72 = 0;
          v73 = 0;
          v58 = 0;
          if (v54 <= v53)
            v54 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v54 == v53)
            {
              v58 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v74 = v53 + 1;
              v75 = *(_BYTE *)(v55 + v53);
              *((_QWORD *)a2 + 1) = v74;
              v58 |= (unint64_t)(v75 & 0x7F) << v72;
              if (v75 < 0)
              {
                v72 += 7;
                v53 = v74;
                v16 = v73++ > 8;
                if (v16)
                  goto LABEL_94;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v58 = 0;
            }
            break;
          }
LABEL_114:
          *((_QWORD *)this + 5) = v58;
          goto LABEL_126;
        default:
          if ((PB::Reader::skip(a2, v13 >> 3, v22, 0) & 1) == 0)
            return 0;
          goto LABEL_126;
      }
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_21;
      v17 += 7;
      v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PencilFusionReplayResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  double *v5;
  double *v6;
  double v7;
  char v8;

  v3 = this;
  v4 = *(const PB::Base **)(this + 48);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  if ((*(_BYTE *)(v3 + 64) & 4) != 0)
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 56), 2u);
  v5 = *(double **)(v3 + 8);
  v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7, 3u);
  }
  v8 = *(_BYTE *)(v3 + 64);
  if ((v8 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 32), 4u);
    v8 = *(_BYTE *)(v3 + 64);
  }
  if ((v8 & 2) != 0)
    return PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 40), 5u);
  return this;
}

uint64_t CMMsl::PencilFusionReplayResult::hash_value(CMMsl::PencilFusionReplayResult *this)
{
  CMMsl::PencilFusionResult *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (CMMsl::PencilFusionResult *)*((_QWORD *)this + 6);
  if (v2)
    v3 = CMMsl::PencilFusionResult::hash_value(v2);
  else
    v3 = 0;
  if ((*((_BYTE *)this + 64) & 4) != 0)
    v4 = *((_QWORD *)this + 7);
  else
    v4 = 0;
  v5 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  if ((*((_BYTE *)this + 64) & 1) != 0)
  {
    v6 = *((_QWORD *)this + 4);
    if ((*((_BYTE *)this + 64) & 2) != 0)
      goto LABEL_9;
LABEL_11:
    v7 = 0;
    return v4 ^ v3 ^ v6 ^ v7 ^ v5;
  }
  v6 = 0;
  if ((*((_BYTE *)this + 64) & 2) == 0)
    goto LABEL_11;
LABEL_9:
  v7 = *((_QWORD *)this + 5);
  return v4 ^ v3 ^ v6 ^ v7 ^ v5;
}

uint64_t CMMsl::PencilFusionReplayResult::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 48))
    operator new();
  return this;
}

void CMMsl::PencilFusionResult::~PencilFusionResult(CMMsl::PencilFusionResult *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::PencilFusionResult::PencilFusionResult(uint64_t this, const CMMsl::PencilFusionResult *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  *(_QWORD *)this = off_1003536D0;
  *(_DWORD *)(this + 76) = 0;
  v2 = *((_WORD *)a2 + 38);
  if ((v2 & 0x10) != 0)
  {
    v4 = *((_QWORD *)a2 + 5);
    v3 = 16;
    *(_WORD *)(this + 76) = 16;
    *(_QWORD *)(this + 40) = v4;
    v2 = *((_WORD *)a2 + 38);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 6);
    v3 |= 0x20u;
    *(_WORD *)(this + 76) = v3;
    *(_QWORD *)(this + 48) = v5;
    v2 = *((_WORD *)a2 + 38);
  }
LABEL_6:
  if ((v2 & 0x40) != 0)
  {
    v6 = *((_QWORD *)a2 + 7);
    v3 |= 0x40u;
    *(_WORD *)(this + 76) = v3;
    *(_QWORD *)(this + 56) = v6;
    v2 = *((_WORD *)a2 + 38);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 8);
  v3 |= 0x80u;
  *(_WORD *)(this + 76) = v3;
  *(_QWORD *)(this + 64) = v7;
  v2 = *((_WORD *)a2 + 38);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0)
      goto LABEL_10;
    goto LABEL_17;
  }
LABEL_16:
  v8 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 76) = v3;
  *(_QWORD *)(this + 8) = v8;
  v2 = *((_WORD *)a2 + 38);
  if ((v2 & 2) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0)
      goto LABEL_11;
    goto LABEL_18;
  }
LABEL_17:
  v9 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 76) = v3;
  *(_QWORD *)(this + 16) = v9;
  v2 = *((_WORD *)a2 + 38);
  if ((v2 & 8) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0)
      goto LABEL_12;
    goto LABEL_19;
  }
LABEL_18:
  v10 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 76) = v3;
  *(_QWORD *)(this + 32) = v10;
  v2 = *((_WORD *)a2 + 38);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 0x100) == 0)
      return this;
LABEL_20:
    v12 = *((_BYTE *)a2 + 72);
    *(_WORD *)(this + 76) = v3 | 0x100;
    *(_BYTE *)(this + 72) = v12;
    return this;
  }
LABEL_19:
  v11 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *(_WORD *)(this + 76) = v3;
  *(_QWORD *)(this + 24) = v11;
  if ((*((_WORD *)a2 + 38) & 0x100) != 0)
    goto LABEL_20;
  return this;
}

uint64_t CMMsl::PencilFusionResult::operator=(uint64_t a1, const CMMsl::PencilFusionResult *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  int v18;

  if ((const CMMsl::PencilFusionResult *)a1 != a2)
  {
    CMMsl::PencilFusionResult::PencilFusionResult((uint64_t)&v11, a2);
    v3 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v16;
    v16 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    v12 = v4;
    v5 = v15;
    v7 = *(_OWORD *)(a1 + 32);
    v6 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a1 + 32) = v14;
    *(_OWORD *)(a1 + 48) = v5;
    v8 = *(_DWORD *)(a1 + 76);
    *(_DWORD *)(a1 + 76) = v18;
    v18 = v8;
    v14 = v7;
    v15 = v6;
    v9 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v13;
    v13 = v9;
    LOBYTE(v9) = *(_BYTE *)(a1 + 72);
    *(_BYTE *)(a1 + 72) = v17;
    v17 = v9;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PencilFusionResult *a2, CMMsl::PencilFusionResult *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  uint64_t v11;

  v3 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v3;
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v4;
  v5 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v5;
  v6 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v6;
  v7 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v7;
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v9;
  result = *((double *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((double *)a2 + 4) = result;
  v11 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v11;
  LOBYTE(v11) = *((_BYTE *)this + 72);
  *((_BYTE *)this + 72) = *((_BYTE *)a2 + 72);
  *((_BYTE *)a2 + 72) = v11;
  return result;
}

double CMMsl::PencilFusionResult::PencilFusionResult(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_1003536D0;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a2 + 76) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_1003536D0;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a2 + 76) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return result;
}

uint64_t CMMsl::PencilFusionResult::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  void (**v14)(CMMsl::PencilFusionResult *__hidden);
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  int v21;

  if (a1 != a2)
  {
    v14 = off_1003536D0;
    v3 = *(_DWORD *)(a2 + 76);
    *(_DWORD *)(a2 + 76) = 0;
    v4 = *(_QWORD *)(a2 + 64);
    v5 = *(_QWORD *)(a2 + 24);
    v6 = *(_BYTE *)(a2 + 72);
    v21 = *(_DWORD *)(a1 + 76);
    v19 = *(_QWORD *)(a1 + 64);
    v7 = *(_OWORD *)(a2 + 8);
    v15 = *(_OWORD *)(a1 + 8);
    v8 = *(_OWORD *)(a2 + 32);
    v9 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = v4;
    v11 = *(_OWORD *)(a1 + 32);
    v10 = *(_OWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 76) = v3;
    *(_OWORD *)(a1 + 8) = v7;
    *(_OWORD *)(a1 + 32) = v8;
    *(_OWORD *)(a1 + 48) = v9;
    v17 = v11;
    v18 = v10;
    v12 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v5;
    v16 = v12;
    LOBYTE(v12) = *(_BYTE *)(a1 + 72);
    *(_BYTE *)(a1 + 72) = v6;
    v20 = v12;
    PB::Base::~Base((PB::Base *)&v14);
  }
  return a1;
}

uint64_t CMMsl::PencilFusionResult::formatText(CMMsl::PencilFusionResult *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 38);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "altitudeAngle", *((double *)this + 1));
    v5 = *((_WORD *)this + 38);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "azimuthAngle", *((double *)this + 2));
  v5 = *((_WORD *)this + 38);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "estimated", *((_BYTE *)this + 72));
  v5 = *((_WORD *)this + 38);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "estimationUpdateIndex", *((_QWORD *)this + 3));
  v5 = *((_WORD *)this + 38);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "rollAngle", *((double *)this + 4));
  v5 = *((_WORD *)this + 38);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 5));
  v5 = *((_WORD *)this + 38);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0)
      goto LABEL_9;
LABEL_19:
    PB::TextFormatter::format(a2, "y", *((double *)this + 7));
    if ((*((_WORD *)this + 38) & 0x80) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_10;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "x", *((double *)this + 6));
  v5 = *((_WORD *)this + 38);
  if ((v5 & 0x40) != 0)
    goto LABEL_19;
LABEL_9:
  if ((v5 & 0x80) != 0)
LABEL_10:
    PB::TextFormatter::format(a2, "z", *((double *)this + 8));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PencilFusionResult::readFrom(CMMsl::PencilFusionResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  char v29;
  unsigned int v30;
  unint64_t v31;
  char v32;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 38) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_44;
              *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_64;
            case 2u:
              *((_WORD *)this + 38) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_44;
              *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_64;
            case 3u:
              *((_WORD *)this + 38) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_44;
              *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_64;
            case 4u:
              *((_WORD *)this + 38) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_44;
              *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_64;
            case 5u:
              *((_WORD *)this + 38) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_44;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_64;
            case 6u:
              *((_WORD *)this + 38) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_44;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_64;
            case 7u:
              *((_WORD *)this + 38) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_64:
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_44:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_70;
            case 8u:
              *((_WORD *)this + 38) |= 4u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v29 = 0;
                v30 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    v25 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_69;
                  }
                  v31 = v21++;
                  v32 = *(_BYTE *)(v22 + v31);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0)
                    break;
                  v29 += 7;
                  v14 = v30++ > 8;
                  if (v14)
                  {
                    v25 = 0;
LABEL_68:
                    v2 = v31 + 1;
                    goto LABEL_69;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v25 = 0;
                goto LABEL_68;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_69;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              v25 = 0;
LABEL_69:
              *((_QWORD *)this + 3) = v25;
LABEL_70:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 9u:
              *((_WORD *)this + 38) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v28 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v28 = v27 != 0;
              }
              *((_BYTE *)this + 72) = v28;
              goto LABEL_70;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_70;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::PencilFusionResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 76);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 40), 1u);
    v4 = *(_WORD *)(v3 + 76);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 2u);
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 3u);
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 4u);
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 5u);
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 2) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 6u);
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 7u);
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0)
      return this;
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 72), 9u);
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 24), 8u);
  if ((*(_WORD *)(v3 + 76) & 0x100) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 72), 9u);
  return this;
}

uint64_t CMMsl::PencilFusionResult::hash_value(CMMsl::PencilFusionResult *this)
{
  __int16 v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *((_WORD *)this + 38);
  if ((v1 & 0x10) == 0)
  {
    v2 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_3;
LABEL_26:
    v3 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_6;
LABEL_27:
    v4 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_9;
LABEL_28:
    v5 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_12;
LABEL_29:
    v6 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_15;
LABEL_30:
    v7 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_18;
LABEL_31:
    v8 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_21;
LABEL_32:
    v9 = 0;
    if ((*((_WORD *)this + 38) & 0x100) != 0)
      goto LABEL_22;
LABEL_33:
    v10 = 0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ v9 ^ v10;
  }
  v2 = *((double *)this + 5);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_26;
LABEL_3:
  v3 = *((double *)this + 6);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 0x40) == 0)
    goto LABEL_27;
LABEL_6:
  v4 = *((double *)this + 7);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 0x80) == 0)
    goto LABEL_28;
LABEL_9:
  v5 = *((double *)this + 8);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_29;
LABEL_12:
  v6 = *((double *)this + 1);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_30;
LABEL_15:
  v7 = *((double *)this + 2);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_31;
LABEL_18:
  v8 = *((double *)this + 4);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_32;
LABEL_21:
  v9 = *((_QWORD *)this + 3);
  if ((*((_WORD *)this + 38) & 0x100) == 0)
    goto LABEL_33;
LABEL_22:
  v10 = *((unsigned __int8 *)this + 72);
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ v9 ^ v10;
}

void CMMsl::PencilFusionRingSensorTrustModelUpdate::~PencilFusionRingSensorTrustModelUpdate(CMMsl::PencilFusionRingSensorTrustModelUpdate *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::PencilFusionRingSensorTrustModelUpdate::PencilFusionRingSensorTrustModelUpdate(CMMsl::PencilFusionRingSensorTrustModelUpdate *this, const CMMsl::PencilFusionRingSensorTrustModelUpdate *a2)
{
  char v2;
  char v3;
  double result;
  char v5;
  int v6;

  *(_QWORD *)this = off_100353708;
  *((_DWORD *)this + 6) = 0;
  *((_DWORD *)this + 8) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 2) != 0)
  {
    result = *((double *)a2 + 2);
    v3 = 2;
    *((_BYTE *)this + 32) = 2;
    *((double *)this + 2) = result;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 8) != 0)
  {
LABEL_5:
    v5 = *((_BYTE *)a2 + 28);
    v3 |= 8u;
    *((_BYTE *)this + 32) = v3;
    *((_BYTE *)this + 28) = v5;
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 1) == 0)
      return result;
LABEL_10:
    result = *((double *)a2 + 1);
    *((_BYTE *)this + 32) = v3 | 1;
    *((double *)this + 1) = result;
    return result;
  }
  v6 = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *((_BYTE *)this + 32) = v3;
  *((_DWORD *)this + 6) = v6;
  if ((*((_BYTE *)a2 + 32) & 1) != 0)
    goto LABEL_10;
  return result;
}

uint64_t CMMsl::PencilFusionRingSensorTrustModelUpdate::operator=(uint64_t a1, const CMMsl::PencilFusionRingSensorTrustModelUpdate *a2)
{
  int v3;
  int v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  int v9;
  char v10;
  int v11;

  if ((const CMMsl::PencilFusionRingSensorTrustModelUpdate *)a1 != a2)
  {
    CMMsl::PencilFusionRingSensorTrustModelUpdate::PencilFusionRingSensorTrustModelUpdate((CMMsl::PencilFusionRingSensorTrustModelUpdate *)v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v11;
    v11 = v3;
    LOBYTE(v3) = *(_BYTE *)(a1 + 28);
    *(_BYTE *)(a1 + 28) = v10;
    v10 = v3;
    v4 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PencilFusionRingSensorTrustModelUpdate *a2, CMMsl::PencilFusionRingSensorTrustModelUpdate *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  double result;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  LOBYTE(v3) = *((_BYTE *)this + 28);
  *((_BYTE *)this + 28) = *((_BYTE *)a2 + 28);
  *((_BYTE *)a2 + 28) = v3;
  v5 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::PencilFusionRingSensorTrustModelUpdate::PencilFusionRingSensorTrustModelUpdate(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100353708;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100353708;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::PencilFusionRingSensorTrustModelUpdate::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  int v5;
  char v6;
  int v7;
  __int128 v8;
  __int128 v9;
  void (**v11)(CMMsl::PencilFusionRingSensorTrustModelUpdate *__hidden);
  __int128 v12;
  int v13;
  char v14;
  int v15;

  if (a1 != a2)
  {
    v11 = off_100353708;
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v4 = *(_BYTE *)(a2 + 28);
    v5 = *(_DWORD *)(a2 + 24);
    v15 = *(_DWORD *)(a1 + 32);
    v6 = *(_BYTE *)(a1 + 28);
    *(_BYTE *)(a1 + 28) = v4;
    v14 = v6;
    v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v5;
    v13 = v7;
    v8 = *(_OWORD *)(a1 + 8);
    v9 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v9;
    v12 = v8;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

uint64_t CMMsl::PencilFusionRingSensorTrustModelUpdate::formatText(CMMsl::PencilFusionRingSensorTrustModelUpdate *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "avgRelOmegaRps", *((double *)this + 1));
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
      if ((*((_BYTE *)this + 32) & 8) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "ringSensorTrustModelMode", *((_DWORD *)this + 6));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 2) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "trustPencilRingSensorBool", *((_BYTE *)this + 28));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PencilFusionRingSensorTrustModelUpdate::readFrom(CMMsl::PencilFusionRingSensorTrustModelUpdate *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  unint64_t v31;
  char v32;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 32) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_38;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_49;
            case 2u:
              *((_BYTE *)this + 32) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v22 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v22 = v21 != 0;
              }
              *((_BYTE *)this + 28) = v22;
              goto LABEL_55;
            case 3u:
              *((_BYTE *)this + 32) |= 4u;
              v23 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v24 = *(_QWORD *)a2;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                v29 = 0;
                v30 = 0;
                v27 = 0;
                if (v2 <= v23)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_54;
                  }
                  v31 = v23++;
                  v32 = *(_BYTE *)(v24 + v31);
                  *((_QWORD *)a2 + 1) = v23;
                  v27 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0)
                    break;
                  v29 += 7;
                  v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_53:
                    v2 = v31 + 1;
                    goto LABEL_54;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v27) = 0;
                goto LABEL_53;
              }
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v2 = v23 + 1;
                *((_QWORD *)a2 + 1) = v23 + 1;
                v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0)
                  goto LABEL_54;
                v25 += 7;
                v23 = v2;
                v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_54:
              *((_DWORD *)this + 6) = v27;
LABEL_55:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 4u:
              *((_BYTE *)this + 32) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_49:
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_38:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_55;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_55;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::PencilFusionRingSensorTrustModelUpdate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 28), 2u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 8), 4u);
  }
LABEL_8:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 3u);
  if ((*(_BYTE *)(v3 + 32) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8), 4u);
  return this;
}

uint64_t CMMsl::PencilFusionRingSensorTrustModelUpdate::hash_value(CMMsl::PencilFusionRingSensorTrustModelUpdate *this)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  double v4;

  if ((*((_BYTE *)this + 32) & 2) != 0)
  {
    v1 = *((double *)this + 2);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
    {
LABEL_3:
      v2 = *((unsigned __int8 *)this + 28);
      if ((*((_BYTE *)this + 32) & 4) != 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 32) & 4) != 0)
  {
LABEL_4:
    v3 = *((int *)this + 6);
    if ((*((_BYTE *)this + 32) & 1) != 0)
      goto LABEL_5;
LABEL_13:
    v4 = 0.0;
    return v2 ^ *(_QWORD *)&v1 ^ v3 ^ *(_QWORD *)&v4;
  }
LABEL_12:
  v3 = 0;
  if ((*((_BYTE *)this + 32) & 1) == 0)
    goto LABEL_13;
LABEL_5:
  v4 = *((double *)this + 1);
  if (v4 == 0.0)
    v4 = 0.0;
  return v2 ^ *(_QWORD *)&v1 ^ v3 ^ *(_QWORD *)&v4;
}

void CMMsl::PencilTipForce::~PencilTipForce(CMMsl::PencilTipForce *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::PencilTipForce::PencilTipForce(CMMsl::PencilTipForce *this, const CMMsl::PencilTipForce *a2)
{
  char v2;
  double result;

  *(_QWORD *)this = off_100353740;
  *((_DWORD *)this + 6) = 0;
  if ((*((_BYTE *)a2 + 24) & 1) != 0)
  {
    result = *((double *)a2 + 1);
    *((_BYTE *)this + 24) = 1;
    *((double *)this + 1) = result;
    v2 = 3;
    if ((*((_BYTE *)a2 + 24) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 24) & 2) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 2);
    *((_BYTE *)this + 24) = v2;
    *((double *)this + 2) = result;
  }
  return result;
}

uint64_t CMMsl::PencilTipForce::operator=(uint64_t a1, uint64_t a2, double a3, double a4)
{
  char v5;
  char v6;
  int v7;
  __int128 v8;
  void (**v10)(CMMsl::PencilTipForce *__hidden);
  __int128 v11;
  int v12;

  if (a1 != a2)
  {
    v10 = off_100353740;
    v12 = 0;
    v5 = *(_BYTE *)(a2 + 24);
    if ((v5 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      LOBYTE(v12) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        a4 = *(double *)(a2 + 16);
        LOBYTE(v12) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 24) & 2) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v12;
    v12 = v7;
    v8 = *(_OWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a3;
    *(double *)(a1 + 16) = a4;
    v11 = v8;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PencilTipForce *a2, CMMsl::PencilTipForce *a3)
{
  int v3;
  uint64_t v4;
  double result;

  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

uint64_t CMMsl::PencilTipForce::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  void (**v7)(CMMsl::PencilTipForce *__hidden);
  __int128 v8;
  int v9;

  if (a1 != a2)
  {
    v7 = off_100353740;
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v9 = *(_DWORD *)(a1 + 24);
    v4 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    v8 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::PencilTipForce::formatText(CMMsl::PencilTipForce *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    v5 = *((_BYTE *)this + 24);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "tipForce", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PencilTipForce::readFrom(CMMsl::PencilTipForce *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 24) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_28;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
      }
      else
      {
        if ((_DWORD)v20 != 1)
        {
          result = PB::Reader::skip(a2, v20, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          goto LABEL_33;
        }
        *((_BYTE *)this + 24) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
        {
LABEL_28:
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_33;
        }
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
      }
      v2 = *((_QWORD *)a2 + 1) + 8;
      *((_QWORD *)a2 + 1) = v2;
LABEL_33:
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::PencilTipForce::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 24);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 24);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
  return this;
}

uint64_t CMMsl::PencilTipForce::hash_value(CMMsl::PencilTipForce *this)
{
  double v1;
  double v2;

  if ((*((_BYTE *)this + 24) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 24) & 2) != 0)
      goto LABEL_3;
LABEL_9:
    v2 = 0.0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 24) & 2) == 0)
    goto LABEL_9;
LABEL_3:
  v2 = *((double *)this + 2);
  if (v2 == 0.0)
    v2 = 0.0;
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1;
}

void CMMsl::PencilTouch::~PencilTouch(CMMsl::PencilTouch *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::PencilTouch::PencilTouch(CMMsl::PencilTouch *this, const CMMsl::PencilTouch *a2)
{
  __int16 v2;
  __int16 v3;
  double result;
  int v5;
  int v6;

  *(_QWORD *)this = off_100353778;
  *((_DWORD *)this + 22) = 0;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x20) != 0)
  {
    result = *((double *)a2 + 6);
    v3 = 32;
    *((_WORD *)this + 44) = 32;
    *((double *)this + 6) = result;
    v2 = *((_WORD *)a2 + 44);
    if ((v2 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x40) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 7);
    v3 |= 0x40u;
    *((_WORD *)this + 44) = v3;
    *((double *)this + 7) = result;
    v2 = *((_WORD *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 0x80) != 0)
  {
    result = *((double *)a2 + 8);
    v3 |= 0x80u;
    *((_WORD *)this + 44) = v3;
    *((double *)this + 8) = result;
    v2 = *((_WORD *)a2 + 44);
    if ((v2 & 0x100) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 0x100) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 9) = result;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 1) = result;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 3) = result;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  v5 = *((_DWORD *)a2 + 21);
  v3 |= 0x400u;
  *((_WORD *)this + 44) = v3;
  *((_DWORD *)this + 21) = v5;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x200) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  v6 = *((_DWORD *)a2 + 20);
  v3 |= 0x200u;
  *((_WORD *)this + 44) = v3;
  *((_DWORD *)this + 20) = v6;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  result = *((double *)a2 + 2);
  v3 |= 2u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 2) = result;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0)
      return result;
LABEL_24:
    result = *((double *)a2 + 5);
    *((_WORD *)this + 44) = v3 | 0x10;
    *((double *)this + 5) = result;
    return result;
  }
LABEL_23:
  result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 4) = result;
  if ((*((_WORD *)a2 + 44) & 0x10) != 0)
    goto LABEL_24;
  return result;
}

CMMsl *CMMsl::PencilTouch::operator=(CMMsl *a1, const CMMsl::PencilTouch *a2)
{
  CMMsl::PencilTouch *v3;
  _BYTE v5[96];

  if (a1 != a2)
  {
    CMMsl::PencilTouch::PencilTouch((CMMsl::PencilTouch *)v5, a2);
    CMMsl::swap(a1, (CMMsl::PencilTouch *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PencilTouch *a2, CMMsl::PencilTouch *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  double result;

  v3 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v3;
  v4 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v4;
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v5;
  v6 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v6;
  v7 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v7;
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  v9 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v9;
  v10 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v10;
  v11 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v11;
  v12 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v12;
  v13 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v13;
  result = *((double *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((double *)a2 + 5) = result;
  return result;
}

double CMMsl::PencilTouch::PencilTouch(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100353778;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  result = *(double *)(a2 + 40);
  *(double *)(a1 + 40) = result;
  return result;
}

CMMsl *CMMsl::PencilTouch::operator=(CMMsl *this, uint64_t a2, CMMsl::PencilTouch *a3)
{
  uint64_t v4;
  void (**v6)(CMMsl::PencilTouch *__hidden);
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  if (this != (CMMsl *)a2)
  {
    v6 = off_100353778;
    v13 = *(_DWORD *)(a2 + 88);
    *(_DWORD *)(a2 + 88) = 0;
    v10 = *(_OWORD *)(a2 + 56);
    v4 = *(_QWORD *)(a2 + 80);
    v11 = *(_QWORD *)(a2 + 72);
    v12 = v4;
    v7 = *(_OWORD *)(a2 + 8);
    v8 = *(_OWORD *)(a2 + 24);
    v9 = *(_OWORD *)(a2 + 40);
    CMMsl::swap(this, (CMMsl::PencilTouch *)&v6, a3);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return this;
}

uint64_t CMMsl::PencilTouch::formatText(CMMsl::PencilTouch *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 44);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "altitudeAngle", *((double *)this + 1));
    v5 = *((_WORD *)this + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "altitudeAngleConfidence", *((double *)this + 2));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "azimuthAngle", *((double *)this + 3));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "azimuthAngleConfidence", *((double *)this + 4));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x200) == 0)
  {
LABEL_6:
    if ((v5 & 0x400) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "pathFlags", *((_DWORD *)this + 20));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x400) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "pathStage", *((_DWORD *)this + 21));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "positionConfidence", *((double *)this + 5));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 6));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(a2, "y", *((double *)this + 8));
    if ((*((_WORD *)this + 44) & 0x100) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "x", *((double *)this + 7));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x80) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x100) != 0)
LABEL_12:
    PB::TextFormatter::format(a2, "z", *((double *)this + 9));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PencilTouch::readFrom(CMMsl::PencilTouch *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 44) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_64;
              *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_80;
            case 2u:
              *((_WORD *)this + 44) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_64;
              *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_80;
            case 3u:
              *((_WORD *)this + 44) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_64;
              *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_80;
            case 4u:
              *((_WORD *)this + 44) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_64;
              *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_80;
            case 5u:
              *((_WORD *)this + 44) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_64;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_80;
            case 6u:
              *((_WORD *)this + 44) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_64;
              *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_80;
            case 7u:
              *((_WORD *)this + 44) |= 0x400u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v33 = 0;
                v34 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_85;
                  }
                  v35 = v21++;
                  v36 = *(_BYTE *)(v22 + v35);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0)
                    break;
                  v33 += 7;
                  v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_84:
                    v2 = v35 + 1;
                    goto LABEL_85;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_84;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_85;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_85:
              *((_DWORD *)this + 21) = v25;
              goto LABEL_91;
            case 8u:
              *((_WORD *)this + 44) |= 0x200u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_90;
                  }
                  v39 = v27++;
                  v40 = *(_BYTE *)(v28 + v39);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_89:
                    v2 = v39 + 1;
                    goto LABEL_90;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_89;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_90;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_90:
              *((_DWORD *)this + 20) = v31;
LABEL_91:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 9u:
              *((_WORD *)this + 44) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_64;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_80;
            case 0xAu:
              *((_WORD *)this + 44) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_64;
              *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_80;
            case 0xBu:
              *((_WORD *)this + 44) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_80:
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_64:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_91;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_91;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::PencilTouch::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 88);
  if ((v4 & 0x20) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 48), 1u);
    v4 = *(_WORD *)(v3 + 88);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 2u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x80) == 0)
  {
LABEL_4:
    if ((v4 & 0x100) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 3u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x100) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 4u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 5u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 6u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 84), 7u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x200) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 80), 8u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 9u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 40), 0xBu);
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 0xAu);
  if ((*(_WORD *)(v3 + 88) & 0x10) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 40), 0xBu);
  return this;
}

uint64_t CMMsl::PencilTouch::hash_value(CMMsl::PencilTouch *this)
{
  __int16 v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;

  v1 = *((_WORD *)this + 44);
  if ((v1 & 0x20) == 0)
  {
    v2 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_3;
LABEL_32:
    v3 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_6;
LABEL_33:
    v4 = 0.0;
    if ((*((_WORD *)this + 44) & 0x100) != 0)
      goto LABEL_9;
LABEL_34:
    v5 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_12;
LABEL_35:
    v6 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_15;
LABEL_36:
    v7 = 0.0;
    if ((*((_WORD *)this + 44) & 0x400) != 0)
      goto LABEL_18;
    goto LABEL_37;
  }
  v2 = *((double *)this + 6);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 0x40) == 0)
    goto LABEL_32;
LABEL_3:
  v3 = *((double *)this + 7);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 0x80) == 0)
    goto LABEL_33;
LABEL_6:
  v4 = *((double *)this + 8);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((*((_WORD *)this + 44) & 0x100) == 0)
    goto LABEL_34;
LABEL_9:
  v5 = *((double *)this + 9);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_35;
LABEL_12:
  v6 = *((double *)this + 1);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_36;
LABEL_15:
  v7 = *((double *)this + 3);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((*((_WORD *)this + 44) & 0x400) != 0)
  {
LABEL_18:
    v8 = *((unsigned int *)this + 21);
    if ((*((_WORD *)this + 44) & 0x200) != 0)
      goto LABEL_19;
    goto LABEL_38;
  }
LABEL_37:
  v8 = 0;
  if ((*((_WORD *)this + 44) & 0x200) != 0)
  {
LABEL_19:
    v9 = *((unsigned int *)this + 20);
    if ((v1 & 2) != 0)
      goto LABEL_20;
LABEL_39:
    v10 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_23;
    goto LABEL_40;
  }
LABEL_38:
  v9 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_39;
LABEL_20:
  v10 = *((double *)this + 2);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((v1 & 8) != 0)
  {
LABEL_23:
    v11 = *((double *)this + 4);
    if (v11 == 0.0)
      v11 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_26;
LABEL_41:
    v12 = 0.0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ v8 ^ v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12;
  }
LABEL_40:
  v11 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_41;
LABEL_26:
  v12 = *((double *)this + 5);
  if (v12 == 0.0)
    v12 = 0.0;
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ v8 ^ v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12;
}

void CMMsl::PhysicalEffortInput::~PhysicalEffortInput(CMMsl::PhysicalEffortInput *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::PhysicalEffortInput::PhysicalEffortInput(uint64_t this, const CMMsl::PhysicalEffortInput *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  *(_QWORD *)this = off_1003537B0;
  *(_DWORD *)(this + 28) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 28) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 2) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *(_BYTE *)(this + 28) = v3;
    *(_QWORD *)(this + 16) = v5;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *((_DWORD *)a2 + 6);
    *(_BYTE *)(this + 28) = v3 | 4;
    *(_DWORD *)(this + 24) = v6;
  }
  return this;
}

uint64_t CMMsl::PhysicalEffortInput::operator=(uint64_t a1, uint64_t a2, double a3, double a4)
{
  int v4;
  char v6;
  char v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  void (**v12)(CMMsl::PhysicalEffortInput *__hidden);
  __int128 v13;
  uint64_t v14;

  if (a1 != a2)
  {
    v12 = off_1003537B0;
    HIDWORD(v14) = 0;
    v6 = *(_BYTE *)(a2 + 28);
    if ((v6 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      v7 = 1;
      BYTE4(v14) = 1;
      if ((v6 & 2) != 0)
      {
LABEL_4:
        a4 = *(double *)(a2 + 16);
        v7 |= 2u;
        BYTE4(v14) = v7;
        if ((v6 & 4) != 0)
          goto LABEL_8;
        goto LABEL_9;
      }
    }
    else
    {
      v7 = 0;
      if ((*(_BYTE *)(a2 + 28) & 2) != 0)
        goto LABEL_4;
    }
    if ((v6 & 4) != 0)
    {
LABEL_8:
      v4 = *(_DWORD *)(a2 + 24);
      BYTE4(v14) = v7 | 4;
    }
LABEL_9:
    v8 = HIDWORD(v14);
    v9 = *(_OWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a3;
    *(double *)(a1 + 16) = a4;
    v13 = v9;
    v10 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    *(_DWORD *)(a1 + 28) = v8;
    v14 = v10;
    PB::Base::~Base((PB::Base *)&v12);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PhysicalEffortInput *a2, CMMsl::PhysicalEffortInput *a3)
{
  int v3;
  uint64_t v4;
  double result;
  int v6;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  v6 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v6;
  return result;
}

double CMMsl::PhysicalEffortInput::PhysicalEffortInput(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_1003537B0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_1003537B0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return result;
}

uint64_t CMMsl::PhysicalEffortInput::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  void (**v6)(CMMsl::PhysicalEffortInput *__hidden);
  __int128 v7;
  uint64_t v8;

  if (a1 != a2)
  {
    v6 = off_1003537B0;
    v3 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 28) = 0;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    v7 = v4;
    *(_QWORD *)&v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v3;
    v8 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

uint64_t CMMsl::PhysicalEffortInput::formatText(CMMsl::PhysicalEffortInput *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 4) == 0)
  {
    if ((*((_BYTE *)this + 28) & 1) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(a2, "sampleTime", *((double *)this + 1));
    if ((*((_BYTE *)this + 28) & 2) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_4;
  }
  PB::TextFormatter::format(a2, "activityType", *((_DWORD *)this + 6));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 1) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 2) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "wrMets", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PhysicalEffortInput::readFrom(CMMsl::PhysicalEffortInput *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int i;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  for (i = *((unsigned __int8 *)a2 + 24); v2 < v3 && i == 0; i = *((unsigned __int8 *)a2 + 24))
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          v11 = 0;
          goto LABEL_20;
        }
      }
      i = 1;
      *((_BYTE *)a2 + 24) = 1;
      return i == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      i = 0;
      return i == 0;
    }
    v20 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      *((_BYTE *)this + 28) |= 4u;
      v21 = *((_QWORD *)a2 + 1);
      v2 = *((_QWORD *)a2 + 2);
      v22 = *(_QWORD *)a2;
      if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
      {
        v28 = 0;
        v29 = 0;
        v25 = 0;
        if (v2 <= v21)
          v2 = *((_QWORD *)a2 + 1);
        while (1)
        {
          if (v2 == v21)
          {
            LODWORD(v25) = 0;
            *((_BYTE *)a2 + 24) = 1;
            goto LABEL_52;
          }
          v30 = v21++;
          v31 = *(_BYTE *)(v22 + v30);
          *((_QWORD *)a2 + 1) = v21;
          v25 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            break;
          v28 += 7;
          v14 = v29++ > 8;
          if (v14)
          {
            LODWORD(v25) = 0;
            goto LABEL_51;
          }
        }
        if (*((_BYTE *)a2 + 24))
          LODWORD(v25) = 0;
LABEL_51:
        v2 = v30 + 1;
      }
      else
      {
        v23 = 0;
        v24 = 0;
        v25 = 0;
        while (1)
        {
          v2 = v21 + 1;
          *((_QWORD *)a2 + 1) = v21 + 1;
          v26 = *(_BYTE *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0)
            break;
          v23 += 7;
          v21 = v2;
          v14 = v24++ > 8;
          if (v14)
          {
            LODWORD(v25) = 0;
            break;
          }
        }
      }
LABEL_52:
      *((_DWORD *)this + 6) = v25;
      goto LABEL_53;
    }
    if ((_DWORD)v20 == 2)
    {
      *((_BYTE *)this + 28) |= 2u;
      v2 = *((_QWORD *)a2 + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
      {
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_47;
      }
    }
    else
    {
      if ((_DWORD)v20 != 1)
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        goto LABEL_53;
      }
      *((_BYTE *)this + 28) |= 1u;
      v2 = *((_QWORD *)a2 + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
      {
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_47:
        v2 = *((_QWORD *)a2 + 1) + 8;
        *((_QWORD *)a2 + 1) = v2;
        goto LABEL_53;
      }
    }
    *((_BYTE *)a2 + 24) = 1;
LABEL_53:
    v3 = *((_QWORD *)a2 + 2);
  }
  return i == 0;
}

uint64_t CMMsl::PhysicalEffortInput::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        return this;
      return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 3u);
    }
  }
  else if ((*(_BYTE *)(this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
  if ((*(_BYTE *)(v3 + 28) & 4) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 3u);
  return this;
}

uint64_t CMMsl::PhysicalEffortInput::hash_value(CMMsl::PhysicalEffortInput *this)
{
  double v1;
  double v2;
  uint64_t v3;

  if ((*((_BYTE *)this + 28) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 28) & 2) != 0)
    {
LABEL_3:
      v2 = *((double *)this + 2);
      if (v2 == 0.0)
        v2 = 0.0;
      if ((*((_BYTE *)this + 28) & 4) != 0)
        goto LABEL_6;
LABEL_11:
      v3 = 0;
      return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ v3;
    }
  }
  else
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 28) & 2) != 0)
      goto LABEL_3;
  }
  v2 = 0.0;
  if ((*((_BYTE *)this + 28) & 4) == 0)
    goto LABEL_11;
LABEL_6:
  v3 = *((unsigned int *)this + 6);
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ v3;
}

void CMMsl::PhysicalEffortSample::~PhysicalEffortSample(CMMsl::PhysicalEffortSample *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::PhysicalEffortSample::PhysicalEffortSample(uint64_t this, const CMMsl::PhysicalEffortSample *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;

  *(_QWORD *)this = off_1003537E8;
  *(_DWORD *)(this + 44) = 0;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 4) != 0)
  {
    v4 = *((_QWORD *)a2 + 3);
    v3 = 4;
    *(_BYTE *)(this + 44) = 4;
    *(_QWORD *)(this + 24) = v4;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 44) & 1) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 1);
    v3 |= 1u;
    *(_BYTE *)(this + 44) = v3;
    *(_QWORD *)(this + 8) = v5;
    v2 = *((_BYTE *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *(_BYTE *)(this + 44) = v3;
    *(_QWORD *)(this + 16) = v6;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 8);
  v3 |= 8u;
  *(_BYTE *)(this + 44) = v3;
  *(_DWORD *)(this + 32) = v7;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      return this;
LABEL_14:
    v9 = *((_DWORD *)a2 + 10);
    *(_BYTE *)(this + 44) = v3 | 0x20;
    *(_DWORD *)(this + 40) = v9;
    return this;
  }
LABEL_13:
  v8 = *((_DWORD *)a2 + 9);
  v3 |= 0x10u;
  *(_BYTE *)(this + 44) = v3;
  *(_DWORD *)(this + 36) = v8;
  if ((*((_BYTE *)a2 + 44) & 0x20) != 0)
    goto LABEL_14;
  return this;
}

uint64_t CMMsl::PhysicalEffortSample::operator=(uint64_t a1, const CMMsl::PhysicalEffortSample *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;

  if ((const CMMsl::PhysicalEffortSample *)a1 != a2)
  {
    CMMsl::PhysicalEffortSample::PhysicalEffortSample((uint64_t)&v7, a2);
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    v9 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v10;
    v10 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PhysicalEffortSample *a2, CMMsl::PhysicalEffortSample *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  double result;
  int v7;
  int v8;
  int v9;

  v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  v7 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v7;
  v8 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v8;
  v9 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v9;
  return result;
}

double CMMsl::PhysicalEffortSample::PhysicalEffortSample(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_1003537E8;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_1003537E8;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

uint64_t CMMsl::PhysicalEffortSample::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  void (**v9)(CMMsl::PhysicalEffortSample *__hidden);
  __int128 v10;
  uint64_t v11;
  __int128 v12;

  if (a1 != a2)
  {
    v9 = off_1003537E8;
    v3 = *(_QWORD *)(a2 + 24);
    v4 = *(_OWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 44) = 0;
    v11 = *(_QWORD *)(a1 + 24);
    v5 = *(_OWORD *)(a1 + 8);
    v6 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    v10 = v5;
    v7 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v4;
    v12 = v7;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::PhysicalEffortSample::formatText(CMMsl::PhysicalEffortSample *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "activityType", *((_DWORD *)this + 8));
    v5 = *((_BYTE *)this + 44);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*((_BYTE *)this + 44) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "algorithmVersion", *((_DWORD *)this + 9));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "endDate", *((double *)this + 1));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(a2, "sampleStopReason", *((_DWORD *)this + 10));
    if ((*((_BYTE *)this + 44) & 4) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "mets", *((double *)this + 2));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 0x20) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 4) != 0)
LABEL_7:
    PB::TextFormatter::format(a2, "startDate", *((double *)this + 3));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PhysicalEffortSample::readFrom(CMMsl::PhysicalEffortSample *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 44) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_32;
              *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_76;
            case 2u:
              *((_BYTE *)this + 44) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_32;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_76;
            case 3u:
              *((_BYTE *)this + 44) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_76:
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_32:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_92;
            case 4u:
              *((_BYTE *)this + 44) |= 8u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v39 = 0;
                v40 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_81;
                  }
                  v41 = v21++;
                  v42 = *(_BYTE *)(v22 + v41);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0)
                    break;
                  v39 += 7;
                  v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_80:
                    v2 = v41 + 1;
                    goto LABEL_81;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_80;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_81;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_81:
              *((_DWORD *)this + 8) = v25;
              goto LABEL_92;
            case 5u:
              *((_BYTE *)this + 44) |= 0x10u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v43 = 0;
                v44 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_86;
                  }
                  v45 = v27++;
                  v46 = *(_BYTE *)(v28 + v45);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0)
                    break;
                  v43 += 7;
                  v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_85:
                    v2 = v45 + 1;
                    goto LABEL_86;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_85;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_86;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_86:
              *((_DWORD *)this + 9) = v31;
              goto LABEL_92;
            case 6u:
              *((_BYTE *)this + 44) |= 0x20u;
              v33 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_91;
                  }
                  v49 = v33++;
                  v50 = *(_BYTE *)(v34 + v49);
                  *((_QWORD *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_90:
                    v2 = v49 + 1;
                    goto LABEL_91;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v37) = 0;
                goto LABEL_90;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)a2 + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_91;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_91:
              *((_DWORD *)this + 10) = v37;
LABEL_92:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_92;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::PhysicalEffortSample::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 44);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24), 1u);
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(this + 44) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 2u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 4u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 6u);
  }
LABEL_12:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 36), 5u);
  if ((*(_BYTE *)(v3 + 44) & 0x20) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 6u);
  return this;
}

uint64_t CMMsl::PhysicalEffortSample::hash_value(CMMsl::PhysicalEffortSample *this)
{
  double v1;
  double v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*((_BYTE *)this + 44) & 4) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 44) & 1) != 0)
      goto LABEL_3;
LABEL_15:
    v2 = 0.0;
    if ((*((_BYTE *)this + 44) & 2) != 0)
      goto LABEL_6;
LABEL_16:
    v3 = 0.0;
    if ((*((_BYTE *)this + 44) & 8) != 0)
      goto LABEL_9;
    goto LABEL_17;
  }
  v1 = *((double *)this + 3);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 44) & 1) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 44) & 2) == 0)
    goto LABEL_16;
LABEL_6:
  v3 = *((double *)this + 2);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((*((_BYTE *)this + 44) & 8) != 0)
  {
LABEL_9:
    v4 = *((unsigned int *)this + 8);
    if ((*((_BYTE *)this + 44) & 0x10) != 0)
      goto LABEL_10;
LABEL_18:
    v5 = 0;
    if ((*((_BYTE *)this + 44) & 0x20) != 0)
      goto LABEL_11;
LABEL_19:
    v6 = 0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ v4 ^ v5 ^ v6;
  }
LABEL_17:
  v4 = 0;
  if ((*((_BYTE *)this + 44) & 0x10) == 0)
    goto LABEL_18;
LABEL_10:
  v5 = *((unsigned int *)this + 9);
  if ((*((_BYTE *)this + 44) & 0x20) == 0)
    goto LABEL_19;
LABEL_11:
  v6 = *((unsigned int *)this + 10);
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ v4 ^ v5 ^ v6;
}

void CMMsl::PocketDetectionPacket::~PocketDetectionPacket(CMMsl::PocketDetectionPacket *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::PocketDetectionPacket::PocketDetectionPacket(CMMsl::PocketDetectionPacket *this, const CMMsl::PocketDetectionPacket *a2)
{
  __int16 v2;
  __int16 v3;
  int v4;
  double result;
  char v6;

  *(_QWORD *)this = off_100353820;
  *((_DWORD *)this + 21) = 0;
  v2 = *((_WORD *)a2 + 42);
  if ((v2 & 0x200) != 0)
  {
    v4 = *((_DWORD *)a2 + 19);
    v3 = 512;
    *((_WORD *)this + 42) = 512;
    *((_DWORD *)this + 19) = v4;
    v2 = *((_WORD *)a2 + 42);
    if ((v2 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 8);
    v3 |= 0x80u;
    *((_WORD *)this + 42) = v3;
    *((double *)this + 8) = result;
    v2 = *((_WORD *)a2 + 42);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_WORD *)this + 42) = v3;
    *((double *)this + 2) = result;
    v2 = *((_WORD *)a2 + 42);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_WORD *)this + 42) = v3;
  *((double *)this + 3) = result;
  v2 = *((_WORD *)a2 + 42);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_WORD *)this + 42) = v3;
  *((double *)this + 5) = result;
  v2 = *((_WORD *)a2 + 42);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 1) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_WORD *)this + 42) = v3;
  *((double *)this + 4) = result;
  v2 = *((_WORD *)a2 + 42);
  if ((v2 & 1) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_WORD *)this + 42) = v3;
  *((double *)this + 1) = result;
  v2 = *((_WORD *)a2 + 42);
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  v6 = *((_BYTE *)a2 + 80);
  v3 |= 0x400u;
  *((_WORD *)this + 42) = v3;
  *((_BYTE *)this + 80) = v6;
  v2 = *((_WORD *)a2 + 42);
  if ((v2 & 0x20) == 0)
  {
LABEL_13:
    if ((v2 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((_WORD *)this + 42) = v3;
  *((double *)this + 6) = result;
  v2 = *((_WORD *)a2 + 42);
  if ((v2 & 0x100) == 0)
  {
LABEL_14:
    if ((v2 & 0x40) == 0)
      return result;
LABEL_24:
    result = *((double *)a2 + 7);
    *((_WORD *)this + 42) = v3 | 0x40;
    *((double *)this + 7) = result;
    return result;
  }
LABEL_23:
  LODWORD(result) = *((_DWORD *)a2 + 18);
  v3 |= 0x100u;
  *((_WORD *)this + 42) = v3;
  *((_DWORD *)this + 18) = LODWORD(result);
  if ((*((_WORD *)a2 + 42) & 0x40) != 0)
    goto LABEL_24;
  return result;
}

CMMsl *CMMsl::PocketDetectionPacket::operator=(CMMsl *a1, const CMMsl::PocketDetectionPacket *a2)
{
  CMMsl::PocketDetectionPacket *v3;
  _BYTE v5[88];

  if (a1 != a2)
  {
    CMMsl::PocketDetectionPacket::PocketDetectionPacket((CMMsl::PocketDetectionPacket *)v5, a2);
    CMMsl::swap(a1, (CMMsl::PocketDetectionPacket *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PocketDetectionPacket *a2, CMMsl::PocketDetectionPacket *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  v3 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v3;
  v4 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v4;
  v5 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v9;
  v10 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v10;
  LOBYTE(v4) = *((_BYTE *)this + 80);
  *((_BYTE *)this + 80) = *((_BYTE *)a2 + 80);
  *((_BYTE *)a2 + 80) = v4;
  v11 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v11;
  LODWORD(v11) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v11;
  result = *((double *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((double *)a2 + 7) = result;
  return result;
}

double CMMsl::PocketDetectionPacket::PocketDetectionPacket(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100353820;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a2 + 84) = 0;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  result = *(double *)(a2 + 56);
  *(double *)(a1 + 56) = result;
  return result;
}

CMMsl *CMMsl::PocketDetectionPacket::operator=(CMMsl *this, uint64_t a2, CMMsl::PocketDetectionPacket *a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  void (**v8)(CMMsl::PocketDetectionPacket *__hidden);
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  int v14;
  char v15;
  int v16;

  if (this != (CMMsl *)a2)
  {
    v8 = off_100353820;
    v16 = *(_DWORD *)(a2 + 84);
    *(_DWORD *)(a2 + 84) = 0;
    v14 = *(_DWORD *)(a2 + 76);
    v4 = *(_OWORD *)(a2 + 24);
    v9 = *(_OWORD *)(a2 + 8);
    v10 = v4;
    v15 = *(_BYTE *)(a2 + 80);
    v5 = *(_OWORD *)(a2 + 40);
    v13 = *(_DWORD *)(a2 + 72);
    v6 = *(_OWORD *)(a2 + 56);
    v11 = v5;
    v12 = v6;
    CMMsl::swap(this, (CMMsl::PocketDetectionPacket *)&v8, a3);
    PB::Base::~Base((PB::Base *)&v8);
  }
  return this;
}

uint64_t CMMsl::PocketDetectionPacket::formatText(CMMsl::PocketDetectionPacket *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 42);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "ambient", *((double *)this + 1));
    v5 = *((_WORD *)this + 42);
    if ((v5 & 0x100) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((*((_WORD *)this + 42) & 0x100) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "baselineAccuracy", *((float *)this + 18));
  v5 = *((_WORD *)this + 42);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "flags", *((double *)this + 2));
  v5 = *((_WORD *)this + 42);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "header", *((_DWORD *)this + 19));
  v5 = *((_WORD *)this + 42);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "intensity", *((double *)this + 3));
  v5 = *((_WORD *)this + 42);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "intensityBaselineDelta", *((double *)this + 4));
  v5 = *((_WORD *)this + 42);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x400) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "intensityCalDelta", *((double *)this + 5));
  v5 = *((_WORD *)this + 42);
  if ((v5 & 0x400) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "pocketFlag", *((_BYTE *)this + 80));
  v5 = *((_WORD *)this + 42);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(a2, "temperature", *((double *)this + 7));
    if ((*((_WORD *)this + 42) & 0x80) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "pocketProbability", *((double *)this + 6));
  v5 = *((_WORD *)this + 42);
  if ((v5 & 0x40) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x80) != 0)
LABEL_12:
    PB::TextFormatter::format(a2, "ts", *((double *)this + 8));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PocketDetectionPacket::readFrom(CMMsl::PocketDetectionPacket *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  int v27;
  BOOL v28;
  char v29;
  unsigned int v30;
  unint64_t v31;
  char v32;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 42) |= 0x200u;
              v20 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v21 = *(_QWORD *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v29 = 0;
                v30 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_76;
                  }
                  v31 = v20++;
                  v32 = *(_BYTE *)(v21 + v31);
                  *((_QWORD *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0)
                    break;
                  v29 += 7;
                  v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_75;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v24) = 0;
LABEL_75:
                v2 = v31 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)a2 + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_76;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_76:
              *((_DWORD *)this + 19) = v24;
              goto LABEL_77;
            case 2u:
              *((_WORD *)this + 42) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_59;
              *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_70;
            case 3u:
              *((_WORD *)this + 42) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_59;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_70;
            case 4u:
              *((_WORD *)this + 42) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_59;
              *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_70;
            case 5u:
              *((_WORD *)this + 42) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_59;
              *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_70;
            case 6u:
              *((_WORD *)this + 42) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_59;
              *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_70;
            case 7u:
              *((_WORD *)this + 42) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_59;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_70;
            case 8u:
              *((_WORD *)this + 42) |= 0x400u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v28 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v28 = v27 != 0;
              }
              *((_BYTE *)this + 80) = v28;
              goto LABEL_77;
            case 9u:
              *((_WORD *)this + 42) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_59;
              *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_70;
            case 0xAu:
              *((_WORD *)this + 42) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_59;
              *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              v2 = *((_QWORD *)a2 + 1) + 4;
              goto LABEL_71;
            case 0xBu:
              *((_WORD *)this + 42) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_70:
                v2 = *((_QWORD *)a2 + 1) + 8;
LABEL_71:
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_59:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_77;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
LABEL_77:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::PocketDetectionPacket::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 84);
  if ((v4 & 0x200) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 76), 1u);
    v4 = *(_WORD *)(v3 + 84);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 2u);
  v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
  v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 4u);
  v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 5u);
  v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 1) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 6u);
  v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 1) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 7u);
  v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 80), 8u);
  v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 9u);
  v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x40) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 56), 0xBu);
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0xAu);
  if ((*(_WORD *)(v3 + 84) & 0x40) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 56), 0xBu);
  return this;
}

uint64_t CMMsl::PocketDetectionPacket::hash_value(CMMsl::PocketDetectionPacket *this)
{
  __int16 v1;
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  double v10;
  float v11;
  uint64_t v12;
  double v13;

  v1 = *((_WORD *)this + 42);
  if ((v1 & 0x200) == 0)
  {
    v2 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_3;
LABEL_32:
    v3 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_6;
LABEL_33:
    v4 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_9;
LABEL_34:
    v5 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_12;
LABEL_35:
    v6 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_15;
LABEL_36:
    v7 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_18;
LABEL_37:
    v8 = 0.0;
    if ((*((_WORD *)this + 42) & 0x400) != 0)
      goto LABEL_21;
    goto LABEL_38;
  }
  v2 = *((unsigned int *)this + 19);
  if ((v1 & 0x80) == 0)
    goto LABEL_32;
LABEL_3:
  v3 = *((double *)this + 8);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_33;
LABEL_6:
  v4 = *((double *)this + 2);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_34;
LABEL_9:
  v5 = *((double *)this + 3);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_35;
LABEL_12:
  v6 = *((double *)this + 5);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_36;
LABEL_15:
  v7 = *((double *)this + 4);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_37;
LABEL_18:
  v8 = *((double *)this + 1);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((*((_WORD *)this + 42) & 0x400) != 0)
  {
LABEL_21:
    v9 = *((unsigned __int8 *)this + 80);
    if ((v1 & 0x20) != 0)
      goto LABEL_22;
LABEL_39:
    v10 = 0.0;
    if ((*((_WORD *)this + 42) & 0x100) != 0)
      goto LABEL_25;
    goto LABEL_40;
  }
LABEL_38:
  v9 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_39;
LABEL_22:
  v10 = *((double *)this + 6);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((*((_WORD *)this + 42) & 0x100) != 0)
  {
LABEL_25:
    v11 = *((float *)this + 18);
    v12 = LODWORD(v11);
    if (v11 == 0.0)
      v12 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_28;
LABEL_41:
    v13 = 0.0;
    return *(_QWORD *)&v3 ^ v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ v9 ^ *(_QWORD *)&v10 ^ v12 ^ *(_QWORD *)&v13;
  }
LABEL_40:
  v12 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_41;
LABEL_28:
  v13 = *((double *)this + 7);
  if (v13 == 0.0)
    v13 = 0.0;
  return *(_QWORD *)&v3 ^ v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ v9 ^ *(_QWORD *)&v10 ^ v12 ^ *(_QWORD *)&v13;
}

void CMMsl::Pose::~Pose(CMMsl::Pose *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_100353858;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::Pose::~Pose(this);
  operator delete();
}

CMMsl::Pose *CMMsl::Pose::Pose(CMMsl::Pose *this, const CMMsl::Pose *a2)
{
  char *v4;
  uint64_t v5;

  *(_QWORD *)this = off_100353858;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *((_DWORD *)this + 16) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if ((*((_BYTE *)a2 + 64) & 1) != 0)
  {
    v5 = *((_QWORD *)a2 + 7);
    *((_BYTE *)this + 64) = 1;
    *((_QWORD *)this + 7) = v5;
  }
  if (this != a2)
  {
    sub_100239350(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
    sub_100239350((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3);
  }
  return this;
}

uint64_t CMMsl::Pose::operator=(uint64_t a1, const CMMsl::Pose *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE v9[8];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;

  if ((const CMMsl::Pose *)a1 != a2)
  {
    CMMsl::Pose::Pose((CMMsl::Pose *)v9, a2);
    v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    v14 = v3;
    v4 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v13;
    v13 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v10 = v5;
    v11 = v6;
    v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v7;
    CMMsl::Pose::~Pose((CMMsl::Pose *)v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::Pose *a2, CMMsl::Pose *a3)
{
  int v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  result = *((double *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((double *)a2 + 7) = result;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v8;
  v9 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v9;
  v10 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v10;
  return result;
}

uint64_t CMMsl::Pose::Pose(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = off_100353858;
  v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  sub_100239458(v4, (__n128 *)(a2 + 32));
  return a1;
}

uint64_t CMMsl::Pose::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE v9[8];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;

  if (a1 != a2)
  {
    CMMsl::Pose::Pose((uint64_t)v9, a2);
    v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    v14 = v3;
    v4 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v13;
    v13 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v10 = v5;
    v11 = v6;
    v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v7;
    CMMsl::Pose::~Pose((CMMsl::Pose *)v9);
  }
  return a1;
}

uint64_t CMMsl::Pose::formatText(CMMsl::Pose *this, PB::TextFormatter *a2, const char *a3)
{
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (double *)*((_QWORD *)this + 1);
  v6 = (double *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "attitude", v7);
  }
  v8 = (double *)*((_QWORD *)this + 4);
  v9 = (double *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "position", v10);
  }
  if ((*((_BYTE *)this + 64) & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 7));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::Pose::readFrom(CMMsl::Pose *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  char *v9;
  void **v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  _QWORD *v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  _BYTE v78[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 32);
    v9 = (char *)this + 48;
    v10 = (void **)((char *)this + 8);
    v11 = (char *)this + 24;
    while (1)
    {
      v12 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v19 = 0;
        v20 = 0;
        v15 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v21 = v2 + 1;
          v22 = *(_BYTE *)(v12 + v2);
          *((_QWORD *)a2 + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0)
            goto LABEL_21;
          v19 += 7;
          v2 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            v15 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v25 = v15 >> 3;
      if ((v15 >> 3) == 3)
        break;
      if ((_DWORD)v25 == 2)
      {
        if (v24 == 2)
        {
          if ((PB::Reader::placeMark(a2, v78) & 1) != 0)
            return 0;
          v41 = *((_QWORD *)a2 + 1);
          v42 = *((_QWORD *)a2 + 2);
          while (v41 < v42 && !*((_BYTE *)a2 + 24))
          {
            v44 = (char *)*((_QWORD *)this + 2);
            v43 = *((_QWORD *)this + 3);
            if ((unint64_t)v44 >= v43)
            {
              v46 = (char *)*v10;
              v47 = (v44 - (_BYTE *)*v10) >> 3;
              v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 61)
                goto LABEL_128;
              v49 = v43 - (_QWORD)v46;
              if (v49 >> 2 > v48)
                v48 = v49 >> 2;
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
                v50 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v50 = v48;
              if (v50)
              {
                v51 = (char *)sub_10000D60C((uint64_t)v11, v50);
                v46 = (char *)*((_QWORD *)this + 1);
                v44 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v51 = 0;
              }
              v52 = &v51[8 * v47];
              *(_QWORD *)v52 = 0;
              v45 = v52 + 8;
              while (v44 != v46)
              {
                v53 = *((_QWORD *)v44 - 1);
                v44 -= 8;
                *((_QWORD *)v52 - 1) = v53;
                v52 -= 8;
              }
              *((_QWORD *)this + 1) = v52;
              *((_QWORD *)this + 2) = v45;
              *((_QWORD *)this + 3) = &v51[8 * v50];
              if (v46)
                operator delete(v46);
            }
            else
            {
              *(_QWORD *)v44 = 0;
              v45 = v44 + 8;
            }
            *((_QWORD *)this + 2) = v45;
            v54 = *((_QWORD *)a2 + 1);
            if (v54 > 0xFFFFFFFFFFFFFFF7 || v54 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_82;
            *(v45 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v54);
            v42 = *((_QWORD *)a2 + 2);
            v41 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v41;
          }
          goto LABEL_83;
        }
        v59 = (char *)*((_QWORD *)this + 2);
        v58 = *((_QWORD *)this + 3);
        if ((unint64_t)v59 >= v58)
        {
          v66 = (char *)*v10;
          v67 = (v59 - (_BYTE *)*v10) >> 3;
          v68 = v67 + 1;
          if ((unint64_t)(v67 + 1) >> 61)
LABEL_128:
            sub_10000D5F8();
          v69 = v58 - (_QWORD)v66;
          if (v69 >> 2 > v68)
            v68 = v69 >> 2;
          if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
            v70 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v70 = v68;
          if (v70)
          {
            v71 = (char *)sub_10000D60C((uint64_t)v11, v70);
            v66 = (char *)*((_QWORD *)this + 1);
            v59 = (char *)*((_QWORD *)this + 2);
          }
          else
          {
            v71 = 0;
          }
          v74 = &v71[8 * v67];
          *(_QWORD *)v74 = 0;
          v57 = v74 + 8;
          while (v59 != v66)
          {
            v75 = *((_QWORD *)v59 - 1);
            v59 -= 8;
            *((_QWORD *)v74 - 1) = v75;
            v74 -= 8;
          }
          *((_QWORD *)this + 1) = v74;
          *((_QWORD *)this + 2) = v57;
          *((_QWORD *)this + 3) = &v71[8 * v70];
          if (v66)
            operator delete(v66);
        }
        else
        {
          *(_QWORD *)v59 = 0;
          v57 = v59 + 8;
        }
        *((_QWORD *)this + 2) = v57;
LABEL_114:
        v76 = *((_QWORD *)a2 + 1);
        if (v76 > 0xFFFFFFFFFFFFFFF7 || v76 + 8 > *((_QWORD *)a2 + 2))
        {
LABEL_116:
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_119;
        }
        *(v57 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v76);
        goto LABEL_118;
      }
      if ((_DWORD)v25 == 1)
      {
        *((_BYTE *)this + 64) |= 1u;
        v26 = *((_QWORD *)a2 + 1);
        if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_116;
        *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v26);
LABEL_118:
        *((_QWORD *)a2 + 1) += 8;
        goto LABEL_119;
      }
      if ((PB::Reader::skip(a2, v25, v24, 0) & 1) == 0)
        return 0;
LABEL_119:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    if (v24 == 2)
    {
      if ((PB::Reader::placeMark(a2, v78) & 1) != 0)
        return 0;
      v27 = *((_QWORD *)a2 + 1);
      v28 = *((_QWORD *)a2 + 2);
      while (v27 < v28 && !*((_BYTE *)a2 + 24))
      {
        v30 = (char *)*((_QWORD *)this + 5);
        v29 = *((_QWORD *)this + 6);
        if ((unint64_t)v30 >= v29)
        {
          v32 = (char *)*v8;
          v33 = (v30 - (_BYTE *)*v8) >> 3;
          v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 61)
            goto LABEL_127;
          v35 = v29 - (_QWORD)v32;
          if (v35 >> 2 > v34)
            v34 = v35 >> 2;
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
            v36 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v36 = v34;
          if (v36)
          {
            v37 = (char *)sub_10000D60C((uint64_t)v9, v36);
            v32 = (char *)*((_QWORD *)this + 4);
            v30 = (char *)*((_QWORD *)this + 5);
          }
          else
          {
            v37 = 0;
          }
          v38 = &v37[8 * v33];
          *(_QWORD *)v38 = 0;
          v31 = v38 + 8;
          while (v30 != v32)
          {
            v39 = *((_QWORD *)v30 - 1);
            v30 -= 8;
            *((_QWORD *)v38 - 1) = v39;
            v38 -= 8;
          }
          *((_QWORD *)this + 4) = v38;
          *((_QWORD *)this + 5) = v31;
          *((_QWORD *)this + 6) = &v37[8 * v36];
          if (v32)
            operator delete(v32);
        }
        else
        {
          *(_QWORD *)v30 = 0;
          v31 = v30 + 8;
        }
        *((_QWORD *)this + 5) = v31;
        v40 = *((_QWORD *)a2 + 1);
        if (v40 > 0xFFFFFFFFFFFFFFF7 || v40 + 8 > *((_QWORD *)a2 + 2))
        {
LABEL_82:
          *((_BYTE *)a2 + 24) = 1;
          break;
        }
        *(v31 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v40);
        v28 = *((_QWORD *)a2 + 2);
        v27 = *((_QWORD *)a2 + 1) + 8;
        *((_QWORD *)a2 + 1) = v27;
      }
LABEL_83:
      PB::Reader::recallMark(a2, v78);
      goto LABEL_119;
    }
    v56 = (char *)*((_QWORD *)this + 5);
    v55 = *((_QWORD *)this + 6);
    if ((unint64_t)v56 >= v55)
    {
      v60 = (char *)*v8;
      v61 = (v56 - (_BYTE *)*v8) >> 3;
      v62 = v61 + 1;
      if ((unint64_t)(v61 + 1) >> 61)
LABEL_127:
        sub_10000D5F8();
      v63 = v55 - (_QWORD)v60;
      if (v63 >> 2 > v62)
        v62 = v63 >> 2;
      if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8)
        v64 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v64 = v62;
      if (v64)
      {
        v65 = (char *)sub_10000D60C((uint64_t)v9, v64);
        v60 = (char *)*((_QWORD *)this + 4);
        v56 = (char *)*((_QWORD *)this + 5);
      }
      else
      {
        v65 = 0;
      }
      v72 = &v65[8 * v61];
      *(_QWORD *)v72 = 0;
      v57 = v72 + 8;
      while (v56 != v60)
      {
        v73 = *((_QWORD *)v56 - 1);
        v56 -= 8;
        *((_QWORD *)v72 - 1) = v73;
        v72 -= 8;
      }
      *((_QWORD *)this + 4) = v72;
      *((_QWORD *)this + 5) = v57;
      *((_QWORD *)this + 6) = &v65[8 * v64];
      if (v60)
        operator delete(v60);
    }
    else
    {
      *(_QWORD *)v56 = 0;
      v57 = v56 + 8;
    }
    *((_QWORD *)this + 5) = v57;
    goto LABEL_114;
  }
  return v4 == 0;
}

uint64_t CMMsl::Pose::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;

  v3 = (_QWORD *)this;
  if ((*(_BYTE *)(this + 64) & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 56), 1u);
  v4 = (double *)v3[1];
  v5 = (double *)v3[2];
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  v8 = (double *)v3[4];
  v7 = (double *)v3[5];
  while (v8 != v7)
  {
    v9 = *v8++;
    this = PB::Writer::write(a2, v9, 3u);
  }
  return this;
}

uint64_t CMMsl::Pose::hash_value(CMMsl::Pose *this)
{
  uint64_t v2;
  uint64_t v3;

  if ((*((_BYTE *)this + 64) & 1) != 0)
  {
    if (*((double *)this + 7) == 0.0)
      v2 = 0;
    else
      v2 = *((_QWORD *)this + 7);
  }
  else
  {
    v2 = 0;
  }
  v3 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1)) ^ v2;
  return v3 ^ PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
}

void CMMsl::PoseState::~PoseState(CMMsl::PoseState *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_100353890;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::PoseState::~PoseState(this);
  operator delete();
}

CMMsl::PoseState *CMMsl::PoseState::PoseState(CMMsl::PoseState *this, const CMMsl::PoseState *a2)
{
  char v4;

  *(_QWORD *)this = off_100353890;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_DWORD *)this + 11) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (*((_QWORD *)a2 + 4))
    operator new();
  if (this != a2)
    sub_100239350((char *)this + 8, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
  if ((*((_BYTE *)a2 + 44) & 1) != 0)
  {
    v4 = *((_BYTE *)a2 + 40);
    *((_BYTE *)this + 44) |= 1u;
    *((_BYTE *)this + 40) = v4;
  }
  return this;
}

uint64_t CMMsl::PoseState::operator=(uint64_t a1, const CMMsl::PoseState *a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  char v10;
  int v11;

  if ((const CMMsl::PoseState *)a1 != a2)
  {
    CMMsl::PoseState::PoseState((CMMsl::PoseState *)&v7, a2);
    v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v11;
    v11 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v5;
    LOBYTE(v3) = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a1 + 40) = v10;
    v10 = v3;
    CMMsl::PoseState::~PoseState((CMMsl::PoseState *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PoseState *a2, CMMsl::PoseState *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_DWORD *)(this + 44);
  *(_DWORD *)(this + 44) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  v4 = *(_QWORD *)(this + 32);
  *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  LOBYTE(v7) = *(_BYTE *)(this + 40);
  *(_BYTE *)(this + 40) = *((_BYTE *)a2 + 40);
  *((_BYTE *)a2 + 40) = v7;
  return this;
}

uint64_t CMMsl::PoseState::PoseState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = off_100353890;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_100239458(v4, (__n128 *)(a2 + 8));
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t CMMsl::PoseState::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  char v10;
  int v11;

  if (a1 != a2)
  {
    CMMsl::PoseState::PoseState((uint64_t)&v7, a2);
    v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v11;
    v11 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v5;
    LOBYTE(v3) = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a1 + 40) = v10;
    v10 = v3;
    CMMsl::PoseState::~PoseState((CMMsl::PoseState *)&v7);
  }
  return a1;
}

uint64_t CMMsl::PoseState::formatText(CMMsl::PoseState *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  double *v6;
  double *v7;
  double v8;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 4);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "pose");
  v6 = (double *)*((_QWORD *)this + 1);
  v7 = (double *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "velocity", v8);
  }
  if ((*((_BYTE *)this + 44) & 1) != 0)
    PB::TextFormatter::format(a2, "wasCorrected", *((_BYTE *)this + 40));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::PoseState::readFrom(CMMsl::PoseState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  char *v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  BOOL v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  _BYTE v55[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 8);
    v9 = (char *)this + 24;
    while (1)
    {
      v10 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        if (v12++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v22 = v13 & 7;
      if (v22 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v23 = v13 >> 3;
      if ((v13 >> 3) == 3)
      {
        *((_BYTE *)this + 44) |= 1u;
        v24 = *((_QWORD *)a2 + 1);
        if (v24 >= *((_QWORD *)a2 + 2))
        {
          v27 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v25 = v24 + 1;
          v26 = *(unsigned __int8 *)(*(_QWORD *)a2 + v24);
          *((_QWORD *)a2 + 1) = v25;
          v27 = v26 != 0;
        }
        *((_BYTE *)this + 40) = v27;
      }
      else if ((_DWORD)v23 == 2)
      {
        if (v22 == 2)
        {
          if ((PB::Reader::placeMark(a2, v55) & 1) != 0)
            return 0;
          v28 = *((_QWORD *)a2 + 1);
          v29 = *((_QWORD *)a2 + 2);
          while (v28 < v29 && !*((_BYTE *)a2 + 24))
          {
            v31 = (char *)*((_QWORD *)this + 2);
            v30 = *((_QWORD *)this + 3);
            if ((unint64_t)v31 >= v30)
            {
              v33 = (char *)*v8;
              v34 = (v31 - (_BYTE *)*v8) >> 3;
              v35 = v34 + 1;
              if ((unint64_t)(v34 + 1) >> 61)
                goto LABEL_86;
              v36 = v30 - (_QWORD)v33;
              if (v36 >> 2 > v35)
                v35 = v36 >> 2;
              if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
                v37 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v37 = v35;
              if (v37)
              {
                v38 = (char *)sub_10000D60C((uint64_t)v9, v37);
                v33 = (char *)*((_QWORD *)this + 1);
                v31 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v38 = 0;
              }
              v39 = &v38[8 * v34];
              *(_QWORD *)v39 = 0;
              v32 = v39 + 8;
              while (v31 != v33)
              {
                v40 = *((_QWORD *)v31 - 1);
                v31 -= 8;
                *((_QWORD *)v39 - 1) = v40;
                v39 -= 8;
              }
              *((_QWORD *)this + 1) = v39;
              *((_QWORD *)this + 2) = v32;
              *((_QWORD *)this + 3) = &v38[8 * v37];
              if (v33)
                operator delete(v33);
            }
            else
            {
              *(_QWORD *)v31 = 0;
              v32 = v31 + 8;
            }
            *((_QWORD *)this + 2) = v32;
            v41 = *((_QWORD *)a2 + 1);
            if (v41 > 0xFFFFFFFFFFFFFFF7 || v41 + 8 > *((_QWORD *)a2 + 2))
            {
              *((_BYTE *)a2 + 24) = 1;
              break;
            }
            *(v32 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v41);
            v29 = *((_QWORD *)a2 + 2);
            v28 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v28;
          }
          PB::Reader::recallMark(a2, v55);
        }
        else
        {
          v43 = (char *)*((_QWORD *)this + 2);
          v42 = *((_QWORD *)this + 3);
          if ((unint64_t)v43 >= v42)
          {
            v45 = (char *)*v8;
            v46 = (v43 - (_BYTE *)*v8) >> 3;
            v47 = v46 + 1;
            if ((unint64_t)(v46 + 1) >> 61)
LABEL_86:
              sub_10000D5F8();
            v48 = v42 - (_QWORD)v45;
            if (v48 >> 2 > v47)
              v47 = v48 >> 2;
            if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
              v49 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v49 = v47;
            if (v49)
            {
              v50 = (char *)sub_10000D60C((uint64_t)v9, v49);
              v45 = (char *)*((_QWORD *)this + 1);
              v43 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v50 = 0;
            }
            v51 = &v50[8 * v46];
            *(_QWORD *)v51 = 0;
            v44 = v51 + 8;
            while (v43 != v45)
            {
              v52 = *((_QWORD *)v43 - 1);
              v43 -= 8;
              *((_QWORD *)v51 - 1) = v52;
              v51 -= 8;
            }
            *((_QWORD *)this + 1) = v51;
            *((_QWORD *)this + 2) = v44;
            *((_QWORD *)this + 3) = &v50[8 * v49];
            if (v45)
              operator delete(v45);
          }
          else
          {
            *(_QWORD *)v43 = 0;
            v44 = v43 + 8;
          }
          *((_QWORD *)this + 2) = v44;
          v53 = *((_QWORD *)a2 + 1);
          if (v53 <= 0xFFFFFFFFFFFFFFF7 && v53 + 8 <= *((_QWORD *)a2 + 2))
          {
            *(v44 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v53);
            *((_QWORD *)a2 + 1) += 8;
          }
          else
          {
            *((_BYTE *)a2 + 24) = 1;
          }
        }
      }
      else
      {
        if ((_DWORD)v23 == 1)
          operator new();
        if ((PB::Reader::skip(a2, v23, v22, 0) & 1) == 0)
          return 0;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_21;
      v17 += 7;
      v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PoseState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  double *v5;
  double *v6;
  double v7;

  v3 = this;
  v4 = *(const PB::Base **)(this + 32);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  v5 = *(double **)(v3 + 8);
  v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7, 2u);
  }
  if ((*(_BYTE *)(v3 + 44) & 1) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 40), 3u);
  return this;
}

uint64_t CMMsl::PoseState::hash_value(CMMsl::PoseState *this)
{
  CMMsl::Pose *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (CMMsl::Pose *)*((_QWORD *)this + 4);
  if (v2)
    v3 = CMMsl::Pose::hash_value(v2);
  else
    v3 = 0;
  v4 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  if ((*((_BYTE *)this + 44) & 1) != 0)
    v5 = *((unsigned __int8 *)this + 40);
  else
    v5 = 0;
  return v4 ^ v3 ^ v5;
}

uint64_t CMMsl::PoseState::makePose(uint64_t this)
{
  if (!*(_QWORD *)(this + 32))
    operator new();
  return this;
}

void CMMsl::PostureJoint::~PostureJoint(CMMsl::PostureJoint *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_1003538C8;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::PostureJoint::~PostureJoint(this);
  operator delete();
}

CMMsl::PostureJoint *CMMsl::PostureJoint::PostureJoint(CMMsl::PostureJoint *this, const CMMsl::PostureJoint *a2)
{
  char *v4;
  int v5;

  *(_QWORD *)this = off_1003538C8;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  if (this != a2)
  {
    sub_100239350(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
    sub_100239350((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3);
  }
  if ((*((_BYTE *)a2 + 60) & 1) != 0)
  {
    v5 = *((_DWORD *)a2 + 14);
    *((_BYTE *)this + 60) |= 1u;
    *((_DWORD *)this + 14) = v5;
  }
  return this;
}

uint64_t CMMsl::PostureJoint::operator=(uint64_t a1, const CMMsl::PostureJoint *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((const CMMsl::PostureJoint *)a1 != a2)
  {
    CMMsl::PostureJoint::PostureJoint((CMMsl::PostureJoint *)&v7, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v10;
    v10 = v5;
    *(_QWORD *)&v5 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v11;
    v11 = v5;
    CMMsl::PostureJoint::~PostureJoint((CMMsl::PostureJoint *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PostureJoint *a2, CMMsl::PostureJoint *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_DWORD *)(this + 60);
  *(_DWORD *)(this + 60) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = *(_QWORD *)(this + 32);
  *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v7;
  v8 = *(_QWORD *)(this + 40);
  *(_QWORD *)(this + 40) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  v9 = *(_QWORD *)(this + 48);
  *(_QWORD *)(this + 48) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v9;
  LODWORD(v9) = *(_DWORD *)(this + 56);
  *(_DWORD *)(this + 56) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v9;
  return this;
}

uint64_t CMMsl::PostureJoint::PostureJoint(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = off_1003538C8;
  v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  sub_100239458(v4, (__n128 *)(a2 + 32));
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

uint64_t CMMsl::PostureJoint::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if (a1 != a2)
  {
    CMMsl::PostureJoint::PostureJoint((uint64_t)&v7, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v10;
    v10 = v5;
    *(_QWORD *)&v5 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v11;
    v11 = v5;
    CMMsl::PostureJoint::~PostureJoint((CMMsl::PostureJoint *)&v7);
  }
  return a1;
}

uint64_t CMMsl::PostureJoint::formatText(CMMsl::PostureJoint *this, PB::TextFormatter *a2, const char *a3)
{
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 60) & 1) != 0)
    PB::TextFormatter::format(a2, "jointName", *((_DWORD *)this + 14));
  v5 = (double *)*((_QWORD *)this + 1);
  v6 = (double *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "rotation", v7);
  }
  v8 = (double *)*((_QWORD *)this + 4);
  v9 = (double *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "translation", v10);
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::PostureJoint::readFrom(CMMsl::PostureJoint *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  char *v9;
  void **v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  _QWORD *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  _QWORD *v64;
  char v65;
  unsigned int v66;
  unint64_t v67;
  char v68;
  unint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  _BYTE v90[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 32);
    v9 = (char *)this + 48;
    v10 = (void **)((char *)this + 8);
    v11 = (char *)this + 24;
    while (1)
    {
      v12 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v19 = 0;
        v20 = 0;
        v15 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v21 = v2 + 1;
          v22 = *(_BYTE *)(v12 + v2);
          *((_QWORD *)a2 + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0)
            goto LABEL_21;
          v19 += 7;
          v2 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            v15 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v25 = v15 >> 3;
      if ((v15 >> 3) == 3)
      {
        *((_BYTE *)this + 60) |= 1u;
        v40 = *((_QWORD *)a2 + 1);
        v41 = *((_QWORD *)a2 + 2);
        v42 = *(_QWORD *)a2;
        if (v40 > 0xFFFFFFFFFFFFFFF5 || v40 + 10 > v41)
        {
          v65 = 0;
          v66 = 0;
          v45 = 0;
          if (v41 <= v40)
            v41 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v41 == v40)
            {
              LODWORD(v45) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_114;
            }
            v67 = v40 + 1;
            v68 = *(_BYTE *)(v42 + v40);
            *((_QWORD *)a2 + 1) = v67;
            v45 |= (unint64_t)(v68 & 0x7F) << v65;
            if ((v68 & 0x80) == 0)
              break;
            v65 += 7;
            v40 = v67;
            v18 = v66++ > 8;
            if (v18)
            {
LABEL_90:
              LODWORD(v45) = 0;
              goto LABEL_114;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v45) = 0;
        }
        else
        {
          v43 = 0;
          v44 = 0;
          v45 = 0;
          while (1)
          {
            v46 = v40 + 1;
            *((_QWORD *)a2 + 1) = v40 + 1;
            v47 = *(_BYTE *)(v42 + v40);
            v45 |= (unint64_t)(v47 & 0x7F) << v43;
            if ((v47 & 0x80) == 0)
              break;
            v43 += 7;
            v40 = v46;
            v18 = v44++ > 8;
            if (v18)
              goto LABEL_90;
          }
        }
LABEL_114:
        *((_DWORD *)this + 14) = v45;
        goto LABEL_133;
      }
      if ((_DWORD)v25 == 2)
        break;
      if ((_DWORD)v25 == 1)
      {
        if (v24 != 2)
        {
          v63 = (char *)*((_QWORD *)this + 2);
          v62 = *((_QWORD *)this + 3);
          if ((unint64_t)v63 >= v62)
          {
            v71 = (char *)*v10;
            v72 = (v63 - (_BYTE *)*v10) >> 3;
            v73 = v72 + 1;
            if ((unint64_t)(v72 + 1) >> 61)
LABEL_143:
              sub_10000D5F8();
            v74 = v62 - (_QWORD)v71;
            if (v74 >> 2 > v73)
              v73 = v74 >> 2;
            if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8)
              v75 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v75 = v73;
            if (v75)
            {
              v76 = (char *)sub_10000D60C((uint64_t)v11, v75);
              v71 = (char *)*((_QWORD *)this + 1);
              v63 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v76 = 0;
            }
            v83 = &v76[8 * v72];
            *(_QWORD *)v83 = 0;
            v64 = v83 + 8;
            while (v63 != v71)
            {
              v84 = *((_QWORD *)v63 - 1);
              v63 -= 8;
              *((_QWORD *)v83 - 1) = v84;
              v83 -= 8;
            }
            *((_QWORD *)this + 1) = v83;
            *((_QWORD *)this + 2) = v64;
            *((_QWORD *)this + 3) = &v76[8 * v75];
            if (v71)
              operator delete(v71);
          }
          else
          {
            *(_QWORD *)v63 = 0;
            v64 = v63 + 8;
          }
          *((_QWORD *)this + 2) = v64;
LABEL_129:
          v87 = *((_QWORD *)a2 + 1);
          if (v87 <= 0xFFFFFFFFFFFFFFF7 && v87 + 8 <= *((_QWORD *)a2 + 2))
          {
            *(v64 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v87);
            *((_QWORD *)a2 + 1) += 8;
          }
          else
          {
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_133;
        }
        if ((PB::Reader::placeMark(a2, v90) & 1) != 0)
          return 0;
        v26 = *((_QWORD *)a2 + 1);
        v27 = *((_QWORD *)a2 + 2);
        while (v26 < v27 && !*((_BYTE *)a2 + 24))
        {
          v29 = (char *)*((_QWORD *)this + 2);
          v28 = *((_QWORD *)this + 3);
          if ((unint64_t)v29 >= v28)
          {
            v31 = (char *)*v10;
            v32 = (v29 - (_BYTE *)*v10) >> 3;
            v33 = v32 + 1;
            if ((unint64_t)(v32 + 1) >> 61)
              goto LABEL_143;
            v34 = v28 - (_QWORD)v31;
            if (v34 >> 2 > v33)
              v33 = v34 >> 2;
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
              v35 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v35 = v33;
            if (v35)
            {
              v36 = (char *)sub_10000D60C((uint64_t)v11, v35);
              v31 = (char *)*((_QWORD *)this + 1);
              v29 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v36 = 0;
            }
            v37 = &v36[8 * v32];
            *(_QWORD *)v37 = 0;
            v30 = v37 + 8;
            while (v29 != v31)
            {
              v38 = *((_QWORD *)v29 - 1);
              v29 -= 8;
              *((_QWORD *)v37 - 1) = v38;
              v37 -= 8;
            }
            *((_QWORD *)this + 1) = v37;
            *((_QWORD *)this + 2) = v30;
            *((_QWORD *)this + 3) = &v36[8 * v35];
            if (v31)
              operator delete(v31);
          }
          else
          {
            *(_QWORD *)v29 = 0;
            v30 = v29 + 8;
          }
          *((_QWORD *)this + 2) = v30;
          v39 = *((_QWORD *)a2 + 1);
          if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_93;
          *(v30 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v39);
          v27 = *((_QWORD *)a2 + 2);
          v26 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v26;
        }
LABEL_94:
        PB::Reader::recallMark(a2, v90);
        goto LABEL_133;
      }
      if ((PB::Reader::skip(a2, v25, v24, 0) & 1) == 0)
        return 0;
LABEL_133:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    if (v24 != 2)
    {
      v70 = (char *)*((_QWORD *)this + 5);
      v69 = *((_QWORD *)this + 6);
      if ((unint64_t)v70 >= v69)
      {
        v77 = (char *)*v8;
        v78 = (v70 - (_BYTE *)*v8) >> 3;
        v79 = v78 + 1;
        if ((unint64_t)(v78 + 1) >> 61)
LABEL_144:
          sub_10000D5F8();
        v80 = v69 - (_QWORD)v77;
        if (v80 >> 2 > v79)
          v79 = v80 >> 2;
        if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8)
          v81 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v81 = v79;
        if (v81)
        {
          v82 = (char *)sub_10000D60C((uint64_t)v9, v81);
          v77 = (char *)*((_QWORD *)this + 4);
          v70 = (char *)*((_QWORD *)this + 5);
        }
        else
        {
          v82 = 0;
        }
        v85 = &v82[8 * v78];
        *(_QWORD *)v85 = 0;
        v64 = v85 + 8;
        while (v70 != v77)
        {
          v86 = *((_QWORD *)v70 - 1);
          v70 -= 8;
          *((_QWORD *)v85 - 1) = v86;
          v85 -= 8;
        }
        *((_QWORD *)this + 4) = v85;
        *((_QWORD *)this + 5) = v64;
        *((_QWORD *)this + 6) = &v82[8 * v81];
        if (v77)
          operator delete(v77);
      }
      else
      {
        *(_QWORD *)v70 = 0;
        v64 = v70 + 8;
      }
      *((_QWORD *)this + 5) = v64;
      goto LABEL_129;
    }
    if ((PB::Reader::placeMark(a2, v90) & 1) != 0)
      return 0;
    v48 = *((_QWORD *)a2 + 1);
    v49 = *((_QWORD *)a2 + 2);
    while (v48 < v49 && !*((_BYTE *)a2 + 24))
    {
      v51 = (char *)*((_QWORD *)this + 5);
      v50 = *((_QWORD *)this + 6);
      if ((unint64_t)v51 >= v50)
      {
        v53 = (char *)*v8;
        v54 = (v51 - (_BYTE *)*v8) >> 3;
        v55 = v54 + 1;
        if ((unint64_t)(v54 + 1) >> 61)
          goto LABEL_144;
        v56 = v50 - (_QWORD)v53;
        if (v56 >> 2 > v55)
          v55 = v56 >> 2;
        if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
          v57 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v57 = v55;
        if (v57)
        {
          v58 = (char *)sub_10000D60C((uint64_t)v9, v57);
          v53 = (char *)*((_QWORD *)this + 4);
          v51 = (char *)*((_QWORD *)this + 5);
        }
        else
        {
          v58 = 0;
        }
        v59 = &v58[8 * v54];
        *(_QWORD *)v59 = 0;
        v52 = v59 + 8;
        while (v51 != v53)
        {
          v60 = *((_QWORD *)v51 - 1);
          v51 -= 8;
          *((_QWORD *)v59 - 1) = v60;
          v59 -= 8;
        }
        *((_QWORD *)this + 4) = v59;
        *((_QWORD *)this + 5) = v52;
        *((_QWORD *)this + 6) = &v58[8 * v57];
        if (v53)
          operator delete(v53);
      }
      else
      {
        *(_QWORD *)v51 = 0;
        v52 = v51 + 8;
      }
      *((_QWORD *)this + 5) = v52;
      v61 = *((_QWORD *)a2 + 1);
      if (v61 > 0xFFFFFFFFFFFFFFF7 || v61 + 8 > *((_QWORD *)a2 + 2))
      {
LABEL_93:
        *((_BYTE *)a2 + 24) = 1;
        goto LABEL_94;
      }
      *(v52 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v61);
      v49 = *((_QWORD *)a2 + 2);
      v48 = *((_QWORD *)a2 + 1) + 8;
      *((_QWORD *)a2 + 1) = v48;
    }
    goto LABEL_94;
  }
  return v4 == 0;
}

uint64_t CMMsl::PostureJoint::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;

  v3 = this;
  v4 = *(double **)(this + 8);
  v5 = *(double **)(this + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6, 1u);
  }
  v7 = *(double **)(v3 + 32);
  v8 = *(double **)(v3 + 40);
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::write(a2, v9, 2u);
  }
  if ((*(_BYTE *)(v3 + 60) & 1) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 56), 3u);
  return this;
}

uint64_t CMMsl::PostureJoint::hash_value(CMMsl::PostureJoint *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  v3 = PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
  if ((*((_BYTE *)this + 60) & 1) != 0)
    v4 = *((int *)this + 14);
  else
    v4 = 0;
  return v3 ^ v2 ^ v4;
}

void CMMsl::PostureSkeleton::~PostureSkeleton(CMMsl::PostureSkeleton *this)
{
  void **v2;

  *(_QWORD *)this = off_100353900;
  v2 = (void **)((char *)this + 8);
  sub_1002394A8(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = off_100353900;
  v2 = (void **)((char *)this + 8);
  sub_1002394A8(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = off_100353900;
  v2 = (void **)((char *)this + 8);
  sub_1002394A8(&v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::PostureSkeleton::PostureSkeleton(_QWORD *this, const CMMsl::PostureSkeleton *a2)
{
  this[1] = 0;
  *this = off_100353900;
  this[2] = 0;
  this[3] = 0;
  if (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2))
    sub_1001C87D0();
  return this;
}

void sub_1001C87D0()
{
  operator new();
}

void sub_1001C8904(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::PostureSkeleton::operator=(uint64_t a1, const CMMsl::PostureSkeleton *a2)
{
  __int128 v3;
  uint64_t v4;
  void (**v6)(CMMsl::PostureSkeleton *__hidden);
  __int128 v7;
  uint64_t v8;
  void **v9;

  if ((const CMMsl::PostureSkeleton *)a1 != a2)
  {
    CMMsl::PostureSkeleton::PostureSkeleton(&v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v4;
    v6 = off_100353900;
    v9 = (void **)&v7;
    sub_1002394A8(&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

_QWORD *CMMsl::swap(_QWORD *this, CMMsl::PostureSkeleton *a2, CMMsl::PostureSkeleton *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  return this;
}

_QWORD *CMMsl::PostureSkeleton::PostureSkeleton(_QWORD *a1, uint64_t a2)
{
  _OWORD *v4;

  *a1 = off_100353900;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  sub_100239524(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *a1 = off_100353900;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  sub_100239524(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

uint64_t CMMsl::PostureSkeleton::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  void (**v9)(CMMsl::PostureSkeleton *__hidden);
  __int128 v10;
  uint64_t v11;
  void **v12;

  if (a1 != a2)
  {
    v9 = off_100353900;
    v10 = 0uLL;
    v11 = 0;
    sub_100239524(&v10);
    v4 = *(_QWORD *)(a2 + 24);
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    v10 = v6;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v4;
    v11 = v7;
    v12 = (void **)&v10;
    v9 = off_100353900;
    sub_1002394A8(&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::PostureSkeleton::formatText(CMMsl::PostureSkeleton *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "joint");
  }
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PostureSkeleton::readFrom(CMMsl::PostureSkeleton *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        sub_1001C8D40();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_1001C8D40()
{
  operator new();
}

void sub_1001C8E88(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::PostureSkeleton::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base **v2;
  const PB::Base **i;
  const PB::Base *v5;

  v2 = *(const PB::Base ***)(this + 8);
  for (i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5, 1u))
    v5 = *v2++;
  return this;
}

BOOL sub_1001C8EEC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;
  BOOL v8;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t **)a2;
  if (v3 - *a1 != *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
    return 0;
  if (v2 == v3)
    return 1;
  v5 = v2 + 8;
  do
  {
    v6 = *v4++;
    result = CMMsl::PostureJoint::operator==(*(_QWORD *)(v5 - 8), v6);
    v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t CMMsl::PostureSkeleton::hash_value(CMMsl::PostureSkeleton *this)
{
  CMMsl::PostureJoint **v1;
  CMMsl::PostureJoint **v2;
  uint64_t v3;
  CMMsl::PostureJoint *v4;

  v1 = (CMMsl::PostureJoint **)*((_QWORD *)this + 1);
  v2 = (CMMsl::PostureJoint **)*((_QWORD *)this + 2);
  if (v1 == v2)
    return 0;
  v3 = 0;
  do
  {
    v4 = *v1++;
    v3 ^= CMMsl::PostureJoint::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

void CMMsl::PowerManagementUserActivity::~PowerManagementUserActivity(CMMsl::PowerManagementUserActivity *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::PowerManagementUserActivity::PowerManagementUserActivity(uint64_t this, const CMMsl::PowerManagementUserActivity *a2)
{
  uint64_t v2;

  *(_QWORD *)this = off_100353938;
  *(_DWORD *)(this + 16) = 0;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v2 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 16) = 1;
    *(_QWORD *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::PowerManagementUserActivity::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  _QWORD v7[2];
  int v8;

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = *(_BYTE *)(a2 + 16) & 1;
    v8 = v4;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v7[0] = off_100353938;
    v7[1] = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD v8[2];
  int v9;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v3;
    v9 = v5;
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v8[0] = off_100353938;
    v8[1] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PowerManagementUserActivity *a2, CMMsl::PowerManagementUserActivity *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  return this;
}

uint64_t CMMsl::PowerManagementUserActivity::formatText(CMMsl::PowerManagementUserActivity *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 16) & 1) != 0)
    PB::TextFormatter::format(a2, "userActivity", *((_QWORD *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PowerManagementUserActivity::readFrom(CMMsl::PowerManagementUserActivity *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 16) |= 1u;
        v20 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v3 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          else
            v2 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v2 == v20)
            {
              v24 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_43;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              v24 = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v24 = 0;
LABEL_42:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)a2 + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              v24 = 0;
              break;
            }
          }
        }
LABEL_43:
        *((_QWORD *)this + 1) = v24;
      }
      else
      {
        result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PowerManagementUserActivity::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 16) & 1) != 0)
    return PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 8), 1u);
  return this;
}

uint64_t CMMsl::PowerManagementUserActivity::hash_value(CMMsl::PowerManagementUserActivity *this)
{
  if ((*((_BYTE *)this + 16) & 1) != 0)
    return *((_QWORD *)this + 1);
  else
    return 0;
}

void CMMsl::PrecisionFindingDOTEstimate::~PrecisionFindingDOTEstimate(CMMsl::PrecisionFindingDOTEstimate *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::PrecisionFindingDOTEstimate::PrecisionFindingDOTEstimate(CMMsl::PrecisionFindingDOTEstimate *this, const CMMsl::PrecisionFindingDOTEstimate *a2)
{
  char v2;
  double result;

  *(_QWORD *)this = off_100353970;
  *((_DWORD *)this + 6) = 0;
  if ((*((_BYTE *)a2 + 24) & 2) != 0)
  {
    result = *((double *)a2 + 2);
    *((_BYTE *)this + 24) = 2;
    *((double *)this + 2) = result;
    v2 = 3;
    if ((*((_BYTE *)a2 + 24) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*((_BYTE *)a2 + 24) & 1) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 1);
    *((_BYTE *)this + 24) = v2;
    *((double *)this + 1) = result;
  }
  return result;
}

uint64_t CMMsl::PrecisionFindingDOTEstimate::operator=(uint64_t a1, uint64_t a2, double a3, double a4)
{
  char v5;
  char v6;
  int v7;
  __int128 v8;
  void (**v10)(CMMsl::PrecisionFindingDOTEstimate *__hidden);
  __int128 v11;
  int v12;

  if (a1 != a2)
  {
    v10 = off_100353970;
    v12 = 0;
    v5 = *(_BYTE *)(a2 + 24);
    if ((v5 & 2) != 0)
    {
      a3 = *(double *)(a2 + 16);
      LOBYTE(v12) = 2;
      v6 = 3;
      if ((v5 & 1) != 0)
      {
LABEL_6:
        a4 = *(double *)(a2 + 8);
        LOBYTE(v12) = v6;
      }
    }
    else
    {
      v6 = 1;
      if ((*(_BYTE *)(a2 + 24) & 1) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v12;
    v12 = v7;
    v8 = *(_OWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a4;
    *(double *)(a1 + 16) = a3;
    v11 = v8;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PrecisionFindingDOTEstimate *a2, CMMsl::PrecisionFindingDOTEstimate *a3)
{
  int v3;
  uint64_t v4;
  double result;

  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

uint64_t CMMsl::PrecisionFindingDOTEstimate::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  void (**v7)(CMMsl::PrecisionFindingDOTEstimate *__hidden);
  __int128 v8;
  int v9;

  if (a1 != a2)
  {
    v7 = off_100353970;
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v9 = *(_DWORD *)(a1 + 24);
    v4 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    v8 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::PrecisionFindingDOTEstimate::formatText(CMMsl::PrecisionFindingDOTEstimate *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "dot", *((double *)this + 1));
    v5 = *((_BYTE *)this + 24);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PrecisionFindingDOTEstimate::readFrom(CMMsl::PrecisionFindingDOTEstimate *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 24) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_28;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
      }
      else
      {
        if ((_DWORD)v20 != 1)
        {
          result = PB::Reader::skip(a2, v20, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          goto LABEL_33;
        }
        *((_BYTE *)this + 24) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
        {
LABEL_28:
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_33;
        }
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
      }
      v2 = *((_QWORD *)a2 + 1) + 8;
      *((_QWORD *)a2 + 1) = v2;
LABEL_33:
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::PrecisionFindingDOTEstimate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 24);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
    v4 = *(_BYTE *)(v3 + 24);
  }
  if ((v4 & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8), 2u);
  return this;
}

uint64_t CMMsl::PrecisionFindingDOTEstimate::hash_value(CMMsl::PrecisionFindingDOTEstimate *this)
{
  double v1;
  double v2;

  if ((*((_BYTE *)this + 24) & 2) != 0)
  {
    v1 = *((double *)this + 2);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 24) & 1) != 0)
      goto LABEL_3;
LABEL_9:
    v2 = 0.0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 24) & 1) == 0)
    goto LABEL_9;
LABEL_3:
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1;
}

void CMMsl::PrecisionFindingRangeFilter::~PrecisionFindingRangeFilter(CMMsl::PrecisionFindingRangeFilter *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::PrecisionFindingRangeFilter::PrecisionFindingRangeFilter(uint64_t this, const CMMsl::PrecisionFindingRangeFilter *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  char v9;
  char v10;

  *(_QWORD *)this = off_1003539A8;
  *(_DWORD *)(this + 40) = 0;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 2) != 0)
  {
    v4 = *((_QWORD *)a2 + 2);
    v3 = 2;
    *(_BYTE *)(this + 40) = 2;
    *(_QWORD *)(this + 16) = v4;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 40) & 1) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 1);
    v3 |= 1u;
    *(_BYTE *)(this + 40) = v3;
    *(_QWORD *)(this + 8) = v5;
    v2 = *((_BYTE *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *(_BYTE *)(this + 40) = v3;
    *(_DWORD *)(this + 24) = v6;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *(_BYTE *)(this + 40) = v3;
  *(_DWORD *)(this + 32) = v7;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  v8 = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *(_BYTE *)(this + 40) = v3;
  *(_DWORD *)(this + 28) = v8;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      return this;
LABEL_16:
    v10 = *((_BYTE *)a2 + 37);
    *(_BYTE *)(this + 40) = v3 | 0x40;
    *(_BYTE *)(this + 37) = v10;
    return this;
  }
LABEL_15:
  v9 = *((_BYTE *)a2 + 36);
  v3 |= 0x20u;
  *(_BYTE *)(this + 40) = v3;
  *(_BYTE *)(this + 36) = v9;
  if ((*((_BYTE *)a2 + 40) & 0x40) != 0)
    goto LABEL_16;
  return this;
}

uint64_t CMMsl::PrecisionFindingRangeFilter::operator=(uint64_t a1, const CMMsl::PrecisionFindingRangeFilter *a2)
{
  int v3;
  __int128 v4;
  int v5;
  uint64_t v7;
  __int128 v8;
  int v9;
  uint64_t v10;
  char v11;
  char v12;
  int v13;

  if ((const CMMsl::PrecisionFindingRangeFilter *)a1 != a2)
  {
    CMMsl::PrecisionFindingRangeFilter::PrecisionFindingRangeFilter((uint64_t)&v7, a2);
    v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v13;
    v13 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v9;
    v9 = v5;
    *(_QWORD *)&v4 = *(_QWORD *)(a1 + 28);
    *(_QWORD *)(a1 + 28) = v10;
    v10 = v4;
    LOBYTE(v5) = *(_BYTE *)(a1 + 36);
    *(_BYTE *)(a1 + 36) = v11;
    v11 = v5;
    LOBYTE(v5) = *(_BYTE *)(a1 + 37);
    *(_BYTE *)(a1 + 37) = v12;
    v12 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::PrecisionFindingRangeFilter *a2, CMMsl::PrecisionFindingRangeFilter *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  float result;

  v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v6;
  LODWORD(v5) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  result = *((float *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((float *)a2 + 7) = result;
  LOBYTE(v6) = *((_BYTE *)this + 36);
  *((_BYTE *)this + 36) = *((_BYTE *)a2 + 36);
  *((_BYTE *)a2 + 36) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 37);
  *((_BYTE *)this + 37) = *((_BYTE *)a2 + 37);
  *((_BYTE *)a2 + 37) = v6;
  return result;
}

float CMMsl::PrecisionFindingRangeFilter::PrecisionFindingRangeFilter(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_1003539A8;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_BYTE *)(a1 + 37) = *(_BYTE *)(a2 + 37);
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_1003539A8;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_BYTE *)(a1 + 37) = *(_BYTE *)(a2 + 37);
  return result;
}

uint64_t CMMsl::PrecisionFindingRangeFilter::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  char v5;
  char v6;
  __int128 v7;
  int v8;
  uint64_t v9;
  void (**v11)(CMMsl::PrecisionFindingRangeFilter *__hidden);
  __int128 v12;
  int v13;
  uint64_t v14;
  char v15;
  char v16;
  int v17;

  if (a1 != a2)
  {
    v11 = off_1003539A8;
    v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    v4 = *(_DWORD *)(a2 + 24);
    v5 = *(_BYTE *)(a2 + 36);
    v6 = *(_BYTE *)(a2 + 37);
    v17 = *(_DWORD *)(a1 + 40);
    v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    v12 = v7;
    v8 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    v13 = v8;
    *(_QWORD *)&v7 = *(_QWORD *)(a1 + 28);
    v9 = *(_QWORD *)(a2 + 28);
    *(_DWORD *)(a1 + 40) = v3;
    *(_QWORD *)(a1 + 28) = v9;
    v14 = v7;
    LOBYTE(v3) = *(_BYTE *)(a1 + 36);
    *(_BYTE *)(a1 + 36) = v5;
    v15 = v3;
    LOBYTE(v3) = *(_BYTE *)(a1 + 37);
    *(_BYTE *)(a1 + 37) = v6;
    v16 = v3;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

uint64_t CMMsl::PrecisionFindingRangeFilter::formatText(CMMsl::PrecisionFindingRangeFilter *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "inlierCount", *((_DWORD *)this + 6));
    v5 = *((_BYTE *)this + 40);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*((_BYTE *)this + 40) & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "isOutlierCurrentSample", *((_BYTE *)this + 36));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "isValidMeasurement", *((_BYTE *)this + 37));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "range", *((double *)this + 1));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(a2, "rangeShift", *((float *)this + 8));
    if ((*((_BYTE *)this + 40) & 2) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "rangeFrequency", *((float *)this + 7));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 0x10) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 2) != 0)
LABEL_8:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PrecisionFindingRangeFilter::readFrom(CMMsl::PrecisionFindingRangeFilter *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  char v31;
  unsigned int v32;
  unint64_t v33;
  char v34;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 40) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_43;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_30;
            case 2u:
              *((_BYTE *)this + 40) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_43;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_30:
              v2 = *((_QWORD *)a2 + 1) + 8;
              goto LABEL_61;
            case 3u:
              *((_BYTE *)this + 40) |= 4u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v31 = 0;
                v32 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_66;
                  }
                  v33 = v21++;
                  v34 = *(_BYTE *)(v22 + v33);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v34 & 0x7F) << v31;
                  if ((v34 & 0x80) == 0)
                    break;
                  v31 += 7;
                  v14 = v32++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_65:
                    v2 = v33 + 1;
                    goto LABEL_66;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_65;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_66;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_66:
              *((_DWORD *)this + 6) = v25;
LABEL_67:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 4u:
              *((_BYTE *)this + 40) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_43;
              *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_60;
            case 5u:
              *((_BYTE *)this + 40) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_60:
                v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_61:
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_43:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_67;
            case 6u:
              *((_BYTE *)this + 40) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v28 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v28 = v27 != 0;
              }
              *((_BYTE *)this + 36) = v28;
              goto LABEL_67;
            case 7u:
              *((_BYTE *)this + 40) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v30 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v30 = v29 != 0;
              }
              *((_BYTE *)this + 37) = v30;
              goto LABEL_67;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_67;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::PrecisionFindingRangeFilter::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 40);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(this + 40) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 2u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 3u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 4u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 5u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      return this;
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 37), 7u);
  }
LABEL_14:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 36), 6u);
  if ((*(_BYTE *)(v3 + 40) & 0x40) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 37), 7u);
  return this;
}

uint64_t CMMsl::PrecisionFindingRangeFilter::hash_value(CMMsl::PrecisionFindingRangeFilter *this)
{
  double v1;
  double v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if ((*((_BYTE *)this + 40) & 2) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 40) & 1) != 0)
      goto LABEL_3;
LABEL_18:
    v2 = 0.0;
    if ((*((_BYTE *)this + 40) & 4) != 0)
      goto LABEL_6;
    goto LABEL_19;
  }
  v1 = *((double *)this + 2);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 40) & 1) == 0)
    goto LABEL_18;
LABEL_3:
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 40) & 4) != 0)
  {
LABEL_6:
    v3 = *((unsigned int *)this + 6);
    if ((*((_BYTE *)this + 40) & 0x10) != 0)
      goto LABEL_7;
LABEL_20:
    v5 = 0;
    if ((*((_BYTE *)this + 40) & 8) != 0)
      goto LABEL_10;
LABEL_21:
    v7 = 0;
    if ((*((_BYTE *)this + 40) & 0x20) != 0)
      goto LABEL_13;
LABEL_22:
    v8 = 0;
    if ((*((_BYTE *)this + 40) & 0x40) != 0)
      goto LABEL_14;
LABEL_23:
    v9 = 0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ v3 ^ v5 ^ v7 ^ v8 ^ v9;
  }
LABEL_19:
  v3 = 0;
  if ((*((_BYTE *)this + 40) & 0x10) == 0)
    goto LABEL_20;
LABEL_7:
  v4 = *((float *)this + 8);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((*((_BYTE *)this + 40) & 8) == 0)
    goto LABEL_21;
LABEL_10:
  v6 = *((float *)this + 7);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((*((_BYTE *)this + 40) & 0x20) == 0)
    goto LABEL_22;
LABEL_13:
  v8 = *((unsigned __int8 *)this + 36);
  if ((*((_BYTE *)this + 40) & 0x40) == 0)
    goto LABEL_23;
LABEL_14:
  v9 = *((unsigned __int8 *)this + 37);
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ v3 ^ v5 ^ v7 ^ v8 ^ v9;
}

void CMMsl::PrecisionFindingSessionStartStop::~PrecisionFindingSessionStartStop(CMMsl::PrecisionFindingSessionStartStop *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::PrecisionFindingSessionStartStop::PrecisionFindingSessionStartStop(uint64_t this, const CMMsl::PrecisionFindingSessionStartStop *a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)this = off_1003539E0;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_BYTE *)a2 + 16);
    *(_BYTE *)(this + 20) = v2;
    *(_BYTE *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::PrecisionFindingSessionStartStop::operator=(uint64_t a1, uint64_t a2, double a3)
{
  char v3;
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  _QWORD v10[2];
  char v11;
  int v12;

  if (a1 != a2)
  {
    v10[0] = off_1003539E0;
    v12 = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      LOBYTE(v12) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v3 = *(_BYTE *)(a2 + 16);
        LOBYTE(v12) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v12;
    v12 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a3;
    v10[1] = v8;
    LOBYTE(v7) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v3;
    v11 = v7;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PrecisionFindingSessionStartStop *a2, CMMsl::PrecisionFindingSessionStartStop *a3)
{
  int v3;
  double result;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v3) = *((_BYTE *)this + 16);
  *((_BYTE *)this + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a2 + 16) = v3;
  return result;
}

double CMMsl::PrecisionFindingSessionStartStop::PrecisionFindingSessionStartStop(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_1003539E0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_1003539E0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

uint64_t CMMsl::PrecisionFindingSessionStartStop::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  _QWORD v9[2];
  char v10;
  int v11;

  if (a1 != a2)
  {
    v9[0] = off_1003539E0;
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_BYTE *)(a2 + 16);
    v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v9[1] = v7;
    LOBYTE(v3) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v5;
    v10 = v3;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::PrecisionFindingSessionStartStop::formatText(CMMsl::PrecisionFindingSessionStartStop *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "isStart", *((_BYTE *)this + 16));
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PrecisionFindingSessionStartStop::readFrom(CMMsl::PrecisionFindingSessionStartStop *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  int v21;
  BOOL v22;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v22 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v21 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v22 = v21 != 0;
        }
        *((_BYTE *)this + 16) = v22;
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PrecisionFindingSessionStartStop::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 16), 2u);
  return this;
}

uint64_t CMMsl::PrecisionFindingSessionStartStop::hash_value(CMMsl::PrecisionFindingSessionStartStop *this)
{
  double v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0;
    return v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((unsigned __int8 *)this + 16);
  return v2 ^ *(_QWORD *)&v1;
}

void CMMsl::PrecisionFindingState::~PrecisionFindingState(CMMsl::PrecisionFindingState *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::PrecisionFindingState::PrecisionFindingState(CMMsl::PrecisionFindingState *this, const CMMsl::PrecisionFindingState *a2)
{
  __int16 v2;
  __int16 v3;
  double result;
  char v5;
  int v6;
  char v7;

  *(_QWORD *)this = off_100353A18;
  *((_DWORD *)this + 23) = 0;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x40) != 0)
  {
    result = *((double *)a2 + 7);
    v3 = 64;
    *((_WORD *)this + 46) = 64;
    *((double *)this + 7) = result;
    v2 = *((_WORD *)a2 + 46);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 1) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 1);
    v3 |= 1u;
    *((_WORD *)this + 46) = v3;
    *((double *)this + 1) = result;
    v2 = *((_WORD *)a2 + 46);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_WORD *)this + 46) = v3;
    *((double *)this + 2) = result;
    v2 = *((_WORD *)a2 + 46);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_20;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_WORD *)this + 46) = v3;
  *((double *)this + 3) = result;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_WORD *)this + 46) = v3;
  *((double *)this + 4) = result;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_WORD *)this + 46) = v3;
  *((double *)this + 5) = result;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_23;
  }
LABEL_22:
  result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_WORD *)this + 46) = v3;
  *((double *)this + 8) = result;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_24;
  }
LABEL_23:
  result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_WORD *)this + 46) = v3;
  *((double *)this + 9) = result;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x800) == 0)
  {
LABEL_13:
    if ((v2 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_25;
  }
LABEL_24:
  v5 = *((_BYTE *)a2 + 88);
  v3 |= 0x800u;
  *((_WORD *)this + 46) = v3;
  *((_BYTE *)this + 88) = v5;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x400) == 0)
  {
LABEL_14:
    if ((v2 & 0x200) == 0)
      goto LABEL_15;
    goto LABEL_26;
  }
LABEL_25:
  v6 = *((_DWORD *)a2 + 21);
  v3 |= 0x400u;
  *((_WORD *)this + 46) = v3;
  *((_DWORD *)this + 21) = v6;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x200) == 0)
  {
LABEL_15:
    if ((v2 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_27;
  }
LABEL_26:
  LODWORD(result) = *((_DWORD *)a2 + 20);
  v3 |= 0x200u;
  *((_WORD *)this + 46) = v3;
  *((_DWORD *)this + 20) = LODWORD(result);
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x1000) == 0)
  {
LABEL_16:
    if ((v2 & 0x20) == 0)
      return result;
LABEL_28:
    result = *((double *)a2 + 6);
    *((_WORD *)this + 46) = v3 | 0x20;
    *((double *)this + 6) = result;
    return result;
  }
LABEL_27:
  v7 = *((_BYTE *)a2 + 89);
  v3 |= 0x1000u;
  *((_WORD *)this + 46) = v3;
  *((_BYTE *)this + 89) = v7;
  if ((*((_WORD *)a2 + 46) & 0x20) != 0)
    goto LABEL_28;
  return result;
}

CMMsl *CMMsl::PrecisionFindingState::operator=(CMMsl *a1, const CMMsl::PrecisionFindingState *a2)
{
  CMMsl::PrecisionFindingState *v3;
  _BYTE v5[96];

  if (a1 != a2)
  {
    CMMsl::PrecisionFindingState::PrecisionFindingState((CMMsl::PrecisionFindingState *)v5, a2);
    CMMsl::swap(a1, (CMMsl::PrecisionFindingState *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PrecisionFindingState *a2, CMMsl::PrecisionFindingState *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double result;

  v3 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v3;
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v8;
  v9 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v9;
  v10 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v10;
  v11 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v11;
  LOBYTE(v3) = *((_BYTE *)this + 88);
  *((_BYTE *)this + 88) = *((_BYTE *)a2 + 88);
  *((_BYTE *)a2 + 88) = v3;
  v12 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v12;
  LODWORD(v11) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v11;
  LOBYTE(v12) = *((_BYTE *)this + 89);
  *((_BYTE *)this + 89) = *((_BYTE *)a2 + 89);
  *((_BYTE *)a2 + 89) = v12;
  result = *((double *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((double *)a2 + 6) = result;
  return result;
}

double CMMsl::PrecisionFindingState::PrecisionFindingState(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100353A18;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 92) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  result = *(double *)(a2 + 48);
  *(double *)(a1 + 48) = result;
  return result;
}

CMMsl *CMMsl::PrecisionFindingState::operator=(CMMsl *this, uint64_t a2, CMMsl::PrecisionFindingState *a3)
{
  void (**v5)(CMMsl::PrecisionFindingState *__hidden);
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  int v12;
  char v13;
  char v14;
  int v15;

  if (this != (CMMsl *)a2)
  {
    v5 = off_100353A18;
    v15 = *(_DWORD *)(a2 + 92);
    *(_DWORD *)(a2 + 92) = 0;
    v6 = *(_OWORD *)(a2 + 8);
    v7 = *(_OWORD *)(a2 + 24);
    v9 = *(_OWORD *)(a2 + 56);
    v10 = *(_QWORD *)(a2 + 72);
    v13 = *(_BYTE *)(a2 + 88);
    v12 = *(_DWORD *)(a2 + 84);
    v11 = *(_DWORD *)(a2 + 80);
    v14 = *(_BYTE *)(a2 + 89);
    v8 = *(_OWORD *)(a2 + 40);
    CMMsl::swap(this, (CMMsl::PrecisionFindingState *)&v5, a3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return this;
}

uint64_t CMMsl::PrecisionFindingState::formatText(CMMsl::PrecisionFindingState *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 46);
  if ((v5 & 0x200) != 0)
  {
    PB::TextFormatter::format(a2, "distanceFromParticleFilter", *((float *)this + 20));
    v5 = *((_WORD *)this + 46);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "horizontalAngle", *((double *)this + 1));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "horizontalAngleUncertainty", *((double *)this + 2));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "horizontalAngleUncertaintyUnfiltered", *((double *)this + 3));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 0x800) == 0)
  {
LABEL_6:
    if ((v5 & 0x1000) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "isConverged", *((_BYTE *)this + 88));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 0x1000) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "isDistanceValid", *((_BYTE *)this + 89));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "positionX", *((double *)this + 4));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "positionY", *((double *)this + 5));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "positionZ", *((double *)this + 6));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "revokeReason", *((_DWORD *)this + 21));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 0x40) == 0)
  {
LABEL_12:
    if ((v5 & 0x80) == 0)
      goto LABEL_13;
LABEL_27:
    PB::TextFormatter::format(a2, "velocityX", *((double *)this + 8));
    if ((*((_WORD *)this + 46) & 0x100) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_14;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 7));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 0x80) != 0)
    goto LABEL_27;
LABEL_13:
  if ((v5 & 0x100) != 0)
LABEL_14:
    PB::TextFormatter::format(a2, "velocityY", *((double *)this + 9));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PrecisionFindingState::readFrom(CMMsl::PrecisionFindingState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  int v29;
  BOOL v30;
  char v31;
  unsigned int v32;
  unint64_t v33;
  char v34;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 46) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_64;
              *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_77;
            case 2u:
              *((_WORD *)this + 46) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_64;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_77;
            case 3u:
              *((_WORD *)this + 46) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_64;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_77;
            case 4u:
              *((_WORD *)this + 46) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_64;
              *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_77;
            case 5u:
              *((_WORD *)this + 46) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_64;
              *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_77;
            case 6u:
              *((_WORD *)this + 46) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_64;
              *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_77;
            case 7u:
              *((_WORD *)this + 46) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_64;
              *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_77;
            case 8u:
              *((_WORD *)this + 46) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_64;
              *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_77;
            case 9u:
              *((_WORD *)this + 46) |= 0x800u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v22 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v22 = v21 != 0;
              }
              *((_BYTE *)this + 88) = v22;
              goto LABEL_84;
            case 0xAu:
              *((_WORD *)this + 46) |= 0x400u;
              v23 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v24 = *(_QWORD *)a2;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                v31 = 0;
                v32 = 0;
                v27 = 0;
                if (v2 <= v23)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_83;
                  }
                  v33 = v23++;
                  v34 = *(_BYTE *)(v24 + v33);
                  *((_QWORD *)a2 + 1) = v23;
                  v27 |= (unint64_t)(v34 & 0x7F) << v31;
                  if ((v34 & 0x80) == 0)
                    break;
                  v31 += 7;
                  v14 = v32++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_82:
                    v2 = v33 + 1;
                    goto LABEL_83;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v27) = 0;
                goto LABEL_82;
              }
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v2 = v23 + 1;
                *((_QWORD *)a2 + 1) = v23 + 1;
                v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0)
                  goto LABEL_83;
                v25 += 7;
                v23 = v2;
                v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_83:
              *((_DWORD *)this + 21) = v27;
LABEL_84:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xBu:
              *((_WORD *)this + 46) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_64;
              *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              v2 = *((_QWORD *)a2 + 1) + 4;
              goto LABEL_78;
            case 0xCu:
              *((_WORD *)this + 46) |= 0x1000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v30 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v30 = v29 != 0;
              }
              *((_BYTE *)this + 89) = v30;
              goto LABEL_84;
            case 0xDu:
              *((_WORD *)this + 46) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_77:
                v2 = *((_QWORD *)a2 + 1) + 8;
LABEL_78:
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_64:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_84;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_84;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::PrecisionFindingState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 92);
  if ((v4 & 0x40) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 56), 1u);
    v4 = *(_WORD *)(v3 + 92);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 2u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 4u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 5u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 6u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 7u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x800) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 8u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x800) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 88), 9u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 84), 0xAu);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x200) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0xBu);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x20) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 48), 0xDu);
  }
LABEL_26:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 89), 0xCu);
  if ((*(_WORD *)(v3 + 92) & 0x20) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 48), 0xDu);
  return this;
}

uint64_t CMMsl::PrecisionFindingState::hash_value(CMMsl::PrecisionFindingState *this)
{
  __int16 v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  double v15;

  v1 = *((_WORD *)this + 46);
  if ((v1 & 0x40) == 0)
  {
    v2 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_3;
LABEL_36:
    v3 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_6;
LABEL_37:
    v4 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_9;
LABEL_38:
    v5 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_12;
LABEL_39:
    v6 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_15;
LABEL_40:
    v7 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_18;
LABEL_41:
    v8 = 0.0;
    if ((*((_WORD *)this + 46) & 0x100) != 0)
      goto LABEL_21;
LABEL_42:
    v9 = 0.0;
    if ((*((_WORD *)this + 46) & 0x800) != 0)
      goto LABEL_24;
    goto LABEL_43;
  }
  v2 = *((double *)this + 7);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_36;
LABEL_3:
  v3 = *((double *)this + 1);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_37;
LABEL_6:
  v4 = *((double *)this + 2);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_38;
LABEL_9:
  v5 = *((double *)this + 3);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_39;
LABEL_12:
  v6 = *((double *)this + 4);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_40;
LABEL_15:
  v7 = *((double *)this + 5);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v1 & 0x80) == 0)
    goto LABEL_41;
LABEL_18:
  v8 = *((double *)this + 8);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((*((_WORD *)this + 46) & 0x100) == 0)
    goto LABEL_42;
LABEL_21:
  v9 = *((double *)this + 9);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((*((_WORD *)this + 46) & 0x800) != 0)
  {
LABEL_24:
    v10 = *((unsigned __int8 *)this + 88);
    if ((*((_WORD *)this + 46) & 0x400) != 0)
      goto LABEL_25;
    goto LABEL_44;
  }
LABEL_43:
  v10 = 0;
  if ((*((_WORD *)this + 46) & 0x400) != 0)
  {
LABEL_25:
    v11 = *((unsigned int *)this + 21);
    if ((*((_WORD *)this + 46) & 0x200) != 0)
      goto LABEL_26;
LABEL_45:
    v13 = 0;
    if ((*((_WORD *)this + 46) & 0x1000) != 0)
      goto LABEL_29;
    goto LABEL_46;
  }
LABEL_44:
  v11 = 0;
  if ((*((_WORD *)this + 46) & 0x200) == 0)
    goto LABEL_45;
LABEL_26:
  v12 = *((float *)this + 20);
  v13 = LODWORD(v12);
  if (v12 == 0.0)
    v13 = 0;
  if ((*((_WORD *)this + 46) & 0x1000) != 0)
  {
LABEL_29:
    v14 = *((unsigned __int8 *)this + 89);
    if ((v1 & 0x20) != 0)
      goto LABEL_30;
LABEL_47:
    v15 = 0.0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ v10 ^ v11 ^ v13 ^ v14 ^ *(_QWORD *)&v15;
  }
LABEL_46:
  v14 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_47;
LABEL_30:
  v15 = *((double *)this + 6);
  if (v15 == 0.0)
    v15 = 0.0;
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ v10 ^ v11 ^ v13 ^ v14 ^ *(_QWORD *)&v15;
}

void CMMsl::PrecisionFindingVelocityEstimate::~PrecisionFindingVelocityEstimate(CMMsl::PrecisionFindingVelocityEstimate *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::PrecisionFindingVelocityEstimate::PrecisionFindingVelocityEstimate(CMMsl::PrecisionFindingVelocityEstimate *this, const CMMsl::PrecisionFindingVelocityEstimate *a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)this = off_100353A50;
  *((_DWORD *)this + 11) = 0;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 44) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 44) & 0x10) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 7);
    v3 |= 0x10u;
    *((_BYTE *)this + 44) = v3;
    *((_DWORD *)this + 7) = v4;
    v2 = *((_BYTE *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 8);
    v3 |= 0x20u;
    *((_BYTE *)this + 44) = v3;
    *((_DWORD *)this + 8) = v4;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_15;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *((_BYTE *)this + 44) = v3;
  *((_DWORD *)this + 4) = v4;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_16;
  }
LABEL_15:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *((_BYTE *)this + 44) = v3;
  *((_DWORD *)this + 9) = v4;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 4) == 0)
      goto LABEL_11;
    goto LABEL_17;
  }
LABEL_16:
  LODWORD(v4) = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *((_BYTE *)this + 44) = v3;
  *((_DWORD *)this + 10) = v4;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 4) == 0)
  {
LABEL_11:
    if ((v2 & 8) == 0)
      return *(float *)&v4;
    goto LABEL_18;
  }
LABEL_17:
  LODWORD(v4) = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *((_BYTE *)this + 44) = v3;
  *((_DWORD *)this + 5) = v4;
  if ((*((_BYTE *)a2 + 44) & 8) == 0)
    return *(float *)&v4;
LABEL_18:
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  *((_BYTE *)this + 44) = v3 | 8;
  *((_DWORD *)this + 6) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::PrecisionFindingVelocityEstimate::operator=(uint64_t a1, const CMMsl::PrecisionFindingVelocityEstimate *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  int v13;

  if ((const CMMsl::PrecisionFindingVelocityEstimate *)a1 != a2)
  {
    CMMsl::PrecisionFindingVelocityEstimate::PrecisionFindingVelocityEstimate((CMMsl::PrecisionFindingVelocityEstimate *)&v8, a2);
    v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v13;
    v13 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v11;
    v11 = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    v12 = v4;
    v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    v10 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::PrecisionFindingVelocityEstimate *a2, CMMsl::PrecisionFindingVelocityEstimate *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  return result;
}

float CMMsl::PrecisionFindingVelocityEstimate::PrecisionFindingVelocityEstimate(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100353A50;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_100353A50;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::PrecisionFindingVelocityEstimate::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[2];
  __int128 v12;
  uint64_t v13;
  int v14;
  int v15;

  if (a1 != a2)
  {
    v11[0] = off_100353A50;
    v3 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a2 + 44) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a2 + 40);
    v15 = *(_DWORD *)(a1 + 44);
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v11[1] = v6;
    v13 = *(_QWORD *)(a1 + 32);
    v14 = *(_DWORD *)(a1 + 40);
    v7 = *(_OWORD *)(a1 + 16);
    v8 = *(_OWORD *)(a2 + 16);
    v9 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 44) = v3;
    *(_QWORD *)(a1 + 32) = v9;
    *(_DWORD *)(a1 + 40) = v5;
    *(_OWORD *)(a1 + 16) = v8;
    v12 = v7;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

uint64_t CMMsl::PrecisionFindingVelocityEstimate::formatText(CMMsl::PrecisionFindingVelocityEstimate *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "dot", *((float *)this + 4));
    v5 = *((_BYTE *)this + 44);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*((_BYTE *)this + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "noiseVelocityX", *((float *)this + 5));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "noiseVelocityY", *((float *)this + 6));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "speed", *((float *)this + 7));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 1) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "speedUncertainty", *((float *)this + 8));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 1) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
LABEL_16:
    PB::TextFormatter::format(a2, "velocityX", *((float *)this + 9));
    if ((*((_BYTE *)this + 44) & 0x80) == 0)
      return PB::TextFormatter::endObject(a2);
LABEL_17:
    PB::TextFormatter::format(a2, "velocityY", *((float *)this + 10));
    return PB::TextFormatter::endObject(a2);
  }
LABEL_15:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 0x40) != 0)
    goto LABEL_16;
LABEL_8:
  if (v5 < 0)
    goto LABEL_17;
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PrecisionFindingVelocityEstimate::readFrom(CMMsl::PrecisionFindingVelocityEstimate *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 44) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_47;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_50;
        case 2u:
          *((_BYTE *)this + 44) |= 0x10u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_47;
          *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_49;
        case 3u:
          *((_BYTE *)this + 44) |= 0x20u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_47;
          *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_49;
        case 4u:
          *((_BYTE *)this + 44) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_47;
          *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_49;
        case 5u:
          *((_BYTE *)this + 44) |= 0x40u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_47;
          *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_49;
        case 6u:
          *((_BYTE *)this + 44) |= 0x80u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_47;
          *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_49;
        case 7u:
          *((_BYTE *)this + 44) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_47;
          *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_49;
        case 8u:
          *((_BYTE *)this + 44) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          {
LABEL_47:
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_49:
            v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_50:
            *((_QWORD *)a2 + 1) = v2;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PrecisionFindingVelocityEstimate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 44);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(this + 44) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 2u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 3u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 4u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 5u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 4) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 6u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 24), 8u);
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 7u);
  if ((*(_BYTE *)(v3 + 44) & 8) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 24), 8u);
  return this;
}

uint64_t CMMsl::PrecisionFindingVelocityEstimate::hash_value(CMMsl::PrecisionFindingVelocityEstimate *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;

  if ((*((_BYTE *)this + 44) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 44) & 0x10) != 0)
      goto LABEL_3;
LABEL_27:
    v3 = 0;
    if ((*((_BYTE *)this + 44) & 0x20) != 0)
      goto LABEL_6;
LABEL_28:
    v5 = 0;
    if ((*((_BYTE *)this + 44) & 2) != 0)
      goto LABEL_9;
LABEL_29:
    v7 = 0;
    if ((*((_BYTE *)this + 44) & 0x40) != 0)
      goto LABEL_12;
LABEL_30:
    v9 = 0;
    if ((*((_BYTE *)this + 44) & 0x80) != 0)
      goto LABEL_15;
LABEL_31:
    v11 = 0;
    if ((*((_BYTE *)this + 44) & 4) != 0)
      goto LABEL_18;
    goto LABEL_32;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 44) & 0x10) == 0)
    goto LABEL_27;
LABEL_3:
  v2 = *((float *)this + 7);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 44) & 0x20) == 0)
    goto LABEL_28;
LABEL_6:
  v4 = *((float *)this + 8);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((*((_BYTE *)this + 44) & 2) == 0)
    goto LABEL_29;
LABEL_9:
  v6 = *((float *)this + 4);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((*((_BYTE *)this + 44) & 0x40) == 0)
    goto LABEL_30;
LABEL_12:
  v8 = *((float *)this + 9);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  if ((*((_BYTE *)this + 44) & 0x80) == 0)
    goto LABEL_31;
LABEL_15:
  v10 = *((float *)this + 10);
  v11 = LODWORD(v10);
  if (v10 == 0.0)
    v11 = 0;
  if ((*((_BYTE *)this + 44) & 4) != 0)
  {
LABEL_18:
    v12 = *((float *)this + 5);
    v13 = LODWORD(v12);
    if (v12 == 0.0)
      v13 = 0;
    if ((*((_BYTE *)this + 44) & 8) != 0)
      goto LABEL_21;
LABEL_33:
    v15 = 0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15;
  }
LABEL_32:
  v13 = 0;
  if ((*((_BYTE *)this + 44) & 8) == 0)
    goto LABEL_33;
LABEL_21:
  v14 = *((float *)this + 6);
  v15 = LODWORD(v14);
  if (v14 == 0.0)
    v15 = 0;
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15;
}

void CMMsl::PrecisionFindingVerticalState::~PrecisionFindingVerticalState(CMMsl::PrecisionFindingVerticalState *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::PrecisionFindingVerticalState::PrecisionFindingVerticalState(uint64_t this, const CMMsl::PrecisionFindingVerticalState *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;

  *(_QWORD *)this = off_100353A88;
  *(_DWORD *)(this + 60) = 0;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x10) != 0)
  {
    v4 = *((_QWORD *)a2 + 5);
    v3 = 16;
    *(_WORD *)(this + 60) = 16;
    *(_QWORD *)(this + 40) = v4;
    v2 = *((_WORD *)a2 + 30);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *(_WORD *)(this + 60) = v3;
    *(_QWORD *)(this + 16) = v5;
    v2 = *((_WORD *)a2 + 30);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    v6 = *((_QWORD *)a2 + 6);
    v3 |= 0x20u;
    *(_WORD *)(this + 60) = v3;
    *(_QWORD *)(this + 48) = v6;
    v2 = *((_WORD *)a2 + 30);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 60) = v3;
  *(_QWORD *)(this + 32) = v7;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0)
      goto LABEL_10;
    goto LABEL_17;
  }
LABEL_16:
  v8 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 60) = v3;
  *(_QWORD *)(this + 8) = v8;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_18;
  }
LABEL_17:
  v9 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *(_WORD *)(this + 60) = v3;
  *(_QWORD *)(this + 24) = v9;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_19;
  }
LABEL_18:
  v10 = *((_BYTE *)a2 + 58);
  v3 |= 0x100u;
  *(_WORD *)(this + 60) = v3;
  *(_BYTE *)(this + 58) = v10;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0)
      return this;
LABEL_20:
    v12 = *((_BYTE *)a2 + 57);
    *(_WORD *)(this + 60) = v3 | 0x80;
    *(_BYTE *)(this + 57) = v12;
    return this;
  }
LABEL_19:
  v11 = *((_BYTE *)a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(this + 60) = v3;
  *(_BYTE *)(this + 56) = v11;
  if ((*((_WORD *)a2 + 30) & 0x80) != 0)
    goto LABEL_20;
  return this;
}

uint64_t CMMsl::PrecisionFindingVerticalState::operator=(uint64_t a1, const CMMsl::PrecisionFindingVerticalState *a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char v12;
  char v13;
  char v14;
  int v15;

  if ((const CMMsl::PrecisionFindingVerticalState *)a1 != a2)
  {
    CMMsl::PrecisionFindingVerticalState::PrecisionFindingVerticalState((uint64_t)&v8, a2);
    v3 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 60) = v15;
    v15 = v3;
    v4 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v11;
    v11 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v5;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    v10 = v6;
    LOBYTE(v3) = *(_BYTE *)(a1 + 58);
    *(_BYTE *)(a1 + 58) = v14;
    v14 = v3;
    LOBYTE(v3) = *(_BYTE *)(a1 + 56);
    *(_BYTE *)(a1 + 56) = v12;
    v12 = v3;
    LOBYTE(v3) = *(_BYTE *)(a1 + 57);
    *(_BYTE *)(a1 + 57) = v13;
    v13 = v3;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PrecisionFindingVerticalState *a2, CMMsl::PrecisionFindingVerticalState *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  v3 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v6;
  v7 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v7;
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  result = *((double *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((double *)a2 + 3) = result;
  LOBYTE(v3) = *((_BYTE *)this + 58);
  *((_BYTE *)this + 58) = *((_BYTE *)a2 + 58);
  *((_BYTE *)a2 + 58) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 56);
  *((_BYTE *)this + 56) = *((_BYTE *)a2 + 56);
  *((_BYTE *)a2 + 56) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 57);
  *((_BYTE *)this + 57) = *((_BYTE *)a2 + 57);
  *((_BYTE *)a2 + 57) = v3;
  return result;
}

double CMMsl::PrecisionFindingVerticalState::PrecisionFindingVerticalState(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100353A88;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100353A88;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  return result;
}

uint64_t CMMsl::PrecisionFindingVerticalState::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  char v5;
  char v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  void (**v12)(CMMsl::PrecisionFindingVerticalState *__hidden);
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v16;
  char v17;
  char v18;
  int v19;

  if (a1 != a2)
  {
    v12 = off_100353A88;
    v3 = *(_DWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 60) = 0;
    v4 = *(_BYTE *)(a2 + 58);
    v5 = *(_BYTE *)(a2 + 56);
    v6 = *(_BYTE *)(a2 + 57);
    v19 = *(_DWORD *)(a1 + 60);
    v15 = *(_OWORD *)(a1 + 40);
    v7 = *(_OWORD *)(a2 + 8);
    v13 = *(_OWORD *)(a1 + 8);
    v8 = *(_OWORD *)(a1 + 24);
    v9 = *(_OWORD *)(a2 + 24);
    v10 = *(_OWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 60) = v3;
    *(_OWORD *)(a1 + 40) = v10;
    *(_OWORD *)(a1 + 8) = v7;
    *(_OWORD *)(a1 + 24) = v9;
    v14 = v8;
    LOBYTE(v3) = *(_BYTE *)(a1 + 58);
    *(_BYTE *)(a1 + 58) = v4;
    v18 = v3;
    LOBYTE(v3) = *(_BYTE *)(a1 + 56);
    *(_BYTE *)(a1 + 56) = v5;
    v16 = v3;
    LOBYTE(v3) = *(_BYTE *)(a1 + 57);
    *(_BYTE *)(a1 + 57) = v6;
    v17 = v3;
    PB::Base::~Base((PB::Base *)&v12);
  }
  return a1;
}

uint64_t CMMsl::PrecisionFindingVerticalState::formatText(CMMsl::PrecisionFindingVerticalState *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 30);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "fractionAboveThreshold", *((double *)this + 1));
    v5 = *((_WORD *)this + 30);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "horizontalDistance", *((double *)this + 2));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "isAboveBelow", *((_BYTE *)this + 56));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "isAboveBelowMessageShowing", *((_BYTE *)this + 57));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "isConverged", *((_BYTE *)this + 58));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "likelihoodAboveThreshold", *((double *)this + 3));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
LABEL_19:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 5));
    if ((*((_WORD *)this + 30) & 0x20) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_10;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "relativeAltitude", *((double *)this + 4));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x10) != 0)
    goto LABEL_19;
LABEL_9:
  if ((v5 & 0x20) != 0)
LABEL_10:
    PB::TextFormatter::format(a2, "verticalDistance", *((double *)this + 6));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PrecisionFindingVerticalState::readFrom(CMMsl::PrecisionFindingVerticalState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_WORD *)this + 30) |= 0x10u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_43;
          *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_55;
        case 2u:
          *((_WORD *)this + 30) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_43;
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_55;
        case 3u:
          *((_WORD *)this + 30) |= 0x20u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_43;
          *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_55;
        case 4u:
          *((_WORD *)this + 30) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_43;
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_55;
        case 5u:
          *((_WORD *)this + 30) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_43;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_55;
        case 6u:
          *((_WORD *)this + 30) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_55:
            v2 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v2;
          }
          else
          {
LABEL_43:
            *((_BYTE *)a2 + 24) = 1;
          }
          break;
        case 7u:
          *((_WORD *)this + 30) |= 0x100u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 >= *((_QWORD *)a2 + 2))
          {
            v24 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v23 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v24 = v23 != 0;
          }
          *((_BYTE *)this + 58) = v24;
          break;
        case 8u:
          *((_WORD *)this + 30) |= 0x40u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 >= *((_QWORD *)a2 + 2))
          {
            v21 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v21 = v20 != 0;
          }
          *((_BYTE *)this + 56) = v21;
          break;
        case 9u:
          *((_WORD *)this + 30) |= 0x80u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 >= *((_QWORD *)a2 + 2))
          {
            v26 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v25 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v26 = v25 != 0;
          }
          *((_BYTE *)this + 57) = v26;
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PrecisionFindingVerticalState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 60);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 40), 1u);
    v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 3u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 4u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 5u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 6u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 58), 7u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      return this;
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 57), 9u);
  }
LABEL_18:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 56), 8u);
  if ((*(_WORD *)(v3 + 60) & 0x80) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 57), 9u);
  return this;
}

uint64_t CMMsl::PrecisionFindingVerticalState::hash_value(CMMsl::PrecisionFindingVerticalState *this)
{
  __int16 v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *((_WORD *)this + 30);
  if ((v1 & 0x10) == 0)
  {
    v2 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_3;
LABEL_24:
    v3 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_6;
LABEL_25:
    v4 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_9;
LABEL_26:
    v5 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_12;
LABEL_27:
    v6 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_15;
LABEL_28:
    v7 = 0.0;
    if ((*((_WORD *)this + 30) & 0x100) != 0)
      goto LABEL_18;
    goto LABEL_29;
  }
  v2 = *((double *)this + 5);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_24;
LABEL_3:
  v3 = *((double *)this + 2);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_25;
LABEL_6:
  v4 = *((double *)this + 6);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_26;
LABEL_9:
  v5 = *((double *)this + 4);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_27;
LABEL_12:
  v6 = *((double *)this + 1);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_28;
LABEL_15:
  v7 = *((double *)this + 3);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((*((_WORD *)this + 30) & 0x100) != 0)
  {
LABEL_18:
    v8 = *((unsigned __int8 *)this + 58);
    if ((v1 & 0x40) != 0)
      goto LABEL_19;
LABEL_30:
    v9 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_20;
LABEL_31:
    v10 = 0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ v8 ^ v9 ^ v10;
  }
LABEL_29:
  v8 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_30;
LABEL_19:
  v9 = *((unsigned __int8 *)this + 56);
  if ((v1 & 0x80) == 0)
    goto LABEL_31;
LABEL_20:
  v10 = *((unsigned __int8 *)this + 57);
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ v8 ^ v9 ^ v10;
}

void CMMsl::PredictedRelativeDeviceMotion::~PredictedRelativeDeviceMotion(CMMsl::PredictedRelativeDeviceMotion *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::PredictedRelativeDeviceMotion::PredictedRelativeDeviceMotion(CMMsl::PredictedRelativeDeviceMotion *this, const CMMsl::PredictedRelativeDeviceMotion *a2)
{
  __int16 v2;
  __int16 v3;
  double result;
  char v5;

  *(_QWORD *)this = off_100353AC0;
  *((_DWORD *)this + 20) = 0;
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    v3 = 1;
    *((_WORD *)this + 40) = 1;
    *((double *)this + 1) = result;
    v2 = *((_WORD *)a2 + 40);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 3);
    v3 |= 4u;
    *((_WORD *)this + 40) = v3;
    *((double *)this + 3) = result;
    v2 = *((_WORD *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    LODWORD(result) = *((_DWORD *)a2 + 9);
    v3 |= 0x10u;
    *((_WORD *)this + 40) = v3;
    *((_DWORD *)this + 9) = LODWORD(result);
    v2 = *((_WORD *)a2 + 40);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_22;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(result) = *((_DWORD *)a2 + 10);
  v3 |= 0x20u;
  *((_WORD *)this + 40) = v3;
  *((_DWORD *)this + 10) = LODWORD(result);
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  LODWORD(result) = *((_DWORD *)a2 + 11);
  v3 |= 0x40u;
  *((_WORD *)this + 40) = v3;
  *((_DWORD *)this + 11) = LODWORD(result);
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  LODWORD(result) = *((_DWORD *)a2 + 8);
  v3 |= 8u;
  *((_WORD *)this + 40) = v3;
  *((_DWORD *)this + 8) = LODWORD(result);
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  LODWORD(result) = *((_DWORD *)a2 + 13);
  v3 |= 0x100u;
  *((_WORD *)this + 40) = v3;
  *((_DWORD *)this + 13) = LODWORD(result);
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x200) == 0)
  {
LABEL_12:
    if ((v2 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  LODWORD(result) = *((_DWORD *)a2 + 14);
  v3 |= 0x200u;
  *((_WORD *)this + 40) = v3;
  *((_DWORD *)this + 14) = LODWORD(result);
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x400) == 0)
  {
LABEL_13:
    if ((v2 & 0x80) == 0)
      goto LABEL_14;
    goto LABEL_27;
  }
LABEL_26:
  LODWORD(result) = *((_DWORD *)a2 + 15);
  v3 |= 0x400u;
  *((_WORD *)this + 40) = v3;
  *((_DWORD *)this + 15) = LODWORD(result);
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x80) == 0)
  {
LABEL_14:
    if ((v2 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_28;
  }
LABEL_27:
  LODWORD(result) = *((_DWORD *)a2 + 12);
  v3 |= 0x80u;
  *((_WORD *)this + 40) = v3;
  *((_DWORD *)this + 12) = LODWORD(result);
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x800) == 0)
  {
LABEL_15:
    if ((v2 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_29;
  }
LABEL_28:
  LODWORD(result) = *((_DWORD *)a2 + 16);
  v3 |= 0x800u;
  *((_WORD *)this + 40) = v3;
  *((_DWORD *)this + 16) = LODWORD(result);
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x1000) == 0)
  {
LABEL_16:
    if ((v2 & 0x2000) == 0)
      goto LABEL_17;
    goto LABEL_30;
  }
LABEL_29:
  LODWORD(result) = *((_DWORD *)a2 + 17);
  v3 |= 0x1000u;
  *((_WORD *)this + 40) = v3;
  *((_DWORD *)this + 17) = LODWORD(result);
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x2000) == 0)
  {
LABEL_17:
    if ((v2 & 0x4000) == 0)
      goto LABEL_18;
    goto LABEL_31;
  }
LABEL_30:
  LODWORD(result) = *((_DWORD *)a2 + 18);
  v3 |= 0x2000u;
  *((_WORD *)this + 40) = v3;
  *((_DWORD *)this + 18) = LODWORD(result);
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x4000) == 0)
  {
LABEL_18:
    if ((v2 & 2) == 0)
      return result;
LABEL_32:
    result = *((double *)a2 + 2);
    *((_WORD *)this + 40) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
LABEL_31:
  v5 = *((_BYTE *)a2 + 76);
  v3 |= 0x4000u;
  *((_WORD *)this + 40) = v3;
  *((_BYTE *)this + 76) = v5;
  if ((*((_WORD *)a2 + 40) & 2) != 0)
    goto LABEL_32;
  return result;
}

CMMsl *CMMsl::PredictedRelativeDeviceMotion::operator=(CMMsl *a1, const CMMsl::PredictedRelativeDeviceMotion *a2)
{
  CMMsl::PredictedRelativeDeviceMotion *v3;
  _BYTE v5[88];

  if (a1 != a2)
  {
    CMMsl::PredictedRelativeDeviceMotion::PredictedRelativeDeviceMotion((CMMsl::PredictedRelativeDeviceMotion *)v5, a2);
    CMMsl::swap(a1, (CMMsl::PredictedRelativeDeviceMotion *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PredictedRelativeDeviceMotion *a2, CMMsl::PredictedRelativeDeviceMotion *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v3 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  LODWORD(v5) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v5;
  LODWORD(v5) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v5;
  LODWORD(v5) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v5;
  LODWORD(v5) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  LODWORD(v5) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v5;
  LODWORD(v5) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v5;
  LODWORD(v5) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v5;
  LODWORD(v5) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  LODWORD(v5) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v5;
  LODWORD(v5) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v5;
  LODWORD(v5) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v5;
  LOBYTE(v3) = *((_BYTE *)this + 76);
  *((_BYTE *)this + 76) = *((_BYTE *)a2 + 76);
  *((_BYTE *)a2 + 76) = v3;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::PredictedRelativeDeviceMotion::PredictedRelativeDeviceMotion(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100353AC0;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

CMMsl *CMMsl::PredictedRelativeDeviceMotion::operator=(CMMsl *this, uint64_t a2, CMMsl::PredictedRelativeDeviceMotion *a3)
{
  __int128 v4;
  void (**v6)(CMMsl::PredictedRelativeDeviceMotion *__hidden);
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  char v13;
  int v14;

  if (this != (CMMsl *)a2)
  {
    v6 = off_100353AC0;
    v14 = *(_DWORD *)(a2 + 80);
    *(_DWORD *)(a2 + 80) = 0;
    v8 = *(_QWORD *)(a2 + 24);
    v4 = *(_OWORD *)(a2 + 48);
    v9 = *(_OWORD *)(a2 + 32);
    v10 = v4;
    v11 = *(_QWORD *)(a2 + 64);
    v12 = *(_DWORD *)(a2 + 72);
    v13 = *(_BYTE *)(a2 + 76);
    v7 = *(_OWORD *)(a2 + 8);
    CMMsl::swap(this, (CMMsl::PredictedRelativeDeviceMotion *)&v6, a3);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return this;
}

uint64_t CMMsl::PredictedRelativeDeviceMotion::formatText(CMMsl::PredictedRelativeDeviceMotion *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "lastStateTimestamp", *((double *)this + 1));
    v5 = *((_WORD *)this + 40);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_20;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "qStartW", *((float *)this + 8));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "qStartX", *((float *)this + 9));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "qStartY", *((float *)this + 10));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "qStartZ", *((float *)this + 11));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "qStopW", *((float *)this + 12));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "qStopX", *((float *)this + 13));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "qStopY", *((float *)this + 14));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "qStopZ", *((float *)this + 15));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "rBoresightX", *((float *)this + 16));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "rBoresightY", *((float *)this + 17));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 2) == 0)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "rBoresightZ", *((float *)this + 18));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 2) == 0)
  {
LABEL_14:
    if ((v5 & 4) == 0)
      goto LABEL_15;
LABEL_31:
    PB::TextFormatter::format(a2, "targetTimestamp", *((double *)this + 3));
    if ((*((_WORD *)this + 40) & 0x4000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_16;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "srcTimestamp", *((double *)this + 2));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 4) != 0)
    goto LABEL_31;
LABEL_15:
  if ((v5 & 0x4000) != 0)
LABEL_16:
    PB::TextFormatter::format(a2, "useForwardPrediction", *((_BYTE *)this + 76));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PredictedRelativeDeviceMotion::readFrom(CMMsl::PredictedRelativeDeviceMotion *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_WORD *)this + 40) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_68;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_65;
        case 2u:
          *((_WORD *)this + 40) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_68;
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_65;
        case 3u:
          *((_WORD *)this + 40) |= 0x10u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_68;
          *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_72;
        case 4u:
          *((_WORD *)this + 40) |= 0x20u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_68;
          *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_72;
        case 5u:
          *((_WORD *)this + 40) |= 0x40u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_68;
          *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_72;
        case 6u:
          *((_WORD *)this + 40) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_68;
          *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_72;
        case 7u:
          *((_WORD *)this + 40) |= 0x100u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_68;
          *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_72;
        case 8u:
          *((_WORD *)this + 40) |= 0x200u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_68;
          *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_72;
        case 9u:
          *((_WORD *)this + 40) |= 0x400u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_68;
          *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_72;
        case 0xAu:
          *((_WORD *)this + 40) |= 0x80u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_68;
          *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_72;
        case 0xBu:
          *((_WORD *)this + 40) |= 0x800u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_68;
          *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_72;
        case 0xCu:
          *((_WORD *)this + 40) |= 0x1000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_68;
          *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_72;
        case 0xDu:
          *((_WORD *)this + 40) |= 0x2000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_68;
          *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_72:
          v2 = *((_QWORD *)a2 + 1) + 4;
          goto LABEL_73;
        case 0xEu:
          *((_WORD *)this + 40) |= 0x4000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 >= *((_QWORD *)a2 + 2))
          {
            v22 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v21 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v22 = v21 != 0;
          }
          *((_BYTE *)this + 76) = v22;
          break;
        case 0xFu:
          *((_WORD *)this + 40) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          {
LABEL_68:
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_65:
            v2 = *((_QWORD *)a2 + 1) + 8;
LABEL_73:
            *((_QWORD *)a2 + 1) = v2;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PredictedRelativeDeviceMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 80);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_WORD *)(v3 + 80);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 2u);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 3u);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 4u);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 5u);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 6u);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 7u);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x200) == 0)
  {
LABEL_9:
    if ((v4 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 8u);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x400) == 0)
  {
LABEL_10:
    if ((v4 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 9u);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x80) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 0xAu);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 0xBu);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 0xCu);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x2000) == 0)
  {
LABEL_14:
    if ((v4 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0xDu);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x4000) == 0)
  {
LABEL_15:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 16), 0xFu);
  }
LABEL_30:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 76), 0xEu);
  if ((*(_WORD *)(v3 + 80) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16), 0xFu);
  return this;
}

uint64_t CMMsl::PredictedRelativeDeviceMotion::hash_value(CMMsl::PredictedRelativeDeviceMotion *this)
{
  __int16 v1;
  double v2;
  double v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  double v27;

  v1 = *((_WORD *)this + 40);
  if ((v1 & 1) == 0)
  {
    v2 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_3;
LABEL_46:
    v3 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_6;
LABEL_47:
    v5 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_9;
LABEL_48:
    v7 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_12;
LABEL_49:
    v9 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_15;
LABEL_50:
    v11 = 0;
    if ((*((_WORD *)this + 40) & 0x100) != 0)
      goto LABEL_18;
LABEL_51:
    v13 = 0;
    if ((*((_WORD *)this + 40) & 0x200) != 0)
      goto LABEL_21;
LABEL_52:
    v15 = 0;
    if ((*((_WORD *)this + 40) & 0x400) != 0)
      goto LABEL_24;
LABEL_53:
    v17 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_27;
LABEL_54:
    v19 = 0;
    if ((*((_WORD *)this + 40) & 0x800) != 0)
      goto LABEL_30;
LABEL_55:
    v21 = 0;
    if ((*((_WORD *)this + 40) & 0x1000) != 0)
      goto LABEL_33;
LABEL_56:
    v23 = 0;
    if ((*((_WORD *)this + 40) & 0x2000) != 0)
      goto LABEL_36;
LABEL_57:
    v25 = 0;
    if ((*((_WORD *)this + 40) & 0x4000) != 0)
      goto LABEL_39;
    goto LABEL_58;
  }
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_46;
LABEL_3:
  v3 = *((double *)this + 3);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_47;
LABEL_6:
  v4 = *((float *)this + 9);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_48;
LABEL_9:
  v6 = *((float *)this + 10);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_49;
LABEL_12:
  v8 = *((float *)this + 11);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_50;
LABEL_15:
  v10 = *((float *)this + 8);
  v11 = LODWORD(v10);
  if (v10 == 0.0)
    v11 = 0;
  if ((*((_WORD *)this + 40) & 0x100) == 0)
    goto LABEL_51;
LABEL_18:
  v12 = *((float *)this + 13);
  v13 = LODWORD(v12);
  if (v12 == 0.0)
    v13 = 0;
  if ((*((_WORD *)this + 40) & 0x200) == 0)
    goto LABEL_52;
LABEL_21:
  v14 = *((float *)this + 14);
  v15 = LODWORD(v14);
  if (v14 == 0.0)
    v15 = 0;
  if ((*((_WORD *)this + 40) & 0x400) == 0)
    goto LABEL_53;
LABEL_24:
  v16 = *((float *)this + 15);
  v17 = LODWORD(v16);
  if (v16 == 0.0)
    v17 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_54;
LABEL_27:
  v18 = *((float *)this + 12);
  v19 = LODWORD(v18);
  if (v18 == 0.0)
    v19 = 0;
  if ((*((_WORD *)this + 40) & 0x800) == 0)
    goto LABEL_55;
LABEL_30:
  v20 = *((float *)this + 16);
  v21 = LODWORD(v20);
  if (v20 == 0.0)
    v21 = 0;
  if ((*((_WORD *)this + 40) & 0x1000) == 0)
    goto LABEL_56;
LABEL_33:
  v22 = *((float *)this + 17);
  v23 = LODWORD(v22);
  if (v22 == 0.0)
    v23 = 0;
  if ((*((_WORD *)this + 40) & 0x2000) == 0)
    goto LABEL_57;
LABEL_36:
  v24 = *((float *)this + 18);
  v25 = LODWORD(v24);
  if (v24 == 0.0)
    v25 = 0;
  if ((*((_WORD *)this + 40) & 0x4000) != 0)
  {
LABEL_39:
    v26 = *((unsigned __int8 *)this + 76);
    if ((v1 & 2) != 0)
      goto LABEL_40;
LABEL_59:
    v27 = 0.0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v25 ^ v26 ^ *(_QWORD *)&v27;
  }
LABEL_58:
  v26 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_59;
LABEL_40:
  v27 = *((double *)this + 2);
  if (v27 == 0.0)
    v27 = 0.0;
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v25 ^ v26 ^ *(_QWORD *)&v27;
}

void CMMsl::Pressure::~Pressure(CMMsl::Pressure *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::Pressure::Pressure(CMMsl::Pressure *this, const CMMsl::Pressure *a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)this = off_100353AF8;
  *((_DWORD *)this + 6) = 0;
  v2 = *((_BYTE *)a2 + 24);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 24) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_BYTE *)a2 + 24);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 24) & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((_BYTE *)this + 24) = v3;
    *((_DWORD *)this + 4) = v4;
    v2 = *((_BYTE *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 5);
    *((_BYTE *)this + 24) = v3 | 4;
    *((_DWORD *)this + 5) = v4;
  }
  return *(float *)&v4;
}

uint64_t CMMsl::Pressure::operator=(uint64_t a1, uint64_t a2, double a3, float a4, float a5)
{
  char v6;
  char v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  int v13;

  if (a1 != a2)
  {
    v12[0] = off_100353AF8;
    v13 = 0;
    v6 = *(_BYTE *)(a2 + 24);
    if ((v6 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      v7 = 1;
      LOBYTE(v13) = 1;
      if ((v6 & 2) != 0)
      {
LABEL_4:
        a4 = *(float *)(a2 + 16);
        v7 |= 2u;
        LOBYTE(v13) = v7;
        if ((v6 & 4) != 0)
          goto LABEL_8;
        goto LABEL_9;
      }
    }
    else
    {
      v7 = 0;
      if ((*(_BYTE *)(a2 + 24) & 2) != 0)
        goto LABEL_4;
    }
    if ((v6 & 4) != 0)
    {
LABEL_8:
      a5 = *(float *)(a2 + 20);
      LOBYTE(v13) = v7 | 4;
    }
LABEL_9:
    v8 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v13;
    v13 = v8;
    v9 = *(_QWORD *)(a1 + 8);
    v10 = *(_QWORD *)(a1 + 16);
    *(double *)(a1 + 8) = a3;
    *(float *)(a1 + 16) = a4;
    *(float *)(a1 + 20) = a5;
    v12[1] = v9;
    v12[2] = v10;
    PB::Base::~Base((PB::Base *)v12);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::Pressure *a2, CMMsl::Pressure *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  result = *((float *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((float *)a2 + 5) = result;
  return result;
}

float CMMsl::Pressure::Pressure(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100353AF8;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_100353AF8;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

uint64_t CMMsl::Pressure::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  int v8;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v7[0] = off_100353AF8;
    v8 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v3;
    v7[1] = v4;
    v7[2] = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

uint64_t CMMsl::Pressure::formatText(CMMsl::Pressure *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 2) == 0)
  {
    if ((*((_BYTE *)this + 24) & 4) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(a2, "temperature", *((float *)this + 5));
    if ((*((_BYTE *)this + 24) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_4;
  }
  PB::TextFormatter::format(a2, "pressure", *((float *)this + 4));
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 4) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 1) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Pressure::readFrom(CMMsl::Pressure *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
        break;
      if ((_DWORD)v20 == 2)
      {
        *((_BYTE *)this + 24) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_32;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_36:
        v2 = *((_QWORD *)a2 + 1) + 4;
        goto LABEL_37;
      }
      if ((_DWORD)v20 != 1)
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        goto LABEL_38;
      }
      *((_BYTE *)this + 24) |= 1u;
      v2 = *((_QWORD *)a2 + 1);
      if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
      {
LABEL_32:
        *((_BYTE *)a2 + 24) = 1;
        goto LABEL_38;
      }
      *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
      v2 = *((_QWORD *)a2 + 1) + 8;
LABEL_37:
      *((_QWORD *)a2 + 1) = v2;
LABEL_38:
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    *((_BYTE *)this + 24) |= 4u;
    v2 = *((_QWORD *)a2 + 1);
    if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
      goto LABEL_32;
    *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
    goto LABEL_36;
  }
  return v4 == 0;
}

uint64_t CMMsl::Pressure::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 24);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        return this;
      return PB::Writer::write(a2, *(float *)(v3 + 20), 3u);
    }
  }
  else if ((*(_BYTE *)(this + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 2u);
  if ((*(_BYTE *)(v3 + 24) & 4) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 20), 3u);
  return this;
}

uint64_t CMMsl::Pressure::hash_value(CMMsl::Pressure *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;

  if ((*((_BYTE *)this + 24) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 24) & 2) != 0)
    {
LABEL_3:
      v2 = *((float *)this + 4);
      v3 = LODWORD(v2);
      if (v2 == 0.0)
        v3 = 0;
      if ((*((_BYTE *)this + 24) & 4) != 0)
        goto LABEL_6;
LABEL_13:
      v5 = 0;
      return v3 ^ *(_QWORD *)&v1 ^ v5;
    }
  }
  else
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 24) & 2) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((*((_BYTE *)this + 24) & 4) == 0)
    goto LABEL_13;
LABEL_6:
  v4 = *((float *)this + 5);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  return v3 ^ *(_QWORD *)&v1 ^ v5;
}

void CMMsl::PressureCalibration::~PressureCalibration(CMMsl::PressureCalibration *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::PressureCalibration::PressureCalibration(CMMsl::PressureCalibration *this, const CMMsl::PressureCalibration *a2)
{
  char v2;
  char v3;
  float result;

  *(_QWORD *)this = off_100353B30;
  *((_DWORD *)this + 8) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 0x20) != 0)
  {
    result = *((float *)a2 + 7);
    v3 = 32;
    *((_BYTE *)this + 32) = 32;
    *((float *)this + 7) = result;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 6);
    v3 |= 0x10u;
    *((_BYTE *)this + 32) = v3;
    *((float *)this + 6) = result;
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    result = *((float *)a2 + 5);
    v3 |= 8u;
    *((_BYTE *)this + 32) = v3;
    *((float *)this + 5) = result;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  result = *((float *)a2 + 2);
  v3 |= 1u;
  *((_BYTE *)this + 32) = v3;
  *((float *)this + 2) = result;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 2) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0)
      return result;
LABEL_14:
    result = *((float *)a2 + 4);
    *((_BYTE *)this + 32) = v3 | 4;
    *((float *)this + 4) = result;
    return result;
  }
LABEL_13:
  result = *((float *)a2 + 3);
  v3 |= 2u;
  *((_BYTE *)this + 32) = v3;
  *((float *)this + 3) = result;
  if ((*((_BYTE *)a2 + 32) & 4) != 0)
    goto LABEL_14;
  return result;
}

uint64_t CMMsl::PressureCalibration::operator=(uint64_t a1, const CMMsl::PressureCalibration *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  uint64_t v9;
  int v10;

  if ((const CMMsl::PressureCalibration *)a1 != a2)
  {
    CMMsl::PressureCalibration::PressureCalibration((CMMsl::PressureCalibration *)v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::PressureCalibration *a2, CMMsl::PressureCalibration *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  float result;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  v5 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  v6 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v6;
  v7 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v7;
  v8 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v8;
  result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

float CMMsl::PressureCalibration::PressureCalibration(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100353B30;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_100353B30;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::PressureCalibration::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  void (**v8)(CMMsl::PressureCalibration *__hidden);
  __int128 v9;
  uint64_t v10;
  int v11;

  if (a1 != a2)
  {
    v8 = off_100353B30;
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v11 = *(_DWORD *)(a1 + 32);
    v10 = *(_QWORD *)(a1 + 24);
    v4 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a2 + 8);
    v6 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 32) = v3;
    *(_QWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 8) = v5;
    v9 = v4;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::PressureCalibration::formatText(CMMsl::PressureCalibration *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "inertialX", *((float *)this + 2));
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*((_BYTE *)this + 32) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "inertialY", *((float *)this + 3));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "inertialZ", *((float *)this + 4));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(a2, "medTocFactoryTemp", *((float *)this + 6));
    if ((*((_BYTE *)this + 32) & 0x20) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "maxTemp", *((float *)this + 5));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 0x10) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 0x20) != 0)
LABEL_7:
    PB::TextFormatter::format(a2, "medianToc", *((float *)this + 7));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PressureCalibration::readFrom(CMMsl::PressureCalibration *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 32) |= 0x20u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_41;
          *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_43;
        case 2u:
          *((_BYTE *)this + 32) |= 0x10u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_41;
          *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_43;
        case 3u:
          *((_BYTE *)this + 32) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_41;
          *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_43;
        case 4u:
          *((_BYTE *)this + 32) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_41;
          *((_DWORD *)this + 2) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_43;
        case 5u:
          *((_BYTE *)this + 32) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_41;
          *((_DWORD *)this + 3) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_43;
        case 6u:
          *((_BYTE *)this + 32) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_43:
            v2 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v2;
          }
          else
          {
LABEL_41:
            *((_BYTE *)a2 + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PressureCalibration::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 0x20) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 28), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 3u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(float *)(v3 + 8), 4u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 16), 6u);
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 12), 5u);
  if ((*(_BYTE *)(v3 + 32) & 4) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 16), 6u);
  return this;
}

uint64_t CMMsl::PressureCalibration::hash_value(CMMsl::PressureCalibration *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;

  if ((*((_BYTE *)this + 32) & 0x20) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 32) & 0x10) != 0)
      goto LABEL_3;
LABEL_21:
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
      goto LABEL_6;
LABEL_22:
    v5 = 0;
    if ((*((_BYTE *)this + 32) & 1) != 0)
      goto LABEL_9;
LABEL_23:
    v7 = 0;
    if ((*((_BYTE *)this + 32) & 2) != 0)
      goto LABEL_12;
    goto LABEL_24;
  }
  v12 = *((float *)this + 7);
  v1 = LODWORD(v12);
  if (v12 == 0.0)
    v1 = 0;
  if ((*((_BYTE *)this + 32) & 0x10) == 0)
    goto LABEL_21;
LABEL_3:
  v2 = *((float *)this + 6);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 32) & 8) == 0)
    goto LABEL_22;
LABEL_6:
  v4 = *((float *)this + 5);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((*((_BYTE *)this + 32) & 1) == 0)
    goto LABEL_23;
LABEL_9:
  v6 = *((float *)this + 2);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((*((_BYTE *)this + 32) & 2) != 0)
  {
LABEL_12:
    v8 = *((float *)this + 3);
    v9 = LODWORD(v8);
    if (v8 == 0.0)
      v9 = 0;
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_15;
LABEL_25:
    v11 = 0;
    return v3 ^ v1 ^ v5 ^ v7 ^ v9 ^ v11;
  }
LABEL_24:
  v9 = 0;
  if ((*((_BYTE *)this + 32) & 4) == 0)
    goto LABEL_25;
LABEL_15:
  v10 = *((float *)this + 4);
  v11 = LODWORD(v10);
  if (v10 == 0.0)
    v11 = 0;
  return v3 ^ v1 ^ v5 ^ v7 ^ v9 ^ v11;
}

void CMMsl::PressureCompensated::~PressureCompensated(CMMsl::PressureCompensated *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100353B68;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100353B68;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100353B68;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::PressureCompensated::PressureCompensated(_QWORD *this, const CMMsl::PressureCompensated *a2)
{
  *this = off_100353B68;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::PressureCompensated *CMMsl::PressureCompensated::operator=(const CMMsl::PressureCompensated *a1, const CMMsl::PressureCompensated *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::PressureCompensated *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::PressureCompensated::PressureCompensated(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_100353B68;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PressureCompensated *a2, CMMsl::PressureCompensated *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::PressureCompensated::PressureCompensated(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100353B68;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100353B68;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::PressureCompensated::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_100353B68;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::PressureCompensated::formatText(CMMsl::PressureCompensated *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PressureCompensated::readFrom(CMMsl::PressureCompensated *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PressureCompensated::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

CMMsl::Pressure *CMMsl::PressureCompensated::hash_value(CMMsl::PressureCompensated *this)
{
  CMMsl::Pressure *result;

  result = (CMMsl::Pressure *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::Pressure *)CMMsl::Pressure::hash_value(result);
  return result;
}

uint64_t CMMsl::PressureCompensated::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

void CMMsl::PressureFiltered::~PressureFiltered(CMMsl::PressureFiltered *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100353BA0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100353BA0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100353BA0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::PressureFiltered::PressureFiltered(_QWORD *this, const CMMsl::PressureFiltered *a2)
{
  *this = off_100353BA0;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::PressureFiltered *CMMsl::PressureFiltered::operator=(const CMMsl::PressureFiltered *a1, const CMMsl::PressureFiltered *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::PressureFiltered *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::PressureFiltered::PressureFiltered(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_100353BA0;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PressureFiltered *a2, CMMsl::PressureFiltered *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::PressureFiltered::PressureFiltered(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100353BA0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100353BA0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::PressureFiltered::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_100353BA0;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::PressureFiltered::formatText(CMMsl::PressureFiltered *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PressureFiltered::readFrom(CMMsl::PressureFiltered *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PressureFiltered::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

CMMsl::Pressure *CMMsl::PressureFiltered::hash_value(CMMsl::PressureFiltered *this)
{
  CMMsl::Pressure *result;

  result = (CMMsl::Pressure *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::Pressure *)CMMsl::Pressure::hash_value(result);
  return result;
}

uint64_t CMMsl::PressureFiltered::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

void CMMsl::PressureFiltered1HzLowPass::~PressureFiltered1HzLowPass(CMMsl::PressureFiltered1HzLowPass *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_100353BD8;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_100353BD8;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_100353BD8;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::PressureFiltered1HzLowPass::PressureFiltered1HzLowPass(uint64_t this, const CMMsl::PressureFiltered1HzLowPass *a2)
{
  uint64_t v2;

  *(_QWORD *)this = off_100353BD8;
  *(_QWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 0;
  if ((*((_BYTE *)a2 + 24) & 1) != 0)
  {
    v2 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 24) = 1;
    *(_QWORD *)(this + 8) = v2;
  }
  if (*((_QWORD *)a2 + 2))
    operator new();
  return this;
}

uint64_t CMMsl::PressureFiltered1HzLowPass::operator=(uint64_t a1, const CMMsl::PressureFiltered1HzLowPass *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  void (**v7)(CMMsl::PressureFiltered1HzLowPass *__hidden);
  uint64_t v8;
  uint64_t v9;
  int v10;

  if ((const CMMsl::PressureFiltered1HzLowPass *)a1 != a2)
  {
    CMMsl::PressureFiltered1HzLowPass::PressureFiltered1HzLowPass((uint64_t)&v7, a2);
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v9;
    v7 = off_100353BD8;
    v9 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PressureFiltered1HzLowPass *a2, CMMsl::PressureFiltered1HzLowPass *a3)
{
  int v3;
  double result;
  uint64_t v5;

  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  return result;
}

uint64_t CMMsl::PressureFiltered1HzLowPass::PressureFiltered1HzLowPass(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_100353BD8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_100353BD8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::PressureFiltered1HzLowPass::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    v6 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v10[1] = v7;
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v5;
    v10[0] = off_100353BD8;
    v10[2] = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::PressureFiltered1HzLowPass::formatText(CMMsl::PressureFiltered1HzLowPass *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 24) & 1) != 0)
    PB::TextFormatter::format(a2, "iostime", *((double *)this + 1));
  v5 = *((_QWORD *)this + 2);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PressureFiltered1HzLowPass::readFrom(CMMsl::PressureFiltered1HzLowPass *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
        operator new();
      if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 24) |= 1u;
        v21 = *((_QWORD *)a2 + 1);
        if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v21);
          *((_QWORD *)a2 + 1) += 8;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PressureFiltered1HzLowPass::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = this;
  if ((*(_BYTE *)(this + 24) & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
  v4 = *(const PB::Base **)(v3 + 16);
  if (v4)
    return PB::Writer::writeSubmessage(a2, v4, 2u);
  return this;
}

uint64_t CMMsl::PressureFiltered1HzLowPass::hash_value(CMMsl::PressureFiltered1HzLowPass *this)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  BOOL v5;
  uint64_t v6;

  if ((*((_BYTE *)this + 24) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
  }
  else
  {
    v1 = 0.0;
  }
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if ((*(_BYTE *)(v2 + 20) & 1) == 0)
      v3 = 0;
    v4 = *(float *)(v2 + 16);
    v5 = v4 == 0.0 || (*(_BYTE *)(v2 + 20) & 2) == 0;
    v6 = LODWORD(v4);
    if (v5)
      v6 = 0;
    v2 = v6 ^ v3;
  }
  return v2 ^ *(_QWORD *)&v1;
}

uint64_t CMMsl::PressureFiltered1HzLowPass::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 16))
    operator new();
  return this;
}

void CMMsl::PressureFilteredNoTemperature::~PressureFilteredNoTemperature(CMMsl::PressureFilteredNoTemperature *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::PressureFilteredNoTemperature::PressureFilteredNoTemperature(CMMsl::PressureFilteredNoTemperature *this, const CMMsl::PressureFilteredNoTemperature *a2)
{
  char v2;
  uint64_t v3;
  float result;

  *(_QWORD *)this = off_100353C10;
  *((_DWORD *)this + 5) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *((_BYTE *)this + 20) = 1;
    *((_QWORD *)this + 1) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 4);
    *((_BYTE *)this + 20) = v2;
    *((float *)this + 4) = result;
  }
  return result;
}

uint64_t CMMsl::PressureFilteredNoTemperature::operator=(uint64_t a1, uint64_t a2, float a3)
{
  void (**v4)(CMMsl::PressureFilteredNoTemperature *__hidden);
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  int v9;
  _QWORD v11[2];
  int v12;
  int v13;

  if (a1 != a2)
  {
    v4 = off_100353C10;
    v11[0] = off_100353C10;
    v13 = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      v4 = *(void (***)(CMMsl::PressureFilteredNoTemperature *__hidden))(a2 + 8);
      LOBYTE(v13) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        a3 = *(float *)(a2 + 16);
        LOBYTE(v13) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v13;
    v13 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v11[1] = v8;
    v9 = *(_DWORD *)(a1 + 16);
    *(float *)(a1 + 16) = a3;
    v12 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::PressureFilteredNoTemperature *a2, CMMsl::PressureFilteredNoTemperature *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

uint64_t CMMsl::PressureFilteredNoTemperature::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  _QWORD v10[2];
  int v11;
  int v12;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a2 + 16);
    v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    v12 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v10[0] = off_100353C10;
    v10[1] = v7;
    v8 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v5;
    v11 = v8;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::PressureFilteredNoTemperature::formatText(CMMsl::PressureFilteredNoTemperature *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "pressure", *((float *)this + 4));
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PressureFilteredNoTemperature::readFrom(CMMsl::PressureFilteredNoTemperature *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              v25 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_47;
            }
            v30 = v21++;
            v31 = *(_BYTE *)(v22 + v30);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              v25 = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v25 = 0;
LABEL_46:
          v2 = v30 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              v25 = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_QWORD *)this + 1) = v25;
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PressureFilteredNoTemperature::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 16), 2u);
  return this;
}

uint64_t CMMsl::PressureFilteredNoTemperature::hash_value(CMMsl::PressureFilteredNoTemperature *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;

  if ((*((_BYTE *)this + 20) & 1) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v3 = 0;
    return v3 ^ v1;
  }
  v1 = *((_QWORD *)this + 1);
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((float *)this + 4);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  return v3 ^ v1;
}

void CMMsl::PressureGps::~PressureGps(CMMsl::PressureGps *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100353C48;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100353C48;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100353C48;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::PressureGps::PressureGps(_QWORD *this, const CMMsl::PressureGps *a2)
{
  *this = off_100353C48;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::PressureGps *CMMsl::PressureGps::operator=(const CMMsl::PressureGps *a1, const CMMsl::PressureGps *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::PressureGps *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::PressureGps::PressureGps(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_100353C48;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PressureGps *a2, CMMsl::PressureGps *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::PressureGps::PressureGps(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100353C48;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100353C48;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::PressureGps::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_100353C48;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::PressureGps::formatText(CMMsl::PressureGps *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PressureGps::readFrom(CMMsl::PressureGps *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PressureGps::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

CMMsl::Pressure *CMMsl::PressureGps::hash_value(CMMsl::PressureGps *this)
{
  CMMsl::Pressure *result;

  result = (CMMsl::Pressure *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::Pressure *)CMMsl::Pressure::hash_value(result);
  return result;
}

uint64_t CMMsl::PressureGps::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

void CMMsl::PressureOscarEmu::~PressureOscarEmu(CMMsl::PressureOscarEmu *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100353C80;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100353C80;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100353C80;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::PressureOscarEmu::PressureOscarEmu(_QWORD *this, const CMMsl::PressureOscarEmu *a2)
{
  *this = off_100353C80;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::PressureOscarEmu *CMMsl::PressureOscarEmu::operator=(const CMMsl::PressureOscarEmu *a1, const CMMsl::PressureOscarEmu *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::PressureOscarEmu *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::PressureOscarEmu::PressureOscarEmu(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_100353C80;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PressureOscarEmu *a2, CMMsl::PressureOscarEmu *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::PressureOscarEmu::PressureOscarEmu(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100353C80;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100353C80;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::PressureOscarEmu::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_100353C80;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::PressureOscarEmu::formatText(CMMsl::PressureOscarEmu *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PressureOscarEmu::readFrom(CMMsl::PressureOscarEmu *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PressureOscarEmu::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

CMMsl::Pressure *CMMsl::PressureOscarEmu::hash_value(CMMsl::PressureOscarEmu *this)
{
  CMMsl::Pressure *result;

  result = (CMMsl::Pressure *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::Pressure *)CMMsl::Pressure::hash_value(result);
  return result;
}

uint64_t CMMsl::PressureOscarEmu::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

void CMMsl::PropagatedAnchor::~PropagatedAnchor(CMMsl::PropagatedAnchor *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_100353CB8;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::PropagatedAnchor::~PropagatedAnchor(this);
  operator delete();
}

CMMsl::PropagatedAnchor *CMMsl::PropagatedAnchor::PropagatedAnchor(CMMsl::PropagatedAnchor *this, const CMMsl::PropagatedAnchor *a2)
{
  uint64_t v4;

  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = off_100353CB8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  if (*((_QWORD *)a2 + 5))
    operator new();
  if (this != a2)
    sub_100239350((char *)this + 8, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
  if ((*((_BYTE *)a2 + 48) & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 4);
    *((_BYTE *)this + 48) |= 1u;
    *((_QWORD *)this + 4) = v4;
  }
  return this;
}

uint64_t CMMsl::PropagatedAnchor::operator=(uint64_t a1, const CMMsl::PropagatedAnchor *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[8];
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  if ((const CMMsl::PropagatedAnchor *)a1 != a2)
  {
    CMMsl::PropagatedAnchor::PropagatedAnchor((CMMsl::PropagatedAnchor *)v9, a2);
    v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v14;
    v14 = v3;
    v4 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v13;
    v13 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v5;
    v6 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v11;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v12;
    v12 = v7;
    CMMsl::PropagatedAnchor::~PropagatedAnchor((CMMsl::PropagatedAnchor *)v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PropagatedAnchor *a2, CMMsl::PropagatedAnchor *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  result = *((double *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((double *)a2 + 4) = result;
  return result;
}

uint64_t CMMsl::PropagatedAnchor::PropagatedAnchor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = off_100353CB8;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_100239458(v4, (__n128 *)(a2 + 8));
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t CMMsl::PropagatedAnchor::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[8];
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  if (a1 != a2)
  {
    CMMsl::PropagatedAnchor::PropagatedAnchor((uint64_t)v9, a2);
    v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v14;
    v14 = v3;
    v4 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v13;
    v13 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v5;
    v6 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v11;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v12;
    v12 = v7;
    CMMsl::PropagatedAnchor::~PropagatedAnchor((CMMsl::PropagatedAnchor *)v9);
  }
  return a1;
}

uint64_t CMMsl::PropagatedAnchor::formatText(CMMsl::PropagatedAnchor *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  double *v6;
  double *v7;
  double v8;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 48) & 1) != 0)
    PB::TextFormatter::format(a2, "originalTimestamp", *((double *)this + 4));
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "pose");
  v6 = (double *)*((_QWORD *)this + 1);
  v7 = (double *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "velocity", v8);
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::PropagatedAnchor::readFrom(CMMsl::PropagatedAnchor *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  char *v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE v52[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 8);
    v9 = (char *)this + 24;
    while (1)
    {
      v10 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v17 = 0;
        v18 = 0;
        v13 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v19 = v2 + 1;
          v20 = *(_BYTE *)(v10 + v2);
          *((_QWORD *)a2 + 1) = v19;
          v13 |= (unint64_t)(v20 & 0x7F) << v17;
          if ((v20 & 0x80) == 0)
            goto LABEL_21;
          v17 += 7;
          v2 = v19;
          if (v18++ >= 9)
          {
LABEL_20:
            v13 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        if (v12++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v22 = v13 & 7;
      if (v22 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v23 = v13 >> 3;
      if ((v13 >> 3) == 3)
        break;
      if ((_DWORD)v23 == 2)
      {
        if (v22 != 2)
        {
          v40 = (char *)*((_QWORD *)this + 2);
          v39 = *((_QWORD *)this + 3);
          if ((unint64_t)v40 >= v39)
          {
            v42 = (char *)*v8;
            v43 = (v40 - (_BYTE *)*v8) >> 3;
            v44 = v43 + 1;
            if ((unint64_t)(v43 + 1) >> 61)
LABEL_86:
              sub_10000D5F8();
            v45 = v39 - (_QWORD)v42;
            if (v45 >> 2 > v44)
              v44 = v45 >> 2;
            if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
              v46 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v46 = v44;
            if (v46)
            {
              v47 = (char *)sub_10000D60C((uint64_t)v9, v46);
              v42 = (char *)*((_QWORD *)this + 1);
              v40 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v47 = 0;
            }
            v48 = &v47[8 * v43];
            *(_QWORD *)v48 = 0;
            v41 = v48 + 8;
            while (v40 != v42)
            {
              v49 = *((_QWORD *)v40 - 1);
              v40 -= 8;
              *((_QWORD *)v48 - 1) = v49;
              v48 -= 8;
            }
            *((_QWORD *)this + 1) = v48;
            *((_QWORD *)this + 2) = v41;
            *((_QWORD *)this + 3) = &v47[8 * v46];
            if (v42)
              operator delete(v42);
          }
          else
          {
            *(_QWORD *)v40 = 0;
            v41 = v40 + 8;
          }
          *((_QWORD *)this + 2) = v41;
          v50 = *((_QWORD *)a2 + 1);
          if (v50 > 0xFFFFFFFFFFFFFFF7 || v50 + 8 > *((_QWORD *)a2 + 2))
          {
LABEL_75:
            *((_BYTE *)a2 + 24) = 1;
            goto LABEL_78;
          }
          *(v41 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v50);
          goto LABEL_77;
        }
        if ((PB::Reader::placeMark(a2, v52) & 1) != 0)
          return 0;
        v25 = *((_QWORD *)a2 + 1);
        v26 = *((_QWORD *)a2 + 2);
        while (v25 < v26 && !*((_BYTE *)a2 + 24))
        {
          v28 = (char *)*((_QWORD *)this + 2);
          v27 = *((_QWORD *)this + 3);
          if ((unint64_t)v28 >= v27)
          {
            v30 = (char *)*v8;
            v31 = (v28 - (_BYTE *)*v8) >> 3;
            v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) >> 61)
              goto LABEL_86;
            v33 = v27 - (_QWORD)v30;
            if (v33 >> 2 > v32)
              v32 = v33 >> 2;
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
              v34 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v34 = v32;
            if (v34)
            {
              v35 = (char *)sub_10000D60C((uint64_t)v9, v34);
              v30 = (char *)*((_QWORD *)this + 1);
              v28 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v35 = 0;
            }
            v36 = &v35[8 * v31];
            *(_QWORD *)v36 = 0;
            v29 = v36 + 8;
            while (v28 != v30)
            {
              v37 = *((_QWORD *)v28 - 1);
              v28 -= 8;
              *((_QWORD *)v36 - 1) = v37;
              v36 -= 8;
            }
            *((_QWORD *)this + 1) = v36;
            *((_QWORD *)this + 2) = v29;
            *((_QWORD *)this + 3) = &v35[8 * v34];
            if (v30)
              operator delete(v30);
          }
          else
          {
            *(_QWORD *)v28 = 0;
            v29 = v28 + 8;
          }
          *((_QWORD *)this + 2) = v29;
          v38 = *((_QWORD *)a2 + 1);
          if (v38 > 0xFFFFFFFFFFFFFFF7 || v38 + 8 > *((_QWORD *)a2 + 2))
          {
            *((_BYTE *)a2 + 24) = 1;
            break;
          }
          *(v29 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v38);
          v26 = *((_QWORD *)a2 + 2);
          v25 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v25;
        }
        PB::Reader::recallMark(a2, v52);
      }
      else
      {
        if ((_DWORD)v23 == 1)
          operator new();
        if ((PB::Reader::skip(a2, v23, v22, 0) & 1) == 0)
          return 0;
      }
LABEL_78:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    *((_BYTE *)this + 48) |= 1u;
    v24 = *((_QWORD *)a2 + 1);
    if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((_QWORD *)a2 + 2))
      goto LABEL_75;
    *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v24);
LABEL_77:
    *((_QWORD *)a2 + 1) += 8;
    goto LABEL_78;
  }
  return v4 == 0;
}

uint64_t CMMsl::PropagatedAnchor::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  double *v5;
  double *v6;
  double v7;

  v3 = this;
  v4 = *(const PB::Base **)(this + 40);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  v5 = *(double **)(v3 + 8);
  v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7, 2u);
  }
  if ((*(_BYTE *)(v3 + 48) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 32), 3u);
  return this;
}

uint64_t CMMsl::PropagatedAnchor::hash_value(CMMsl::PropagatedAnchor *this)
{
  CMMsl::Pose *v2;
  uint64_t v3;
  uint64_t v4;
  double v5;

  v2 = (CMMsl::Pose *)*((_QWORD *)this + 5);
  if (v2)
    v3 = CMMsl::Pose::hash_value(v2);
  else
    v3 = 0;
  v4 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  if ((*((_BYTE *)this + 48) & 1) != 0)
  {
    v5 = *((double *)this + 4);
    if (v5 == 0.0)
      v5 = 0.0;
  }
  else
  {
    v5 = 0.0;
  }
  return v4 ^ v3 ^ *(_QWORD *)&v5;
}

uint64_t CMMsl::PropagatedAnchor::makePose(uint64_t this)
{
  if (!*(_QWORD *)(this + 40))
    operator new();
  return this;
}

void CMMsl::Prox::~Prox(CMMsl::Prox *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::Prox::Prox(uint64_t this, const CMMsl::Prox *a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)this = off_100353CF0;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::Prox::operator=(uint64_t a1, uint64_t a2, double a3)
{
  int v3;
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;

  if (a1 != a2)
  {
    v11[0] = off_100353CF0;
    HIDWORD(v12) = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      BYTE4(v12) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v3 = *(_DWORD *)(a2 + 16);
        BYTE4(v12) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = HIDWORD(v12);
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_QWORD *)(a1 + 16);
    *(double *)(a1 + 8) = a3;
    *(_DWORD *)(a1 + 16) = v3;
    *(_DWORD *)(a1 + 20) = v7;
    v11[1] = v8;
    v12 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::Prox *a2, CMMsl::Prox *a3)
{
  int v3;
  double result;
  int v5;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  return result;
}

double CMMsl::Prox::Prox(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100353CF0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100353CF0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::Prox::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  if (a1 != a2)
  {
    v8[0] = off_100353CF0;
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    v8[1] = v5;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::Prox::formatText(CMMsl::Prox *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "detectionMask", *((_DWORD *)this + 4));
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Prox::readFrom(CMMsl::Prox *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_47;
            }
            v30 = v21++;
            v31 = *(_BYTE *)(v22 + v30);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v25) = 0;
LABEL_46:
          v2 = v30 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v25;
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::Prox::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 2u);
  return this;
}

uint64_t CMMsl::Prox::hash_value(CMMsl::Prox *this)
{
  double v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0;
    return v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((unsigned int *)this + 4);
  return v2 ^ *(_QWORD *)&v1;
}

void CMMsl::ProxBaselineEstimatorState::~ProxBaselineEstimatorState(CMMsl::ProxBaselineEstimatorState *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::ProxBaselineEstimatorState::ProxBaselineEstimatorState(CMMsl::ProxBaselineEstimatorState *this, const CMMsl::ProxBaselineEstimatorState *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  float result;
  char v6;

  *(_QWORD *)this = off_100353D28;
  *((_DWORD *)this + 22) = 0;
  v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_DWORD *)this + 22) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_DWORD *)a2 + 22);
    if ((v2 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x100) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 11);
    v3 |= 0x100u;
    *((_DWORD *)this + 22) = v3;
    *((float *)this + 11) = result;
    v2 = *((_DWORD *)a2 + 22);
  }
LABEL_6:
  if ((v2 & 0x400) != 0)
  {
    result = *((float *)a2 + 13);
    v3 |= 0x400u;
    *((_DWORD *)this + 22) = v3;
    *((float *)this + 13) = result;
    v2 = *((_DWORD *)a2 + 22);
    if ((v2 & 0x1000) == 0)
    {
LABEL_8:
      if ((v2 & 0x800) == 0)
        goto LABEL_9;
      goto LABEL_26;
    }
  }
  else if ((v2 & 0x1000) == 0)
  {
    goto LABEL_8;
  }
  result = *((float *)a2 + 15);
  v3 |= 0x1000u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 15) = result;
  v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 0x800) == 0)
  {
LABEL_9:
    if ((v2 & 0x10000) == 0)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  result = *((float *)a2 + 14);
  v3 |= 0x800u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 14) = result;
  v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 0x10000) == 0)
  {
LABEL_10:
    if ((v2 & 0x20000) == 0)
      goto LABEL_11;
    goto LABEL_28;
  }
LABEL_27:
  result = *((float *)a2 + 19);
  v3 |= 0x10000u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 19) = result;
  v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 0x20000) == 0)
  {
LABEL_11:
    if ((v2 & 0x40000) == 0)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_28:
  result = *((float *)a2 + 20);
  v3 |= 0x20000u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 20) = result;
  v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 0x40000) == 0)
  {
LABEL_12:
    if ((v2 & 0x4000) == 0)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  v6 = *((_BYTE *)a2 + 84);
  v3 |= 0x40000u;
  *((_DWORD *)this + 22) = v3;
  *((_BYTE *)this + 84) = v6;
  v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 0x4000) == 0)
  {
LABEL_13:
    if ((v2 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_31;
  }
LABEL_30:
  result = *((float *)a2 + 17);
  v3 |= 0x4000u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 17) = result;
  v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 0x2000) == 0)
  {
LABEL_14:
    if ((v2 & 2) == 0)
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_31:
  result = *((float *)a2 + 16);
  v3 |= 0x2000u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 16) = result;
  v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 2) == 0)
  {
LABEL_15:
    if ((v2 & 0x20) == 0)
      goto LABEL_16;
    goto LABEL_33;
  }
LABEL_32:
  result = *((float *)a2 + 4);
  v3 |= 2u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 4) = result;
  v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 0x20) == 0)
  {
LABEL_16:
    if ((v2 & 0x40) == 0)
      goto LABEL_17;
    goto LABEL_34;
  }
LABEL_33:
  result = *((float *)a2 + 8);
  v3 |= 0x20u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 8) = result;
  v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 0x40) == 0)
  {
LABEL_17:
    if ((v2 & 0x80) == 0)
      goto LABEL_18;
    goto LABEL_35;
  }
LABEL_34:
  result = *((float *)a2 + 9);
  v3 |= 0x40u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 9) = result;
  v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 0x80) == 0)
  {
LABEL_18:
    if ((v2 & 4) == 0)
      goto LABEL_19;
    goto LABEL_36;
  }
LABEL_35:
  result = *((float *)a2 + 10);
  v3 |= 0x80u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 10) = result;
  v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 4) == 0)
  {
LABEL_19:
    if ((v2 & 8) == 0)
      goto LABEL_20;
    goto LABEL_37;
  }
LABEL_36:
  result = *((float *)a2 + 5);
  v3 |= 4u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 5) = result;
  v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 8) == 0)
  {
LABEL_20:
    if ((v2 & 0x10) == 0)
      goto LABEL_21;
    goto LABEL_38;
  }
LABEL_37:
  result = *((float *)a2 + 6);
  v3 |= 8u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 6) = result;
  v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 0x10) == 0)
  {
LABEL_21:
    if ((v2 & 0x8000) == 0)
      goto LABEL_22;
    goto LABEL_39;
  }
LABEL_38:
  result = *((float *)a2 + 7);
  v3 |= 0x10u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 7) = result;
  v2 = *((_DWORD *)a2 + 22);
  if ((v2 & 0x8000) == 0)
  {
LABEL_22:
    if ((v2 & 0x200) == 0)
      return result;
LABEL_40:
    result = *((float *)a2 + 12);
    *((_DWORD *)this + 22) = v3 | 0x200;
    *((float *)this + 12) = result;
    return result;
  }
LABEL_39:
  result = *((float *)a2 + 18);
  v3 |= 0x8000u;
  *((_DWORD *)this + 22) = v3;
  *((float *)this + 18) = result;
  if ((*((_DWORD *)a2 + 22) & 0x200) != 0)
    goto LABEL_40;
  return result;
}

CMMsl *CMMsl::ProxBaselineEstimatorState::operator=(CMMsl *a1, const CMMsl::ProxBaselineEstimatorState *a2)
{
  CMMsl::ProxBaselineEstimatorState *v3;
  _BYTE v5[96];

  if (a1 != a2)
  {
    CMMsl::ProxBaselineEstimatorState::ProxBaselineEstimatorState((CMMsl::ProxBaselineEstimatorState *)v5, a2);
    CMMsl::swap(a1, (CMMsl::ProxBaselineEstimatorState *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ProxBaselineEstimatorState *a2, CMMsl::ProxBaselineEstimatorState *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  float result;

  v3 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v5;
  v6 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v6;
  v7 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v7;
  v8 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v8;
  v9 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v9;
  v10 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v10;
  LOBYTE(v4) = *((_BYTE *)this + 84);
  *((_BYTE *)this + 84) = *((_BYTE *)a2 + 84);
  *((_BYTE *)a2 + 84) = v4;
  v11 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v11;
  v12 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v12;
  v13 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v13;
  v14 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v14;
  v15 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v15;
  v16 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v16;
  v17 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v17;
  v18 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v18;
  v19 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v19;
  v20 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v20;
  result = *((float *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((float *)a2 + 12) = result;
  return result;
}

float CMMsl::ProxBaselineEstimatorState::ProxBaselineEstimatorState(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100353D28;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  result = *(float *)(a2 + 48);
  *(float *)(a1 + 48) = result;
  return result;
}

CMMsl *CMMsl::ProxBaselineEstimatorState::operator=(CMMsl *this, uint64_t a2, CMMsl::ProxBaselineEstimatorState *a3)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _QWORD v8[2];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  char v14;
  int v15;

  if (this != (CMMsl *)a2)
  {
    v15 = *(_DWORD *)(a2 + 88);
    *(_DWORD *)(a2 + 88) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v8[0] = off_100353D28;
    v8[1] = v4;
    v13 = *(_DWORD *)(a2 + 80);
    v14 = *(_BYTE *)(a2 + 84);
    v5 = *(_OWORD *)(a2 + 32);
    v9 = *(_OWORD *)(a2 + 16);
    v10 = v5;
    v6 = *(_OWORD *)(a2 + 64);
    v11 = *(_OWORD *)(a2 + 48);
    v12 = v6;
    CMMsl::swap(this, (CMMsl::ProxBaselineEstimatorState *)v8, a3);
    PB::Base::~Base((PB::Base *)v8);
  }
  return this;
}

uint64_t CMMsl::ProxBaselineEstimatorState::formatText(CMMsl::ProxBaselineEstimatorState *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 22);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "baselineError", *((float *)this + 4));
    v5 = *((_DWORD *)this + 22);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_24;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "covariancePostMeasurement00", *((float *)this + 5));
  v5 = *((_DWORD *)this + 22);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "covariancePostMeasurement01", *((float *)this + 6));
  v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "covariancePostMeasurement11", *((float *)this + 7));
  v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "covariancePreMeasurement00", *((float *)this + 8));
  v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "covariancePreMeasurement01", *((float *)this + 9));
  v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "covariancePreMeasurement11", *((float *)this + 10));
  v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "estimate", *((float *)this + 11));
  v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "factoryXTalk", *((float *)this + 12));
  v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "gain", *((float *)this + 13));
  v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "intensity", *((float *)this + 14));
  v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x40000) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "measurement", *((float *)this + 15));
  v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x40000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "possibleObstructed", *((_BYTE *)this + 84));
  v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "proxBufferMax", *((float *)this + 16));
  v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "proxBufferVariance", *((float *)this + 17));
  v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "sensitivityCal", *((float *)this + 18));
  v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0)
      goto LABEL_19;
LABEL_39:
    PB::TextFormatter::format(a2, "temperatureCalError", *((float *)this + 20));
    if ((*((_DWORD *)this + 22) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_20;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "temperature", *((float *)this + 19));
  v5 = *((_DWORD *)this + 22);
  if ((v5 & 0x20000) != 0)
    goto LABEL_39;
LABEL_19:
  if ((v5 & 1) != 0)
LABEL_20:
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ProxBaselineEstimatorState::readFrom(CMMsl::ProxBaselineEstimatorState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  int v27;
  BOOL v28;
  char v29;
  unsigned int v30;
  unint64_t v31;
  char v32;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 22) |= 1u;
              v20 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v21 = *(_QWORD *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v29 = 0;
                v30 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_104;
                  }
                  v31 = v20++;
                  v32 = *(_BYTE *)(v21 + v31);
                  *((_QWORD *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0)
                    break;
                  v29 += 7;
                  v14 = v30++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_103;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v24 = 0;
LABEL_103:
                v2 = v31 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)a2 + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_104;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_104:
              *((_QWORD *)this + 1) = v24;
              goto LABEL_95;
            case 2u:
              *((_DWORD *)this + 22) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_83;
              *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_94;
            case 3u:
              *((_DWORD *)this + 22) |= 0x400u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_83;
              *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_94;
            case 4u:
              *((_DWORD *)this + 22) |= 0x1000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_83;
              *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_94;
            case 5u:
              *((_DWORD *)this + 22) |= 0x800u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_83;
              *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_94;
            case 6u:
              *((_DWORD *)this + 22) |= 0x10000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_83;
              *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_94;
            case 7u:
              *((_DWORD *)this + 22) |= 0x20000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_83;
              *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_94;
            case 8u:
              *((_DWORD *)this + 22) |= 0x40000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v28 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v28 = v27 != 0;
              }
              *((_BYTE *)this + 84) = v28;
              goto LABEL_95;
            case 9u:
              *((_DWORD *)this + 22) |= 0x4000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_83;
              *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_94;
            case 0xAu:
              *((_DWORD *)this + 22) |= 0x2000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_83;
              *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_94;
            case 0xBu:
              *((_DWORD *)this + 22) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_83;
              *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_94;
            case 0xCu:
              *((_DWORD *)this + 22) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_83;
              *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_94;
            case 0xDu:
              *((_DWORD *)this + 22) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_83;
              *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_94;
            case 0xEu:
              *((_DWORD *)this + 22) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_83;
              *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_94;
            case 0xFu:
              *((_DWORD *)this + 22) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_83;
              *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_94;
            case 0x10u:
              *((_DWORD *)this + 22) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_83;
              *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_94;
            case 0x11u:
              *((_DWORD *)this + 22) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_83;
              *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_94;
            case 0x12u:
              *((_DWORD *)this + 22) |= 0x8000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_83;
              *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_94;
            case 0x13u:
              *((_DWORD *)this + 22) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_94:
                v2 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_83:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_95;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
LABEL_95:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::ProxBaselineEstimatorState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 88);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 8), 1u);
    v4 = *(_DWORD *)(v3 + 88);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0)
        goto LABEL_4;
      goto LABEL_23;
    }
  }
  else if ((v4 & 0x100) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 2u);
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 0x1000) == 0)
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 3u);
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x1000) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 4u);
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x10000) == 0)
      goto LABEL_7;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 5u);
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x10000) == 0)
  {
LABEL_7:
    if ((v4 & 0x20000) == 0)
      goto LABEL_8;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 6u);
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x20000) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000) == 0)
      goto LABEL_9;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 7u);
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x40000) == 0)
  {
LABEL_9:
    if ((v4 & 0x4000) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 84), 8u);
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x4000) == 0)
  {
LABEL_10:
    if ((v4 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 9u);
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x2000) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 0xAu);
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 2) == 0)
  {
LABEL_12:
    if ((v4 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 0xBu);
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x20) == 0)
  {
LABEL_13:
    if ((v4 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 0xCu);
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x40) == 0)
  {
LABEL_14:
    if ((v4 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 0xDu);
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x80) == 0)
  {
LABEL_15:
    if ((v4 & 4) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 0xEu);
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 4) == 0)
  {
LABEL_16:
    if ((v4 & 8) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 0xFu);
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 8) == 0)
  {
LABEL_17:
    if ((v4 & 0x10) == 0)
      goto LABEL_18;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 0x10u);
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x10) == 0)
  {
LABEL_18:
    if ((v4 & 0x8000) == 0)
      goto LABEL_19;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 0x11u);
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x8000) == 0)
  {
LABEL_19:
    if ((v4 & 0x200) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 48), 0x13u);
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0x12u);
  if ((*(_DWORD *)(v3 + 88) & 0x200) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 48), 0x13u);
  return this;
}

uint64_t CMMsl::ProxBaselineEstimatorState::hash_value(CMMsl::ProxBaselineEstimatorState *this)
{
  int v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  float v36;
  uint64_t v37;

  v1 = *((_DWORD *)this + 22);
  if ((v1 & 1) == 0)
  {
    v2 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_3;
LABEL_56:
    v4 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_6;
LABEL_57:
    v6 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_9;
LABEL_58:
    v8 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_12;
LABEL_59:
    v10 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_15;
LABEL_60:
    v12 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_18;
LABEL_61:
    v14 = 0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_21;
    goto LABEL_62;
  }
  v2 = *((_QWORD *)this + 1);
  if ((v1 & 0x100) == 0)
    goto LABEL_56;
LABEL_3:
  v3 = *((float *)this + 11);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((v1 & 0x400) == 0)
    goto LABEL_57;
LABEL_6:
  v5 = *((float *)this + 13);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_58;
LABEL_9:
  v7 = *((float *)this + 15);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_59;
LABEL_12:
  v9 = *((float *)this + 14);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_60;
LABEL_15:
  v11 = *((float *)this + 19);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((v1 & 0x20000) == 0)
    goto LABEL_61;
LABEL_18:
  v13 = *((float *)this + 20);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_21:
    v15 = *((unsigned __int8 *)this + 84);
    if ((v1 & 0x4000) != 0)
      goto LABEL_22;
LABEL_63:
    v17 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_25;
LABEL_64:
    v19 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_28;
LABEL_65:
    v21 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_31;
LABEL_66:
    v23 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_34;
LABEL_67:
    v25 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_37;
LABEL_68:
    v27 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_40;
LABEL_69:
    v29 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_43;
LABEL_70:
    v31 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_46;
LABEL_71:
    v33 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_49;
    goto LABEL_72;
  }
LABEL_62:
  v15 = 0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_63;
LABEL_22:
  v16 = *((float *)this + 17);
  v17 = LODWORD(v16);
  if (v16 == 0.0)
    v17 = 0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_64;
LABEL_25:
  v18 = *((float *)this + 16);
  v19 = LODWORD(v18);
  if (v18 == 0.0)
    v19 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_65;
LABEL_28:
  v20 = *((float *)this + 4);
  v21 = LODWORD(v20);
  if (v20 == 0.0)
    v21 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_66;
LABEL_31:
  v22 = *((float *)this + 8);
  v23 = LODWORD(v22);
  if (v22 == 0.0)
    v23 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_67;
LABEL_34:
  v24 = *((float *)this + 9);
  v25 = LODWORD(v24);
  if (v24 == 0.0)
    v25 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_68;
LABEL_37:
  v26 = *((float *)this + 10);
  v27 = LODWORD(v26);
  if (v26 == 0.0)
    v27 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_69;
LABEL_40:
  v28 = *((float *)this + 5);
  v29 = LODWORD(v28);
  if (v28 == 0.0)
    v29 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_70;
LABEL_43:
  v30 = *((float *)this + 6);
  v31 = LODWORD(v30);
  if (v30 == 0.0)
    v31 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_71;
LABEL_46:
  v32 = *((float *)this + 7);
  v33 = LODWORD(v32);
  if (v32 == 0.0)
    v33 = 0;
  if ((v1 & 0x8000) != 0)
  {
LABEL_49:
    v34 = *((float *)this + 18);
    v35 = LODWORD(v34);
    if (v34 == 0.0)
      v35 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_52;
LABEL_73:
    v37 = 0;
    return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v25 ^ v27 ^ v29 ^ v31 ^ v33 ^ v35 ^ v37;
  }
LABEL_72:
  v35 = 0;
  if ((v1 & 0x200) == 0)
    goto LABEL_73;
LABEL_52:
  v36 = *((float *)this + 12);
  v37 = LODWORD(v36);
  if (v36 == 0.0)
    v37 = 0;
  return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v25 ^ v27 ^ v29 ^ v31 ^ v33 ^ v35 ^ v37;
}

void CMMsl::ProxCalibration::~ProxCalibration(CMMsl::ProxCalibration *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_100353D60;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::ProxCalibration::~ProxCalibration(this);
  operator delete();
}

CMMsl::ProxCalibration *CMMsl::ProxCalibration::ProxCalibration(CMMsl::ProxCalibration *this, const CMMsl::ProxCalibration *a2)
{
  char *v4;
  char v5;
  char v6;
  int v7;
  int v8;
  int v9;
  int v11;

  *(_QWORD *)this = off_100353D60;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *((_DWORD *)this + 18) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  v5 = *((_BYTE *)a2 + 72);
  if ((v5 & 2) != 0)
  {
    v7 = *((_DWORD *)a2 + 15);
    v6 = 2;
    *((_BYTE *)this + 72) = 2;
    *((_DWORD *)this + 15) = v7;
    v5 = *((_BYTE *)a2 + 72);
    if ((v5 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((*((_BYTE *)a2 + 72) & 1) != 0)
  {
LABEL_5:
    v8 = *((_DWORD *)a2 + 14);
    v6 |= 1u;
    *((_BYTE *)this + 72) = v6;
    *((_DWORD *)this + 14) = v8;
    v5 = *((_BYTE *)a2 + 72);
  }
LABEL_6:
  if ((v5 & 4) == 0)
  {
    if ((v5 & 8) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
  v11 = *((_DWORD *)a2 + 16);
  v6 |= 4u;
  *((_BYTE *)this + 72) = v6;
  *((_DWORD *)this + 16) = v11;
  if ((*((_BYTE *)a2 + 72) & 8) != 0)
  {
LABEL_8:
    v9 = *((_DWORD *)a2 + 17);
    *((_BYTE *)this + 72) = v6 | 8;
    *((_DWORD *)this + 17) = v9;
  }
LABEL_9:
  if (this != a2)
  {
    sub_100020CE4(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
    sub_100020CE4((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
  }
  return this;
}

uint64_t CMMsl::ProxCalibration::operator=(uint64_t a1, const CMMsl::ProxCalibration *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  if ((const CMMsl::ProxCalibration *)a1 != a2)
  {
    CMMsl::ProxCalibration::ProxCalibration((CMMsl::ProxCalibration *)&v11, a2);
    v3 = v16;
    v4 = *(_QWORD *)(a1 + 56);
    v5 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 56) = v15;
    *(_QWORD *)(a1 + 64) = v3;
    v6 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v17;
    v17 = v6;
    v15 = v4;
    v16 = v5;
    v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    v12 = v7;
    v8 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v13;
    v13 = v8;
    v9 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v14;
    v14 = v9;
    CMMsl::ProxCalibration::~ProxCalibration((CMMsl::ProxCalibration *)&v11);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ProxCalibration *a2, CMMsl::ProxCalibration *a3)
{
  int v3;
  int v4;
  float result;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  v4 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  result = *((float *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((float *)a2 + 14) = result;
  v6 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v6;
  v7 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v7;
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v9;
  v10 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v10;
  v11 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v11;
  v12 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v12;
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v13;
  return result;
}

uint64_t CMMsl::ProxCalibration::ProxCalibration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = off_100353D60;
  v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  sub_100239458(v4, (__n128 *)(a2 + 32));
  return a1;
}

uint64_t CMMsl::ProxCalibration::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  if (a1 != a2)
  {
    CMMsl::ProxCalibration::ProxCalibration((uint64_t)&v11, a2);
    v3 = v16;
    v4 = *(_QWORD *)(a1 + 56);
    v5 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 56) = v15;
    *(_QWORD *)(a1 + 64) = v3;
    v6 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v17;
    v17 = v6;
    v15 = v4;
    v16 = v5;
    v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    v12 = v7;
    v8 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v13;
    v13 = v8;
    v9 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v14;
    v14 = v9;
    CMMsl::ProxCalibration::~ProxCalibration((CMMsl::ProxCalibration *)&v11);
  }
  return a1;
}

uint64_t CMMsl::ProxCalibration::formatText(CMMsl::ProxCalibration *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;
  float *v6;
  float *v7;
  float v8;
  float *v9;
  float *v10;
  float v11;
  char v12;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 72);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "bC150RXAVE", *((float *)this + 14));
    v5 = *((_BYTE *)this + 72);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "gC0RXAVE", *((float *)this + 15));
  v6 = (float *)*((_QWORD *)this + 1);
  v7 = (float *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "ntcRamp", v8);
  }
  v9 = (float *)*((_QWORD *)this + 4);
  v10 = (float *)*((_QWORD *)this + 5);
  while (v9 != v10)
  {
    v11 = *v9++;
    PB::TextFormatter::format(a2, "rxXT", v11);
  }
  v12 = *((_BYTE *)this + 72);
  if ((v12 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "versionPxCL", *((_DWORD *)this + 16));
    v12 = *((_BYTE *)this + 72);
  }
  if ((v12 & 8) != 0)
    PB::TextFormatter::format(a2, "versionPxTC", *((_DWORD *)this + 17));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::ProxCalibration::readFrom(CMMsl::ProxCalibration *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  char *v9;
  void **v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  _DWORD *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  _DWORD *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  int v69;
  unint64_t v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;
  unint64_t v79;
  char *v80;
  _DWORD *v81;
  unint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  int v97;
  char *v98;
  int v99;
  unint64_t v100;
  _BYTE v103[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 32);
    v9 = (char *)this + 48;
    v10 = (void **)((char *)this + 8);
    v11 = (char *)this + 24;
    while (1)
    {
      v12 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 72) |= 2u;
          v25 = *((_QWORD *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_154;
          *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v25);
          goto LABEL_31;
        case 2u:
          *((_BYTE *)this + 72) |= 1u;
          v26 = *((_QWORD *)a2 + 1);
          if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_154;
          *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v26);
LABEL_31:
          *((_QWORD *)a2 + 1) += 4;
          goto LABEL_156;
        case 3u:
          *((_BYTE *)this + 72) |= 4u;
          v27 = *((_QWORD *)a2 + 1);
          v28 = *((_QWORD *)a2 + 2);
          v29 = *(_QWORD *)a2;
          if (v27 <= 0xFFFFFFFFFFFFFFF5 && v27 + 10 <= v28)
          {
            v30 = 0;
            v31 = 0;
            v32 = 0;
            do
            {
              v33 = v27 + 1;
              *((_QWORD *)a2 + 1) = v27 + 1;
              v34 = *(_BYTE *)(v29 + v27);
              v32 |= (unint64_t)(v34 & 0x7F) << v30;
              if ((v34 & 0x80) == 0)
                goto LABEL_134;
              v30 += 7;
              v27 = v33;
              v18 = v31++ > 8;
            }
            while (!v18);
LABEL_100:
            LODWORD(v32) = 0;
            goto LABEL_134;
          }
          v71 = 0;
          v72 = 0;
          v32 = 0;
          if (v28 <= v27)
            v28 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v28 == v27)
            {
              LODWORD(v32) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v73 = v27 + 1;
              v74 = *(_BYTE *)(v29 + v27);
              *((_QWORD *)a2 + 1) = v73;
              v32 |= (unint64_t)(v74 & 0x7F) << v71;
              if (v74 < 0)
              {
                v71 += 7;
                v27 = v73;
                v18 = v72++ > 8;
                if (v18)
                  goto LABEL_100;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v32) = 0;
            }
            break;
          }
LABEL_134:
          *((_DWORD *)this + 16) = v32;
          goto LABEL_156;
        case 4u:
          *((_BYTE *)this + 72) |= 8u;
          v35 = *((_QWORD *)a2 + 1);
          v36 = *((_QWORD *)a2 + 2);
          v37 = *(_QWORD *)a2;
          if (v35 <= 0xFFFFFFFFFFFFFFF5 && v35 + 10 <= v36)
          {
            v38 = 0;
            v39 = 0;
            v40 = 0;
            do
            {
              v41 = v35 + 1;
              *((_QWORD *)a2 + 1) = v35 + 1;
              v42 = *(_BYTE *)(v37 + v35);
              v40 |= (unint64_t)(v42 & 0x7F) << v38;
              if ((v42 & 0x80) == 0)
                goto LABEL_137;
              v38 += 7;
              v35 = v41;
              v18 = v39++ > 8;
            }
            while (!v18);
LABEL_107:
            LODWORD(v40) = 0;
            goto LABEL_137;
          }
          v75 = 0;
          v76 = 0;
          v40 = 0;
          if (v36 <= v35)
            v36 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v36 == v35)
            {
              LODWORD(v40) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v77 = v35 + 1;
              v78 = *(_BYTE *)(v37 + v35);
              *((_QWORD *)a2 + 1) = v77;
              v40 |= (unint64_t)(v78 & 0x7F) << v75;
              if (v78 < 0)
              {
                v75 += 7;
                v35 = v77;
                v18 = v76++ > 8;
                if (v18)
                  goto LABEL_107;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v40) = 0;
            }
            break;
          }
LABEL_137:
          *((_DWORD *)this + 17) = v40;
          goto LABEL_156;
        case 5u:
          if (v24 != 2)
          {
            v80 = (char *)*((_QWORD *)this + 2);
            v79 = *((_QWORD *)this + 3);
            if ((unint64_t)v80 >= v79)
            {
              v84 = (char *)*v10;
              v85 = (v80 - (_BYTE *)*v10) >> 2;
              v86 = v85 + 1;
              if ((unint64_t)(v85 + 1) >> 62)
LABEL_166:
                sub_10000D5F8();
              v87 = v79 - (_QWORD)v84;
              if (v87 >> 1 > v86)
                v86 = v87 >> 1;
              if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL)
                v88 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v88 = v86;
              if (v88)
              {
                v89 = (char *)sub_100020E2C((uint64_t)v11, v88);
                v84 = (char *)*((_QWORD *)this + 1);
                v80 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v89 = 0;
              }
              v96 = &v89[4 * v85];
              *(_DWORD *)v96 = 0;
              v81 = v96 + 4;
              while (v80 != v84)
              {
                v97 = *((_DWORD *)v80 - 1);
                v80 -= 4;
                *((_DWORD *)v96 - 1) = v97;
                v96 -= 4;
              }
              *((_QWORD *)this + 1) = v96;
              *((_QWORD *)this + 2) = v81;
              *((_QWORD *)this + 3) = &v89[4 * v88];
              if (v84)
                operator delete(v84);
            }
            else
            {
              *(_DWORD *)v80 = 0;
              v81 = v80 + 4;
            }
            *((_QWORD *)this + 2) = v81;
            goto LABEL_152;
          }
          if ((PB::Reader::placeMark(a2, v103) & 1) != 0)
            return 0;
          v43 = *((_QWORD *)a2 + 1);
          v44 = *((_QWORD *)a2 + 2);
          while (v43 < v44 && !*((_BYTE *)a2 + 24))
          {
            v46 = (char *)*((_QWORD *)this + 2);
            v45 = *((_QWORD *)this + 3);
            if ((unint64_t)v46 >= v45)
            {
              v48 = (char *)*v10;
              v49 = (v46 - (_BYTE *)*v10) >> 2;
              v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 62)
                goto LABEL_166;
              v51 = v45 - (_QWORD)v48;
              if (v51 >> 1 > v50)
                v50 = v51 >> 1;
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
                v52 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v52 = v50;
              if (v52)
              {
                v53 = (char *)sub_100020E2C((uint64_t)v11, v52);
                v48 = (char *)*((_QWORD *)this + 1);
                v46 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v53 = 0;
              }
              v54 = &v53[4 * v49];
              *(_DWORD *)v54 = 0;
              v47 = v54 + 4;
              while (v46 != v48)
              {
                v55 = *((_DWORD *)v46 - 1);
                v46 -= 4;
                *((_DWORD *)v54 - 1) = v55;
                v54 -= 4;
              }
              *((_QWORD *)this + 1) = v54;
              *((_QWORD *)this + 2) = v47;
              *((_QWORD *)this + 3) = &v53[4 * v52];
              if (v48)
                operator delete(v48);
            }
            else
            {
              *(_DWORD *)v46 = 0;
              v47 = v46 + 4;
            }
            *((_QWORD *)this + 2) = v47;
            v56 = *((_QWORD *)a2 + 1);
            if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_112;
            *(v47 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v56);
            v44 = *((_QWORD *)a2 + 2);
            v43 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v43;
          }
          goto LABEL_113;
        case 6u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark(a2, v103) & 1) != 0)
              return 0;
            v57 = *((_QWORD *)a2 + 1);
            v58 = *((_QWORD *)a2 + 2);
            while (v57 < v58 && !*((_BYTE *)a2 + 24))
            {
              v60 = (char *)*((_QWORD *)this + 5);
              v59 = *((_QWORD *)this + 6);
              if ((unint64_t)v60 >= v59)
              {
                v62 = (char *)*v8;
                v63 = (v60 - (_BYTE *)*v8) >> 2;
                v64 = v63 + 1;
                if ((unint64_t)(v63 + 1) >> 62)
                  goto LABEL_167;
                v65 = v59 - (_QWORD)v62;
                if (v65 >> 1 > v64)
                  v64 = v65 >> 1;
                if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL)
                  v66 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v66 = v64;
                if (v66)
                {
                  v67 = (char *)sub_100020E2C((uint64_t)v9, v66);
                  v62 = (char *)*((_QWORD *)this + 4);
                  v60 = (char *)*((_QWORD *)this + 5);
                }
                else
                {
                  v67 = 0;
                }
                v68 = &v67[4 * v63];
                *(_DWORD *)v68 = 0;
                v61 = v68 + 4;
                while (v60 != v62)
                {
                  v69 = *((_DWORD *)v60 - 1);
                  v60 -= 4;
                  *((_DWORD *)v68 - 1) = v69;
                  v68 -= 4;
                }
                *((_QWORD *)this + 4) = v68;
                *((_QWORD *)this + 5) = v61;
                *((_QWORD *)this + 6) = &v67[4 * v66];
                if (v62)
                  operator delete(v62);
              }
              else
              {
                *(_DWORD *)v60 = 0;
                v61 = v60 + 4;
              }
              *((_QWORD *)this + 5) = v61;
              v70 = *((_QWORD *)a2 + 1);
              if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((_QWORD *)a2 + 2))
              {
LABEL_112:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v61 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v70);
              v58 = *((_QWORD *)a2 + 2);
              v57 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v57;
            }
LABEL_113:
            PB::Reader::recallMark(a2, v103);
          }
          else
          {
            v83 = (char *)*((_QWORD *)this + 5);
            v82 = *((_QWORD *)this + 6);
            if ((unint64_t)v83 >= v82)
            {
              v90 = (char *)*v8;
              v91 = (v83 - (_BYTE *)*v8) >> 2;
              v92 = v91 + 1;
              if ((unint64_t)(v91 + 1) >> 62)
LABEL_167:
                sub_10000D5F8();
              v93 = v82 - (_QWORD)v90;
              if (v93 >> 1 > v92)
                v92 = v93 >> 1;
              if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL)
                v94 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v94 = v92;
              if (v94)
              {
                v95 = (char *)sub_100020E2C((uint64_t)v9, v94);
                v90 = (char *)*((_QWORD *)this + 4);
                v83 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v95 = 0;
              }
              v98 = &v95[4 * v91];
              *(_DWORD *)v98 = 0;
              v81 = v98 + 4;
              while (v83 != v90)
              {
                v99 = *((_DWORD *)v83 - 1);
                v83 -= 4;
                *((_DWORD *)v98 - 1) = v99;
                v98 -= 4;
              }
              *((_QWORD *)this + 4) = v98;
              *((_QWORD *)this + 5) = v81;
              *((_QWORD *)this + 6) = &v95[4 * v94];
              if (v90)
                operator delete(v90);
            }
            else
            {
              *(_DWORD *)v83 = 0;
              v81 = v83 + 4;
            }
            *((_QWORD *)this + 5) = v81;
LABEL_152:
            v100 = *((_QWORD *)a2 + 1);
            if (v100 <= 0xFFFFFFFFFFFFFFFBLL && v100 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v81 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v100);
              *((_QWORD *)a2 + 1) += 4;
            }
            else
            {
LABEL_154:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_156:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v24, 0) & 1) == 0)
            return 0;
          goto LABEL_156;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::ProxCalibration::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;

  v3 = this;
  v4 = *(_BYTE *)(this + 72);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 60), 1u);
    v4 = *(_BYTE *)(v3 + 72);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
LABEL_15:
      this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 64), 3u);
      if ((*(_BYTE *)(v3 + 72) & 8) == 0)
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(this + 72) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 2u);
  v4 = *(_BYTE *)(v3 + 72);
  if ((v4 & 4) != 0)
    goto LABEL_15;
LABEL_4:
  if ((v4 & 8) != 0)
LABEL_5:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 68), 4u);
LABEL_6:
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7, 5u);
  }
  v9 = *(float **)(v3 + 32);
  v8 = *(float **)(v3 + 40);
  while (v9 != v8)
  {
    v10 = *v9++;
    this = PB::Writer::write(a2, v10, 6u);
  }
  return this;
}

uint64_t CMMsl::ProxCalibration::hash_value(CMMsl::ProxCalibration *this)
{
  uint64_t v2;
  float v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;

  if ((*((_BYTE *)this + 72) & 2) == 0)
  {
    v2 = 0;
    if ((*((_BYTE *)this + 72) & 1) != 0)
      goto LABEL_3;
LABEL_11:
    v4 = 0;
    if ((*((_BYTE *)this + 72) & 4) != 0)
      goto LABEL_6;
LABEL_12:
    v5 = 0;
    if ((*((_BYTE *)this + 72) & 8) != 0)
      goto LABEL_7;
LABEL_13:
    v6 = 0;
    goto LABEL_14;
  }
  v7 = *((float *)this + 15);
  v2 = LODWORD(v7);
  if (v7 == 0.0)
    v2 = 0;
  if ((*((_BYTE *)this + 72) & 1) == 0)
    goto LABEL_11;
LABEL_3:
  v3 = *((float *)this + 14);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((*((_BYTE *)this + 72) & 4) == 0)
    goto LABEL_12;
LABEL_6:
  v5 = *((int *)this + 16);
  if ((*((_BYTE *)this + 72) & 8) == 0)
    goto LABEL_13;
LABEL_7:
  v6 = *((int *)this + 17);
LABEL_14:
  v8 = v4 ^ v2 ^ v5 ^ v6 ^ PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  return v8 ^ PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
}

void CMMsl::ProxPDP::~ProxPDP(CMMsl::ProxPDP *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::ProxPDP::ProxPDP(uint64_t this, const CMMsl::ProxPDP *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  char v12;
  char v13;

  *(_QWORD *)this = off_100353D98;
  *(_DWORD *)(this + 48) = 0;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_WORD *)(this + 48) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_WORD *)a2 + 24);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 8) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *(_WORD *)(this + 48) = v3;
    *(_DWORD *)(this + 24) = v5;
    v2 = *((_WORD *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    v6 = *((_DWORD *)a2 + 8);
    v3 |= 0x20u;
    *(_WORD *)(this + 48) = v3;
    *(_DWORD *)(this + 32) = v6;
    v2 = *((_WORD *)a2 + 24);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0)
        goto LABEL_9;
      goto LABEL_17;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 28) = v7;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 2) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_18;
  }
LABEL_17:
  v8 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 16) = v8;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 4) == 0)
      goto LABEL_11;
    goto LABEL_19;
  }
LABEL_18:
  v9 = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 36) = v9;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 4) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_20;
  }
LABEL_19:
  v10 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 20) = v10;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_21;
  }
LABEL_20:
  v11 = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 40) = v11;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x100) == 0)
      return this;
LABEL_22:
    v13 = *((_BYTE *)a2 + 44);
    *(_WORD *)(this + 48) = v3 | 0x100;
    *(_BYTE *)(this + 44) = v13;
    return this;
  }
LABEL_21:
  v12 = *((_BYTE *)a2 + 45);
  v3 |= 0x200u;
  *(_WORD *)(this + 48) = v3;
  *(_BYTE *)(this + 45) = v12;
  if ((*((_WORD *)a2 + 24) & 0x100) != 0)
    goto LABEL_22;
  return this;
}

uint64_t CMMsl::ProxPDP::operator=(uint64_t a1, const CMMsl::ProxPDP *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  int v7;
  _BYTE v9[8];
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  char v14;
  char v15;
  int v16;

  if ((const CMMsl::ProxPDP *)a1 != a2)
  {
    CMMsl::ProxPDP::ProxPDP((uint64_t)v9, a2);
    v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v16;
    v16 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v10;
    v10 = v4;
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v12;
    v12 = v5;
    v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v11;
    v11 = v6;
    v7 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v13;
    v13 = v7;
    LOBYTE(v4) = *(_BYTE *)(a1 + 45);
    *(_BYTE *)(a1 + 45) = v15;
    v15 = v4;
    LOBYTE(v4) = *(_BYTE *)(a1 + 44);
    *(_BYTE *)(a1 + 44) = v14;
    v14 = v4;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ProxPDP *a2, CMMsl::ProxPDP *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  float result;

  v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  v6 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6;
  v7 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v7;
  v8 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v8;
  v9 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v9;
  v10 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v10;
  result = *((float *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((float *)a2 + 10) = result;
  LOBYTE(v4) = *((_BYTE *)this + 45);
  *((_BYTE *)this + 45) = *((_BYTE *)a2 + 45);
  *((_BYTE *)a2 + 45) = v4;
  LOBYTE(v4) = *((_BYTE *)this + 44);
  *((_BYTE *)this + 44) = *((_BYTE *)a2 + 44);
  *((_BYTE *)a2 + 44) = v4;
  return result;
}

float CMMsl::ProxPDP::ProxPDP(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100353D98;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 40);
  *(float *)(a1 + 40) = result;
  *(_BYTE *)(a1 + 45) = *(_BYTE *)(a2 + 45);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  return result;
}

uint64_t CMMsl::ProxPDP::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  char v6;
  char v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v13[2];
  __int128 v14;
  uint64_t v15;
  int v16;
  char v17;
  char v18;
  int v19;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 48) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a2 + 40);
    v6 = *(_BYTE *)(a2 + 45);
    v7 = *(_BYTE *)(a2 + 44);
    v19 = *(_DWORD *)(a1 + 48);
    v8 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v13[0] = off_100353D98;
    v13[1] = v8;
    v15 = *(_QWORD *)(a1 + 32);
    v9 = *(_OWORD *)(a1 + 16);
    v10 = *(_OWORD *)(a2 + 16);
    v11 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 48) = v3;
    *(_QWORD *)(a1 + 32) = v11;
    *(_OWORD *)(a1 + 16) = v10;
    v14 = v9;
    LODWORD(v9) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v5;
    v16 = v9;
    LOBYTE(v3) = *(_BYTE *)(a1 + 45);
    *(_BYTE *)(a1 + 45) = v6;
    v18 = v3;
    LOBYTE(v3) = *(_BYTE *)(a1 + 44);
    *(_BYTE *)(a1 + 44) = v7;
    v17 = v3;
    PB::Base::~Base((PB::Base *)v13);
  }
  return a1;
}

uint64_t CMMsl::ProxPDP::formatText(CMMsl::ProxPDP *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 24);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "ambient", *((float *)this + 4));
    v5 = *((_WORD *)this + 24);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "baselineConfidence", *((float *)this + 5));
  v5 = *((_WORD *)this + 24);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "intensity", *((float *)this + 6));
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "intensityBaselineDelta", *((float *)this + 7));
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "intensityCalDelta", *((float *)this + 8));
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "pocketFlag", *((_BYTE *)this + 44));
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "pocketProbability", *((float *)this + 9));
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
LABEL_21:
    PB::TextFormatter::format(a2, "scanFlags", *((_BYTE *)this + 45));
    if ((*((_WORD *)this + 24) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_11;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "rxNtcC", *((float *)this + 10));
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x200) != 0)
    goto LABEL_21;
LABEL_10:
  if ((v5 & 1) != 0)
LABEL_11:
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ProxPDP::readFrom(CMMsl::ProxPDP *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  char v31;
  unsigned int v32;
  unint64_t v33;
  char v34;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 24) |= 1u;
              v20 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v21 = *(_QWORD *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v31 = 0;
                v32 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_73;
                  }
                  v33 = v20++;
                  v34 = *(_BYTE *)(v21 + v33);
                  *((_QWORD *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v34 & 0x7F) << v31;
                  if ((v34 & 0x80) == 0)
                    break;
                  v31 += 7;
                  v14 = v32++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_72;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v24 = 0;
LABEL_72:
                v2 = v33 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)a2 + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_73;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_73:
              *((_QWORD *)this + 1) = v24;
              goto LABEL_74;
            case 2u:
              *((_WORD *)this + 24) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_51;
              *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_68;
            case 3u:
              *((_WORD *)this + 24) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_51;
              *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_68;
            case 4u:
              *((_WORD *)this + 24) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_51;
              *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_68;
            case 5u:
              *((_WORD *)this + 24) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_51;
              *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_68;
            case 6u:
              *((_WORD *)this + 24) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_51;
              *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_68;
            case 7u:
              *((_WORD *)this + 24) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_51;
              *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_68;
            case 8u:
              *((_WORD *)this + 24) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_68:
                v2 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_51:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_74;
            case 9u:
              *((_WORD *)this + 24) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v28 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v28 = v27 != 0;
              }
              *((_BYTE *)this + 45) = v28;
              goto LABEL_74;
            case 0xAu:
              *((_WORD *)this + 24) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v30 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v30 = v29 != 0;
              }
              *((_BYTE *)this + 44) = v30;
              goto LABEL_74;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
LABEL_74:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::ProxPDP::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 48);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 8), 1u);
    v4 = *(_WORD *)(v3 + 48);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 2u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 3u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 4u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 5u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 4) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 6u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 7u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 8u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0)
      return this;
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 44), 0xAu);
  }
LABEL_20:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 45), 9u);
  if ((*(_WORD *)(v3 + 48) & 0x100) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 44), 0xAu);
  return this;
}

uint64_t CMMsl::ProxPDP::hash_value(CMMsl::ProxPDP *this)
{
  __int16 v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *((_WORD *)this + 24);
  if ((v1 & 1) == 0)
  {
    v2 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_3;
LABEL_27:
    v4 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_6;
LABEL_28:
    v6 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_9;
LABEL_29:
    v8 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_12;
LABEL_30:
    v10 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_15;
LABEL_31:
    v12 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_18;
LABEL_32:
    v14 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_21;
LABEL_33:
    v16 = 0;
    if ((*((_WORD *)this + 24) & 0x200) != 0)
      goto LABEL_24;
LABEL_34:
    v17 = 0;
    if ((*((_WORD *)this + 24) & 0x100) != 0)
      goto LABEL_25;
LABEL_35:
    v18 = 0;
    return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v17 ^ v18;
  }
  v2 = *((_QWORD *)this + 1);
  if ((v1 & 8) == 0)
    goto LABEL_27;
LABEL_3:
  v3 = *((float *)this + 6);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_28;
LABEL_6:
  v5 = *((float *)this + 8);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_29;
LABEL_9:
  v7 = *((float *)this + 7);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_30;
LABEL_12:
  v9 = *((float *)this + 4);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_31;
LABEL_15:
  v11 = *((float *)this + 9);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_32;
LABEL_18:
  v13 = *((float *)this + 5);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_33;
LABEL_21:
  v15 = *((float *)this + 10);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((*((_WORD *)this + 24) & 0x200) == 0)
    goto LABEL_34;
LABEL_24:
  v17 = *((unsigned __int8 *)this + 45);
  if ((*((_WORD *)this + 24) & 0x100) == 0)
    goto LABEL_35;
LABEL_25:
  v18 = *((unsigned __int8 *)this + 44);
  return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v17 ^ v18;
}

void CMMsl::RawAudio::~RawAudio(CMMsl::RawAudio *this)
{
  void *v2;

  *(_QWORD *)this = off_100353DD0;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::RawAudio::~RawAudio(this);
  operator delete();
}

CMMsl::RawAudio *CMMsl::RawAudio::RawAudio(CMMsl::RawAudio *this, const CMMsl::RawAudio *a2)
{
  char *v3;

  *(_QWORD *)this = off_100353DD0;
  *((_QWORD *)this + 1) = 0;
  v3 = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (this != a2)
    sub_100020CE4(v3, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  return this;
}

uint64_t CMMsl::RawAudio::operator=(uint64_t a1, const CMMsl::RawAudio *a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  if ((const CMMsl::RawAudio *)a1 != a2)
  {
    CMMsl::RawAudio::RawAudio((CMMsl::RawAudio *)&v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v4;
    CMMsl::RawAudio::~RawAudio((CMMsl::RawAudio *)&v6);
  }
  return a1;
}

_QWORD *CMMsl::swap(_QWORD *this, CMMsl::RawAudio *a2, CMMsl::RawAudio *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  return this;
}

_QWORD *CMMsl::RawAudio::RawAudio(_QWORD *a1, uint64_t a2)
{
  *a1 = off_100353DD0;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  sub_100239458((uint64_t)(a1 + 1), (__n128 *)(a2 + 8));
  return a1;
}

{
  *a1 = off_100353DD0;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  sub_100239458((uint64_t)(a1 + 1), (__n128 *)(a2 + 8));
  return a1;
}

uint64_t CMMsl::RawAudio::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  void (**v8)(CMMsl::RawAudio *__hidden);
  __int128 v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v8 = off_100353DD0;
    v3 = *(_QWORD *)(a2 + 24);
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v4;
    v9 = v5;
    v6 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v3;
    v10 = v6;
    CMMsl::RawAudio::~RawAudio((CMMsl::RawAudio *)&v8);
  }
  return a1;
}

uint64_t CMMsl::RawAudio::formatText(CMMsl::RawAudio *this, PB::TextFormatter *a2, const char *a3)
{
  int *v5;
  int *v6;
  int v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (int *)*((_QWORD *)this + 1);
  v6 = (int *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "volts", v7);
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::RawAudio::readFrom(CMMsl::RawAudio *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  _QWORD *v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  int v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  BOOL v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  unint64_t v46;
  char *v47;
  _DWORD *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char v60;
  unsigned int v61;
  unint64_t v63;
  char v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  _BYTE v70[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 8);
    v9 = (_QWORD *)((char *)this + 24);
    while (1)
    {
      v10 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v35 = v12++ > 8;
        if (v35)
          goto LABEL_20;
      }
LABEL_21:
      v21 = v13 & 7;
      if (v21 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v13 >> 3) == 1)
      {
        if (v21 == 2)
        {
          if ((PB::Reader::placeMark(a2, v70) & 1) != 0)
            return 0;
          if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
          {
            v22 = (char *)*((_QWORD *)this + 2);
            do
            {
              if ((unint64_t)v22 >= *v9)
              {
                v23 = (char *)*v8;
                v24 = (v22 - (_BYTE *)*v8) >> 2;
                v25 = v24 + 1;
                if ((unint64_t)(v24 + 1) >> 62)
                  goto LABEL_118;
                v26 = *v9 - (_QWORD)v23;
                if (v26 >> 1 > v25)
                  v25 = v26 >> 1;
                if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
                  v27 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v27 = v25;
                if (v27)
                {
                  v28 = (char *)sub_100020E2C((uint64_t)v9, v27);
                  v23 = (char *)*((_QWORD *)this + 1);
                  v22 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v28 = 0;
                }
                v29 = &v28[4 * v24];
                *(_DWORD *)v29 = 0;
                v30 = v29 + 4;
                while (v22 != v23)
                {
                  v31 = *((_DWORD *)v22 - 1);
                  v22 -= 4;
                  *((_DWORD *)v29 - 1) = v31;
                  v29 -= 4;
                }
                *((_QWORD *)this + 1) = v29;
                *((_QWORD *)this + 2) = v30;
                *((_QWORD *)this + 3) = &v28[4 * v27];
                if (v23)
                  operator delete(v23);
                v22 = v30;
              }
              else
              {
                *(_DWORD *)v22 = 0;
                v22 += 4;
              }
              *((_QWORD *)this + 2) = v22;
              v33 = *((_QWORD *)a2 + 1);
              v32 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              v35 = v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v32;
              if (!v35)
              {
                v41 = 0;
                v42 = 0;
                v43 = 0;
                while (1)
                {
                  v44 = v33 + 1;
                  *((_QWORD *)a2 + 1) = v33 + 1;
                  v45 = *(_BYTE *)(v34 + v33);
                  v43 |= (unint64_t)(v45 & 0x7F) << v41;
                  if ((v45 & 0x80) == 0)
                    goto LABEL_65;
                  v41 += 7;
                  v33 = v44;
                  v35 = v42++ > 8;
                  if (v35)
                  {
                    LODWORD(v43) = 0;
                    goto LABEL_65;
                  }
                }
              }
              v36 = 0;
              v37 = 0;
              v43 = 0;
              if (v32 <= v33)
                v38 = *((_QWORD *)a2 + 1);
              else
                v38 = *((_QWORD *)a2 + 2);
              while (1)
              {
                if (v38 == v33)
                {
                  *((_BYTE *)a2 + 24) = 1;
                  *((_DWORD *)v22 - 1) = 0;
                  goto LABEL_81;
                }
                v39 = v33++;
                v40 = *(_BYTE *)(v34 + v39);
                *((_QWORD *)a2 + 1) = v33;
                v43 |= (unint64_t)(v40 & 0x7F) << v36;
                if ((v40 & 0x80) == 0)
                  break;
                v36 += 7;
                v35 = v37++ > 8;
                if (v35)
                {
                  LODWORD(v43) = 0;
                  goto LABEL_64;
                }
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v43) = 0;
LABEL_64:
              v44 = v39 + 1;
LABEL_65:
              *((_DWORD *)v22 - 1) = v43;
            }
            while (v44 < v32 && !*((_BYTE *)a2 + 24));
          }
LABEL_81:
          PB::Reader::recallMark(a2, v70);
        }
        else
        {
          v47 = (char *)*((_QWORD *)this + 2);
          v46 = *((_QWORD *)this + 3);
          if ((unint64_t)v47 >= v46)
          {
            v49 = (char *)*v8;
            v50 = (v47 - (_BYTE *)*v8) >> 2;
            v51 = v50 + 1;
            if ((unint64_t)(v50 + 1) >> 62)
LABEL_118:
              sub_10000D5F8();
            v52 = v46 - (_QWORD)v49;
            if (v52 >> 1 > v51)
              v51 = v52 >> 1;
            if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL)
              v53 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v53 = v51;
            if (v53)
            {
              v54 = (char *)sub_100020E2C((uint64_t)v9, v53);
              v49 = (char *)*((_QWORD *)this + 1);
              v47 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v54 = 0;
            }
            v55 = &v54[4 * v50];
            *(_DWORD *)v55 = 0;
            v48 = v55 + 4;
            while (v47 != v49)
            {
              v56 = *((_DWORD *)v47 - 1);
              v47 -= 4;
              *((_DWORD *)v55 - 1) = v56;
              v55 -= 4;
            }
            *((_QWORD *)this + 1) = v55;
            *((_QWORD *)this + 2) = v48;
            *((_QWORD *)this + 3) = &v54[4 * v53];
            if (v49)
              operator delete(v49);
          }
          else
          {
            *(_DWORD *)v47 = 0;
            v48 = v47 + 4;
          }
          *((_QWORD *)this + 2) = v48;
          v57 = *((_QWORD *)a2 + 1);
          v58 = *((_QWORD *)a2 + 2);
          v59 = *(_QWORD *)a2;
          v60 = 0;
          v61 = 0;
          if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v58)
          {
            v65 = 0;
            if (v58 <= v57)
              v58 = *((_QWORD *)a2 + 1);
            while (1)
            {
              if (v58 == v57)
              {
                LODWORD(v65) = 0;
                *((_BYTE *)a2 + 24) = 1;
                goto LABEL_107;
              }
              v63 = v57 + 1;
              v64 = *(_BYTE *)(v59 + v57);
              *((_QWORD *)a2 + 1) = v63;
              v65 |= (unint64_t)(v64 & 0x7F) << v60;
              if ((v64 & 0x80) == 0)
                break;
              v60 += 7;
              v57 = v63;
              v35 = v61++ > 8;
              if (v35)
              {
LABEL_103:
                LODWORD(v65) = 0;
                goto LABEL_107;
              }
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v65) = 0;
          }
          else
          {
            v65 = 0;
            while (1)
            {
              v66 = v57 + 1;
              *((_QWORD *)a2 + 1) = v57 + 1;
              v67 = *(_BYTE *)(v59 + v57);
              v65 |= (unint64_t)(v67 & 0x7F) << v60;
              if ((v67 & 0x80) == 0)
                break;
              v60 += 7;
              v57 = v66;
              v35 = v61++ > 8;
              if (v35)
                goto LABEL_103;
            }
          }
LABEL_107:
          *(v48 - 1) = v65;
        }
      }
      else if ((PB::Reader::skip(a2, v13 >> 3, v21, 0) & 1) == 0)
      {
        return 0;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)a2 + 1) = v18;
      v13 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::RawAudio::writeTo(uint64_t this, PB::Writer *a2)
{
  int *v2;
  int *i;
  int v5;

  v2 = *(int **)(this + 8);
  for (i = *(int **)(this + 16); v2 != i; this = PB::Writer::writeVarInt(a2, v5, 1u))
    v5 = *v2++;
  return this;
}

uint64_t CMMsl::RawAudio::hash_value(CMMsl::RawAudio *this)
{
  return PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
}

void CMMsl::RelDMInSystemConfig::~RelDMInSystemConfig(CMMsl::RelDMInSystemConfig *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_100353E08;
  v4 = *((_QWORD *)this + 1);
  v2 = (_QWORD *)((char *)this + 8);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_100011294((uint64_t)v2, v3);
  PB::Base::~Base(this);
}

{
  CMMsl::RelDMInSystemConfig::~RelDMInSystemConfig(this);
  operator delete();
}

uint64_t CMMsl::RelDMInSystemConfig::RelDMInSystemConfig(uint64_t this, const CMMsl::RelDMInSystemConfig *a2)
{
  uint64_t v2;

  *(_QWORD *)this = off_100353E08;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  if ((*((_BYTE *)a2 + 24) & 1) != 0)
  {
    v2 = *((_QWORD *)a2 + 2);
    *(_BYTE *)(this + 24) |= 1u;
    *(_QWORD *)(this + 16) = v2;
  }
  return this;
}

uint64_t CMMsl::RelDMInSystemConfig::operator=(uint64_t a1, const CMMsl::RelDMInSystemConfig *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  if ((const CMMsl::RelDMInSystemConfig *)a1 != a2)
  {
    CMMsl::RelDMInSystemConfig::RelDMInSystemConfig((uint64_t)&v7, a2);
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v9;
    v9 = v5;
    CMMsl::RelDMInSystemConfig::~RelDMInSystemConfig((CMMsl::RelDMInSystemConfig *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RelDMInSystemConfig *a2, CMMsl::RelDMInSystemConfig *a3)
{
  int v3;
  uint64_t v4;
  double result;

  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

uint64_t CMMsl::RelDMInSystemConfig::RelDMInSystemConfig(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = off_100353E08;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v6 = *v4;
  *v4 = v5;
  if (v6)
    sub_100011294((uint64_t)v4, v6);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t CMMsl::RelDMInSystemConfig::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  if (a1 != a2)
  {
    CMMsl::RelDMInSystemConfig::RelDMInSystemConfig((uint64_t)&v7, a2);
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v9;
    v9 = v5;
    CMMsl::RelDMInSystemConfig::~RelDMInSystemConfig((CMMsl::RelDMInSystemConfig *)&v7);
  }
  return a1;
}

uint64_t CMMsl::RelDMInSystemConfig::formatText(CMMsl::RelDMInSystemConfig *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format(a2, "name");
  if ((*((_BYTE *)this + 24) & 1) != 0)
    PB::TextFormatter::format(a2, "value", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RelDMInSystemConfig::readFrom(CMMsl::RelDMInSystemConfig *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 24) |= 1u;
        v21 = *((_QWORD *)a2 + 1);
        if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v21);
          *((_QWORD *)a2 + 1) += 8;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
        if ((_DWORD)v20 == 1)
          operator new();
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::RelDMInSystemConfig::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = this;
  v4 = *(_QWORD *)(this + 8);
  if (v4)
    this = PB::Writer::write(a2, v4, 1);
  if ((*(_BYTE *)(v3 + 24) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
  return this;
}

unint64_t CMMsl::RelDMInSystemConfig::hash_value(CMMsl::RelDMInSystemConfig *this)
{
  uint64_t v2;
  unint64_t v3;
  double v4;
  char v6;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    v3 = sub_1000112DC((uint64_t)&v6, v2);
  else
    v3 = 0;
  if ((*((_BYTE *)this + 24) & 1) != 0)
  {
    v4 = *((double *)this + 2);
    if (v4 == 0.0)
      v4 = 0.0;
  }
  else
  {
    v4 = 0.0;
  }
  return *(_QWORD *)&v4 ^ v3;
}

void CMMsl::RelativeDeviceMotionComplexTransition::~RelativeDeviceMotionComplexTransition(CMMsl::RelativeDeviceMotionComplexTransition *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::RelativeDeviceMotionComplexTransition::RelativeDeviceMotionComplexTransition(uint64_t this, const CMMsl::RelativeDeviceMotionComplexTransition *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  char v37;
  int v38;
  int v39;
  char v40;
  char v41;
  int v42;
  int v43;
  int v44;
  char v45;
  char v46;
  char v47;
  int v48;
  int v49;
  int v50;
  int v51;
  char v52;
  char v53;

  *(_QWORD *)this = off_100353E40;
  *(_QWORD *)(this + 188) = 0;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_QWORD *)(this + 188) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *(_QWORD *)((char *)a2 + 188);
    if ((v2 & 0x800000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x800000) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 26);
    v3 |= 0x800000uLL;
    *(_QWORD *)(this + 188) = v3;
    *(_DWORD *)(this + 104) = v5;
    v2 = *(_QWORD *)((char *)a2 + 188);
  }
LABEL_6:
  if ((v2 & 0x1000000) != 0)
  {
    v6 = *((_DWORD *)a2 + 27);
    v3 |= 0x1000000uLL;
    *(_QWORD *)(this + 188) = v3;
    *(_DWORD *)(this + 108) = v6;
    v2 = *(_QWORD *)((char *)a2 + 188);
    if ((v2 & 0x2000000) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_57;
    }
  }
  else if ((v2 & 0x2000000) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 28);
  v3 |= 0x2000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 112) = v7;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_58;
  }
LABEL_57:
  v8 = *((_DWORD *)a2 + 6);
  v3 |= 8uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 24) = v8;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0)
      goto LABEL_11;
    goto LABEL_59;
  }
LABEL_58:
  v9 = *((_DWORD *)a2 + 7);
  v3 |= 0x10uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 28) = v9;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x20) == 0)
  {
LABEL_11:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_12;
    goto LABEL_60;
  }
LABEL_59:
  v10 = *((_DWORD *)a2 + 8);
  v3 |= 0x20uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 32) = v10;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_61;
  }
LABEL_60:
  v11 = *((_DWORD *)a2 + 33);
  v3 |= 0x40000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 132) = v11;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x200000) == 0)
      goto LABEL_14;
    goto LABEL_62;
  }
LABEL_61:
  v12 = *((_DWORD *)a2 + 12);
  v3 |= 0x200uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 48) = v12;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x200000) == 0)
  {
LABEL_14:
    if ((v2 & 2) == 0)
      goto LABEL_15;
    goto LABEL_63;
  }
LABEL_62:
  v13 = *((_DWORD *)a2 + 24);
  v3 |= 0x200000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 96) = v13;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 2) == 0)
  {
LABEL_15:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_16;
    goto LABEL_64;
  }
LABEL_63:
  v14 = *((_DWORD *)a2 + 4);
  v3 |= 2uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 16) = v14;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_16:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_17;
    goto LABEL_65;
  }
LABEL_64:
  v15 = *((_DWORD *)a2 + 29);
  v3 |= 0x4000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 116) = v15;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_18;
    goto LABEL_66;
  }
LABEL_65:
  v16 = *((_DWORD *)a2 + 30);
  v3 |= 0x8000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 120) = v16;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x40) == 0)
      goto LABEL_19;
    goto LABEL_67;
  }
LABEL_66:
  v17 = *((_DWORD *)a2 + 31);
  v3 |= 0x10000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 124) = v17;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x40) == 0)
  {
LABEL_19:
    if ((v2 & 0x80) == 0)
      goto LABEL_20;
    goto LABEL_68;
  }
LABEL_67:
  v18 = *((_DWORD *)a2 + 9);
  v3 |= 0x40uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 36) = v18;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x80) == 0)
  {
LABEL_20:
    if ((v2 & 0x100) == 0)
      goto LABEL_21;
    goto LABEL_69;
  }
LABEL_68:
  v19 = *((_DWORD *)a2 + 10);
  v3 |= 0x80uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 40) = v19;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x100) == 0)
  {
LABEL_21:
    if ((v2 & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_70;
  }
LABEL_69:
  v20 = *((_DWORD *)a2 + 11);
  v3 |= 0x100uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 44) = v20;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v2 & 0x400) == 0)
      goto LABEL_23;
    goto LABEL_71;
  }
LABEL_70:
  v21 = *((_DWORD *)a2 + 34);
  v3 |= 0x80000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 136) = v21;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x400) == 0)
  {
LABEL_23:
    if ((v2 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_72;
  }
LABEL_71:
  v22 = *((_DWORD *)a2 + 13);
  v3 |= 0x400uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 52) = v22;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x400000) == 0)
  {
LABEL_24:
    if ((v2 & 4) == 0)
      goto LABEL_25;
    goto LABEL_73;
  }
LABEL_72:
  v23 = *((_DWORD *)a2 + 25);
  v3 |= 0x400000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 100) = v23;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 4) == 0)
  {
LABEL_25:
    if ((v2 & 0x400000000) == 0)
      goto LABEL_26;
    goto LABEL_74;
  }
LABEL_73:
  v24 = *((_DWORD *)a2 + 5);
  v3 |= 4uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 20) = v24;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_26:
    if ((v2 & 0x4000) == 0)
      goto LABEL_27;
    goto LABEL_75;
  }
LABEL_74:
  v25 = *((_DWORD *)a2 + 37);
  v3 |= 0x400000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 148) = v25;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x4000) == 0)
  {
LABEL_27:
    if ((v2 & 0x2000000000) == 0)
      goto LABEL_28;
    goto LABEL_76;
  }
LABEL_75:
  v26 = *((_DWORD *)a2 + 17);
  v3 |= 0x4000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 68) = v26;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x2000000000) == 0)
  {
LABEL_28:
    if ((v2 & 0x20000) == 0)
      goto LABEL_29;
    goto LABEL_77;
  }
LABEL_76:
  v27 = *((_DWORD *)a2 + 40);
  v3 |= 0x2000000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 160) = v27;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x20000) == 0)
  {
LABEL_29:
    if ((v2 & 0x800000000) == 0)
      goto LABEL_30;
    goto LABEL_78;
  }
LABEL_77:
  v28 = *((_DWORD *)a2 + 20);
  v3 |= 0x20000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 80) = v28;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_30:
    if ((v2 & 0x8000) == 0)
      goto LABEL_31;
    goto LABEL_79;
  }
LABEL_78:
  v29 = *((_DWORD *)a2 + 38);
  v3 |= 0x800000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 152) = v29;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x8000) == 0)
  {
LABEL_31:
    if ((v2 & 0x4000000000) == 0)
      goto LABEL_32;
    goto LABEL_80;
  }
LABEL_79:
  v30 = *((_DWORD *)a2 + 18);
  v3 |= 0x8000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 72) = v30;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x4000000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x40000) == 0)
      goto LABEL_33;
    goto LABEL_81;
  }
LABEL_80:
  v31 = *((_DWORD *)a2 + 41);
  v3 |= 0x4000000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 164) = v31;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x40000) == 0)
  {
LABEL_33:
    if ((v2 & 0x1000000000) == 0)
      goto LABEL_34;
    goto LABEL_82;
  }
LABEL_81:
  v32 = *((_DWORD *)a2 + 21);
  v3 |= 0x40000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 84) = v32;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x1000000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x10000) == 0)
      goto LABEL_35;
    goto LABEL_83;
  }
LABEL_82:
  v33 = *((_DWORD *)a2 + 39);
  v3 |= 0x1000000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 156) = v33;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x10000) == 0)
  {
LABEL_35:
    if ((v2 & 0x8000000000) == 0)
      goto LABEL_36;
    goto LABEL_84;
  }
LABEL_83:
  v34 = *((_DWORD *)a2 + 19);
  v3 |= 0x10000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 76) = v34;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x8000000000) == 0)
  {
LABEL_36:
    if ((v2 & 0x80000) == 0)
      goto LABEL_37;
    goto LABEL_85;
  }
LABEL_84:
  v35 = *((_DWORD *)a2 + 42);
  v3 |= 0x8000000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 168) = v35;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x80000) == 0)
  {
LABEL_37:
    if ((v2 & 0x200000000000) == 0)
      goto LABEL_38;
    goto LABEL_86;
  }
LABEL_85:
  v36 = *((_DWORD *)a2 + 22);
  v3 |= 0x80000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 88) = v36;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x200000000000) == 0)
  {
LABEL_38:
    if ((v2 & 0x800) == 0)
      goto LABEL_39;
    goto LABEL_87;
  }
LABEL_86:
  v37 = *((_BYTE *)a2 + 183);
  v3 |= 0x200000000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_BYTE *)(this + 183) = v37;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x800) == 0)
  {
LABEL_39:
    if ((v2 & 0x1000) == 0)
      goto LABEL_40;
    goto LABEL_88;
  }
LABEL_87:
  v38 = *((_DWORD *)a2 + 14);
  v3 |= 0x800uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 56) = v38;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x1000) == 0)
  {
LABEL_40:
    if ((v2 & 0x100000000000) == 0)
      goto LABEL_41;
    goto LABEL_89;
  }
LABEL_88:
  v39 = *((_DWORD *)a2 + 15);
  v3 |= 0x1000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 60) = v39;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x100000000000) == 0)
  {
LABEL_41:
    if ((v2 & 0x400000000000) == 0)
      goto LABEL_42;
    goto LABEL_90;
  }
LABEL_89:
  v40 = *((_BYTE *)a2 + 182);
  v3 |= 0x100000000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_BYTE *)(this + 182) = v40;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x400000000000) == 0)
  {
LABEL_42:
    if ((v2 & 0x2000) == 0)
      goto LABEL_43;
    goto LABEL_91;
  }
LABEL_90:
  v41 = *((_BYTE *)a2 + 184);
  v3 |= 0x400000000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_BYTE *)(this + 184) = v41;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x2000) == 0)
  {
LABEL_43:
    if ((v2 & 0x100000000) == 0)
      goto LABEL_44;
    goto LABEL_92;
  }
LABEL_91:
  v42 = *((_DWORD *)a2 + 16);
  v3 |= 0x2000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 64) = v42;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_44:
    if ((v2 & 0x200000000) == 0)
      goto LABEL_45;
    goto LABEL_93;
  }
LABEL_92:
  v43 = *((_DWORD *)a2 + 35);
  v3 |= (unint64_t)&_mh_execute_header;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 140) = v43;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_45:
    if ((v2 & 0x1000000000000) == 0)
      goto LABEL_46;
    goto LABEL_94;
  }
LABEL_93:
  v44 = *((_DWORD *)a2 + 36);
  v3 |= 0x200000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 144) = v44;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x1000000000000) == 0)
  {
LABEL_46:
    if ((v2 & 0x80000000000) == 0)
      goto LABEL_47;
    goto LABEL_95;
  }
LABEL_94:
  v45 = *((_BYTE *)a2 + 186);
  v3 |= 0x1000000000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_BYTE *)(this + 186) = v45;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x80000000000) == 0)
  {
LABEL_47:
    if ((v2 & 0x40000000000) == 0)
      goto LABEL_48;
    goto LABEL_96;
  }
LABEL_95:
  v46 = *((_BYTE *)a2 + 181);
  v3 |= 0x80000000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_BYTE *)(this + 181) = v46;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x40000000000) == 0)
  {
LABEL_48:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_49;
    goto LABEL_97;
  }
LABEL_96:
  v47 = *((_BYTE *)a2 + 180);
  v3 |= 0x40000000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_BYTE *)(this + 180) = v47;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_49:
    if ((v2 & 0x20000000000) == 0)
      goto LABEL_50;
    goto LABEL_98;
  }
LABEL_97:
  v48 = *((_DWORD *)a2 + 32);
  v3 |= 0x20000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 128) = v48;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x20000000000) == 0)
  {
LABEL_50:
    if ((v2 & 0x10000000000) == 0)
      goto LABEL_51;
    goto LABEL_99;
  }
LABEL_98:
  v49 = *((_DWORD *)a2 + 44);
  v3 |= 0x20000000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 176) = v49;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x10000000000) == 0)
  {
LABEL_51:
    if ((v2 & 0x100000) == 0)
      goto LABEL_52;
    goto LABEL_100;
  }
LABEL_99:
  v50 = *((_DWORD *)a2 + 43);
  v3 |= 0x10000000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 172) = v50;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x100000) == 0)
  {
LABEL_52:
    if ((v2 & 0x800000000000) == 0)
      goto LABEL_53;
    goto LABEL_101;
  }
LABEL_100:
  v51 = *((_DWORD *)a2 + 23);
  v3 |= 0x100000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 92) = v51;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x800000000000) == 0)
  {
LABEL_53:
    if ((v2 & 0x2000000000000) == 0)
      return this;
LABEL_102:
    v53 = *((_BYTE *)a2 + 187);
    *(_QWORD *)(this + 188) = v3 | 0x2000000000000;
    *(_BYTE *)(this + 187) = v53;
    return this;
  }
LABEL_101:
  v52 = *((_BYTE *)a2 + 185);
  v3 |= 0x800000000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_BYTE *)(this + 185) = v52;
  if ((*(_QWORD *)((_BYTE *)a2 + 188) & 0x2000000000000) != 0)
    goto LABEL_102;
  return this;
}

CMMsl *CMMsl::RelativeDeviceMotionComplexTransition::operator=(CMMsl *a1, const CMMsl::RelativeDeviceMotionComplexTransition *a2)
{
  CMMsl::RelativeDeviceMotionComplexTransition *v3;
  _BYTE v5[200];

  if (a1 != a2)
  {
    CMMsl::RelativeDeviceMotionComplexTransition::RelativeDeviceMotionComplexTransition((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RelativeDeviceMotionComplexTransition *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::RelativeDeviceMotionComplexTransition *a2, CMMsl::RelativeDeviceMotionComplexTransition *a3)
{
  uint64_t v3;
  uint64_t v4;
  float result;

  v3 = *(_QWORD *)((char *)this + 188);
  *(_QWORD *)((char *)this + 188) = *(_QWORD *)((char *)a2 + 188);
  *(_QWORD *)((char *)a2 + 188) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LODWORD(v4) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v4;
  LODWORD(v4) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v4;
  LODWORD(v4) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v4;
  LODWORD(v4) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v4;
  LODWORD(v4) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v4;
  LODWORD(v4) = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v4;
  LODWORD(v4) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v4;
  LODWORD(v4) = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v4;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  LODWORD(v4) = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v4;
  LODWORD(v4) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  LODWORD(v4) = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v4;
  LODWORD(v4) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v4;
  LODWORD(v4) = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  LOBYTE(v3) = *((_BYTE *)this + 183);
  *((_BYTE *)this + 183) = *((_BYTE *)a2 + 183);
  *((_BYTE *)a2 + 183) = v3;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  LOBYTE(v3) = *((_BYTE *)this + 182);
  *((_BYTE *)this + 182) = *((_BYTE *)a2 + 182);
  *((_BYTE *)a2 + 182) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 184);
  *((_BYTE *)this + 184) = *((_BYTE *)a2 + 184);
  *((_BYTE *)a2 + 184) = v3;
  LODWORD(v3) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  LODWORD(v4) = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v4;
  LODWORD(v4) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v4;
  LOBYTE(v3) = *((_BYTE *)this + 186);
  *((_BYTE *)this + 186) = *((_BYTE *)a2 + 186);
  *((_BYTE *)a2 + 186) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 181);
  *((_BYTE *)this + 181) = *((_BYTE *)a2 + 181);
  *((_BYTE *)a2 + 181) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 180);
  *((_BYTE *)this + 180) = *((_BYTE *)a2 + 180);
  *((_BYTE *)a2 + 180) = v3;
  LODWORD(v4) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v4;
  LODWORD(v4) = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v4;
  result = *((float *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((float *)a2 + 43) = result;
  LODWORD(v3) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 185);
  *((_BYTE *)this + 185) = *((_BYTE *)a2 + 185);
  *((_BYTE *)a2 + 185) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 187);
  *((_BYTE *)this + 187) = *((_BYTE *)a2 + 187);
  *((_BYTE *)a2 + 187) = v3;
  return result;
}

float CMMsl::RelativeDeviceMotionComplexTransition::RelativeDeviceMotionComplexTransition(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100353E40;
  *(_QWORD *)(a1 + 188) = *(_QWORD *)(a2 + 188);
  *(_QWORD *)(a2 + 188) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 183) = *(_BYTE *)(a2 + 183);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 182) = *(_BYTE *)(a2 + 182);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 186) = *(_BYTE *)(a2 + 186);
  *(_BYTE *)(a1 + 181) = *(_BYTE *)(a2 + 181);
  *(_BYTE *)(a1 + 180) = *(_BYTE *)(a2 + 180);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  result = *(float *)(a2 + 172);
  *(float *)(a1 + 172) = result;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_BYTE *)(a1 + 185) = *(_BYTE *)(a2 + 185);
  *(_BYTE *)(a1 + 187) = *(_BYTE *)(a2 + 187);
  return result;
}

CMMsl *CMMsl::RelativeDeviceMotionComplexTransition::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::RelativeDeviceMotionComplexTransition *v3;
  _BYTE v5[200];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::RelativeDeviceMotionComplexTransition::RelativeDeviceMotionComplexTransition((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RelativeDeviceMotionComplexTransition *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::RelativeDeviceMotionComplexTransition::formatText(CMMsl::RelativeDeviceMotionComplexTransition *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "auxHorizontalRotation", *((float *)this + 4));
    v5 = *(_QWORD *)((char *)this + 188);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_55;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "auxHorizontalTranslation", *((float *)this + 5));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "auxOmegaInertial_X", *((float *)this + 6));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "auxOmegaInertial_Y", *((float *)this + 7));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "auxOmegaInertial_Z", *((float *)this + 8));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "auxUserAccelInertial_X", *((float *)this + 9));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "auxUserAccelInertial_Y", *((float *)this + 10));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "auxUserAccelInertial_Z", *((float *)this + 11));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "auxVerticalRotation", *((float *)this + 12));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x40000000000) == 0)
      goto LABEL_12;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "auxVerticalTranslation", *((float *)this + 13));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x40000000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "blockHeadTurnFalsePositive", *((_BYTE *)this + 180));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "bodyTurnDetectionVerticalRotationSrc", *((float *)this + 14));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "bodyTurnMaximaBaseline", *((float *)this + 15));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x80000000000) == 0)
      goto LABEL_16;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "counterBodyTurnAboveBaseline", *((_DWORD *)this + 16));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x80000000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x4000) == 0)
      goto LABEL_17;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "hasRecentHeadTurn", *((_BYTE *)this + 181));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x4000) == 0)
  {
LABEL_17:
    if ((v5 & 0x8000) == 0)
      goto LABEL_18;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "horizontalRotationSimilarity", *((float *)this + 17));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x8000) == 0)
  {
LABEL_18:
    if ((v5 & 0x10000) == 0)
      goto LABEL_19;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "horizontalRotationSimilarityBaseline", *((float *)this + 18));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x10000) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000) == 0)
      goto LABEL_20;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "horizontalRotationSimilarityThreshold", *((float *)this + 19));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x20000) == 0)
  {
LABEL_20:
    if ((v5 & 0x40000) == 0)
      goto LABEL_21;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "horizontalTranslationSimilarity", *((float *)this + 20));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x40000) == 0)
  {
LABEL_21:
    if ((v5 & 0x80000) == 0)
      goto LABEL_22;
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "horizontalTranslationSimilarityBaseline", *((float *)this + 21));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x80000) == 0)
  {
LABEL_22:
    if ((v5 & 0x100000000000) == 0)
      goto LABEL_23;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "horizontalTranslationSimilarityThreshold", *((float *)this + 22));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x100000000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x200000000000) == 0)
      goto LABEL_24;
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(a2, "inBodyTurn", *((_BYTE *)this + 182));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x200000000000) == 0)
  {
LABEL_24:
    if ((v5 & 0x400000000000) == 0)
      goto LABEL_25;
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(a2, "inComplexTransitionState", *((_BYTE *)this + 183));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x400000000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x100000) == 0)
      goto LABEL_26;
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(a2, "inStrongBodyTurn", *((_BYTE *)this + 184));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x100000) == 0)
  {
LABEL_26:
    if ((v5 & 0x800000000000) == 0)
      goto LABEL_27;
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(a2, "longBodyTurnCounter", *((_DWORD *)this + 23));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x800000000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x1000000000000) == 0)
      goto LABEL_28;
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(a2, "longBodyTurnState", *((_BYTE *)this + 185));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x1000000000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x200000) == 0)
      goto LABEL_29;
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(a2, "overrideHeadTurn", *((_BYTE *)this + 186));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x200000) == 0)
  {
LABEL_29:
    if ((v5 & 0x400000) == 0)
      goto LABEL_30;
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(a2, "srcHorizontalRotation", *((float *)this + 24));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x400000) == 0)
  {
LABEL_30:
    if ((v5 & 0x800000) == 0)
      goto LABEL_31;
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(a2, "srcHorizontalTranslation", *((float *)this + 25));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x800000) == 0)
  {
LABEL_31:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_32;
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(a2, "srcOmegaInertial_X", *((float *)this + 26));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_33;
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(a2, "srcOmegaInertial_Y", *((float *)this + 27));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_34;
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(a2, "srcOmegaInertial_Z", *((float *)this + 28));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_35;
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(a2, "srcUserAccelInertial_X", *((float *)this + 29));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_36;
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(a2, "srcUserAccelInertial_Y", *((float *)this + 30));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_37;
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(a2, "srcUserAccelInertial_Z", *((float *)this + 31));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_38;
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(a2, "srcVertToHrzRotRatio", *((float *)this + 32));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_38:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(a2, "srcVerticalRotation", *((float *)this + 33));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_39:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_40;
    goto LABEL_91;
  }
LABEL_90:
  PB::TextFormatter::format(a2, "srcVerticalTranslation", *((float *)this + 34));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_40:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_41;
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(a2, "srcYawRotationExtremaBuffer", *((float *)this + 35));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_41:
    if ((v5 & 1) == 0)
      goto LABEL_42;
    goto LABEL_93;
  }
LABEL_92:
  PB::TextFormatter::format(a2, "srcYawRotationMaximaBaseline", *((float *)this + 36));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 1) == 0)
  {
LABEL_42:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_43;
    goto LABEL_94;
  }
LABEL_93:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_43:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_44;
    goto LABEL_95;
  }
LABEL_94:
  PB::TextFormatter::format(a2, "verticalRotationSimilarity", *((float *)this + 37));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_44:
    if ((v5 & 0x1000000000) == 0)
      goto LABEL_45;
    goto LABEL_96;
  }
LABEL_95:
  PB::TextFormatter::format(a2, "verticalRotationSimilarityBaseline", *((float *)this + 38));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x1000000000) == 0)
  {
LABEL_45:
    if ((v5 & 0x2000000000) == 0)
      goto LABEL_46;
    goto LABEL_97;
  }
LABEL_96:
  PB::TextFormatter::format(a2, "verticalRotationSimilarityThreshold", *((float *)this + 39));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x2000000000) == 0)
  {
LABEL_46:
    if ((v5 & 0x4000000000) == 0)
      goto LABEL_47;
    goto LABEL_98;
  }
LABEL_97:
  PB::TextFormatter::format(a2, "verticalTranslationSimilarity", *((float *)this + 40));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x4000000000) == 0)
  {
LABEL_47:
    if ((v5 & 0x8000000000) == 0)
      goto LABEL_48;
    goto LABEL_99;
  }
LABEL_98:
  PB::TextFormatter::format(a2, "verticalTranslationSimilarityBaseline", *((float *)this + 41));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x8000000000) == 0)
  {
LABEL_48:
    if ((v5 & 0x10000000000) == 0)
      goto LABEL_49;
    goto LABEL_100;
  }
LABEL_99:
  PB::TextFormatter::format(a2, "verticalTranslationSimilarityThreshold", *((float *)this + 42));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x10000000000) == 0)
  {
LABEL_49:
    if ((v5 & 0x20000000000) == 0)
      goto LABEL_50;
LABEL_101:
    PB::TextFormatter::format(a2, "yawRateSimilarity200ms", *((float *)this + 44));
    if ((*(_QWORD *)((_BYTE *)this + 188) & 0x2000000000000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_51;
  }
LABEL_100:
  PB::TextFormatter::format(a2, "yawRateSimilarity1000ms", *((float *)this + 43));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x20000000000) != 0)
    goto LABEL_101;
LABEL_50:
  if ((v5 & 0x2000000000000) != 0)
LABEL_51:
    PB::TextFormatter::format(a2, "yawRateSimilarityState", *((_BYTE *)this + 187));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RelativeDeviceMotionComplexTransition::readFrom(CMMsl::RelativeDeviceMotionComplexTransition *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  BOOL v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  BOOL v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  BOOL v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  int v81;
  BOOL v82;
  unint64_t v83;
  unint64_t v84;
  int v85;
  BOOL v86;
  unint64_t v87;
  unint64_t v88;
  int v89;
  BOOL v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  char v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  unint64_t v102;
  unint64_t v103;
  int v104;
  BOOL v105;
  unint64_t v106;
  unint64_t v107;
  int v108;
  BOOL v109;
  char v110;
  unsigned int v111;
  unint64_t v112;
  char v113;
  char v114;
  unsigned int v115;
  unint64_t v116;
  char v117;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_QWORD *)((char *)this + 188) |= 1uLL;
          v20 = *((_QWORD *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_162;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v20);
          v21 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_206;
        case 2u:
          *(_QWORD *)((char *)this + 188) |= 0x800000uLL;
          v23 = *((_QWORD *)a2 + 1);
          if (v23 > 0xFFFFFFFFFFFFFFFBLL || v23 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_162;
          *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v23);
          goto LABEL_205;
        case 3u:
          *(_QWORD *)((char *)this + 188) |= 0x1000000uLL;
          v24 = *((_QWORD *)a2 + 1);
          if (v24 > 0xFFFFFFFFFFFFFFFBLL || v24 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_162;
          *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v24);
          goto LABEL_205;
        case 4u:
          *(_QWORD *)((char *)this + 188) |= 0x2000000uLL;
          v25 = *((_QWORD *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_162;
          *((_DWORD *)this + 28) = *(_DWORD *)(*(_QWORD *)a2 + v25);
          goto LABEL_205;
        case 5u:
          *(_QWORD *)((char *)this + 188) |= 8uLL;
          v26 = *((_QWORD *)a2 + 1);
          if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_162;
          *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v26);
          goto LABEL_205;
        case 6u:
          *(_QWORD *)((char *)this + 188) |= 0x10uLL;
          v27 = *((_QWORD *)a2 + 1);
          if (v27 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_162;
          *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v27);
          goto LABEL_205;
        case 7u:
          *(_QWORD *)((char *)this + 188) |= 0x20uLL;
          v28 = *((_QWORD *)a2 + 1);
          if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_162;
          *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v28);
          goto LABEL_205;
        case 8u:
          *(_QWORD *)((char *)this + 188) |= 0x40000000uLL;
          v29 = *((_QWORD *)a2 + 1);
          if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_162;
          *((_DWORD *)this + 33) = *(_DWORD *)(*(_QWORD *)a2 + v29);
          goto LABEL_205;
        case 9u:
          *(_QWORD *)((char *)this + 188) |= 0x200uLL;
          v30 = *((_QWORD *)a2 + 1);
          if (v30 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_162;
          *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v30);
          goto LABEL_205;
        case 0xAu:
          *(_QWORD *)((char *)this + 188) |= 0x200000uLL;
          v31 = *((_QWORD *)a2 + 1);
          if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_162;
          *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v31);
          goto LABEL_205;
        case 0xBu:
          *(_QWORD *)((char *)this + 188) |= 2uLL;
          v32 = *((_QWORD *)a2 + 1);
          if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_162;
          *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v32);
          goto LABEL_205;
        case 0xCu:
          *(_QWORD *)((char *)this + 188) |= 0x4000000uLL;
          v33 = *((_QWORD *)a2 + 1);
          if (v33 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_162;
          *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v33);
          goto LABEL_205;
        case 0xDu:
          *(_QWORD *)((char *)this + 188) |= 0x8000000uLL;
          v34 = *((_QWORD *)a2 + 1);
          if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_162;
          *((_DWORD *)this + 30) = *(_DWORD *)(*(_QWORD *)a2 + v34);
          goto LABEL_205;
        case 0xEu:
          *(_QWORD *)((char *)this + 188) |= 0x10000000uLL;
          v35 = *((_QWORD *)a2 + 1);
          if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_162;
          *((_DWORD *)this + 31) = *(_DWORD *)(*(_QWORD *)a2 + v35);
          goto LABEL_205;
        case 0xFu:
          *(_QWORD *)((char *)this + 188) |= 0x40uLL;
          v36 = *((_QWORD *)a2 + 1);
          if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_162;
          *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v36);
          goto LABEL_205;
        case 0x10u:
          *(_QWORD *)((char *)this + 188) |= 0x80uLL;
          v37 = *((_QWORD *)a2 + 1);
          if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_162;
          *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v37);
          goto LABEL_205;
        case 0x11u:
          *(_QWORD *)((char *)this + 188) |= 0x100uLL;
          v38 = *((_QWORD *)a2 + 1);
          if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_162;
          *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v38);
          goto LABEL_205;
        case 0x12u:
          *(_QWORD *)((char *)this + 188) |= 0x80000000uLL;
          v39 = *((_QWORD *)a2 + 1);
          if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_162;
          *((_DWORD *)this + 34) = *(_DWORD *)(*(_QWORD *)a2 + v39);
          goto LABEL_205;
        case 0x13u:
          *(_QWORD *)((char *)this + 188) |= 0x400uLL;
          v40 = *((_QWORD *)a2 + 1);
          if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_162;
          *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v40);
          goto LABEL_205;
        case 0x14u:
          *(_QWORD *)((char *)this + 188) |= 0x400000uLL;
          v41 = *((_QWORD *)a2 + 1);
          if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_162;
          *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v41);
          goto LABEL_205;
        case 0x15u:
          *(_QWORD *)((char *)this + 188) |= 4uLL;
          v42 = *((_QWORD *)a2 + 1);
          if (v42 > 0xFFFFFFFFFFFFFFFBLL || v42 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_162;
          *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v42);
          goto LABEL_205;
        case 0x16u:
          *(_QWORD *)((char *)this + 188) |= 0x400000000uLL;
          v43 = *((_QWORD *)a2 + 1);
          if (v43 > 0xFFFFFFFFFFFFFFFBLL || v43 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_162;
          *((_DWORD *)this + 37) = *(_DWORD *)(*(_QWORD *)a2 + v43);
          goto LABEL_205;
        case 0x17u:
          *(_QWORD *)((char *)this + 188) |= 0x4000uLL;
          v44 = *((_QWORD *)a2 + 1);
          if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_162;
          *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v44);
          goto LABEL_205;
        case 0x18u:
          *(_QWORD *)((char *)this + 188) |= 0x2000000000uLL;
          v45 = *((_QWORD *)a2 + 1);
          if (v45 > 0xFFFFFFFFFFFFFFFBLL || v45 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_162;
          *((_DWORD *)this + 40) = *(_DWORD *)(*(_QWORD *)a2 + v45);
          goto LABEL_205;
        case 0x19u:
          *(_QWORD *)((char *)this + 188) |= 0x20000uLL;
          v46 = *((_QWORD *)a2 + 1);
          if (v46 > 0xFFFFFFFFFFFFFFFBLL || v46 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_162;
          *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v46);
          goto LABEL_205;
        case 0x1Au:
          *(_QWORD *)((char *)this + 188) |= 0x800000000uLL;
          v47 = *((_QWORD *)a2 + 1);
          if (v47 > 0xFFFFFFFFFFFFFFFBLL || v47 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_162;
          *((_DWORD *)this + 38) = *(_DWORD *)(*(_QWORD *)a2 + v47);
          goto LABEL_205;
        case 0x1Bu:
          *(_QWORD *)((char *)this + 188) |= 0x8000uLL;
          v48 = *((_QWORD *)a2 + 1);
          if (v48 > 0xFFFFFFFFFFFFFFFBLL || v48 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_162;
          *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v48);
          goto LABEL_205;
        case 0x1Cu:
          *(_QWORD *)((char *)this + 188) |= 0x4000000000uLL;
          v49 = *((_QWORD *)a2 + 1);
          if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_162;
          *((_DWORD *)this + 41) = *(_DWORD *)(*(_QWORD *)a2 + v49);
          goto LABEL_205;
        case 0x1Du:
          *(_QWORD *)((char *)this + 188) |= 0x40000uLL;
          v50 = *((_QWORD *)a2 + 1);
          if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_162;
          *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v50);
          goto LABEL_205;
        case 0x1Eu:
          *(_QWORD *)((char *)this + 188) |= 0x1000000000uLL;
          v51 = *((_QWORD *)a2 + 1);
          if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_162;
          *((_DWORD *)this + 39) = *(_DWORD *)(*(_QWORD *)a2 + v51);
          goto LABEL_205;
        case 0x1Fu:
          *(_QWORD *)((char *)this + 188) |= 0x10000uLL;
          v52 = *((_QWORD *)a2 + 1);
          if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_162;
          *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v52);
          goto LABEL_205;
        case 0x20u:
          *(_QWORD *)((char *)this + 188) |= 0x8000000000uLL;
          v53 = *((_QWORD *)a2 + 1);
          if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_162;
          *((_DWORD *)this + 42) = *(_DWORD *)(*(_QWORD *)a2 + v53);
          goto LABEL_205;
        case 0x21u:
          *(_QWORD *)((char *)this + 188) |= 0x80000uLL;
          v54 = *((_QWORD *)a2 + 1);
          if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_162;
          *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v54);
          goto LABEL_205;
        case 0x22u:
          *(_QWORD *)((char *)this + 188) |= 0x200000000000uLL;
          v55 = *((_QWORD *)a2 + 1);
          if (v55 >= *((_QWORD *)a2 + 2))
          {
            v58 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v56 = v55 + 1;
            v57 = *(unsigned __int8 *)(*(_QWORD *)a2 + v55);
            *((_QWORD *)a2 + 1) = v56;
            v58 = v57 != 0;
          }
          *((_BYTE *)this + 183) = v58;
          goto LABEL_207;
        case 0x23u:
          *(_QWORD *)((char *)this + 188) |= 0x800uLL;
          v59 = *((_QWORD *)a2 + 1);
          if (v59 > 0xFFFFFFFFFFFFFFFBLL || v59 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_162;
          *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v59);
          goto LABEL_205;
        case 0x24u:
          *(_QWORD *)((char *)this + 188) |= 0x1000uLL;
          v60 = *((_QWORD *)a2 + 1);
          if (v60 > 0xFFFFFFFFFFFFFFFBLL || v60 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_162;
          *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v60);
          goto LABEL_205;
        case 0x25u:
          *(_QWORD *)((char *)this + 188) |= 0x100000000000uLL;
          v61 = *((_QWORD *)a2 + 1);
          if (v61 >= *((_QWORD *)a2 + 2))
          {
            v64 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v62 = v61 + 1;
            v63 = *(unsigned __int8 *)(*(_QWORD *)a2 + v61);
            *((_QWORD *)a2 + 1) = v62;
            v64 = v63 != 0;
          }
          *((_BYTE *)this + 182) = v64;
          goto LABEL_207;
        case 0x26u:
          *(_QWORD *)((char *)this + 188) |= 0x400000000000uLL;
          v65 = *((_QWORD *)a2 + 1);
          if (v65 >= *((_QWORD *)a2 + 2))
          {
            v68 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v66 = v65 + 1;
            v67 = *(unsigned __int8 *)(*(_QWORD *)a2 + v65);
            *((_QWORD *)a2 + 1) = v66;
            v68 = v67 != 0;
          }
          *((_BYTE *)this + 184) = v68;
          goto LABEL_207;
        case 0x27u:
          *(_QWORD *)((char *)this + 188) |= 0x2000uLL;
          v69 = *((_QWORD *)a2 + 1);
          v70 = *((_QWORD *)a2 + 2);
          v71 = *(_QWORD *)a2;
          if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
          {
            v72 = 0;
            v73 = 0;
            v74 = 0;
            do
            {
              v75 = v69 + 1;
              *((_QWORD *)a2 + 1) = v69 + 1;
              v76 = *(_BYTE *)(v71 + v69);
              v74 |= (unint64_t)(v76 & 0x7F) << v72;
              if ((v76 & 0x80) == 0)
                goto LABEL_219;
              v72 += 7;
              v69 = v75;
              v14 = v73++ > 8;
            }
            while (!v14);
LABEL_186:
            LODWORD(v74) = 0;
            goto LABEL_219;
          }
          v110 = 0;
          v111 = 0;
          v74 = 0;
          if (v70 <= v69)
            v70 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v70 == v69)
            {
              LODWORD(v74) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v112 = v69 + 1;
              v113 = *(_BYTE *)(v71 + v69);
              *((_QWORD *)a2 + 1) = v112;
              v74 |= (unint64_t)(v113 & 0x7F) << v110;
              if (v113 < 0)
              {
                v110 += 7;
                v69 = v112;
                v14 = v111++ > 8;
                if (v14)
                  goto LABEL_186;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v74) = 0;
            }
            break;
          }
LABEL_219:
          *((_DWORD *)this + 16) = v74;
          goto LABEL_207;
        case 0x28u:
          *(_QWORD *)((char *)this + 188) |= (unint64_t)&_mh_execute_header;
          v77 = *((_QWORD *)a2 + 1);
          if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_162;
          *((_DWORD *)this + 35) = *(_DWORD *)(*(_QWORD *)a2 + v77);
          goto LABEL_205;
        case 0x29u:
          *(_QWORD *)((char *)this + 188) |= 0x200000000uLL;
          v78 = *((_QWORD *)a2 + 1);
          if (v78 > 0xFFFFFFFFFFFFFFFBLL || v78 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_162;
          *((_DWORD *)this + 36) = *(_DWORD *)(*(_QWORD *)a2 + v78);
          goto LABEL_205;
        case 0x2Au:
          *(_QWORD *)((char *)this + 188) |= 0x1000000000000uLL;
          v79 = *((_QWORD *)a2 + 1);
          if (v79 >= *((_QWORD *)a2 + 2))
          {
            v82 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v80 = v79 + 1;
            v81 = *(unsigned __int8 *)(*(_QWORD *)a2 + v79);
            *((_QWORD *)a2 + 1) = v80;
            v82 = v81 != 0;
          }
          *((_BYTE *)this + 186) = v82;
          goto LABEL_207;
        case 0x2Bu:
          *(_QWORD *)((char *)this + 188) |= 0x80000000000uLL;
          v83 = *((_QWORD *)a2 + 1);
          if (v83 >= *((_QWORD *)a2 + 2))
          {
            v86 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v84 = v83 + 1;
            v85 = *(unsigned __int8 *)(*(_QWORD *)a2 + v83);
            *((_QWORD *)a2 + 1) = v84;
            v86 = v85 != 0;
          }
          *((_BYTE *)this + 181) = v86;
          goto LABEL_207;
        case 0x2Cu:
          *(_QWORD *)((char *)this + 188) |= 0x40000000000uLL;
          v87 = *((_QWORD *)a2 + 1);
          if (v87 >= *((_QWORD *)a2 + 2))
          {
            v90 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v88 = v87 + 1;
            v89 = *(unsigned __int8 *)(*(_QWORD *)a2 + v87);
            *((_QWORD *)a2 + 1) = v88;
            v90 = v89 != 0;
          }
          *((_BYTE *)this + 180) = v90;
          goto LABEL_207;
        case 0x2Du:
          *(_QWORD *)((char *)this + 188) |= 0x20000000uLL;
          v91 = *((_QWORD *)a2 + 1);
          if (v91 > 0xFFFFFFFFFFFFFFFBLL || v91 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_162;
          *((_DWORD *)this + 32) = *(_DWORD *)(*(_QWORD *)a2 + v91);
          goto LABEL_205;
        case 0x2Eu:
          *(_QWORD *)((char *)this + 188) |= 0x20000000000uLL;
          v92 = *((_QWORD *)a2 + 1);
          if (v92 > 0xFFFFFFFFFFFFFFFBLL || v92 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_162;
          *((_DWORD *)this + 44) = *(_DWORD *)(*(_QWORD *)a2 + v92);
          goto LABEL_205;
        case 0x2Fu:
          *(_QWORD *)((char *)this + 188) |= 0x10000000000uLL;
          v93 = *((_QWORD *)a2 + 1);
          if (v93 <= 0xFFFFFFFFFFFFFFFBLL && v93 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 43) = *(_DWORD *)(*(_QWORD *)a2 + v93);
LABEL_205:
            v21 = *((_QWORD *)a2 + 1) + 4;
LABEL_206:
            *((_QWORD *)a2 + 1) = v21;
          }
          else
          {
LABEL_162:
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_207;
        case 0x30u:
          *(_QWORD *)((char *)this + 188) |= 0x100000uLL;
          v94 = *((_QWORD *)a2 + 1);
          v95 = *((_QWORD *)a2 + 2);
          v96 = *(_QWORD *)a2;
          if (v94 <= 0xFFFFFFFFFFFFFFF5 && v94 + 10 <= v95)
          {
            v97 = 0;
            v98 = 0;
            v99 = 0;
            do
            {
              v100 = v94 + 1;
              *((_QWORD *)a2 + 1) = v94 + 1;
              v101 = *(_BYTE *)(v96 + v94);
              v99 |= (unint64_t)(v101 & 0x7F) << v97;
              if ((v101 & 0x80) == 0)
                goto LABEL_216;
              v97 += 7;
              v94 = v100;
              v14 = v98++ > 8;
            }
            while (!v14);
LABEL_199:
            LODWORD(v99) = 0;
            goto LABEL_216;
          }
          v114 = 0;
          v115 = 0;
          v99 = 0;
          if (v95 <= v94)
            v95 = *((_QWORD *)a2 + 1);
          break;
        case 0x31u:
          *(_QWORD *)((char *)this + 188) |= 0x800000000000uLL;
          v102 = *((_QWORD *)a2 + 1);
          if (v102 >= *((_QWORD *)a2 + 2))
          {
            v105 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v103 = v102 + 1;
            v104 = *(unsigned __int8 *)(*(_QWORD *)a2 + v102);
            *((_QWORD *)a2 + 1) = v103;
            v105 = v104 != 0;
          }
          *((_BYTE *)this + 185) = v105;
          goto LABEL_207;
        case 0x32u:
          *(_QWORD *)((char *)this + 188) |= 0x2000000000000uLL;
          v106 = *((_QWORD *)a2 + 1);
          if (v106 >= *((_QWORD *)a2 + 2))
          {
            v109 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v107 = v106 + 1;
            v108 = *(unsigned __int8 *)(*(_QWORD *)a2 + v106);
            *((_QWORD *)a2 + 1) = v107;
            v109 = v108 != 0;
          }
          *((_BYTE *)this + 187) = v109;
          goto LABEL_207;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_207;
      }
      while (1)
      {
        if (v95 == v94)
        {
          LODWORD(v99) = 0;
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_216;
        }
        v116 = v94 + 1;
        v117 = *(_BYTE *)(v96 + v94);
        *((_QWORD *)a2 + 1) = v116;
        v99 |= (unint64_t)(v117 & 0x7F) << v114;
        if ((v117 & 0x80) == 0)
          break;
        v114 += 7;
        v94 = v116;
        v14 = v115++ > 8;
        if (v14)
          goto LABEL_199;
      }
      if (*((_BYTE *)a2 + 24))
        LODWORD(v99) = 0;
LABEL_216:
      *((_DWORD *)this + 23) = v99;
LABEL_207:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::RelativeDeviceMotionComplexTransition::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = this;
  v4 = *(_QWORD *)(this + 188);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_QWORD *)(v3 + 188);
    if ((v4 & 0x800000) == 0)
    {
LABEL_3:
      if ((v4 & 0x1000000) == 0)
        goto LABEL_4;
      goto LABEL_54;
    }
  }
  else if ((v4 & 0x800000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 2u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_4:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_5;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(float *)(v3 + 108), 3u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(float *)(v3 + 112), 4u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 5u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 6u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_9;
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 7u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(float *)(v3 + 132), 8u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x200000) == 0)
      goto LABEL_11;
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 9u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x200000) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0)
      goto LABEL_12;
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 0xAu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 2) == 0)
  {
LABEL_12:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_13;
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 0xBu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_13:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_14;
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::write(a2, *(float *)(v3 + 116), 0xCu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_15;
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::write(a2, *(float *)(v3 + 120), 0xDu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x40) == 0)
      goto LABEL_16;
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::write(a2, *(float *)(v3 + 124), 0xEu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x40) == 0)
  {
LABEL_16:
    if ((v4 & 0x80) == 0)
      goto LABEL_17;
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 0xFu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x80) == 0)
  {
LABEL_17:
    if ((v4 & 0x100) == 0)
      goto LABEL_18;
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 0x10u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x100) == 0)
  {
LABEL_18:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 0x11u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x400) == 0)
      goto LABEL_20;
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::write(a2, *(float *)(v3 + 136), 0x12u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x400) == 0)
  {
LABEL_20:
    if ((v4 & 0x400000) == 0)
      goto LABEL_21;
    goto LABEL_71;
  }
LABEL_70:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0x13u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x400000) == 0)
  {
LABEL_21:
    if ((v4 & 4) == 0)
      goto LABEL_22;
    goto LABEL_72;
  }
LABEL_71:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 0x14u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 4) == 0)
  {
LABEL_22:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_23;
    goto LABEL_73;
  }
LABEL_72:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 0x15u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x4000) == 0)
      goto LABEL_24;
    goto LABEL_74;
  }
LABEL_73:
  this = PB::Writer::write(a2, *(float *)(v3 + 148), 0x16u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x4000) == 0)
  {
LABEL_24:
    if ((v4 & 0x2000000000) == 0)
      goto LABEL_25;
    goto LABEL_75;
  }
LABEL_74:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 0x17u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x2000000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x20000) == 0)
      goto LABEL_26;
    goto LABEL_76;
  }
LABEL_75:
  this = PB::Writer::write(a2, *(float *)(v3 + 160), 0x18u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x20000) == 0)
  {
LABEL_26:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_27;
    goto LABEL_77;
  }
LABEL_76:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0x19u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_27:
    if ((v4 & 0x8000) == 0)
      goto LABEL_28;
    goto LABEL_78;
  }
LABEL_77:
  this = PB::Writer::write(a2, *(float *)(v3 + 152), 0x1Au);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x8000) == 0)
  {
LABEL_28:
    if ((v4 & 0x4000000000) == 0)
      goto LABEL_29;
    goto LABEL_79;
  }
LABEL_78:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0x1Bu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x4000000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x40000) == 0)
      goto LABEL_30;
    goto LABEL_80;
  }
LABEL_79:
  this = PB::Writer::write(a2, *(float *)(v3 + 164), 0x1Cu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x40000) == 0)
  {
LABEL_30:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_31;
    goto LABEL_81;
  }
LABEL_80:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 0x1Du);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x10000) == 0)
      goto LABEL_32;
    goto LABEL_82;
  }
LABEL_81:
  this = PB::Writer::write(a2, *(float *)(v3 + 156), 0x1Eu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x10000) == 0)
  {
LABEL_32:
    if ((v4 & 0x8000000000) == 0)
      goto LABEL_33;
    goto LABEL_83;
  }
LABEL_82:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 0x1Fu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x8000000000) == 0)
  {
LABEL_33:
    if ((v4 & 0x80000) == 0)
      goto LABEL_34;
    goto LABEL_84;
  }
LABEL_83:
  this = PB::Writer::write(a2, *(float *)(v3 + 168), 0x20u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x80000) == 0)
  {
LABEL_34:
    if ((v4 & 0x200000000000) == 0)
      goto LABEL_35;
    goto LABEL_85;
  }
LABEL_84:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 0x21u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x200000000000) == 0)
  {
LABEL_35:
    if ((v4 & 0x800) == 0)
      goto LABEL_36;
    goto LABEL_86;
  }
LABEL_85:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 183), 0x22u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x800) == 0)
  {
LABEL_36:
    if ((v4 & 0x1000) == 0)
      goto LABEL_37;
    goto LABEL_87;
  }
LABEL_86:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 0x23u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x1000) == 0)
  {
LABEL_37:
    if ((v4 & 0x100000000000) == 0)
      goto LABEL_38;
    goto LABEL_88;
  }
LABEL_87:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 0x24u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x100000000000) == 0)
  {
LABEL_38:
    if ((v4 & 0x400000000000) == 0)
      goto LABEL_39;
    goto LABEL_89;
  }
LABEL_88:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 182), 0x25u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x400000000000) == 0)
  {
LABEL_39:
    if ((v4 & 0x2000) == 0)
      goto LABEL_40;
    goto LABEL_90;
  }
LABEL_89:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 184), 0x26u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x2000) == 0)
  {
LABEL_40:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_41;
    goto LABEL_91;
  }
LABEL_90:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 64), 0x27u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_41:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_42;
    goto LABEL_92;
  }
LABEL_91:
  this = PB::Writer::write(a2, *(float *)(v3 + 140), 0x28u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_42:
    if ((v4 & 0x1000000000000) == 0)
      goto LABEL_43;
    goto LABEL_93;
  }
LABEL_92:
  this = PB::Writer::write(a2, *(float *)(v3 + 144), 0x29u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x1000000000000) == 0)
  {
LABEL_43:
    if ((v4 & 0x80000000000) == 0)
      goto LABEL_44;
    goto LABEL_94;
  }
LABEL_93:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 186), 0x2Au);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x80000000000) == 0)
  {
LABEL_44:
    if ((v4 & 0x40000000000) == 0)
      goto LABEL_45;
    goto LABEL_95;
  }
LABEL_94:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 181), 0x2Bu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x40000000000) == 0)
  {
LABEL_45:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_46;
    goto LABEL_96;
  }
LABEL_95:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 180), 0x2Cu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_46:
    if ((v4 & 0x20000000000) == 0)
      goto LABEL_47;
    goto LABEL_97;
  }
LABEL_96:
  this = PB::Writer::write(a2, *(float *)(v3 + 128), 0x2Du);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x20000000000) == 0)
  {
LABEL_47:
    if ((v4 & 0x10000000000) == 0)
      goto LABEL_48;
    goto LABEL_98;
  }
LABEL_97:
  this = PB::Writer::write(a2, *(float *)(v3 + 176), 0x2Eu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x10000000000) == 0)
  {
LABEL_48:
    if ((v4 & 0x100000) == 0)
      goto LABEL_49;
    goto LABEL_99;
  }
LABEL_98:
  this = PB::Writer::write(a2, *(float *)(v3 + 172), 0x2Fu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x100000) == 0)
  {
LABEL_49:
    if ((v4 & 0x800000000000) == 0)
      goto LABEL_50;
    goto LABEL_100;
  }
LABEL_99:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 92), 0x30u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x800000000000) == 0)
  {
LABEL_50:
    if ((v4 & 0x2000000000000) == 0)
      return this;
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 187), 0x32u);
  }
LABEL_100:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 185), 0x31u);
  if ((*(_QWORD *)(v3 + 188) & 0x2000000000000) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 187), 0x32u);
  return this;
}

uint64_t CMMsl::RelativeDeviceMotionComplexTransition::hash_value(CMMsl::RelativeDeviceMotionComplexTransition *this)
{
  uint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  float v47;
  uint64_t v48;
  float v49;
  uint64_t v50;
  float v51;
  uint64_t v52;
  float v53;
  uint64_t v54;
  float v55;
  uint64_t v56;
  float v57;
  uint64_t v58;
  float v59;
  uint64_t v60;
  float v61;
  uint64_t v62;
  float v63;
  uint64_t v64;
  float v65;
  uint64_t v66;
  uint64_t v67;
  float v68;
  uint64_t v69;
  float v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  float v75;
  uint64_t v76;
  float v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  float v82;
  uint64_t v83;
  float v84;
  uint64_t v85;
  float v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;

  v1 = *(_QWORD *)((char *)this + 188);
  if ((v1 & 1) == 0)
  {
    v2 = 0;
    if ((v1 & 0x800000) != 0)
      goto LABEL_3;
LABEL_137:
    v114 = 0;
    if ((v1 & 0x1000000) != 0)
      goto LABEL_6;
LABEL_138:
    v113 = 0;
    if ((v1 & 0x2000000) != 0)
      goto LABEL_9;
LABEL_139:
    v112 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_12;
LABEL_140:
    v111 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_15;
LABEL_141:
    v110 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_18;
LABEL_142:
    v109 = 0;
    if ((v1 & 0x40000000) != 0)
      goto LABEL_21;
LABEL_143:
    v108 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_24;
LABEL_144:
    v107 = 0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_27;
LABEL_145:
    v106 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_30;
LABEL_146:
    v105 = 0;
    if ((v1 & 0x4000000) != 0)
      goto LABEL_33;
LABEL_147:
    v104 = 0;
    if ((v1 & 0x8000000) != 0)
      goto LABEL_36;
LABEL_148:
    v103 = 0;
    if ((v1 & 0x10000000) != 0)
      goto LABEL_39;
LABEL_149:
    v102 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_42;
LABEL_150:
    v101 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_45;
LABEL_151:
    v100 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_48;
LABEL_152:
    v99 = 0;
    if ((v1 & 0x80000000) != 0)
      goto LABEL_51;
LABEL_153:
    v98 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_54;
LABEL_154:
    v97 = 0;
    if ((v1 & 0x400000) != 0)
      goto LABEL_57;
LABEL_155:
    v96 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_60;
LABEL_156:
    v95 = 0;
    if ((v1 & 0x400000000) != 0)
      goto LABEL_63;
LABEL_157:
    v94 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_66;
LABEL_158:
    v93 = 0;
    if ((v1 & 0x2000000000) != 0)
      goto LABEL_69;
LABEL_159:
    v92 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_72;
LABEL_160:
    v50 = 0;
    if ((v1 & 0x800000000) != 0)
      goto LABEL_76;
LABEL_161:
    v52 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_80;
LABEL_162:
    v54 = 0;
    if ((v1 & 0x4000000000) != 0)
      goto LABEL_84;
LABEL_163:
    v56 = 0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_87;
LABEL_164:
    v58 = 0;
    if ((v1 & 0x1000000000) != 0)
      goto LABEL_90;
LABEL_165:
    v60 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_93;
LABEL_166:
    v62 = 0;
    if ((v1 & 0x8000000000) != 0)
      goto LABEL_96;
LABEL_167:
    v64 = 0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_99;
LABEL_168:
    v66 = 0;
    if ((v1 & 0x200000000000) != 0)
      goto LABEL_102;
    goto LABEL_169;
  }
  if (*((double *)this + 1) == 0.0)
    v2 = 0;
  else
    v2 = *((_QWORD *)this + 1);
  if ((v1 & 0x800000) == 0)
    goto LABEL_137;
LABEL_3:
  v3 = *((float *)this + 26);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  v114 = v4;
  if ((v1 & 0x1000000) == 0)
    goto LABEL_138;
LABEL_6:
  v5 = *((float *)this + 27);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  v113 = v6;
  if ((v1 & 0x2000000) == 0)
    goto LABEL_139;
LABEL_9:
  v7 = *((float *)this + 28);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  v112 = v8;
  if ((v1 & 8) == 0)
    goto LABEL_140;
LABEL_12:
  v9 = *((float *)this + 6);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  v111 = v10;
  if ((v1 & 0x10) == 0)
    goto LABEL_141;
LABEL_15:
  v11 = *((float *)this + 7);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  v110 = v12;
  if ((v1 & 0x20) == 0)
    goto LABEL_142;
LABEL_18:
  v13 = *((float *)this + 8);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  v109 = v14;
  if ((v1 & 0x40000000) == 0)
    goto LABEL_143;
LABEL_21:
  v15 = *((float *)this + 33);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  v108 = v16;
  if ((v1 & 0x200) == 0)
    goto LABEL_144;
LABEL_24:
  v17 = *((float *)this + 12);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  v107 = v18;
  if ((v1 & 0x200000) == 0)
    goto LABEL_145;
LABEL_27:
  v19 = *((float *)this + 24);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  v106 = v20;
  if ((v1 & 2) == 0)
    goto LABEL_146;
LABEL_30:
  v21 = *((float *)this + 4);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  v105 = v22;
  if ((v1 & 0x4000000) == 0)
    goto LABEL_147;
LABEL_33:
  v23 = *((float *)this + 29);
  v24 = LODWORD(v23);
  if (v23 == 0.0)
    v24 = 0;
  v104 = v24;
  if ((v1 & 0x8000000) == 0)
    goto LABEL_148;
LABEL_36:
  v25 = *((float *)this + 30);
  v26 = LODWORD(v25);
  if (v25 == 0.0)
    v26 = 0;
  v103 = v26;
  if ((v1 & 0x10000000) == 0)
    goto LABEL_149;
LABEL_39:
  v27 = *((float *)this + 31);
  v28 = LODWORD(v27);
  if (v27 == 0.0)
    v28 = 0;
  v102 = v28;
  if ((v1 & 0x40) == 0)
    goto LABEL_150;
LABEL_42:
  v29 = *((float *)this + 9);
  v30 = LODWORD(v29);
  if (v29 == 0.0)
    v30 = 0;
  v101 = v30;
  if ((v1 & 0x80) == 0)
    goto LABEL_151;
LABEL_45:
  v31 = *((float *)this + 10);
  v32 = LODWORD(v31);
  if (v31 == 0.0)
    v32 = 0;
  v100 = v32;
  if ((v1 & 0x100) == 0)
    goto LABEL_152;
LABEL_48:
  v33 = *((float *)this + 11);
  v34 = LODWORD(v33);
  if (v33 == 0.0)
    v34 = 0;
  v99 = v34;
  if ((v1 & 0x80000000) == 0)
    goto LABEL_153;
LABEL_51:
  v35 = *((float *)this + 34);
  v36 = LODWORD(v35);
  if (v35 == 0.0)
    v36 = 0;
  v98 = v36;
  if ((v1 & 0x400) == 0)
    goto LABEL_154;
LABEL_54:
  v37 = *((float *)this + 13);
  v38 = LODWORD(v37);
  if (v37 == 0.0)
    v38 = 0;
  v97 = v38;
  if ((v1 & 0x400000) == 0)
    goto LABEL_155;
LABEL_57:
  v39 = *((float *)this + 25);
  v40 = LODWORD(v39);
  if (v39 == 0.0)
    v40 = 0;
  v96 = v40;
  if ((v1 & 4) == 0)
    goto LABEL_156;
LABEL_60:
  v41 = *((float *)this + 5);
  v42 = LODWORD(v41);
  if (v41 == 0.0)
    v42 = 0;
  v95 = v42;
  if ((v1 & 0x400000000) == 0)
    goto LABEL_157;
LABEL_63:
  v43 = *((float *)this + 37);
  v44 = LODWORD(v43);
  if (v43 == 0.0)
    v44 = 0;
  v94 = v44;
  if ((v1 & 0x4000) == 0)
    goto LABEL_158;
LABEL_66:
  v45 = *((float *)this + 17);
  v46 = LODWORD(v45);
  if (v45 == 0.0)
    v46 = 0;
  v93 = v46;
  if ((v1 & 0x2000000000) == 0)
    goto LABEL_159;
LABEL_69:
  v47 = *((float *)this + 40);
  v48 = LODWORD(v47);
  if (v47 == 0.0)
    v48 = 0;
  v92 = v48;
  if ((v1 & 0x20000) == 0)
    goto LABEL_160;
LABEL_72:
  v49 = *((float *)this + 20);
  if (v49 == 0.0)
    v50 = 0;
  else
    v50 = LODWORD(v49);
  if ((v1 & 0x800000000) == 0)
    goto LABEL_161;
LABEL_76:
  v51 = *((float *)this + 38);
  if (v51 == 0.0)
    v52 = 0;
  else
    v52 = LODWORD(v51);
  if ((v1 & 0x8000) == 0)
    goto LABEL_162;
LABEL_80:
  v53 = *((float *)this + 18);
  if (v53 == 0.0)
    v54 = 0;
  else
    v54 = LODWORD(v53);
  if ((v1 & 0x4000000000) == 0)
    goto LABEL_163;
LABEL_84:
  v55 = *((float *)this + 41);
  v56 = LODWORD(v55);
  if (v55 == 0.0)
    v56 = 0;
  if ((v1 & 0x40000) == 0)
    goto LABEL_164;
LABEL_87:
  v57 = *((float *)this + 21);
  v58 = LODWORD(v57);
  if (v57 == 0.0)
    v58 = 0;
  if ((v1 & 0x1000000000) == 0)
    goto LABEL_165;
LABEL_90:
  v59 = *((float *)this + 39);
  v60 = LODWORD(v59);
  if (v59 == 0.0)
    v60 = 0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_166;
LABEL_93:
  v61 = *((float *)this + 19);
  v62 = LODWORD(v61);
  if (v61 == 0.0)
    v62 = 0;
  if ((v1 & 0x8000000000) == 0)
    goto LABEL_167;
LABEL_96:
  v63 = *((float *)this + 42);
  v64 = LODWORD(v63);
  if (v63 == 0.0)
    v64 = 0;
  if ((v1 & 0x80000) == 0)
    goto LABEL_168;
LABEL_99:
  v65 = *((float *)this + 22);
  v66 = LODWORD(v65);
  if (v65 == 0.0)
    v66 = 0;
  if ((v1 & 0x200000000000) != 0)
  {
LABEL_102:
    v67 = *((unsigned __int8 *)this + 183);
    if ((v1 & 0x800) != 0)
      goto LABEL_103;
LABEL_170:
    v69 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_106;
LABEL_171:
    v71 = 0;
    if ((v1 & 0x100000000000) != 0)
      goto LABEL_109;
    goto LABEL_172;
  }
LABEL_169:
  v67 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_170;
LABEL_103:
  v68 = *((float *)this + 14);
  v69 = LODWORD(v68);
  if (v68 == 0.0)
    v69 = 0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_171;
LABEL_106:
  v70 = *((float *)this + 15);
  v71 = LODWORD(v70);
  if (v70 == 0.0)
    v71 = 0;
  if ((v1 & 0x100000000000) != 0)
  {
LABEL_109:
    v72 = *((unsigned __int8 *)this + 182);
    if ((v1 & 0x400000000000) != 0)
      goto LABEL_110;
    goto LABEL_173;
  }
LABEL_172:
  v72 = 0;
  if ((v1 & 0x400000000000) != 0)
  {
LABEL_110:
    v73 = *((unsigned __int8 *)this + 184);
    if ((v1 & 0x2000) != 0)
      goto LABEL_111;
    goto LABEL_174;
  }
LABEL_173:
  v73 = 0;
  if ((v1 & 0x2000) != 0)
  {
LABEL_111:
    v74 = *((unsigned int *)this + 16);
    if ((v1 & 0x100000000) != 0)
      goto LABEL_112;
LABEL_175:
    v76 = 0;
    if ((v1 & 0x200000000) != 0)
      goto LABEL_115;
LABEL_176:
    v78 = 0;
    if ((v1 & 0x1000000000000) != 0)
      goto LABEL_118;
    goto LABEL_177;
  }
LABEL_174:
  v74 = 0;
  if ((v1 & 0x100000000) == 0)
    goto LABEL_175;
LABEL_112:
  v75 = *((float *)this + 35);
  v76 = LODWORD(v75);
  if (v75 == 0.0)
    v76 = 0;
  if ((v1 & 0x200000000) == 0)
    goto LABEL_176;
LABEL_115:
  v77 = *((float *)this + 36);
  v78 = LODWORD(v77);
  if (v77 == 0.0)
    v78 = 0;
  if ((v1 & 0x1000000000000) != 0)
  {
LABEL_118:
    v79 = *((unsigned __int8 *)this + 186);
    if ((v1 & 0x80000000000) != 0)
      goto LABEL_119;
    goto LABEL_178;
  }
LABEL_177:
  v79 = 0;
  if ((v1 & 0x80000000000) != 0)
  {
LABEL_119:
    v80 = *((unsigned __int8 *)this + 181);
    if ((v1 & 0x40000000000) != 0)
      goto LABEL_120;
    goto LABEL_179;
  }
LABEL_178:
  v80 = 0;
  if ((v1 & 0x40000000000) != 0)
  {
LABEL_120:
    v81 = *((unsigned __int8 *)this + 180);
    if ((v1 & 0x20000000) != 0)
      goto LABEL_121;
LABEL_180:
    v83 = 0;
    if ((v1 & 0x20000000000) != 0)
      goto LABEL_124;
LABEL_181:
    v85 = 0;
    if ((v1 & 0x10000000000) != 0)
      goto LABEL_127;
LABEL_182:
    v87 = 0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_130;
    goto LABEL_183;
  }
LABEL_179:
  v81 = 0;
  if ((v1 & 0x20000000) == 0)
    goto LABEL_180;
LABEL_121:
  v82 = *((float *)this + 32);
  v83 = LODWORD(v82);
  if (v82 == 0.0)
    v83 = 0;
  if ((v1 & 0x20000000000) == 0)
    goto LABEL_181;
LABEL_124:
  v84 = *((float *)this + 44);
  v85 = LODWORD(v84);
  if (v84 == 0.0)
    v85 = 0;
  if ((v1 & 0x10000000000) == 0)
    goto LABEL_182;
LABEL_127:
  v86 = *((float *)this + 43);
  v87 = LODWORD(v86);
  if (v86 == 0.0)
    v87 = 0;
  if ((v1 & 0x100000) != 0)
  {
LABEL_130:
    v88 = *((unsigned int *)this + 23);
    if ((v1 & 0x800000000000) != 0)
      goto LABEL_131;
LABEL_184:
    v89 = 0;
    if ((v1 & 0x2000000000000) != 0)
      goto LABEL_132;
LABEL_185:
    v90 = 0;
    return v114 ^ v2 ^ v113 ^ v112 ^ v111 ^ v110 ^ v109 ^ v108 ^ v107 ^ v106 ^ v105 ^ v104 ^ v103 ^ v102 ^ v101 ^ v100 ^ v99 ^ v98 ^ v97 ^ v96 ^ v95 ^ v94 ^ v93 ^ v92 ^ v50 ^ v52 ^ v54 ^ v56 ^ v58 ^ v60 ^ v62 ^ v64 ^ v66 ^ v67 ^ v69 ^ v71 ^ v72 ^ v73 ^ v74 ^ v76 ^ v78 ^ v79 ^ v80 ^ v81 ^ v83 ^ v85 ^ v87 ^ v88 ^ v89 ^ v90;
  }
LABEL_183:
  v88 = 0;
  if ((v1 & 0x800000000000) == 0)
    goto LABEL_184;
LABEL_131:
  v89 = *((unsigned __int8 *)this + 185);
  if ((v1 & 0x2000000000000) == 0)
    goto LABEL_185;
LABEL_132:
  v90 = *((unsigned __int8 *)this + 187);
  return v114 ^ v2 ^ v113 ^ v112 ^ v111 ^ v110 ^ v109 ^ v108 ^ v107 ^ v106 ^ v105 ^ v104 ^ v103 ^ v102 ^ v101 ^ v100 ^ v99 ^ v98 ^ v97 ^ v96 ^ v95 ^ v94 ^ v93 ^ v92 ^ v50 ^ v52 ^ v54 ^ v56 ^ v58 ^ v60 ^ v62 ^ v64 ^ v66 ^ v67 ^ v69 ^ v71 ^ v72 ^ v73 ^ v74 ^ v76 ^ v78 ^ v79 ^ v80 ^ v81 ^ v83 ^ v85 ^ v87 ^ v88 ^ v89 ^ v90;
}

void CMMsl::RelativeDeviceMotionCorrelatedMotion::~RelativeDeviceMotionCorrelatedMotion(CMMsl::RelativeDeviceMotionCorrelatedMotion *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::RelativeDeviceMotionCorrelatedMotion::RelativeDeviceMotionCorrelatedMotion(uint64_t this, const CMMsl::RelativeDeviceMotionCorrelatedMotion *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  char v13;
  char v14;
  int v15;
  char v16;
  char v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  char v24;
  int v25;
  int v26;
  int v27;
  int v28;
  char v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  char v35;

  *(_QWORD *)this = off_100353E78;
  *(_DWORD *)(this + 128) = 0;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 4) != 0)
  {
    v4 = *((_QWORD *)a2 + 3);
    v3 = 4;
    *(_DWORD *)(this + 128) = 4;
    *(_QWORD *)(this + 24) = v4;
    v2 = *((_DWORD *)a2 + 32);
    if ((v2 & 0x100000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x100000) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 25);
    v3 |= 0x100000u;
    *(_DWORD *)(this + 128) = v3;
    *(_DWORD *)(this + 100) = v5;
    v2 = *((_DWORD *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 0x80) != 0)
  {
    v6 = *((_DWORD *)a2 + 12);
    v3 |= 0x80u;
    *(_DWORD *)(this + 128) = v3;
    *(_DWORD *)(this + 48) = v6;
    v2 = *((_DWORD *)a2 + 32);
    if ((v2 & 0x80000) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_39;
    }
  }
  else if ((v2 & 0x80000) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 24);
  v3 |= 0x80000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 96) = v7;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x4000) == 0)
      goto LABEL_10;
    goto LABEL_40;
  }
LABEL_39:
  v8 = *((_DWORD *)a2 + 11);
  v3 |= 0x40u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 44) = v8;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x4000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_41;
  }
LABEL_40:
  v9 = *((_DWORD *)a2 + 19);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 76) = v9;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_42;
  }
LABEL_41:
  v10 = *((_DWORD *)a2 + 18);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 72) = v10;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x1000) == 0)
  {
LABEL_12:
    if ((v2 & 0x800000) == 0)
      goto LABEL_13;
    goto LABEL_43;
  }
LABEL_42:
  v11 = *((_DWORD *)a2 + 17);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 68) = v11;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x800000) == 0)
  {
LABEL_13:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_14;
    goto LABEL_44;
  }
LABEL_43:
  v12 = *((_DWORD *)a2 + 28);
  v3 |= 0x800000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 112) = v12;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_15;
    goto LABEL_45;
  }
LABEL_44:
  v13 = *((_BYTE *)a2 + 124);
  v3 |= 0x20000000u;
  *(_DWORD *)(this + 128) = v3;
  *(_BYTE *)(this + 124) = v13;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0)
      goto LABEL_16;
    goto LABEL_46;
  }
LABEL_45:
  v14 = *((_BYTE *)a2 + 120);
  v3 |= 0x2000000u;
  *(_DWORD *)(this + 128) = v3;
  *(_BYTE *)(this + 120) = v14;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_17;
    goto LABEL_47;
  }
LABEL_46:
  v15 = *((_DWORD *)a2 + 15);
  v3 |= 0x400u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 60) = v15;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_18;
    goto LABEL_48;
  }
LABEL_47:
  v16 = *((_BYTE *)a2 + 123);
  v3 |= 0x10000000u;
  *(_DWORD *)(this + 128) = v3;
  *(_BYTE *)(this + 123) = v16;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_49;
  }
LABEL_48:
  v17 = *((_BYTE *)a2 + 125);
  v3 |= 0x40000000u;
  *(_DWORD *)(this + 128) = v3;
  *(_BYTE *)(this + 125) = v17;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x40000) == 0)
  {
LABEL_19:
    if ((v2 & 0x20) == 0)
      goto LABEL_20;
    goto LABEL_50;
  }
LABEL_49:
  v18 = *((_DWORD *)a2 + 23);
  v3 |= 0x40000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 92) = v18;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x20) == 0)
  {
LABEL_20:
    if ((v2 & 0x20000) == 0)
      goto LABEL_21;
    goto LABEL_51;
  }
LABEL_50:
  v19 = *((_DWORD *)a2 + 10);
  v3 |= 0x20u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 40) = v19;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x20000) == 0)
  {
LABEL_21:
    if ((v2 & 0x10) == 0)
      goto LABEL_22;
    goto LABEL_52;
  }
LABEL_51:
  v20 = *((_DWORD *)a2 + 22);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 88) = v20;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x10) == 0)
  {
LABEL_22:
    if ((v2 & 0x100) == 0)
      goto LABEL_23;
    goto LABEL_53;
  }
LABEL_52:
  v21 = *((_DWORD *)a2 + 9);
  v3 |= 0x10u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 36) = v21;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x100) == 0)
  {
LABEL_23:
    if ((v2 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_54;
  }
LABEL_53:
  v22 = *((_DWORD *)a2 + 13);
  v3 |= 0x100u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 52) = v22;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x400000) == 0)
  {
LABEL_24:
    if ((v2 & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_55;
  }
LABEL_54:
  v23 = *((_DWORD *)a2 + 27);
  v3 |= 0x400000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 108) = v23;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x10000) == 0)
      goto LABEL_26;
    goto LABEL_56;
  }
LABEL_55:
  v24 = *((_BYTE *)a2 + 126);
  v3 |= 0x80000000;
  *(_DWORD *)(this + 128) = v3;
  *(_BYTE *)(this + 126) = v24;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x10000) == 0)
  {
LABEL_26:
    if ((v2 & 8) == 0)
      goto LABEL_27;
    goto LABEL_57;
  }
LABEL_56:
  v25 = *((_DWORD *)a2 + 21);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 84) = v25;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 8) == 0)
  {
LABEL_27:
    if ((v2 & 0x200) == 0)
      goto LABEL_28;
    goto LABEL_58;
  }
LABEL_57:
  v26 = *((_DWORD *)a2 + 8);
  v3 |= 8u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 32) = v26;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x200) == 0)
  {
LABEL_28:
    if ((v2 & 0x200000) == 0)
      goto LABEL_29;
    goto LABEL_59;
  }
LABEL_58:
  v27 = *((_DWORD *)a2 + 14);
  v3 |= 0x200u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 56) = v27;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x200000) == 0)
  {
LABEL_29:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_30;
    goto LABEL_60;
  }
LABEL_59:
  v28 = *((_DWORD *)a2 + 26);
  v3 |= 0x200000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 104) = v28;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_30:
    if ((v2 & 0x800) == 0)
      goto LABEL_31;
    goto LABEL_61;
  }
LABEL_60:
  v29 = *((_BYTE *)a2 + 121);
  v3 |= 0x4000000u;
  *(_DWORD *)(this + 128) = v3;
  *(_BYTE *)(this + 121) = v29;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x800) == 0)
  {
LABEL_31:
    if ((v2 & 1) == 0)
      goto LABEL_32;
    goto LABEL_62;
  }
LABEL_61:
  v30 = *((_DWORD *)a2 + 16);
  v3 |= 0x800u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 64) = v30;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 1) == 0)
  {
LABEL_32:
    if ((v2 & 2) == 0)
      goto LABEL_33;
    goto LABEL_63;
  }
LABEL_62:
  v31 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 128) = v3;
  *(_QWORD *)(this + 8) = v31;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 2) == 0)
  {
LABEL_33:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_34;
    goto LABEL_64;
  }
LABEL_63:
  v32 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 128) = v3;
  *(_QWORD *)(this + 16) = v32;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x8000) == 0)
      goto LABEL_35;
    goto LABEL_65;
  }
LABEL_64:
  v33 = *((_DWORD *)a2 + 29);
  v3 |= 0x1000000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 116) = v33;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x8000) == 0)
  {
LABEL_35:
    if ((v2 & 0x8000000) == 0)
      return this;
LABEL_66:
    v35 = *((_BYTE *)a2 + 122);
    *(_DWORD *)(this + 128) = v3 | 0x8000000;
    *(_BYTE *)(this + 122) = v35;
    return this;
  }
LABEL_65:
  v34 = *((_DWORD *)a2 + 20);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 80) = v34;
  if ((*((_DWORD *)a2 + 32) & 0x8000000) != 0)
    goto LABEL_66;
  return this;
}

CMMsl *CMMsl::RelativeDeviceMotionCorrelatedMotion::operator=(CMMsl *a1, const CMMsl::RelativeDeviceMotionCorrelatedMotion *a2)
{
  CMMsl::RelativeDeviceMotionCorrelatedMotion *v3;
  _BYTE v5[136];

  if (a1 != a2)
  {
    CMMsl::RelativeDeviceMotionCorrelatedMotion::RelativeDeviceMotionCorrelatedMotion((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RelativeDeviceMotionCorrelatedMotion *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::RelativeDeviceMotionCorrelatedMotion *a2, CMMsl::RelativeDeviceMotionCorrelatedMotion *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float result;

  v3 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v3;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  LODWORD(v4) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v4;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  LODWORD(v4) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v4;
  LODWORD(v4) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v4;
  LOBYTE(v3) = *((_BYTE *)this + 124);
  *((_BYTE *)this + 124) = *((_BYTE *)a2 + 124);
  *((_BYTE *)a2 + 124) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 120);
  *((_BYTE *)this + 120) = *((_BYTE *)a2 + 120);
  *((_BYTE *)a2 + 120) = v3;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  LOBYTE(v3) = *((_BYTE *)this + 123);
  *((_BYTE *)this + 123) = *((_BYTE *)a2 + 123);
  *((_BYTE *)a2 + 123) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 125);
  *((_BYTE *)this + 125) = *((_BYTE *)a2 + 125);
  *((_BYTE *)a2 + 125) = v3;
  LODWORD(v4) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v4;
  LOBYTE(v3) = *((_BYTE *)this + 126);
  *((_BYTE *)this + 126) = *((_BYTE *)a2 + 126);
  *((_BYTE *)a2 + 126) = v3;
  LODWORD(v4) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LOBYTE(v3) = *((_BYTE *)this + 121);
  *((_BYTE *)this + 121) = *((_BYTE *)a2 + 121);
  *((_BYTE *)a2 + 121) = v3;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  LODWORD(v6) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v6;
  result = *((float *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((float *)a2 + 20) = result;
  LOBYTE(v3) = *((_BYTE *)this + 122);
  *((_BYTE *)this + 122) = *((_BYTE *)a2 + 122);
  *((_BYTE *)a2 + 122) = v3;
  return result;
}

float CMMsl::RelativeDeviceMotionCorrelatedMotion::RelativeDeviceMotionCorrelatedMotion(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100353E78;
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 123) = *(_BYTE *)(a2 + 123);
  *(_BYTE *)(a1 + 125) = *(_BYTE *)(a2 + 125);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_BYTE *)(a1 + 126) = *(_BYTE *)(a2 + 126);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  result = *(float *)(a2 + 80);
  *(float *)(a1 + 80) = result;
  *(_BYTE *)(a1 + 122) = *(_BYTE *)(a2 + 122);
  return result;
}

CMMsl *CMMsl::RelativeDeviceMotionCorrelatedMotion::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::RelativeDeviceMotionCorrelatedMotion *v3;
  _BYTE v5[136];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::RelativeDeviceMotionCorrelatedMotion::RelativeDeviceMotionCorrelatedMotion((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RelativeDeviceMotionCorrelatedMotion *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::RelativeDeviceMotionCorrelatedMotion::formatText(CMMsl::RelativeDeviceMotionCorrelatedMotion *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "auxAvgOmegaAroundGrav2s", *((float *)this + 8));
    v5 = *((_DWORD *)this + 32);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_37;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "auxAvgOmegaAroundGravLong", *((float *)this + 9));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "auxAvgOmegaAroundGravShort", *((float *)this + 10));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "auxAvgOmegaLong", *((float *)this + 11));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "auxAvgOmegaShort", *((float *)this + 12));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x200) == 0)
      goto LABEL_8;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "auxHistoricalOmegaStdMax", *((float *)this + 13));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x200) == 0)
  {
LABEL_8:
    if ((v5 & 0x400) == 0)
      goto LABEL_9;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "auxOverSrcYawDiffSum", *((float *)this + 14));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x400) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_10;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "dotRotGrav", *((float *)this + 15));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_11;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "hasUnCorrelatedSrcMotion", *((_BYTE *)this + 120));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_12;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "inHeadTurnState", *((_BYTE *)this + 121));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_13;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "inLikelySlowBodyTurnPed", *((_BYTE *)this + 122));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_14;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "isInCorrelatedActivity", *((_BYTE *)this + 123));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_14:
    if ((v5 & 1) == 0)
      goto LABEL_15;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "isInCorrelatedMotion", *((_BYTE *)this + 124));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_15:
    if ((v5 & 2) == 0)
      goto LABEL_16;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "lastHeadTurnStartTime", *((double *)this + 1));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 2) == 0)
  {
LABEL_16:
    if ((v5 & 0x800) == 0)
      goto LABEL_17;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "lastHeadTurnStopTime", *((double *)this + 2));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x800) == 0)
  {
LABEL_17:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_18;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "lastHeadTurnYawRadians", *((float *)this + 16));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x1000) == 0)
      goto LABEL_19;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "likelyOnGymMachine", *((_BYTE *)this + 125));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x1000) == 0)
  {
LABEL_19:
    if ((v5 & 0x2000) == 0)
      goto LABEL_20;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "relOmegaMeanLong", *((float *)this + 17));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x2000) == 0)
  {
LABEL_20:
    if ((v5 & 0x4000) == 0)
      goto LABEL_21;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "relOmegaVarLong", *((float *)this + 18));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x4000) == 0)
  {
LABEL_21:
    if ((v5 & 0x8000) == 0)
      goto LABEL_22;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "relOmegaVarShort", *((float *)this + 19));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x8000) == 0)
  {
LABEL_22:
    if ((v5 & 0x10000) == 0)
      goto LABEL_23;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "srcAccumulatedYaw4s", *((float *)this + 20));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x10000) == 0)
  {
LABEL_23:
    if ((v5 & 0x20000) == 0)
      goto LABEL_24;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "srcAvgOmegaAroundGrav2s", *((float *)this + 21));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x20000) == 0)
  {
LABEL_24:
    if ((v5 & 0x40000) == 0)
      goto LABEL_25;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "srcAvgOmegaAroundGravLong", *((float *)this + 22));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x40000) == 0)
  {
LABEL_25:
    if ((v5 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "srcAvgOmegaAroundGravShort", *((float *)this + 23));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x80000) == 0)
  {
LABEL_26:
    if ((v5 & 0x100000) == 0)
      goto LABEL_27;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "srcAvgOmegaLong", *((float *)this + 24));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x100000) == 0)
  {
LABEL_27:
    if ((v5 & 0x200000) == 0)
      goto LABEL_28;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "srcAvgOmegaShort", *((float *)this + 25));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x200000) == 0)
  {
LABEL_28:
    if ((v5 & 0x400000) == 0)
      goto LABEL_29;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "srcAvgYawBufferSum", *((float *)this + 26));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x400000) == 0)
  {
LABEL_29:
    if ((v5 & 0x800000) == 0)
      goto LABEL_30;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "srcHistoricalOmegaStdMax", *((float *)this + 27));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x800000) == 0)
  {
LABEL_30:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_31;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "srcRotationAxisAlignment", *((float *)this + 28));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_32;
LABEL_65:
    PB::TextFormatter::format(a2, "steadyStatePedestrian", *((_BYTE *)this + 126));
    if ((*((_DWORD *)this + 32) & 4) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_33;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "srcYawBufferLongStd", *((float *)this + 29));
  v5 = *((_DWORD *)this + 32);
  if (v5 < 0)
    goto LABEL_65;
LABEL_32:
  if ((v5 & 4) != 0)
LABEL_33:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 3));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RelativeDeviceMotionCorrelatedMotion::readFrom(CMMsl::RelativeDeviceMotionCorrelatedMotion *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  int v31;
  BOOL v32;
  int v33;
  BOOL v34;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_DWORD *)this + 32) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_102;
        case 2u:
          *((_DWORD *)this + 32) |= 0x100000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_129;
        case 3u:
          *((_DWORD *)this + 32) |= 0x80u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_129;
        case 4u:
          *((_DWORD *)this + 32) |= 0x80000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_129;
        case 5u:
          *((_DWORD *)this + 32) |= 0x40u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_129;
        case 6u:
          *((_DWORD *)this + 32) |= 0x4000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_129;
        case 7u:
          *((_DWORD *)this + 32) |= 0x2000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_129;
        case 8u:
          *((_DWORD *)this + 32) |= 0x1000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_129;
        case 9u:
          *((_DWORD *)this + 32) |= 0x800000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_DWORD *)this + 28) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_129;
        case 0xAu:
          *((_DWORD *)this + 32) |= 0x20000000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 >= *((_QWORD *)a2 + 2))
          {
            v22 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v21 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v22 = v21 != 0;
          }
          *((_BYTE *)this + 124) = v22;
          break;
        case 0xBu:
          *((_DWORD *)this + 32) |= 0x2000000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 >= *((_QWORD *)a2 + 2))
          {
            v24 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v23 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v24 = v23 != 0;
          }
          *((_BYTE *)this + 120) = v24;
          break;
        case 0xCu:
          *((_DWORD *)this + 32) |= 0x400u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_129;
        case 0xDu:
          *((_DWORD *)this + 32) |= 0x10000000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 >= *((_QWORD *)a2 + 2))
          {
            v26 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v25 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v26 = v25 != 0;
          }
          *((_BYTE *)this + 123) = v26;
          break;
        case 0xEu:
          *((_DWORD *)this + 32) |= 0x40000000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 >= *((_QWORD *)a2 + 2))
          {
            v28 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v27 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v28 = v27 != 0;
          }
          *((_BYTE *)this + 125) = v28;
          break;
        case 0xFu:
          *((_DWORD *)this + 32) |= 0x40000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_129;
        case 0x10u:
          *((_DWORD *)this + 32) |= 0x20u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_129;
        case 0x11u:
          *((_DWORD *)this + 32) |= 0x20000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_129;
        case 0x12u:
          *((_DWORD *)this + 32) |= 0x10u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_129;
        case 0x13u:
          *((_DWORD *)this + 32) |= 0x100u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_129;
        case 0x14u:
          *((_DWORD *)this + 32) |= 0x400000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_129;
        case 0x15u:
          *((_DWORD *)this + 32) |= 0x80000000;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 >= *((_QWORD *)a2 + 2))
          {
            v30 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v29 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v30 = v29 != 0;
          }
          *((_BYTE *)this + 126) = v30;
          break;
        case 0x16u:
          *((_DWORD *)this + 32) |= 0x10000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_129;
        case 0x17u:
          *((_DWORD *)this + 32) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_129;
        case 0x18u:
          *((_DWORD *)this + 32) |= 0x200u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_129;
        case 0x19u:
          *((_DWORD *)this + 32) |= 0x200000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_129;
        case 0x1Au:
          *((_DWORD *)this + 32) |= 0x4000000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 >= *((_QWORD *)a2 + 2))
          {
            v32 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v31 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v32 = v31 != 0;
          }
          *((_BYTE *)this + 121) = v32;
          break;
        case 0x1Bu:
          *((_DWORD *)this + 32) |= 0x800u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_129;
        case 0x1Cu:
          *((_DWORD *)this + 32) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_102;
        case 0x1Du:
          *((_DWORD *)this + 32) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_102:
          v2 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_130;
        case 0x1Eu:
          *((_DWORD *)this + 32) |= 0x1000000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_129;
        case 0x1Fu:
          *((_DWORD *)this + 32) |= 0x8000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          {
LABEL_113:
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_129:
            v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_130:
            *((_QWORD *)a2 + 1) = v2;
          }
          break;
        case 0x20u:
          *((_DWORD *)this + 32) |= 0x8000000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 >= *((_QWORD *)a2 + 2))
          {
            v34 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v33 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v34 = v33 != 0;
          }
          *((_BYTE *)this + 122) = v34;
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::RelativeDeviceMotionCorrelatedMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 128);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24), 1u);
    v4 = *(_DWORD *)(v3 + 128);
    if ((v4 & 0x100000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_36;
    }
  }
  else if ((v4 & 0x100000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 2u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80) == 0)
  {
LABEL_4:
    if ((v4 & 0x80000) == 0)
      goto LABEL_5;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 3u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80000) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 4u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000) == 0)
      goto LABEL_7;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 5u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x4000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 6u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 7u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 0x800000) == 0)
      goto LABEL_10;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 8u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x800000) == 0)
  {
LABEL_10:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_11;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 112), 9u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_12;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 124), 0xAu);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 120), 0xBu);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_14;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 0xCu);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_15;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 123), 0xDu);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x40000) == 0)
      goto LABEL_16;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 125), 0xEu);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x40000) == 0)
  {
LABEL_16:
    if ((v4 & 0x20) == 0)
      goto LABEL_17;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 92), 0xFu);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20) == 0)
  {
LABEL_17:
    if ((v4 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 0x10u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20000) == 0)
  {
LABEL_18:
    if ((v4 & 0x10) == 0)
      goto LABEL_19;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 0x11u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 0x12u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x400000) == 0)
      goto LABEL_21;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0x13u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x400000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(float *)(v3 + 108), 0x14u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x10000) == 0)
      goto LABEL_23;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 126), 0x15u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10000) == 0)
  {
LABEL_23:
    if ((v4 & 8) == 0)
      goto LABEL_24;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 0x16u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 8) == 0)
  {
LABEL_24:
    if ((v4 & 0x200) == 0)
      goto LABEL_25;
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 0x17u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200) == 0)
  {
LABEL_25:
    if ((v4 & 0x200000) == 0)
      goto LABEL_26;
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 0x18u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200000) == 0)
  {
LABEL_26:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_27;
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 0x19u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_27:
    if ((v4 & 0x800) == 0)
      goto LABEL_28;
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 121), 0x1Au);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x800) == 0)
  {
LABEL_28:
    if ((v4 & 1) == 0)
      goto LABEL_29;
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 0x1Bu);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 1) == 0)
  {
LABEL_29:
    if ((v4 & 2) == 0)
      goto LABEL_30;
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 0x1Cu);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 2) == 0)
  {
LABEL_30:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_31;
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 0x1Du);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x8000) == 0)
      goto LABEL_32;
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::write(a2, *(float *)(v3 + 116), 0x1Eu);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x8000) == 0)
  {
LABEL_32:
    if ((v4 & 0x8000000) == 0)
      return this;
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 122), 0x20u);
  }
LABEL_64:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0x1Fu);
  if ((*(_DWORD *)(v3 + 128) & 0x8000000) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 122), 0x20u);
  return this;
}

uint64_t CMMsl::RelativeDeviceMotionCorrelatedMotion::hash_value(CMMsl::RelativeDeviceMotionCorrelatedMotion *this)
{
  int v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  uint64_t v47;
  double v48;
  double v49;
  float v50;
  uint64_t v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v1 = *((_DWORD *)this + 32);
  if ((v1 & 4) == 0)
  {
    v57 = 0.0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_3;
LABEL_101:
    v3 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_7;
LABEL_102:
    v61 = 0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_10;
LABEL_103:
    v60 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_13;
LABEL_104:
    v59 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_16;
LABEL_105:
    v58 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_19;
LABEL_106:
    v13 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_23;
LABEL_107:
    v15 = 0;
    if ((v1 & 0x800000) != 0)
      goto LABEL_27;
LABEL_108:
    v17 = 0;
    if ((v1 & 0x20000000) != 0)
      goto LABEL_31;
    goto LABEL_109;
  }
  v55 = *((double *)this + 3);
  if (v55 == 0.0)
    v55 = 0.0;
  v57 = v55;
  if ((v1 & 0x100000) == 0)
    goto LABEL_101;
LABEL_3:
  v2 = *((float *)this + 25);
  if (v2 == 0.0)
    v3 = 0;
  else
    v3 = LODWORD(v2);
  if ((v1 & 0x80) == 0)
    goto LABEL_102;
LABEL_7:
  v4 = *((float *)this + 12);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  v61 = v5;
  if ((v1 & 0x80000) == 0)
    goto LABEL_103;
LABEL_10:
  v6 = *((float *)this + 24);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  v60 = v7;
  if ((v1 & 0x40) == 0)
    goto LABEL_104;
LABEL_13:
  v8 = *((float *)this + 11);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  v59 = v9;
  if ((v1 & 0x4000) == 0)
    goto LABEL_105;
LABEL_16:
  v10 = *((float *)this + 19);
  v11 = LODWORD(v10);
  if (v10 == 0.0)
    v11 = 0;
  v58 = v11;
  if ((v1 & 0x2000) == 0)
    goto LABEL_106;
LABEL_19:
  v12 = *((float *)this + 18);
  if (v12 == 0.0)
    v13 = 0;
  else
    v13 = LODWORD(v12);
  if ((v1 & 0x1000) == 0)
    goto LABEL_107;
LABEL_23:
  v14 = *((float *)this + 17);
  if (v14 == 0.0)
    v15 = 0;
  else
    v15 = LODWORD(v14);
  if ((v1 & 0x800000) == 0)
    goto LABEL_108;
LABEL_27:
  v16 = *((float *)this + 28);
  if (v16 == 0.0)
    v17 = 0;
  else
    v17 = LODWORD(v16);
  if ((v1 & 0x20000000) != 0)
  {
LABEL_31:
    v18 = *((unsigned __int8 *)this + 124);
    if ((v1 & 0x2000000) != 0)
      goto LABEL_32;
    goto LABEL_110;
  }
LABEL_109:
  v18 = 0;
  if ((v1 & 0x2000000) != 0)
  {
LABEL_32:
    v19 = *((unsigned __int8 *)this + 120);
    if ((v1 & 0x400) != 0)
      goto LABEL_33;
LABEL_111:
    v21 = 0;
    if ((v1 & 0x10000000) != 0)
      goto LABEL_37;
    goto LABEL_112;
  }
LABEL_110:
  v19 = 0;
  if ((v1 & 0x400) == 0)
    goto LABEL_111;
LABEL_33:
  v20 = *((float *)this + 15);
  if (v20 == 0.0)
    v21 = 0;
  else
    v21 = LODWORD(v20);
  if ((v1 & 0x10000000) != 0)
  {
LABEL_37:
    v22 = *((unsigned __int8 *)this + 123);
    if ((v1 & 0x40000000) != 0)
      goto LABEL_38;
    goto LABEL_113;
  }
LABEL_112:
  v22 = 0;
  if ((v1 & 0x40000000) != 0)
  {
LABEL_38:
    v23 = *((unsigned __int8 *)this + 125);
    if ((v1 & 0x40000) != 0)
      goto LABEL_39;
LABEL_114:
    v25 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_43;
LABEL_115:
    v27 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_47;
LABEL_116:
    v29 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_51;
LABEL_117:
    v31 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_55;
LABEL_118:
    v33 = 0;
    if ((v1 & 0x400000) != 0)
      goto LABEL_59;
LABEL_119:
    v35 = 0;
    if (v1 < 0)
      goto LABEL_63;
    goto LABEL_120;
  }
LABEL_113:
  v23 = 0;
  if ((v1 & 0x40000) == 0)
    goto LABEL_114;
LABEL_39:
  v24 = *((float *)this + 23);
  if (v24 == 0.0)
    v25 = 0;
  else
    v25 = LODWORD(v24);
  if ((v1 & 0x20) == 0)
    goto LABEL_115;
LABEL_43:
  v26 = *((float *)this + 10);
  if (v26 == 0.0)
    v27 = 0;
  else
    v27 = LODWORD(v26);
  if ((v1 & 0x20000) == 0)
    goto LABEL_116;
LABEL_47:
  v28 = *((float *)this + 22);
  if (v28 == 0.0)
    v29 = 0;
  else
    v29 = LODWORD(v28);
  if ((v1 & 0x10) == 0)
    goto LABEL_117;
LABEL_51:
  v30 = *((float *)this + 9);
  if (v30 == 0.0)
    v31 = 0;
  else
    v31 = LODWORD(v30);
  if ((v1 & 0x100) == 0)
    goto LABEL_118;
LABEL_55:
  v32 = *((float *)this + 13);
  if (v32 == 0.0)
    v33 = 0;
  else
    v33 = LODWORD(v32);
  if ((v1 & 0x400000) == 0)
    goto LABEL_119;
LABEL_59:
  v34 = *((float *)this + 27);
  if (v34 == 0.0)
    v35 = 0;
  else
    v35 = LODWORD(v34);
  if (v1 < 0)
  {
LABEL_63:
    v36 = *((unsigned __int8 *)this + 126);
    if ((v1 & 0x10000) != 0)
      goto LABEL_64;
LABEL_121:
    v38 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_68;
LABEL_122:
    v40 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_72;
LABEL_123:
    v42 = 0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_76;
LABEL_124:
    v44 = 0;
    if ((v1 & 0x4000000) != 0)
      goto LABEL_80;
    goto LABEL_125;
  }
LABEL_120:
  v36 = 0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_121;
LABEL_64:
  v37 = *((float *)this + 21);
  if (v37 == 0.0)
    v38 = 0;
  else
    v38 = LODWORD(v37);
  if ((v1 & 8) == 0)
    goto LABEL_122;
LABEL_68:
  v39 = *((float *)this + 8);
  if (v39 == 0.0)
    v40 = 0;
  else
    v40 = LODWORD(v39);
  if ((v1 & 0x200) == 0)
    goto LABEL_123;
LABEL_72:
  v41 = *((float *)this + 14);
  if (v41 == 0.0)
    v42 = 0;
  else
    v42 = LODWORD(v41);
  if ((v1 & 0x200000) == 0)
    goto LABEL_124;
LABEL_76:
  v43 = *((float *)this + 26);
  if (v43 == 0.0)
    v44 = 0;
  else
    v44 = LODWORD(v43);
  if ((v1 & 0x4000000) != 0)
  {
LABEL_80:
    v45 = *((unsigned __int8 *)this + 121);
    if ((v1 & 0x800) != 0)
      goto LABEL_81;
LABEL_126:
    v47 = 0;
    if ((v1 & 1) != 0)
      goto LABEL_85;
LABEL_127:
    v48 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_88;
LABEL_128:
    v49 = 0.0;
    if ((v1 & 0x1000000) != 0)
      goto LABEL_91;
LABEL_129:
    v51 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_94;
    goto LABEL_130;
  }
LABEL_125:
  v45 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_126;
LABEL_81:
  v46 = *((float *)this + 16);
  if (v46 == 0.0)
    v47 = 0;
  else
    v47 = LODWORD(v46);
  if ((v1 & 1) == 0)
    goto LABEL_127;
LABEL_85:
  v48 = *((double *)this + 1);
  if (v48 == 0.0)
    v48 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_128;
LABEL_88:
  v49 = *((double *)this + 2);
  if (v49 == 0.0)
    v49 = 0.0;
  if ((v1 & 0x1000000) == 0)
    goto LABEL_129;
LABEL_91:
  v50 = *((float *)this + 29);
  v51 = LODWORD(v50);
  if (v50 == 0.0)
    v51 = 0;
  if ((v1 & 0x8000) != 0)
  {
LABEL_94:
    v52 = *((float *)this + 20);
    v53 = LODWORD(v52);
    if (v52 == 0.0)
      v53 = 0;
    if ((v1 & 0x8000000) != 0)
      goto LABEL_97;
LABEL_131:
    v54 = 0;
    return v3 ^ *(_QWORD *)&v57 ^ v61 ^ v60 ^ v59 ^ v58 ^ v13 ^ v15 ^ v17 ^ v18 ^ v19 ^ v21 ^ v22 ^ v23 ^ v25 ^ v27 ^ v29 ^ v31 ^ v33 ^ v35 ^ v36 ^ v38 ^ v40 ^ v42 ^ v44 ^ v45 ^ v47 ^ *(_QWORD *)&v48 ^ *(_QWORD *)&v49 ^ v51 ^ v53 ^ v54;
  }
LABEL_130:
  v53 = 0;
  if ((v1 & 0x8000000) == 0)
    goto LABEL_131;
LABEL_97:
  v54 = *((unsigned __int8 *)this + 122);
  return v3 ^ *(_QWORD *)&v57 ^ v61 ^ v60 ^ v59 ^ v58 ^ v13 ^ v15 ^ v17 ^ v18 ^ v19 ^ v21 ^ v22 ^ v23 ^ v25 ^ v27 ^ v29 ^ v31 ^ v33 ^ v35 ^ v36 ^ v38 ^ v40 ^ v42 ^ v44 ^ v45 ^ v47 ^ *(_QWORD *)&v48 ^ *(_QWORD *)&v49 ^ v51 ^ v53 ^ v54;
}

void CMMsl::RelativeDeviceMotionInternal::~RelativeDeviceMotionInternal(CMMsl::RelativeDeviceMotionInternal *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_100353EB0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::RelativeDeviceMotionInternal::~RelativeDeviceMotionInternal(this);
  operator delete();
}

CMMsl::RelativeDeviceMotionInternal *CMMsl::RelativeDeviceMotionInternal::RelativeDeviceMotionInternal(CMMsl::RelativeDeviceMotionInternal *this, const CMMsl::RelativeDeviceMotionInternal *a2)
{
  char *v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  char v24;
  char v25;
  char v26;
  int v27;
  int v28;
  int v29;
  char v30;
  char v31;
  char v32;
  int v33;
  int v34;
  char v35;
  char v36;
  char v37;
  uint64_t v38;
  int v39;
  char v40;

  *(_QWORD *)this = off_100353EB0;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *((_DWORD *)this + 41) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  v5 = *((_DWORD *)a2 + 41);
  if ((v5 & 2) != 0)
  {
    v7 = *((_QWORD *)a2 + 8);
    v6 = 2;
    *((_DWORD *)this + 41) = 2;
    *((_QWORD *)this + 8) = v7;
    v5 = *((_DWORD *)a2 + 41);
    if ((v5 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((v5 & 0x800) != 0)
  {
LABEL_5:
    v8 = *((_DWORD *)a2 + 27);
    v6 |= 0x800u;
    *((_DWORD *)this + 41) = v6;
    *((_DWORD *)this + 27) = v8;
    v5 = *((_DWORD *)a2 + 41);
  }
LABEL_6:
  if ((v5 & 0x1000) != 0)
  {
    v13 = *((_DWORD *)a2 + 28);
    v6 |= 0x1000u;
    *((_DWORD *)this + 41) = v6;
    *((_DWORD *)this + 28) = v13;
    v5 = *((_DWORD *)a2 + 41);
    if ((v5 & 0x2000) == 0)
    {
LABEL_8:
      if ((v5 & 0x4000) == 0)
        goto LABEL_9;
      goto LABEL_43;
    }
  }
  else if ((v5 & 0x2000) == 0)
  {
    goto LABEL_8;
  }
  v14 = *((_DWORD *)a2 + 29);
  v6 |= 0x2000u;
  *((_DWORD *)this + 41) = v6;
  *((_DWORD *)this + 29) = v14;
  v5 = *((_DWORD *)a2 + 41);
  if ((v5 & 0x4000) == 0)
  {
LABEL_9:
    if ((v5 & 0x8000) == 0)
      goto LABEL_10;
    goto LABEL_44;
  }
LABEL_43:
  v15 = *((_DWORD *)a2 + 30);
  v6 |= 0x4000u;
  *((_DWORD *)this + 41) = v6;
  *((_DWORD *)this + 30) = v15;
  v5 = *((_DWORD *)a2 + 41);
  if ((v5 & 0x8000) == 0)
  {
LABEL_10:
    if ((v5 & 0x10000) == 0)
      goto LABEL_11;
    goto LABEL_45;
  }
LABEL_44:
  v16 = *((_DWORD *)a2 + 31);
  v6 |= 0x8000u;
  *((_DWORD *)this + 41) = v6;
  *((_DWORD *)this + 31) = v16;
  v5 = *((_DWORD *)a2 + 41);
  if ((v5 & 0x10000) == 0)
  {
LABEL_11:
    if ((v5 & 0x80000) == 0)
      goto LABEL_12;
    goto LABEL_46;
  }
LABEL_45:
  v17 = *((_DWORD *)a2 + 32);
  v6 |= 0x10000u;
  *((_DWORD *)this + 41) = v6;
  *((_DWORD *)this + 32) = v17;
  v5 = *((_DWORD *)a2 + 41);
  if ((v5 & 0x80000) == 0)
  {
LABEL_12:
    if ((v5 & 0x100000) == 0)
      goto LABEL_13;
    goto LABEL_47;
  }
LABEL_46:
  v18 = *((_DWORD *)a2 + 35);
  v6 |= 0x80000u;
  *((_DWORD *)this + 41) = v6;
  *((_DWORD *)this + 35) = v18;
  v5 = *((_DWORD *)a2 + 41);
  if ((v5 & 0x100000) == 0)
  {
LABEL_13:
    if ((v5 & 0x200000) == 0)
      goto LABEL_14;
    goto LABEL_48;
  }
LABEL_47:
  v19 = *((_DWORD *)a2 + 36);
  v6 |= 0x100000u;
  *((_DWORD *)this + 41) = v6;
  *((_DWORD *)this + 36) = v19;
  v5 = *((_DWORD *)a2 + 41);
  if ((v5 & 0x200000) == 0)
  {
LABEL_14:
    if ((v5 & 0x100) == 0)
      goto LABEL_15;
    goto LABEL_49;
  }
LABEL_48:
  v20 = *((_DWORD *)a2 + 37);
  v6 |= 0x200000u;
  *((_DWORD *)this + 41) = v6;
  *((_DWORD *)this + 37) = v20;
  v5 = *((_DWORD *)a2 + 41);
  if ((v5 & 0x100) == 0)
  {
LABEL_15:
    if ((v5 & 0x200) == 0)
      goto LABEL_16;
    goto LABEL_50;
  }
LABEL_49:
  v21 = *((_DWORD *)a2 + 24);
  v6 |= 0x100u;
  *((_DWORD *)this + 41) = v6;
  *((_DWORD *)this + 24) = v21;
  v5 = *((_DWORD *)a2 + 41);
  if ((v5 & 0x200) == 0)
  {
LABEL_16:
    if ((v5 & 0x400) == 0)
      goto LABEL_17;
    goto LABEL_51;
  }
LABEL_50:
  v22 = *((_DWORD *)a2 + 25);
  v6 |= 0x200u;
  *((_DWORD *)this + 41) = v6;
  *((_DWORD *)this + 25) = v22;
  v5 = *((_DWORD *)a2 + 41);
  if ((v5 & 0x400) == 0)
  {
LABEL_17:
    if ((v5 & 0x80) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_51:
  v23 = *((_DWORD *)a2 + 26);
  v6 |= 0x400u;
  *((_DWORD *)this + 41) = v6;
  *((_DWORD *)this + 26) = v23;
  if ((*((_DWORD *)a2 + 41) & 0x80) != 0)
  {
LABEL_18:
    v9 = *((_DWORD *)a2 + 23);
    *((_DWORD *)this + 41) = v6 | 0x80;
    *((_DWORD *)this + 23) = v9;
  }
LABEL_19:
  if (this != a2)
  {
    sub_100020CE4((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
    sub_100020CE4(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  }
  v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x8000000) != 0)
  {
    v24 = *((_BYTE *)a2 + 157);
    *((_DWORD *)this + 41) |= 0x8000000u;
    *((_BYTE *)this + 157) = v24;
    v10 = *((_DWORD *)a2 + 41);
    if ((v10 & 0x400000) == 0)
    {
LABEL_23:
      if ((v10 & 0x1000000) == 0)
        goto LABEL_24;
      goto LABEL_55;
    }
  }
  else if ((v10 & 0x400000) == 0)
  {
    goto LABEL_23;
  }
  v25 = *((_BYTE *)a2 + 152);
  *((_DWORD *)this + 41) |= 0x400000u;
  *((_BYTE *)this + 152) = v25;
  v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v10 & 0x10) == 0)
      goto LABEL_25;
    goto LABEL_56;
  }
LABEL_55:
  v26 = *((_BYTE *)a2 + 154);
  *((_DWORD *)this + 41) |= 0x1000000u;
  *((_BYTE *)this + 154) = v26;
  v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x10) == 0)
  {
LABEL_25:
    if ((v10 & 8) == 0)
      goto LABEL_26;
    goto LABEL_57;
  }
LABEL_56:
  v27 = *((_DWORD *)a2 + 20);
  *((_DWORD *)this + 41) |= 0x10u;
  *((_DWORD *)this + 20) = v27;
  v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 8) == 0)
  {
LABEL_26:
    if ((v10 & 4) == 0)
      goto LABEL_27;
    goto LABEL_58;
  }
LABEL_57:
  v28 = *((_DWORD *)a2 + 19);
  *((_DWORD *)this + 41) |= 8u;
  *((_DWORD *)this + 19) = v28;
  v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 4) == 0)
  {
LABEL_27:
    if ((v10 & 0x20000000) == 0)
      goto LABEL_28;
    goto LABEL_59;
  }
LABEL_58:
  v29 = *((_DWORD *)a2 + 18);
  *((_DWORD *)this + 41) |= 4u;
  *((_DWORD *)this + 18) = v29;
  v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x20000000) == 0)
  {
LABEL_28:
    if ((v10 & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_60;
  }
LABEL_59:
  v30 = *((_BYTE *)a2 + 159);
  *((_DWORD *)this + 41) |= 0x20000000u;
  *((_BYTE *)this + 159) = v30;
  v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x80000000) == 0)
  {
LABEL_29:
    if ((v10 & 0x800000) == 0)
      goto LABEL_30;
    goto LABEL_61;
  }
LABEL_60:
  v31 = *((_BYTE *)a2 + 161);
  *((_DWORD *)this + 41) |= 0x80000000;
  *((_BYTE *)this + 161) = v31;
  v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x800000) == 0)
  {
LABEL_30:
    if ((v10 & 0x20) == 0)
      goto LABEL_31;
    goto LABEL_62;
  }
LABEL_61:
  v32 = *((_BYTE *)a2 + 153);
  *((_DWORD *)this + 41) |= 0x800000u;
  *((_BYTE *)this + 153) = v32;
  v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x20) == 0)
  {
LABEL_31:
    if ((v10 & 0x40000) == 0)
      goto LABEL_32;
    goto LABEL_63;
  }
LABEL_62:
  v33 = *((_DWORD *)a2 + 21);
  *((_DWORD *)this + 41) |= 0x20u;
  *((_DWORD *)this + 21) = v33;
  v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x40000) == 0)
  {
LABEL_32:
    if ((v10 & 0x10000000) == 0)
      goto LABEL_33;
    goto LABEL_64;
  }
LABEL_63:
  v34 = *((_DWORD *)a2 + 34);
  *((_DWORD *)this + 41) |= 0x40000u;
  *((_DWORD *)this + 34) = v34;
  v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x10000000) == 0)
  {
LABEL_33:
    if ((v10 & 0x4000000) == 0)
      goto LABEL_34;
    goto LABEL_65;
  }
LABEL_64:
  v35 = *((_BYTE *)a2 + 158);
  *((_DWORD *)this + 41) |= 0x10000000u;
  *((_BYTE *)this + 158) = v35;
  v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x4000000) == 0)
  {
LABEL_34:
    if ((v10 & 0x40000000) == 0)
      goto LABEL_35;
    goto LABEL_66;
  }
LABEL_65:
  v36 = *((_BYTE *)a2 + 156);
  *((_DWORD *)this + 41) |= 0x4000000u;
  *((_BYTE *)this + 156) = v36;
  v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x40000000) == 0)
  {
LABEL_35:
    if ((v10 & 1) == 0)
      goto LABEL_36;
    goto LABEL_67;
  }
LABEL_66:
  v37 = *((_BYTE *)a2 + 160);
  *((_DWORD *)this + 41) |= 0x40000000u;
  *((_BYTE *)this + 160) = v37;
  v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 1) == 0)
  {
LABEL_36:
    if ((v10 & 0x40) == 0)
      goto LABEL_37;
    goto LABEL_68;
  }
LABEL_67:
  v38 = *((_QWORD *)a2 + 7);
  *((_DWORD *)this + 41) |= 1u;
  *((_QWORD *)this + 7) = v38;
  v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x40) == 0)
  {
LABEL_37:
    if ((v10 & 0x2000000) == 0)
      goto LABEL_38;
LABEL_69:
    v40 = *((_BYTE *)a2 + 155);
    *((_DWORD *)this + 41) |= 0x2000000u;
    *((_BYTE *)this + 155) = v40;
    if ((*((_DWORD *)a2 + 41) & 0x20000) == 0)
      return this;
    goto LABEL_39;
  }
LABEL_68:
  v39 = *((_DWORD *)a2 + 22);
  *((_DWORD *)this + 41) |= 0x40u;
  *((_DWORD *)this + 22) = v39;
  v10 = *((_DWORD *)a2 + 41);
  if ((v10 & 0x2000000) != 0)
    goto LABEL_69;
LABEL_38:
  if ((v10 & 0x20000) != 0)
  {
LABEL_39:
    v11 = *((_DWORD *)a2 + 33);
    *((_DWORD *)this + 41) |= 0x20000u;
    *((_DWORD *)this + 33) = v11;
  }
  return this;
}

CMMsl *CMMsl::RelativeDeviceMotionInternal::operator=(CMMsl *a1, const CMMsl::RelativeDeviceMotionInternal *a2)
{
  CMMsl::RelativeDeviceMotionInternal *v3;
  _BYTE v5[168];

  if (a1 != a2)
  {
    CMMsl::RelativeDeviceMotionInternal::RelativeDeviceMotionInternal((CMMsl::RelativeDeviceMotionInternal *)v5, a2);
    CMMsl::swap(a1, (CMMsl::RelativeDeviceMotionInternal *)v5, v3);
    CMMsl::RelativeDeviceMotionInternal::~RelativeDeviceMotionInternal((CMMsl::RelativeDeviceMotionInternal *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RelativeDeviceMotionInternal *a2, CMMsl::RelativeDeviceMotionInternal *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;

  v3 = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v3;
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v4;
  LODWORD(v4) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v4;
  LODWORD(v4) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v4;
  LODWORD(v4) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v4;
  LODWORD(v4) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v4;
  LODWORD(v4) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v4;
  LODWORD(v4) = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v4;
  LODWORD(v4) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v4;
  LODWORD(v4) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v4;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LODWORD(v4) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v4;
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  v6 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v6;
  v7 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v7;
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v9;
  v10 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v10;
  LOBYTE(v10) = *((_BYTE *)this + 157);
  *((_BYTE *)this + 157) = *((_BYTE *)a2 + 157);
  *((_BYTE *)a2 + 157) = v10;
  LOBYTE(v10) = *((_BYTE *)this + 152);
  *((_BYTE *)this + 152) = *((_BYTE *)a2 + 152);
  *((_BYTE *)a2 + 152) = v10;
  LOBYTE(v10) = *((_BYTE *)this + 154);
  *((_BYTE *)this + 154) = *((_BYTE *)a2 + 154);
  *((_BYTE *)a2 + 154) = v10;
  LODWORD(v4) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v4;
  LODWORD(v4) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v4;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  LOBYTE(v10) = *((_BYTE *)this + 159);
  *((_BYTE *)this + 159) = *((_BYTE *)a2 + 159);
  *((_BYTE *)a2 + 159) = v10;
  LOBYTE(v10) = *((_BYTE *)this + 161);
  *((_BYTE *)this + 161) = *((_BYTE *)a2 + 161);
  *((_BYTE *)a2 + 161) = v10;
  LOBYTE(v10) = *((_BYTE *)this + 153);
  *((_BYTE *)this + 153) = *((_BYTE *)a2 + 153);
  *((_BYTE *)a2 + 153) = v10;
  LODWORD(v4) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  LODWORD(v10) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v10;
  LOBYTE(v10) = *((_BYTE *)this + 158);
  *((_BYTE *)this + 158) = *((_BYTE *)a2 + 158);
  *((_BYTE *)a2 + 158) = v10;
  LOBYTE(v10) = *((_BYTE *)this + 156);
  *((_BYTE *)this + 156) = *((_BYTE *)a2 + 156);
  *((_BYTE *)a2 + 156) = v10;
  LOBYTE(v10) = *((_BYTE *)this + 160);
  *((_BYTE *)this + 160) = *((_BYTE *)a2 + 160);
  *((_BYTE *)a2 + 160) = v10;
  result = *((double *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((double *)a2 + 7) = result;
  LODWORD(v10) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v10;
  LOBYTE(v10) = *((_BYTE *)this + 155);
  *((_BYTE *)this + 155) = *((_BYTE *)a2 + 155);
  *((_BYTE *)a2 + 155) = v10;
  LODWORD(v10) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v10;
  return result;
}

uint64_t CMMsl::RelativeDeviceMotionInternal::RelativeDeviceMotionInternal(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_100353EB0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a2 + 164) = 0;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  sub_100239458(a1 + 32, (__n128 *)(a2 + 32));
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  *(_BYTE *)(a1 + 157) = *(_BYTE *)(a2 + 157);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_BYTE *)(a1 + 154) = *(_BYTE *)(a2 + 154);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 159) = *(_BYTE *)(a2 + 159);
  *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
  *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 158) = *(_BYTE *)(a2 + 158);
  *(_BYTE *)(a1 + 156) = *(_BYTE *)(a2 + 156);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 155) = *(_BYTE *)(a2 + 155);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  return a1;
}

CMMsl *CMMsl::RelativeDeviceMotionInternal::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::RelativeDeviceMotionInternal *v3;
  _BYTE v5[168];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::RelativeDeviceMotionInternal::RelativeDeviceMotionInternal((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RelativeDeviceMotionInternal *)v5, v3);
    CMMsl::RelativeDeviceMotionInternal::~RelativeDeviceMotionInternal((CMMsl::RelativeDeviceMotionInternal *)v5);
  }
  return a1;
}

uint64_t CMMsl::RelativeDeviceMotionInternal::formatText(CMMsl::RelativeDeviceMotionInternal *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;
  float *v6;
  float *v7;
  float v8;
  int v9;
  float *v10;
  float *v11;
  float v12;
  int v13;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 41);
  if ((v5 & 0x400000) != 0)
  {
    PB::TextFormatter::format(a2, "btz", *((_BYTE *)this + 152));
    v5 = *((_DWORD *)this + 41);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 0x800000) == 0)
        goto LABEL_4;
      goto LABEL_43;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "btzDisturbanceDuration", *((float *)this + 18));
  v5 = *((_DWORD *)this + 41);
  if ((v5 & 0x800000) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "btzIsCurrentlyQuiescent", *((_BYTE *)this + 153));
  v5 = *((_DWORD *)this + 41);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "btzQuiescentDurationLoose", *((float *)this + 19));
  v5 = *((_DWORD *)this + 41);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "btzQuiescentDurationStrict", *((float *)this + 20));
  v5 = *((_DWORD *)this + 41);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_8;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "btzStaticPoseDuration", *((float *)this + 21));
  v5 = *((_DWORD *)this + 41);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_8:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_9;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "centeredBoresight", *((_BYTE *)this + 154));
  v5 = *((_DWORD *)this + 41);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "centeredBoresightInHighDynamics", *((_BYTE *)this + 155));
  v5 = *((_DWORD *)this + 41);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "clientMode", *((_DWORD *)this + 22));
  if ((*((_DWORD *)this + 41) & 0x4000000) != 0)
LABEL_11:
    PB::TextFormatter::format(a2, "inComplexTransitionState", *((_BYTE *)this + 156));
LABEL_12:
  v6 = (float *)*((_QWORD *)this + 1);
  v7 = (float *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "noiseVariance", v8);
  }
  v9 = *((_DWORD *)this + 41);
  if ((v9 & 0x8000000) != 0)
  {
    PB::TextFormatter::format(a2, "pinnedBoresight", *((_BYTE *)this + 157));
    v9 = *((_DWORD *)this + 41);
    if ((v9 & 0x80) == 0)
    {
LABEL_16:
      if ((v9 & 0x100) == 0)
        goto LABEL_17;
      goto LABEL_53;
    }
  }
  else if ((v9 & 0x80) == 0)
  {
    goto LABEL_16;
  }
  PB::TextFormatter::format(a2, "qHat_W", *((float *)this + 23));
  v9 = *((_DWORD *)this + 41);
  if ((v9 & 0x100) == 0)
  {
LABEL_17:
    if ((v9 & 0x200) == 0)
      goto LABEL_18;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "qHat_X", *((float *)this + 24));
  v9 = *((_DWORD *)this + 41);
  if ((v9 & 0x200) == 0)
  {
LABEL_18:
    if ((v9 & 0x400) == 0)
      goto LABEL_19;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "qHat_Y", *((float *)this + 25));
  v9 = *((_DWORD *)this + 41);
  if ((v9 & 0x400) == 0)
  {
LABEL_19:
    if ((v9 & 0x800) == 0)
      goto LABEL_20;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "qHat_Z", *((float *)this + 26));
  v9 = *((_DWORD *)this + 41);
  if ((v9 & 0x800) == 0)
  {
LABEL_20:
    if ((v9 & 0x1000) == 0)
      goto LABEL_21;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "rBoresight_X", *((float *)this + 27));
  v9 = *((_DWORD *)this + 41);
  if ((v9 & 0x1000) == 0)
  {
LABEL_21:
    if ((v9 & 0x2000) == 0)
      goto LABEL_22;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "rBoresight_Y", *((float *)this + 28));
  v9 = *((_DWORD *)this + 41);
  if ((v9 & 0x2000) == 0)
  {
LABEL_22:
    if ((v9 & 0x4000) == 0)
      goto LABEL_23;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "rBoresight_Z", *((float *)this + 29));
  v9 = *((_DWORD *)this + 41);
  if ((v9 & 0x4000) == 0)
  {
LABEL_23:
    if ((v9 & 0x8000) == 0)
      goto LABEL_24;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "rHat_X", *((float *)this + 30));
  v9 = *((_DWORD *)this + 41);
  if ((v9 & 0x8000) == 0)
  {
LABEL_24:
    if ((v9 & 0x10000) == 0)
      goto LABEL_25;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "rHat_Y", *((float *)this + 31));
  v9 = *((_DWORD *)this + 41);
  if ((v9 & 0x10000) == 0)
  {
LABEL_25:
    if ((v9 & 0x10000000) == 0)
      goto LABEL_26;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "rHat_Z", *((float *)this + 32));
  v9 = *((_DWORD *)this + 41);
  if ((v9 & 0x10000000) == 0)
  {
LABEL_26:
    if ((v9 & 1) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "requestingCamera", *((_BYTE *)this + 158));
  if ((*((_DWORD *)this + 41) & 1) != 0)
LABEL_27:
    PB::TextFormatter::format(a2, "srcTimestamp", *((double *)this + 7));
LABEL_28:
  v10 = (float *)*((_QWORD *)this + 4);
  v11 = (float *)*((_QWORD *)this + 5);
  while (v10 != v11)
  {
    v12 = *v10++;
    PB::TextFormatter::format(a2, "stateVariance", v12);
  }
  v13 = *((_DWORD *)this + 41);
  if ((v13 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 8));
    v13 = *((_DWORD *)this + 41);
    if ((v13 & 0x20000000) == 0)
    {
LABEL_32:
      if ((v13 & 0x20000) == 0)
        goto LABEL_33;
      goto LABEL_66;
    }
  }
  else if ((v13 & 0x20000000) == 0)
  {
    goto LABEL_32;
  }
  PB::TextFormatter::format(a2, "tracking1IMU", *((_BYTE *)this + 159));
  v13 = *((_DWORD *)this + 41);
  if ((v13 & 0x20000) == 0)
  {
LABEL_33:
    if ((v13 & 0x40000000) == 0)
      goto LABEL_34;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "trackingBehavior", *((_DWORD *)this + 33));
  v13 = *((_DWORD *)this + 41);
  if ((v13 & 0x40000000) == 0)
  {
LABEL_34:
    if ((v13 & 0x40000) == 0)
      goto LABEL_35;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "trackingDisabled", *((_BYTE *)this + 160));
  v13 = *((_DWORD *)this + 41);
  if ((v13 & 0x40000) == 0)
  {
LABEL_35:
    if ((v13 & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "trackingScheme", *((_DWORD *)this + 34));
  v13 = *((_DWORD *)this + 41);
  if ((v13 & 0x80000000) == 0)
  {
LABEL_36:
    if ((v13 & 0x80000) == 0)
      goto LABEL_37;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "useRelaxedQuiescenceBounds", *((_BYTE *)this + 161));
  v13 = *((_DWORD *)this + 41);
  if ((v13 & 0x80000) == 0)
  {
LABEL_37:
    if ((v13 & 0x100000) == 0)
      goto LABEL_38;
LABEL_71:
    PB::TextFormatter::format(a2, "vHat_Y", *((float *)this + 36));
    if ((*((_DWORD *)this + 41) & 0x200000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_39;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "vHat_X", *((float *)this + 35));
  v13 = *((_DWORD *)this + 41);
  if ((v13 & 0x100000) != 0)
    goto LABEL_71;
LABEL_38:
  if ((v13 & 0x200000) != 0)
LABEL_39:
    PB::TextFormatter::format(a2, "vHat_Z", *((float *)this + 37));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::RelativeDeviceMotionInternal::readFrom(CMMsl::RelativeDeviceMotionInternal *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  char *v9;
  void **v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  _DWORD *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  _DWORD *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  int v69;
  BOOL v70;
  unint64_t v71;
  unint64_t v72;
  int v73;
  BOOL v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  BOOL v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  int v84;
  BOOL v85;
  unint64_t v86;
  unint64_t v87;
  int v88;
  BOOL v89;
  unint64_t v90;
  unint64_t v91;
  int v92;
  BOOL v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  char v98;
  unsigned int v99;
  uint64_t v100;
  unint64_t v101;
  char v102;
  unint64_t v103;
  unint64_t v104;
  int v105;
  BOOL v106;
  unint64_t v107;
  unint64_t v108;
  int v109;
  BOOL v110;
  unint64_t v111;
  unint64_t v112;
  int v113;
  BOOL v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  char v120;
  unsigned int v121;
  uint64_t v122;
  unint64_t v123;
  char v124;
  unint64_t v125;
  unint64_t v126;
  int v127;
  BOOL v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  char v132;
  unsigned int v133;
  uint64_t v134;
  unint64_t v135;
  char v136;
  unint64_t v137;
  char *v138;
  _DWORD *v139;
  unint64_t v140;
  char *v141;
  char v142;
  unsigned int v143;
  unint64_t v144;
  char v145;
  char v146;
  unsigned int v147;
  unint64_t v148;
  char v149;
  char v150;
  unsigned int v151;
  unint64_t v152;
  char v153;
  char *v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  char *v165;
  char *v166;
  int v167;
  char *v168;
  int v169;
  unint64_t v170;
  _BYTE v173[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 8);
    v9 = (char *)this + 24;
    v10 = (void **)((char *)this + 32);
    v11 = (char *)this + 48;
    while (1)
    {
      v12 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *((_DWORD *)this + 41) |= 2u;
          v25 = *((_QWORD *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_263;
          *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v25);
          goto LABEL_153;
        case 2u:
          *((_DWORD *)this + 41) |= 0x800u;
          v26 = *((_QWORD *)a2 + 1);
          if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_263;
          *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v26);
          goto LABEL_265;
        case 3u:
          *((_DWORD *)this + 41) |= 0x1000u;
          v27 = *((_QWORD *)a2 + 1);
          if (v27 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_263;
          *((_DWORD *)this + 28) = *(_DWORD *)(*(_QWORD *)a2 + v27);
          goto LABEL_265;
        case 4u:
          *((_DWORD *)this + 41) |= 0x2000u;
          v28 = *((_QWORD *)a2 + 1);
          if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_263;
          *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v28);
          goto LABEL_265;
        case 5u:
          *((_DWORD *)this + 41) |= 0x4000u;
          v29 = *((_QWORD *)a2 + 1);
          if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_263;
          *((_DWORD *)this + 30) = *(_DWORD *)(*(_QWORD *)a2 + v29);
          goto LABEL_265;
        case 6u:
          *((_DWORD *)this + 41) |= 0x8000u;
          v30 = *((_QWORD *)a2 + 1);
          if (v30 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_263;
          *((_DWORD *)this + 31) = *(_DWORD *)(*(_QWORD *)a2 + v30);
          goto LABEL_265;
        case 7u:
          *((_DWORD *)this + 41) |= 0x10000u;
          v31 = *((_QWORD *)a2 + 1);
          if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_263;
          *((_DWORD *)this + 32) = *(_DWORD *)(*(_QWORD *)a2 + v31);
          goto LABEL_265;
        case 8u:
          *((_DWORD *)this + 41) |= 0x80000u;
          v32 = *((_QWORD *)a2 + 1);
          if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_263;
          *((_DWORD *)this + 35) = *(_DWORD *)(*(_QWORD *)a2 + v32);
          goto LABEL_265;
        case 9u:
          *((_DWORD *)this + 41) |= 0x100000u;
          v33 = *((_QWORD *)a2 + 1);
          if (v33 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_263;
          *((_DWORD *)this + 36) = *(_DWORD *)(*(_QWORD *)a2 + v33);
          goto LABEL_265;
        case 0xAu:
          *((_DWORD *)this + 41) |= 0x200000u;
          v34 = *((_QWORD *)a2 + 1);
          if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_263;
          *((_DWORD *)this + 37) = *(_DWORD *)(*(_QWORD *)a2 + v34);
          goto LABEL_265;
        case 0xBu:
          *((_DWORD *)this + 41) |= 0x100u;
          v35 = *((_QWORD *)a2 + 1);
          if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_263;
          *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v35);
          goto LABEL_265;
        case 0xCu:
          *((_DWORD *)this + 41) |= 0x200u;
          v36 = *((_QWORD *)a2 + 1);
          if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_263;
          *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v36);
          goto LABEL_265;
        case 0xDu:
          *((_DWORD *)this + 41) |= 0x400u;
          v37 = *((_QWORD *)a2 + 1);
          if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_263;
          *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v37);
          goto LABEL_265;
        case 0xEu:
          *((_DWORD *)this + 41) |= 0x80u;
          v38 = *((_QWORD *)a2 + 1);
          if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_263;
          *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v38);
          goto LABEL_265;
        case 0xFu:
          if (v24 != 2)
          {
            v138 = (char *)*((_QWORD *)this + 5);
            v137 = *((_QWORD *)this + 6);
            if ((unint64_t)v138 >= v137)
            {
              v154 = (char *)*v10;
              v155 = (v138 - (_BYTE *)*v10) >> 2;
              v156 = v155 + 1;
              if ((unint64_t)(v155 + 1) >> 62)
LABEL_277:
                sub_10000D5F8();
              v157 = v137 - (_QWORD)v154;
              if (v157 >> 1 > v156)
                v156 = v157 >> 1;
              if ((unint64_t)v157 >= 0x7FFFFFFFFFFFFFFCLL)
                v158 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v158 = v156;
              if (v158)
              {
                v159 = (char *)sub_100020E2C((uint64_t)v11, v158);
                v154 = (char *)*((_QWORD *)this + 4);
                v138 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v159 = 0;
              }
              v166 = &v159[4 * v155];
              *(_DWORD *)v166 = 0;
              v139 = v166 + 4;
              while (v138 != v154)
              {
                v167 = *((_DWORD *)v138 - 1);
                v138 -= 4;
                *((_DWORD *)v166 - 1) = v167;
                v166 -= 4;
              }
              *((_QWORD *)this + 4) = v166;
              *((_QWORD *)this + 5) = v139;
              *((_QWORD *)this + 6) = &v159[4 * v158];
              if (v154)
                operator delete(v154);
            }
            else
            {
              *(_DWORD *)v138 = 0;
              v139 = v138 + 4;
            }
            *((_QWORD *)this + 5) = v139;
            goto LABEL_261;
          }
          if ((PB::Reader::placeMark(a2, v173) & 1) != 0)
            return 0;
          v39 = *((_QWORD *)a2 + 1);
          v40 = *((_QWORD *)a2 + 2);
          while (v39 < v40 && !*((_BYTE *)a2 + 24))
          {
            v42 = (char *)*((_QWORD *)this + 5);
            v41 = *((_QWORD *)this + 6);
            if ((unint64_t)v42 >= v41)
            {
              v44 = (char *)*v10;
              v45 = (v42 - (_BYTE *)*v10) >> 2;
              v46 = v45 + 1;
              if ((unint64_t)(v45 + 1) >> 62)
                goto LABEL_277;
              v47 = v41 - (_QWORD)v44;
              if (v47 >> 1 > v46)
                v46 = v47 >> 1;
              if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
                v48 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v48 = v46;
              if (v48)
              {
                v49 = (char *)sub_100020E2C((uint64_t)v11, v48);
                v44 = (char *)*((_QWORD *)this + 4);
                v42 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v49 = 0;
              }
              v50 = &v49[4 * v45];
              *(_DWORD *)v50 = 0;
              v43 = v50 + 4;
              while (v42 != v44)
              {
                v51 = *((_DWORD *)v42 - 1);
                v42 -= 4;
                *((_DWORD *)v50 - 1) = v51;
                v50 -= 4;
              }
              *((_QWORD *)this + 4) = v50;
              *((_QWORD *)this + 5) = v43;
              *((_QWORD *)this + 6) = &v49[4 * v48];
              if (v44)
                operator delete(v44);
            }
            else
            {
              *(_DWORD *)v42 = 0;
              v43 = v42 + 4;
            }
            *((_QWORD *)this + 5) = v43;
            v52 = *((_QWORD *)a2 + 1);
            if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_217;
            *(v43 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v52);
            v40 = *((_QWORD *)a2 + 2);
            v39 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v39;
          }
          goto LABEL_218;
        case 0x10u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark(a2, v173) & 1) != 0)
              return 0;
            v53 = *((_QWORD *)a2 + 1);
            v54 = *((_QWORD *)a2 + 2);
            while (v53 < v54 && !*((_BYTE *)a2 + 24))
            {
              v56 = (char *)*((_QWORD *)this + 2);
              v55 = *((_QWORD *)this + 3);
              if ((unint64_t)v56 >= v55)
              {
                v58 = (char *)*v8;
                v59 = (v56 - (_BYTE *)*v8) >> 2;
                v60 = v59 + 1;
                if ((unint64_t)(v59 + 1) >> 62)
                  goto LABEL_278;
                v61 = v55 - (_QWORD)v58;
                if (v61 >> 1 > v60)
                  v60 = v61 >> 1;
                if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
                  v62 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v62 = v60;
                if (v62)
                {
                  v63 = (char *)sub_100020E2C((uint64_t)v9, v62);
                  v58 = (char *)*((_QWORD *)this + 1);
                  v56 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v63 = 0;
                }
                v64 = &v63[4 * v59];
                *(_DWORD *)v64 = 0;
                v57 = v64 + 4;
                while (v56 != v58)
                {
                  v65 = *((_DWORD *)v56 - 1);
                  v56 -= 4;
                  *((_DWORD *)v64 - 1) = v65;
                  v64 -= 4;
                }
                *((_QWORD *)this + 1) = v64;
                *((_QWORD *)this + 2) = v57;
                *((_QWORD *)this + 3) = &v63[4 * v62];
                if (v58)
                  operator delete(v58);
              }
              else
              {
                *(_DWORD *)v56 = 0;
                v57 = v56 + 4;
              }
              *((_QWORD *)this + 2) = v57;
              v66 = *((_QWORD *)a2 + 1);
              if (v66 > 0xFFFFFFFFFFFFFFFBLL || v66 + 4 > *((_QWORD *)a2 + 2))
              {
LABEL_217:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v57 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v66);
              v54 = *((_QWORD *)a2 + 2);
              v53 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v53;
            }
LABEL_218:
            PB::Reader::recallMark(a2, v173);
          }
          else
          {
            v141 = (char *)*((_QWORD *)this + 2);
            v140 = *((_QWORD *)this + 3);
            if ((unint64_t)v141 >= v140)
            {
              v160 = (char *)*v8;
              v161 = (v141 - (_BYTE *)*v8) >> 2;
              v162 = v161 + 1;
              if ((unint64_t)(v161 + 1) >> 62)
LABEL_278:
                sub_10000D5F8();
              v163 = v140 - (_QWORD)v160;
              if (v163 >> 1 > v162)
                v162 = v163 >> 1;
              if ((unint64_t)v163 >= 0x7FFFFFFFFFFFFFFCLL)
                v164 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v164 = v162;
              if (v164)
              {
                v165 = (char *)sub_100020E2C((uint64_t)v9, v164);
                v160 = (char *)*((_QWORD *)this + 1);
                v141 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v165 = 0;
              }
              v168 = &v165[4 * v161];
              *(_DWORD *)v168 = 0;
              v139 = v168 + 4;
              while (v141 != v160)
              {
                v169 = *((_DWORD *)v141 - 1);
                v141 -= 4;
                *((_DWORD *)v168 - 1) = v169;
                v168 -= 4;
              }
              *((_QWORD *)this + 1) = v168;
              *((_QWORD *)this + 2) = v139;
              *((_QWORD *)this + 3) = &v165[4 * v164];
              if (v160)
                operator delete(v160);
            }
            else
            {
              *(_DWORD *)v141 = 0;
              v139 = v141 + 4;
            }
            *((_QWORD *)this + 2) = v139;
LABEL_261:
            v170 = *((_QWORD *)a2 + 1);
            if (v170 <= 0xFFFFFFFFFFFFFFFBLL && v170 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v139 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v170);
LABEL_265:
              v116 = *((_QWORD *)a2 + 1) + 4;
LABEL_266:
              *((_QWORD *)a2 + 1) = v116;
            }
            else
            {
LABEL_263:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_267:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 0x11u:
          *((_DWORD *)this + 41) |= 0x8000000u;
          v67 = *((_QWORD *)a2 + 1);
          if (v67 >= *((_QWORD *)a2 + 2))
          {
            v70 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v68 = v67 + 1;
            v69 = *(unsigned __int8 *)(*(_QWORD *)a2 + v67);
            *((_QWORD *)a2 + 1) = v68;
            v70 = v69 != 0;
          }
          *((_BYTE *)this + 157) = v70;
          goto LABEL_267;
        case 0x12u:
          *((_DWORD *)this + 41) |= 0x400000u;
          v71 = *((_QWORD *)a2 + 1);
          if (v71 >= *((_QWORD *)a2 + 2))
          {
            v74 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v72 = v71 + 1;
            v73 = *(unsigned __int8 *)(*(_QWORD *)a2 + v71);
            *((_QWORD *)a2 + 1) = v72;
            v74 = v73 != 0;
          }
          *((_BYTE *)this + 152) = v74;
          goto LABEL_267;
        case 0x13u:
          *((_DWORD *)this + 41) |= 0x1000000u;
          v75 = *((_QWORD *)a2 + 1);
          if (v75 >= *((_QWORD *)a2 + 2))
          {
            v78 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v76 = v75 + 1;
            v77 = *(unsigned __int8 *)(*(_QWORD *)a2 + v75);
            *((_QWORD *)a2 + 1) = v76;
            v78 = v77 != 0;
          }
          *((_BYTE *)this + 154) = v78;
          goto LABEL_267;
        case 0x14u:
          *((_DWORD *)this + 41) |= 0x10u;
          v79 = *((_QWORD *)a2 + 1);
          if (v79 > 0xFFFFFFFFFFFFFFFBLL || v79 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_263;
          *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v79);
          goto LABEL_265;
        case 0x15u:
          *((_DWORD *)this + 41) |= 8u;
          v80 = *((_QWORD *)a2 + 1);
          if (v80 > 0xFFFFFFFFFFFFFFFBLL || v80 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_263;
          *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v80);
          goto LABEL_265;
        case 0x16u:
          *((_DWORD *)this + 41) |= 4u;
          v81 = *((_QWORD *)a2 + 1);
          if (v81 > 0xFFFFFFFFFFFFFFFBLL || v81 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_263;
          *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v81);
          goto LABEL_265;
        case 0x17u:
          *((_DWORD *)this + 41) |= 0x20000000u;
          v82 = *((_QWORD *)a2 + 1);
          if (v82 >= *((_QWORD *)a2 + 2))
          {
            v85 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v83 = v82 + 1;
            v84 = *(unsigned __int8 *)(*(_QWORD *)a2 + v82);
            *((_QWORD *)a2 + 1) = v83;
            v85 = v84 != 0;
          }
          *((_BYTE *)this + 159) = v85;
          goto LABEL_267;
        case 0x18u:
          *((_DWORD *)this + 41) |= 0x80000000;
          v86 = *((_QWORD *)a2 + 1);
          if (v86 >= *((_QWORD *)a2 + 2))
          {
            v89 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v87 = v86 + 1;
            v88 = *(unsigned __int8 *)(*(_QWORD *)a2 + v86);
            *((_QWORD *)a2 + 1) = v87;
            v89 = v88 != 0;
          }
          *((_BYTE *)this + 161) = v89;
          goto LABEL_267;
        case 0x19u:
          *((_DWORD *)this + 41) |= 0x800000u;
          v90 = *((_QWORD *)a2 + 1);
          if (v90 >= *((_QWORD *)a2 + 2))
          {
            v93 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v91 = v90 + 1;
            v92 = *(unsigned __int8 *)(*(_QWORD *)a2 + v90);
            *((_QWORD *)a2 + 1) = v91;
            v93 = v92 != 0;
          }
          *((_BYTE *)this + 153) = v93;
          goto LABEL_267;
        case 0x1Au:
          *((_DWORD *)this + 41) |= 0x20u;
          v94 = *((_QWORD *)a2 + 1);
          if (v94 > 0xFFFFFFFFFFFFFFFBLL || v94 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_263;
          *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v94);
          goto LABEL_265;
        case 0x1Bu:
          *((_DWORD *)this + 41) |= 0x40000u;
          v95 = *((_QWORD *)a2 + 1);
          v96 = *((_QWORD *)a2 + 2);
          v97 = *(_QWORD *)a2;
          if (v95 <= 0xFFFFFFFFFFFFFFF5 && v95 + 10 <= v96)
          {
            v98 = 0;
            v99 = 0;
            v100 = 0;
            do
            {
              v101 = v95 + 1;
              *((_QWORD *)a2 + 1) = v95 + 1;
              v102 = *(_BYTE *)(v97 + v95);
              v100 |= (unint64_t)(v102 & 0x7F) << v98;
              if ((v102 & 0x80) == 0)
                goto LABEL_240;
              v98 += 7;
              v95 = v101;
              v18 = v99++ > 8;
            }
            while (!v18);
LABEL_194:
            LODWORD(v100) = 0;
            goto LABEL_240;
          }
          v142 = 0;
          v143 = 0;
          v100 = 0;
          if (v96 <= v95)
            v96 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v96 == v95)
            {
              LODWORD(v100) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v144 = v95 + 1;
              v145 = *(_BYTE *)(v97 + v95);
              *((_QWORD *)a2 + 1) = v144;
              v100 |= (unint64_t)(v145 & 0x7F) << v142;
              if (v145 < 0)
              {
                v142 += 7;
                v95 = v144;
                v18 = v143++ > 8;
                if (v18)
                  goto LABEL_194;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v100) = 0;
            }
            break;
          }
LABEL_240:
          *((_DWORD *)this + 34) = v100;
          goto LABEL_267;
        case 0x1Cu:
          *((_DWORD *)this + 41) |= 0x10000000u;
          v103 = *((_QWORD *)a2 + 1);
          if (v103 >= *((_QWORD *)a2 + 2))
          {
            v106 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v104 = v103 + 1;
            v105 = *(unsigned __int8 *)(*(_QWORD *)a2 + v103);
            *((_QWORD *)a2 + 1) = v104;
            v106 = v105 != 0;
          }
          *((_BYTE *)this + 158) = v106;
          goto LABEL_267;
        case 0x1Du:
          *((_DWORD *)this + 41) |= 0x4000000u;
          v107 = *((_QWORD *)a2 + 1);
          if (v107 >= *((_QWORD *)a2 + 2))
          {
            v110 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v108 = v107 + 1;
            v109 = *(unsigned __int8 *)(*(_QWORD *)a2 + v107);
            *((_QWORD *)a2 + 1) = v108;
            v110 = v109 != 0;
          }
          *((_BYTE *)this + 156) = v110;
          goto LABEL_267;
        case 0x1Eu:
          *((_DWORD *)this + 41) |= 0x40000000u;
          v111 = *((_QWORD *)a2 + 1);
          if (v111 >= *((_QWORD *)a2 + 2))
          {
            v114 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v112 = v111 + 1;
            v113 = *(unsigned __int8 *)(*(_QWORD *)a2 + v111);
            *((_QWORD *)a2 + 1) = v112;
            v114 = v113 != 0;
          }
          *((_BYTE *)this + 160) = v114;
          goto LABEL_267;
        case 0x1Fu:
          *((_DWORD *)this + 41) |= 1u;
          v115 = *((_QWORD *)a2 + 1);
          if (v115 > 0xFFFFFFFFFFFFFFF7 || v115 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_263;
          *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v115);
LABEL_153:
          v116 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_266;
        case 0x20u:
          *((_DWORD *)this + 41) |= 0x40u;
          v117 = *((_QWORD *)a2 + 1);
          v118 = *((_QWORD *)a2 + 2);
          v119 = *(_QWORD *)a2;
          if (v117 <= 0xFFFFFFFFFFFFFFF5 && v117 + 10 <= v118)
          {
            v120 = 0;
            v121 = 0;
            v122 = 0;
            do
            {
              v123 = v117 + 1;
              *((_QWORD *)a2 + 1) = v117 + 1;
              v124 = *(_BYTE *)(v119 + v117);
              v122 |= (unint64_t)(v124 & 0x7F) << v120;
              if ((v124 & 0x80) == 0)
                goto LABEL_243;
              v120 += 7;
              v117 = v123;
              v18 = v121++ > 8;
            }
            while (!v18);
LABEL_207:
            LODWORD(v122) = 0;
            goto LABEL_243;
          }
          v146 = 0;
          v147 = 0;
          v122 = 0;
          if (v118 <= v117)
            v118 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v118 == v117)
            {
              LODWORD(v122) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v148 = v117 + 1;
              v149 = *(_BYTE *)(v119 + v117);
              *((_QWORD *)a2 + 1) = v148;
              v122 |= (unint64_t)(v149 & 0x7F) << v146;
              if (v149 < 0)
              {
                v146 += 7;
                v117 = v148;
                v18 = v147++ > 8;
                if (v18)
                  goto LABEL_207;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v122) = 0;
            }
            break;
          }
LABEL_243:
          *((_DWORD *)this + 22) = v122;
          goto LABEL_267;
        case 0x21u:
          *((_DWORD *)this + 41) |= 0x2000000u;
          v125 = *((_QWORD *)a2 + 1);
          if (v125 >= *((_QWORD *)a2 + 2))
          {
            v128 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v126 = v125 + 1;
            v127 = *(unsigned __int8 *)(*(_QWORD *)a2 + v125);
            *((_QWORD *)a2 + 1) = v126;
            v128 = v127 != 0;
          }
          *((_BYTE *)this + 155) = v128;
          goto LABEL_267;
        case 0x22u:
          *((_DWORD *)this + 41) |= 0x20000u;
          v129 = *((_QWORD *)a2 + 1);
          v130 = *((_QWORD *)a2 + 2);
          v131 = *(_QWORD *)a2;
          if (v129 <= 0xFFFFFFFFFFFFFFF5 && v129 + 10 <= v130)
          {
            v132 = 0;
            v133 = 0;
            v134 = 0;
            do
            {
              v135 = v129 + 1;
              *((_QWORD *)a2 + 1) = v129 + 1;
              v136 = *(_BYTE *)(v131 + v129);
              v134 |= (unint64_t)(v136 & 0x7F) << v132;
              if ((v136 & 0x80) == 0)
                goto LABEL_246;
              v132 += 7;
              v129 = v135;
              v18 = v133++ > 8;
            }
            while (!v18);
LABEL_216:
            LODWORD(v134) = 0;
            goto LABEL_246;
          }
          v150 = 0;
          v151 = 0;
          v134 = 0;
          if (v130 <= v129)
            v130 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v130 == v129)
            {
              LODWORD(v134) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v152 = v129 + 1;
              v153 = *(_BYTE *)(v131 + v129);
              *((_QWORD *)a2 + 1) = v152;
              v134 |= (unint64_t)(v153 & 0x7F) << v150;
              if (v153 < 0)
              {
                v150 += 7;
                v129 = v152;
                v18 = v151++ > 8;
                if (v18)
                  goto LABEL_216;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v134) = 0;
            }
            break;
          }
LABEL_246:
          *((_DWORD *)this + 33) = v134;
          goto LABEL_267;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v24, 0) & 1) == 0)
            return 0;
          goto LABEL_267;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::RelativeDeviceMotionInternal::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  int v11;

  v3 = this;
  v4 = *(_DWORD *)(this + 164);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 64), 1u);
    v4 = *(_DWORD *)(v3 + 164);
    if ((v4 & 0x800) == 0)
    {
LABEL_3:
      if ((v4 & 0x1000) == 0)
        goto LABEL_4;
      goto LABEL_43;
    }
  }
  else if ((v4 & 0x800) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 108), 2u);
  v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x1000) == 0)
  {
LABEL_4:
    if ((v4 & 0x2000) == 0)
      goto LABEL_5;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 112), 3u);
  v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x2000) == 0)
  {
LABEL_5:
    if ((v4 & 0x4000) == 0)
      goto LABEL_6;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(float *)(v3 + 116), 4u);
  v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x4000) == 0)
  {
LABEL_6:
    if ((v4 & 0x8000) == 0)
      goto LABEL_7;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 120), 5u);
  v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x8000) == 0)
  {
LABEL_7:
    if ((v4 & 0x10000) == 0)
      goto LABEL_8;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(float *)(v3 + 124), 6u);
  v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x10000) == 0)
  {
LABEL_8:
    if ((v4 & 0x80000) == 0)
      goto LABEL_9;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 128), 7u);
  v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x80000) == 0)
  {
LABEL_9:
    if ((v4 & 0x100000) == 0)
      goto LABEL_10;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 140), 8u);
  v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x100000) == 0)
  {
LABEL_10:
    if ((v4 & 0x200000) == 0)
      goto LABEL_11;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 144), 9u);
  v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x200000) == 0)
  {
LABEL_11:
    if ((v4 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 148), 0xAu);
  v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x100) == 0)
  {
LABEL_12:
    if ((v4 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 0xBu);
  v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x200) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0)
      goto LABEL_14;
LABEL_53:
    this = PB::Writer::write(a2, *(float *)(v3 + 104), 0xDu);
    if ((*(_DWORD *)(v3 + 164) & 0x80) == 0)
      goto LABEL_16;
    goto LABEL_15;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 0xCu);
  v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x400) != 0)
    goto LABEL_53;
LABEL_14:
  if ((v4 & 0x80) != 0)
LABEL_15:
    this = PB::Writer::write(a2, *(float *)(v3 + 92), 0xEu);
LABEL_16:
  v5 = *(float **)(v3 + 32);
  v6 = *(float **)(v3 + 40);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7, 0xFu);
  }
  v8 = *(float **)(v3 + 8);
  v9 = *(float **)(v3 + 16);
  while (v8 != v9)
  {
    v10 = *v8++;
    this = PB::Writer::write(a2, v10, 0x10u);
  }
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x8000000) != 0)
  {
    this = PB::Writer::write(a2, *(_BYTE *)(v3 + 157), 0x11u);
    v11 = *(_DWORD *)(v3 + 164);
    if ((v11 & 0x400000) == 0)
    {
LABEL_24:
      if ((v11 & 0x1000000) == 0)
        goto LABEL_25;
      goto LABEL_57;
    }
  }
  else if ((v11 & 0x400000) == 0)
  {
    goto LABEL_24;
  }
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 152), 0x12u);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v11 & 0x10) == 0)
      goto LABEL_26;
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 154), 0x13u);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x10) == 0)
  {
LABEL_26:
    if ((v11 & 8) == 0)
      goto LABEL_27;
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0x14u);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 8) == 0)
  {
LABEL_27:
    if ((v11 & 4) == 0)
      goto LABEL_28;
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 0x15u);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 4) == 0)
  {
LABEL_28:
    if ((v11 & 0x20000000) == 0)
      goto LABEL_29;
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0x16u);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x20000000) == 0)
  {
LABEL_29:
    if ((v11 & 0x80000000) == 0)
      goto LABEL_30;
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 159), 0x17u);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x80000000) == 0)
  {
LABEL_30:
    if ((v11 & 0x800000) == 0)
      goto LABEL_31;
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 161), 0x18u);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x800000) == 0)
  {
LABEL_31:
    if ((v11 & 0x20) == 0)
      goto LABEL_32;
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 153), 0x19u);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x20) == 0)
  {
LABEL_32:
    if ((v11 & 0x40000) == 0)
      goto LABEL_33;
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 0x1Au);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x40000) == 0)
  {
LABEL_33:
    if ((v11 & 0x10000000) == 0)
      goto LABEL_34;
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 136), 0x1Bu);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x10000000) == 0)
  {
LABEL_34:
    if ((v11 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 158), 0x1Cu);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v11 & 0x40000000) == 0)
      goto LABEL_36;
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 156), 0x1Du);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x40000000) == 0)
  {
LABEL_36:
    if ((v11 & 1) == 0)
      goto LABEL_37;
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 160), 0x1Eu);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 1) == 0)
  {
LABEL_37:
    if ((v11 & 0x40) == 0)
      goto LABEL_38;
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 0x1Fu);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x40) == 0)
  {
LABEL_38:
    if ((v11 & 0x2000000) == 0)
      goto LABEL_39;
    goto LABEL_71;
  }
LABEL_70:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 88), 0x20u);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x2000000) == 0)
  {
LABEL_39:
    if ((v11 & 0x20000) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 132), 0x22u);
  }
LABEL_71:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 155), 0x21u);
  if ((*(_DWORD *)(v3 + 164) & 0x20000) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 132), 0x22u);
  return this;
}

uint64_t CMMsl::RelativeDeviceMotionInternal::hash_value(CMMsl::RelativeDeviceMotionInternal *this)
{
  int v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v2 = *((_DWORD *)this + 41);
  if ((v2 & 2) == 0)
  {
    v56 = 0.0;
    if ((v2 & 0x800) != 0)
      goto LABEL_3;
LABEL_51:
    v4 = 0;
    if ((v2 & 0x1000) != 0)
      goto LABEL_7;
LABEL_52:
    v62 = 0;
    if ((v2 & 0x2000) != 0)
      goto LABEL_10;
LABEL_53:
    v61 = 0;
    if ((v2 & 0x4000) != 0)
      goto LABEL_13;
LABEL_54:
    v60 = 0;
    if ((v2 & 0x8000) != 0)
      goto LABEL_16;
LABEL_55:
    v59 = 0;
    if ((v2 & 0x10000) != 0)
      goto LABEL_19;
LABEL_56:
    v58 = 0;
    if ((v2 & 0x80000) != 0)
      goto LABEL_22;
LABEL_57:
    v57 = 0;
    if ((v2 & 0x100000) != 0)
      goto LABEL_25;
LABEL_58:
    v18 = 0;
    if ((v2 & 0x200000) != 0)
      goto LABEL_29;
LABEL_59:
    v20 = 0;
    if ((v2 & 0x100) != 0)
      goto LABEL_33;
LABEL_60:
    v22 = 0;
    if ((v2 & 0x200) != 0)
      goto LABEL_37;
LABEL_61:
    v24 = 0;
    if ((v2 & 0x400) != 0)
      goto LABEL_41;
    goto LABEL_62;
  }
  v29 = *((double *)this + 8);
  if (v29 == 0.0)
    v29 = 0.0;
  v56 = v29;
  if ((v2 & 0x800) == 0)
    goto LABEL_51;
LABEL_3:
  v3 = *((float *)this + 27);
  if (v3 == 0.0)
    v4 = 0;
  else
    v4 = LODWORD(v3);
  if ((v2 & 0x1000) == 0)
    goto LABEL_52;
LABEL_7:
  v5 = *((float *)this + 28);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  v62 = v6;
  if ((v2 & 0x2000) == 0)
    goto LABEL_53;
LABEL_10:
  v7 = *((float *)this + 29);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  v61 = v8;
  if ((v2 & 0x4000) == 0)
    goto LABEL_54;
LABEL_13:
  v9 = *((float *)this + 30);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  v60 = v10;
  if ((v2 & 0x8000) == 0)
    goto LABEL_55;
LABEL_16:
  v11 = *((float *)this + 31);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  v59 = v12;
  if ((v2 & 0x10000) == 0)
    goto LABEL_56;
LABEL_19:
  v13 = *((float *)this + 32);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  v58 = v14;
  if ((v2 & 0x80000) == 0)
    goto LABEL_57;
LABEL_22:
  v15 = *((float *)this + 35);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  v57 = v16;
  if ((v2 & 0x100000) == 0)
    goto LABEL_58;
LABEL_25:
  v17 = *((float *)this + 36);
  if (v17 == 0.0)
    v18 = 0;
  else
    v18 = LODWORD(v17);
  if ((v2 & 0x200000) == 0)
    goto LABEL_59;
LABEL_29:
  v19 = *((float *)this + 37);
  if (v19 == 0.0)
    v20 = 0;
  else
    v20 = LODWORD(v19);
  if ((v2 & 0x100) == 0)
    goto LABEL_60;
LABEL_33:
  v21 = *((float *)this + 24);
  if (v21 == 0.0)
    v22 = 0;
  else
    v22 = LODWORD(v21);
  if ((v2 & 0x200) == 0)
    goto LABEL_61;
LABEL_37:
  v23 = *((float *)this + 25);
  if (v23 == 0.0)
    v24 = 0;
  else
    v24 = LODWORD(v23);
  if ((v2 & 0x400) != 0)
  {
LABEL_41:
    v25 = *((float *)this + 26);
    if (v25 == 0.0)
      v26 = 0;
    else
      v26 = LODWORD(v25);
    if ((v2 & 0x80) != 0)
      goto LABEL_45;
LABEL_63:
    v28 = 0;
    goto LABEL_64;
  }
LABEL_62:
  v26 = 0;
  if ((v2 & 0x80) == 0)
    goto LABEL_63;
LABEL_45:
  v27 = *((float *)this + 23);
  if (v27 == 0.0)
    v28 = 0;
  else
    v28 = LODWORD(v27);
LABEL_64:
  v30 = PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
  v31 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  v32 = *((_DWORD *)this + 41);
  if ((v32 & 0x8000000) != 0)
  {
    v33 = *((unsigned __int8 *)this + 157);
    if ((v32 & 0x400000) != 0)
    {
LABEL_66:
      v34 = *((unsigned __int8 *)this + 152);
      if ((v32 & 0x1000000) != 0)
        goto LABEL_67;
      goto LABEL_95;
    }
  }
  else
  {
    v33 = 0;
    if ((v32 & 0x400000) != 0)
      goto LABEL_66;
  }
  v34 = 0;
  if ((v32 & 0x1000000) != 0)
  {
LABEL_67:
    v35 = *((unsigned __int8 *)this + 154);
    if ((v32 & 0x10) != 0)
      goto LABEL_68;
LABEL_96:
    v37 = 0;
    if ((v32 & 8) != 0)
      goto LABEL_71;
LABEL_97:
    v39 = 0;
    if ((v32 & 4) != 0)
      goto LABEL_74;
LABEL_98:
    v41 = 0;
    if ((v32 & 0x20000000) != 0)
      goto LABEL_77;
    goto LABEL_99;
  }
LABEL_95:
  v35 = 0;
  if ((v32 & 0x10) == 0)
    goto LABEL_96;
LABEL_68:
  v36 = *((float *)this + 20);
  v37 = LODWORD(v36);
  if (v36 == 0.0)
    v37 = 0;
  if ((v32 & 8) == 0)
    goto LABEL_97;
LABEL_71:
  v38 = *((float *)this + 19);
  v39 = LODWORD(v38);
  if (v38 == 0.0)
    v39 = 0;
  if ((v32 & 4) == 0)
    goto LABEL_98;
LABEL_74:
  v40 = *((float *)this + 18);
  v41 = LODWORD(v40);
  if (v40 == 0.0)
    v41 = 0;
  if ((v32 & 0x20000000) != 0)
  {
LABEL_77:
    v42 = *((unsigned __int8 *)this + 159);
    if (v32 < 0)
      goto LABEL_78;
    goto LABEL_100;
  }
LABEL_99:
  v42 = 0;
  if (v32 < 0)
  {
LABEL_78:
    v43 = *((unsigned __int8 *)this + 161);
    if ((v32 & 0x800000) != 0)
      goto LABEL_79;
    goto LABEL_101;
  }
LABEL_100:
  v43 = 0;
  if ((v32 & 0x800000) != 0)
  {
LABEL_79:
    v44 = *((unsigned __int8 *)this + 153);
    if ((v32 & 0x20) != 0)
      goto LABEL_80;
LABEL_102:
    v46 = 0;
    if ((v32 & 0x40000) != 0)
      goto LABEL_83;
    goto LABEL_103;
  }
LABEL_101:
  v44 = 0;
  if ((v32 & 0x20) == 0)
    goto LABEL_102;
LABEL_80:
  v45 = *((float *)this + 21);
  v46 = LODWORD(v45);
  if (v45 == 0.0)
    v46 = 0;
  if ((v32 & 0x40000) != 0)
  {
LABEL_83:
    v47 = *((unsigned int *)this + 34);
    if ((v32 & 0x10000000) != 0)
      goto LABEL_84;
    goto LABEL_104;
  }
LABEL_103:
  v47 = 0;
  if ((v32 & 0x10000000) != 0)
  {
LABEL_84:
    v48 = *((unsigned __int8 *)this + 158);
    if ((v32 & 0x4000000) != 0)
      goto LABEL_85;
    goto LABEL_105;
  }
LABEL_104:
  v48 = 0;
  if ((v32 & 0x4000000) != 0)
  {
LABEL_85:
    v49 = *((unsigned __int8 *)this + 156);
    if ((v32 & 0x40000000) != 0)
      goto LABEL_86;
    goto LABEL_106;
  }
LABEL_105:
  v49 = 0;
  if ((v32 & 0x40000000) != 0)
  {
LABEL_86:
    v50 = *((unsigned __int8 *)this + 160);
    if ((v32 & 1) != 0)
      goto LABEL_87;
LABEL_107:
    v51 = 0.0;
    if ((v32 & 0x40) != 0)
      goto LABEL_90;
    goto LABEL_108;
  }
LABEL_106:
  v50 = 0;
  if ((v32 & 1) == 0)
    goto LABEL_107;
LABEL_87:
  v51 = *((double *)this + 7);
  if (v51 == 0.0)
    v51 = 0.0;
  if ((v32 & 0x40) != 0)
  {
LABEL_90:
    v52 = *((unsigned int *)this + 22);
    if ((v32 & 0x2000000) != 0)
      goto LABEL_91;
LABEL_109:
    v53 = 0;
    if ((v32 & 0x20000) != 0)
      goto LABEL_92;
LABEL_110:
    v54 = 0;
    return v4 ^ *(_QWORD *)&v56 ^ v62 ^ v61 ^ v60 ^ v59 ^ v58 ^ v57 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v31 ^ v33 ^ v34 ^ v35 ^ v37 ^ v39 ^ v41 ^ v42 ^ v43 ^ v44 ^ v46 ^ v47 ^ v48 ^ v49 ^ v50 ^ *(_QWORD *)&v51 ^ v52 ^ v53 ^ v54;
  }
LABEL_108:
  v52 = 0;
  if ((v32 & 0x2000000) == 0)
    goto LABEL_109;
LABEL_91:
  v53 = *((unsigned __int8 *)this + 155);
  if ((v32 & 0x20000) == 0)
    goto LABEL_110;
LABEL_92:
  v54 = *((unsigned int *)this + 33);
  return v4 ^ *(_QWORD *)&v56 ^ v62 ^ v61 ^ v60 ^ v59 ^ v58 ^ v57 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v31 ^ v33 ^ v34 ^ v35 ^ v37 ^ v39 ^ v41 ^ v42 ^ v43 ^ v44 ^ v46 ^ v47 ^ v48 ^ v49 ^ v50 ^ *(_QWORD *)&v51 ^ v52 ^ v53 ^ v54;
}

void CMMsl::RelativeGravityConstraints::~RelativeGravityConstraints(CMMsl::RelativeGravityConstraints *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::RelativeGravityConstraints::RelativeGravityConstraints(CMMsl::RelativeGravityConstraints *this, const CMMsl::RelativeGravityConstraints *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  char v5;

  *(_QWORD *)this = off_100353EE8;
  *((_DWORD *)this + 12) = 0;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_WORD *)this + 24) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_WORD *)a2 + 24);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 8);
    v3 |= 0x20u;
    *((_WORD *)this + 24) = v3;
    *((_DWORD *)this + 8) = v4;
    v2 = *((_WORD *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((_WORD *)this + 24) = v3;
    *((_DWORD *)this + 4) = v4;
    v2 = *((_WORD *)a2 + 24);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *((_WORD *)this + 24) = v3;
  *((_DWORD *)this + 7) = v4;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_17;
  }
LABEL_16:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *((_WORD *)this + 24) = v3;
  *((_DWORD *)this + 9) = v4;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_18;
  }
LABEL_17:
  LODWORD(v4) = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *((_WORD *)this + 24) = v3;
  *((_DWORD *)this + 10) = v4;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 8) == 0)
      goto LABEL_12;
    goto LABEL_19;
  }
LABEL_18:
  v5 = *((_BYTE *)a2 + 44);
  v3 |= 0x100u;
  *((_WORD *)this + 24) = v3;
  *((_BYTE *)this + 44) = v5;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 8) == 0)
  {
LABEL_12:
    if ((v2 & 4) == 0)
      return *(float *)&v4;
    goto LABEL_20;
  }
LABEL_19:
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *((_WORD *)this + 24) = v3;
  *((_DWORD *)this + 6) = v4;
  if ((*((_WORD *)a2 + 24) & 4) == 0)
    return *(float *)&v4;
LABEL_20:
  LODWORD(v4) = *((_DWORD *)a2 + 5);
  *((_WORD *)this + 24) = v3 | 4;
  *((_DWORD *)this + 5) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::RelativeGravityConstraints::operator=(uint64_t a1, const CMMsl::RelativeGravityConstraints *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _BYTE v8[8];
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  char v13;
  int v14;

  if ((const CMMsl::RelativeGravityConstraints *)a1 != a2)
  {
    CMMsl::RelativeGravityConstraints::RelativeGravityConstraints((CMMsl::RelativeGravityConstraints *)v8, a2);
    v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v14;
    v14 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v11;
    v11 = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    v12 = v4;
    LOBYTE(v3) = *(_BYTE *)(a1 + 44);
    *(_BYTE *)(a1 + 44) = v13;
    v13 = v3;
    v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    v10 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::RelativeGravityConstraints *a2, CMMsl::RelativeGravityConstraints *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LOBYTE(v3) = *((_BYTE *)this + 44);
  *((_BYTE *)this + 44) = *((_BYTE *)a2 + 44);
  *((_BYTE *)a2 + 44) = v3;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  result = *((float *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((float *)a2 + 5) = result;
  return result;
}

float CMMsl::RelativeGravityConstraints::RelativeGravityConstraints(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100353EE8;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_100353EE8;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

uint64_t CMMsl::RelativeGravityConstraints::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v13[2];
  __int128 v14;
  uint64_t v15;
  int v16;
  char v17;
  int v18;

  if (a1 != a2)
  {
    v13[0] = off_100353EE8;
    v3 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 48) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a2 + 40);
    v6 = *(_BYTE *)(a2 + 44);
    v18 = *(_DWORD *)(a1 + 48);
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v13[1] = v7;
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(_DWORD *)(a1 + 40);
    v8 = *(_BYTE *)(a1 + 44);
    *(_BYTE *)(a1 + 44) = v6;
    v17 = v8;
    v9 = *(_OWORD *)(a1 + 16);
    v10 = *(_OWORD *)(a2 + 16);
    v11 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 48) = v3;
    *(_QWORD *)(a1 + 32) = v11;
    *(_DWORD *)(a1 + 40) = v5;
    *(_OWORD *)(a1 + 16) = v10;
    v14 = v9;
    PB::Base::~Base((PB::Base *)v13);
  }
  return a1;
}

uint64_t CMMsl::RelativeGravityConstraints::formatText(CMMsl::RelativeGravityConstraints *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 24);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "avgRotationMax", *((float *)this + 4));
    v5 = *((_WORD *)this + 24);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "historicalDisturbanceDuration", *((float *)this + 5));
  v5 = *((_WORD *)this + 24);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "historicalQuiescenceDuration", *((float *)this + 6));
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "instAccelMagDiff", *((float *)this + 7));
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "instRotationMax", *((float *)this + 8));
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "isAvgGrav", *((_BYTE *)this + 44));
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
LABEL_19:
    PB::TextFormatter::format(a2, "measNoiseVar", *((float *)this + 10));
    if ((*((_WORD *)this + 24) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_10;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "lpfAccelMagDiff", *((float *)this + 9));
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x80) != 0)
    goto LABEL_19;
LABEL_9:
  if ((v5 & 1) != 0)
LABEL_10:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RelativeGravityConstraints::readFrom(CMMsl::RelativeGravityConstraints *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_WORD *)this + 24) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_47;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_54;
        case 2u:
          *((_WORD *)this + 24) |= 0x20u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_47;
          *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_53;
        case 3u:
          *((_WORD *)this + 24) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_47;
          *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_53;
        case 4u:
          *((_WORD *)this + 24) |= 0x10u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_47;
          *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_53;
        case 5u:
          *((_WORD *)this + 24) |= 0x40u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_47;
          *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_53;
        case 6u:
          *((_WORD *)this + 24) |= 0x80u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_47;
          *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_53;
        case 7u:
          *((_WORD *)this + 24) |= 0x100u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 >= *((_QWORD *)a2 + 2))
          {
            v21 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v21 = v20 != 0;
          }
          *((_BYTE *)this + 44) = v21;
          break;
        case 8u:
          *((_WORD *)this + 24) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_47;
          *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_53;
        case 9u:
          *((_WORD *)this + 24) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_53:
            v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_54:
            *((_QWORD *)a2 + 1) = v2;
          }
          else
          {
LABEL_47:
            *((_BYTE *)a2 + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::RelativeGravityConstraints::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 48);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_WORD *)(v3 + 48);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 2u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 3u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 4u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 5u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 6u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 44), 7u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 4) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 20), 9u);
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 8u);
  if ((*(_WORD *)(v3 + 48) & 4) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 20), 9u);
  return this;
}

uint64_t CMMsl::RelativeGravityConstraints::hash_value(CMMsl::RelativeGravityConstraints *this)
{
  __int16 v1;
  double v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;

  v1 = *((_WORD *)this + 24);
  if ((v1 & 1) == 0)
  {
    v2 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_3;
LABEL_28:
    v4 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_6;
LABEL_29:
    v6 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_9;
LABEL_30:
    v8 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_12;
LABEL_31:
    v10 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_15;
LABEL_32:
    v12 = 0;
    if ((*((_WORD *)this + 24) & 0x100) != 0)
      goto LABEL_18;
    goto LABEL_33;
  }
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_28;
LABEL_3:
  v3 = *((float *)this + 8);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_29;
LABEL_6:
  v5 = *((float *)this + 4);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_30;
LABEL_9:
  v7 = *((float *)this + 7);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_31;
LABEL_12:
  v9 = *((float *)this + 9);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_32;
LABEL_15:
  v11 = *((float *)this + 10);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((*((_WORD *)this + 24) & 0x100) != 0)
  {
LABEL_18:
    v13 = *((unsigned __int8 *)this + 44);
    if ((v1 & 8) != 0)
      goto LABEL_19;
    goto LABEL_34;
  }
LABEL_33:
  v13 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_19:
    v14 = *((float *)this + 6);
    v15 = LODWORD(v14);
    if (v14 == 0.0)
      v15 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_22;
LABEL_35:
    v17 = 0;
    return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v13 ^ v15 ^ v17;
  }
LABEL_34:
  v15 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_35;
LABEL_22:
  v16 = *((float *)this + 5);
  v17 = LODWORD(v16);
  if (v16 == 0.0)
    v17 = 0;
  return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v13 ^ v15 ^ v17;
}

void CMMsl::RelativeGravityCorrection::~RelativeGravityCorrection(CMMsl::RelativeGravityCorrection *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100353F20;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100353F20;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100353F20;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::RelativeGravityCorrection::RelativeGravityCorrection(uint64_t this, const CMMsl::RelativeGravityCorrection *a2)
{
  char v2;

  *(_QWORD *)this = off_100353F20;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v2 = *((_BYTE *)a2 + 16);
    *(_BYTE *)(this + 20) |= 1u;
    *(_BYTE *)(this + 16) = v2;
  }
  return this;
}

uint64_t CMMsl::RelativeGravityCorrection::operator=(uint64_t a1, const CMMsl::RelativeGravityCorrection *a2)
{
  int v3;
  uint64_t v4;
  void (**v6)(CMMsl::RelativeGravityCorrection *__hidden);
  uint64_t v7;
  char v8;
  int v9;

  if ((const CMMsl::RelativeGravityCorrection *)a1 != a2)
  {
    CMMsl::RelativeGravityCorrection::RelativeGravityCorrection((uint64_t)&v6, a2);
    v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    v9 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v7;
    LOBYTE(v3) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v8;
    v8 = v3;
    v6 = off_100353F20;
    v7 = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::RelativeGravityCorrection *a2, CMMsl::RelativeGravityCorrection *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LOBYTE(v4) = *(_BYTE *)(this + 16);
  *(_BYTE *)(this + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a2 + 16) = v4;
  return this;
}

uint64_t CMMsl::RelativeGravityCorrection::RelativeGravityCorrection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_100353F20;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_100353F20;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t CMMsl::RelativeGravityCorrection::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  _QWORD v9[2];
  char v10;
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v5 = *(_BYTE *)(a2 + 16);
    v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    LOBYTE(v3) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v5;
    v10 = v3;
    v9[0] = off_100353F20;
    v9[1] = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::RelativeGravityCorrection::formatText(CMMsl::RelativeGravityCorrection *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "correction");
  if ((*((_BYTE *)this + 20) & 1) != 0)
    PB::TextFormatter::format(a2, "isAvgGrav", *((_BYTE *)this + 16));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RelativeGravityCorrection::readFrom(CMMsl::RelativeGravityCorrection *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  BOOL v24;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 1u;
        v21 = *((_QWORD *)a2 + 1);
        if (v21 >= *((_QWORD *)a2 + 2))
        {
          v24 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v22 = v21 + 1;
          v23 = *(unsigned __int8 *)(*(_QWORD *)a2 + v21);
          *((_QWORD *)a2 + 1) = v22;
          v24 = v23 != 0;
        }
        *((_BYTE *)this + 16) = v24;
      }
      else
      {
        if ((_DWORD)v20 == 1)
          operator new();
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::RelativeGravityCorrection::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = this;
  v4 = *(const PB::Base **)(this + 8);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  if ((*(_BYTE *)(v3 + 20) & 1) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 16), 2u);
  return this;
}

unint64_t CMMsl::RelativeGravityCorrection::hash_value(CMMsl::RelativeGravityCorrection *this)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    v2 = CMMsl::DeviceMotionCorrection::hash_value((CMMsl::DeviceMotionCorrection *)v2);
  if ((*((_BYTE *)this + 20) & 1) != 0)
    v3 = *((unsigned __int8 *)this + 16);
  else
    v3 = 0;
  return v3 ^ v2;
}

uint64_t CMMsl::RelativeGravityCorrection::makeCorrection(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

void CMMsl::RhythmicGnssOperatorStatus::~RhythmicGnssOperatorStatus(CMMsl::RhythmicGnssOperatorStatus *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::RhythmicGnssOperatorStatus::RhythmicGnssOperatorStatus(uint64_t this, const CMMsl::RhythmicGnssOperatorStatus *a2)
{
  char v2;
  char v3;
  int v4;
  char v5;
  int v6;
  int v7;
  char v8;

  *(_QWORD *)this = off_100353F58;
  *(_DWORD *)(this + 24) = 0;
  v2 = *((_BYTE *)a2 + 24);
  if ((v2 & 2) != 0)
  {
    v4 = *((_DWORD *)a2 + 3);
    v3 = 2;
    *(_BYTE *)(this + 24) = 2;
    *(_DWORD *)(this + 12) = v4;
    v2 = *((_BYTE *)a2 + 24);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 24) & 8) != 0)
  {
LABEL_5:
    v5 = *((_BYTE *)a2 + 20);
    v3 |= 8u;
    *(_BYTE *)(this + 24) = v3;
    *(_BYTE *)(this + 20) = v5;
    v2 = *((_BYTE *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *((_DWORD *)a2 + 4);
    v3 |= 4u;
    *(_BYTE *)(this + 24) = v3;
    *(_DWORD *)(this + 16) = v6;
    v2 = *((_BYTE *)a2 + 24);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        return this;
LABEL_12:
      v8 = *((_BYTE *)a2 + 21);
      *(_BYTE *)(this + 24) = v3 | 0x10;
      *(_BYTE *)(this + 21) = v8;
      return this;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 2);
  v3 |= 1u;
  *(_BYTE *)(this + 24) = v3;
  *(_DWORD *)(this + 8) = v7;
  if ((*((_BYTE *)a2 + 24) & 0x10) != 0)
    goto LABEL_12;
  return this;
}

uint64_t CMMsl::RhythmicGnssOperatorStatus::operator=(uint64_t a1, const CMMsl::RhythmicGnssOperatorStatus *a2)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  __int16 v10;
  int v11;

  if ((const CMMsl::RhythmicGnssOperatorStatus *)a1 != a2)
  {
    CMMsl::RhythmicGnssOperatorStatus::RhythmicGnssOperatorStatus((uint64_t)&v7, a2);
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v11;
    v11 = v3;
    LOWORD(v3) = *(_WORD *)(a1 + 20);
    *(_WORD *)(a1 + 20) = v10;
    v10 = v3;
    v4 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::RhythmicGnssOperatorStatus *a2, CMMsl::RhythmicGnssOperatorStatus *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;

  v3 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v4;
  LOBYTE(v4) = *(_BYTE *)(this + 20);
  *(_BYTE *)(this + 20) = *((_BYTE *)a2 + 20);
  *((_BYTE *)a2 + 20) = v4;
  v5 = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  v6 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v6;
  LOBYTE(v6) = *(_BYTE *)(this + 21);
  *(_BYTE *)(this + 21) = *((_BYTE *)a2 + 21);
  *((_BYTE *)a2 + 21) = v6;
  return this;
}

uint64_t CMMsl::RhythmicGnssOperatorStatus::RhythmicGnssOperatorStatus(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = off_100353F58;
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_BYTE *)(result + 20) = *(_BYTE *)(a2 + 20);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(result + 21) = *(_BYTE *)(a2 + 21);
  return result;
}

{
  *(_QWORD *)result = off_100353F58;
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_BYTE *)(result + 20) = *(_BYTE *)(a2 + 20);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(result + 21) = *(_BYTE *)(a2 + 21);
  return result;
}

uint64_t CMMsl::RhythmicGnssOperatorStatus::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  int v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  int v12;
  char v13;
  char v14;
  int v15;

  if (a1 != a2)
  {
    v11[0] = off_100353F58;
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v4 = *(_BYTE *)(a2 + 20);
    v5 = *(_DWORD *)(a2 + 16);
    v6 = *(_BYTE *)(a2 + 21);
    v15 = *(_DWORD *)(a1 + 24);
    v7 = *(_BYTE *)(a1 + 20);
    *(_BYTE *)(a1 + 20) = v4;
    v13 = v7;
    v12 = *(_DWORD *)(a1 + 16);
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 24) = v3;
    *(_DWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 8) = v9;
    v11[1] = v8;
    LOBYTE(v3) = *(_BYTE *)(a1 + 21);
    *(_BYTE *)(a1 + 21) = v6;
    v14 = v3;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

uint64_t CMMsl::RhythmicGnssOperatorStatus::formatText(CMMsl::RhythmicGnssOperatorStatus *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "activeGnssSession", *((_BYTE *)this + 20));
    v5 = *((_BYTE *)this + 24);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 24) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "currentModesOfOperation", *((_DWORD *)this + 2));
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "hasSubscribedRhythmicClient", *((_BYTE *)this + 21));
    if ((*((_BYTE *)this + 24) & 4) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "gnssModeOfOperation", *((_DWORD *)this + 3));
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 4) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "rhythmicMode", *((_DWORD *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RhythmicGnssOperatorStatus::readFrom(CMMsl::RhythmicGnssOperatorStatus *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  int v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  int v41;
  BOOL v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v3 > v2)
          v2 = v3;
        while (v2 != v3)
        {
          v17 = v3 + 1;
          v18 = *(_BYTE *)(v8 + v3);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v3 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v3 + 1;
          *((_QWORD *)a2 + 1) = v3 + 1;
          v13 = *(_BYTE *)(v8 + v3);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v3 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 24) |= 2u;
              v20 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v21 = *(_QWORD *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v43 = 0;
                v44 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v3 = *((_QWORD *)a2 + 1);
                else
                  v3 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v3 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_81;
                  }
                  v45 = v20++;
                  v46 = *(_BYTE *)(v21 + v45);
                  *((_QWORD *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0)
                    break;
                  v43 += 7;
                  v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_80;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v24) = 0;
LABEL_80:
                v3 = v45 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v3 = v20 + 1;
                  *((_QWORD *)a2 + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_81;
                  v22 += 7;
                  v20 = v3;
                  v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_81:
              *((_DWORD *)this + 3) = v24;
              goto LABEL_92;
            case 2u:
              *((_BYTE *)this + 24) |= 8u;
              v3 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              if (v3 >= v2)
              {
                v28 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)a2 + v3++);
                *((_QWORD *)a2 + 1) = v3;
                v28 = v27 != 0;
              }
              *((_BYTE *)this + 20) = v28;
              goto LABEL_92;
            case 3u:
              *((_BYTE *)this + 24) |= 4u;
              v29 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v30 = *(_QWORD *)a2;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v33 = 0;
                if (v2 <= v29)
                  v3 = *((_QWORD *)a2 + 1);
                else
                  v3 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v3 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_86;
                  }
                  v49 = v29++;
                  v50 = *(_BYTE *)(v30 + v49);
                  *((_QWORD *)a2 + 1) = v29;
                  v33 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_85:
                    v3 = v49 + 1;
                    goto LABEL_86;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v33) = 0;
                goto LABEL_85;
              }
              v31 = 0;
              v32 = 0;
              v33 = 0;
              do
              {
                v3 = v29 + 1;
                *((_QWORD *)a2 + 1) = v29 + 1;
                v34 = *(_BYTE *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0)
                  goto LABEL_86;
                v31 += 7;
                v29 = v3;
                v14 = v32++ > 8;
              }
              while (!v14);
              LODWORD(v33) = 0;
LABEL_86:
              *((_DWORD *)this + 4) = v33;
              goto LABEL_92;
            case 4u:
              *((_BYTE *)this + 24) |= 1u;
              v35 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v36 = *(_QWORD *)a2;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v39 = 0;
                if (v2 <= v35)
                  v3 = *((_QWORD *)a2 + 1);
                else
                  v3 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v3 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_91;
                  }
                  v53 = v35++;
                  v54 = *(_BYTE *)(v36 + v53);
                  *((_QWORD *)a2 + 1) = v35;
                  v39 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_90:
                    v3 = v53 + 1;
                    goto LABEL_91;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v39) = 0;
                goto LABEL_90;
              }
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v3 = v35 + 1;
                *((_QWORD *)a2 + 1) = v35 + 1;
                v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0)
                  goto LABEL_91;
                v37 += 7;
                v35 = v3;
                v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_91:
              *((_DWORD *)this + 2) = v39;
LABEL_92:
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v3 >= v2 || *((_BYTE *)a2 + 24))
                return v4 == 0;
              continue;
            case 5u:
              *((_BYTE *)this + 24) |= 0x10u;
              v3 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              if (v3 >= v2)
              {
                v42 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v41 = *(unsigned __int8 *)(*(_QWORD *)a2 + v3++);
                *((_QWORD *)a2 + 1) = v3;
                v42 = v41 != 0;
              }
              *((_BYTE *)this + 21) = v42;
              goto LABEL_92;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v3 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              goto LABEL_92;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::RhythmicGnssOperatorStatus::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 24);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 12), 1u);
    v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 24) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 20), 2u);
  v4 = *(_BYTE *)(v3 + 24);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 3u);
  v4 = *(_BYTE *)(v3 + 24);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      return this;
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 21), 5u);
  }
LABEL_10:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 8), 4u);
  if ((*(_BYTE *)(v3 + 24) & 0x10) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 21), 5u);
  return this;
}

uint64_t CMMsl::RhythmicGnssOperatorStatus::hash_value(CMMsl::RhythmicGnssOperatorStatus *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*((_BYTE *)this + 24) & 2) != 0)
  {
    v1 = *((unsigned int *)this + 3);
    if ((*((_BYTE *)this + 24) & 8) != 0)
    {
LABEL_3:
      v2 = *((unsigned __int8 *)this + 20);
      if ((*((_BYTE *)this + 24) & 4) != 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 24) & 8) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 24) & 4) != 0)
  {
LABEL_4:
    v3 = *((int *)this + 4);
    if ((*((_BYTE *)this + 24) & 1) != 0)
      goto LABEL_5;
LABEL_10:
    v4 = 0;
    if ((*((_BYTE *)this + 24) & 0x10) != 0)
      goto LABEL_6;
LABEL_11:
    v5 = 0;
    return v2 ^ v1 ^ v3 ^ v4 ^ v5;
  }
LABEL_9:
  v3 = 0;
  if ((*((_BYTE *)this + 24) & 1) == 0)
    goto LABEL_10;
LABEL_5:
  v4 = *((unsigned int *)this + 2);
  if ((*((_BYTE *)this + 24) & 0x10) == 0)
    goto LABEL_11;
LABEL_6:
  v5 = *((unsigned __int8 *)this + 21);
  return v2 ^ v1 ^ v3 ^ v4 ^ v5;
}

void CMMsl::RotationRate::~RotationRate(CMMsl::RotationRate *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::RotationRate::RotationRate(CMMsl::RotationRate *this, const CMMsl::RotationRate *a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)this = off_100353F90;
  *((_DWORD *)this + 7) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 28) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((_BYTE *)this + 28) = v3;
    *((_DWORD *)this + 4) = v4;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *((_BYTE *)this + 28) = v3;
    *((_DWORD *)this + 5) = v4;
    if ((*((_BYTE *)a2 + 28) & 8) == 0)
      return *(float *)&v4;
  }
  else if ((v2 & 8) == 0)
  {
    return *(float *)&v4;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  *((_BYTE *)this + 28) = v3 | 8;
  *((_DWORD *)this + 6) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::RotationRate::operator=(uint64_t a1, const CMMsl::RotationRate *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;

  if ((const CMMsl::RotationRate *)a1 != a2)
  {
    CMMsl::RotationRate::RotationRate((CMMsl::RotationRate *)&v9, a2);
    v3 = v11;
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = v3;
    v6 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v13;
    v13 = v6;
    v10 = v4;
    v11 = v5;
    v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v12;
    v12 = v7;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::RotationRate *a2, CMMsl::RotationRate *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  return result;
}

float CMMsl::RotationRate::RotationRate(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100353F90;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_100353F90;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::RotationRate::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD v9[3];
  int v10;
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    v4 = *(_DWORD *)(a2 + 24);
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v9[0] = off_100353F90;
    v11 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v3;
    v9[1] = v5;
    v9[2] = v6;
    v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    v10 = v7;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::RotationRate::formatText(CMMsl::RotationRate *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    v5 = *((_BYTE *)this + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "y", *((float *)this + 5));
      if ((*((_BYTE *)this + 28) & 8) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "x", *((float *)this + 4));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "z", *((float *)this + 6));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RotationRate::readFrom(CMMsl::RotationRate *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 28) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_35;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_38;
        case 2u:
          *((_BYTE *)this + 28) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_35;
          *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_37;
        case 3u:
          *((_BYTE *)this + 28) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_35;
          *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_37;
        case 4u:
          *((_BYTE *)this + 28) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_37:
            v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_38:
            *((_QWORD *)a2 + 1) = v2;
          }
          else
          {
LABEL_35:
            *((_BYTE *)a2 + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::RotationRate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 2u);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 24), 4u);
  }
LABEL_8:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 3u);
  if ((*(_BYTE *)(v3 + 28) & 8) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 24), 4u);
  return this;
}

uint64_t CMMsl::RotationRate::hash_value(CMMsl::RotationRate *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;

  if ((*((_BYTE *)this + 28) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 28) & 2) != 0)
      goto LABEL_3;
LABEL_15:
    v3 = 0;
    if ((*((_BYTE *)this + 28) & 4) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 28) & 2) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((float *)this + 4);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 28) & 4) != 0)
  {
LABEL_6:
    v4 = *((float *)this + 5);
    v5 = LODWORD(v4);
    if (v4 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 28) & 8) != 0)
      goto LABEL_9;
LABEL_17:
    v7 = 0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7;
  }
LABEL_16:
  v5 = 0;
  if ((*((_BYTE *)this + 28) & 8) == 0)
    goto LABEL_17;
LABEL_9:
  v6 = *((float *)this + 6);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7;
}

void CMMsl::RunningArmSwingSignals::~RunningArmSwingSignals(CMMsl::RunningArmSwingSignals *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::RunningArmSwingSignals::RunningArmSwingSignals(CMMsl::RunningArmSwingSignals *this, const CMMsl::RunningArmSwingSignals *a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)this = off_100353FC8;
  *((_DWORD *)this + 16) = 0;
  v2 = *((_BYTE *)a2 + 64);
  if ((v2 & 2) != 0)
  {
    result = *((double *)a2 + 2);
    v3 = 2;
    *((_BYTE *)this + 64) = 2;
    *((double *)this + 2) = result;
    v2 = *((_BYTE *)a2 + 64);
    if ((v2 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 64) & 0x40) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 7);
    v3 |= 0x40u;
    *((_BYTE *)this + 64) = v3;
    *((double *)this + 7) = result;
    v2 = *((_BYTE *)a2 + 64);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    v3 |= 1u;
    *((_BYTE *)this + 64) = v3;
    *((double *)this + 1) = result;
    v2 = *((_BYTE *)a2 + 64);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_BYTE *)this + 64) = v3;
  *((double *)this + 3) = result;
  v2 = *((_BYTE *)a2 + 64);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_BYTE *)this + 64) = v3;
  *((double *)this + 5) = result;
  v2 = *((_BYTE *)a2 + 64);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0)
      return result;
LABEL_16:
    result = *((double *)a2 + 4);
    *((_BYTE *)this + 64) = v3 | 8;
    *((double *)this + 4) = result;
    return result;
  }
LABEL_15:
  result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((_BYTE *)this + 64) = v3;
  *((double *)this + 6) = result;
  if ((*((_BYTE *)a2 + 64) & 8) != 0)
    goto LABEL_16;
  return result;
}

uint64_t CMMsl::RunningArmSwingSignals::operator=(uint64_t a1, const CMMsl::RunningArmSwingSignals *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE v9[8];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;

  if ((const CMMsl::RunningArmSwingSignals *)a1 != a2)
  {
    CMMsl::RunningArmSwingSignals::RunningArmSwingSignals((CMMsl::RunningArmSwingSignals *)v9, a2);
    v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    v14 = v3;
    v4 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v13;
    v13 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v6;
    v7 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v10 = v5;
    v11 = v7;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RunningArmSwingSignals *a2, CMMsl::RunningArmSwingSignals *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v5;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  v9 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v9;
  result = *((double *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((double *)a2 + 4) = result;
  return result;
}

double CMMsl::RunningArmSwingSignals::RunningArmSwingSignals(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100353FC8;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100353FC8;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  return result;
}

uint64_t CMMsl::RunningArmSwingSignals::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void (**v11)(CMMsl::RunningArmSwingSignals *__hidden);
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int v16;

  if (a1 != a2)
  {
    v11 = off_100353FC8;
    v3 = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(a2 + 64) = 0;
    v4 = *(_QWORD *)(a2 + 56);
    v16 = *(_DWORD *)(a1 + 64);
    v15 = *(_QWORD *)(a1 + 56);
    v5 = *(_OWORD *)(a1 + 8);
    v6 = *(_OWORD *)(a2 + 8);
    v14 = *(_OWORD *)(a1 + 40);
    v7 = *(_OWORD *)(a1 + 24);
    v8 = *(_OWORD *)(a2 + 24);
    v9 = *(_OWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 64) = v3;
    *(_QWORD *)(a1 + 56) = v4;
    *(_OWORD *)(a1 + 8) = v6;
    *(_OWORD *)(a1 + 40) = v9;
    *(_OWORD *)(a1 + 24) = v8;
    v12 = v5;
    v13 = v7;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

uint64_t CMMsl::RunningArmSwingSignals::formatText(CMMsl::RunningArmSwingSignals *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 64);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "cadence", *((double *)this + 1));
    v5 = *((_BYTE *)this + 64);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*((_BYTE *)this + 64) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 2));
  v5 = *((_BYTE *)this + 64);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "swingAccelX", *((double *)this + 3));
  v5 = *((_BYTE *)this + 64);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "swingAccelXStandardized", *((double *)this + 4));
  v5 = *((_BYTE *)this + 64);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(a2, "swingAccelZ", *((double *)this + 6));
    if ((*((_BYTE *)this + 64) & 0x40) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "swingAccelY", *((double *)this + 5));
  v5 = *((_BYTE *)this + 64);
  if ((v5 & 0x20) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 0x40) != 0)
LABEL_8:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 7));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RunningArmSwingSignals::readFrom(CMMsl::RunningArmSwingSignals *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 64) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_44;
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_46;
        case 2u:
          *((_BYTE *)this + 64) |= 0x40u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_44;
          *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_46;
        case 3u:
          *((_BYTE *)this + 64) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_44;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_46;
        case 5u:
          *((_BYTE *)this + 64) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_44;
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_46;
        case 6u:
          *((_BYTE *)this + 64) |= 0x10u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_44;
          *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_46;
        case 7u:
          *((_BYTE *)this + 64) |= 0x20u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_44;
          *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_46;
        case 8u:
          *((_BYTE *)this + 64) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          {
LABEL_44:
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_46:
            v2 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v2;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::RunningArmSwingSignals::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 64);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
    v4 = *(_BYTE *)(v3 + 64);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(this + 64) & 0x40) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 2u);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 3u);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 5u);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 6u);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 32), 8u);
  }
LABEL_14:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 7u);
  if ((*(_BYTE *)(v3 + 64) & 8) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 32), 8u);
  return this;
}

uint64_t CMMsl::RunningArmSwingSignals::hash_value(CMMsl::RunningArmSwingSignals *this)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;

  if ((*((_BYTE *)this + 64) & 2) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 64) & 0x40) != 0)
      goto LABEL_3;
LABEL_24:
    v2 = 0.0;
    if ((*((_BYTE *)this + 64) & 1) != 0)
      goto LABEL_6;
LABEL_25:
    v3 = 0.0;
    if ((*((_BYTE *)this + 64) & 4) != 0)
      goto LABEL_9;
LABEL_26:
    v4 = 0.0;
    if ((*((_BYTE *)this + 64) & 0x10) != 0)
      goto LABEL_12;
LABEL_27:
    v5 = 0.0;
    if ((*((_BYTE *)this + 64) & 0x20) != 0)
      goto LABEL_15;
    goto LABEL_28;
  }
  v1 = *((double *)this + 2);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 64) & 0x40) == 0)
    goto LABEL_24;
LABEL_3:
  v2 = *((double *)this + 7);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 64) & 1) == 0)
    goto LABEL_25;
LABEL_6:
  v3 = *((double *)this + 1);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((*((_BYTE *)this + 64) & 4) == 0)
    goto LABEL_26;
LABEL_9:
  v4 = *((double *)this + 3);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((*((_BYTE *)this + 64) & 0x10) == 0)
    goto LABEL_27;
LABEL_12:
  v5 = *((double *)this + 5);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((*((_BYTE *)this + 64) & 0x20) != 0)
  {
LABEL_15:
    v6 = *((double *)this + 6);
    if (v6 == 0.0)
      v6 = 0.0;
    if ((*((_BYTE *)this + 64) & 8) != 0)
      goto LABEL_18;
LABEL_29:
    v7 = 0.0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7;
  }
LABEL_28:
  v6 = 0.0;
  if ((*((_BYTE *)this + 64) & 8) == 0)
    goto LABEL_29;
LABEL_18:
  v7 = *((double *)this + 4);
  if (v7 == 0.0)
    v7 = 0.0;
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7;
}

void CMMsl::RunningCentripetalAccelSignals::~RunningCentripetalAccelSignals(CMMsl::RunningCentripetalAccelSignals *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::RunningCentripetalAccelSignals::RunningCentripetalAccelSignals(CMMsl::RunningCentripetalAccelSignals *this, const CMMsl::RunningCentripetalAccelSignals *a2)
{
  __int16 v2;
  __int16 v3;
  double result;

  *(_QWORD *)this = off_100354000;
  *((_DWORD *)this + 30) = 0;
  v2 = *((_WORD *)a2 + 60);
  if ((v2 & 0x200) != 0)
  {
    result = *((double *)a2 + 10);
    v3 = 512;
    *((_WORD *)this + 60) = 512;
    *((double *)this + 10) = result;
    v2 = *((_WORD *)a2 + 60);
    if ((v2 & 0x2000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_WORD *)a2 + 60) & 0x2000) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 14);
    v3 |= 0x2000u;
    *((_WORD *)this + 60) = v3;
    *((double *)this + 14) = result;
    v2 = *((_WORD *)a2 + 60);
  }
LABEL_6:
  if ((v2 & 0x400) != 0)
  {
    result = *((double *)a2 + 11);
    v3 |= 0x400u;
    *((_WORD *)this + 60) = v3;
    *((double *)this + 11) = result;
    v2 = *((_WORD *)a2 + 60);
    if ((v2 & 0x800) == 0)
    {
LABEL_8:
      if ((v2 & 0x1000) == 0)
        goto LABEL_9;
      goto LABEL_21;
    }
  }
  else if ((v2 & 0x800) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 12);
  v3 |= 0x800u;
  *((_WORD *)this + 60) = v3;
  *((double *)this + 12) = result;
  v2 = *((_WORD *)a2 + 60);
  if ((v2 & 0x1000) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  result = *((double *)a2 + 13);
  v3 |= 0x1000u;
  *((_WORD *)this + 60) = v3;
  *((double *)this + 13) = result;
  v2 = *((_WORD *)a2 + 60);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_WORD *)this + 60) = v3;
  *((double *)this + 7) = result;
  v2 = *((_WORD *)a2 + 60);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_WORD *)this + 60) = v3;
  *((double *)this + 8) = result;
  v2 = *((_WORD *)a2 + 60);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0)
      goto LABEL_13;
    goto LABEL_25;
  }
LABEL_24:
  result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_WORD *)this + 60) = v3;
  *((double *)this + 9) = result;
  v2 = *((_WORD *)a2 + 60);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_26;
  }
LABEL_25:
  result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_WORD *)this + 60) = v3;
  *((double *)this + 4) = result;
  v2 = *((_WORD *)a2 + 60);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_27;
  }
LABEL_26:
  result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_WORD *)this + 60) = v3;
  *((double *)this + 5) = result;
  v2 = *((_WORD *)a2 + 60);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 1) == 0)
      goto LABEL_16;
    goto LABEL_28;
  }
LABEL_27:
  result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((_WORD *)this + 60) = v3;
  *((double *)this + 6) = result;
  v2 = *((_WORD *)a2 + 60);
  if ((v2 & 1) == 0)
  {
LABEL_16:
    if ((v2 & 2) == 0)
      goto LABEL_17;
    goto LABEL_29;
  }
LABEL_28:
  result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_WORD *)this + 60) = v3;
  *((double *)this + 1) = result;
  v2 = *((_WORD *)a2 + 60);
  if ((v2 & 2) == 0)
  {
LABEL_17:
    if ((v2 & 4) == 0)
      return result;
LABEL_30:
    result = *((double *)a2 + 3);
    *((_WORD *)this + 60) = v3 | 4;
    *((double *)this + 3) = result;
    return result;
  }
LABEL_29:
  result = *((double *)a2 + 2);
  v3 |= 2u;
  *((_WORD *)this + 60) = v3;
  *((double *)this + 2) = result;
  if ((*((_WORD *)a2 + 60) & 4) != 0)
    goto LABEL_30;
  return result;
}

CMMsl *CMMsl::RunningCentripetalAccelSignals::operator=(CMMsl *a1, const CMMsl::RunningCentripetalAccelSignals *a2)
{
  CMMsl::RunningCentripetalAccelSignals *v3;
  _BYTE v5[128];

  if (a1 != a2)
  {
    CMMsl::RunningCentripetalAccelSignals::RunningCentripetalAccelSignals((CMMsl::RunningCentripetalAccelSignals *)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningCentripetalAccelSignals *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RunningCentripetalAccelSignals *a2, CMMsl::RunningCentripetalAccelSignals *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double result;

  v3 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v3;
  v4 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v4;
  v5 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v5;
  v6 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v6;
  v7 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v7;
  v8 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v8;
  v9 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v9;
  v10 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v10;
  v11 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v11;
  v12 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v12;
  v13 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v13;
  v14 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v14;
  v15 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v15;
  v16 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v16;
  result = *((double *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((double *)a2 + 3) = result;
  return result;
}

double CMMsl::RunningCentripetalAccelSignals::RunningCentripetalAccelSignals(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100354000;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

CMMsl *CMMsl::RunningCentripetalAccelSignals::operator=(CMMsl *this, uint64_t a2, CMMsl::RunningCentripetalAccelSignals *a3)
{
  void (**v5)(CMMsl::RunningCentripetalAccelSignals *__hidden);
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;

  if (this != (CMMsl *)a2)
  {
    v5 = off_100354000;
    v13 = *(_DWORD *)(a2 + 120);
    *(_DWORD *)(a2 + 120) = 0;
    v11 = *(_OWORD *)(a2 + 88);
    v12 = *(_OWORD *)(a2 + 104);
    v9 = *(_OWORD *)(a2 + 56);
    v10 = *(_OWORD *)(a2 + 72);
    v8 = *(_OWORD *)(a2 + 40);
    v6 = *(_OWORD *)(a2 + 8);
    v7 = *(_OWORD *)(a2 + 24);
    CMMsl::swap(this, (CMMsl::RunningCentripetalAccelSignals *)&v5, a3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return this;
}

uint64_t CMMsl::RunningCentripetalAccelSignals::formatText(CMMsl::RunningCentripetalAccelSignals *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 60);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "centerOfMassPrefiltAccelX", *((double *)this + 1));
    v5 = *((_WORD *)this + 60);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "centerOfMassPrefiltAccelY", *((double *)this + 2));
  v5 = *((_WORD *)this + 60);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "centerOfMassPrefiltAccelZ", *((double *)this + 3));
  v5 = *((_WORD *)this + 60);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "centripetalAccelX", *((double *)this + 4));
  v5 = *((_WORD *)this + 60);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "centripetalAccelY", *((double *)this + 5));
  v5 = *((_WORD *)this + 60);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "centripetalAccelZ", *((double *)this + 6));
  v5 = *((_WORD *)this + 60);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "centripetalRotationRateX", *((double *)this + 7));
  v5 = *((_WORD *)this + 60);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "centripetalRotationRateY", *((double *)this + 8));
  v5 = *((_WORD *)this + 60);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "centripetalRotationRateZ", *((double *)this + 9));
  v5 = *((_WORD *)this + 60);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 10));
  v5 = *((_WORD *)this + 60);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "swingVelocityX", *((double *)this + 11));
  v5 = *((_WORD *)this + 60);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
LABEL_29:
    PB::TextFormatter::format(a2, "swingVelocityZ", *((double *)this + 13));
    if ((*((_WORD *)this + 60) & 0x2000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_15;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "swingVelocityY", *((double *)this + 12));
  v5 = *((_WORD *)this + 60);
  if ((v5 & 0x1000) != 0)
    goto LABEL_29;
LABEL_14:
  if ((v5 & 0x2000) != 0)
LABEL_15:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 14));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RunningCentripetalAccelSignals::readFrom(CMMsl::RunningCentripetalAccelSignals *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_WORD *)this + 60) |= 0x200u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_65;
          *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_67;
        case 2u:
          *((_WORD *)this + 60) |= 0x2000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_65;
          *((_QWORD *)this + 14) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_67;
        case 3u:
          *((_WORD *)this + 60) |= 0x400u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_65;
          *((_QWORD *)this + 11) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_67;
        case 4u:
          *((_WORD *)this + 60) |= 0x800u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_65;
          *((_QWORD *)this + 12) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_67;
        case 5u:
          *((_WORD *)this + 60) |= 0x1000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_65;
          *((_QWORD *)this + 13) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_67;
        case 6u:
          *((_WORD *)this + 60) |= 0x40u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_65;
          *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_67;
        case 7u:
          *((_WORD *)this + 60) |= 0x80u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_65;
          *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_67;
        case 8u:
          *((_WORD *)this + 60) |= 0x100u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_65;
          *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_67;
        case 9u:
          *((_WORD *)this + 60) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_65;
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_67;
        case 0xAu:
          *((_WORD *)this + 60) |= 0x10u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_65;
          *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_67;
        case 0xBu:
          *((_WORD *)this + 60) |= 0x20u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_65;
          *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_67;
        case 0xCu:
          *((_WORD *)this + 60) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_65;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_67;
        case 0xDu:
          *((_WORD *)this + 60) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_65;
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_67;
        case 0xEu:
          *((_WORD *)this + 60) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          {
LABEL_65:
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_67:
            v2 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v2;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::RunningCentripetalAccelSignals::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 120);
  if ((v4 & 0x200) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 80), 1u);
    v4 = *(_WORD *)(v3 + 120);
    if ((v4 & 0x2000) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((*(_WORD *)(this + 120) & 0x2000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 112), 2u);
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 0x800) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 88), 3u);
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x800) == 0)
  {
LABEL_5:
    if ((v4 & 0x1000) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 96), 4u);
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x1000) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 104), 5u);
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 6u);
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 7u);
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 8u);
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 9u);
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 0xAu);
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 1) == 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 0xBu);
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 1) == 0)
  {
LABEL_13:
    if ((v4 & 2) == 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 0xCu);
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 2) == 0)
  {
LABEL_14:
    if ((v4 & 4) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 24), 0xEu);
  }
LABEL_28:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 0xDu);
  if ((*(_WORD *)(v3 + 120) & 4) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 24), 0xEu);
  return this;
}

uint64_t CMMsl::RunningCentripetalAccelSignals::hash_value(CMMsl::RunningCentripetalAccelSignals *this)
{
  __int16 v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;

  v1 = *((_WORD *)this + 60);
  if ((v1 & 0x200) == 0)
  {
    v2 = 0.0;
    if ((*((_WORD *)this + 60) & 0x2000) != 0)
      goto LABEL_3;
LABEL_45:
    v3 = 0.0;
    if ((*((_WORD *)this + 60) & 0x400) != 0)
      goto LABEL_6;
LABEL_46:
    v4 = 0.0;
    if ((*((_WORD *)this + 60) & 0x800) != 0)
      goto LABEL_9;
LABEL_47:
    v5 = 0.0;
    if ((*((_WORD *)this + 60) & 0x1000) != 0)
      goto LABEL_12;
LABEL_48:
    v6 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_15;
LABEL_49:
    v7 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_18;
LABEL_50:
    v8 = 0.0;
    if ((*((_WORD *)this + 60) & 0x100) != 0)
      goto LABEL_21;
LABEL_51:
    v9 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_24;
LABEL_52:
    v10 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_27;
LABEL_53:
    v11 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_30;
LABEL_54:
    v12 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_33;
LABEL_55:
    v13 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_36;
    goto LABEL_56;
  }
  v2 = *((double *)this + 10);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_WORD *)this + 60) & 0x2000) == 0)
    goto LABEL_45;
LABEL_3:
  v3 = *((double *)this + 14);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((*((_WORD *)this + 60) & 0x400) == 0)
    goto LABEL_46;
LABEL_6:
  v4 = *((double *)this + 11);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((*((_WORD *)this + 60) & 0x800) == 0)
    goto LABEL_47;
LABEL_9:
  v5 = *((double *)this + 12);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((*((_WORD *)this + 60) & 0x1000) == 0)
    goto LABEL_48;
LABEL_12:
  v6 = *((double *)this + 13);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 0x40) == 0)
    goto LABEL_49;
LABEL_15:
  v7 = *((double *)this + 7);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v1 & 0x80) == 0)
    goto LABEL_50;
LABEL_18:
  v8 = *((double *)this + 8);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((*((_WORD *)this + 60) & 0x100) == 0)
    goto LABEL_51;
LABEL_21:
  v9 = *((double *)this + 9);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_52;
LABEL_24:
  v10 = *((double *)this + 4);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_53;
LABEL_27:
  v11 = *((double *)this + 5);
  if (v11 == 0.0)
    v11 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_54;
LABEL_30:
  v12 = *((double *)this + 6);
  if (v12 == 0.0)
    v12 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_55;
LABEL_33:
  v13 = *((double *)this + 1);
  if (v13 == 0.0)
    v13 = 0.0;
  if ((v1 & 2) != 0)
  {
LABEL_36:
    v14 = *((double *)this + 2);
    if (v14 == 0.0)
      v14 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_39;
LABEL_57:
    v15 = 0.0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ *(_QWORD *)&v15;
  }
LABEL_56:
  v14 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_57;
LABEL_39:
  v15 = *((double *)this + 3);
  if (v15 == 0.0)
    v15 = 0.0;
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ *(_QWORD *)&v15;
}

void CMMsl::RunningFormMetrics::~RunningFormMetrics(CMMsl::RunningFormMetrics *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::RunningFormMetrics::RunningFormMetrics(CMMsl::RunningFormMetrics *this, const CMMsl::RunningFormMetrics *a2)
{
  uint64_t v2;
  uint64_t v3;
  double result;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  char v16;

  *(_QWORD *)this = off_100354038;
  *((_QWORD *)this + 28) = 0;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x40) != 0)
  {
    result = *((double *)a2 + 7);
    v3 = 64;
    *((_QWORD *)this + 28) = 64;
    *((double *)this + 7) = result;
    v2 = *((_QWORD *)a2 + 28);
    if ((v2 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 8);
    v3 |= 0x80uLL;
    *((_QWORD *)this + 28) = v3;
    *((double *)this + 8) = result;
    v2 = *((_QWORD *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 0x200000000) != 0)
  {
    v5 = *((_BYTE *)a2 + 220);
    v3 |= 0x200000000uLL;
    *((_QWORD *)this + 28) = v3;
    *((_BYTE *)this + 220) = v5;
    v2 = *((_QWORD *)a2 + 28);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x40000000) == 0)
        goto LABEL_9;
      goto LABEL_42;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 2);
  v3 |= 2uLL;
  *((_QWORD *)this + 28) = v3;
  *((double *)this + 2) = result;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_9:
    if ((v2 & 0x80000) == 0)
      goto LABEL_10;
    goto LABEL_43;
  }
LABEL_42:
  v6 = *((_BYTE *)a2 + 217);
  v3 |= 0x40000000uLL;
  *((_QWORD *)this + 28) = v3;
  *((_BYTE *)this + 217) = v6;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x80000) == 0)
  {
LABEL_10:
    if ((v2 & 0x400000000) == 0)
      goto LABEL_11;
    goto LABEL_44;
  }
LABEL_43:
  result = *((double *)a2 + 20);
  v3 |= 0x80000uLL;
  *((_QWORD *)this + 28) = v3;
  *((double *)this + 20) = result;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0)
      goto LABEL_12;
    goto LABEL_45;
  }
LABEL_44:
  v7 = *((_BYTE *)a2 + 221);
  v3 |= 0x400000000uLL;
  *((_QWORD *)this + 28) = v3;
  *((_BYTE *)this + 221) = v7;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_13;
    goto LABEL_46;
  }
LABEL_45:
  result = *((double *)a2 + 1);
  v3 |= 1uLL;
  *((_QWORD *)this + 28) = v3;
  *((double *)this + 1) = result;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_13:
    if ((v2 & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_47;
  }
LABEL_46:
  v8 = *((_BYTE *)a2 + 216);
  v3 |= 0x20000000uLL;
  *((_QWORD *)this + 28) = v3;
  *((_BYTE *)this + 216) = v8;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x8000) == 0)
      goto LABEL_15;
    goto LABEL_48;
  }
LABEL_47:
  v9 = *((_BYTE *)a2 + 218);
  v3 |= 0x80000000uLL;
  *((_QWORD *)this + 28) = v3;
  *((_BYTE *)this + 218) = v9;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x8000) == 0)
  {
LABEL_15:
    if ((v2 & 0x40000) == 0)
      goto LABEL_16;
    goto LABEL_49;
  }
LABEL_48:
  result = *((double *)a2 + 16);
  v3 |= 0x8000uLL;
  *((_QWORD *)this + 28) = v3;
  *((double *)this + 16) = result;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x40000) == 0)
  {
LABEL_16:
    if ((v2 & 0x4000) == 0)
      goto LABEL_17;
    goto LABEL_50;
  }
LABEL_49:
  result = *((double *)a2 + 19);
  v3 |= 0x40000uLL;
  *((_QWORD *)this + 28) = v3;
  *((double *)this + 19) = result;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x4000) == 0)
  {
LABEL_17:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_18;
    goto LABEL_51;
  }
LABEL_50:
  result = *((double *)a2 + 15);
  v3 |= 0x4000uLL;
  *((_QWORD *)this + 28) = v3;
  *((double *)this + 15) = result;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_19;
    goto LABEL_52;
  }
LABEL_51:
  v10 = *((_DWORD *)a2 + 52);
  v3 |= 0x8000000uLL;
  *((_QWORD *)this + 28) = v3;
  *((_DWORD *)this + 52) = v10;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_20;
    goto LABEL_53;
  }
LABEL_52:
  v11 = *((_DWORD *)a2 + 51);
  v3 |= 0x4000000uLL;
  *((_QWORD *)this + 28) = v3;
  *((_DWORD *)this + 51) = v11;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x800000) == 0)
      goto LABEL_21;
    goto LABEL_54;
  }
LABEL_53:
  v12 = *((_DWORD *)a2 + 53);
  v3 |= 0x10000000uLL;
  *((_QWORD *)this + 28) = v3;
  *((_DWORD *)this + 53) = v12;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x800000) == 0)
  {
LABEL_21:
    if ((v2 & 0x1000) == 0)
      goto LABEL_22;
    goto LABEL_55;
  }
LABEL_54:
  v13 = *((_DWORD *)a2 + 48);
  v3 |= 0x800000uLL;
  *((_QWORD *)this + 28) = v3;
  *((_DWORD *)this + 48) = v13;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x1000) == 0)
  {
LABEL_22:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_23;
    goto LABEL_56;
  }
LABEL_55:
  result = *((double *)a2 + 13);
  v3 |= 0x1000uLL;
  *((_QWORD *)this + 28) = v3;
  *((double *)this + 13) = result;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_24;
    goto LABEL_57;
  }
LABEL_56:
  v14 = *((_DWORD *)a2 + 50);
  v3 |= 0x2000000uLL;
  *((_QWORD *)this + 28) = v3;
  *((_DWORD *)this + 50) = v14;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v2 & 8) == 0)
      goto LABEL_25;
    goto LABEL_58;
  }
LABEL_57:
  v15 = *((_DWORD *)a2 + 49);
  v3 |= 0x1000000uLL;
  *((_QWORD *)this + 28) = v3;
  *((_DWORD *)this + 49) = v15;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 8) == 0)
  {
LABEL_25:
    if ((v2 & 4) == 0)
      goto LABEL_26;
    goto LABEL_59;
  }
LABEL_58:
  result = *((double *)a2 + 4);
  v3 |= 8uLL;
  *((_QWORD *)this + 28) = v3;
  *((double *)this + 4) = result;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 4) == 0)
  {
LABEL_26:
    if ((v2 & 0x10) == 0)
      goto LABEL_27;
    goto LABEL_60;
  }
LABEL_59:
  result = *((double *)a2 + 3);
  v3 |= 4uLL;
  *((_QWORD *)this + 28) = v3;
  *((double *)this + 3) = result;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x10) == 0)
  {
LABEL_27:
    if ((v2 & 0x100000000) == 0)
      goto LABEL_28;
    goto LABEL_61;
  }
LABEL_60:
  result = *((double *)a2 + 5);
  v3 |= 0x10uLL;
  *((_QWORD *)this + 28) = v3;
  *((double *)this + 5) = result;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_28:
    if ((v2 & 0x100) == 0)
      goto LABEL_29;
    goto LABEL_62;
  }
LABEL_61:
  v16 = *((_BYTE *)a2 + 219);
  v3 |= (unint64_t)&_mh_execute_header;
  *((_QWORD *)this + 28) = v3;
  *((_BYTE *)this + 219) = v16;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x100) == 0)
  {
LABEL_29:
    if ((v2 & 0x800) == 0)
      goto LABEL_30;
    goto LABEL_63;
  }
LABEL_62:
  result = *((double *)a2 + 9);
  v3 |= 0x100uLL;
  *((_QWORD *)this + 28) = v3;
  *((double *)this + 9) = result;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x800) == 0)
  {
LABEL_30:
    if ((v2 & 0x10000) == 0)
      goto LABEL_31;
    goto LABEL_64;
  }
LABEL_63:
  result = *((double *)a2 + 12);
  v3 |= 0x800uLL;
  *((_QWORD *)this + 28) = v3;
  *((double *)this + 12) = result;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x10000) == 0)
  {
LABEL_31:
    if ((v2 & 0x20000) == 0)
      goto LABEL_32;
    goto LABEL_65;
  }
LABEL_64:
  result = *((double *)a2 + 17);
  v3 |= 0x10000uLL;
  *((_QWORD *)this + 28) = v3;
  *((double *)this + 17) = result;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x20000) == 0)
  {
LABEL_32:
    if ((v2 & 0x20) == 0)
      goto LABEL_33;
    goto LABEL_66;
  }
LABEL_65:
  result = *((double *)a2 + 18);
  v3 |= 0x20000uLL;
  *((_QWORD *)this + 28) = v3;
  *((double *)this + 18) = result;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x20) == 0)
  {
LABEL_33:
    if ((v2 & 0x400000) == 0)
      goto LABEL_34;
    goto LABEL_67;
  }
LABEL_66:
  result = *((double *)a2 + 6);
  v3 |= 0x20uLL;
  *((_QWORD *)this + 28) = v3;
  *((double *)this + 6) = result;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x400000) == 0)
  {
LABEL_34:
    if ((v2 & 0x2000) == 0)
      goto LABEL_35;
    goto LABEL_68;
  }
LABEL_67:
  result = *((double *)a2 + 23);
  v3 |= 0x400000uLL;
  *((_QWORD *)this + 28) = v3;
  *((double *)this + 23) = result;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x2000) == 0)
  {
LABEL_35:
    if ((v2 & 0x100000) == 0)
      goto LABEL_36;
    goto LABEL_69;
  }
LABEL_68:
  result = *((double *)a2 + 14);
  v3 |= 0x2000uLL;
  *((_QWORD *)this + 28) = v3;
  *((double *)this + 14) = result;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x100000) == 0)
  {
LABEL_36:
    if ((v2 & 0x200) == 0)
      goto LABEL_37;
    goto LABEL_70;
  }
LABEL_69:
  result = *((double *)a2 + 21);
  v3 |= 0x100000uLL;
  *((_QWORD *)this + 28) = v3;
  *((double *)this + 21) = result;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x200) == 0)
  {
LABEL_37:
    if ((v2 & 0x200000) == 0)
      goto LABEL_38;
    goto LABEL_71;
  }
LABEL_70:
  result = *((double *)a2 + 10);
  v3 |= 0x200uLL;
  *((_QWORD *)this + 28) = v3;
  *((double *)this + 10) = result;
  v2 = *((_QWORD *)a2 + 28);
  if ((v2 & 0x200000) == 0)
  {
LABEL_38:
    if ((v2 & 0x400) == 0)
      return result;
LABEL_72:
    result = *((double *)a2 + 11);
    *((_QWORD *)this + 28) = v3 | 0x400;
    *((double *)this + 11) = result;
    return result;
  }
LABEL_71:
  result = *((double *)a2 + 22);
  v3 |= 0x200000uLL;
  *((_QWORD *)this + 28) = v3;
  *((double *)this + 22) = result;
  if ((*((_QWORD *)a2 + 28) & 0x400) != 0)
    goto LABEL_72;
  return result;
}

CMMsl *CMMsl::RunningFormMetrics::operator=(CMMsl *a1, const CMMsl::RunningFormMetrics *a2)
{
  CMMsl::RunningFormMetrics *v3;
  _BYTE v5[232];

  if (a1 != a2)
  {
    CMMsl::RunningFormMetrics::RunningFormMetrics((CMMsl::RunningFormMetrics *)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningFormMetrics *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RunningFormMetrics *a2, CMMsl::RunningFormMetrics *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double result;

  v3 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = *((_QWORD *)a2 + 28);
  *((_QWORD *)a2 + 28) = v3;
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v4;
  v5 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v5;
  LOBYTE(v3) = *((_BYTE *)this + 220);
  *((_BYTE *)this + 220) = *((_BYTE *)a2 + 220);
  *((_BYTE *)a2 + 220) = v3;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  LOBYTE(v3) = *((_BYTE *)this + 217);
  *((_BYTE *)this + 217) = *((_BYTE *)a2 + 217);
  *((_BYTE *)a2 + 217) = v3;
  v7 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 20) = v7;
  LOBYTE(v3) = *((_BYTE *)this + 221);
  *((_BYTE *)this + 221) = *((_BYTE *)a2 + 221);
  *((_BYTE *)a2 + 221) = v3;
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  LOBYTE(v3) = *((_BYTE *)this + 216);
  *((_BYTE *)this + 216) = *((_BYTE *)a2 + 216);
  *((_BYTE *)a2 + 216) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 218);
  *((_BYTE *)this + 218) = *((_BYTE *)a2 + 218);
  *((_BYTE *)a2 + 218) = v3;
  v9 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v9;
  v10 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v10;
  v11 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v11;
  LODWORD(v3) = *((_DWORD *)this + 52);
  *((_DWORD *)this + 52) = *((_DWORD *)a2 + 52);
  *((_DWORD *)a2 + 52) = v3;
  LODWORD(v3) = *((_DWORD *)this + 51);
  *((_DWORD *)this + 51) = *((_DWORD *)a2 + 51);
  *((_DWORD *)a2 + 51) = v3;
  LODWORD(v3) = *((_DWORD *)this + 53);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 53);
  *((_DWORD *)a2 + 53) = v3;
  LODWORD(v3) = *((_DWORD *)this + 48);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_DWORD *)a2 + 48) = v3;
  v12 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v12;
  LODWORD(v3) = *((_DWORD *)this + 50);
  *((_DWORD *)this + 50) = *((_DWORD *)a2 + 50);
  *((_DWORD *)a2 + 50) = v3;
  LODWORD(v3) = *((_DWORD *)this + 49);
  *((_DWORD *)this + 49) = *((_DWORD *)a2 + 49);
  *((_DWORD *)a2 + 49) = v3;
  v13 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v13;
  v14 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v14;
  v15 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v15;
  LOBYTE(v3) = *((_BYTE *)this + 219);
  *((_BYTE *)this + 219) = *((_BYTE *)a2 + 219);
  *((_BYTE *)a2 + 219) = v3;
  v16 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v16;
  v17 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v17;
  v18 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v18;
  v19 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v19;
  v20 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v20;
  v21 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = *((_QWORD *)a2 + 23);
  *((_QWORD *)a2 + 23) = v21;
  v22 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v22;
  v23 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
  *((_QWORD *)a2 + 21) = v23;
  v24 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v24;
  v25 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = *((_QWORD *)a2 + 22);
  *((_QWORD *)a2 + 22) = v25;
  result = *((double *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((double *)a2 + 11) = result;
  return result;
}

double CMMsl::RunningFormMetrics::RunningFormMetrics(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100354038;
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a2 + 224) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 220) = *(_BYTE *)(a2 + 220);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 217) = *(_BYTE *)(a2 + 217);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 221) = *(_BYTE *)(a2 + 221);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_BYTE *)(a1 + 218) = *(_BYTE *)(a2 + 218);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 219) = *(_BYTE *)(a2 + 219);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  result = *(double *)(a2 + 88);
  *(double *)(a1 + 88) = result;
  return result;
}

CMMsl *CMMsl::RunningFormMetrics::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::RunningFormMetrics *v3;
  _BYTE v5[232];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::RunningFormMetrics::RunningFormMetrics((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningFormMetrics *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::RunningFormMetrics::formatText(CMMsl::RunningFormMetrics *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "emptyField0", *((double *)this + 1));
    v5 = *((_QWORD *)this + 28);
    if ((v5 & 0x20000000) == 0)
    {
LABEL_3:
      if ((v5 & 0x800000) == 0)
        goto LABEL_4;
      goto LABEL_40;
    }
  }
  else if ((v5 & 0x20000000) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "emptyField1", *((_BYTE *)this + 216));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x800000) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0)
      goto LABEL_5;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "emptyField2", *((_DWORD *)this + 48));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "groundContactTime", *((double *)this + 2));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0)
      goto LABEL_7;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "groundContactTimeCadence", *((double *)this + 3));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_8;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "groundContactTimeGrade", *((double *)this + 4));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_8:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_9;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "groundContactTimeGradeSource", *((_DWORD *)this + 49));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_9:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_10;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "groundContactTimeGradeType", *((_DWORD *)this + 50));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "groundContactTimeIsValid", *((_BYTE *)this + 217));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x10) == 0)
  {
LABEL_11:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_12;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "groundContactTimePace", *((double *)this + 5));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "groundContactTimeReportingStatus", *((_DWORD *)this + 51));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x20) == 0)
  {
LABEL_13:
    if ((v5 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "groundContactTimeUnsmoothed", *((double *)this + 6));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x40) == 0)
  {
LABEL_14:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "groundContactTimeWindowEndTime", *((double *)this + 7));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_16;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "isFlat", *((_BYTE *)this + 218));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x80) == 0)
      goto LABEL_17;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "isFormBasedStrideLength", *((_BYTE *)this + 219));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x80) == 0)
  {
LABEL_17:
    if ((v5 & 0x100) == 0)
      goto LABEL_18;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "strideLength", *((double *)this + 8));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x100) == 0)
  {
LABEL_18:
    if ((v5 & 0x200) == 0)
      goto LABEL_19;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "strideLengthCadence", *((double *)this + 9));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x200) == 0)
  {
LABEL_19:
    if ((v5 & 0x400) == 0)
      goto LABEL_20;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "strideLengthGrade", *((double *)this + 10));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x400) == 0)
  {
LABEL_20:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_21;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "strideLengthGradeType", *((double *)this + 11));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_21:
    if ((v5 & 0x800) == 0)
      goto LABEL_22;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "strideLengthIsValid", *((_BYTE *)this + 220));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x800) == 0)
  {
LABEL_22:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_23;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "strideLengthPace", *((double *)this + 12));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x1000) == 0)
      goto LABEL_24;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "strideLengthReportingStatus", *((_DWORD *)this + 52));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x1000) == 0)
  {
LABEL_24:
    if ((v5 & 0x2000) == 0)
      goto LABEL_25;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "strideLengthUncalibrated", *((double *)this + 13));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x2000) == 0)
  {
LABEL_25:
    if ((v5 & 0x4000) == 0)
      goto LABEL_26;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "strideLengthUnsmoothed", *((double *)this + 14));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x4000) == 0)
  {
LABEL_26:
    if ((v5 & 0x8000) == 0)
      goto LABEL_27;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "strideLengthWindowEndTime", *((double *)this + 15));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x8000) == 0)
  {
LABEL_27:
    if ((v5 & 0x10000) == 0)
      goto LABEL_28;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 16));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x10000) == 0)
  {
LABEL_28:
    if ((v5 & 0x20000) == 0)
      goto LABEL_29;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "verticalOscCadence", *((double *)this + 17));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x20000) == 0)
  {
LABEL_29:
    if ((v5 & 0x40000) == 0)
      goto LABEL_30;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "verticalOscPace", *((double *)this + 18));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x40000) == 0)
  {
LABEL_30:
    if ((v5 & 0x80000) == 0)
      goto LABEL_31;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "verticalOscWindowEndTime", *((double *)this + 19));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x80000) == 0)
  {
LABEL_31:
    if ((v5 & 0x100000) == 0)
      goto LABEL_32;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "verticalOscillation", *((double *)this + 20));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x100000) == 0)
  {
LABEL_32:
    if ((v5 & 0x200000) == 0)
      goto LABEL_33;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "verticalOscillationGrade", *((double *)this + 21));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x200000) == 0)
  {
LABEL_33:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_34;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "verticalOscillationGradeType", *((double *)this + 22));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_35;
LABEL_71:
    PB::TextFormatter::format(a2, "verticalOscillationReportingStatus", *((_DWORD *)this + 53));
    if ((*((_QWORD *)this + 28) & 0x400000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_36;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "verticalOscillationIsValid", *((_BYTE *)this + 221));
  v5 = *((_QWORD *)this + 28);
  if ((v5 & 0x10000000) != 0)
    goto LABEL_71;
LABEL_35:
  if ((v5 & 0x400000) != 0)
LABEL_36:
    PB::TextFormatter::format(a2, "verticalOscillationUnsmoothed", *((double *)this + 23));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RunningFormMetrics::readFrom(CMMsl::RunningFormMetrics *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  char v60;
  unint64_t v61;
  uint64_t v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  char v66;
  int v67;
  BOOL v68;
  char v69;
  unsigned int v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  unint64_t v75;
  char v76;
  char v77;
  unsigned int v78;
  unint64_t v79;
  char v80;
  char v81;
  unsigned int v82;
  unint64_t v83;
  char v84;
  char v85;
  unsigned int v86;
  unint64_t v87;
  char v88;
  char v89;
  unsigned int v90;
  unint64_t v91;
  char v92;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_QWORD *)this + 28) |= 0x40uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_146;
              *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_202;
            case 2u:
              *((_QWORD *)this + 28) |= 0x80uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_146;
              *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_202;
            case 3u:
              *((_QWORD *)this + 28) |= 0x200000000uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v22 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v22 = v21 != 0;
              }
              *((_BYTE *)this + 220) = v22;
              goto LABEL_203;
            case 4u:
              *((_QWORD *)this + 28) |= 2uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_146;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_202;
            case 5u:
              *((_QWORD *)this + 28) |= 0x40000000uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v24 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v23 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v24 = v23 != 0;
              }
              *((_BYTE *)this + 217) = v24;
              goto LABEL_203;
            case 6u:
              *((_QWORD *)this + 28) |= 0x80000uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_146;
              *((_QWORD *)this + 20) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_202;
            case 7u:
              *((_QWORD *)this + 28) |= 0x400000000uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v26 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v25 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v26 = v25 != 0;
              }
              *((_BYTE *)this + 221) = v26;
              goto LABEL_203;
            case 8u:
              *((_QWORD *)this + 28) |= 1uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_146;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_202;
            case 9u:
              *((_QWORD *)this + 28) |= 0x20000000uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v28 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v28 = v27 != 0;
              }
              *((_BYTE *)this + 216) = v28;
              goto LABEL_203;
            case 0xAu:
              *((_QWORD *)this + 28) |= 0x80000000uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v30 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v30 = v29 != 0;
              }
              *((_BYTE *)this + 218) = v30;
              goto LABEL_203;
            case 0xBu:
              *((_QWORD *)this + 28) |= 0x8000uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_146;
              *((_QWORD *)this + 16) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_202;
            case 0xCu:
              *((_QWORD *)this + 28) |= 0x40000uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_146;
              *((_QWORD *)this + 19) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_202;
            case 0xDu:
              *((_QWORD *)this + 28) |= 0x4000uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_146;
              *((_QWORD *)this + 15) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_202;
            case 0xEu:
              *((_QWORD *)this + 28) |= 0x8000000uLL;
              v31 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v32 = *(_QWORD *)a2;
              if (v31 > 0xFFFFFFFFFFFFFFF5 || v31 + 10 > v2)
              {
                v69 = 0;
                v70 = 0;
                v35 = 0;
                if (v2 <= v31)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v31)
                  {
                    LODWORD(v35) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_212;
                  }
                  v71 = v31++;
                  v72 = *(_BYTE *)(v32 + v71);
                  *((_QWORD *)a2 + 1) = v31;
                  v35 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0)
                    break;
                  v69 += 7;
                  v14 = v70++ > 8;
                  if (v14)
                  {
                    LODWORD(v35) = 0;
LABEL_211:
                    v2 = v71 + 1;
                    goto LABEL_212;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v35) = 0;
                goto LABEL_211;
              }
              v33 = 0;
              v34 = 0;
              v35 = 0;
              do
              {
                v2 = v31 + 1;
                *((_QWORD *)a2 + 1) = v31 + 1;
                v36 = *(_BYTE *)(v32 + v31);
                v35 |= (unint64_t)(v36 & 0x7F) << v33;
                if ((v36 & 0x80) == 0)
                  goto LABEL_212;
                v33 += 7;
                v31 = v2;
                v14 = v34++ > 8;
              }
              while (!v14);
              LODWORD(v35) = 0;
LABEL_212:
              *((_DWORD *)this + 52) = v35;
              goto LABEL_203;
            case 0xFu:
              *((_QWORD *)this + 28) |= 0x4000000uLL;
              v37 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v38 = *(_QWORD *)a2;
              if (v37 > 0xFFFFFFFFFFFFFFF5 || v37 + 10 > v2)
              {
                v73 = 0;
                v74 = 0;
                v41 = 0;
                if (v2 <= v37)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v37)
                  {
                    LODWORD(v41) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_217;
                  }
                  v75 = v37++;
                  v76 = *(_BYTE *)(v38 + v75);
                  *((_QWORD *)a2 + 1) = v37;
                  v41 |= (unint64_t)(v76 & 0x7F) << v73;
                  if ((v76 & 0x80) == 0)
                    break;
                  v73 += 7;
                  v14 = v74++ > 8;
                  if (v14)
                  {
                    LODWORD(v41) = 0;
LABEL_216:
                    v2 = v75 + 1;
                    goto LABEL_217;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v41) = 0;
                goto LABEL_216;
              }
              v39 = 0;
              v40 = 0;
              v41 = 0;
              do
              {
                v2 = v37 + 1;
                *((_QWORD *)a2 + 1) = v37 + 1;
                v42 = *(_BYTE *)(v38 + v37);
                v41 |= (unint64_t)(v42 & 0x7F) << v39;
                if ((v42 & 0x80) == 0)
                  goto LABEL_217;
                v39 += 7;
                v37 = v2;
                v14 = v40++ > 8;
              }
              while (!v14);
              LODWORD(v41) = 0;
LABEL_217:
              *((_DWORD *)this + 51) = v41;
              goto LABEL_203;
            case 0x10u:
              *((_QWORD *)this + 28) |= 0x10000000uLL;
              v43 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v44 = *(_QWORD *)a2;
              if (v43 > 0xFFFFFFFFFFFFFFF5 || v43 + 10 > v2)
              {
                v77 = 0;
                v78 = 0;
                v47 = 0;
                if (v2 <= v43)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v43)
                  {
                    LODWORD(v47) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_222;
                  }
                  v79 = v43++;
                  v80 = *(_BYTE *)(v44 + v79);
                  *((_QWORD *)a2 + 1) = v43;
                  v47 |= (unint64_t)(v80 & 0x7F) << v77;
                  if ((v80 & 0x80) == 0)
                    break;
                  v77 += 7;
                  v14 = v78++ > 8;
                  if (v14)
                  {
                    LODWORD(v47) = 0;
LABEL_221:
                    v2 = v79 + 1;
                    goto LABEL_222;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v47) = 0;
                goto LABEL_221;
              }
              v45 = 0;
              v46 = 0;
              v47 = 0;
              do
              {
                v2 = v43 + 1;
                *((_QWORD *)a2 + 1) = v43 + 1;
                v48 = *(_BYTE *)(v44 + v43);
                v47 |= (unint64_t)(v48 & 0x7F) << v45;
                if ((v48 & 0x80) == 0)
                  goto LABEL_222;
                v45 += 7;
                v43 = v2;
                v14 = v46++ > 8;
              }
              while (!v14);
              LODWORD(v47) = 0;
LABEL_222:
              *((_DWORD *)this + 53) = v47;
              goto LABEL_203;
            case 0x11u:
              *((_QWORD *)this + 28) |= 0x800000uLL;
              v49 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v50 = *(_QWORD *)a2;
              if (v49 > 0xFFFFFFFFFFFFFFF5 || v49 + 10 > v2)
              {
                v81 = 0;
                v82 = 0;
                v53 = 0;
                if (v2 <= v49)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v49)
                  {
                    LODWORD(v53) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_227;
                  }
                  v83 = v49++;
                  v84 = *(_BYTE *)(v50 + v83);
                  *((_QWORD *)a2 + 1) = v49;
                  v53 |= (unint64_t)(v84 & 0x7F) << v81;
                  if ((v84 & 0x80) == 0)
                    break;
                  v81 += 7;
                  v14 = v82++ > 8;
                  if (v14)
                  {
                    LODWORD(v53) = 0;
LABEL_226:
                    v2 = v83 + 1;
                    goto LABEL_227;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v53) = 0;
                goto LABEL_226;
              }
              v51 = 0;
              v52 = 0;
              v53 = 0;
              do
              {
                v2 = v49 + 1;
                *((_QWORD *)a2 + 1) = v49 + 1;
                v54 = *(_BYTE *)(v50 + v49);
                v53 |= (unint64_t)(v54 & 0x7F) << v51;
                if ((v54 & 0x80) == 0)
                  goto LABEL_227;
                v51 += 7;
                v49 = v2;
                v14 = v52++ > 8;
              }
              while (!v14);
              LODWORD(v53) = 0;
LABEL_227:
              *((_DWORD *)this + 48) = v53;
              goto LABEL_203;
            case 0x12u:
              *((_QWORD *)this + 28) |= 0x1000uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_146;
              *((_QWORD *)this + 13) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_202;
            case 0x13u:
              *((_QWORD *)this + 28) |= 0x2000000uLL;
              v55 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v56 = *(_QWORD *)a2;
              if (v55 > 0xFFFFFFFFFFFFFFF5 || v55 + 10 > v2)
              {
                v85 = 0;
                v86 = 0;
                v59 = 0;
                if (v2 <= v55)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v55)
                  {
                    LODWORD(v59) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_232;
                  }
                  v87 = v55++;
                  v88 = *(_BYTE *)(v56 + v87);
                  *((_QWORD *)a2 + 1) = v55;
                  v59 |= (unint64_t)(v88 & 0x7F) << v85;
                  if ((v88 & 0x80) == 0)
                    break;
                  v85 += 7;
                  v14 = v86++ > 8;
                  if (v14)
                  {
                    LODWORD(v59) = 0;
LABEL_231:
                    v2 = v87 + 1;
                    goto LABEL_232;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v59) = 0;
                goto LABEL_231;
              }
              v57 = 0;
              v58 = 0;
              v59 = 0;
              do
              {
                v2 = v55 + 1;
                *((_QWORD *)a2 + 1) = v55 + 1;
                v60 = *(_BYTE *)(v56 + v55);
                v59 |= (unint64_t)(v60 & 0x7F) << v57;
                if ((v60 & 0x80) == 0)
                  goto LABEL_232;
                v57 += 7;
                v55 = v2;
                v14 = v58++ > 8;
              }
              while (!v14);
              LODWORD(v59) = 0;
LABEL_232:
              *((_DWORD *)this + 50) = v59;
              goto LABEL_203;
            case 0x14u:
              *((_QWORD *)this + 28) |= 0x1000000uLL;
              v61 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v62 = *(_QWORD *)a2;
              if (v61 > 0xFFFFFFFFFFFFFFF5 || v61 + 10 > v2)
              {
                v89 = 0;
                v90 = 0;
                v65 = 0;
                if (v2 <= v61)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v61)
                  {
                    LODWORD(v65) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_237;
                  }
                  v91 = v61++;
                  v92 = *(_BYTE *)(v62 + v91);
                  *((_QWORD *)a2 + 1) = v61;
                  v65 |= (unint64_t)(v92 & 0x7F) << v89;
                  if ((v92 & 0x80) == 0)
                    break;
                  v89 += 7;
                  v14 = v90++ > 8;
                  if (v14)
                  {
                    LODWORD(v65) = 0;
LABEL_236:
                    v2 = v91 + 1;
                    goto LABEL_237;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v65) = 0;
                goto LABEL_236;
              }
              v63 = 0;
              v64 = 0;
              v65 = 0;
              do
              {
                v2 = v61 + 1;
                *((_QWORD *)a2 + 1) = v61 + 1;
                v66 = *(_BYTE *)(v62 + v61);
                v65 |= (unint64_t)(v66 & 0x7F) << v63;
                if ((v66 & 0x80) == 0)
                  goto LABEL_237;
                v63 += 7;
                v61 = v2;
                v14 = v64++ > 8;
              }
              while (!v14);
              LODWORD(v65) = 0;
LABEL_237:
              *((_DWORD *)this + 49) = v65;
LABEL_203:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0x15u:
              *((_QWORD *)this + 28) |= 8uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_146;
              *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_202;
            case 0x16u:
              *((_QWORD *)this + 28) |= 4uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_146;
              *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_202;
            case 0x17u:
              *((_QWORD *)this + 28) |= 0x10uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_146;
              *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_202;
            case 0x18u:
              *((_QWORD *)this + 28) |= (unint64_t)&_mh_execute_header;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v68 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v67 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v68 = v67 != 0;
              }
              *((_BYTE *)this + 219) = v68;
              goto LABEL_203;
            case 0x19u:
              *((_QWORD *)this + 28) |= 0x100uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_146;
              *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_202;
            case 0x1Au:
              *((_QWORD *)this + 28) |= 0x800uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_146;
              *((_QWORD *)this + 12) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_202;
            case 0x1Bu:
              *((_QWORD *)this + 28) |= 0x10000uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_146;
              *((_QWORD *)this + 17) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_202;
            case 0x1Cu:
              *((_QWORD *)this + 28) |= 0x20000uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_146;
              *((_QWORD *)this + 18) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_202;
            case 0x1Du:
              *((_QWORD *)this + 28) |= 0x20uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_146;
              *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_202;
            case 0x1Eu:
              *((_QWORD *)this + 28) |= 0x400000uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_146;
              *((_QWORD *)this + 23) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_202;
            case 0x1Fu:
              *((_QWORD *)this + 28) |= 0x2000uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_146;
              *((_QWORD *)this + 14) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_202;
            case 0x20u:
              *((_QWORD *)this + 28) |= 0x100000uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_146;
              *((_QWORD *)this + 21) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_202;
            case 0x21u:
              *((_QWORD *)this + 28) |= 0x200uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_146;
              *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_202;
            case 0x22u:
              *((_QWORD *)this + 28) |= 0x200000uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_146;
              *((_QWORD *)this + 22) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_202;
            case 0x23u:
              *((_QWORD *)this + 28) |= 0x400uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 11) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_202:
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_146:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_203;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_203;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::RunningFormMetrics::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = this;
  v4 = *(_QWORD *)(this + 224);
  if ((v4 & 0x40) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 56), 1u);
    v4 = *(_QWORD *)(v3 + 224);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x200000000) == 0)
        goto LABEL_4;
      goto LABEL_39;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 2u);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 220), 3u);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_6;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 4u);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x80000) == 0)
      goto LABEL_7;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 217), 5u);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x80000) == 0)
  {
LABEL_7:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_8;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(double *)(v3 + 160), 6u);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0)
      goto LABEL_9;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 221), 7u);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_10;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 8u);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 216), 9u);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 218), 0xAu);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x8000) == 0)
  {
LABEL_12:
    if ((v4 & 0x40000) == 0)
      goto LABEL_13;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(double *)(v3 + 128), 0xBu);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x40000) == 0)
  {
LABEL_13:
    if ((v4 & 0x4000) == 0)
      goto LABEL_14;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(double *)(v3 + 152), 0xCu);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x4000) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_15;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(double *)(v3 + 120), 0xDu);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_16;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 208), 0xEu);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_17;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 204), 0xFu);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x800000) == 0)
      goto LABEL_18;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 212), 0x10u);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x800000) == 0)
  {
LABEL_18:
    if ((v4 & 0x1000) == 0)
      goto LABEL_19;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 192), 0x11u);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x1000) == 0)
  {
LABEL_19:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_20;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(double *)(v3 + 104), 0x12u);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_21;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 200), 0x13u);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_21:
    if ((v4 & 8) == 0)
      goto LABEL_22;
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 196), 0x14u);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 8) == 0)
  {
LABEL_22:
    if ((v4 & 4) == 0)
      goto LABEL_23;
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 0x15u);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 4) == 0)
  {
LABEL_23:
    if ((v4 & 0x10) == 0)
      goto LABEL_24;
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 0x16u);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x10) == 0)
  {
LABEL_24:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_25;
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 0x17u);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x100) == 0)
      goto LABEL_26;
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 219), 0x18u);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x100) == 0)
  {
LABEL_26:
    if ((v4 & 0x800) == 0)
      goto LABEL_27;
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 0x19u);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x800) == 0)
  {
LABEL_27:
    if ((v4 & 0x10000) == 0)
      goto LABEL_28;
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::write(a2, *(double *)(v3 + 96), 0x1Au);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x10000) == 0)
  {
LABEL_28:
    if ((v4 & 0x20000) == 0)
      goto LABEL_29;
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::write(a2, *(double *)(v3 + 136), 0x1Bu);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x20000) == 0)
  {
LABEL_29:
    if ((v4 & 0x20) == 0)
      goto LABEL_30;
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::write(a2, *(double *)(v3 + 144), 0x1Cu);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x20) == 0)
  {
LABEL_30:
    if ((v4 & 0x400000) == 0)
      goto LABEL_31;
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 0x1Du);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x400000) == 0)
  {
LABEL_31:
    if ((v4 & 0x2000) == 0)
      goto LABEL_32;
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::write(a2, *(double *)(v3 + 184), 0x1Eu);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x2000) == 0)
  {
LABEL_32:
    if ((v4 & 0x100000) == 0)
      goto LABEL_33;
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::write(a2, *(double *)(v3 + 112), 0x1Fu);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x100000) == 0)
  {
LABEL_33:
    if ((v4 & 0x200) == 0)
      goto LABEL_34;
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::write(a2, *(double *)(v3 + 168), 0x20u);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x200) == 0)
  {
LABEL_34:
    if ((v4 & 0x200000) == 0)
      goto LABEL_35;
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::write(a2, *(double *)(v3 + 80), 0x21u);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x200000) == 0)
  {
LABEL_35:
    if ((v4 & 0x400) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 88), 0x23u);
  }
LABEL_70:
  this = PB::Writer::write(a2, *(double *)(v3 + 176), 0x22u);
  if ((*(_QWORD *)(v3 + 224) & 0x400) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 88), 0x23u);
  return this;
}

uint64_t CMMsl::RunningFormMetrics::hash_value(CMMsl::RunningFormMetrics *this)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t v34;
  double v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  double v41;

  v1 = *((_QWORD *)this + 28);
  if ((v1 & 0x40) == 0)
  {
    v2 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_3;
LABEL_95:
    v41 = 0.0;
    if ((v1 & 0x200000000) != 0)
      goto LABEL_6;
    goto LABEL_96;
  }
  if (*((double *)this + 7) == 0.0)
    v2 = 0;
  else
    v2 = *((_QWORD *)this + 7);
  if ((v1 & 0x80) == 0)
    goto LABEL_95;
LABEL_3:
  v3 = *((double *)this + 8);
  if (v3 == 0.0)
    v3 = 0.0;
  v41 = v3;
  if ((v1 & 0x200000000) != 0)
  {
LABEL_6:
    v40 = *((unsigned __int8 *)this + 220);
    if ((v1 & 2) != 0)
      goto LABEL_7;
LABEL_97:
    v39 = 0.0;
    if ((v1 & 0x40000000) != 0)
      goto LABEL_10;
    goto LABEL_98;
  }
LABEL_96:
  v40 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_97;
LABEL_7:
  v4 = *((double *)this + 2);
  if (v4 == 0.0)
    v4 = 0.0;
  v39 = v4;
  if ((v1 & 0x40000000) != 0)
  {
LABEL_10:
    v38 = *((unsigned __int8 *)this + 217);
    if ((v1 & 0x80000) != 0)
      goto LABEL_11;
LABEL_99:
    v37 = 0.0;
    if ((v1 & 0x400000000) != 0)
      goto LABEL_14;
    goto LABEL_100;
  }
LABEL_98:
  v38 = 0;
  if ((v1 & 0x80000) == 0)
    goto LABEL_99;
LABEL_11:
  v5 = *((double *)this + 20);
  if (v5 == 0.0)
    v5 = 0.0;
  v37 = v5;
  if ((v1 & 0x400000000) != 0)
  {
LABEL_14:
    v36 = *((unsigned __int8 *)this + 221);
    if ((v1 & 1) != 0)
      goto LABEL_15;
LABEL_101:
    v35 = 0.0;
    if ((v1 & 0x20000000) != 0)
      goto LABEL_18;
    goto LABEL_102;
  }
LABEL_100:
  v36 = 0;
  if ((v1 & 1) == 0)
    goto LABEL_101;
LABEL_15:
  v6 = *((double *)this + 1);
  if (v6 == 0.0)
    v6 = 0.0;
  v35 = v6;
  if ((v1 & 0x20000000) != 0)
  {
LABEL_18:
    v34 = *((unsigned __int8 *)this + 216);
    if ((v1 & 0x80000000) != 0)
      goto LABEL_19;
    goto LABEL_103;
  }
LABEL_102:
  v34 = 0;
  if ((v1 & 0x80000000) != 0)
  {
LABEL_19:
    v7 = *((unsigned __int8 *)this + 218);
    if ((v1 & 0x8000) != 0)
      goto LABEL_20;
LABEL_104:
    v8 = 0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_24;
LABEL_105:
    v9 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_28;
LABEL_106:
    v10 = 0;
    if ((v1 & 0x8000000) != 0)
      goto LABEL_32;
    goto LABEL_107;
  }
LABEL_103:
  v7 = 0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_104;
LABEL_20:
  if (*((double *)this + 16) == 0.0)
    v8 = 0;
  else
    v8 = *((_QWORD *)this + 16);
  if ((v1 & 0x40000) == 0)
    goto LABEL_105;
LABEL_24:
  if (*((double *)this + 19) == 0.0)
    v9 = 0;
  else
    v9 = *((_QWORD *)this + 19);
  if ((v1 & 0x4000) == 0)
    goto LABEL_106;
LABEL_28:
  if (*((double *)this + 15) == 0.0)
    v10 = 0;
  else
    v10 = *((_QWORD *)this + 15);
  if ((v1 & 0x8000000) != 0)
  {
LABEL_32:
    v11 = *((int *)this + 52);
    if ((v1 & 0x4000000) != 0)
      goto LABEL_33;
    goto LABEL_108;
  }
LABEL_107:
  v11 = 0;
  if ((v1 & 0x4000000) != 0)
  {
LABEL_33:
    v12 = *((int *)this + 51);
    if ((v1 & 0x10000000) != 0)
      goto LABEL_34;
    goto LABEL_109;
  }
LABEL_108:
  v12 = 0;
  if ((v1 & 0x10000000) != 0)
  {
LABEL_34:
    v13 = *((int *)this + 53);
    if ((v1 & 0x800000) != 0)
      goto LABEL_35;
    goto LABEL_110;
  }
LABEL_109:
  v13 = 0;
  if ((v1 & 0x800000) != 0)
  {
LABEL_35:
    v14 = *((int *)this + 48);
    if ((v1 & 0x1000) != 0)
      goto LABEL_36;
LABEL_111:
    v15 = 0;
    if ((v1 & 0x2000000) != 0)
      goto LABEL_40;
    goto LABEL_112;
  }
LABEL_110:
  v14 = 0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_111;
LABEL_36:
  if (*((double *)this + 13) == 0.0)
    v15 = 0;
  else
    v15 = *((_QWORD *)this + 13);
  if ((v1 & 0x2000000) != 0)
  {
LABEL_40:
    v16 = *((int *)this + 50);
    if ((v1 & 0x1000000) != 0)
      goto LABEL_41;
    goto LABEL_113;
  }
LABEL_112:
  v16 = 0;
  if ((v1 & 0x1000000) != 0)
  {
LABEL_41:
    v17 = *((int *)this + 49);
    if ((v1 & 8) != 0)
      goto LABEL_42;
LABEL_114:
    v18 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_46;
LABEL_115:
    v19 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_50;
LABEL_116:
    v20 = 0;
    if ((v1 & 0x100000000) != 0)
      goto LABEL_54;
    goto LABEL_117;
  }
LABEL_113:
  v17 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_114;
LABEL_42:
  if (*((double *)this + 4) == 0.0)
    v18 = 0;
  else
    v18 = *((_QWORD *)this + 4);
  if ((v1 & 4) == 0)
    goto LABEL_115;
LABEL_46:
  if (*((double *)this + 3) == 0.0)
    v19 = 0;
  else
    v19 = *((_QWORD *)this + 3);
  if ((v1 & 0x10) == 0)
    goto LABEL_116;
LABEL_50:
  if (*((double *)this + 5) == 0.0)
    v20 = 0;
  else
    v20 = *((_QWORD *)this + 5);
  if ((v1 & 0x100000000) != 0)
  {
LABEL_54:
    v21 = *((unsigned __int8 *)this + 219);
    if ((v1 & 0x100) != 0)
      goto LABEL_55;
LABEL_118:
    v22 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_59;
LABEL_119:
    v23 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_63;
LABEL_120:
    v24 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_67;
LABEL_121:
    v25 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_70;
LABEL_122:
    v26 = 0.0;
    if ((v1 & 0x400000) != 0)
      goto LABEL_73;
LABEL_123:
    v27 = 0.0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_76;
LABEL_124:
    v28 = 0.0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_79;
LABEL_125:
    v29 = 0.0;
    if ((v1 & 0x200) != 0)
      goto LABEL_82;
LABEL_126:
    v30 = 0.0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_85;
    goto LABEL_127;
  }
LABEL_117:
  v21 = 0;
  if ((v1 & 0x100) == 0)
    goto LABEL_118;
LABEL_55:
  if (*((double *)this + 9) == 0.0)
    v22 = 0;
  else
    v22 = *((_QWORD *)this + 9);
  if ((v1 & 0x800) == 0)
    goto LABEL_119;
LABEL_59:
  if (*((double *)this + 12) == 0.0)
    v23 = 0;
  else
    v23 = *((_QWORD *)this + 12);
  if ((v1 & 0x10000) == 0)
    goto LABEL_120;
LABEL_63:
  if (*((double *)this + 17) == 0.0)
    v24 = 0;
  else
    v24 = *((_QWORD *)this + 17);
  if ((v1 & 0x20000) == 0)
    goto LABEL_121;
LABEL_67:
  v25 = *((double *)this + 18);
  if (v25 == 0.0)
    v25 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_122;
LABEL_70:
  v26 = *((double *)this + 6);
  if (v26 == 0.0)
    v26 = 0.0;
  if ((v1 & 0x400000) == 0)
    goto LABEL_123;
LABEL_73:
  v27 = *((double *)this + 23);
  if (v27 == 0.0)
    v27 = 0.0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_124;
LABEL_76:
  v28 = *((double *)this + 14);
  if (v28 == 0.0)
    v28 = 0.0;
  if ((v1 & 0x100000) == 0)
    goto LABEL_125;
LABEL_79:
  v29 = *((double *)this + 21);
  if (v29 == 0.0)
    v29 = 0.0;
  if ((v1 & 0x200) == 0)
    goto LABEL_126;
LABEL_82:
  v30 = *((double *)this + 10);
  if (v30 == 0.0)
    v30 = 0.0;
  if ((v1 & 0x200000) != 0)
  {
LABEL_85:
    v31 = *((double *)this + 22);
    if (v31 == 0.0)
      v31 = 0.0;
    if ((v1 & 0x400) != 0)
      goto LABEL_88;
LABEL_128:
    v32 = 0.0;
    return *(_QWORD *)&v41 ^ v2 ^ v40 ^ *(_QWORD *)&v39 ^ v38 ^ *(_QWORD *)&v37 ^ v36 ^ *(_QWORD *)&v35 ^ v34 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ *(_QWORD *)&v25 ^ *(_QWORD *)&v26 ^ *(_QWORD *)&v27 ^ *(_QWORD *)&v28 ^ *(_QWORD *)&v29 ^ *(_QWORD *)&v30 ^ *(_QWORD *)&v31 ^ *(_QWORD *)&v32;
  }
LABEL_127:
  v31 = 0.0;
  if ((v1 & 0x400) == 0)
    goto LABEL_128;
LABEL_88:
  v32 = *((double *)this + 11);
  if (v32 == 0.0)
    v32 = 0.0;
  return *(_QWORD *)&v41 ^ v2 ^ v40 ^ *(_QWORD *)&v39 ^ v38 ^ *(_QWORD *)&v37 ^ v36 ^ *(_QWORD *)&v35 ^ v34 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ *(_QWORD *)&v25 ^ *(_QWORD *)&v26 ^ *(_QWORD *)&v27 ^ *(_QWORD *)&v28 ^ *(_QWORD *)&v29 ^ *(_QWORD *)&v30 ^ *(_QWORD *)&v31 ^ *(_QWORD *)&v32;
}

void CMMsl::RunningPower::~RunningPower(CMMsl::RunningPower *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::RunningPower::RunningPower(uint64_t this, const CMMsl::RunningPower *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  int v22;
  char v23;
  char v24;
  int v25;

  *(_QWORD *)this = off_100354070;
  *(_DWORD *)(this + 128) = 0;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x40) != 0)
  {
    v4 = *((_QWORD *)a2 + 7);
    v3 = 64;
    *(_DWORD *)(this + 128) = 64;
    *(_QWORD *)(this + 56) = v4;
    v2 = *((_DWORD *)a2 + 32);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 6);
    v3 |= 0x20u;
    *(_DWORD *)(this + 128) = v3;
    *(_QWORD *)(this + 48) = v5;
    v2 = *((_DWORD *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 0x100) != 0)
  {
    v6 = *((_QWORD *)a2 + 9);
    v3 |= 0x100u;
    *(_DWORD *)(this + 128) = v3;
    *(_QWORD *)(this + 72) = v6;
    v2 = *((_DWORD *)a2 + 32);
    if ((v2 & 0x100000) == 0)
    {
LABEL_8:
      if ((v2 & 0x800) == 0)
        goto LABEL_9;
      goto LABEL_29;
    }
  }
  else if ((v2 & 0x100000) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_BYTE *)a2 + 124);
  v3 |= 0x100000u;
  *(_DWORD *)(this + 128) = v3;
  *(_BYTE *)(this + 124) = v7;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x800) == 0)
  {
LABEL_9:
    if ((v2 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  v8 = *((_QWORD *)a2 + 12);
  v3 |= 0x800u;
  *(_DWORD *)(this + 128) = v3;
  *(_QWORD *)(this + 96) = v8;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x400) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  v9 = *((_QWORD *)a2 + 11);
  v3 |= 0x400u;
  *(_DWORD *)(this + 128) = v3;
  *(_QWORD *)(this + 88) = v9;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  v10 = *((_DWORD *)a2 + 27);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 108) = v10;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x1000) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  v11 = *((_DWORD *)a2 + 26);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 104) = v11;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  v12 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 128) = v3;
  *(_QWORD *)(this + 16) = v12;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 8) == 0)
  {
LABEL_14:
    if ((v2 & 4) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  v13 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_DWORD *)(this + 128) = v3;
  *(_QWORD *)(this + 32) = v13;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 4) == 0)
  {
LABEL_15:
    if ((v2 & 0x80000) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  v14 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *(_DWORD *)(this + 128) = v3;
  *(_QWORD *)(this + 24) = v14;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x80000) == 0)
  {
LABEL_16:
    if ((v2 & 0x10) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  v15 = *((_BYTE *)a2 + 123);
  v3 |= 0x80000u;
  *(_DWORD *)(this + 128) = v3;
  *(_BYTE *)(this + 123) = v15;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x10) == 0)
  {
LABEL_17:
    if ((v2 & 0x200) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  v16 = *((_QWORD *)a2 + 5);
  v3 |= 0x10u;
  *(_DWORD *)(this + 128) = v3;
  *(_QWORD *)(this + 40) = v16;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x200) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0)
      goto LABEL_19;
    goto LABEL_39;
  }
LABEL_38:
  v17 = *((_QWORD *)a2 + 10);
  v3 |= 0x200u;
  *(_DWORD *)(this + 128) = v3;
  *(_QWORD *)(this + 80) = v17;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x80) == 0)
  {
LABEL_19:
    if ((v2 & 1) == 0)
      goto LABEL_20;
    goto LABEL_40;
  }
LABEL_39:
  v18 = *((_QWORD *)a2 + 8);
  v3 |= 0x80u;
  *(_DWORD *)(this + 128) = v3;
  *(_QWORD *)(this + 64) = v18;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 1) == 0)
  {
LABEL_20:
    if ((v2 & 0x200000) == 0)
      goto LABEL_21;
    goto LABEL_41;
  }
LABEL_40:
  v19 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 128) = v3;
  *(_QWORD *)(this + 8) = v19;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x200000) == 0)
  {
LABEL_21:
    if ((v2 & 0x20000) == 0)
      goto LABEL_22;
    goto LABEL_42;
  }
LABEL_41:
  v20 = *((_BYTE *)a2 + 125);
  v3 |= 0x200000u;
  *(_DWORD *)(this + 128) = v3;
  *(_BYTE *)(this + 125) = v20;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x20000) == 0)
  {
LABEL_22:
    if ((v2 & 0x8000) == 0)
      goto LABEL_23;
    goto LABEL_43;
  }
LABEL_42:
  v21 = *((_BYTE *)a2 + 121);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 128) = v3;
  *(_BYTE *)(this + 121) = v21;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x8000) == 0)
  {
LABEL_23:
    if ((v2 & 0x10000) == 0)
      goto LABEL_24;
    goto LABEL_44;
  }
LABEL_43:
  v22 = *((_DWORD *)a2 + 29);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 128) = v3;
  *(_DWORD *)(this + 116) = v22;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x10000) == 0)
  {
LABEL_24:
    if ((v2 & 0x40000) == 0)
      goto LABEL_25;
    goto LABEL_45;
  }
LABEL_44:
  v23 = *((_BYTE *)a2 + 120);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 128) = v3;
  *(_BYTE *)(this + 120) = v23;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x40000) == 0)
  {
LABEL_25:
    if ((v2 & 0x4000) == 0)
      return this;
LABEL_46:
    v25 = *((_DWORD *)a2 + 28);
    *(_DWORD *)(this + 128) = v3 | 0x4000;
    *(_DWORD *)(this + 112) = v25;
    return this;
  }
LABEL_45:
  v24 = *((_BYTE *)a2 + 122);
  v3 |= 0x40000u;
  *(_DWORD *)(this + 128) = v3;
  *(_BYTE *)(this + 122) = v24;
  if ((*((_DWORD *)a2 + 32) & 0x4000) != 0)
    goto LABEL_46;
  return this;
}

CMMsl *CMMsl::RunningPower::operator=(CMMsl *a1, const CMMsl::RunningPower *a2)
{
  CMMsl::RunningPower *v3;
  _BYTE v5[136];

  if (a1 != a2)
  {
    CMMsl::RunningPower::RunningPower((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningPower *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RunningPower *a2, CMMsl::RunningPower *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double result;
  int v18;
  int v19;

  v3 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v3;
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v4;
  v5 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v5;
  v6 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v6;
  LOBYTE(v3) = *((_BYTE *)this + 124);
  *((_BYTE *)this + 124) = *((_BYTE *)a2 + 124);
  *((_BYTE *)a2 + 124) = v3;
  v7 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v7;
  v8 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v8;
  v9 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v9;
  v10 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v10;
  v11 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v11;
  v12 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v12;
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v13;
  LOBYTE(v10) = *((_BYTE *)this + 123);
  *((_BYTE *)this + 123) = *((_BYTE *)a2 + 123);
  *((_BYTE *)a2 + 123) = v10;
  v14 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v14;
  v15 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v15;
  v16 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v16;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v10) = *((_BYTE *)this + 125);
  *((_BYTE *)this + 125) = *((_BYTE *)a2 + 125);
  *((_BYTE *)a2 + 125) = v10;
  LOBYTE(v10) = *((_BYTE *)this + 121);
  *((_BYTE *)this + 121) = *((_BYTE *)a2 + 121);
  *((_BYTE *)a2 + 121) = v10;
  v18 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v18;
  LOBYTE(v18) = *((_BYTE *)this + 120);
  *((_BYTE *)this + 120) = *((_BYTE *)a2 + 120);
  *((_BYTE *)a2 + 120) = v18;
  LOBYTE(v18) = *((_BYTE *)this + 122);
  *((_BYTE *)this + 122) = *((_BYTE *)a2 + 122);
  *((_BYTE *)a2 + 122) = v18;
  v19 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v19;
  return result;
}

double CMMsl::RunningPower::RunningPower(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100354070;
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 123) = *(_BYTE *)(a2 + 123);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 125) = *(_BYTE *)(a2 + 125);
  *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 122) = *(_BYTE *)(a2 + 122);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  return result;
}

CMMsl *CMMsl::RunningPower::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::RunningPower *v3;
  _BYTE v5[136];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::RunningPower::RunningPower((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningPower *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::RunningPower::formatText(CMMsl::RunningPower *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x1000) != 0)
  {
    PB::TextFormatter::format(a2, "activityType", *((_DWORD *)this + 26));
    v5 = *((_DWORD *)this + 32);
    if ((v5 & 0x2000) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_27;
    }
  }
  else if ((v5 & 0x2000) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "activityTypeWithoutOverride", *((_DWORD *)this + 27));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0)
      goto LABEL_5;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "currentCadence", *((double *)this + 1));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x4000) == 0)
      goto LABEL_6;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "currentPace", *((double *)this + 2));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x4000) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0)
      goto LABEL_7;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "elevationSource", *((_DWORD *)this + 28));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "eta", *((double *)this + 3));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x8000) == 0)
      goto LABEL_9;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "grade", *((double *)this + 4));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x8000) == 0)
  {
LABEL_9:
    if ((v5 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "gradeOnsetCounter", *((_DWORD *)this + 29));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x10) == 0)
  {
LABEL_10:
    if ((v5 & 0x10000) == 0)
      goto LABEL_11;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "horizSpeed", *((double *)this + 5));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x10000) == 0)
  {
LABEL_11:
    if ((v5 & 0x20000) == 0)
      goto LABEL_12;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "isArmConstrainedStateValid", *((_BYTE *)this + 120));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x20000) == 0)
  {
LABEL_12:
    if ((v5 & 0x40000) == 0)
      goto LABEL_13;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "isGradeOnsetEscalated", *((_BYTE *)this + 121));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x40000) == 0)
  {
LABEL_13:
    if ((v5 & 0x80000) == 0)
      goto LABEL_14;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "isRunning", *((_BYTE *)this + 122));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x80000) == 0)
  {
LABEL_14:
    if ((v5 & 0x100000) == 0)
      goto LABEL_15;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "isValid", *((_BYTE *)this + 123));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x100000) == 0)
  {
LABEL_15:
    if ((v5 & 0x200000) == 0)
      goto LABEL_16;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "isWeightSet", *((_BYTE *)this + 124));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x200000) == 0)
  {
LABEL_16:
    if ((v5 & 0x20) == 0)
      goto LABEL_17;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "isWorkoutSelected", *((_BYTE *)this + 125));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_17:
    if ((v5 & 0x40) == 0)
      goto LABEL_18;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "powerWattage", *((double *)this + 6));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x40) == 0)
  {
LABEL_18:
    if ((v5 & 0x80) == 0)
      goto LABEL_19;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 7));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x80) == 0)
  {
LABEL_19:
    if ((v5 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "userHeight", *((double *)this + 8));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x100) == 0)
  {
LABEL_20:
    if ((v5 & 0x200) == 0)
      goto LABEL_21;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "userWeight", *((double *)this + 9));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x200) == 0)
  {
LABEL_21:
    if ((v5 & 0x400) == 0)
      goto LABEL_22;
LABEL_45:
    PB::TextFormatter::format(a2, "wLoad", *((double *)this + 11));
    if ((*((_DWORD *)this + 32) & 0x800) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_23;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "verticalSpeed", *((double *)this + 10));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x400) != 0)
    goto LABEL_45;
LABEL_22:
  if ((v5 & 0x800) != 0)
LABEL_23:
    PB::TextFormatter::format(a2, "workrateMETs", *((double *)this + 12));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RunningPower::readFrom(CMMsl::RunningPower *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  int v35;
  BOOL v36;
  int v37;
  BOOL v38;
  int v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  int v47;
  BOOL v48;
  int v49;
  BOOL v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  unint64_t v67;
  char v68;
  char v69;
  unsigned int v70;
  unint64_t v71;
  char v72;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 32) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_77;
              *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_141;
            case 2u:
              *((_DWORD *)this + 32) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_77;
              *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_141;
            case 3u:
              *((_DWORD *)this + 32) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_77;
              *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_141;
            case 4u:
              *((_DWORD *)this + 32) |= 0x100000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v22 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v22 = v21 != 0;
              }
              *((_BYTE *)this + 124) = v22;
              goto LABEL_162;
            case 5u:
              *((_DWORD *)this + 32) |= 0x800u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_77;
              *((_QWORD *)this + 12) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_141;
            case 6u:
              *((_DWORD *)this + 32) |= 0x400u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_77;
              *((_QWORD *)this + 11) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_141;
            case 7u:
              *((_DWORD *)this + 32) |= 0x2000u;
              v23 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v24 = *(_QWORD *)a2;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v27 = 0;
                if (v2 <= v23)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_146;
                  }
                  v59 = v23++;
                  v60 = *(_BYTE *)(v24 + v59);
                  *((_QWORD *)a2 + 1) = v23;
                  v27 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_145:
                    v2 = v59 + 1;
                    goto LABEL_146;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v27) = 0;
                goto LABEL_145;
              }
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v2 = v23 + 1;
                *((_QWORD *)a2 + 1) = v23 + 1;
                v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0)
                  goto LABEL_146;
                v25 += 7;
                v23 = v2;
                v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_146:
              *((_DWORD *)this + 27) = v27;
              goto LABEL_162;
            case 8u:
              *((_DWORD *)this + 32) |= 0x1000u;
              v29 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v30 = *(_QWORD *)a2;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                v61 = 0;
                v62 = 0;
                v33 = 0;
                if (v2 <= v29)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_151;
                  }
                  v63 = v29++;
                  v64 = *(_BYTE *)(v30 + v63);
                  *((_QWORD *)a2 + 1) = v29;
                  v33 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0)
                    break;
                  v61 += 7;
                  v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_150:
                    v2 = v63 + 1;
                    goto LABEL_151;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v33) = 0;
                goto LABEL_150;
              }
              v31 = 0;
              v32 = 0;
              v33 = 0;
              do
              {
                v2 = v29 + 1;
                *((_QWORD *)a2 + 1) = v29 + 1;
                v34 = *(_BYTE *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0)
                  goto LABEL_151;
                v31 += 7;
                v29 = v2;
                v14 = v32++ > 8;
              }
              while (!v14);
              LODWORD(v33) = 0;
LABEL_151:
              *((_DWORD *)this + 26) = v33;
              goto LABEL_162;
            case 9u:
              *((_DWORD *)this + 32) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_77;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_141;
            case 0xAu:
              *((_DWORD *)this + 32) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_77;
              *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_141;
            case 0xBu:
              *((_DWORD *)this + 32) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_77;
              *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_141;
            case 0xCu:
              *((_DWORD *)this + 32) |= 0x80000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v36 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v35 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v36 = v35 != 0;
              }
              *((_BYTE *)this + 123) = v36;
              goto LABEL_162;
            case 0xDu:
              *((_DWORD *)this + 32) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_77;
              *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_141;
            case 0xEu:
              *((_DWORD *)this + 32) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_77;
              *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_141;
            case 0xFu:
              *((_DWORD *)this + 32) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_77;
              *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_141;
            case 0x10u:
              *((_DWORD *)this + 32) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_141:
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_77:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_162;
            case 0x11u:
              *((_DWORD *)this + 32) |= 0x200000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v38 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v37 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v38 = v37 != 0;
              }
              *((_BYTE *)this + 125) = v38;
              goto LABEL_162;
            case 0x12u:
              *((_DWORD *)this + 32) |= 0x20000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v40 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v39 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v40 = v39 != 0;
              }
              *((_BYTE *)this + 121) = v40;
              goto LABEL_162;
            case 0x13u:
              *((_DWORD *)this + 32) |= 0x8000u;
              v41 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v42 = *(_QWORD *)a2;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                v65 = 0;
                v66 = 0;
                v45 = 0;
                if (v2 <= v41)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_156;
                  }
                  v67 = v41++;
                  v68 = *(_BYTE *)(v42 + v67);
                  *((_QWORD *)a2 + 1) = v41;
                  v45 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0)
                    break;
                  v65 += 7;
                  v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_155:
                    v2 = v67 + 1;
                    goto LABEL_156;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v45) = 0;
                goto LABEL_155;
              }
              v43 = 0;
              v44 = 0;
              v45 = 0;
              do
              {
                v2 = v41 + 1;
                *((_QWORD *)a2 + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0)
                  goto LABEL_156;
                v43 += 7;
                v41 = v2;
                v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_156:
              *((_DWORD *)this + 29) = v45;
              goto LABEL_162;
            case 0x14u:
              *((_DWORD *)this + 32) |= 0x10000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v48 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v47 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v48 = v47 != 0;
              }
              *((_BYTE *)this + 120) = v48;
              goto LABEL_162;
            case 0x15u:
              *((_DWORD *)this + 32) |= 0x40000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v50 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v49 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v50 = v49 != 0;
              }
              *((_BYTE *)this + 122) = v50;
              goto LABEL_162;
            case 0x16u:
              *((_DWORD *)this + 32) |= 0x4000u;
              v51 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v52 = *(_QWORD *)a2;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                v69 = 0;
                v70 = 0;
                v55 = 0;
                if (v2 <= v51)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_161;
                  }
                  v71 = v51++;
                  v72 = *(_BYTE *)(v52 + v71);
                  *((_QWORD *)a2 + 1) = v51;
                  v55 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0)
                    break;
                  v69 += 7;
                  v14 = v70++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_160:
                    v2 = v71 + 1;
                    goto LABEL_161;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v55) = 0;
                goto LABEL_160;
              }
              v53 = 0;
              v54 = 0;
              v55 = 0;
              do
              {
                v2 = v51 + 1;
                *((_QWORD *)a2 + 1) = v51 + 1;
                v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0)
                  goto LABEL_161;
                v53 += 7;
                v51 = v2;
                v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_161:
              *((_DWORD *)this + 28) = v55;
LABEL_162:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_162;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::RunningPower::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 128);
  if ((v4 & 0x40) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 56), 1u);
    v4 = *(_DWORD *)(v3 + 128);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_26;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 2u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x100) == 0)
  {
LABEL_4:
    if ((v4 & 0x100000) == 0)
      goto LABEL_5;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 3u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x100000) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 124), 4u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x400) == 0)
      goto LABEL_7;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(double *)(v3 + 96), 5u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x400) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(double *)(v3 + 88), 6u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 108), 7u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      goto LABEL_10;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 104), 8u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0)
      goto LABEL_11;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 9u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 4) == 0)
      goto LABEL_12;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 0xAu);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 4) == 0)
  {
LABEL_12:
    if ((v4 & 0x80000) == 0)
      goto LABEL_13;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 0xBu);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80000) == 0)
  {
LABEL_13:
    if ((v4 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 123), 0xCu);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10) == 0)
  {
LABEL_14:
    if ((v4 & 0x200) == 0)
      goto LABEL_15;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 0xDu);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0)
      goto LABEL_16;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(double *)(v3 + 80), 0xEu);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80) == 0)
  {
LABEL_16:
    if ((v4 & 1) == 0)
      goto LABEL_17;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 0xFu);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 1) == 0)
  {
LABEL_17:
    if ((v4 & 0x200000) == 0)
      goto LABEL_18;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 0x10u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 125), 0x11u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20000) == 0)
  {
LABEL_19:
    if ((v4 & 0x8000) == 0)
      goto LABEL_20;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 121), 0x12u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x8000) == 0)
  {
LABEL_20:
    if ((v4 & 0x10000) == 0)
      goto LABEL_21;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 116), 0x13u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10000) == 0)
  {
LABEL_21:
    if ((v4 & 0x40000) == 0)
      goto LABEL_22;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 120), 0x14u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x40000) == 0)
  {
LABEL_22:
    if ((v4 & 0x4000) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 112), 0x16u);
  }
LABEL_44:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 122), 0x15u);
  if ((*(_DWORD *)(v3 + 128) & 0x4000) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 112), 0x16u);
  return this;
}

uint64_t CMMsl::RunningPower::hash_value(CMMsl::RunningPower *this)
{
  int v1;
  double v2;
  double v3;
  double v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *((_DWORD *)this + 32);
  if ((v1 & 0x40) == 0)
  {
    v2 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_3;
LABEL_49:
    v3 = 0.0;
    if ((v1 & 0x100) != 0)
      goto LABEL_6;
LABEL_50:
    v4 = 0.0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_9;
    goto LABEL_51;
  }
  v2 = *((double *)this + 7);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_49;
LABEL_3:
  v3 = *((double *)this + 6);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 0x100) == 0)
    goto LABEL_50;
LABEL_6:
  v4 = *((double *)this + 9);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 0x100000) != 0)
  {
LABEL_9:
    v5 = *((unsigned __int8 *)this + 124);
    if ((v1 & 0x800) != 0)
      goto LABEL_10;
LABEL_52:
    v6 = 0.0;
    if ((v1 & 0x400) != 0)
      goto LABEL_13;
LABEL_53:
    v7 = 0.0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_16;
    goto LABEL_54;
  }
LABEL_51:
  v5 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_52;
LABEL_10:
  v6 = *((double *)this + 12);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 0x400) == 0)
    goto LABEL_53;
LABEL_13:
  v7 = *((double *)this + 11);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v1 & 0x2000) != 0)
  {
LABEL_16:
    v8 = *((int *)this + 27);
    if ((v1 & 0x1000) != 0)
      goto LABEL_17;
    goto LABEL_55;
  }
LABEL_54:
  v8 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_17:
    v9 = *((int *)this + 26);
    if ((v1 & 2) != 0)
      goto LABEL_18;
LABEL_56:
    v10 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_21;
LABEL_57:
    v11 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_24;
LABEL_58:
    v12 = 0.0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_27;
    goto LABEL_59;
  }
LABEL_55:
  v9 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_56;
LABEL_18:
  v10 = *((double *)this + 2);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_57;
LABEL_21:
  v11 = *((double *)this + 4);
  if (v11 == 0.0)
    v11 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_58;
LABEL_24:
  v12 = *((double *)this + 3);
  if (v12 == 0.0)
    v12 = 0.0;
  if ((v1 & 0x80000) != 0)
  {
LABEL_27:
    v13 = *((unsigned __int8 *)this + 123);
    if ((v1 & 0x10) != 0)
      goto LABEL_28;
LABEL_60:
    v14 = 0.0;
    if ((v1 & 0x200) != 0)
      goto LABEL_31;
LABEL_61:
    v15 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_34;
LABEL_62:
    v16 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_37;
LABEL_63:
    v17 = 0.0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_40;
    goto LABEL_64;
  }
LABEL_59:
  v13 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_60;
LABEL_28:
  v14 = *((double *)this + 5);
  if (v14 == 0.0)
    v14 = 0.0;
  if ((v1 & 0x200) == 0)
    goto LABEL_61;
LABEL_31:
  v15 = *((double *)this + 10);
  if (v15 == 0.0)
    v15 = 0.0;
  if ((v1 & 0x80) == 0)
    goto LABEL_62;
LABEL_34:
  v16 = *((double *)this + 8);
  if (v16 == 0.0)
    v16 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_63;
LABEL_37:
  v17 = *((double *)this + 1);
  if (v17 == 0.0)
    v17 = 0.0;
  if ((v1 & 0x200000) != 0)
  {
LABEL_40:
    v18 = *((unsigned __int8 *)this + 125);
    if ((v1 & 0x20000) != 0)
      goto LABEL_41;
    goto LABEL_65;
  }
LABEL_64:
  v18 = 0;
  if ((v1 & 0x20000) != 0)
  {
LABEL_41:
    v19 = *((unsigned __int8 *)this + 121);
    if ((v1 & 0x8000) != 0)
      goto LABEL_42;
    goto LABEL_66;
  }
LABEL_65:
  v19 = 0;
  if ((v1 & 0x8000) != 0)
  {
LABEL_42:
    v20 = *((int *)this + 29);
    if ((v1 & 0x10000) != 0)
      goto LABEL_43;
    goto LABEL_67;
  }
LABEL_66:
  v20 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_43:
    v21 = *((unsigned __int8 *)this + 120);
    if ((v1 & 0x40000) != 0)
      goto LABEL_44;
LABEL_68:
    v22 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_45;
LABEL_69:
    v23 = 0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ v8 ^ v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ v13 ^ *(_QWORD *)&v14 ^ *(_QWORD *)&v15 ^ *(_QWORD *)&v16 ^ *(_QWORD *)&v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23;
  }
LABEL_67:
  v21 = 0;
  if ((v1 & 0x40000) == 0)
    goto LABEL_68;
LABEL_44:
  v22 = *((unsigned __int8 *)this + 122);
  if ((v1 & 0x4000) == 0)
    goto LABEL_69;
LABEL_45:
  v23 = *((int *)this + 28);
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ v8 ^ v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ v13 ^ *(_QWORD *)&v14 ^ *(_QWORD *)&v15 ^ *(_QWORD *)&v16 ^ *(_QWORD *)&v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23;
}

void CMMsl::RunningRotationAxis::~RunningRotationAxis(CMMsl::RunningRotationAxis *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::RunningRotationAxis::RunningRotationAxis(CMMsl::RunningRotationAxis *this, const CMMsl::RunningRotationAxis *a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)this = off_1003540A8;
  *((_DWORD *)this + 12) = 0;
  v2 = *((_BYTE *)a2 + 48);
  if ((v2 & 8) != 0)
  {
    result = *((double *)a2 + 4);
    v3 = 8;
    *((_BYTE *)this + 48) = 8;
    *((double *)this + 4) = result;
    v2 = *((_BYTE *)a2 + 48);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 48) & 0x10) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 5);
    v3 |= 0x10u;
    *((_BYTE *)this + 48) = v3;
    *((double *)this + 5) = result;
    v2 = *((_BYTE *)a2 + 48);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    v3 |= 1u;
    *((_BYTE *)this + 48) = v3;
    *((double *)this + 1) = result;
    v2 = *((_BYTE *)a2 + 48);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        return result;
LABEL_12:
      result = *((double *)a2 + 3);
      *((_BYTE *)this + 48) = v3 | 4;
      *((double *)this + 3) = result;
      return result;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 2);
  v3 |= 2u;
  *((_BYTE *)this + 48) = v3;
  *((double *)this + 2) = result;
  if ((*((_BYTE *)a2 + 48) & 4) != 0)
    goto LABEL_12;
  return result;
}

uint64_t CMMsl::RunningRotationAxis::operator=(uint64_t a1, const CMMsl::RunningRotationAxis *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _BYTE v8[8];
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  int v12;

  if ((const CMMsl::RunningRotationAxis *)a1 != a2)
  {
    CMMsl::RunningRotationAxis::RunningRotationAxis((CMMsl::RunningRotationAxis *)v8, a2);
    v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v12;
    v12 = v3;
    v4 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v11;
    v11 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    v9 = v5;
    v10 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RunningRotationAxis *a2, CMMsl::RunningRotationAxis *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v5;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  result = *((double *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((double *)a2 + 3) = result;
  return result;
}

double CMMsl::RunningRotationAxis::RunningRotationAxis(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_1003540A8;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_1003540A8;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::RunningRotationAxis::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  void (**v10)(CMMsl::RunningRotationAxis *__hidden);
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;

  if (a1 != a2)
  {
    v10 = off_1003540A8;
    v3 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 48) = 0;
    v4 = *(_QWORD *)(a2 + 40);
    v14 = *(_DWORD *)(a1 + 48);
    v13 = *(_QWORD *)(a1 + 40);
    v5 = *(_OWORD *)(a1 + 8);
    v6 = *(_OWORD *)(a2 + 8);
    v7 = *(_OWORD *)(a1 + 24);
    v8 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 48) = v3;
    *(_QWORD *)(a1 + 40) = v4;
    *(_OWORD *)(a1 + 8) = v6;
    *(_OWORD *)(a1 + 24) = v8;
    v11 = v5;
    v12 = v7;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::RunningRotationAxis::formatText(CMMsl::RunningRotationAxis *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "primaryAxisX", *((double *)this + 1));
    v5 = *((_BYTE *)this + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 48) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "primaryAxisY", *((double *)this + 2));
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "startTime", *((double *)this + 4));
    if ((*((_BYTE *)this + 48) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "primaryAxisZ", *((double *)this + 3));
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 8) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 5));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RunningRotationAxis::readFrom(CMMsl::RunningRotationAxis *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 48) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_38;
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_40;
        case 2u:
          *((_BYTE *)this + 48) |= 0x10u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_38;
          *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_40;
        case 3u:
          *((_BYTE *)this + 48) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_38;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_40;
        case 4u:
          *((_BYTE *)this + 48) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_38;
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_40;
        case 5u:
          *((_BYTE *)this + 48) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_40:
            v2 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v2;
          }
          else
          {
LABEL_38:
            *((_BYTE *)a2 + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::RunningRotationAxis::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 48);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32), 1u);
    v4 = *(_BYTE *)(v3 + 48);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 48) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 2u);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 3u);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 24), 5u);
  }
LABEL_10:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 4u);
  if ((*(_BYTE *)(v3 + 48) & 4) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 24), 5u);
  return this;
}

uint64_t CMMsl::RunningRotationAxis::hash_value(CMMsl::RunningRotationAxis *this)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;

  if ((*((_BYTE *)this + 48) & 8) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 48) & 0x10) != 0)
      goto LABEL_3;
LABEL_18:
    v2 = 0.0;
    if ((*((_BYTE *)this + 48) & 1) != 0)
      goto LABEL_6;
LABEL_19:
    v3 = 0.0;
    if ((*((_BYTE *)this + 48) & 2) != 0)
      goto LABEL_9;
    goto LABEL_20;
  }
  v1 = *((double *)this + 4);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 48) & 0x10) == 0)
    goto LABEL_18;
LABEL_3:
  v2 = *((double *)this + 5);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 48) & 1) == 0)
    goto LABEL_19;
LABEL_6:
  v3 = *((double *)this + 1);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((*((_BYTE *)this + 48) & 2) != 0)
  {
LABEL_9:
    v4 = *((double *)this + 2);
    if (v4 == 0.0)
      v4 = 0.0;
    if ((*((_BYTE *)this + 48) & 4) != 0)
      goto LABEL_12;
LABEL_21:
    v5 = 0.0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5;
  }
LABEL_20:
  v4 = 0.0;
  if ((*((_BYTE *)this + 48) & 4) == 0)
    goto LABEL_21;
LABEL_12:
  v5 = *((double *)this + 3);
  if (v5 == 0.0)
    v5 = 0.0;
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5;
}

void CMMsl::RunningSpeedKFResult::~RunningSpeedKFResult(CMMsl::RunningSpeedKFResult *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::RunningSpeedKFResult::RunningSpeedKFResult(uint64_t this, const CMMsl::RunningSpeedKFResult *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  *(_QWORD *)this = off_1003540E0;
  *(_DWORD *)(this + 188) = 0;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x80000) != 0)
  {
    v4 = *((_QWORD *)a2 + 20);
    v3 = 0x80000;
    *(_DWORD *)(this + 188) = 0x80000;
    *(_QWORD *)(this + 160) = v4;
    v2 = *((_DWORD *)a2 + 47);
    if ((v2 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 8);
    v3 |= 0x80u;
    *(_DWORD *)(this + 188) = v3;
    *(_QWORD *)(this + 64) = v5;
    v2 = *((_DWORD *)a2 + 47);
  }
LABEL_6:
  if ((v2 & 0x40000) != 0)
  {
    v6 = *((_QWORD *)a2 + 19);
    v3 |= 0x40000u;
    *(_DWORD *)(this + 188) = v3;
    *(_QWORD *)(this + 152) = v6;
    v2 = *((_DWORD *)a2 + 47);
    if ((v2 & 0x8000000) == 0)
    {
LABEL_8:
      if ((v2 & 0x20000) == 0)
        goto LABEL_9;
      goto LABEL_35;
    }
  }
  else if ((v2 & 0x8000000) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_BYTE *)a2 + 184);
  v3 |= 0x8000000u;
  *(_DWORD *)(this + 188) = v3;
  *(_BYTE *)(this + 184) = v7;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x20000) == 0)
  {
LABEL_9:
    if ((v2 & 0x10000) == 0)
      goto LABEL_10;
    goto LABEL_36;
  }
LABEL_35:
  v8 = *((_QWORD *)a2 + 18);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 144) = v8;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x10000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_11;
    goto LABEL_37;
  }
LABEL_36:
  v9 = *((_QWORD *)a2 + 17);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 136) = v9;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_12;
    goto LABEL_38;
  }
LABEL_37:
  v10 = *((_BYTE *)a2 + 182);
  v3 |= 0x2000000u;
  *(_DWORD *)(this + 188) = v3;
  *(_BYTE *)(this + 182) = v10;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_39;
  }
LABEL_38:
  v11 = *((_BYTE *)a2 + 183);
  v3 |= 0x4000000u;
  *(_DWORD *)(this + 188) = v3;
  *(_BYTE *)(this + 183) = v11;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x40) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0)
      goto LABEL_14;
    goto LABEL_40;
  }
LABEL_39:
  v12 = *((_QWORD *)a2 + 7);
  v3 |= 0x40u;
  *(_DWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 56) = v12;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 8) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_41;
  }
LABEL_40:
  v13 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_DWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 32) = v13;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 0x10) == 0)
      goto LABEL_16;
    goto LABEL_42;
  }
LABEL_41:
  v14 = *((_QWORD *)a2 + 6);
  v3 |= 0x20u;
  *(_DWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 48) = v14;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x10) == 0)
  {
LABEL_16:
    if ((v2 & 1) == 0)
      goto LABEL_17;
    goto LABEL_43;
  }
LABEL_42:
  v15 = *((_QWORD *)a2 + 5);
  v3 |= 0x10u;
  *(_DWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 40) = v15;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 1) == 0)
  {
LABEL_17:
    if ((v2 & 2) == 0)
      goto LABEL_18;
    goto LABEL_44;
  }
LABEL_43:
  v16 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 8) = v16;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 2) == 0)
  {
LABEL_18:
    if ((v2 & 0x8000) == 0)
      goto LABEL_19;
    goto LABEL_45;
  }
LABEL_44:
  v17 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 16) = v17;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x8000) == 0)
  {
LABEL_19:
    if ((v2 & 0x4000) == 0)
      goto LABEL_20;
    goto LABEL_46;
  }
LABEL_45:
  v18 = *((_QWORD *)a2 + 16);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 128) = v18;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x4000) == 0)
  {
LABEL_20:
    if ((v2 & 0x100) == 0)
      goto LABEL_21;
    goto LABEL_47;
  }
LABEL_46:
  v19 = *((_QWORD *)a2 + 15);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 120) = v19;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x100) == 0)
  {
LABEL_21:
    if ((v2 & 0x200) == 0)
      goto LABEL_22;
    goto LABEL_48;
  }
LABEL_47:
  v20 = *((_QWORD *)a2 + 9);
  v3 |= 0x100u;
  *(_DWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 72) = v20;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x200) == 0)
  {
LABEL_22:
    if ((v2 & 4) == 0)
      goto LABEL_23;
    goto LABEL_49;
  }
LABEL_48:
  v21 = *((_QWORD *)a2 + 10);
  v3 |= 0x200u;
  *(_DWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 80) = v21;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 4) == 0)
  {
LABEL_23:
    if ((v2 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_50;
  }
LABEL_49:
  v22 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *(_DWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 24) = v22;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x400000) == 0)
  {
LABEL_24:
    if ((v2 & 0x100000) == 0)
      goto LABEL_25;
    goto LABEL_51;
  }
LABEL_50:
  v23 = *((_DWORD *)a2 + 44);
  v3 |= 0x400000u;
  *(_DWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 176) = v23;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x100000) == 0)
  {
LABEL_25:
    if ((v2 & 0x200000) == 0)
      goto LABEL_26;
    goto LABEL_52;
  }
LABEL_51:
  v24 = *((_DWORD *)a2 + 42);
  v3 |= 0x100000u;
  *(_DWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 168) = v24;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x200000) == 0)
  {
LABEL_26:
    if ((v2 & 0x800000) == 0)
      goto LABEL_27;
    goto LABEL_53;
  }
LABEL_52:
  v25 = *((_DWORD *)a2 + 43);
  v3 |= 0x200000u;
  *(_DWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 172) = v25;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x800000) == 0)
  {
LABEL_27:
    if ((v2 & 0x1000) == 0)
      goto LABEL_28;
    goto LABEL_54;
  }
LABEL_53:
  v26 = *((_BYTE *)a2 + 180);
  v3 |= 0x800000u;
  *(_DWORD *)(this + 188) = v3;
  *(_BYTE *)(this + 180) = v26;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x1000) == 0)
  {
LABEL_28:
    if ((v2 & 0x2000) == 0)
      goto LABEL_29;
    goto LABEL_55;
  }
LABEL_54:
  v27 = *((_QWORD *)a2 + 13);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 104) = v27;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x2000) == 0)
  {
LABEL_29:
    if ((v2 & 0x400) == 0)
      goto LABEL_30;
    goto LABEL_56;
  }
LABEL_55:
  v28 = *((_QWORD *)a2 + 14);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 112) = v28;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x400) == 0)
  {
LABEL_30:
    if ((v2 & 0x800) == 0)
      goto LABEL_31;
    goto LABEL_57;
  }
LABEL_56:
  v29 = *((_QWORD *)a2 + 11);
  v3 |= 0x400u;
  *(_DWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 88) = v29;
  v2 = *((_DWORD *)a2 + 47);
  if ((v2 & 0x800) == 0)
  {
LABEL_31:
    if ((v2 & 0x1000000) == 0)
      return this;
LABEL_58:
    v31 = *((_BYTE *)a2 + 181);
    *(_DWORD *)(this + 188) = v3 | 0x1000000;
    *(_BYTE *)(this + 181) = v31;
    return this;
  }
LABEL_57:
  v30 = *((_QWORD *)a2 + 12);
  v3 |= 0x800u;
  *(_DWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 96) = v30;
  if ((*((_DWORD *)a2 + 47) & 0x1000000) != 0)
    goto LABEL_58;
  return this;
}

CMMsl *CMMsl::RunningSpeedKFResult::operator=(CMMsl *a1, const CMMsl::RunningSpeedKFResult *a2)
{
  CMMsl::RunningSpeedKFResult *v3;
  _BYTE v5[192];

  if (a1 != a2)
  {
    CMMsl::RunningSpeedKFResult::RunningSpeedKFResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningSpeedKFResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RunningSpeedKFResult *a2, CMMsl::RunningSpeedKFResult *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double result;

  v3 = *((_DWORD *)this + 47);
  *((_DWORD *)this + 47) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = v3;
  v4 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 20) = v4;
  v5 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v5;
  v6 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v6;
  LOBYTE(v3) = *((_BYTE *)this + 184);
  *((_BYTE *)this + 184) = *((_BYTE *)a2 + 184);
  *((_BYTE *)a2 + 184) = v3;
  v7 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v7;
  v8 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v8;
  LOBYTE(v3) = *((_BYTE *)this + 182);
  *((_BYTE *)this + 182) = *((_BYTE *)a2 + 182);
  *((_BYTE *)a2 + 182) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 183);
  *((_BYTE *)this + 183) = *((_BYTE *)a2 + 183);
  *((_BYTE *)a2 + 183) = v3;
  v9 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v9;
  v10 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v10;
  v11 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v11;
  v12 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v12;
  v13 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v13;
  v14 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v14;
  v15 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v15;
  v16 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v16;
  v17 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v17;
  v18 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v18;
  v19 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v19;
  v20 = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v20;
  v21 = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v21;
  v22 = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v22;
  LOBYTE(v22) = *((_BYTE *)this + 180);
  *((_BYTE *)this + 180) = *((_BYTE *)a2 + 180);
  *((_BYTE *)a2 + 180) = v22;
  v23 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v23;
  v24 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v24;
  v25 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v25;
  result = *((double *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((double *)a2 + 12) = result;
  LOBYTE(v22) = *((_BYTE *)this + 181);
  *((_BYTE *)this + 181) = *((_BYTE *)a2 + 181);
  *((_BYTE *)a2 + 181) = v22;
  return result;
}

double CMMsl::RunningSpeedKFResult::RunningSpeedKFResult(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_1003540E0;
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_DWORD *)(a2 + 188) = 0;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 182) = *(_BYTE *)(a2 + 182);
  *(_BYTE *)(a1 + 183) = *(_BYTE *)(a2 + 183);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_BYTE *)(a1 + 180) = *(_BYTE *)(a2 + 180);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  result = *(double *)(a2 + 96);
  *(double *)(a1 + 96) = result;
  *(_BYTE *)(a1 + 181) = *(_BYTE *)(a2 + 181);
  return result;
}

CMMsl *CMMsl::RunningSpeedKFResult::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::RunningSpeedKFResult *v3;
  _BYTE v5[192];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::RunningSpeedKFResult::RunningSpeedKFResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningSpeedKFResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::RunningSpeedKFResult::formatText(CMMsl::RunningSpeedKFResult *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "algDelay", *((double *)this + 1));
    v5 = *((_DWORD *)this + 47);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_33;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "biasFactor", *((double *)this + 2));
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "deltaCalibratedPedometerDistance", *((double *)this + 3));
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "deltaOdometerDistance", *((double *)this + 4));
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "deltaOdometerTime", *((double *)this + 5));
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "deltaPedometerTime", *((double *)this + 6));
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "deltaRawPedometerDistance", *((double *)this + 7));
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100000) == 0)
      goto LABEL_10;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "endTime", *((double *)this + 8));
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x100000) == 0)
  {
LABEL_10:
    if ((v5 & 0x200000) == 0)
      goto LABEL_11;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "gestureState", *((_DWORD *)this + 42));
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x200000) == 0)
  {
LABEL_11:
    if ((v5 & 0x800000) == 0)
      goto LABEL_12;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "gestureType", *((_DWORD *)this + 43));
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x800000) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_13;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "interruptFlag", *((_BYTE *)this + 180));
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_14;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "isTrackRunOdometer", *((_BYTE *)this + 181));
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_15;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "isValidOdometerSpeed", *((_BYTE *)this + 182));
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_16;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "isValidPedometerSpeed", *((_BYTE *)this + 183));
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x100) == 0)
      goto LABEL_17;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "isValidRunningSpeed", *((_BYTE *)this + 184));
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x100) == 0)
  {
LABEL_17:
    if ((v5 & 0x200) == 0)
      goto LABEL_18;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "kalmanEpsOdometer", *((double *)this + 9));
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x200) == 0)
  {
LABEL_18:
    if ((v5 & 0x400) == 0)
      goto LABEL_19;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "kalmanEpsPedometer", *((double *)this + 10));
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x400) == 0)
  {
LABEL_19:
    if ((v5 & 0x800) == 0)
      goto LABEL_20;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "kalmanGainOdometer", *((double *)this + 11));
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x800) == 0)
  {
LABEL_20:
    if ((v5 & 0x1000) == 0)
      goto LABEL_21;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "kalmanGainPedometer", *((double *)this + 12));
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x1000) == 0)
  {
LABEL_21:
    if ((v5 & 0x2000) == 0)
      goto LABEL_22;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "kalmanMeasurementNoiseOdometer", *((double *)this + 13));
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x2000) == 0)
  {
LABEL_22:
    if ((v5 & 0x4000) == 0)
      goto LABEL_23;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "kalmanMeasurementNoisePedometer", *((double *)this + 14));
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x4000) == 0)
  {
LABEL_23:
    if ((v5 & 0x8000) == 0)
      goto LABEL_24;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "kalmanProcessNoise", *((double *)this + 15));
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x8000) == 0)
  {
LABEL_24:
    if ((v5 & 0x400000) == 0)
      goto LABEL_25;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "kalmanStateCovariance", *((double *)this + 16));
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x400000) == 0)
  {
LABEL_25:
    if ((v5 & 0x10000) == 0)
      goto LABEL_26;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "odometerQuality", *((_DWORD *)this + 44));
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x10000) == 0)
  {
LABEL_26:
    if ((v5 & 0x20000) == 0)
      goto LABEL_27;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "odometerSpeed", *((double *)this + 17));
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x20000) == 0)
  {
LABEL_27:
    if ((v5 & 0x40000) == 0)
      goto LABEL_28;
LABEL_57:
    PB::TextFormatter::format(a2, "runningSpeed", *((double *)this + 19));
    if ((*((_DWORD *)this + 47) & 0x80000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_29;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "pedometerSpeed", *((double *)this + 18));
  v5 = *((_DWORD *)this + 47);
  if ((v5 & 0x40000) != 0)
    goto LABEL_57;
LABEL_28:
  if ((v5 & 0x80000) != 0)
LABEL_29:
    PB::TextFormatter::format(a2, "startTime", *((double *)this + 20));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RunningSpeedKFResult::readFrom(CMMsl::RunningSpeedKFResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  int v45;
  BOOL v46;
  int v47;
  BOOL v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 47) |= 0x80000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_112;
              *((_QWORD *)this + 20) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_147;
            case 2u:
              *((_DWORD *)this + 47) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_112;
              *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_147;
            case 3u:
              *((_DWORD *)this + 47) |= 0x40000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_112;
              *((_QWORD *)this + 19) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_147;
            case 4u:
              *((_DWORD *)this + 47) |= 0x8000000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v22 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v22 = v21 != 0;
              }
              *((_BYTE *)this + 184) = v22;
              goto LABEL_148;
            case 5u:
              *((_DWORD *)this + 47) |= 0x20000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_112;
              *((_QWORD *)this + 18) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_147;
            case 6u:
              *((_DWORD *)this + 47) |= 0x10000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_112;
              *((_QWORD *)this + 17) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_147;
            case 7u:
              *((_DWORD *)this + 47) |= 0x2000000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v24 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v23 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v24 = v23 != 0;
              }
              *((_BYTE *)this + 182) = v24;
              goto LABEL_148;
            case 8u:
              *((_DWORD *)this + 47) |= 0x4000000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v26 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v25 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v26 = v25 != 0;
              }
              *((_BYTE *)this + 183) = v26;
              goto LABEL_148;
            case 9u:
              *((_DWORD *)this + 47) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_112;
              *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_147;
            case 0xAu:
              *((_DWORD *)this + 47) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_112;
              *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_147;
            case 0xBu:
              *((_DWORD *)this + 47) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_112;
              *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_147;
            case 0xCu:
              *((_DWORD *)this + 47) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_112;
              *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_147;
            case 0xDu:
              *((_DWORD *)this + 47) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_112;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_147;
            case 0xEu:
              *((_DWORD *)this + 47) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_112;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_147;
            case 0xFu:
              *((_DWORD *)this + 47) |= 0x8000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_112;
              *((_QWORD *)this + 16) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_147;
            case 0x10u:
              *((_DWORD *)this + 47) |= 0x4000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_112;
              *((_QWORD *)this + 15) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_147;
            case 0x11u:
              *((_DWORD *)this + 47) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_112;
              *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_147;
            case 0x12u:
              *((_DWORD *)this + 47) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_112;
              *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_147;
            case 0x13u:
              *((_DWORD *)this + 47) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_112;
              *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_147;
            case 0x14u:
              *((_DWORD *)this + 47) |= 0x400000u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_157;
                  }
                  v51 = v27++;
                  v52 = *(_BYTE *)(v28 + v51);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_156:
                    v2 = v51 + 1;
                    goto LABEL_157;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_156;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_157;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_157:
              *((_DWORD *)this + 44) = v31;
              goto LABEL_148;
            case 0x15u:
              *((_DWORD *)this + 47) |= 0x100000u;
              v33 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_162;
                  }
                  v55 = v33++;
                  v56 = *(_BYTE *)(v34 + v55);
                  *((_QWORD *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_161:
                    v2 = v55 + 1;
                    goto LABEL_162;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v37) = 0;
                goto LABEL_161;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)a2 + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_162;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_162:
              *((_DWORD *)this + 42) = v37;
              goto LABEL_148;
            case 0x16u:
              *((_DWORD *)this + 47) |= 0x200000u;
              v39 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v40 = *(_QWORD *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_167;
                  }
                  v59 = v39++;
                  v60 = *(_BYTE *)(v40 + v59);
                  *((_QWORD *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_166:
                    v2 = v59 + 1;
                    goto LABEL_167;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v43) = 0;
                goto LABEL_166;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)a2 + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_167;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_167:
              *((_DWORD *)this + 43) = v43;
LABEL_148:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0x17u:
              *((_DWORD *)this + 47) |= 0x800000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v46 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v45 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v46 = v45 != 0;
              }
              *((_BYTE *)this + 180) = v46;
              goto LABEL_148;
            case 0x18u:
              *((_DWORD *)this + 47) |= 0x1000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_112;
              *((_QWORD *)this + 13) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_147;
            case 0x19u:
              *((_DWORD *)this + 47) |= 0x2000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_112;
              *((_QWORD *)this + 14) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_147;
            case 0x1Au:
              *((_DWORD *)this + 47) |= 0x400u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_112;
              *((_QWORD *)this + 11) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_147;
            case 0x1Bu:
              *((_DWORD *)this + 47) |= 0x800u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 12) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_147:
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_112:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_148;
            case 0x1Cu:
              *((_DWORD *)this + 47) |= 0x1000000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v48 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v47 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v48 = v47 != 0;
              }
              *((_BYTE *)this + 181) = v48;
              goto LABEL_148;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_148;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::RunningSpeedKFResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 188);
  if ((v4 & 0x80000) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 160), 1u);
    v4 = *(_DWORD *)(v3 + 188);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x40000) == 0)
        goto LABEL_4;
      goto LABEL_32;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 2u);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x40000) == 0)
  {
LABEL_4:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_5;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(double *)(v3 + 152), 3u);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_5:
    if ((v4 & 0x20000) == 0)
      goto LABEL_6;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 184), 4u);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x20000) == 0)
  {
LABEL_6:
    if ((v4 & 0x10000) == 0)
      goto LABEL_7;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(double *)(v3 + 144), 5u);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x10000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_8;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(double *)(v3 + 136), 6u);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_9;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 182), 7u);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 183), 8u);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x40) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0)
      goto LABEL_11;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 9u);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 0xAu);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 0xBu);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x10) == 0)
  {
LABEL_13:
    if ((v4 & 1) == 0)
      goto LABEL_14;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 0xCu);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 1) == 0)
  {
LABEL_14:
    if ((v4 & 2) == 0)
      goto LABEL_15;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 0xDu);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 2) == 0)
  {
LABEL_15:
    if ((v4 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 0xEu);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x8000) == 0)
  {
LABEL_16:
    if ((v4 & 0x4000) == 0)
      goto LABEL_17;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(double *)(v3 + 128), 0xFu);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x4000) == 0)
  {
LABEL_17:
    if ((v4 & 0x100) == 0)
      goto LABEL_18;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(double *)(v3 + 120), 0x10u);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x100) == 0)
  {
LABEL_18:
    if ((v4 & 0x200) == 0)
      goto LABEL_19;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 0x11u);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x200) == 0)
  {
LABEL_19:
    if ((v4 & 4) == 0)
      goto LABEL_20;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(double *)(v3 + 80), 0x12u);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 4) == 0)
  {
LABEL_20:
    if ((v4 & 0x400000) == 0)
      goto LABEL_21;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 0x13u);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x400000) == 0)
  {
LABEL_21:
    if ((v4 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 176), 0x14u);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x100000) == 0)
  {
LABEL_22:
    if ((v4 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 168), 0x15u);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x200000) == 0)
  {
LABEL_23:
    if ((v4 & 0x800000) == 0)
      goto LABEL_24;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 172), 0x16u);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x800000) == 0)
  {
LABEL_24:
    if ((v4 & 0x1000) == 0)
      goto LABEL_25;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 180), 0x17u);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x1000) == 0)
  {
LABEL_25:
    if ((v4 & 0x2000) == 0)
      goto LABEL_26;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(double *)(v3 + 104), 0x18u);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x2000) == 0)
  {
LABEL_26:
    if ((v4 & 0x400) == 0)
      goto LABEL_27;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(double *)(v3 + 112), 0x19u);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x400) == 0)
  {
LABEL_27:
    if ((v4 & 0x800) == 0)
      goto LABEL_28;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(double *)(v3 + 88), 0x1Au);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x800) == 0)
  {
LABEL_28:
    if ((v4 & 0x1000000) == 0)
      return this;
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 181), 0x1Cu);
  }
LABEL_56:
  this = PB::Writer::write(a2, *(double *)(v3 + 96), 0x1Bu);
  if ((*(_DWORD *)(v3 + 188) & 0x1000000) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 181), 0x1Cu);
  return this;
}

uint64_t CMMsl::RunningSpeedKFResult::hash_value(CMMsl::RunningSpeedKFResult *this)
{
  int v1;
  double v2;
  double v3;
  double v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;

  v1 = *((_DWORD *)this + 47);
  if ((v1 & 0x80000) == 0)
  {
    v2 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_3;
LABEL_71:
    v3 = 0.0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_6;
LABEL_72:
    v4 = 0.0;
    if ((v1 & 0x8000000) != 0)
      goto LABEL_9;
    goto LABEL_73;
  }
  v2 = *((double *)this + 20);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 0x80) == 0)
    goto LABEL_71;
LABEL_3:
  v3 = *((double *)this + 8);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 0x40000) == 0)
    goto LABEL_72;
LABEL_6:
  v4 = *((double *)this + 19);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 0x8000000) != 0)
  {
LABEL_9:
    v5 = *((unsigned __int8 *)this + 184);
    if ((v1 & 0x20000) != 0)
      goto LABEL_10;
LABEL_74:
    v6 = 0.0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_13;
LABEL_75:
    v7 = 0.0;
    if ((v1 & 0x2000000) != 0)
      goto LABEL_16;
    goto LABEL_76;
  }
LABEL_73:
  v5 = 0;
  if ((v1 & 0x20000) == 0)
    goto LABEL_74;
LABEL_10:
  v6 = *((double *)this + 18);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_75;
LABEL_13:
  v7 = *((double *)this + 17);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v1 & 0x2000000) != 0)
  {
LABEL_16:
    v8 = *((unsigned __int8 *)this + 182);
    if ((v1 & 0x4000000) != 0)
      goto LABEL_17;
    goto LABEL_77;
  }
LABEL_76:
  v8 = 0;
  if ((v1 & 0x4000000) != 0)
  {
LABEL_17:
    v9 = *((unsigned __int8 *)this + 183);
    if ((v1 & 0x40) != 0)
      goto LABEL_18;
LABEL_78:
    v10 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_21;
LABEL_79:
    v11 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_24;
LABEL_80:
    v12 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_27;
LABEL_81:
    v13 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_30;
LABEL_82:
    v14 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_33;
LABEL_83:
    v15 = 0.0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_36;
LABEL_84:
    v16 = 0.0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_39;
LABEL_85:
    v17 = 0.0;
    if ((v1 & 0x100) != 0)
      goto LABEL_42;
LABEL_86:
    v18 = 0.0;
    if ((v1 & 0x200) != 0)
      goto LABEL_45;
LABEL_87:
    v19 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_48;
LABEL_88:
    v20 = 0.0;
    if ((v1 & 0x400000) != 0)
      goto LABEL_51;
    goto LABEL_89;
  }
LABEL_77:
  v9 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_78;
LABEL_18:
  v10 = *((double *)this + 7);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_79;
LABEL_21:
  v11 = *((double *)this + 4);
  if (v11 == 0.0)
    v11 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_80;
LABEL_24:
  v12 = *((double *)this + 6);
  if (v12 == 0.0)
    v12 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_81;
LABEL_27:
  v13 = *((double *)this + 5);
  if (v13 == 0.0)
    v13 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_82;
LABEL_30:
  v14 = *((double *)this + 1);
  if (v14 == 0.0)
    v14 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_83;
LABEL_33:
  v15 = *((double *)this + 2);
  if (v15 == 0.0)
    v15 = 0.0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_84;
LABEL_36:
  v16 = *((double *)this + 16);
  if (v16 == 0.0)
    v16 = 0.0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_85;
LABEL_39:
  v17 = *((double *)this + 15);
  if (v17 == 0.0)
    v17 = 0.0;
  if ((v1 & 0x100) == 0)
    goto LABEL_86;
LABEL_42:
  v18 = *((double *)this + 9);
  if (v18 == 0.0)
    v18 = 0.0;
  if ((v1 & 0x200) == 0)
    goto LABEL_87;
LABEL_45:
  v19 = *((double *)this + 10);
  if (v19 == 0.0)
    v19 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_88;
LABEL_48:
  v20 = *((double *)this + 3);
  if (v20 == 0.0)
    v20 = 0.0;
  if ((v1 & 0x400000) != 0)
  {
LABEL_51:
    v21 = *((int *)this + 44);
    if ((v1 & 0x100000) != 0)
      goto LABEL_52;
    goto LABEL_90;
  }
LABEL_89:
  v21 = 0;
  if ((v1 & 0x100000) != 0)
  {
LABEL_52:
    v22 = *((int *)this + 42);
    if ((v1 & 0x200000) != 0)
      goto LABEL_53;
    goto LABEL_91;
  }
LABEL_90:
  v22 = 0;
  if ((v1 & 0x200000) != 0)
  {
LABEL_53:
    v23 = *((int *)this + 43);
    if ((v1 & 0x800000) != 0)
      goto LABEL_54;
    goto LABEL_92;
  }
LABEL_91:
  v23 = 0;
  if ((v1 & 0x800000) != 0)
  {
LABEL_54:
    v24 = *((unsigned __int8 *)this + 180);
    if ((v1 & 0x1000) != 0)
      goto LABEL_55;
LABEL_93:
    v25 = 0.0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_58;
LABEL_94:
    v26 = 0.0;
    if ((v1 & 0x400) != 0)
      goto LABEL_61;
LABEL_95:
    v27 = 0.0;
    if ((v1 & 0x800) != 0)
      goto LABEL_64;
    goto LABEL_96;
  }
LABEL_92:
  v24 = 0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_93;
LABEL_55:
  v25 = *((double *)this + 13);
  if (v25 == 0.0)
    v25 = 0.0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_94;
LABEL_58:
  v26 = *((double *)this + 14);
  if (v26 == 0.0)
    v26 = 0.0;
  if ((v1 & 0x400) == 0)
    goto LABEL_95;
LABEL_61:
  v27 = *((double *)this + 11);
  if (v27 == 0.0)
    v27 = 0.0;
  if ((v1 & 0x800) != 0)
  {
LABEL_64:
    v28 = *((double *)this + 12);
    if (v28 == 0.0)
      v28 = 0.0;
    if ((v1 & 0x1000000) != 0)
      goto LABEL_67;
LABEL_97:
    v29 = 0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ v8 ^ v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ *(_QWORD *)&v15 ^ *(_QWORD *)&v16 ^ *(_QWORD *)&v17 ^ *(_QWORD *)&v18 ^ *(_QWORD *)&v19 ^ *(_QWORD *)&v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ *(_QWORD *)&v25 ^ *(_QWORD *)&v26 ^ *(_QWORD *)&v27 ^ *(_QWORD *)&v28 ^ v29;
  }
LABEL_96:
  v28 = 0.0;
  if ((v1 & 0x1000000) == 0)
    goto LABEL_97;
LABEL_67:
  v29 = *((unsigned __int8 *)this + 181);
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ v8 ^ v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ *(_QWORD *)&v15 ^ *(_QWORD *)&v16 ^ *(_QWORD *)&v17 ^ *(_QWORD *)&v18 ^ *(_QWORD *)&v19 ^ *(_QWORD *)&v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ *(_QWORD *)&v25 ^ *(_QWORD *)&v26 ^ *(_QWORD *)&v27 ^ *(_QWORD *)&v28 ^ v29;
}

void CMMsl::RunningStrideLength::~RunningStrideLength(CMMsl::RunningStrideLength *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::RunningStrideLength::RunningStrideLength(CMMsl::RunningStrideLength *this, const CMMsl::RunningStrideLength *a2)
{
  int v2;
  int v3;
  double result;
  int v5;
  char v6;

  *(_QWORD *)this = off_100354118;
  *((_DWORD *)this + 34) = 0;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 4) != 0)
  {
    result = *((double *)a2 + 3);
    v3 = 4;
    *((_DWORD *)this + 34) = 4;
    *((double *)this + 3) = result;
    v2 = *((_DWORD *)a2 + 34);
    if ((v2 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x200) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 10);
    v3 |= 0x200u;
    *((_DWORD *)this + 34) = v3;
    *((double *)this + 10) = result;
    v2 = *((_DWORD *)a2 + 34);
  }
LABEL_6:
  if ((v2 & 0x4000) != 0)
  {
    result = *((double *)a2 + 15);
    v3 |= 0x4000u;
    *((_DWORD *)this + 34) = v3;
    *((double *)this + 15) = result;
    v2 = *((_DWORD *)a2 + 34);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_24;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 11);
  v3 |= 0x400u;
  *((_DWORD *)this + 34) = v3;
  *((double *)this + 11) = result;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_DWORD *)this + 34) = v3;
  *((double *)this + 5) = result;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((_DWORD *)this + 34) = v3;
  *((double *)this + 6) = result;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_DWORD *)this + 34) = v3;
  *((double *)this + 8) = result;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_DWORD *)this + 34) = v3;
  *((double *)this + 7) = result;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_29;
  }
LABEL_28:
  result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_DWORD *)this + 34) = v3;
  *((double *)this + 4) = result;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x1000) == 0)
  {
LABEL_14:
    if ((v2 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_30;
  }
LABEL_29:
  result = *((double *)a2 + 13);
  v3 |= 0x1000u;
  *((_DWORD *)this + 34) = v3;
  *((double *)this + 13) = result;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x800) == 0)
  {
LABEL_15:
    if ((v2 & 0x2000) == 0)
      goto LABEL_16;
    goto LABEL_31;
  }
LABEL_30:
  result = *((double *)a2 + 12);
  v3 |= 0x800u;
  *((_DWORD *)this + 34) = v3;
  *((double *)this + 12) = result;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x2000) == 0)
  {
LABEL_16:
    if ((v2 & 1) == 0)
      goto LABEL_17;
    goto LABEL_32;
  }
LABEL_31:
  result = *((double *)a2 + 14);
  v3 |= 0x2000u;
  *((_DWORD *)this + 34) = v3;
  *((double *)this + 14) = result;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 1) == 0)
  {
LABEL_17:
    if ((v2 & 0x8000) == 0)
      goto LABEL_18;
    goto LABEL_33;
  }
LABEL_32:
  result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_DWORD *)this + 34) = v3;
  *((double *)this + 1) = result;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x8000) == 0)
  {
LABEL_18:
    if ((v2 & 0x10000) == 0)
      goto LABEL_19;
    goto LABEL_34;
  }
LABEL_33:
  v5 = *((_DWORD *)a2 + 32);
  v3 |= 0x8000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 32) = v5;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x10000) == 0)
  {
LABEL_19:
    if ((v2 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_35;
  }
LABEL_34:
  v6 = *((_BYTE *)a2 + 132);
  v3 |= 0x10000u;
  *((_DWORD *)this + 34) = v3;
  *((_BYTE *)this + 132) = v6;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x100) == 0)
  {
LABEL_20:
    if ((v2 & 2) == 0)
      return result;
LABEL_36:
    result = *((double *)a2 + 2);
    *((_DWORD *)this + 34) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
LABEL_35:
  result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_DWORD *)this + 34) = v3;
  *((double *)this + 9) = result;
  if ((*((_DWORD *)a2 + 34) & 2) != 0)
    goto LABEL_36;
  return result;
}

CMMsl *CMMsl::RunningStrideLength::operator=(CMMsl *a1, const CMMsl::RunningStrideLength *a2)
{
  CMMsl::RunningStrideLength *v3;
  _BYTE v5[144];

  if (a1 != a2)
  {
    CMMsl::RunningStrideLength::RunningStrideLength((CMMsl::RunningStrideLength *)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningStrideLength *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RunningStrideLength *a2, CMMsl::RunningStrideLength *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  double result;

  v3 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v3;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  v5 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v5;
  v6 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v6;
  v7 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v7;
  v8 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  v9 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v9;
  v10 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v10;
  v11 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v11;
  v12 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v12;
  v13 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v13;
  v14 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v14;
  v15 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v15;
  v16 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v16;
  v17 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v17;
  LOBYTE(v17) = *((_BYTE *)this + 132);
  *((_BYTE *)this + 132) = *((_BYTE *)a2 + 132);
  *((_BYTE *)a2 + 132) = v17;
  v18 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v18;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::RunningStrideLength::RunningStrideLength(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100354118;
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 132) = *(_BYTE *)(a2 + 132);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

CMMsl *CMMsl::RunningStrideLength::operator=(CMMsl *this, uint64_t a2, CMMsl::RunningStrideLength *a3)
{
  void (**v5)(CMMsl::RunningStrideLength *__hidden);
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  char v15;
  int v16;

  if (this != (CMMsl *)a2)
  {
    v5 = off_100354118;
    v16 = *(_DWORD *)(a2 + 136);
    *(_DWORD *)(a2 + 136) = 0;
    v13 = *(_QWORD *)(a2 + 120);
    v8 = *(_OWORD *)(a2 + 40);
    v9 = *(_OWORD *)(a2 + 56);
    v7 = *(_OWORD *)(a2 + 24);
    v11 = *(_OWORD *)(a2 + 88);
    v12 = *(_OWORD *)(a2 + 104);
    v14 = *(_DWORD *)(a2 + 128);
    v15 = *(_BYTE *)(a2 + 132);
    v10 = *(_OWORD *)(a2 + 72);
    v6 = *(_OWORD *)(a2 + 8);
    CMMsl::swap(this, (CMMsl::RunningStrideLength *)&v5, a3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return this;
}

uint64_t CMMsl::RunningStrideLength::formatText(CMMsl::RunningStrideLength *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x8000) != 0)
  {
    PB::TextFormatter::format(a2, "algorithmType", *((_DWORD *)this + 32));
    v5 = *((_DWORD *)this + 34);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_22;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "alpha", *((double *)this + 1));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "cadence", *((double *)this + 2));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "formBasedStartTime", *((double *)this + 3));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "grade", *((double *)this + 4));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "heightCM", *((double *)this + 5));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x10000) == 0)
      goto LABEL_9;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "horizontalAccelMagnitudeMeanSqrt", *((double *)this + 6));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x10000) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "isValid", *((_BYTE *)this + 132));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "rotationRateGravityProjectionMax", *((double *)this + 7));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v5 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "rotationRateMagnitudeMin", *((double *)this + 8));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x100) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "speed", *((double *)this + 9));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "speedBasedStartTime", *((double *)this + 10));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v5 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "strideLength", *((double *)this + 11));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x800) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "strideLengthFormBasedCalibrated", *((double *)this + 12));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000) == 0)
      goto LABEL_17;
LABEL_35:
    PB::TextFormatter::format(a2, "strideLengthSpeedBased", *((double *)this + 14));
    if ((*((_DWORD *)this + 34) & 0x4000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_18;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "strideLengthFormBasedUncalibrated", *((double *)this + 13));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x2000) != 0)
    goto LABEL_35;
LABEL_17:
  if ((v5 & 0x4000) != 0)
LABEL_18:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 15));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RunningStrideLength::readFrom(CMMsl::RunningStrideLength *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  char v29;
  unsigned int v30;
  unint64_t v31;
  char v32;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 34) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_77;
              *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_88;
            case 2u:
              *((_DWORD *)this + 34) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_77;
              *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_88;
            case 3u:
              *((_DWORD *)this + 34) |= 0x4000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_77;
              *((_QWORD *)this + 15) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_88;
            case 4u:
              *((_DWORD *)this + 34) |= 0x400u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_77;
              *((_QWORD *)this + 11) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_88;
            case 5u:
              *((_DWORD *)this + 34) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_77;
              *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_88;
            case 6u:
              *((_DWORD *)this + 34) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_77;
              *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_88;
            case 7u:
              *((_DWORD *)this + 34) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_77;
              *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_88;
            case 8u:
              *((_DWORD *)this + 34) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_77;
              *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_88;
            case 9u:
              *((_DWORD *)this + 34) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_77;
              *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_88;
            case 0xAu:
              *((_DWORD *)this + 34) |= 0x1000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_77;
              *((_QWORD *)this + 13) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_88;
            case 0xBu:
              *((_DWORD *)this + 34) |= 0x800u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_77;
              *((_QWORD *)this + 12) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_88;
            case 0xCu:
              *((_DWORD *)this + 34) |= 0x2000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_77;
              *((_QWORD *)this + 14) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_88;
            case 0xDu:
              *((_DWORD *)this + 34) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_77;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_88;
            case 0xEu:
              *((_DWORD *)this + 34) |= 0x8000u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v29 = 0;
                v30 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_93;
                  }
                  v31 = v21++;
                  v32 = *(_BYTE *)(v22 + v31);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0)
                    break;
                  v29 += 7;
                  v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_92:
                    v2 = v31 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_92;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_93;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_93:
              *((_DWORD *)this + 32) = v25;
LABEL_94:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xFu:
              *((_DWORD *)this + 34) |= 0x10000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v28 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v28 = v27 != 0;
              }
              *((_BYTE *)this + 132) = v28;
              goto LABEL_94;
            case 0x10u:
              *((_DWORD *)this + 34) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_77;
              *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_88;
            case 0x11u:
              *((_DWORD *)this + 34) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_88:
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_77:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_94;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_94;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::RunningStrideLength::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 136);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24), 1u);
    v4 = *(_DWORD *)(v3 + 136);
    if ((v4 & 0x200) == 0)
    {
LABEL_3:
      if ((v4 & 0x4000) == 0)
        goto LABEL_4;
      goto LABEL_21;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 80), 2u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x4000) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 120), 3u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 88), 4u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 5u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 6u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 7u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 8u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x1000) == 0)
      goto LABEL_11;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 9u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x1000) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(double *)(v3 + 104), 0xAu);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(double *)(v3 + 96), 0xBu);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x2000) == 0)
  {
LABEL_13:
    if ((v4 & 1) == 0)
      goto LABEL_14;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(double *)(v3 + 112), 0xCu);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 1) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000) == 0)
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 0xDu);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x8000) == 0)
  {
LABEL_15:
    if ((v4 & 0x10000) == 0)
      goto LABEL_16;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 128), 0xEu);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x10000) == 0)
  {
LABEL_16:
    if ((v4 & 0x100) == 0)
      goto LABEL_17;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 132), 0xFu);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x100) == 0)
  {
LABEL_17:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 16), 0x11u);
  }
LABEL_34:
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 0x10u);
  if ((*(_DWORD *)(v3 + 136) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16), 0x11u);
  return this;
}

uint64_t CMMsl::RunningStrideLength::hash_value(CMMsl::RunningStrideLength *this)
{
  int v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;

  v1 = *((_DWORD *)this + 34);
  if ((v1 & 4) == 0)
  {
    v2 = 0.0;
    if ((v1 & 0x200) != 0)
      goto LABEL_3;
LABEL_50:
    v3 = 0.0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_6;
LABEL_51:
    v4 = 0.0;
    if ((v1 & 0x400) != 0)
      goto LABEL_9;
LABEL_52:
    v5 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_12;
LABEL_53:
    v6 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_15;
LABEL_54:
    v7 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_18;
LABEL_55:
    v8 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_21;
LABEL_56:
    v9 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_24;
LABEL_57:
    v10 = 0.0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_27;
LABEL_58:
    v11 = 0.0;
    if ((v1 & 0x800) != 0)
      goto LABEL_30;
LABEL_59:
    v12 = 0.0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_33;
LABEL_60:
    v13 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_36;
LABEL_61:
    v14 = 0.0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_39;
    goto LABEL_62;
  }
  v2 = *((double *)this + 3);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 0x200) == 0)
    goto LABEL_50;
LABEL_3:
  v3 = *((double *)this + 10);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_51;
LABEL_6:
  v4 = *((double *)this + 15);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 0x400) == 0)
    goto LABEL_52;
LABEL_9:
  v5 = *((double *)this + 11);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_53;
LABEL_12:
  v6 = *((double *)this + 5);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_54;
LABEL_15:
  v7 = *((double *)this + 6);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v1 & 0x80) == 0)
    goto LABEL_55;
LABEL_18:
  v8 = *((double *)this + 8);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((v1 & 0x40) == 0)
    goto LABEL_56;
LABEL_21:
  v9 = *((double *)this + 7);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_57;
LABEL_24:
  v10 = *((double *)this + 4);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_58;
LABEL_27:
  v11 = *((double *)this + 13);
  if (v11 == 0.0)
    v11 = 0.0;
  if ((v1 & 0x800) == 0)
    goto LABEL_59;
LABEL_30:
  v12 = *((double *)this + 12);
  if (v12 == 0.0)
    v12 = 0.0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_60;
LABEL_33:
  v13 = *((double *)this + 14);
  if (v13 == 0.0)
    v13 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_61;
LABEL_36:
  v14 = *((double *)this + 1);
  if (v14 == 0.0)
    v14 = 0.0;
  if ((v1 & 0x8000) != 0)
  {
LABEL_39:
    v15 = *((int *)this + 32);
    if ((v1 & 0x10000) != 0)
      goto LABEL_40;
    goto LABEL_63;
  }
LABEL_62:
  v15 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_40:
    v16 = *((unsigned __int8 *)this + 132);
    if ((v1 & 0x100) != 0)
      goto LABEL_41;
    goto LABEL_64;
  }
LABEL_63:
  v16 = 0;
  if ((v1 & 0x100) != 0)
  {
LABEL_41:
    v17 = *((double *)this + 9);
    if (v17 == 0.0)
      v17 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_44;
LABEL_65:
    v18 = 0.0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ v15 ^ v16 ^ *(_QWORD *)&v17 ^ *(_QWORD *)&v18;
  }
LABEL_64:
  v17 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_65;
LABEL_44:
  v18 = *((double *)this + 2);
  if (v18 == 0.0)
    v18 = 0.0;
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ v15 ^ v16 ^ *(_QWORD *)&v17 ^ *(_QWORD *)&v18;
}

void CMMsl::RunningVerticalOscillation::~RunningVerticalOscillation(CMMsl::RunningVerticalOscillation *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::RunningVerticalOscillation::RunningVerticalOscillation(CMMsl::RunningVerticalOscillation *this, const CMMsl::RunningVerticalOscillation *a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)this = off_100354150;
  *((_DWORD *)this + 10) = 0;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 4) != 0)
  {
    result = *((double *)a2 + 3);
    v3 = 4;
    *((_BYTE *)this + 40) = 4;
    *((double *)this + 3) = result;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 40) & 8) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 4);
    v3 |= 8u;
    *((_BYTE *)this + 40) = v3;
    *((double *)this + 4) = result;
    v2 = *((_BYTE *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0)
      return result;
LABEL_10:
    result = *((double *)a2 + 2);
    *((_BYTE *)this + 40) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
  result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_BYTE *)this + 40) = v3;
  *((double *)this + 1) = result;
  if ((*((_BYTE *)a2 + 40) & 2) != 0)
    goto LABEL_10;
  return result;
}

uint64_t CMMsl::RunningVerticalOscillation::operator=(uint64_t a1, const CMMsl::RunningVerticalOscillation *a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  int v10;

  if ((const CMMsl::RunningVerticalOscillation *)a1 != a2)
  {
    CMMsl::RunningVerticalOscillation::RunningVerticalOscillation((CMMsl::RunningVerticalOscillation *)&v7, a2);
    v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v10;
    v10 = v3;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RunningVerticalOscillation *a2, CMMsl::RunningVerticalOscillation *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::RunningVerticalOscillation::RunningVerticalOscillation(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100354150;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100354150;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::RunningVerticalOscillation::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  void (**v8)(CMMsl::RunningVerticalOscillation *__hidden);
  __int128 v9;
  __int128 v10;
  int v11;

  if (a1 != a2)
  {
    v8 = off_100354150;
    v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    v11 = *(_DWORD *)(a1 + 40);
    v10 = *(_OWORD *)(a1 + 24);
    v4 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a2 + 8);
    v6 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 40) = v3;
    *(_OWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 8) = v5;
    v9 = v4;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::RunningVerticalOscillation::formatText(CMMsl::RunningVerticalOscillation *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "displacement", *((double *)this + 1));
    v5 = *((_BYTE *)this + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "startTime", *((double *)this + 3));
      if ((*((_BYTE *)this + 40) & 8) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "endTime", *((double *)this + 2));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RunningVerticalOscillation::readFrom(CMMsl::RunningVerticalOscillation *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 40) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_35;
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_37;
        case 2u:
          *((_BYTE *)this + 40) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_35;
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_37;
        case 3u:
          *((_BYTE *)this + 40) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_35;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_37;
        case 4u:
          *((_BYTE *)this + 40) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_37:
            v2 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v2;
          }
          else
          {
LABEL_35:
            *((_BYTE *)a2 + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::RunningVerticalOscillation::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 40);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24), 1u);
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 40) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 2u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 16), 4u);
  }
LABEL_8:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 3u);
  if ((*(_BYTE *)(v3 + 40) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16), 4u);
  return this;
}

uint64_t CMMsl::RunningVerticalOscillation::hash_value(CMMsl::RunningVerticalOscillation *this)
{
  double v1;
  double v2;
  double v3;
  double v4;

  if ((*((_BYTE *)this + 40) & 4) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 40) & 8) != 0)
      goto LABEL_3;
LABEL_15:
    v2 = 0.0;
    if ((*((_BYTE *)this + 40) & 1) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v1 = *((double *)this + 3);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 40) & 8) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((double *)this + 4);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 40) & 1) != 0)
  {
LABEL_6:
    v3 = *((double *)this + 1);
    if (v3 == 0.0)
      v3 = 0.0;
    if ((*((_BYTE *)this + 40) & 2) != 0)
      goto LABEL_9;
LABEL_17:
    v4 = 0.0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4;
  }
LABEL_16:
  v3 = 0.0;
  if ((*((_BYTE *)this + 40) & 2) == 0)
    goto LABEL_17;
LABEL_9:
  v4 = *((double *)this + 2);
  if (v4 == 0.0)
    v4 = 0.0;
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4;
}

void CMMsl::RunningVerticalOscillationGradientBoostedSignals::~RunningVerticalOscillationGradientBoostedSignals(CMMsl::RunningVerticalOscillationGradientBoostedSignals *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::RunningVerticalOscillationGradientBoostedSignals::RunningVerticalOscillationGradientBoostedSignals(uint64_t this, const CMMsl::RunningVerticalOscillationGradientBoostedSignals *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;

  *(_QWORD *)this = off_100354188;
  *(_DWORD *)(this + 212) = 0;
  v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x40000) != 0)
  {
    v4 = *((_QWORD *)a2 + 19);
    v3 = 0x40000;
    *(_DWORD *)(this + 212) = 0x40000;
    *(_QWORD *)(this + 152) = v4;
    v2 = *((_DWORD *)a2 + 53);
    if ((v2 & 0x4000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x4000) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 15);
    v3 |= 0x4000u;
    *(_DWORD *)(this + 212) = v3;
    *(_QWORD *)(this + 120) = v5;
    v2 = *((_DWORD *)a2 + 53);
  }
LABEL_6:
  if ((v2 & 0x400) != 0)
  {
    v6 = *((_QWORD *)a2 + 11);
    v3 |= 0x400u;
    *(_DWORD *)(this + 212) = v3;
    *(_QWORD *)(this + 88) = v6;
    v2 = *((_DWORD *)a2 + 53);
    if ((v2 & 0x800) == 0)
    {
LABEL_8:
      if ((v2 & 0x1000) == 0)
        goto LABEL_9;
      goto LABEL_33;
    }
  }
  else if ((v2 & 0x800) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 12);
  v3 |= 0x800u;
  *(_DWORD *)(this + 212) = v3;
  *(_QWORD *)(this + 96) = v7;
  v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x1000) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0)
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_33:
  v8 = *((_QWORD *)a2 + 13);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 212) = v3;
  *(_QWORD *)(this + 104) = v8;
  v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 2) == 0)
  {
LABEL_10:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_11;
    goto LABEL_35;
  }
LABEL_34:
  v9 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 212) = v3;
  *(_QWORD *)(this + 16) = v9;
  v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x200000) == 0)
      goto LABEL_12;
    goto LABEL_36;
  }
LABEL_35:
  v10 = *((_QWORD *)a2 + 25);
  v3 |= 0x1000000u;
  *(_DWORD *)(this + 212) = v3;
  *(_QWORD *)(this + 200) = v10;
  v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x200000) == 0)
  {
LABEL_12:
    if ((v2 & 0x100000) == 0)
      goto LABEL_13;
    goto LABEL_37;
  }
LABEL_36:
  v11 = *((_QWORD *)a2 + 22);
  v3 |= 0x200000u;
  *(_DWORD *)(this + 212) = v3;
  *(_QWORD *)(this + 176) = v11;
  v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x100000) == 0)
  {
LABEL_13:
    if ((v2 & 0x20000) == 0)
      goto LABEL_14;
    goto LABEL_38;
  }
LABEL_37:
  v12 = *((_QWORD *)a2 + 21);
  v3 |= 0x100000u;
  *(_DWORD *)(this + 212) = v3;
  *(_QWORD *)(this + 168) = v12;
  v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x20000) == 0)
  {
LABEL_14:
    if ((v2 & 0x8000) == 0)
      goto LABEL_15;
    goto LABEL_39;
  }
LABEL_38:
  v13 = *((_QWORD *)a2 + 18);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 212) = v3;
  *(_QWORD *)(this + 144) = v13;
  v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x8000) == 0)
  {
LABEL_15:
    if ((v2 & 0x200) == 0)
      goto LABEL_16;
    goto LABEL_40;
  }
LABEL_39:
  v14 = *((_QWORD *)a2 + 16);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 212) = v3;
  *(_QWORD *)(this + 128) = v14;
  v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x200) == 0)
  {
LABEL_16:
    if ((v2 & 0x40) == 0)
      goto LABEL_17;
    goto LABEL_41;
  }
LABEL_40:
  v15 = *((_QWORD *)a2 + 10);
  v3 |= 0x200u;
  *(_DWORD *)(this + 212) = v3;
  *(_QWORD *)(this + 80) = v15;
  v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x40) == 0)
  {
LABEL_17:
    if ((v2 & 0x20) == 0)
      goto LABEL_18;
    goto LABEL_42;
  }
LABEL_41:
  v16 = *((_QWORD *)a2 + 7);
  v3 |= 0x40u;
  *(_DWORD *)(this + 212) = v3;
  *(_QWORD *)(this + 56) = v16;
  v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x20) == 0)
  {
LABEL_18:
    if ((v2 & 8) == 0)
      goto LABEL_19;
    goto LABEL_43;
  }
LABEL_42:
  v17 = *((_QWORD *)a2 + 6);
  v3 |= 0x20u;
  *(_DWORD *)(this + 212) = v3;
  *(_QWORD *)(this + 48) = v17;
  v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 8) == 0)
  {
LABEL_19:
    if ((v2 & 0x800000) == 0)
      goto LABEL_20;
    goto LABEL_44;
  }
LABEL_43:
  v18 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_DWORD *)(this + 212) = v3;
  *(_QWORD *)(this + 32) = v18;
  v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x800000) == 0)
  {
LABEL_20:
    if ((v2 & 0x10) == 0)
      goto LABEL_21;
    goto LABEL_45;
  }
LABEL_44:
  v19 = *((_QWORD *)a2 + 24);
  v3 |= 0x800000u;
  *(_DWORD *)(this + 212) = v3;
  *(_QWORD *)(this + 192) = v19;
  v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x10) == 0)
  {
LABEL_21:
    if ((v2 & 0x2000) == 0)
      goto LABEL_22;
    goto LABEL_46;
  }
LABEL_45:
  v20 = *((_QWORD *)a2 + 5);
  v3 |= 0x10u;
  *(_DWORD *)(this + 212) = v3;
  *(_QWORD *)(this + 40) = v20;
  v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x2000) == 0)
  {
LABEL_22:
    if ((v2 & 0x100) == 0)
      goto LABEL_23;
    goto LABEL_47;
  }
LABEL_46:
  v21 = *((_QWORD *)a2 + 14);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 212) = v3;
  *(_QWORD *)(this + 112) = v21;
  v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x100) == 0)
  {
LABEL_23:
    if ((v2 & 0x10000) == 0)
      goto LABEL_24;
    goto LABEL_48;
  }
LABEL_47:
  v22 = *((_QWORD *)a2 + 9);
  v3 |= 0x100u;
  *(_DWORD *)(this + 212) = v3;
  *(_QWORD *)(this + 72) = v22;
  v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x10000) == 0)
  {
LABEL_24:
    if ((v2 & 0x80) == 0)
      goto LABEL_25;
    goto LABEL_49;
  }
LABEL_48:
  v23 = *((_QWORD *)a2 + 17);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 212) = v3;
  *(_QWORD *)(this + 136) = v23;
  v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x80) == 0)
  {
LABEL_25:
    if ((v2 & 4) == 0)
      goto LABEL_26;
    goto LABEL_50;
  }
LABEL_49:
  v24 = *((_QWORD *)a2 + 8);
  v3 |= 0x80u;
  *(_DWORD *)(this + 212) = v3;
  *(_QWORD *)(this + 64) = v24;
  v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 4) == 0)
  {
LABEL_26:
    if ((v2 & 1) == 0)
      goto LABEL_27;
    goto LABEL_51;
  }
LABEL_50:
  v25 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *(_DWORD *)(this + 212) = v3;
  *(_QWORD *)(this + 24) = v25;
  v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 1) == 0)
  {
LABEL_27:
    if ((v2 & 0x400000) == 0)
      goto LABEL_28;
    goto LABEL_52;
  }
LABEL_51:
  v26 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 212) = v3;
  *(_QWORD *)(this + 8) = v26;
  v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x400000) == 0)
  {
LABEL_28:
    if ((v2 & 0x80000) == 0)
      goto LABEL_29;
    goto LABEL_53;
  }
LABEL_52:
  v27 = *((_QWORD *)a2 + 23);
  v3 |= 0x400000u;
  *(_DWORD *)(this + 212) = v3;
  *(_QWORD *)(this + 184) = v27;
  v2 = *((_DWORD *)a2 + 53);
  if ((v2 & 0x80000) == 0)
  {
LABEL_29:
    if ((v2 & 0x2000000) == 0)
      return this;
LABEL_54:
    v29 = *((_BYTE *)a2 + 208);
    *(_DWORD *)(this + 212) = v3 | 0x2000000;
    *(_BYTE *)(this + 208) = v29;
    return this;
  }
LABEL_53:
  v28 = *((_QWORD *)a2 + 20);
  v3 |= 0x80000u;
  *(_DWORD *)(this + 212) = v3;
  *(_QWORD *)(this + 160) = v28;
  if ((*((_DWORD *)a2 + 53) & 0x2000000) != 0)
    goto LABEL_54;
  return this;
}

CMMsl *CMMsl::RunningVerticalOscillationGradientBoostedSignals::operator=(CMMsl *a1, const CMMsl::RunningVerticalOscillationGradientBoostedSignals *a2)
{
  CMMsl::RunningVerticalOscillationGradientBoostedSignals *v3;
  _BYTE v5[216];

  if (a1 != a2)
  {
    CMMsl::RunningVerticalOscillationGradientBoostedSignals::RunningVerticalOscillationGradientBoostedSignals((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningVerticalOscillationGradientBoostedSignals *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RunningVerticalOscillationGradientBoostedSignals *a2, CMMsl::RunningVerticalOscillationGradientBoostedSignals *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double result;

  v3 = *((_DWORD *)this + 53);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 53);
  *((_DWORD *)a2 + 53) = v3;
  v4 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v4;
  v5 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v5;
  v6 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v6;
  v7 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v7;
  v8 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v8;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v9;
  v10 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = *((_QWORD *)a2 + 25);
  *((_QWORD *)a2 + 25) = v10;
  v11 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = *((_QWORD *)a2 + 22);
  *((_QWORD *)a2 + 22) = v11;
  v12 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
  *((_QWORD *)a2 + 21) = v12;
  v13 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v13;
  v14 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v14;
  v15 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v15;
  v16 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v16;
  v17 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v17;
  v18 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v18;
  v19 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = *((_QWORD *)a2 + 24);
  *((_QWORD *)a2 + 24) = v19;
  v20 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v20;
  v21 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v21;
  v22 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v22;
  v23 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v23;
  v24 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v24;
  v25 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v25;
  v26 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v26;
  v27 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = *((_QWORD *)a2 + 23);
  *((_QWORD *)a2 + 23) = v27;
  result = *((double *)this + 20);
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  *((double *)a2 + 20) = result;
  LOBYTE(v3) = *((_BYTE *)this + 208);
  *((_BYTE *)this + 208) = *((_BYTE *)a2 + 208);
  *((_BYTE *)a2 + 208) = v3;
  return result;
}

double CMMsl::RunningVerticalOscillationGradientBoostedSignals::RunningVerticalOscillationGradientBoostedSignals(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100354188;
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_DWORD *)(a2 + 212) = 0;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  result = *(double *)(a2 + 160);
  *(double *)(a1 + 160) = result;
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  return result;
}

CMMsl *CMMsl::RunningVerticalOscillationGradientBoostedSignals::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::RunningVerticalOscillationGradientBoostedSignals *v3;
  _BYTE v5[216];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::RunningVerticalOscillationGradientBoostedSignals::RunningVerticalOscillationGradientBoostedSignals((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningVerticalOscillationGradientBoostedSignals *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::RunningVerticalOscillationGradientBoostedSignals::formatText(CMMsl::RunningVerticalOscillationGradientBoostedSignals *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "centerOfMassAccelZAmplitudeBackwards", *((double *)this + 1));
    v5 = *((_DWORD *)this + 53);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_31;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "height", *((double *)this + 2));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "integratedAngleYg", *((double *)this + 3));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "integratedAngleYgBackwards", *((double *)this + 4));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "integratedCenterOfAccelZMaxBackwards", *((double *)this + 5));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "integratedRotationAxisWZ", *((double *)this + 6));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "integratedRotationAxisWZForwards", *((double *)this + 7));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "integratedRotationRateYBackwards", *((double *)this + 8));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "integratedUserAccelTForwards", *((double *)this + 9));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "integratedUserAccelY", *((double *)this + 10));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "integratedVelocityZ", *((double *)this + 11));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "integratedVelocityZBackwards", *((double *)this + 12));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_15;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "integratedVelocityZForwards", *((double *)this + 13));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x2000) == 0)
      goto LABEL_16;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "isValidPeak", *((_BYTE *)this + 208));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x2000) == 0)
  {
LABEL_16:
    if ((v5 & 0x4000) == 0)
      goto LABEL_17;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "medianCadence", *((double *)this + 14));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x4000) == 0)
  {
LABEL_17:
    if ((v5 & 0x8000) == 0)
      goto LABEL_18;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "peakTime", *((double *)this + 15));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x8000) == 0)
  {
LABEL_18:
    if ((v5 & 0x10000) == 0)
      goto LABEL_19;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "rotationAxisWTAmplitudeXForwards", *((double *)this + 16));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x10000) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000) == 0)
      goto LABEL_20;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "rotationRateMaxZForwards", *((double *)this + 17));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x20000) == 0)
  {
LABEL_20:
    if ((v5 & 0x40000) == 0)
      goto LABEL_21;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "rotationTMaxZForwards", *((double *)this + 18));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x40000) == 0)
  {
LABEL_21:
    if ((v5 & 0x80000) == 0)
      goto LABEL_22;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 19));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x80000) == 0)
  {
LABEL_22:
    if ((v5 & 0x100000) == 0)
      goto LABEL_23;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "strideLengthCadence", *((double *)this + 20));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x100000) == 0)
  {
LABEL_23:
    if ((v5 & 0x200000) == 0)
      goto LABEL_24;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "swingAccelAmplitudeYBackwards", *((double *)this + 21));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x200000) == 0)
  {
LABEL_24:
    if ((v5 & 0x400000) == 0)
      goto LABEL_25;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "swingAccelMeanXBackwards", *((double *)this + 22));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x400000) == 0)
  {
LABEL_25:
    if ((v5 & 0x800000) == 0)
      goto LABEL_26;
LABEL_53:
    PB::TextFormatter::format(a2, "userAccelTMeanXBackards", *((double *)this + 24));
    if ((*((_DWORD *)this + 53) & 0x1000000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_27;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "swingAccelTZMean", *((double *)this + 23));
  v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x800000) != 0)
    goto LABEL_53;
LABEL_26:
  if ((v5 & 0x1000000) != 0)
LABEL_27:
    PB::TextFormatter::format(a2, "weight", *((double *)this + 25));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RunningVerticalOscillationGradientBoostedSignals::readFrom(CMMsl::RunningVerticalOscillationGradientBoostedSignals *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_DWORD *)this + 53) |= 0x40000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_100;
          *((_QWORD *)this + 19) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_104;
        case 2u:
          *((_DWORD *)this + 53) |= 0x4000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_100;
          *((_QWORD *)this + 15) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_104;
        case 3u:
          *((_DWORD *)this + 53) |= 0x400u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_100;
          *((_QWORD *)this + 11) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_104;
        case 4u:
          *((_DWORD *)this + 53) |= 0x800u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_100;
          *((_QWORD *)this + 12) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_104;
        case 5u:
          *((_DWORD *)this + 53) |= 0x1000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_100;
          *((_QWORD *)this + 13) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_104;
        case 6u:
          *((_DWORD *)this + 53) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_100;
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_104;
        case 7u:
          *((_DWORD *)this + 53) |= 0x1000000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_100;
          *((_QWORD *)this + 25) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_104;
        case 8u:
          *((_DWORD *)this + 53) |= 0x200000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_100;
          *((_QWORD *)this + 22) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_104;
        case 9u:
          *((_DWORD *)this + 53) |= 0x100000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_100;
          *((_QWORD *)this + 21) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_104;
        case 0xAu:
          *((_DWORD *)this + 53) |= 0x20000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_100;
          *((_QWORD *)this + 18) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_104;
        case 0xBu:
          *((_DWORD *)this + 53) |= 0x8000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_100;
          *((_QWORD *)this + 16) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_104;
        case 0xCu:
          *((_DWORD *)this + 53) |= 0x200u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_100;
          *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_104;
        case 0xDu:
          *((_DWORD *)this + 53) |= 0x40u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_100;
          *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_104;
        case 0xEu:
          *((_DWORD *)this + 53) |= 0x20u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_100;
          *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_104;
        case 0xFu:
          *((_DWORD *)this + 53) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_100;
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_104;
        case 0x10u:
          *((_DWORD *)this + 53) |= 0x800000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_100;
          *((_QWORD *)this + 24) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_104;
        case 0x11u:
          *((_DWORD *)this + 53) |= 0x10u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_100;
          *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_104;
        case 0x12u:
          *((_DWORD *)this + 53) |= 0x2000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_100;
          *((_QWORD *)this + 14) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_104;
        case 0x13u:
          *((_DWORD *)this + 53) |= 0x100u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_100;
          *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_104;
        case 0x14u:
          *((_DWORD *)this + 53) |= 0x10000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_100;
          *((_QWORD *)this + 17) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_104;
        case 0x15u:
          *((_DWORD *)this + 53) |= 0x80u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_100;
          *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_104;
        case 0x16u:
          *((_DWORD *)this + 53) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_100;
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_104;
        case 0x17u:
          *((_DWORD *)this + 53) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_100;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_104;
        case 0x18u:
          *((_DWORD *)this + 53) |= 0x400000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_100;
          *((_QWORD *)this + 23) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_104;
        case 0x19u:
          *((_DWORD *)this + 53) |= 0x80000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          {
LABEL_100:
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            *((_QWORD *)this + 20) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_104:
            v2 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v2;
          }
          break;
        case 0x1Au:
          *((_DWORD *)this + 53) |= 0x2000000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 >= *((_QWORD *)a2 + 2))
          {
            v21 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v21 = v20 != 0;
          }
          *((_BYTE *)this + 208) = v21;
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::RunningVerticalOscillationGradientBoostedSignals::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 212);
  if ((v4 & 0x40000) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 152), 1u);
    v4 = *(_DWORD *)(v3 + 212);
    if ((v4 & 0x4000) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0)
        goto LABEL_4;
      goto LABEL_30;
    }
  }
  else if ((v4 & 0x4000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 120), 2u);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 0x800) == 0)
      goto LABEL_5;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(double *)(v3 + 88), 3u);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x800) == 0)
  {
LABEL_5:
    if ((v4 & 0x1000) == 0)
      goto LABEL_6;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(double *)(v3 + 96), 4u);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x1000) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0)
      goto LABEL_7;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(double *)(v3 + 104), 5u);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 2) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_8;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 6u);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x200000) == 0)
      goto LABEL_9;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(double *)(v3 + 200), 7u);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x200000) == 0)
  {
LABEL_9:
    if ((v4 & 0x100000) == 0)
      goto LABEL_10;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(double *)(v3 + 176), 8u);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x100000) == 0)
  {
LABEL_10:
    if ((v4 & 0x20000) == 0)
      goto LABEL_11;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(double *)(v3 + 168), 9u);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x20000) == 0)
  {
LABEL_11:
    if ((v4 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(double *)(v3 + 144), 0xAu);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x8000) == 0)
  {
LABEL_12:
    if ((v4 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 128), 0xBu);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x200) == 0)
  {
LABEL_13:
    if ((v4 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 80), 0xCu);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x40) == 0)
  {
LABEL_14:
    if ((v4 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 0xDu);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x20) == 0)
  {
LABEL_15:
    if ((v4 & 8) == 0)
      goto LABEL_16;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 0xEu);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 8) == 0)
  {
LABEL_16:
    if ((v4 & 0x800000) == 0)
      goto LABEL_17;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 0xFu);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x800000) == 0)
  {
LABEL_17:
    if ((v4 & 0x10) == 0)
      goto LABEL_18;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(double *)(v3 + 192), 0x10u);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x10) == 0)
  {
LABEL_18:
    if ((v4 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 0x11u);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x2000) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(double *)(v3 + 112), 0x12u);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x10000) == 0)
      goto LABEL_21;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 0x13u);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x10000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80) == 0)
      goto LABEL_22;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(double *)(v3 + 136), 0x14u);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x80) == 0)
  {
LABEL_22:
    if ((v4 & 4) == 0)
      goto LABEL_23;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 0x15u);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 4) == 0)
  {
LABEL_23:
    if ((v4 & 1) == 0)
      goto LABEL_24;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 0x16u);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 1) == 0)
  {
LABEL_24:
    if ((v4 & 0x400000) == 0)
      goto LABEL_25;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 0x17u);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x400000) == 0)
  {
LABEL_25:
    if ((v4 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(double *)(v3 + 184), 0x18u);
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x80000) == 0)
  {
LABEL_26:
    if ((v4 & 0x2000000) == 0)
      return this;
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 208), 0x1Au);
  }
LABEL_52:
  this = PB::Writer::write(a2, *(double *)(v3 + 160), 0x19u);
  if ((*(_DWORD *)(v3 + 212) & 0x2000000) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 208), 0x1Au);
  return this;
}

uint64_t CMMsl::RunningVerticalOscillationGradientBoostedSignals::hash_value(CMMsl::RunningVerticalOscillationGradientBoostedSignals *this)
{
  int v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;

  v1 = *((_DWORD *)this + 53);
  if ((v1 & 0x40000) == 0)
  {
    v2 = 0.0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_3;
LABEL_79:
    v3 = 0.0;
    if ((v1 & 0x400) != 0)
      goto LABEL_6;
LABEL_80:
    v4 = 0.0;
    if ((v1 & 0x800) != 0)
      goto LABEL_9;
LABEL_81:
    v5 = 0.0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_12;
LABEL_82:
    v6 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_15;
LABEL_83:
    v7 = 0.0;
    if ((v1 & 0x1000000) != 0)
      goto LABEL_18;
LABEL_84:
    v8 = 0.0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_21;
LABEL_85:
    v9 = 0.0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_24;
LABEL_86:
    v10 = 0.0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_27;
LABEL_87:
    v11 = 0.0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_30;
LABEL_88:
    v12 = 0.0;
    if ((v1 & 0x200) != 0)
      goto LABEL_33;
LABEL_89:
    v13 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_36;
LABEL_90:
    v14 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_39;
LABEL_91:
    v15 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_42;
LABEL_92:
    v16 = 0.0;
    if ((v1 & 0x800000) != 0)
      goto LABEL_45;
LABEL_93:
    v17 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_48;
LABEL_94:
    v18 = 0.0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_51;
LABEL_95:
    v19 = 0.0;
    if ((v1 & 0x100) != 0)
      goto LABEL_54;
LABEL_96:
    v20 = 0.0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_57;
LABEL_97:
    v21 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_60;
LABEL_98:
    v22 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_63;
LABEL_99:
    v23 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_66;
LABEL_100:
    v24 = 0.0;
    if ((v1 & 0x400000) != 0)
      goto LABEL_69;
LABEL_101:
    v25 = 0.0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_72;
    goto LABEL_102;
  }
  v2 = *((double *)this + 19);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_79;
LABEL_3:
  v3 = *((double *)this + 15);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 0x400) == 0)
    goto LABEL_80;
LABEL_6:
  v4 = *((double *)this + 11);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 0x800) == 0)
    goto LABEL_81;
LABEL_9:
  v5 = *((double *)this + 12);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_82;
LABEL_12:
  v6 = *((double *)this + 13);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_83;
LABEL_15:
  v7 = *((double *)this + 2);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v1 & 0x1000000) == 0)
    goto LABEL_84;
LABEL_18:
  v8 = *((double *)this + 25);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((v1 & 0x200000) == 0)
    goto LABEL_85;
LABEL_21:
  v9 = *((double *)this + 22);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((v1 & 0x100000) == 0)
    goto LABEL_86;
LABEL_24:
  v10 = *((double *)this + 21);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((v1 & 0x20000) == 0)
    goto LABEL_87;
LABEL_27:
  v11 = *((double *)this + 18);
  if (v11 == 0.0)
    v11 = 0.0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_88;
LABEL_30:
  v12 = *((double *)this + 16);
  if (v12 == 0.0)
    v12 = 0.0;
  if ((v1 & 0x200) == 0)
    goto LABEL_89;
LABEL_33:
  v13 = *((double *)this + 10);
  if (v13 == 0.0)
    v13 = 0.0;
  if ((v1 & 0x40) == 0)
    goto LABEL_90;
LABEL_36:
  v14 = *((double *)this + 7);
  if (v14 == 0.0)
    v14 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_91;
LABEL_39:
  v15 = *((double *)this + 6);
  if (v15 == 0.0)
    v15 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_92;
LABEL_42:
  v16 = *((double *)this + 4);
  if (v16 == 0.0)
    v16 = 0.0;
  if ((v1 & 0x800000) == 0)
    goto LABEL_93;
LABEL_45:
  v17 = *((double *)this + 24);
  if (v17 == 0.0)
    v17 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_94;
LABEL_48:
  v18 = *((double *)this + 5);
  if (v18 == 0.0)
    v18 = 0.0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_95;
LABEL_51:
  v19 = *((double *)this + 14);
  if (v19 == 0.0)
    v19 = 0.0;
  if ((v1 & 0x100) == 0)
    goto LABEL_96;
LABEL_54:
  v20 = *((double *)this + 9);
  if (v20 == 0.0)
    v20 = 0.0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_97;
LABEL_57:
  v21 = *((double *)this + 17);
  if (v21 == 0.0)
    v21 = 0.0;
  if ((v1 & 0x80) == 0)
    goto LABEL_98;
LABEL_60:
  v22 = *((double *)this + 8);
  if (v22 == 0.0)
    v22 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_99;
LABEL_63:
  v23 = *((double *)this + 3);
  if (v23 == 0.0)
    v23 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_100;
LABEL_66:
  v24 = *((double *)this + 1);
  if (v24 == 0.0)
    v24 = 0.0;
  if ((v1 & 0x400000) == 0)
    goto LABEL_101;
LABEL_69:
  v25 = *((double *)this + 23);
  if (v25 == 0.0)
    v25 = 0.0;
  if ((v1 & 0x80000) != 0)
  {
LABEL_72:
    v26 = *((double *)this + 20);
    if (v26 == 0.0)
      v26 = 0.0;
    if ((v1 & 0x2000000) != 0)
      goto LABEL_75;
LABEL_103:
    v27 = 0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ *(_QWORD *)&v15 ^ *(_QWORD *)&v16 ^ *(_QWORD *)&v17 ^ *(_QWORD *)&v18 ^ *(_QWORD *)&v19 ^ *(_QWORD *)&v20 ^ *(_QWORD *)&v21 ^ *(_QWORD *)&v22 ^ *(_QWORD *)&v23 ^ *(_QWORD *)&v24 ^ *(_QWORD *)&v25 ^ *(_QWORD *)&v26 ^ v27;
  }
LABEL_102:
  v26 = 0.0;
  if ((v1 & 0x2000000) == 0)
    goto LABEL_103;
LABEL_75:
  v27 = *((unsigned __int8 *)this + 208);
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ *(_QWORD *)&v15 ^ *(_QWORD *)&v16 ^ *(_QWORD *)&v17 ^ *(_QWORD *)&v18 ^ *(_QWORD *)&v19 ^ *(_QWORD *)&v20 ^ *(_QWORD *)&v21 ^ *(_QWORD *)&v22 ^ *(_QWORD *)&v23 ^ *(_QWORD *)&v24 ^ *(_QWORD *)&v25 ^ *(_QWORD *)&v26 ^ v27;
}

void CMMsl::RunningVerticalOscillationSignals::~RunningVerticalOscillationSignals(CMMsl::RunningVerticalOscillationSignals *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::RunningVerticalOscillationSignals::RunningVerticalOscillationSignals(CMMsl::RunningVerticalOscillationSignals *this, const CMMsl::RunningVerticalOscillationSignals *a2)
{
  int v2;
  int v3;
  double result;

  *(_QWORD *)this = off_1003541C0;
  *((_DWORD *)this + 52) = 0;
  v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x400) != 0)
  {
    result = *((double *)a2 + 11);
    v3 = 1024;
    *((_DWORD *)this + 52) = 1024;
    *((double *)this + 11) = result;
    v2 = *((_DWORD *)a2 + 52);
    if ((v2 & 0x10000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x10000) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 17);
    v3 |= 0x10000u;
    *((_DWORD *)this + 52) = v3;
    *((double *)this + 17) = result;
    v2 = *((_DWORD *)a2 + 52);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    v3 |= 1u;
    *((_DWORD *)this + 52) = v3;
    *((double *)this + 1) = result;
    v2 = *((_DWORD *)a2 + 52);
    if ((v2 & 0x800000) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_32;
    }
  }
  else if ((v2 & 0x800000) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 24);
  v3 |= 0x800000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 24) = result;
  v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x800) == 0)
      goto LABEL_10;
    goto LABEL_33;
  }
LABEL_32:
  result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 7) = result;
  v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x800) == 0)
  {
LABEL_10:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_11;
    goto LABEL_34;
  }
LABEL_33:
  result = *((double *)a2 + 12);
  v3 |= 0x800u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 12) = result;
  v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_35;
  }
LABEL_34:
  result = *((double *)a2 + 25);
  v3 |= 0x1000000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 25) = result;
  v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x20) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_36;
  }
LABEL_35:
  result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 6) = result;
  v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 0x100000) == 0)
      goto LABEL_14;
    goto LABEL_37;
  }
LABEL_36:
  result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 8) = result;
  v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x100000) == 0)
  {
LABEL_14:
    if ((v2 & 8) == 0)
      goto LABEL_15;
    goto LABEL_38;
  }
LABEL_37:
  result = *((double *)a2 + 21);
  v3 |= 0x100000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 21) = result;
  v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 8) == 0)
  {
LABEL_15:
    if ((v2 & 0x200000) == 0)
      goto LABEL_16;
    goto LABEL_39;
  }
LABEL_38:
  result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 4) = result;
  v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x200000) == 0)
  {
LABEL_16:
    if ((v2 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_40;
  }
LABEL_39:
  result = *((double *)a2 + 22);
  v3 |= 0x200000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 22) = result;
  v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x8000) == 0)
  {
LABEL_17:
    if ((v2 & 4) == 0)
      goto LABEL_18;
    goto LABEL_41;
  }
LABEL_40:
  result = *((double *)a2 + 16);
  v3 |= 0x8000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 16) = result;
  v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 4) == 0)
  {
LABEL_18:
    if ((v2 & 0x10) == 0)
      goto LABEL_19;
    goto LABEL_42;
  }
LABEL_41:
  result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 3) = result;
  v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x10) == 0)
  {
LABEL_19:
    if ((v2 & 0x200) == 0)
      goto LABEL_20;
    goto LABEL_43;
  }
LABEL_42:
  result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 5) = result;
  v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x200) == 0)
  {
LABEL_20:
    if ((v2 & 0x2000) == 0)
      goto LABEL_21;
    goto LABEL_44;
  }
LABEL_43:
  result = *((double *)a2 + 10);
  v3 |= 0x200u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 10) = result;
  v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x2000) == 0)
  {
LABEL_21:
    if ((v2 & 0x1000) == 0)
      goto LABEL_22;
    goto LABEL_45;
  }
LABEL_44:
  result = *((double *)a2 + 14);
  v3 |= 0x2000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 14) = result;
  v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x1000) == 0)
  {
LABEL_22:
    if ((v2 & 0x4000) == 0)
      goto LABEL_23;
    goto LABEL_46;
  }
LABEL_45:
  result = *((double *)a2 + 13);
  v3 |= 0x1000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 13) = result;
  v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x4000) == 0)
  {
LABEL_23:
    if ((v2 & 0x80000) == 0)
      goto LABEL_24;
    goto LABEL_47;
  }
LABEL_46:
  result = *((double *)a2 + 15);
  v3 |= 0x4000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 15) = result;
  v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x80000) == 0)
  {
LABEL_24:
    if ((v2 & 0x400000) == 0)
      goto LABEL_25;
    goto LABEL_48;
  }
LABEL_47:
  result = *((double *)a2 + 20);
  v3 |= 0x80000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 20) = result;
  v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x400000) == 0)
  {
LABEL_25:
    if ((v2 & 0x40000) == 0)
      goto LABEL_26;
    goto LABEL_49;
  }
LABEL_48:
  result = *((double *)a2 + 23);
  v3 |= 0x400000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 23) = result;
  v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x40000) == 0)
  {
LABEL_26:
    if ((v2 & 0x20000) == 0)
      goto LABEL_27;
    goto LABEL_50;
  }
LABEL_49:
  result = *((double *)a2 + 19);
  v3 |= 0x40000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 19) = result;
  v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x20000) == 0)
  {
LABEL_27:
    if ((v2 & 0x100) == 0)
      goto LABEL_28;
    goto LABEL_51;
  }
LABEL_50:
  result = *((double *)a2 + 18);
  v3 |= 0x20000u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 18) = result;
  v2 = *((_DWORD *)a2 + 52);
  if ((v2 & 0x100) == 0)
  {
LABEL_28:
    if ((v2 & 2) == 0)
      return result;
LABEL_52:
    result = *((double *)a2 + 2);
    *((_DWORD *)this + 52) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
LABEL_51:
  result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_DWORD *)this + 52) = v3;
  *((double *)this + 9) = result;
  if ((*((_DWORD *)a2 + 52) & 2) != 0)
    goto LABEL_52;
  return result;
}

CMMsl *CMMsl::RunningVerticalOscillationSignals::operator=(CMMsl *a1, const CMMsl::RunningVerticalOscillationSignals *a2)
{
  CMMsl::RunningVerticalOscillationSignals *v3;
  _BYTE v5[216];

  if (a1 != a2)
  {
    CMMsl::RunningVerticalOscillationSignals::RunningVerticalOscillationSignals((CMMsl::RunningVerticalOscillationSignals *)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningVerticalOscillationSignals *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::RunningVerticalOscillationSignals *a2, CMMsl::RunningVerticalOscillationSignals *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double result;

  v3 = *((_DWORD *)this + 52);
  *((_DWORD *)this + 52) = *((_DWORD *)a2 + 52);
  *((_DWORD *)a2 + 52) = v3;
  v4 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v4;
  v5 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v5;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  v7 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = *((_QWORD *)a2 + 24);
  *((_QWORD *)a2 + 24) = v7;
  v8 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v8;
  v9 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v9;
  v10 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = *((_QWORD *)a2 + 25);
  *((_QWORD *)a2 + 25) = v10;
  v11 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v11;
  v12 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v12;
  v13 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
  *((_QWORD *)a2 + 21) = v13;
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v14;
  v15 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = *((_QWORD *)a2 + 22);
  *((_QWORD *)a2 + 22) = v15;
  v16 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v16;
  v17 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v17;
  v18 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v18;
  v19 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v19;
  v20 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v20;
  v21 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v21;
  v22 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v22;
  v23 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 20) = v23;
  v24 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = *((_QWORD *)a2 + 23);
  *((_QWORD *)a2 + 23) = v24;
  v25 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v25;
  v26 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v26;
  v27 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v27;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::RunningVerticalOscillationSignals::RunningVerticalOscillationSignals(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_1003541C0;
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_DWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

CMMsl *CMMsl::RunningVerticalOscillationSignals::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::RunningVerticalOscillationSignals *v3;
  _BYTE v5[216];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::RunningVerticalOscillationSignals::RunningVerticalOscillationSignals((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::RunningVerticalOscillationSignals *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::RunningVerticalOscillationSignals::formatText(CMMsl::RunningVerticalOscillationSignals *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "acceleration", *((double *)this + 1));
    v5 = *((_DWORD *)this + 52);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_30;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "centerOfMassAccelAmplitude", *((double *)this + 2));
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "centerOfMassAccelMax", *((double *)this + 3));
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "centripetalAccelMeanY", *((double *)this + 4));
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "centripetalAccelMeanZ", *((double *)this + 5));
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "height", *((double *)this + 6));
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "position", *((double *)this + 7));
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "rotationProjectedGravityAmplitude", *((double *)this + 8));
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "rotationRateMean", *((double *)this + 9));
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "rotationRateMeanX", *((double *)this + 10));
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 11));
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "strideLengthCadence", *((double *)this + 12));
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "swingAccelAmplitudeY", *((double *)this + 13));
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "swingAccelAmplitudeZ", *((double *)this + 14));
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "swingAccelMaxY", *((double *)this + 15));
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "swingAccelMaxZ", *((double *)this + 16));
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 17));
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "userAccelAmplitudeZ", *((double *)this + 18));
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "userAccelMaxX", *((double *)this + 19));
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "userAccelMaxY", *((double *)this + 20));
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "userAccelMean", *((double *)this + 21));
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "userAccelMeanY", *((double *)this + 22));
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v5 & 0x800000) == 0)
      goto LABEL_25;
LABEL_51:
    PB::TextFormatter::format(a2, "velocity", *((double *)this + 24));
    if ((*((_DWORD *)this + 52) & 0x1000000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_26;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "userAccelProjectedGravityAmplitudeCadence", *((double *)this + 23));
  v5 = *((_DWORD *)this + 52);
  if ((v5 & 0x800000) != 0)
    goto LABEL_51;
LABEL_25:
  if ((v5 & 0x1000000) != 0)
LABEL_26:
    PB::TextFormatter::format(a2, "weight", *((double *)this + 25));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::RunningVerticalOscillationSignals::readFrom(CMMsl::RunningVerticalOscillationSignals *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_DWORD *)this + 52) |= 0x400u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_96;
          *((_QWORD *)this + 11) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_100;
        case 2u:
          *((_DWORD *)this + 52) |= 0x10000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_96;
          *((_QWORD *)this + 17) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_100;
        case 3u:
          *((_DWORD *)this + 52) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_96;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_100;
        case 4u:
          *((_DWORD *)this + 52) |= 0x800000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_96;
          *((_QWORD *)this + 24) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_100;
        case 5u:
          *((_DWORD *)this + 52) |= 0x40u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_96;
          *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_100;
        case 6u:
          *((_DWORD *)this + 52) |= 0x800u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_96;
          *((_QWORD *)this + 12) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_100;
        case 7u:
          *((_DWORD *)this + 52) |= 0x1000000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_96;
          *((_QWORD *)this + 25) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_100;
        case 8u:
          *((_DWORD *)this + 52) |= 0x20u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_96;
          *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_100;
        case 9u:
          *((_DWORD *)this + 52) |= 0x80u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_96;
          *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_100;
        case 0xAu:
          *((_DWORD *)this + 52) |= 0x100000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_96;
          *((_QWORD *)this + 21) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_100;
        case 0xBu:
          *((_DWORD *)this + 52) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_96;
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_100;
        case 0xCu:
          *((_DWORD *)this + 52) |= 0x200000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_96;
          *((_QWORD *)this + 22) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_100;
        case 0xDu:
          *((_DWORD *)this + 52) |= 0x8000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_96;
          *((_QWORD *)this + 16) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_100;
        case 0xEu:
          *((_DWORD *)this + 52) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_96;
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_100;
        case 0xFu:
          *((_DWORD *)this + 52) |= 0x10u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_96;
          *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_100;
        case 0x10u:
          *((_DWORD *)this + 52) |= 0x200u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_96;
          *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_100;
        case 0x11u:
          *((_DWORD *)this + 52) |= 0x2000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_96;
          *((_QWORD *)this + 14) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_100;
        case 0x12u:
          *((_DWORD *)this + 52) |= 0x1000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_96;
          *((_QWORD *)this + 13) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_100;
        case 0x13u:
          *((_DWORD *)this + 52) |= 0x4000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_96;
          *((_QWORD *)this + 15) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_100;
        case 0x14u:
          *((_DWORD *)this + 52) |= 0x80000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_96;
          *((_QWORD *)this + 20) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_100;
        case 0x15u:
          *((_DWORD *)this + 52) |= 0x400000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_96;
          *((_QWORD *)this + 23) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_100;
        case 0x16u:
          *((_DWORD *)this + 52) |= 0x40000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_96;
          *((_QWORD *)this + 19) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_100;
        case 0x17u:
          *((_DWORD *)this + 52) |= 0x20000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_96;
          *((_QWORD *)this + 18) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_100;
        case 0x18u:
          *((_DWORD *)this + 52) |= 0x100u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_96;
          *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_100;
        case 0x19u:
          *((_DWORD *)this + 52) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_100:
            v2 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v2;
          }
          else
          {
LABEL_96:
            *((_BYTE *)a2 + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::RunningVerticalOscillationSignals::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 208);
  if ((v4 & 0x400) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 88), 1u);
    v4 = *(_DWORD *)(v3 + 208);
    if ((v4 & 0x10000) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_29;
    }
  }
  else if ((v4 & 0x10000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 136), 2u);
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x800000) == 0)
      goto LABEL_5;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 3u);
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x800000) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(double *)(v3 + 192), 4u);
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x800) == 0)
      goto LABEL_7;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 5u);
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x800) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_8;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(double *)(v3 + 96), 6u);
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(double *)(v3 + 200), 7u);
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x20) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 8u);
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x100000) == 0)
      goto LABEL_11;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 9u);
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x100000) == 0)
  {
LABEL_11:
    if ((v4 & 8) == 0)
      goto LABEL_12;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(double *)(v3 + 168), 0xAu);
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 8) == 0)
  {
LABEL_12:
    if ((v4 & 0x200000) == 0)
      goto LABEL_13;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 0xBu);
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x200000) == 0)
  {
LABEL_13:
    if ((v4 & 0x8000) == 0)
      goto LABEL_14;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 176), 0xCu);
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x8000) == 0)
  {
LABEL_14:
    if ((v4 & 4) == 0)
      goto LABEL_15;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 128), 0xDu);
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 4) == 0)
  {
LABEL_15:
    if ((v4 & 0x10) == 0)
      goto LABEL_16;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 0xEu);
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x10) == 0)
  {
LABEL_16:
    if ((v4 & 0x200) == 0)
      goto LABEL_17;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 0xFu);
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x200) == 0)
  {
LABEL_17:
    if ((v4 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(double *)(v3 + 80), 0x10u);
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x2000) == 0)
  {
LABEL_18:
    if ((v4 & 0x1000) == 0)
      goto LABEL_19;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(double *)(v3 + 112), 0x11u);
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x1000) == 0)
  {
LABEL_19:
    if ((v4 & 0x4000) == 0)
      goto LABEL_20;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(double *)(v3 + 104), 0x12u);
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x4000) == 0)
  {
LABEL_20:
    if ((v4 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(double *)(v3 + 120), 0x13u);
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x80000) == 0)
  {
LABEL_21:
    if ((v4 & 0x400000) == 0)
      goto LABEL_22;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(double *)(v3 + 160), 0x14u);
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x400000) == 0)
  {
LABEL_22:
    if ((v4 & 0x40000) == 0)
      goto LABEL_23;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(double *)(v3 + 184), 0x15u);
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x40000) == 0)
  {
LABEL_23:
    if ((v4 & 0x20000) == 0)
      goto LABEL_24;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(double *)(v3 + 152), 0x16u);
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x20000) == 0)
  {
LABEL_24:
    if ((v4 & 0x100) == 0)
      goto LABEL_25;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(double *)(v3 + 144), 0x17u);
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x100) == 0)
  {
LABEL_25:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 16), 0x19u);
  }
LABEL_50:
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 0x18u);
  if ((*(_DWORD *)(v3 + 208) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16), 0x19u);
  return this;
}

uint64_t CMMsl::RunningVerticalOscillationSignals::hash_value(CMMsl::RunningVerticalOscillationSignals *this)
{
  int v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;

  v1 = *((_DWORD *)this + 52);
  if ((v1 & 0x400) == 0)
  {
    v2 = 0.0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_3;
LABEL_78:
    v3 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_6;
LABEL_79:
    v4 = 0.0;
    if ((v1 & 0x800000) != 0)
      goto LABEL_9;
LABEL_80:
    v5 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_12;
LABEL_81:
    v6 = 0.0;
    if ((v1 & 0x800) != 0)
      goto LABEL_15;
LABEL_82:
    v7 = 0.0;
    if ((v1 & 0x1000000) != 0)
      goto LABEL_18;
LABEL_83:
    v8 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_21;
LABEL_84:
    v9 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_24;
LABEL_85:
    v10 = 0.0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_27;
LABEL_86:
    v11 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_30;
LABEL_87:
    v12 = 0.0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_33;
LABEL_88:
    v13 = 0.0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_36;
LABEL_89:
    v14 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_39;
LABEL_90:
    v15 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_42;
LABEL_91:
    v16 = 0.0;
    if ((v1 & 0x200) != 0)
      goto LABEL_45;
LABEL_92:
    v17 = 0.0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_48;
LABEL_93:
    v18 = 0.0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_51;
LABEL_94:
    v19 = 0.0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_54;
LABEL_95:
    v20 = 0.0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_57;
LABEL_96:
    v21 = 0.0;
    if ((v1 & 0x400000) != 0)
      goto LABEL_60;
LABEL_97:
    v22 = 0.0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_63;
LABEL_98:
    v23 = 0.0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_66;
LABEL_99:
    v24 = 0.0;
    if ((v1 & 0x100) != 0)
      goto LABEL_69;
    goto LABEL_100;
  }
  v2 = *((double *)this + 11);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_78;
LABEL_3:
  v3 = *((double *)this + 17);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_79;
LABEL_6:
  v4 = *((double *)this + 1);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 0x800000) == 0)
    goto LABEL_80;
LABEL_9:
  v5 = *((double *)this + 24);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 0x40) == 0)
    goto LABEL_81;
LABEL_12:
  v6 = *((double *)this + 7);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 0x800) == 0)
    goto LABEL_82;
LABEL_15:
  v7 = *((double *)this + 12);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v1 & 0x1000000) == 0)
    goto LABEL_83;
LABEL_18:
  v8 = *((double *)this + 25);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_84;
LABEL_21:
  v9 = *((double *)this + 6);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((v1 & 0x80) == 0)
    goto LABEL_85;
LABEL_24:
  v10 = *((double *)this + 8);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((v1 & 0x100000) == 0)
    goto LABEL_86;
LABEL_27:
  v11 = *((double *)this + 21);
  if (v11 == 0.0)
    v11 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_87;
LABEL_30:
  v12 = *((double *)this + 4);
  if (v12 == 0.0)
    v12 = 0.0;
  if ((v1 & 0x200000) == 0)
    goto LABEL_88;
LABEL_33:
  v13 = *((double *)this + 22);
  if (v13 == 0.0)
    v13 = 0.0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_89;
LABEL_36:
  v14 = *((double *)this + 16);
  if (v14 == 0.0)
    v14 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_90;
LABEL_39:
  v15 = *((double *)this + 3);
  if (v15 == 0.0)
    v15 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_91;
LABEL_42:
  v16 = *((double *)this + 5);
  if (v16 == 0.0)
    v16 = 0.0;
  if ((v1 & 0x200) == 0)
    goto LABEL_92;
LABEL_45:
  v17 = *((double *)this + 10);
  if (v17 == 0.0)
    v17 = 0.0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_93;
LABEL_48:
  v18 = *((double *)this + 14);
  if (v18 == 0.0)
    v18 = 0.0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_94;
LABEL_51:
  v19 = *((double *)this + 13);
  if (v19 == 0.0)
    v19 = 0.0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_95;
LABEL_54:
  v20 = *((double *)this + 15);
  if (v20 == 0.0)
    v20 = 0.0;
  if ((v1 & 0x80000) == 0)
    goto LABEL_96;
LABEL_57:
  v21 = *((double *)this + 20);
  if (v21 == 0.0)
    v21 = 0.0;
  if ((v1 & 0x400000) == 0)
    goto LABEL_97;
LABEL_60:
  v22 = *((double *)this + 23);
  if (v22 == 0.0)
    v22 = 0.0;
  if ((v1 & 0x40000) == 0)
    goto LABEL_98;
LABEL_63:
  v23 = *((double *)this + 19);
  if (v23 == 0.0)
    v23 = 0.0;
  if ((v1 & 0x20000) == 0)
    goto LABEL_99;
LABEL_66:
  v24 = *((double *)this + 18);
  if (v24 == 0.0)
    v24 = 0.0;
  if ((v1 & 0x100) != 0)
  {
LABEL_69:
    v25 = *((double *)this + 9);
    if (v25 == 0.0)
      v25 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_72;
LABEL_101:
    v26 = 0.0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ *(_QWORD *)&v15 ^ *(_QWORD *)&v16 ^ *(_QWORD *)&v17 ^ *(_QWORD *)&v18 ^ *(_QWORD *)&v19 ^ *(_QWORD *)&v20 ^ *(_QWORD *)&v21 ^ *(_QWORD *)&v22 ^ *(_QWORD *)&v23 ^ *(_QWORD *)&v24 ^ *(_QWORD *)&v25 ^ *(_QWORD *)&v26;
  }
LABEL_100:
  v25 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_101;
LABEL_72:
  v26 = *((double *)this + 2);
  if (v26 == 0.0)
    v26 = 0.0;
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ *(_QWORD *)&v15 ^ *(_QWORD *)&v16 ^ *(_QWORD *)&v17 ^ *(_QWORD *)&v18 ^ *(_QWORD *)&v19 ^ *(_QWORD *)&v20 ^ *(_QWORD *)&v21 ^ *(_QWORD *)&v22 ^ *(_QWORD *)&v23 ^ *(_QWORD *)&v24 ^ *(_QWORD *)&v25 ^ *(_QWORD *)&v26;
}

uint64_t CMMsl::SMEstimatedTimeOfArrival::SMEstimatedTimeOfArrival(uint64_t this)
{
  *(_QWORD *)this = off_1003541F8;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003541F8;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

void CMMsl::SMEstimatedTimeOfArrival::~SMEstimatedTimeOfArrival(CMMsl::SMEstimatedTimeOfArrival *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::SMEstimatedTimeOfArrival::SMEstimatedTimeOfArrival(uint64_t this, const CMMsl::SMEstimatedTimeOfArrival *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  *(_QWORD *)this = off_1003541F8;
  *(_DWORD *)(this + 36) = 0;
  v2 = *((_BYTE *)a2 + 36);
  if ((v2 & 4) != 0)
  {
    v4 = *((_QWORD *)a2 + 3);
    v3 = 4;
    *(_BYTE *)(this + 36) = 4;
    *(_QWORD *)(this + 24) = v4;
    v2 = *((_BYTE *)a2 + 36);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 36) & 1) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 1);
    v3 |= 1u;
    *(_BYTE *)(this + 36) = v3;
    *(_QWORD *)(this + 8) = v5;
    v2 = *((_BYTE *)a2 + 36);
  }
LABEL_6:
  if ((v2 & 2) == 0)
  {
    if ((v2 & 8) == 0)
      return this;
LABEL_10:
    v7 = *((_DWORD *)a2 + 8);
    *(_BYTE *)(this + 36) = v3 | 8;
    *(_DWORD *)(this + 32) = v7;
    return this;
  }
  v6 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_BYTE *)(this + 36) = v3;
  *(_QWORD *)(this + 16) = v6;
  if ((*((_BYTE *)a2 + 36) & 8) != 0)
    goto LABEL_10;
  return this;
}

uint64_t CMMsl::SMEstimatedTimeOfArrival::operator=(uint64_t a1, const CMMsl::SMEstimatedTimeOfArrival *a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[8];
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  if ((const CMMsl::SMEstimatedTimeOfArrival *)a1 != a2)
  {
    CMMsl::SMEstimatedTimeOfArrival::SMEstimatedTimeOfArrival((uint64_t)v7, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v3;
    *(_QWORD *)&v3 = v10;
    v4 = *(_QWORD *)(a1 + 24);
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 32) = v3;
    v9 = v4;
    v10 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SMEstimatedTimeOfArrival *a2, CMMsl::SMEstimatedTimeOfArrival *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  double result;
  int v7;

  v3 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  v7 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v7;
  return result;
}

double CMMsl::SMEstimatedTimeOfArrival::SMEstimatedTimeOfArrival(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_1003541F8;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_1003541F8;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return result;
}

uint64_t CMMsl::SMEstimatedTimeOfArrival::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  void (**v8)(CMMsl::SMEstimatedTimeOfArrival *__hidden);
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v8 = off_1003541F8;
    v3 = *(_QWORD *)(a2 + 24);
    v4 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 36) = 0;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    v9 = v5;
    *(_QWORD *)&v5 = *(_QWORD *)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 24) = v3;
    *(_QWORD *)(a1 + 32) = v4;
    v10 = v5;
    v11 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::SMEstimatedTimeOfArrival::formatText(CMMsl::SMEstimatedTimeOfArrival *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 36);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "calculatedArrival", *((double *)this + 1));
    v5 = *((_BYTE *)this + 36);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "originalArrival", *((double *)this + 2));
      if ((*((_BYTE *)this + 36) & 4) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 36) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "motionState", *((_DWORD *)this + 8));
  v5 = *((_BYTE *)this + 36);
  if ((v5 & 2) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 4) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 3));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SMEstimatedTimeOfArrival::readFrom(CMMsl::SMEstimatedTimeOfArrival *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 36) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_32;
              *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_48;
            case 2u:
              *((_BYTE *)this + 36) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_32;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_48;
            case 3u:
              *((_BYTE *)this + 36) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_48:
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_32:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_54;
            case 4u:
              *((_BYTE *)this + 36) |= 8u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_53;
                  }
                  v29 = v21++;
                  v30 = *(_BYTE *)(v22 + v29);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_52:
                    v2 = v29 + 1;
                    goto LABEL_53;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_52;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_53;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_53:
              *((_DWORD *)this + 8) = v25;
LABEL_54:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_54;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::SMEstimatedTimeOfArrival::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 36);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24), 1u);
    v4 = *(_BYTE *)(v3 + 36);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 36) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 2u);
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 4u);
  }
LABEL_8:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
  if ((*(_BYTE *)(v3 + 36) & 8) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 4u);
  return this;
}

BOOL CMMsl::SMEstimatedTimeOfArrival::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 36) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 36) & 8) == 0;
  if ((*(_BYTE *)(a1 + 36) & 8) != 0)
    return (*(_BYTE *)(a2 + 36) & 8) != 0 && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
  return v2;
}

uint64_t CMMsl::SMEstimatedTimeOfArrival::hash_value(CMMsl::SMEstimatedTimeOfArrival *this)
{
  double v1;
  double v2;
  double v3;
  uint64_t v4;

  if ((*((_BYTE *)this + 36) & 4) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 36) & 1) != 0)
      goto LABEL_3;
LABEL_13:
    v2 = 0.0;
    if ((*((_BYTE *)this + 36) & 2) != 0)
      goto LABEL_6;
    goto LABEL_14;
  }
  v1 = *((double *)this + 3);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 36) & 1) == 0)
    goto LABEL_13;
LABEL_3:
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 36) & 2) != 0)
  {
LABEL_6:
    v3 = *((double *)this + 2);
    if (v3 == 0.0)
      v3 = 0.0;
    if ((*((_BYTE *)this + 36) & 8) != 0)
      goto LABEL_9;
LABEL_15:
    v4 = 0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ v4;
  }
LABEL_14:
  v3 = 0.0;
  if ((*((_BYTE *)this + 36) & 8) == 0)
    goto LABEL_15;
LABEL_9:
  v4 = *((int *)this + 8);
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ v4;
}

uint64_t CMMsl::SMLastScreenLock::SMLastScreenLock(uint64_t this)
{
  *(_QWORD *)this = off_100354230;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100354230;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void CMMsl::SMLastScreenLock::~SMLastScreenLock(CMMsl::SMLastScreenLock *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::SMLastScreenLock::SMLastScreenLock(CMMsl::SMLastScreenLock *this, const CMMsl::SMLastScreenLock *a2)
{
  char v2;
  double result;

  *(_QWORD *)this = off_100354230;
  *((_DWORD *)this + 6) = 0;
  if ((*((_BYTE *)a2 + 24) & 2) != 0)
  {
    result = *((double *)a2 + 2);
    *((_BYTE *)this + 24) = 2;
    *((double *)this + 2) = result;
    v2 = 3;
    if ((*((_BYTE *)a2 + 24) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*((_BYTE *)a2 + 24) & 1) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 1);
    *((_BYTE *)this + 24) = v2;
    *((double *)this + 1) = result;
  }
  return result;
}

{
  char v2;
  double result;

  *(_QWORD *)this = off_100354230;
  *((_DWORD *)this + 6) = 0;
  if ((*((_BYTE *)a2 + 24) & 2) != 0)
  {
    result = *((double *)a2 + 2);
    *((_BYTE *)this + 24) = 2;
    *((double *)this + 2) = result;
    v2 = 3;
    if ((*((_BYTE *)a2 + 24) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*((_BYTE *)a2 + 24) & 1) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 1);
    *((_BYTE *)this + 24) = v2;
    *((double *)this + 1) = result;
  }
  return result;
}

uint64_t CMMsl::SMLastScreenLock::operator=(uint64_t a1, uint64_t a2, double a3, double a4)
{
  char v5;
  char v6;
  int v7;
  __int128 v8;
  void (**v10)(CMMsl::SMLastScreenLock *__hidden);
  __int128 v11;
  int v12;

  if (a1 != a2)
  {
    v10 = off_100354230;
    v12 = 0;
    v5 = *(_BYTE *)(a2 + 24);
    if ((v5 & 2) != 0)
    {
      a3 = *(double *)(a2 + 16);
      LOBYTE(v12) = 2;
      v6 = 3;
      if ((v5 & 1) != 0)
      {
LABEL_6:
        a4 = *(double *)(a2 + 8);
        LOBYTE(v12) = v6;
      }
    }
    else
    {
      v6 = 1;
      if ((*(_BYTE *)(a2 + 24) & 1) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v12;
    v12 = v7;
    v8 = *(_OWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a4;
    *(double *)(a1 + 16) = a3;
    v11 = v8;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SMLastScreenLock *a2, CMMsl::SMLastScreenLock *a3)
{
  int v3;
  uint64_t v4;
  double result;

  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::SMLastScreenLock::SMLastScreenLock(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100354230;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100354230;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::SMLastScreenLock::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  void (**v7)(CMMsl::SMLastScreenLock *__hidden);
  __int128 v8;
  int v9;

  if (a1 != a2)
  {
    v7 = off_100354230;
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v9 = *(_DWORD *)(a1 + 24);
    v4 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    v8 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::SMLastScreenLock::formatText(CMMsl::SMLastScreenLock *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "lastUnlockDate", *((double *)this + 1));
    v5 = *((_BYTE *)this + 24);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SMLastScreenLock::readFrom(CMMsl::SMLastScreenLock *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 24) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_28;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
      }
      else
      {
        if ((_DWORD)v20 != 1)
        {
          result = PB::Reader::skip(a2, v20, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          goto LABEL_33;
        }
        *((_BYTE *)this + 24) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
        {
LABEL_28:
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_33;
        }
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
      }
      v2 = *((_QWORD *)a2 + 1) + 8;
      *((_QWORD *)a2 + 1) = v2;
LABEL_33:
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::SMLastScreenLock::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 24);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
    v4 = *(_BYTE *)(v3 + 24);
  }
  if ((v4 & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8), 2u);
  return this;
}

BOOL CMMsl::SMLastScreenLock::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 24) & 1) == 0;
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    return (*(_BYTE *)(a2 + 24) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return v2;
}

uint64_t CMMsl::SMLastScreenLock::hash_value(CMMsl::SMLastScreenLock *this)
{
  double v1;
  double v2;

  if ((*((_BYTE *)this + 24) & 2) != 0)
  {
    v1 = *((double *)this + 2);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 24) & 1) != 0)
      goto LABEL_3;
LABEL_9:
    v2 = 0.0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 24) & 1) == 0)
    goto LABEL_9;
LABEL_3:
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1;
}

uint64_t CMMsl::SMLockStateChange::SMLockStateChange(uint64_t this)
{
  *(_QWORD *)this = off_100354268;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100354268;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void CMMsl::SMLockStateChange::~SMLockStateChange(CMMsl::SMLockStateChange *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::SMLockStateChange::SMLockStateChange(CMMsl::SMLockStateChange *this, const CMMsl::SMLockStateChange *a2)
{
  char v2;
  double result;

  *(_QWORD *)this = off_100354268;
  *((_DWORD *)this + 6) = 0;
  if ((*((_BYTE *)a2 + 24) & 2) != 0)
  {
    result = *((double *)a2 + 2);
    *((_BYTE *)this + 24) = 2;
    *((double *)this + 2) = result;
    v2 = 3;
    if ((*((_BYTE *)a2 + 24) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*((_BYTE *)a2 + 24) & 1) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 1);
    *((_BYTE *)this + 24) = v2;
    *((double *)this + 1) = result;
  }
  return result;
}

{
  char v2;
  double result;

  *(_QWORD *)this = off_100354268;
  *((_DWORD *)this + 6) = 0;
  if ((*((_BYTE *)a2 + 24) & 2) != 0)
  {
    result = *((double *)a2 + 2);
    *((_BYTE *)this + 24) = 2;
    *((double *)this + 2) = result;
    v2 = 3;
    if ((*((_BYTE *)a2 + 24) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*((_BYTE *)a2 + 24) & 1) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 1);
    *((_BYTE *)this + 24) = v2;
    *((double *)this + 1) = result;
  }
  return result;
}

uint64_t CMMsl::SMLockStateChange::operator=(uint64_t a1, uint64_t a2, double a3, double a4)
{
  char v5;
  char v6;
  int v7;
  __int128 v8;
  void (**v10)(CMMsl::SMLockStateChange *__hidden);
  __int128 v11;
  int v12;

  if (a1 != a2)
  {
    v10 = off_100354268;
    v12 = 0;
    v5 = *(_BYTE *)(a2 + 24);
    if ((v5 & 2) != 0)
    {
      a3 = *(double *)(a2 + 16);
      LOBYTE(v12) = 2;
      v6 = 3;
      if ((v5 & 1) != 0)
      {
LABEL_6:
        a4 = *(double *)(a2 + 8);
        LOBYTE(v12) = v6;
      }
    }
    else
    {
      v6 = 1;
      if ((*(_BYTE *)(a2 + 24) & 1) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v12;
    v12 = v7;
    v8 = *(_OWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a4;
    *(double *)(a1 + 16) = a3;
    v11 = v8;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SMLockStateChange *a2, CMMsl::SMLockStateChange *a3)
{
  int v3;
  uint64_t v4;
  double result;

  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::SMLockStateChange::SMLockStateChange(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100354268;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100354268;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::SMLockStateChange::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  void (**v7)(CMMsl::SMLockStateChange *__hidden);
  __int128 v8;
  int v9;

  if (a1 != a2)
  {
    v7 = off_100354268;
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v9 = *(_DWORD *)(a1 + 24);
    v4 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    v8 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::SMLockStateChange::formatText(CMMsl::SMLockStateChange *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "stateChangeType", *((double *)this + 1));
    v5 = *((_BYTE *)this + 24);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SMLockStateChange::readFrom(CMMsl::SMLockStateChange *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 24) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_28;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
      }
      else
      {
        if ((_DWORD)v20 != 1)
        {
          result = PB::Reader::skip(a2, v20, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          goto LABEL_33;
        }
        *((_BYTE *)this + 24) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
        {
LABEL_28:
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_33;
        }
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
      }
      v2 = *((_QWORD *)a2 + 1) + 8;
      *((_QWORD *)a2 + 1) = v2;
LABEL_33:
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::SMLockStateChange::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 24);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
    v4 = *(_BYTE *)(v3 + 24);
  }
  if ((v4 & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8), 2u);
  return this;
}

BOOL CMMsl::SMLockStateChange::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 24) & 1) == 0;
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    return (*(_BYTE *)(a2 + 24) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return v2;
}

uint64_t CMMsl::SMLockStateChange::hash_value(CMMsl::SMLockStateChange *this)
{
  double v1;
  double v2;

  if ((*((_BYTE *)this + 24) & 2) != 0)
  {
    v1 = *((double *)this + 2);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 24) & 1) != 0)
      goto LABEL_3;
LABEL_9:
    v2 = 0.0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 24) & 1) == 0)
    goto LABEL_9;
LABEL_3:
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1;
}

uint64_t CMMsl::SMSessionConfiguration::SMSessionConfiguration(uint64_t this)
{
  *(_QWORD *)this = off_1003542A0;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003542A0;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

void CMMsl::SMSessionConfiguration::~SMSessionConfiguration(CMMsl::SMSessionConfiguration *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::SMSessionConfiguration::SMSessionConfiguration(CMMsl::SMSessionConfiguration *this, const CMMsl::SMSessionConfiguration *a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)this = off_1003542A0;
  *((_DWORD *)this + 14) = 0;
  v2 = *((_BYTE *)a2 + 56);
  if ((v2 & 0x10) != 0)
  {
    result = *((double *)a2 + 5);
    v3 = 16;
    *((_BYTE *)this + 56) = 16;
    *((double *)this + 5) = result;
    v2 = *((_BYTE *)a2 + 56);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 56) & 8) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 4);
    v3 |= 8u;
    *((_BYTE *)this + 56) = v3;
    *((double *)this + 4) = result;
    v2 = *((_BYTE *)a2 + 56);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_BYTE *)this + 56) = v3;
    *((double *)this + 2) = result;
    v2 = *((_BYTE *)a2 + 56);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_BYTE *)this + 56) = v3;
  *((double *)this + 3) = result;
  v2 = *((_BYTE *)a2 + 56);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      return result;
LABEL_14:
    result = *((double *)a2 + 6);
    *((_BYTE *)this + 56) = v3 | 0x20;
    *((double *)this + 6) = result;
    return result;
  }
LABEL_13:
  result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_BYTE *)this + 56) = v3;
  *((double *)this + 1) = result;
  if ((*((_BYTE *)a2 + 56) & 0x20) != 0)
    goto LABEL_14;
  return result;
}

uint64_t CMMsl::SMSessionConfiguration::operator=(uint64_t a1, const CMMsl::SMSessionConfiguration *a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;

  if ((const CMMsl::SMSessionConfiguration *)a1 != a2)
  {
    CMMsl::SMSessionConfiguration::SMSessionConfiguration((CMMsl::SMSessionConfiguration *)&v8, a2);
    v3 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v12;
    v12 = v3;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v5;
    v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v11;
    v11 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SMSessionConfiguration *a2, CMMsl::SMSessionConfiguration *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  v3 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v3;
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v4;
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  result = *((double *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((double *)a2 + 6) = result;
  return result;
}

double CMMsl::SMSessionConfiguration::SMSessionConfiguration(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_1003542A0;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 48);
  *(double *)(a1 + 48) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_1003542A0;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 48);
  *(double *)(a1 + 48) = result;
  return result;
}

uint64_t CMMsl::SMSessionConfiguration::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  void (**v9)(CMMsl::SMSessionConfiguration *__hidden);
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;

  if (a1 != a2)
  {
    v9 = off_1003542A0;
    v3 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a2 + 56) = 0;
    v13 = *(_DWORD *)(a1 + 56);
    v11 = *(_OWORD *)(a1 + 24);
    v4 = *(_OWORD *)(a2 + 8);
    v5 = *(_OWORD *)(a2 + 24);
    v10 = *(_OWORD *)(a1 + 8);
    v6 = *(_OWORD *)(a1 + 40);
    v7 = *(_OWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 56) = v3;
    *(_OWORD *)(a1 + 24) = v5;
    *(_OWORD *)(a1 + 8) = v4;
    *(_OWORD *)(a1 + 40) = v7;
    v12 = v6;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::SMSessionConfiguration::formatText(CMMsl::SMSessionConfiguration *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 56);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "destinationHunc", *((double *)this + 1));
    v5 = *((_BYTE *)this + 56);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*((_BYTE *)this + 56) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "destinationLat", *((double *)this + 2));
  v5 = *((_BYTE *)this + 56);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "destinationLon", *((double *)this + 3));
  v5 = *((_BYTE *)this + 56);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(a2, "sessionStartTimestamp", *((double *)this + 5));
    if ((*((_BYTE *)this + 56) & 0x20) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "sessionEndTimestamp", *((double *)this + 4));
  v5 = *((_BYTE *)this + 56);
  if ((v5 & 0x10) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 0x20) != 0)
LABEL_7:
    PB::TextFormatter::format(a2, "transportationType", *((double *)this + 6));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SMSessionConfiguration::readFrom(CMMsl::SMSessionConfiguration *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 56) |= 0x10u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_41;
          *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_43;
        case 2u:
          *((_BYTE *)this + 56) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_41;
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_43;
        case 3u:
          *((_BYTE *)this + 56) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_41;
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_43;
        case 4u:
          *((_BYTE *)this + 56) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_41;
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_43;
        case 5u:
          *((_BYTE *)this + 56) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_41;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_43;
        case 6u:
          *((_BYTE *)this + 56) |= 0x20u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_43:
            v2 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v2;
          }
          else
          {
LABEL_41:
            *((_BYTE *)a2 + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SMSessionConfiguration::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 56);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 40), 1u);
    v4 = *(_BYTE *)(v3 + 56);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(this + 56) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 2u);
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 4u);
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 48), 6u);
  }
LABEL_12:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 5u);
  if ((*(_BYTE *)(v3 + 56) & 0x20) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 48), 6u);
  return this;
}

BOOL CMMsl::SMSessionConfiguration::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 56) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 56) & 0x20) == 0;
  if ((*(_BYTE *)(a1 + 56) & 0x20) != 0)
    return (*(_BYTE *)(a2 + 56) & 0x20) != 0 && *(double *)(a1 + 48) == *(double *)(a2 + 48);
  return v2;
}

uint64_t CMMsl::SMSessionConfiguration::hash_value(CMMsl::SMSessionConfiguration *this)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;

  if ((*((_BYTE *)this + 56) & 0x10) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 56) & 8) != 0)
      goto LABEL_3;
LABEL_21:
    v2 = 0.0;
    if ((*((_BYTE *)this + 56) & 2) != 0)
      goto LABEL_6;
LABEL_22:
    v3 = 0.0;
    if ((*((_BYTE *)this + 56) & 4) != 0)
      goto LABEL_9;
LABEL_23:
    v4 = 0.0;
    if ((*((_BYTE *)this + 56) & 1) != 0)
      goto LABEL_12;
    goto LABEL_24;
  }
  v1 = *((double *)this + 5);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 56) & 8) == 0)
    goto LABEL_21;
LABEL_3:
  v2 = *((double *)this + 4);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 56) & 2) == 0)
    goto LABEL_22;
LABEL_6:
  v3 = *((double *)this + 2);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((*((_BYTE *)this + 56) & 4) == 0)
    goto LABEL_23;
LABEL_9:
  v4 = *((double *)this + 3);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((*((_BYTE *)this + 56) & 1) != 0)
  {
LABEL_12:
    v5 = *((double *)this + 1);
    if (v5 == 0.0)
      v5 = 0.0;
    if ((*((_BYTE *)this + 56) & 0x20) != 0)
      goto LABEL_15;
LABEL_25:
    v6 = 0.0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6;
  }
LABEL_24:
  v5 = 0.0;
  if ((*((_BYTE *)this + 56) & 0x20) == 0)
    goto LABEL_25;
LABEL_15:
  v6 = *((double *)this + 6);
  if (v6 == 0.0)
    v6 = 0.0;
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6;
}

void CMMsl::SPUPlaybackExampleDeviceMotion::~SPUPlaybackExampleDeviceMotion(CMMsl::SPUPlaybackExampleDeviceMotion *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1003542D8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1003542D8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1003542D8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::SPUPlaybackExampleDeviceMotion::SPUPlaybackExampleDeviceMotion(_QWORD *this, const CMMsl::SPUPlaybackExampleDeviceMotion *a2)
{
  *this = off_1003542D8;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::SPUPlaybackExampleDeviceMotion *CMMsl::SPUPlaybackExampleDeviceMotion::operator=(const CMMsl::SPUPlaybackExampleDeviceMotion *a1, const CMMsl::SPUPlaybackExampleDeviceMotion *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::SPUPlaybackExampleDeviceMotion *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::SPUPlaybackExampleDeviceMotion::SPUPlaybackExampleDeviceMotion(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_1003542D8;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::SPUPlaybackExampleDeviceMotion *a2, CMMsl::SPUPlaybackExampleDeviceMotion *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::SPUPlaybackExampleDeviceMotion::SPUPlaybackExampleDeviceMotion(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003542D8;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003542D8;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::SPUPlaybackExampleDeviceMotion::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_1003542D8;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::SPUPlaybackExampleDeviceMotion::formatText(CMMsl::SPUPlaybackExampleDeviceMotion *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SPUPlaybackExampleDeviceMotion::readFrom(CMMsl::SPUPlaybackExampleDeviceMotion *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SPUPlaybackExampleDeviceMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

CMMsl::DeviceMotion *CMMsl::SPUPlaybackExampleDeviceMotion::hash_value(CMMsl::SPUPlaybackExampleDeviceMotion *this)
{
  CMMsl::DeviceMotion *result;

  result = (CMMsl::DeviceMotion *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::DeviceMotion *)CMMsl::DeviceMotion::hash_value(result);
  return result;
}

uint64_t CMMsl::SPUPlaybackExampleDeviceMotion::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

void CMMsl::SPUPlaybackExampleMotionStateUpdate::~SPUPlaybackExampleMotionStateUpdate(CMMsl::SPUPlaybackExampleMotionStateUpdate *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100354310;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100354310;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100354310;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::SPUPlaybackExampleMotionStateUpdate::SPUPlaybackExampleMotionStateUpdate(_QWORD *this, const CMMsl::SPUPlaybackExampleMotionStateUpdate *a2)
{
  *this = off_100354310;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::SPUPlaybackExampleMotionStateUpdate *CMMsl::SPUPlaybackExampleMotionStateUpdate::operator=(const CMMsl::SPUPlaybackExampleMotionStateUpdate *a1, const CMMsl::SPUPlaybackExampleMotionStateUpdate *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::SPUPlaybackExampleMotionStateUpdate *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::SPUPlaybackExampleMotionStateUpdate::SPUPlaybackExampleMotionStateUpdate(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_100354310;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::SPUPlaybackExampleMotionStateUpdate *a2, CMMsl::SPUPlaybackExampleMotionStateUpdate *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::SPUPlaybackExampleMotionStateUpdate::SPUPlaybackExampleMotionStateUpdate(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100354310;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100354310;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::SPUPlaybackExampleMotionStateUpdate::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_100354310;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::SPUPlaybackExampleMotionStateUpdate::formatText(CMMsl::SPUPlaybackExampleMotionStateUpdate *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SPUPlaybackExampleMotionStateUpdate::readFrom(CMMsl::SPUPlaybackExampleMotionStateUpdate *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SPUPlaybackExampleMotionStateUpdate::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

CMMsl::MotionStateUpdate *CMMsl::SPUPlaybackExampleMotionStateUpdate::hash_value(CMMsl::SPUPlaybackExampleMotionStateUpdate *this)
{
  CMMsl::MotionStateUpdate *result;

  result = (CMMsl::MotionStateUpdate *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::MotionStateUpdate *)CMMsl::MotionStateUpdate::hash_value(result);
  return result;
}

uint64_t CMMsl::SPUPlaybackExampleMotionStateUpdate::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

void CMMsl::SafetyCompanionStatus::~SafetyCompanionStatus(CMMsl::SafetyCompanionStatus *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::SafetyCompanionStatus::SafetyCompanionStatus(uint64_t this, const CMMsl::SafetyCompanionStatus *a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)this = off_100354348;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::SafetyCompanionStatus::operator=(uint64_t a1, uint64_t a2)
{
  int v2;
  void (**v4)(CMMsl::SafetyCompanionStatus *__hidden);
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;

  if (a1 != a2)
  {
    v4 = off_100354348;
    v11[0] = off_100354348;
    HIDWORD(v12) = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      v4 = *(void (***)(CMMsl::SafetyCompanionStatus *__hidden))(a2 + 8);
      BYTE4(v12) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v2 = *(_DWORD *)(a2 + 16);
        BYTE4(v12) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = HIDWORD(v12);
    v8 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v11[1] = v8;
    v9 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v2;
    *(_DWORD *)(a1 + 20) = v7;
    v12 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v8[0] = off_100354348;
    v8[1] = v5;
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v4;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::SafetyCompanionStatus *a2, CMMsl::SafetyCompanionStatus *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  return this;
}

uint64_t CMMsl::SafetyCompanionStatus::formatText(CMMsl::SafetyCompanionStatus *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "code", *((_DWORD *)this + 4));
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SafetyCompanionStatus::readFrom(CMMsl::SafetyCompanionStatus *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t result;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)a2 + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v27 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v28 = *(_QWORD *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v31 = 0;
          if (v2 <= v27)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_64;
            }
            v40 = v27++;
            v41 = *(_BYTE *)(v28 + v40);
            *((_QWORD *)a2 + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_63;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v31) = 0;
LABEL_63:
          v3 = v40 + 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v3 = v27 + 1;
            *((_QWORD *)a2 + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v3;
            v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_64:
        *((_DWORD *)this + 4) = v31;
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v34 = 0;
          v35 = 0;
          v25 = 0;
          if (v2 <= v21)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v21)
            {
              v25 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_60;
            }
            v36 = v21++;
            v37 = *(_BYTE *)(v22 + v36);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0)
              break;
            v34 += 7;
            v14 = v35++ > 8;
            if (v14)
            {
              v25 = 0;
              goto LABEL_59;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v25 = 0;
LABEL_59:
          v3 = v36 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v3 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v3;
            v14 = v24++ > 8;
            if (v14)
            {
              v25 = 0;
              break;
            }
          }
        }
LABEL_60:
        *((_QWORD *)this + 1) = v25;
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SafetyCompanionStatus::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 2u);
  return this;
}

uint64_t CMMsl::SafetyCompanionStatus::hash_value(CMMsl::SafetyCompanionStatus *this)
{
  uint64_t v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((_QWORD *)this + 1);
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_5:
    v2 = 0;
    return v2 ^ v1;
  }
  v1 = 0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_5;
LABEL_3:
  v2 = *((int *)this + 4);
  return v2 ^ v1;
}

void CMMsl::SafetyHertzSample::~SafetyHertzSample(CMMsl::SafetyHertzSample *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::SafetyHertzSample::SafetyHertzSample(uint64_t this, const CMMsl::SafetyHertzSample *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;

  *(_QWORD *)this = off_100354380;
  *(_DWORD *)(this + 24) = 0;
  v2 = *((_BYTE *)a2 + 24);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 24) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 24);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 24) & 4) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(_BYTE *)(this + 24) = v3;
    *(_DWORD *)(this + 20) = v5;
    v2 = *((_BYTE *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 24) = v3 | 2;
    *(_DWORD *)(this + 16) = v6;
  }
  return this;
}

uint64_t CMMsl::SafetyHertzSample::operator=(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  void (**v5)(CMMsl::SafetyHertzSample *__hidden);
  char v6;
  char v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  int v13;

  if (a1 != a2)
  {
    v5 = off_100354380;
    v12[0] = off_100354380;
    v13 = 0;
    v6 = *(_BYTE *)(a2 + 24);
    if ((v6 & 1) != 0)
    {
      v5 = *(void (***)(CMMsl::SafetyHertzSample *__hidden))(a2 + 8);
      v7 = 1;
      LOBYTE(v13) = 1;
      if ((v6 & 4) != 0)
      {
LABEL_4:
        v2 = *(_DWORD *)(a2 + 20);
        v7 |= 4u;
        LOBYTE(v13) = v7;
        if ((v6 & 2) != 0)
          goto LABEL_8;
        goto LABEL_9;
      }
    }
    else
    {
      v7 = 0;
      if ((*(_BYTE *)(a2 + 24) & 4) != 0)
        goto LABEL_4;
    }
    if ((v6 & 2) != 0)
    {
LABEL_8:
      v3 = *(_DWORD *)(a2 + 16);
      LOBYTE(v13) = v7 | 2;
    }
LABEL_9:
    v8 = v13;
    v13 = *(_DWORD *)(a1 + 24);
    v9 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v5;
    v12[1] = v9;
    v10 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 20) = v2;
    *(_DWORD *)(a1 + 24) = v8;
    *(_DWORD *)(a1 + 16) = v3;
    v12[2] = v10;
    PB::Base::~Base((PB::Base *)v12);
  }
  return a1;
}

{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];
  int v10;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v10 = *(_DWORD *)(a1 + 24);
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v9[0] = off_100354380;
    v9[1] = v5;
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 24) = v3;
    *(_QWORD *)(a1 + 16) = v7;
    v9[2] = v6;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::SafetyHertzSample *a2, CMMsl::SafetyHertzSample *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  return this;
}

uint64_t CMMsl::SafetyHertzSample::SafetyHertzSample(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = off_100354380;
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  *(_QWORD *)result = off_100354380;
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::SafetyHertzSample::formatText(CMMsl::SafetyHertzSample *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 2) == 0)
  {
    if ((*((_BYTE *)this + 24) & 1) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 1));
    if ((*((_BYTE *)this + 24) & 4) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_4;
  }
  PB::TextFormatter::format(a2, "dramDurationMs", *((_DWORD *)this + 4));
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 1) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "vehicularFlags", *((_DWORD *)this + 5));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SafetyHertzSample::readFrom(CMMsl::SafetyHertzSample *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  uint64_t result;
  char v40;
  unsigned int v41;
  unint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  unint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  unint64_t v50;
  char v51;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)a2 + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((_BYTE *)this + 24) |= 2u;
        v27 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v28 = *(_QWORD *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v44 = 0;
          v45 = 0;
          v31 = 0;
          if (v2 <= v27)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_80;
            }
            v46 = v27++;
            v47 = *(_BYTE *)(v28 + v46);
            *((_QWORD *)a2 + 1) = v27;
            v31 |= (unint64_t)(v47 & 0x7F) << v44;
            if ((v47 & 0x80) == 0)
              break;
            v44 += 7;
            v14 = v45++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_79;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v31) = 0;
LABEL_79:
          v3 = v46 + 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v3 = v27 + 1;
            *((_QWORD *)a2 + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v3;
            v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_80:
        *((_DWORD *)this + 4) = v31;
      }
      else if ((_DWORD)v20 == 2)
      {
        *((_BYTE *)this + 24) |= 4u;
        v33 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v34 = *(_QWORD *)a2;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          v48 = 0;
          v49 = 0;
          v37 = 0;
          if (v2 <= v33)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v33)
            {
              LODWORD(v37) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_85;
            }
            v50 = v33++;
            v51 = *(_BYTE *)(v34 + v50);
            *((_QWORD *)a2 + 1) = v33;
            v37 |= (unint64_t)(v51 & 0x7F) << v48;
            if ((v51 & 0x80) == 0)
              break;
            v48 += 7;
            v14 = v49++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
              goto LABEL_84;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v37) = 0;
LABEL_84:
          v3 = v50 + 1;
        }
        else
        {
          v35 = 0;
          v36 = 0;
          v37 = 0;
          while (1)
          {
            v3 = v33 + 1;
            *((_QWORD *)a2 + 1) = v33 + 1;
            v38 = *(_BYTE *)(v34 + v33);
            v37 |= (unint64_t)(v38 & 0x7F) << v35;
            if ((v38 & 0x80) == 0)
              break;
            v35 += 7;
            v33 = v3;
            v14 = v36++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
              break;
            }
          }
        }
LABEL_85:
        *((_DWORD *)this + 5) = v37;
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 24) |= 1u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v40 = 0;
          v41 = 0;
          v25 = 0;
          if (v2 <= v21)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v21)
            {
              v25 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_75;
            }
            v42 = v21++;
            v43 = *(_BYTE *)(v22 + v42);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v43 & 0x7F) << v40;
            if ((v43 & 0x80) == 0)
              break;
            v40 += 7;
            v14 = v41++ > 8;
            if (v14)
            {
              v25 = 0;
              goto LABEL_74;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v25 = 0;
LABEL_74:
          v3 = v42 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v3 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v3;
            v14 = v24++ > 8;
            if (v14)
            {
              v25 = 0;
              break;
            }
          }
        }
LABEL_75:
        *((_QWORD *)this + 1) = v25;
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SafetyHertzSample::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 24);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        return this;
      return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 3u);
    }
  }
  else if ((*(_BYTE *)(this + 24) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 2u);
  if ((*(_BYTE *)(v3 + 24) & 2) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 3u);
  return this;
}

uint64_t CMMsl::SafetyHertzSample::hash_value(CMMsl::SafetyHertzSample *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if ((*((_BYTE *)this + 24) & 1) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 24) & 4) != 0)
      goto LABEL_3;
LABEL_6:
    v2 = 0;
    if ((*((_BYTE *)this + 24) & 2) != 0)
      goto LABEL_4;
LABEL_7:
    v3 = 0;
    return v2 ^ v1 ^ v3;
  }
  v1 = *((_QWORD *)this + 1);
  if ((*((_BYTE *)this + 24) & 4) == 0)
    goto LABEL_6;
LABEL_3:
  v2 = *((unsigned int *)this + 5);
  if ((*((_BYTE *)this + 24) & 2) == 0)
    goto LABEL_7;
LABEL_4:
  v3 = *((unsigned int *)this + 4);
  return v2 ^ v1 ^ v3;
}

void CMMsl::SafetyRemoteSample::~SafetyRemoteSample(CMMsl::SafetyRemoteSample *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::SafetyRemoteSample::SafetyRemoteSample(uint64_t this, const CMMsl::SafetyRemoteSample *a2)
{
  char v2;
  char v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)this = off_1003543B8;
  *(_DWORD *)(this + 52) = 0;
  v2 = *((_BYTE *)a2 + 52);
  if ((v2 & 0x20) != 0)
  {
    v4 = *((_DWORD *)a2 + 11);
    v3 = 32;
    *(_BYTE *)(this + 52) = 32;
    *(_DWORD *)(this + 44) = v4;
    v2 = *((_BYTE *)a2 + 52);
    if ((v2 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 52) & 0x40) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 12);
    v3 |= 0x40u;
    *(_BYTE *)(this + 52) = v3;
    *(_DWORD *)(this + 48) = v5;
    v2 = *((_BYTE *)a2 + 52);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    v6 = *((_DWORD *)a2 + 10);
    v3 |= 0x10u;
    *(_BYTE *)(this + 52) = v3;
    *(_DWORD *)(this + 40) = v6;
    v2 = *((_BYTE *)a2 + 52);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_BYTE *)(this + 52) = v3;
  *(_QWORD *)(this + 32) = v7;
  v2 = *((_BYTE *)a2 + 52);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  v8 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_BYTE *)(this + 52) = v3;
  *(_QWORD *)(this + 8) = v8;
  v2 = *((_BYTE *)a2 + 52);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0)
      return this;
LABEL_16:
    v10 = *((_QWORD *)a2 + 2);
    *(_BYTE *)(this + 52) = v3 | 2;
    *(_QWORD *)(this + 16) = v10;
    return this;
  }
LABEL_15:
  v9 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *(_BYTE *)(this + 52) = v3;
  *(_QWORD *)(this + 24) = v9;
  if ((*((_BYTE *)a2 + 52) & 2) != 0)
    goto LABEL_16;
  return this;
}

uint64_t CMMsl::SafetyRemoteSample::operator=(uint64_t a1, const CMMsl::SafetyRemoteSample *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  __int128 v9;
  __int128 v10;

  if ((const CMMsl::SafetyRemoteSample *)a1 != a2)
  {
    CMMsl::SafetyRemoteSample::SafetyRemoteSample((uint64_t)v7, a2);
    v3 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v10;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v4;
    v10 = v3;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::SafetyRemoteSample *a2, CMMsl::SafetyRemoteSample *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_DWORD *)(this + 52);
  *(_DWORD *)(this + 52) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v3;
  v4 = *(_DWORD *)(this + 44);
  *(_DWORD *)(this + 44) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  v5 = *(_DWORD *)(this + 48);
  *(_DWORD *)(this + 48) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  v6 = *(_DWORD *)(this + 40);
  *(_DWORD *)(this + 40) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v6;
  v7 = *(_QWORD *)(this + 32);
  *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v7;
  v8 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  v9 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v9;
  v10 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v10;
  return this;
}

uint64_t CMMsl::SafetyRemoteSample::SafetyRemoteSample(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = off_1003543B8;
  *(_DWORD *)(result + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(_DWORD *)(result + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  return result;
}

{
  *(_QWORD *)result = off_1003543B8;
  *(_DWORD *)(result + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(_DWORD *)(result + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::SafetyRemoteSample::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  void (**v9)(CMMsl::SafetyRemoteSample *__hidden);
  __int128 v10;
  __int128 v11;
  __int128 v12;

  if (a1 != a2)
  {
    v9 = off_1003543B8;
    v3 = *(_OWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 52) = 0;
    v4 = *(_OWORD *)(a1 + 40);
    v11 = *(_OWORD *)(a1 + 24);
    v12 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    v6 = *(_OWORD *)(a2 + 8);
    v7 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v3;
    *(_OWORD *)(a1 + 24) = v7;
    *(_OWORD *)(a1 + 8) = v6;
    v10 = v5;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::SafetyRemoteSample::formatText(CMMsl::SafetyRemoteSample *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 52);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "createdAtTimestamp", *((_QWORD *)this + 1));
    v5 = *((_BYTE *)this + 52);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*((_BYTE *)this + 52) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "epochNumber", *((_DWORD *)this + 10));
  v5 = *((_BYTE *)this + 52);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "epochTimestamp", *((_QWORD *)this + 2));
  v5 = *((_BYTE *)this + 52);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "lastRealTriggerTimestamp", *((_QWORD *)this + 3));
  v5 = *((_BYTE *)this + 52);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(a2, "receivedAtTimestamp", *((_QWORD *)this + 4));
    if ((*((_BYTE *)this + 52) & 0x40) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "mode", *((_DWORD *)this + 11));
  v5 = *((_BYTE *)this + 52);
  if ((v5 & 8) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 0x40) != 0)
LABEL_8:
    PB::TextFormatter::format(a2, "sessionNumber", *((_DWORD *)this + 12));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SafetyRemoteSample::readFrom(CMMsl::SafetyRemoteSample *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  char v62;
  uint64_t result;
  char v64;
  unsigned int v65;
  unint64_t v66;
  char v67;
  char v68;
  unsigned int v69;
  unint64_t v70;
  char v71;
  char v72;
  unsigned int v73;
  unint64_t v74;
  char v75;
  char v76;
  unsigned int v77;
  unint64_t v78;
  char v79;
  char v80;
  unsigned int v81;
  unint64_t v82;
  char v83;
  char v84;
  unsigned int v85;
  unint64_t v86;
  char v87;
  char v88;
  unsigned int v89;
  unint64_t v90;
  char v91;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v3 > v2)
          v2 = v3;
        while (v2 != v3)
        {
          v17 = v3 + 1;
          v18 = *(_BYTE *)(v8 + v3);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v3 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v3 + 1;
          *((_QWORD *)a2 + 1) = v3 + 1;
          v13 = *(_BYTE *)(v8 + v3);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v3 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          v20 = v11 >> 3;
          switch((v11 >> 3))
          {
            case 2u:
              *((_BYTE *)this + 52) |= 0x20u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v64 = 0;
                v65 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v3 = *((_QWORD *)a2 + 1);
                else
                  v3 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v3 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_135;
                  }
                  v66 = v21++;
                  v67 = *(_BYTE *)(v22 + v66);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v67 & 0x7F) << v64;
                  if ((v67 & 0x80) == 0)
                    break;
                  v64 += 7;
                  v14 = v65++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
                    goto LABEL_134;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
LABEL_134:
                v3 = v66 + 1;
              }
              else
              {
                v23 = 0;
                v24 = 0;
                v25 = 0;
                do
                {
                  v3 = v21 + 1;
                  *((_QWORD *)a2 + 1) = v21 + 1;
                  v26 = *(_BYTE *)(v22 + v21);
                  v25 |= (unint64_t)(v26 & 0x7F) << v23;
                  if ((v26 & 0x80) == 0)
                    goto LABEL_135;
                  v23 += 7;
                  v21 = v3;
                  v14 = v24++ > 8;
                }
                while (!v14);
                LODWORD(v25) = 0;
              }
LABEL_135:
              *((_DWORD *)this + 11) = v25;
              goto LABEL_166;
            case 3u:
              *((_BYTE *)this + 52) |= 0x40u;
              v33 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v72 = 0;
                v73 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v3 = *((_QWORD *)a2 + 1);
                else
                  v3 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v3 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_145;
                  }
                  v74 = v33++;
                  v75 = *(_BYTE *)(v34 + v74);
                  *((_QWORD *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v75 & 0x7F) << v72;
                  if ((v75 & 0x80) == 0)
                    break;
                  v72 += 7;
                  v14 = v73++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_144:
                    v3 = v74 + 1;
                    goto LABEL_145;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v37) = 0;
                goto LABEL_144;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v3 = v33 + 1;
                *((_QWORD *)a2 + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_145;
                v35 += 7;
                v33 = v3;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_145:
              *((_DWORD *)this + 12) = v37;
              goto LABEL_166;
            case 4u:
              *((_BYTE *)this + 52) |= 0x10u;
              v39 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v40 = *(_QWORD *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v76 = 0;
                v77 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v3 = *((_QWORD *)a2 + 1);
                else
                  v3 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v3 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_150;
                  }
                  v78 = v39++;
                  v79 = *(_BYTE *)(v40 + v78);
                  *((_QWORD *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v79 & 0x7F) << v76;
                  if ((v79 & 0x80) == 0)
                    break;
                  v76 += 7;
                  v14 = v77++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_149:
                    v3 = v78 + 1;
                    goto LABEL_150;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v43) = 0;
                goto LABEL_149;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v3 = v39 + 1;
                *((_QWORD *)a2 + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_150;
                v41 += 7;
                v39 = v3;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_150:
              *((_DWORD *)this + 10) = v43;
              goto LABEL_166;
            case 5u:
              *((_BYTE *)this + 52) |= 8u;
              v45 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v46 = *(_QWORD *)a2;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v80 = 0;
                v81 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v3 = *((_QWORD *)a2 + 1);
                else
                  v3 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v3 == v45)
                  {
                    v49 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_155;
                  }
                  v82 = v45++;
                  v83 = *(_BYTE *)(v46 + v82);
                  *((_QWORD *)a2 + 1) = v45;
                  v49 |= (unint64_t)(v83 & 0x7F) << v80;
                  if ((v83 & 0x80) == 0)
                    break;
                  v80 += 7;
                  v14 = v81++ > 8;
                  if (v14)
                  {
                    v49 = 0;
LABEL_154:
                    v3 = v82 + 1;
                    goto LABEL_155;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v49 = 0;
                goto LABEL_154;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v3 = v45 + 1;
                *((_QWORD *)a2 + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_155;
                v47 += 7;
                v45 = v3;
                v14 = v48++ > 8;
              }
              while (!v14);
              v49 = 0;
LABEL_155:
              *((_QWORD *)this + 4) = v49;
              goto LABEL_166;
            case 6u:
              *((_BYTE *)this + 52) |= 1u;
              v51 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v52 = *(_QWORD *)a2;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                v84 = 0;
                v85 = 0;
                v55 = 0;
                if (v2 <= v51)
                  v3 = *((_QWORD *)a2 + 1);
                else
                  v3 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v3 == v51)
                  {
                    v55 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_160;
                  }
                  v86 = v51++;
                  v87 = *(_BYTE *)(v52 + v86);
                  *((_QWORD *)a2 + 1) = v51;
                  v55 |= (unint64_t)(v87 & 0x7F) << v84;
                  if ((v87 & 0x80) == 0)
                    break;
                  v84 += 7;
                  v14 = v85++ > 8;
                  if (v14)
                  {
                    v55 = 0;
LABEL_159:
                    v3 = v86 + 1;
                    goto LABEL_160;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v55 = 0;
                goto LABEL_159;
              }
              v53 = 0;
              v54 = 0;
              v55 = 0;
              do
              {
                v3 = v51 + 1;
                *((_QWORD *)a2 + 1) = v51 + 1;
                v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0)
                  goto LABEL_160;
                v53 += 7;
                v51 = v3;
                v14 = v54++ > 8;
              }
              while (!v14);
              v55 = 0;
LABEL_160:
              *((_QWORD *)this + 1) = v55;
              goto LABEL_166;
            default:
              if ((_DWORD)v20 == 100)
              {
                *((_BYTE *)this + 52) |= 4u;
                v57 = *((_QWORD *)a2 + 1);
                v2 = *((_QWORD *)a2 + 2);
                v58 = *(_QWORD *)a2;
                if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
                {
                  v88 = 0;
                  v89 = 0;
                  v61 = 0;
                  if (v2 <= v57)
                    v3 = *((_QWORD *)a2 + 1);
                  else
                    v3 = *((_QWORD *)a2 + 2);
                  while (1)
                  {
                    if (v3 == v57)
                    {
                      v61 = 0;
                      *((_BYTE *)a2 + 24) = 1;
                      goto LABEL_165;
                    }
                    v90 = v57++;
                    v91 = *(_BYTE *)(v58 + v90);
                    *((_QWORD *)a2 + 1) = v57;
                    v61 |= (unint64_t)(v91 & 0x7F) << v88;
                    if ((v91 & 0x80) == 0)
                      break;
                    v88 += 7;
                    v14 = v89++ > 8;
                    if (v14)
                    {
                      v61 = 0;
                      goto LABEL_164;
                    }
                  }
                  if (*((_BYTE *)a2 + 24))
                    v61 = 0;
LABEL_164:
                  v3 = v90 + 1;
                }
                else
                {
                  v59 = 0;
                  v60 = 0;
                  v61 = 0;
                  while (1)
                  {
                    v3 = v57 + 1;
                    *((_QWORD *)a2 + 1) = v57 + 1;
                    v62 = *(_BYTE *)(v58 + v57);
                    v61 |= (unint64_t)(v62 & 0x7F) << v59;
                    if ((v62 & 0x80) == 0)
                      break;
                    v59 += 7;
                    v57 = v3;
                    v14 = v60++ > 8;
                    if (v14)
                    {
                      v61 = 0;
                      break;
                    }
                  }
                }
LABEL_165:
                *((_QWORD *)this + 3) = v61;
              }
              else if ((_DWORD)v20 == 101)
              {
                *((_BYTE *)this + 52) |= 2u;
                v27 = *((_QWORD *)a2 + 1);
                v2 = *((_QWORD *)a2 + 2);
                v28 = *(_QWORD *)a2;
                if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
                {
                  v68 = 0;
                  v69 = 0;
                  v31 = 0;
                  if (v2 <= v27)
                    v3 = *((_QWORD *)a2 + 1);
                  else
                    v3 = *((_QWORD *)a2 + 2);
                  while (1)
                  {
                    if (v3 == v27)
                    {
                      v31 = 0;
                      *((_BYTE *)a2 + 24) = 1;
                      goto LABEL_140;
                    }
                    v70 = v27++;
                    v71 = *(_BYTE *)(v28 + v70);
                    *((_QWORD *)a2 + 1) = v27;
                    v31 |= (unint64_t)(v71 & 0x7F) << v68;
                    if ((v71 & 0x80) == 0)
                      break;
                    v68 += 7;
                    v14 = v69++ > 8;
                    if (v14)
                    {
                      v31 = 0;
                      goto LABEL_139;
                    }
                  }
                  if (*((_BYTE *)a2 + 24))
                    v31 = 0;
LABEL_139:
                  v3 = v70 + 1;
                }
                else
                {
                  v29 = 0;
                  v30 = 0;
                  v31 = 0;
                  while (1)
                  {
                    v3 = v27 + 1;
                    *((_QWORD *)a2 + 1) = v27 + 1;
                    v32 = *(_BYTE *)(v28 + v27);
                    v31 |= (unint64_t)(v32 & 0x7F) << v29;
                    if ((v32 & 0x80) == 0)
                      break;
                    v29 += 7;
                    v27 = v3;
                    v14 = v30++ > 8;
                    if (v14)
                    {
                      v31 = 0;
                      break;
                    }
                  }
                }
LABEL_140:
                *((_QWORD *)this + 2) = v31;
              }
              else
              {
                result = PB::Reader::skip(a2, v20, v11 & 7, 0);
                if (!(_DWORD)result)
                  return result;
                v3 = *((_QWORD *)a2 + 1);
                v2 = *((_QWORD *)a2 + 2);
              }
LABEL_166:
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v3 >= v2 || *((_BYTE *)a2 + 24))
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::SafetyRemoteSample::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 52);
  if ((v4 & 0x20) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 44), 2u);
    v4 = *(_BYTE *)(v3 + 52);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(this + 52) & 0x40) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 3u);
  v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 4u);
  v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 32), 5u);
  v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 8), 6u);
  v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 16), 0x65u);
  }
LABEL_14:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 24), 0x64u);
  if ((*(_BYTE *)(v3 + 52) & 2) != 0)
    return PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 16), 0x65u);
  return this;
}

uint64_t CMMsl::SafetyRemoteSample::hash_value(CMMsl::SafetyRemoteSample *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((*((_BYTE *)this + 52) & 0x20) != 0)
  {
    v1 = *((unsigned int *)this + 11);
    if ((*((_BYTE *)this + 52) & 0x40) != 0)
    {
LABEL_3:
      v2 = *((unsigned int *)this + 12);
      if ((*((_BYTE *)this + 52) & 0x10) != 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 52) & 0x40) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 52) & 0x10) != 0)
  {
LABEL_4:
    v3 = *((unsigned int *)this + 10);
    if ((*((_BYTE *)this + 52) & 8) != 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  v3 = 0;
  if ((*((_BYTE *)this + 52) & 8) != 0)
  {
LABEL_5:
    v4 = *((_QWORD *)this + 4);
    if ((*((_BYTE *)this + 52) & 1) != 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  v4 = 0;
  if ((*((_BYTE *)this + 52) & 1) != 0)
  {
LABEL_6:
    v5 = *((_QWORD *)this + 1);
    if ((*((_BYTE *)this + 52) & 4) != 0)
      goto LABEL_7;
LABEL_14:
    v6 = 0;
    if ((*((_BYTE *)this + 52) & 2) != 0)
      goto LABEL_8;
LABEL_15:
    v7 = 0;
    return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7;
  }
LABEL_13:
  v5 = 0;
  if ((*((_BYTE *)this + 52) & 4) == 0)
    goto LABEL_14;
LABEL_7:
  v6 = *((_QWORD *)this + 3);
  if ((*((_BYTE *)this + 52) & 2) == 0)
    goto LABEL_15;
LABEL_8:
  v7 = *((_QWORD *)this + 2);
  return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7;
}

void CMMsl::SafetyTrustedAudioResult::~SafetyTrustedAudioResult(CMMsl::SafetyTrustedAudioResult *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::SafetyTrustedAudioResult::SafetyTrustedAudioResult(uint64_t this, const CMMsl::SafetyTrustedAudioResult *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  char v38;
  char v39;
  int v40;

  *(_QWORD *)this = off_1003543F0;
  *(_QWORD *)(this + 188) = 0;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x100) != 0)
  {
    v4 = *((_QWORD *)a2 + 9);
    v3 = 256;
    *(_QWORD *)(this + 188) = 256;
    *(_QWORD *)(this + 72) = v4;
    v2 = *(_QWORD *)((char *)a2 + 188);
    if ((v2 & 0x40000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x40000) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 29);
    v3 |= 0x40000uLL;
    *(_QWORD *)(this + 188) = v3;
    *(_DWORD *)(this + 116) = v5;
    v2 = *(_QWORD *)((char *)a2 + 188);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *((_QWORD *)a2 + 4);
    v3 |= 8uLL;
    *(_QWORD *)(this + 188) = v3;
    *(_QWORD *)(this + 32) = v6;
    v2 = *(_QWORD *)((char *)a2 + 188);
    if ((v2 & 0x2000) == 0)
    {
LABEL_8:
      if ((v2 & 0x200000) == 0)
        goto LABEL_9;
      goto LABEL_44;
    }
  }
  else if ((v2 & 0x2000) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 24);
  v3 |= 0x2000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 96) = v7;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x200000) == 0)
  {
LABEL_9:
    if ((v2 & 0x20000) == 0)
      goto LABEL_10;
    goto LABEL_45;
  }
LABEL_44:
  v8 = *((_DWORD *)a2 + 32);
  v3 |= 0x200000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 128) = v8;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x20000) == 0)
  {
LABEL_10:
    if ((v2 & 4) == 0)
      goto LABEL_11;
    goto LABEL_46;
  }
LABEL_45:
  v9 = *((_DWORD *)a2 + 28);
  v3 |= 0x20000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 112) = v9;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 4) == 0)
  {
LABEL_11:
    if ((v2 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_47;
  }
LABEL_46:
  v10 = *((_QWORD *)a2 + 3);
  v3 |= 4uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 24) = v10;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x8000) == 0)
  {
LABEL_12:
    if ((v2 & 0x100000) == 0)
      goto LABEL_13;
    goto LABEL_48;
  }
LABEL_47:
  v11 = *((_DWORD *)a2 + 26);
  v3 |= 0x8000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 104) = v11;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x100000) == 0)
  {
LABEL_13:
    if ((v2 & 0x80000) == 0)
      goto LABEL_14;
    goto LABEL_49;
  }
LABEL_48:
  v12 = *((_DWORD *)a2 + 31);
  v3 |= 0x100000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 124) = v12;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x80000) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0)
      goto LABEL_15;
    goto LABEL_50;
  }
LABEL_49:
  v13 = *((_DWORD *)a2 + 30);
  v3 |= 0x80000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 120) = v13;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x10) == 0)
  {
LABEL_15:
    if ((v2 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_51;
  }
LABEL_50:
  v14 = *((_QWORD *)a2 + 5);
  v3 |= 0x10uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 40) = v14;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x4000) == 0)
  {
LABEL_16:
    if ((v2 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_52;
  }
LABEL_51:
  v15 = *((_DWORD *)a2 + 25);
  v3 |= 0x4000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 100) = v15;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x10000) == 0)
  {
LABEL_17:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_18;
    goto LABEL_53;
  }
LABEL_52:
  v16 = *((_DWORD *)a2 + 27);
  v3 |= 0x10000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 108) = v16;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x40) == 0)
      goto LABEL_19;
    goto LABEL_54;
  }
LABEL_53:
  v17 = *((_DWORD *)a2 + 38);
  v3 |= 0x8000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 152) = v17;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x40) == 0)
  {
LABEL_19:
    if ((v2 & 0x400000) == 0)
      goto LABEL_20;
    goto LABEL_55;
  }
LABEL_54:
  v18 = *((_QWORD *)a2 + 7);
  v3 |= 0x40uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 56) = v18;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x400000) == 0)
  {
LABEL_20:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_21;
    goto LABEL_56;
  }
LABEL_55:
  v19 = *((_DWORD *)a2 + 33);
  v3 |= 0x400000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 132) = v19;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_21:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_22;
    goto LABEL_57;
  }
LABEL_56:
  v20 = *((_DWORD *)a2 + 41);
  v3 |= 0x40000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 164) = v20;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_22:
    if ((v2 & 0x20) == 0)
      goto LABEL_23;
    goto LABEL_58;
  }
LABEL_57:
  v21 = *((_DWORD *)a2 + 37);
  v3 |= 0x4000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 148) = v21;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x20) == 0)
  {
LABEL_23:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_24;
    goto LABEL_59;
  }
LABEL_58:
  v22 = *((_QWORD *)a2 + 6);
  v3 |= 0x20uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 48) = v22;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_25;
    goto LABEL_60;
  }
LABEL_59:
  v23 = *((_DWORD *)a2 + 35);
  v3 |= 0x1000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 140) = v23;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_26;
    goto LABEL_61;
  }
LABEL_60:
  v24 = *((_DWORD *)a2 + 40);
  v3 |= 0x20000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 160) = v24;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_26:
    if ((v2 & 0x80) == 0)
      goto LABEL_27;
    goto LABEL_62;
  }
LABEL_61:
  v25 = *((_DWORD *)a2 + 39);
  v3 |= 0x10000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 156) = v25;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x80) == 0)
  {
LABEL_27:
    if ((v2 & 0x800000) == 0)
      goto LABEL_28;
    goto LABEL_63;
  }
LABEL_62:
  v26 = *((_QWORD *)a2 + 8);
  v3 |= 0x80uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 64) = v26;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x800000) == 0)
  {
LABEL_28:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_29;
    goto LABEL_64;
  }
LABEL_63:
  v27 = *((_DWORD *)a2 + 34);
  v3 |= 0x800000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 136) = v27;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_29:
    if ((v2 & 0x400) == 0)
      goto LABEL_30;
    goto LABEL_65;
  }
LABEL_64:
  v28 = *((_DWORD *)a2 + 36);
  v3 |= 0x2000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 144) = v28;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x400) == 0)
  {
LABEL_30:
    if ((v2 & 0x1000) == 0)
      goto LABEL_31;
    goto LABEL_66;
  }
LABEL_65:
  v29 = *((_DWORD *)a2 + 21);
  v3 |= 0x400uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 84) = v29;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x1000) == 0)
  {
LABEL_31:
    if ((v2 & 0x800) == 0)
      goto LABEL_32;
    goto LABEL_67;
  }
LABEL_66:
  v30 = *((_DWORD *)a2 + 23);
  v3 |= 0x1000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 92) = v30;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x800) == 0)
  {
LABEL_32:
    if ((v2 & 2) == 0)
      goto LABEL_33;
    goto LABEL_68;
  }
LABEL_67:
  v31 = *((_DWORD *)a2 + 22);
  v3 |= 0x800uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 88) = v31;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 2) == 0)
  {
LABEL_33:
    if ((v2 & 1) == 0)
      goto LABEL_34;
    goto LABEL_69;
  }
LABEL_68:
  v32 = *((_QWORD *)a2 + 2);
  v3 |= 2uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 16) = v32;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 1) == 0)
  {
LABEL_34:
    if ((v2 & 0x100000000) == 0)
      goto LABEL_35;
    goto LABEL_70;
  }
LABEL_69:
  v33 = *((_QWORD *)a2 + 1);
  v3 |= 1uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_QWORD *)(this + 8) = v33;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_35:
    if ((v2 & 0x400000000) == 0)
      goto LABEL_36;
    goto LABEL_71;
  }
LABEL_70:
  v34 = *((_DWORD *)a2 + 43);
  v3 |= (unint64_t)&_mh_execute_header;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 172) = v34;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_36:
    if ((v2 & 0x200000000) == 0)
      goto LABEL_37;
    goto LABEL_72;
  }
LABEL_71:
  v35 = *((_DWORD *)a2 + 45);
  v3 |= 0x400000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 180) = v35;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_37:
    if ((v2 & 0x80000000) == 0)
      goto LABEL_38;
    goto LABEL_73;
  }
LABEL_72:
  v36 = *((_DWORD *)a2 + 44);
  v3 |= 0x200000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 176) = v36;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_38:
    if ((v2 & 0x800000000) == 0)
      goto LABEL_39;
    goto LABEL_74;
  }
LABEL_73:
  v37 = *((_DWORD *)a2 + 42);
  v3 |= 0x80000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_DWORD *)(this + 168) = v37;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_39:
    if ((v2 & 0x1000000000) == 0)
      goto LABEL_40;
    goto LABEL_75;
  }
LABEL_74:
  v38 = *((_BYTE *)a2 + 184);
  v3 |= 0x800000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_BYTE *)(this + 184) = v38;
  v2 = *(_QWORD *)((char *)a2 + 188);
  if ((v2 & 0x1000000000) == 0)
  {
LABEL_40:
    if ((v2 & 0x200) == 0)
      return this;
LABEL_76:
    v40 = *((_DWORD *)a2 + 20);
    *(_QWORD *)(this + 188) = v3 | 0x200;
    *(_DWORD *)(this + 80) = v40;
    return this;
  }
LABEL_75:
  v39 = *((_BYTE *)a2 + 185);
  v3 |= 0x1000000000uLL;
  *(_QWORD *)(this + 188) = v3;
  *(_BYTE *)(this + 185) = v39;
  if ((*(_QWORD *)((_BYTE *)a2 + 188) & 0x200) != 0)
    goto LABEL_76;
  return this;
}

CMMsl *CMMsl::SafetyTrustedAudioResult::operator=(CMMsl *a1, const CMMsl::SafetyTrustedAudioResult *a2)
{
  CMMsl::SafetyTrustedAudioResult *v3;
  _BYTE v5[200];

  if (a1 != a2)
  {
    CMMsl::SafetyTrustedAudioResult::SafetyTrustedAudioResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::SafetyTrustedAudioResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::SafetyTrustedAudioResult *a2, CMMsl::SafetyTrustedAudioResult *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  float result;

  v3 = *(_QWORD *)((char *)this + 188);
  *(_QWORD *)((char *)this + 188) = *(_QWORD *)((char *)a2 + 188);
  *(_QWORD *)((char *)a2 + 188) = v3;
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v4;
  v5 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v5;
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  v7 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v7;
  v8 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v8;
  v9 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v9;
  v10 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v10;
  v11 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v11;
  v12 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v12;
  v13 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v13;
  v14 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v14;
  v15 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v15;
  v16 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v16;
  v17 = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v17;
  v18 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v18;
  v19 = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v19;
  v20 = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v20;
  v21 = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v21;
  v22 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v22;
  v23 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v23;
  v24 = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v24;
  v25 = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v25;
  v26 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v26;
  v27 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v27;
  v28 = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v28;
  v29 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v29;
  LODWORD(v26) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v26;
  LODWORD(v26) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v26;
  v30 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v30;
  v31 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v31;
  v32 = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v32;
  v33 = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v33;
  v34 = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v34;
  result = *((float *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((float *)a2 + 42) = result;
  LOBYTE(v31) = *((_BYTE *)this + 184);
  *((_BYTE *)this + 184) = *((_BYTE *)a2 + 184);
  *((_BYTE *)a2 + 184) = v31;
  LOBYTE(v31) = *((_BYTE *)this + 185);
  *((_BYTE *)this + 185) = *((_BYTE *)a2 + 185);
  *((_BYTE *)a2 + 185) = v31;
  LODWORD(v31) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v31;
  return result;
}

float CMMsl::SafetyTrustedAudioResult::SafetyTrustedAudioResult(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_1003543F0;
  *(_QWORD *)(a1 + 188) = *(_QWORD *)(a2 + 188);
  *(_QWORD *)(a2 + 188) = 0;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  result = *(float *)(a2 + 168);
  *(float *)(a1 + 168) = result;
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_BYTE *)(a1 + 185) = *(_BYTE *)(a2 + 185);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  return result;
}

CMMsl *CMMsl::SafetyTrustedAudioResult::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::SafetyTrustedAudioResult *v3;
  _BYTE v5[200];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::SafetyTrustedAudioResult::SafetyTrustedAudioResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::SafetyTrustedAudioResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::SafetyTrustedAudioResult::formatText(CMMsl::SafetyTrustedAudioResult *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x200) != 0)
  {
    PB::TextFormatter::format(a2, "dramDuration", *((_DWORD *)this + 20));
    v5 = *(_QWORD *)((char *)this + 188);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_42;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "epochMaxTimestamp", *((_QWORD *)this + 1));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "epochMinTimestamp", *((_QWORD *)this + 2));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x400) == 0)
  {
LABEL_5:
    if ((v5 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "maxRMS", *((float *)this + 21));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x800) == 0)
  {
LABEL_6:
    if ((v5 & 0x1000) == 0)
      goto LABEL_7;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "numPointsInEpoch", *((_DWORD *)this + 22));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x1000) == 0)
  {
LABEL_7:
    if ((v5 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "numShortAudio", *((_DWORD *)this + 23));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x2000) == 0)
  {
LABEL_8:
    if ((v5 & 0x4000) == 0)
      goto LABEL_9;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "planarChaosAtMaxEnergy", *((float *)this + 24));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x4000) == 0)
  {
LABEL_9:
    if ((v5 & 0x8000) == 0)
      goto LABEL_10;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "planarChaosAtMaxSaturation", *((float *)this + 25));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x8000) == 0)
  {
LABEL_10:
    if ((v5 & 0x10000) == 0)
      goto LABEL_11;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "planarEnergyAtMaxChaos", *((float *)this + 26));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x10000) == 0)
  {
LABEL_11:
    if ((v5 & 0x20000) == 0)
      goto LABEL_12;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "planarEnergyAtMaxSaturation", *((float *)this + 27));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x20000) == 0)
  {
LABEL_12:
    if ((v5 & 0x40000) == 0)
      goto LABEL_13;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "planarMaxChaos", *((float *)this + 28));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x40000) == 0)
  {
LABEL_13:
    if ((v5 & 0x80000) == 0)
      goto LABEL_14;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "planarMaxEnergy", *((float *)this + 29));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x80000) == 0)
  {
LABEL_14:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_15;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "planarMaxSaturation", *((float *)this + 30));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x100000) == 0)
      goto LABEL_16;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "planarPassThru", *((_BYTE *)this + 184));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x100000) == 0)
  {
LABEL_16:
    if ((v5 & 0x200000) == 0)
      goto LABEL_17;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "planarSaturationAtMaxChaos", *((float *)this + 31));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x200000) == 0)
  {
LABEL_17:
    if ((v5 & 4) == 0)
      goto LABEL_18;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "planarSaturationAtMaxEnergy", *((float *)this + 32));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 4) == 0)
  {
LABEL_18:
    if ((v5 & 8) == 0)
      goto LABEL_19;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "planarTimestampAtMaxChaos", *((_QWORD *)this + 3));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 8) == 0)
  {
LABEL_19:
    if ((v5 & 0x10) == 0)
      goto LABEL_20;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "planarTimestampAtMaxEnergy", *((_QWORD *)this + 4));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x10) == 0)
  {
LABEL_20:
    if ((v5 & 0x400000) == 0)
      goto LABEL_21;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "planarTimestampAtMaxSaturation", *((_QWORD *)this + 5));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x400000) == 0)
  {
LABEL_21:
    if ((v5 & 0x800000) == 0)
      goto LABEL_22;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "rolloverChaosAtMaxEnergy", *((float *)this + 33));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x800000) == 0)
  {
LABEL_22:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_23;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "rolloverChaosAtMaxSaturation", *((float *)this + 34));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_24;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "rolloverEnergyAtMaxChaos", *((float *)this + 35));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_24:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_25;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "rolloverEnergyAtMaxSaturation", *((float *)this + 36));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_26;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "rolloverMaxChaos", *((float *)this + 37));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_27;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "rolloverMaxEnergy", *((float *)this + 38));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x1000000000) == 0)
      goto LABEL_28;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "rolloverMaxSaturation", *((float *)this + 39));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x1000000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_29;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "rolloverPassThru", *((_BYTE *)this + 185));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_30;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "rolloverSaturationAtMaxChaos", *((float *)this + 40));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x20) == 0)
      goto LABEL_31;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "rolloverSaturationAtMaxEnergy", *((float *)this + 41));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x20) == 0)
  {
LABEL_31:
    if ((v5 & 0x40) == 0)
      goto LABEL_32;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "rolloverTimestampAtMaxChaos", *((_QWORD *)this + 6));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x40) == 0)
  {
LABEL_32:
    if ((v5 & 0x80) == 0)
      goto LABEL_33;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "rolloverTimestampAtMaxEnergy", *((_QWORD *)this + 7));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x80) == 0)
  {
LABEL_33:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_34;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "rolloverTimestampAtMaxSaturation", *((_QWORD *)this + 8));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_35;
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "soundEnvelopeCount", *((float *)this + 42));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_36;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "soundMaxMeanOverArmSession", *((float *)this + 43));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_37;
LABEL_75:
    PB::TextFormatter::format(a2, "soundMeanLast15s", *((float *)this + 45));
    if ((*(_QWORD *)((_BYTE *)this + 188) & 0x100) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_38;
  }
LABEL_74:
  PB::TextFormatter::format(a2, "soundMeanCurrentWindow", *((float *)this + 44));
  v5 = *(_QWORD *)((char *)this + 188);
  if ((v5 & 0x400000000) != 0)
    goto LABEL_75;
LABEL_37:
  if ((v5 & 0x100) != 0)
LABEL_38:
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 9));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SafetyTrustedAudioResult::readFrom(CMMsl::SafetyTrustedAudioResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t result;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char v77;
  unsigned int v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  char v99;
  unsigned int v100;
  uint64_t v101;
  unint64_t v102;
  char v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  char v107;
  unsigned int v108;
  uint64_t v109;
  unint64_t v110;
  char v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  char v115;
  unsigned int v116;
  uint64_t v117;
  unint64_t v118;
  char v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  char v123;
  unsigned int v124;
  uint64_t v125;
  unint64_t v126;
  char v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  int v134;
  BOOL v135;
  unint64_t v136;
  unint64_t v137;
  int v138;
  BOOL v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  char v143;
  unsigned int v144;
  uint64_t v145;
  unint64_t v146;
  char v147;
  char v148;
  unsigned int v149;
  unint64_t v150;
  char v151;
  char v152;
  unsigned int v153;
  unint64_t v154;
  char v155;
  char v156;
  unsigned int v157;
  unint64_t v158;
  char v159;
  char v160;
  unsigned int v161;
  unint64_t v162;
  char v163;
  char v164;
  unsigned int v165;
  unint64_t v166;
  char v167;
  char v168;
  unsigned int v169;
  unint64_t v170;
  char v171;
  char v172;
  unsigned int v173;
  unint64_t v174;
  char v175;
  char v176;
  unsigned int v177;
  unint64_t v178;
  char v179;
  char v180;
  unsigned int v181;
  unint64_t v182;
  char v183;
  char v184;
  unsigned int v185;
  unint64_t v186;
  char v187;
  char v188;
  unsigned int v189;
  unint64_t v190;
  char v191;
  char v192;
  unsigned int v193;
  unint64_t v194;
  char v195;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_QWORD *)((char *)this + 188) |= 0x100uLL;
          v20 = *((_QWORD *)a2 + 1);
          v21 = *((_QWORD *)a2 + 2);
          v22 = *(_QWORD *)a2;
          if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v21)
          {
            v148 = 0;
            v149 = 0;
            v25 = 0;
            if (v21 <= v20)
              v21 = *((_QWORD *)a2 + 1);
            do
            {
              if (v21 == v20)
              {
                v25 = 0;
                *((_BYTE *)a2 + 24) = 1;
                goto LABEL_279;
              }
              v150 = v20 + 1;
              v151 = *(_BYTE *)(v22 + v20);
              *((_QWORD *)a2 + 1) = v150;
              v25 |= (unint64_t)(v151 & 0x7F) << v148;
              if ((v151 & 0x80) == 0)
              {
                if (*((_BYTE *)a2 + 24))
                  v25 = 0;
                goto LABEL_279;
              }
              v148 += 7;
              v20 = v150;
              v14 = v149++ > 8;
            }
            while (!v14);
LABEL_187:
            v25 = 0;
          }
          else
          {
            v23 = 0;
            v24 = 0;
            v25 = 0;
            while (1)
            {
              v26 = v20 + 1;
              *((_QWORD *)a2 + 1) = v20 + 1;
              v27 = *(_BYTE *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0)
                break;
              v23 += 7;
              v20 = v26;
              v14 = v24++ > 8;
              if (v14)
                goto LABEL_187;
            }
          }
LABEL_279:
          *((_QWORD *)this + 9) = v25;
          goto LABEL_271;
        case 2u:
          *(_QWORD *)((char *)this + 188) |= 0x40000uLL;
          v29 = *((_QWORD *)a2 + 1);
          if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_169;
          *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v29);
          goto LABEL_270;
        case 3u:
          *(_QWORD *)((char *)this + 188) |= 8uLL;
          v30 = *((_QWORD *)a2 + 1);
          v31 = *((_QWORD *)a2 + 2);
          v32 = *(_QWORD *)a2;
          if (v30 <= 0xFFFFFFFFFFFFFFF5 && v30 + 10 <= v31)
          {
            v33 = 0;
            v34 = 0;
            v35 = 0;
            do
            {
              v36 = v30 + 1;
              *((_QWORD *)a2 + 1) = v30 + 1;
              v37 = *(_BYTE *)(v32 + v30);
              v35 |= (unint64_t)(v37 & 0x7F) << v33;
              if ((v37 & 0x80) == 0)
                goto LABEL_283;
              v33 += 7;
              v30 = v36;
              v14 = v34++ > 8;
            }
            while (!v14);
LABEL_194:
            v35 = 0;
            goto LABEL_283;
          }
          v152 = 0;
          v153 = 0;
          v35 = 0;
          if (v31 <= v30)
            v31 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v31 == v30)
            {
              v35 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v154 = v30 + 1;
              v155 = *(_BYTE *)(v32 + v30);
              *((_QWORD *)a2 + 1) = v154;
              v35 |= (unint64_t)(v155 & 0x7F) << v152;
              if (v155 < 0)
              {
                v152 += 7;
                v30 = v154;
                v14 = v153++ > 8;
                if (v14)
                  goto LABEL_194;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v35 = 0;
            }
            break;
          }
LABEL_283:
          *((_QWORD *)this + 4) = v35;
          goto LABEL_271;
        case 4u:
          *(_QWORD *)((char *)this + 188) |= 0x2000uLL;
          v38 = *((_QWORD *)a2 + 1);
          if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_169;
          *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v38);
          goto LABEL_270;
        case 5u:
          *(_QWORD *)((char *)this + 188) |= 0x200000uLL;
          v39 = *((_QWORD *)a2 + 1);
          if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_169;
          *((_DWORD *)this + 32) = *(_DWORD *)(*(_QWORD *)a2 + v39);
          goto LABEL_270;
        case 6u:
          *(_QWORD *)((char *)this + 188) |= 0x20000uLL;
          v40 = *((_QWORD *)a2 + 1);
          if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_169;
          *((_DWORD *)this + 28) = *(_DWORD *)(*(_QWORD *)a2 + v40);
          goto LABEL_270;
        case 7u:
          *(_QWORD *)((char *)this + 188) |= 4uLL;
          v41 = *((_QWORD *)a2 + 1);
          v42 = *((_QWORD *)a2 + 2);
          v43 = *(_QWORD *)a2;
          if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
          {
            v44 = 0;
            v45 = 0;
            v46 = 0;
            do
            {
              v47 = v41 + 1;
              *((_QWORD *)a2 + 1) = v41 + 1;
              v48 = *(_BYTE *)(v43 + v41);
              v46 |= (unint64_t)(v48 & 0x7F) << v44;
              if ((v48 & 0x80) == 0)
                goto LABEL_287;
              v44 += 7;
              v41 = v47;
              v14 = v45++ > 8;
            }
            while (!v14);
LABEL_201:
            v46 = 0;
            goto LABEL_287;
          }
          v156 = 0;
          v157 = 0;
          v46 = 0;
          if (v42 <= v41)
            v42 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v42 == v41)
            {
              v46 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v158 = v41 + 1;
              v159 = *(_BYTE *)(v43 + v41);
              *((_QWORD *)a2 + 1) = v158;
              v46 |= (unint64_t)(v159 & 0x7F) << v156;
              if (v159 < 0)
              {
                v156 += 7;
                v41 = v158;
                v14 = v157++ > 8;
                if (v14)
                  goto LABEL_201;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v46 = 0;
            }
            break;
          }
LABEL_287:
          *((_QWORD *)this + 3) = v46;
          goto LABEL_271;
        case 8u:
          *(_QWORD *)((char *)this + 188) |= 0x8000uLL;
          v49 = *((_QWORD *)a2 + 1);
          if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_169;
          *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v49);
          goto LABEL_270;
        case 9u:
          *(_QWORD *)((char *)this + 188) |= 0x100000uLL;
          v50 = *((_QWORD *)a2 + 1);
          if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_169;
          *((_DWORD *)this + 31) = *(_DWORD *)(*(_QWORD *)a2 + v50);
          goto LABEL_270;
        case 0xAu:
          *(_QWORD *)((char *)this + 188) |= 0x80000uLL;
          v51 = *((_QWORD *)a2 + 1);
          if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_169;
          *((_DWORD *)this + 30) = *(_DWORD *)(*(_QWORD *)a2 + v51);
          goto LABEL_270;
        case 0xBu:
          *(_QWORD *)((char *)this + 188) |= 0x10uLL;
          v52 = *((_QWORD *)a2 + 1);
          v53 = *((_QWORD *)a2 + 2);
          v54 = *(_QWORD *)a2;
          if (v52 <= 0xFFFFFFFFFFFFFFF5 && v52 + 10 <= v53)
          {
            v55 = 0;
            v56 = 0;
            v57 = 0;
            do
            {
              v58 = v52 + 1;
              *((_QWORD *)a2 + 1) = v52 + 1;
              v59 = *(_BYTE *)(v54 + v52);
              v57 |= (unint64_t)(v59 & 0x7F) << v55;
              if ((v59 & 0x80) == 0)
                goto LABEL_291;
              v55 += 7;
              v52 = v58;
              v14 = v56++ > 8;
            }
            while (!v14);
LABEL_208:
            v57 = 0;
            goto LABEL_291;
          }
          v160 = 0;
          v161 = 0;
          v57 = 0;
          if (v53 <= v52)
            v53 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v53 == v52)
            {
              v57 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v162 = v52 + 1;
              v163 = *(_BYTE *)(v54 + v52);
              *((_QWORD *)a2 + 1) = v162;
              v57 |= (unint64_t)(v163 & 0x7F) << v160;
              if (v163 < 0)
              {
                v160 += 7;
                v52 = v162;
                v14 = v161++ > 8;
                if (v14)
                  goto LABEL_208;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v57 = 0;
            }
            break;
          }
LABEL_291:
          *((_QWORD *)this + 5) = v57;
          goto LABEL_271;
        case 0xCu:
          *(_QWORD *)((char *)this + 188) |= 0x4000uLL;
          v60 = *((_QWORD *)a2 + 1);
          if (v60 > 0xFFFFFFFFFFFFFFFBLL || v60 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_169;
          *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v60);
          goto LABEL_270;
        case 0xDu:
          *(_QWORD *)((char *)this + 188) |= 0x10000uLL;
          v61 = *((_QWORD *)a2 + 1);
          if (v61 > 0xFFFFFFFFFFFFFFFBLL || v61 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_169;
          *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v61);
          goto LABEL_270;
        case 0xEu:
          *(_QWORD *)((char *)this + 188) |= 0x8000000uLL;
          v62 = *((_QWORD *)a2 + 1);
          if (v62 > 0xFFFFFFFFFFFFFFFBLL || v62 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_169;
          *((_DWORD *)this + 38) = *(_DWORD *)(*(_QWORD *)a2 + v62);
          goto LABEL_270;
        case 0xFu:
          *(_QWORD *)((char *)this + 188) |= 0x40uLL;
          v63 = *((_QWORD *)a2 + 1);
          v64 = *((_QWORD *)a2 + 2);
          v65 = *(_QWORD *)a2;
          if (v63 <= 0xFFFFFFFFFFFFFFF5 && v63 + 10 <= v64)
          {
            v66 = 0;
            v67 = 0;
            v68 = 0;
            do
            {
              v69 = v63 + 1;
              *((_QWORD *)a2 + 1) = v63 + 1;
              v70 = *(_BYTE *)(v65 + v63);
              v68 |= (unint64_t)(v70 & 0x7F) << v66;
              if ((v70 & 0x80) == 0)
                goto LABEL_295;
              v66 += 7;
              v63 = v69;
              v14 = v67++ > 8;
            }
            while (!v14);
LABEL_215:
            v68 = 0;
            goto LABEL_295;
          }
          v164 = 0;
          v165 = 0;
          v68 = 0;
          if (v64 <= v63)
            v64 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v64 == v63)
            {
              v68 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v166 = v63 + 1;
              v167 = *(_BYTE *)(v65 + v63);
              *((_QWORD *)a2 + 1) = v166;
              v68 |= (unint64_t)(v167 & 0x7F) << v164;
              if (v167 < 0)
              {
                v164 += 7;
                v63 = v166;
                v14 = v165++ > 8;
                if (v14)
                  goto LABEL_215;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v68 = 0;
            }
            break;
          }
LABEL_295:
          *((_QWORD *)this + 7) = v68;
          goto LABEL_271;
        case 0x10u:
          *(_QWORD *)((char *)this + 188) |= 0x400000uLL;
          v71 = *((_QWORD *)a2 + 1);
          if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_169;
          *((_DWORD *)this + 33) = *(_DWORD *)(*(_QWORD *)a2 + v71);
          goto LABEL_270;
        case 0x11u:
          *(_QWORD *)((char *)this + 188) |= 0x40000000uLL;
          v72 = *((_QWORD *)a2 + 1);
          if (v72 > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_169;
          *((_DWORD *)this + 41) = *(_DWORD *)(*(_QWORD *)a2 + v72);
          goto LABEL_270;
        case 0x12u:
          *(_QWORD *)((char *)this + 188) |= 0x4000000uLL;
          v73 = *((_QWORD *)a2 + 1);
          if (v73 > 0xFFFFFFFFFFFFFFFBLL || v73 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_169;
          *((_DWORD *)this + 37) = *(_DWORD *)(*(_QWORD *)a2 + v73);
          goto LABEL_270;
        case 0x13u:
          *(_QWORD *)((char *)this + 188) |= 0x20uLL;
          v74 = *((_QWORD *)a2 + 1);
          v75 = *((_QWORD *)a2 + 2);
          v76 = *(_QWORD *)a2;
          if (v74 <= 0xFFFFFFFFFFFFFFF5 && v74 + 10 <= v75)
          {
            v77 = 0;
            v78 = 0;
            v79 = 0;
            do
            {
              v80 = v74 + 1;
              *((_QWORD *)a2 + 1) = v74 + 1;
              v81 = *(_BYTE *)(v76 + v74);
              v79 |= (unint64_t)(v81 & 0x7F) << v77;
              if ((v81 & 0x80) == 0)
                goto LABEL_299;
              v77 += 7;
              v74 = v80;
              v14 = v78++ > 8;
            }
            while (!v14);
LABEL_222:
            v79 = 0;
            goto LABEL_299;
          }
          v168 = 0;
          v169 = 0;
          v79 = 0;
          if (v75 <= v74)
            v75 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v75 == v74)
            {
              v79 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v170 = v74 + 1;
              v171 = *(_BYTE *)(v76 + v74);
              *((_QWORD *)a2 + 1) = v170;
              v79 |= (unint64_t)(v171 & 0x7F) << v168;
              if (v171 < 0)
              {
                v168 += 7;
                v74 = v170;
                v14 = v169++ > 8;
                if (v14)
                  goto LABEL_222;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v79 = 0;
            }
            break;
          }
LABEL_299:
          *((_QWORD *)this + 6) = v79;
          goto LABEL_271;
        case 0x14u:
          *(_QWORD *)((char *)this + 188) |= 0x1000000uLL;
          v82 = *((_QWORD *)a2 + 1);
          if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_169;
          *((_DWORD *)this + 35) = *(_DWORD *)(*(_QWORD *)a2 + v82);
          goto LABEL_270;
        case 0x15u:
          *(_QWORD *)((char *)this + 188) |= 0x20000000uLL;
          v83 = *((_QWORD *)a2 + 1);
          if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_169;
          *((_DWORD *)this + 40) = *(_DWORD *)(*(_QWORD *)a2 + v83);
          goto LABEL_270;
        case 0x16u:
          *(_QWORD *)((char *)this + 188) |= 0x10000000uLL;
          v84 = *((_QWORD *)a2 + 1);
          if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_169;
          *((_DWORD *)this + 39) = *(_DWORD *)(*(_QWORD *)a2 + v84);
          goto LABEL_270;
        case 0x17u:
          *(_QWORD *)((char *)this + 188) |= 0x80uLL;
          v85 = *((_QWORD *)a2 + 1);
          v86 = *((_QWORD *)a2 + 2);
          v87 = *(_QWORD *)a2;
          if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
          {
            v88 = 0;
            v89 = 0;
            v90 = 0;
            do
            {
              v91 = v85 + 1;
              *((_QWORD *)a2 + 1) = v85 + 1;
              v92 = *(_BYTE *)(v87 + v85);
              v90 |= (unint64_t)(v92 & 0x7F) << v88;
              if ((v92 & 0x80) == 0)
                goto LABEL_303;
              v88 += 7;
              v85 = v91;
              v14 = v89++ > 8;
            }
            while (!v14);
LABEL_229:
            v90 = 0;
            goto LABEL_303;
          }
          v172 = 0;
          v173 = 0;
          v90 = 0;
          if (v86 <= v85)
            v86 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v86 == v85)
            {
              v90 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v174 = v85 + 1;
              v175 = *(_BYTE *)(v87 + v85);
              *((_QWORD *)a2 + 1) = v174;
              v90 |= (unint64_t)(v175 & 0x7F) << v172;
              if (v175 < 0)
              {
                v172 += 7;
                v85 = v174;
                v14 = v173++ > 8;
                if (v14)
                  goto LABEL_229;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v90 = 0;
            }
            break;
          }
LABEL_303:
          *((_QWORD *)this + 8) = v90;
          goto LABEL_271;
        case 0x18u:
          *(_QWORD *)((char *)this + 188) |= 0x800000uLL;
          v93 = *((_QWORD *)a2 + 1);
          if (v93 > 0xFFFFFFFFFFFFFFFBLL || v93 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_169;
          *((_DWORD *)this + 34) = *(_DWORD *)(*(_QWORD *)a2 + v93);
          goto LABEL_270;
        case 0x19u:
          *(_QWORD *)((char *)this + 188) |= 0x2000000uLL;
          v94 = *((_QWORD *)a2 + 1);
          if (v94 > 0xFFFFFFFFFFFFFFFBLL || v94 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_169;
          *((_DWORD *)this + 36) = *(_DWORD *)(*(_QWORD *)a2 + v94);
          goto LABEL_270;
        case 0x1Au:
          *(_QWORD *)((char *)this + 188) |= 0x400uLL;
          v95 = *((_QWORD *)a2 + 1);
          if (v95 > 0xFFFFFFFFFFFFFFFBLL || v95 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_169;
          *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v95);
          goto LABEL_270;
        case 0x1Bu:
          *(_QWORD *)((char *)this + 188) |= 0x1000uLL;
          v96 = *((_QWORD *)a2 + 1);
          v97 = *((_QWORD *)a2 + 2);
          v98 = *(_QWORD *)a2;
          if (v96 <= 0xFFFFFFFFFFFFFFF5 && v96 + 10 <= v97)
          {
            v99 = 0;
            v100 = 0;
            v101 = 0;
            do
            {
              v102 = v96 + 1;
              *((_QWORD *)a2 + 1) = v96 + 1;
              v103 = *(_BYTE *)(v98 + v96);
              v101 |= (unint64_t)(v103 & 0x7F) << v99;
              if ((v103 & 0x80) == 0)
                goto LABEL_307;
              v99 += 7;
              v96 = v102;
              v14 = v100++ > 8;
            }
            while (!v14);
LABEL_236:
            LODWORD(v101) = 0;
            goto LABEL_307;
          }
          v176 = 0;
          v177 = 0;
          v101 = 0;
          if (v97 <= v96)
            v97 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v97 == v96)
            {
              LODWORD(v101) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v178 = v96 + 1;
              v179 = *(_BYTE *)(v98 + v96);
              *((_QWORD *)a2 + 1) = v178;
              v101 |= (unint64_t)(v179 & 0x7F) << v176;
              if (v179 < 0)
              {
                v176 += 7;
                v96 = v178;
                v14 = v177++ > 8;
                if (v14)
                  goto LABEL_236;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v101) = 0;
            }
            break;
          }
LABEL_307:
          *((_DWORD *)this + 23) = v101;
          goto LABEL_271;
        case 0x1Cu:
          *(_QWORD *)((char *)this + 188) |= 0x800uLL;
          v104 = *((_QWORD *)a2 + 1);
          v105 = *((_QWORD *)a2 + 2);
          v106 = *(_QWORD *)a2;
          if (v104 <= 0xFFFFFFFFFFFFFFF5 && v104 + 10 <= v105)
          {
            v107 = 0;
            v108 = 0;
            v109 = 0;
            do
            {
              v110 = v104 + 1;
              *((_QWORD *)a2 + 1) = v104 + 1;
              v111 = *(_BYTE *)(v106 + v104);
              v109 |= (unint64_t)(v111 & 0x7F) << v107;
              if ((v111 & 0x80) == 0)
                goto LABEL_311;
              v107 += 7;
              v104 = v110;
              v14 = v108++ > 8;
            }
            while (!v14);
LABEL_243:
            LODWORD(v109) = 0;
            goto LABEL_311;
          }
          v180 = 0;
          v181 = 0;
          v109 = 0;
          if (v105 <= v104)
            v105 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v105 == v104)
            {
              LODWORD(v109) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v182 = v104 + 1;
              v183 = *(_BYTE *)(v106 + v104);
              *((_QWORD *)a2 + 1) = v182;
              v109 |= (unint64_t)(v183 & 0x7F) << v180;
              if (v183 < 0)
              {
                v180 += 7;
                v104 = v182;
                v14 = v181++ > 8;
                if (v14)
                  goto LABEL_243;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v109) = 0;
            }
            break;
          }
LABEL_311:
          *((_DWORD *)this + 22) = v109;
          goto LABEL_271;
        case 0x1Du:
          *(_QWORD *)((char *)this + 188) |= 2uLL;
          v112 = *((_QWORD *)a2 + 1);
          v113 = *((_QWORD *)a2 + 2);
          v114 = *(_QWORD *)a2;
          if (v112 <= 0xFFFFFFFFFFFFFFF5 && v112 + 10 <= v113)
          {
            v115 = 0;
            v116 = 0;
            v117 = 0;
            do
            {
              v118 = v112 + 1;
              *((_QWORD *)a2 + 1) = v112 + 1;
              v119 = *(_BYTE *)(v114 + v112);
              v117 |= (unint64_t)(v119 & 0x7F) << v115;
              if ((v119 & 0x80) == 0)
                goto LABEL_315;
              v115 += 7;
              v112 = v118;
              v14 = v116++ > 8;
            }
            while (!v14);
LABEL_250:
            v117 = 0;
            goto LABEL_315;
          }
          v184 = 0;
          v185 = 0;
          v117 = 0;
          if (v113 <= v112)
            v113 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v113 == v112)
            {
              v117 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v186 = v112 + 1;
              v187 = *(_BYTE *)(v114 + v112);
              *((_QWORD *)a2 + 1) = v186;
              v117 |= (unint64_t)(v187 & 0x7F) << v184;
              if (v187 < 0)
              {
                v184 += 7;
                v112 = v186;
                v14 = v185++ > 8;
                if (v14)
                  goto LABEL_250;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v117 = 0;
            }
            break;
          }
LABEL_315:
          *((_QWORD *)this + 2) = v117;
          goto LABEL_271;
        case 0x1Eu:
          *(_QWORD *)((char *)this + 188) |= 1uLL;
          v120 = *((_QWORD *)a2 + 1);
          v121 = *((_QWORD *)a2 + 2);
          v122 = *(_QWORD *)a2;
          if (v120 <= 0xFFFFFFFFFFFFFFF5 && v120 + 10 <= v121)
          {
            v123 = 0;
            v124 = 0;
            v125 = 0;
            do
            {
              v126 = v120 + 1;
              *((_QWORD *)a2 + 1) = v120 + 1;
              v127 = *(_BYTE *)(v122 + v120);
              v125 |= (unint64_t)(v127 & 0x7F) << v123;
              if ((v127 & 0x80) == 0)
                goto LABEL_319;
              v123 += 7;
              v120 = v126;
              v14 = v124++ > 8;
            }
            while (!v14);
LABEL_257:
            v125 = 0;
            goto LABEL_319;
          }
          v188 = 0;
          v189 = 0;
          v125 = 0;
          if (v121 <= v120)
            v121 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v121 == v120)
            {
              v125 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v190 = v120 + 1;
              v191 = *(_BYTE *)(v122 + v120);
              *((_QWORD *)a2 + 1) = v190;
              v125 |= (unint64_t)(v191 & 0x7F) << v188;
              if (v191 < 0)
              {
                v188 += 7;
                v120 = v190;
                v14 = v189++ > 8;
                if (v14)
                  goto LABEL_257;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v125 = 0;
            }
            break;
          }
LABEL_319:
          *((_QWORD *)this + 1) = v125;
          goto LABEL_271;
        case 0x1Fu:
          *(_QWORD *)((char *)this + 188) |= (unint64_t)&_mh_execute_header;
          v128 = *((_QWORD *)a2 + 1);
          if (v128 > 0xFFFFFFFFFFFFFFFBLL || v128 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_169;
          *((_DWORD *)this + 43) = *(_DWORD *)(*(_QWORD *)a2 + v128);
          goto LABEL_270;
        case 0x20u:
          *(_QWORD *)((char *)this + 188) |= 0x400000000uLL;
          v129 = *((_QWORD *)a2 + 1);
          if (v129 > 0xFFFFFFFFFFFFFFFBLL || v129 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_169;
          *((_DWORD *)this + 45) = *(_DWORD *)(*(_QWORD *)a2 + v129);
          goto LABEL_270;
        case 0x21u:
          *(_QWORD *)((char *)this + 188) |= 0x200000000uLL;
          v130 = *((_QWORD *)a2 + 1);
          if (v130 > 0xFFFFFFFFFFFFFFFBLL || v130 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_169;
          *((_DWORD *)this + 44) = *(_DWORD *)(*(_QWORD *)a2 + v130);
          goto LABEL_270;
        case 0x22u:
          *(_QWORD *)((char *)this + 188) |= 0x80000000uLL;
          v131 = *((_QWORD *)a2 + 1);
          if (v131 <= 0xFFFFFFFFFFFFFFFBLL && v131 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 42) = *(_DWORD *)(*(_QWORD *)a2 + v131);
LABEL_270:
            *((_QWORD *)a2 + 1) += 4;
          }
          else
          {
LABEL_169:
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_271;
        case 0x23u:
          *(_QWORD *)((char *)this + 188) |= 0x800000000uLL;
          v132 = *((_QWORD *)a2 + 1);
          if (v132 >= *((_QWORD *)a2 + 2))
          {
            v135 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v133 = v132 + 1;
            v134 = *(unsigned __int8 *)(*(_QWORD *)a2 + v132);
            *((_QWORD *)a2 + 1) = v133;
            v135 = v134 != 0;
          }
          *((_BYTE *)this + 184) = v135;
          goto LABEL_271;
        case 0x24u:
          *(_QWORD *)((char *)this + 188) |= 0x1000000000uLL;
          v136 = *((_QWORD *)a2 + 1);
          if (v136 >= *((_QWORD *)a2 + 2))
          {
            v139 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v137 = v136 + 1;
            v138 = *(unsigned __int8 *)(*(_QWORD *)a2 + v136);
            *((_QWORD *)a2 + 1) = v137;
            v139 = v138 != 0;
          }
          *((_BYTE *)this + 185) = v139;
          goto LABEL_271;
        case 0x25u:
          *(_QWORD *)((char *)this + 188) |= 0x200uLL;
          v140 = *((_QWORD *)a2 + 1);
          v141 = *((_QWORD *)a2 + 2);
          v142 = *(_QWORD *)a2;
          if (v140 <= 0xFFFFFFFFFFFFFFF5 && v140 + 10 <= v141)
          {
            v143 = 0;
            v144 = 0;
            v145 = 0;
            do
            {
              v146 = v140 + 1;
              *((_QWORD *)a2 + 1) = v140 + 1;
              v147 = *(_BYTE *)(v142 + v140);
              v145 |= (unint64_t)(v147 & 0x7F) << v143;
              if ((v147 & 0x80) == 0)
                goto LABEL_323;
              v143 += 7;
              v140 = v146;
              v14 = v144++ > 8;
            }
            while (!v14);
LABEL_268:
            LODWORD(v145) = 0;
            goto LABEL_323;
          }
          v192 = 0;
          v193 = 0;
          v145 = 0;
          if (v141 <= v140)
            v141 = *((_QWORD *)a2 + 1);
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_271;
      }
      while (1)
      {
        if (v141 == v140)
        {
          LODWORD(v145) = 0;
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_323;
        }
        v194 = v140 + 1;
        v195 = *(_BYTE *)(v142 + v140);
        *((_QWORD *)a2 + 1) = v194;
        v145 |= (unint64_t)(v195 & 0x7F) << v192;
        if ((v195 & 0x80) == 0)
          break;
        v192 += 7;
        v140 = v194;
        v14 = v193++ > 8;
        if (v14)
          goto LABEL_268;
      }
      if (*((_BYTE *)a2 + 24))
        LODWORD(v145) = 0;
LABEL_323:
      *((_DWORD *)this + 20) = v145;
LABEL_271:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SafetyTrustedAudioResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = this;
  v4 = *(_QWORD *)(this + 188);
  if ((v4 & 0x100) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 72), 1u);
    v4 = *(_QWORD *)(v3 + 188);
    if ((v4 & 0x40000) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_41;
    }
  }
  else if ((v4 & 0x40000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 116), 2u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x2000) == 0)
      goto LABEL_5;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 32), 3u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x2000) == 0)
  {
LABEL_5:
    if ((v4 & 0x200000) == 0)
      goto LABEL_6;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 4u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x200000) == 0)
  {
LABEL_6:
    if ((v4 & 0x20000) == 0)
      goto LABEL_7;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 128), 5u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x20000) == 0)
  {
LABEL_7:
    if ((v4 & 4) == 0)
      goto LABEL_8;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(float *)(v3 + 112), 6u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 0x8000) == 0)
      goto LABEL_9;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 24), 7u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x8000) == 0)
  {
LABEL_9:
    if ((v4 & 0x100000) == 0)
      goto LABEL_10;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 8u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x100000) == 0)
  {
LABEL_10:
    if ((v4 & 0x80000) == 0)
      goto LABEL_11;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 124), 9u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x80000) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 120), 0xAu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 0x4000) == 0)
      goto LABEL_13;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 40), 0xBu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x4000) == 0)
  {
LABEL_13:
    if ((v4 & 0x10000) == 0)
      goto LABEL_14;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 0xCu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x10000) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_15;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(float *)(v3 + 108), 0xDu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x40) == 0)
      goto LABEL_16;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(float *)(v3 + 152), 0xEu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x40) == 0)
  {
LABEL_16:
    if ((v4 & 0x400000) == 0)
      goto LABEL_17;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 56), 0xFu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x400000) == 0)
  {
LABEL_17:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_18;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(float *)(v3 + 132), 0x10u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_19;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(float *)(v3 + 164), 0x11u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x20) == 0)
      goto LABEL_20;
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::write(a2, *(float *)(v3 + 148), 0x12u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x20) == 0)
  {
LABEL_20:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_21;
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 48), 0x13u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_22;
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(float *)(v3 + 140), 0x14u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_23;
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(float *)(v3 + 160), 0x15u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x80) == 0)
      goto LABEL_24;
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(float *)(v3 + 156), 0x16u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x80) == 0)
  {
LABEL_24:
    if ((v4 & 0x800000) == 0)
      goto LABEL_25;
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 64), 0x17u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x800000) == 0)
  {
LABEL_25:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_26;
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::write(a2, *(float *)(v3 + 136), 0x18u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x400) == 0)
      goto LABEL_27;
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::write(a2, *(float *)(v3 + 144), 0x19u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x400) == 0)
  {
LABEL_27:
    if ((v4 & 0x1000) == 0)
      goto LABEL_28;
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 0x1Au);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x1000) == 0)
  {
LABEL_28:
    if ((v4 & 0x800) == 0)
      goto LABEL_29;
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 92), 0x1Bu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x800) == 0)
  {
LABEL_29:
    if ((v4 & 2) == 0)
      goto LABEL_30;
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 88), 0x1Cu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 2) == 0)
  {
LABEL_30:
    if ((v4 & 1) == 0)
      goto LABEL_31;
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 16), 0x1Du);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 1) == 0)
  {
LABEL_31:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_32;
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 8), 0x1Eu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_33;
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::write(a2, *(float *)(v3 + 172), 0x1Fu);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_33:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_34;
    goto LABEL_71;
  }
LABEL_70:
  this = PB::Writer::write(a2, *(float *)(v3 + 180), 0x20u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_34:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_35;
    goto LABEL_72;
  }
LABEL_71:
  this = PB::Writer::write(a2, *(float *)(v3 + 176), 0x21u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_35:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_36;
    goto LABEL_73;
  }
LABEL_72:
  this = PB::Writer::write(a2, *(float *)(v3 + 168), 0x22u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_36:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_37;
    goto LABEL_74;
  }
LABEL_73:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 184), 0x23u);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_37:
    if ((v4 & 0x200) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 80), 0x25u);
  }
LABEL_74:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 185), 0x24u);
  if ((*(_QWORD *)(v3 + 188) & 0x200) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 80), 0x25u);
  return this;
}

uint64_t CMMsl::SafetyTrustedAudioResult::hash_value(CMMsl::SafetyTrustedAudioResult *this)
{
  uint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  uint64_t v49;
  float v50;
  uint64_t v51;
  float v52;
  uint64_t v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v1 = *(_QWORD *)((char *)this + 188);
  if ((v1 & 0x100) == 0)
  {
    v2 = 0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_3;
LABEL_98:
    v69 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_6;
    goto LABEL_99;
  }
  v2 = *((_QWORD *)this + 9);
  if ((v1 & 0x40000) == 0)
    goto LABEL_98;
LABEL_3:
  v3 = *((float *)this + 29);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  v69 = v4;
  if ((v1 & 8) != 0)
  {
LABEL_6:
    v68 = *((_QWORD *)this + 4);
    if ((v1 & 0x2000) != 0)
      goto LABEL_7;
LABEL_100:
    v67 = 0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_10;
LABEL_101:
    v66 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_13;
LABEL_102:
    v65 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_16;
    goto LABEL_103;
  }
LABEL_99:
  v68 = 0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_100;
LABEL_7:
  v5 = *((float *)this + 24);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  v67 = v6;
  if ((v1 & 0x200000) == 0)
    goto LABEL_101;
LABEL_10:
  v7 = *((float *)this + 32);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  v66 = v8;
  if ((v1 & 0x20000) == 0)
    goto LABEL_102;
LABEL_13:
  v9 = *((float *)this + 28);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  v65 = v10;
  if ((v1 & 4) != 0)
  {
LABEL_16:
    v64 = *((_QWORD *)this + 3);
    if ((v1 & 0x8000) != 0)
      goto LABEL_17;
LABEL_104:
    v63 = 0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_20;
LABEL_105:
    v62 = 0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_23;
LABEL_106:
    v61 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_26;
    goto LABEL_107;
  }
LABEL_103:
  v64 = 0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_104;
LABEL_17:
  v11 = *((float *)this + 26);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  v63 = v12;
  if ((v1 & 0x100000) == 0)
    goto LABEL_105;
LABEL_20:
  v13 = *((float *)this + 31);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  v62 = v14;
  if ((v1 & 0x80000) == 0)
    goto LABEL_106;
LABEL_23:
  v15 = *((float *)this + 30);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  v61 = v16;
  if ((v1 & 0x10) != 0)
  {
LABEL_26:
    v60 = *((_QWORD *)this + 5);
    if ((v1 & 0x4000) != 0)
      goto LABEL_27;
LABEL_108:
    v18 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_31;
LABEL_109:
    v20 = 0;
    if ((v1 & 0x8000000) != 0)
      goto LABEL_35;
LABEL_110:
    v22 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_39;
    goto LABEL_111;
  }
LABEL_107:
  v60 = 0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_108;
LABEL_27:
  v17 = *((float *)this + 25);
  if (v17 == 0.0)
    v18 = 0;
  else
    v18 = LODWORD(v17);
  if ((v1 & 0x10000) == 0)
    goto LABEL_109;
LABEL_31:
  v19 = *((float *)this + 27);
  if (v19 == 0.0)
    v20 = 0;
  else
    v20 = LODWORD(v19);
  if ((v1 & 0x8000000) == 0)
    goto LABEL_110;
LABEL_35:
  v21 = *((float *)this + 38);
  if (v21 == 0.0)
    v22 = 0;
  else
    v22 = LODWORD(v21);
  if ((v1 & 0x40) != 0)
  {
LABEL_39:
    v23 = *((_QWORD *)this + 7);
    if ((v1 & 0x400000) != 0)
      goto LABEL_40;
LABEL_112:
    v25 = 0;
    if ((v1 & 0x40000000) != 0)
      goto LABEL_44;
LABEL_113:
    v27 = 0;
    if ((v1 & 0x4000000) != 0)
      goto LABEL_48;
LABEL_114:
    v29 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_52;
    goto LABEL_115;
  }
LABEL_111:
  v23 = 0;
  if ((v1 & 0x400000) == 0)
    goto LABEL_112;
LABEL_40:
  v24 = *((float *)this + 33);
  if (v24 == 0.0)
    v25 = 0;
  else
    v25 = LODWORD(v24);
  if ((v1 & 0x40000000) == 0)
    goto LABEL_113;
LABEL_44:
  v26 = *((float *)this + 41);
  if (v26 == 0.0)
    v27 = 0;
  else
    v27 = LODWORD(v26);
  if ((v1 & 0x4000000) == 0)
    goto LABEL_114;
LABEL_48:
  v28 = *((float *)this + 37);
  if (v28 == 0.0)
    v29 = 0;
  else
    v29 = LODWORD(v28);
  if ((v1 & 0x20) != 0)
  {
LABEL_52:
    v30 = *((_QWORD *)this + 6);
    if ((v1 & 0x1000000) != 0)
      goto LABEL_53;
LABEL_116:
    v32 = 0;
    if ((v1 & 0x20000000) != 0)
      goto LABEL_57;
LABEL_117:
    v34 = 0;
    if ((v1 & 0x10000000) != 0)
      goto LABEL_61;
LABEL_118:
    v36 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_65;
    goto LABEL_119;
  }
LABEL_115:
  v30 = 0;
  if ((v1 & 0x1000000) == 0)
    goto LABEL_116;
LABEL_53:
  v31 = *((float *)this + 35);
  if (v31 == 0.0)
    v32 = 0;
  else
    v32 = LODWORD(v31);
  if ((v1 & 0x20000000) == 0)
    goto LABEL_117;
LABEL_57:
  v33 = *((float *)this + 40);
  if (v33 == 0.0)
    v34 = 0;
  else
    v34 = LODWORD(v33);
  if ((v1 & 0x10000000) == 0)
    goto LABEL_118;
LABEL_61:
  v35 = *((float *)this + 39);
  if (v35 == 0.0)
    v36 = 0;
  else
    v36 = LODWORD(v35);
  if ((v1 & 0x80) != 0)
  {
LABEL_65:
    v37 = *((_QWORD *)this + 8);
    if ((v1 & 0x800000) != 0)
      goto LABEL_66;
LABEL_120:
    v39 = 0;
    if ((v1 & 0x2000000) != 0)
      goto LABEL_70;
LABEL_121:
    v41 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_74;
LABEL_122:
    v43 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_78;
    goto LABEL_123;
  }
LABEL_119:
  v37 = 0;
  if ((v1 & 0x800000) == 0)
    goto LABEL_120;
LABEL_66:
  v38 = *((float *)this + 34);
  if (v38 == 0.0)
    v39 = 0;
  else
    v39 = LODWORD(v38);
  if ((v1 & 0x2000000) == 0)
    goto LABEL_121;
LABEL_70:
  v40 = *((float *)this + 36);
  if (v40 == 0.0)
    v41 = 0;
  else
    v41 = LODWORD(v40);
  if ((v1 & 0x400) == 0)
    goto LABEL_122;
LABEL_74:
  v42 = *((float *)this + 21);
  if (v42 == 0.0)
    v43 = 0;
  else
    v43 = LODWORD(v42);
  if ((v1 & 0x1000) != 0)
  {
LABEL_78:
    v44 = *((int *)this + 23);
    if ((v1 & 0x800) != 0)
      goto LABEL_79;
    goto LABEL_124;
  }
LABEL_123:
  v44 = 0;
  if ((v1 & 0x800) != 0)
  {
LABEL_79:
    v45 = *((unsigned int *)this + 22);
    if ((v1 & 2) != 0)
      goto LABEL_80;
    goto LABEL_125;
  }
LABEL_124:
  v45 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_80:
    v46 = *((_QWORD *)this + 2);
    if ((v1 & 1) != 0)
      goto LABEL_81;
    goto LABEL_126;
  }
LABEL_125:
  v46 = 0;
  if ((v1 & 1) != 0)
  {
LABEL_81:
    v47 = *((_QWORD *)this + 1);
    if ((v1 & 0x100000000) != 0)
      goto LABEL_82;
LABEL_127:
    v49 = 0;
    if ((v1 & 0x400000000) != 0)
      goto LABEL_85;
LABEL_128:
    v51 = 0;
    if ((v1 & 0x200000000) != 0)
      goto LABEL_88;
LABEL_129:
    v53 = 0;
    if ((v1 & 0x80000000) != 0)
      goto LABEL_91;
LABEL_130:
    v55 = 0;
    if ((v1 & 0x800000000) != 0)
      goto LABEL_94;
    goto LABEL_131;
  }
LABEL_126:
  v47 = 0;
  if ((v1 & 0x100000000) == 0)
    goto LABEL_127;
LABEL_82:
  v48 = *((float *)this + 43);
  v49 = LODWORD(v48);
  if (v48 == 0.0)
    v49 = 0;
  if ((v1 & 0x400000000) == 0)
    goto LABEL_128;
LABEL_85:
  v50 = *((float *)this + 45);
  v51 = LODWORD(v50);
  if (v50 == 0.0)
    v51 = 0;
  if ((v1 & 0x200000000) == 0)
    goto LABEL_129;
LABEL_88:
  v52 = *((float *)this + 44);
  v53 = LODWORD(v52);
  if (v52 == 0.0)
    v53 = 0;
  if ((v1 & 0x80000000) == 0)
    goto LABEL_130;
LABEL_91:
  v54 = *((float *)this + 42);
  v55 = LODWORD(v54);
  if (v54 == 0.0)
    v55 = 0;
  if ((v1 & 0x800000000) != 0)
  {
LABEL_94:
    v56 = *((unsigned __int8 *)this + 184);
    if ((v1 & 0x1000000000) != 0)
      goto LABEL_95;
LABEL_132:
    v57 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_96;
LABEL_133:
    v58 = 0;
    return v69 ^ v2 ^ v68 ^ v67 ^ v66 ^ v65 ^ v64 ^ v63 ^ v62 ^ v61 ^ v60 ^ v18 ^ v20 ^ v22 ^ v23 ^ v25 ^ v27 ^ v29 ^ v30 ^ v32 ^ v34 ^ v36 ^ v37 ^ v39 ^ v41 ^ v43 ^ v44 ^ v45 ^ v46 ^ v47 ^ v49 ^ v51 ^ v53 ^ v55 ^ v56 ^ v57 ^ v58;
  }
LABEL_131:
  v56 = 0;
  if ((v1 & 0x1000000000) == 0)
    goto LABEL_132;
LABEL_95:
  v57 = *((unsigned __int8 *)this + 185);
  if ((v1 & 0x200) == 0)
    goto LABEL_133;
LABEL_96:
  v58 = *((unsigned int *)this + 20);
  return v69 ^ v2 ^ v68 ^ v67 ^ v66 ^ v65 ^ v64 ^ v63 ^ v62 ^ v61 ^ v60 ^ v18 ^ v20 ^ v22 ^ v23 ^ v25 ^ v27 ^ v29 ^ v30 ^ v32 ^ v34 ^ v36 ^ v37 ^ v39 ^ v41 ^ v43 ^ v44 ^ v45 ^ v46 ^ v47 ^ v49 ^ v51 ^ v53 ^ v55 ^ v56 ^ v57 ^ v58;
}

uint64_t CMMsl::SatelliteInfo::SatelliteInfo(uint64_t this)
{
  *(_QWORD *)this = off_100354428;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100354428;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::SatelliteInfo::~SatelliteInfo(CMMsl::SatelliteInfo *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::SatelliteInfo::SatelliteInfo(CMMsl::SatelliteInfo *this, const CMMsl::SatelliteInfo *a2)
{
  char v2;
  char v3;
  float result;

  *(_QWORD *)this = off_100354428;
  *((_DWORD *)this + 5) = 0;
  v2 = *((_BYTE *)a2 + 20);
  if ((v2 & 2) != 0)
  {
    result = *((float *)a2 + 3);
    v3 = 2;
    *((_BYTE *)this + 20) = 2;
    *((float *)this + 3) = result;
    v2 = *((_BYTE *)a2 + 20);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 2);
    v3 |= 1u;
    *((_BYTE *)this + 20) = v3;
    *((float *)this + 2) = result;
    v2 = *((_BYTE *)a2 + 20);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    result = *((float *)a2 + 4);
    *((_BYTE *)this + 20) = v3 | 4;
    *((float *)this + 4) = result;
  }
  return result;
}

uint64_t CMMsl::SatelliteInfo::operator=(uint64_t a1, uint64_t a2, float a3, float a4, float a5)
{
  char v6;
  char v7;
  int v8;
  uint64_t v9;
  int v10;
  _QWORD v12[2];
  int v13;
  int v14;

  if (a1 != a2)
  {
    v12[0] = off_100354428;
    v14 = 0;
    v6 = *(_BYTE *)(a2 + 20);
    if ((v6 & 2) != 0)
    {
      a3 = *(float *)(a2 + 12);
      v7 = 2;
      LOBYTE(v14) = 2;
      if ((v6 & 1) != 0)
      {
LABEL_4:
        a4 = *(float *)(a2 + 8);
        v7 |= 1u;
        LOBYTE(v14) = v7;
        if ((v6 & 4) != 0)
          goto LABEL_8;
        goto LABEL_9;
      }
    }
    else
    {
      v7 = 0;
      if ((*(_BYTE *)(a2 + 20) & 1) != 0)
        goto LABEL_4;
    }
    if ((v6 & 4) != 0)
    {
LABEL_8:
      a5 = *(float *)(a2 + 16);
      LOBYTE(v14) = v7 | 4;
    }
LABEL_9:
    v8 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v14;
    v14 = v8;
    v9 = *(_QWORD *)(a1 + 8);
    *(float *)(a1 + 8) = a4;
    *(float *)(a1 + 12) = a3;
    v12[1] = v9;
    v10 = *(_DWORD *)(a1 + 16);
    *(float *)(a1 + 16) = a5;
    v13 = v10;
    PB::Base::~Base((PB::Base *)v12);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::SatelliteInfo *a2, CMMsl::SatelliteInfo *a3)
{
  int v3;
  int v4;
  int v5;
  float result;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v4;
  v5 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v5;
  result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

float CMMsl::SatelliteInfo::SatelliteInfo(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100354428;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_100354428;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::SatelliteInfo::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  int v9;
  int v10;

  if (a1 != a2)
  {
    v8[0] = off_100354428;
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_DWORD *)(a2 + 16);
    v10 = *(_DWORD *)(a1 + 20);
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 20) = v3;
    *(_QWORD *)(a1 + 8) = v6;
    v8[1] = v5;
    LODWORD(v5) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v4;
    v9 = v5;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::SatelliteInfo::formatText(CMMsl::SatelliteInfo *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 1) == 0)
  {
    if ((*((_BYTE *)this + 20) & 2) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(a2, "elevationDeg", *((float *)this + 3));
    if ((*((_BYTE *)this + 20) & 4) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_4;
  }
  PB::TextFormatter::format(a2, "azimuthDeg", *((float *)this + 2));
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "l1Cn0", *((float *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SatelliteInfo::readFrom(CMMsl::SatelliteInfo *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((_BYTE *)this + 20) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_32;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
      }
      else if ((_DWORD)v20 == 2)
      {
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_32;
        *((_DWORD *)this + 2) = *(_DWORD *)(*(_QWORD *)a2 + v2);
      }
      else
      {
        if ((_DWORD)v20 != 1)
        {
          result = PB::Reader::skip(a2, v20, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          goto LABEL_37;
        }
        *((_BYTE *)this + 20) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
        {
LABEL_32:
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_37;
        }
        *((_DWORD *)this + 3) = *(_DWORD *)(*(_QWORD *)a2 + v2);
      }
      v2 = *((_QWORD *)a2 + 1) + 4;
      *((_QWORD *)a2 + 1) = v2;
LABEL_37:
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::SatelliteInfo::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 12), 1u);
    v4 = *(_BYTE *)(v3 + 20);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        return this;
      return PB::Writer::write(a2, *(float *)(v3 + 16), 3u);
    }
  }
  else if ((*(_BYTE *)(this + 20) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 8), 2u);
  if ((*(_BYTE *)(v3 + 20) & 4) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 16), 3u);
  return this;
}

BOOL CMMsl::SatelliteInfo::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 4) == 0;
  if ((*(_BYTE *)(a1 + 20) & 4) != 0)
    return (*(_BYTE *)(a2 + 20) & 4) != 0 && *(float *)(a1 + 16) == *(float *)(a2 + 16);
  return v2;
}

uint64_t CMMsl::SatelliteInfo::hash_value(CMMsl::SatelliteInfo *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;

  if ((*((_BYTE *)this + 20) & 2) != 0)
  {
    v6 = *((float *)this + 3);
    v1 = LODWORD(v6);
    if (v6 == 0.0)
      v1 = 0;
    if ((*((_BYTE *)this + 20) & 1) != 0)
    {
LABEL_3:
      v2 = *((float *)this + 2);
      v3 = LODWORD(v2);
      if (v2 == 0.0)
        v3 = 0;
      if ((*((_BYTE *)this + 20) & 4) != 0)
        goto LABEL_6;
LABEL_13:
      v5 = 0;
      return v3 ^ v1 ^ v5;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 20) & 1) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((*((_BYTE *)this + 20) & 4) == 0)
    goto LABEL_13;
LABEL_6:
  v4 = *((float *)this + 4);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  return v3 ^ v1 ^ v5;
}

void CMMsl::SessionOverride::~SessionOverride(CMMsl::SessionOverride *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::SessionOverride::SessionOverride(uint64_t this, const CMMsl::SessionOverride *a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)this = off_100354460;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::SessionOverride::operator=(uint64_t a1, uint64_t a2, double a3)
{
  int v3;
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;

  if (a1 != a2)
  {
    v11[0] = off_100354460;
    HIDWORD(v12) = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      BYTE4(v12) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v3 = *(_DWORD *)(a2 + 16);
        BYTE4(v12) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = HIDWORD(v12);
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_QWORD *)(a1 + 16);
    *(double *)(a1 + 8) = a3;
    *(_DWORD *)(a1 + 16) = v3;
    *(_DWORD *)(a1 + 20) = v7;
    v11[1] = v8;
    v12 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SessionOverride *a2, CMMsl::SessionOverride *a3)
{
  int v3;
  double result;
  int v5;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  return result;
}

double CMMsl::SessionOverride::SessionOverride(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100354460;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100354460;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::SessionOverride::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  if (a1 != a2)
  {
    v8[0] = off_100354460;
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    v8[1] = v5;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::SessionOverride::formatText(CMMsl::SessionOverride *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "sessionType", *((_DWORD *)this + 4));
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SessionOverride::readFrom(CMMsl::SessionOverride *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_47;
            }
            v30 = v21++;
            v31 = *(_BYTE *)(v22 + v30);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v25) = 0;
LABEL_46:
          v2 = v30 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v25;
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SessionOverride::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 2u);
  return this;
}

uint64_t CMMsl::SessionOverride::hash_value(CMMsl::SessionOverride *this)
{
  double v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0;
    return v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((unsigned int *)this + 4);
  return v2 ^ *(_QWORD *)&v1;
}

void CMMsl::SignalEnvironment::~SignalEnvironment(CMMsl::SignalEnvironment *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::SignalEnvironment::SignalEnvironment(uint64_t this, const CMMsl::SignalEnvironment *a2)
{
  int v2;

  *(_QWORD *)this = off_100354498;
  *(_QWORD *)(this + 8) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::SignalEnvironment::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v6[0] = off_100354498;
    v3 = *(unsigned __int8 *)(a2 + 12);
    v4 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = (v3 << 31 >> 31) & *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = v3 & 1;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v6[0] = off_100354498;
    v3 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 12) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::SignalEnvironment *a2, CMMsl::SignalEnvironment *a3)
{
  int v3;
  int v4;

  v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  v4 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  return this;
}

uint64_t CMMsl::SignalEnvironment::formatText(CMMsl::SignalEnvironment *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 12) & 1) != 0)
    PB::TextFormatter::format(a2, "type", *((_DWORD *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SignalEnvironment::readFrom(CMMsl::SignalEnvironment *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 12) |= 1u;
        v20 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v3 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          else
            v2 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_43;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
LABEL_42:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)a2 + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 2) = v24;
      }
      else
      {
        result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SignalEnvironment::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 12) & 1) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 8), 1u);
  return this;
}

uint64_t CMMsl::SignalEnvironment::hash_value(CMMsl::SignalEnvironment *this)
{
  if ((*((_BYTE *)this + 12) & 1) != 0)
    return *((int *)this + 2);
  else
    return 0;
}

void CMMsl::SignificantUserInteraction::~SignificantUserInteraction(CMMsl::SignificantUserInteraction *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::SignificantUserInteraction::SignificantUserInteraction(uint64_t this, const CMMsl::SignificantUserInteraction *a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)this = off_1003544D0;
  *(_QWORD *)(this + 16) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::SignificantUserInteraction::operator=(uint64_t a1, uint64_t a2)
{
  void (**v3)(CMMsl::SignificantUserInteraction *__hidden);
  char v4;
  char v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;

  if (a1 != a2)
  {
    v3 = off_1003544D0;
    v11[0] = off_1003544D0;
    HIDWORD(v12) = 0;
    v4 = *(_BYTE *)(a2 + 20);
    if ((v4 & 1) != 0)
    {
      v3 = *(void (***)(CMMsl::SignificantUserInteraction *__hidden))(a2 + 8);
      BYTE4(v12) = 1;
      v5 = 3;
      if ((v4 & 2) != 0)
        goto LABEL_4;
    }
    else
    {
      v5 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
      {
LABEL_4:
        v6 = *(_DWORD *)(a2 + 16);
        BYTE4(v12) = v5;
LABEL_7:
        v7 = HIDWORD(v12);
        v8 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v3;
        v11[1] = v8;
        v9 = *(_QWORD *)(a1 + 16);
        *(_DWORD *)(a1 + 16) = v6;
        *(_DWORD *)(a1 + 20) = v7;
        v12 = v9;
        PB::Base::~Base((PB::Base *)v11);
        return a1;
      }
    }
    v6 = 0;
    goto LABEL_7;
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v8[0] = off_1003544D0;
    v8[1] = v5;
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v4;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::SignificantUserInteraction *a2, CMMsl::SignificantUserInteraction *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  return this;
}

uint64_t CMMsl::SignificantUserInteraction::formatText(CMMsl::SignificantUserInteraction *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 1));
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "type", *((_DWORD *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SignificantUserInteraction::readFrom(CMMsl::SignificantUserInteraction *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t result;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)a2 + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v27 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v28 = *(_QWORD *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v31 = 0;
          if (v2 <= v27)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_64;
            }
            v40 = v27++;
            v41 = *(_BYTE *)(v28 + v40);
            *((_QWORD *)a2 + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_63;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v31) = 0;
LABEL_63:
          v3 = v40 + 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v3 = v27 + 1;
            *((_QWORD *)a2 + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v3;
            v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_64:
        *((_DWORD *)this + 4) = v31;
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v34 = 0;
          v35 = 0;
          v25 = 0;
          if (v2 <= v21)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v21)
            {
              v25 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_60;
            }
            v36 = v21++;
            v37 = *(_BYTE *)(v22 + v36);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0)
              break;
            v34 += 7;
            v14 = v35++ > 8;
            if (v14)
            {
              v25 = 0;
              goto LABEL_59;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v25 = 0;
LABEL_59:
          v3 = v36 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v3 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v3;
            v14 = v24++ > 8;
            if (v14)
            {
              v25 = 0;
              break;
            }
          }
        }
LABEL_60:
        *((_QWORD *)this + 1) = v25;
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SignificantUserInteraction::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 2u);
  return this;
}

uint64_t CMMsl::SignificantUserInteraction::hash_value(CMMsl::SignificantUserInteraction *this)
{
  uint64_t v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((_QWORD *)this + 1);
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_5:
    v2 = 0;
    return v2 ^ v1;
  }
  v1 = 0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_5;
LABEL_3:
  v2 = *((int *)this + 4);
  return v2 ^ v1;
}

void CMMsl::SimActivityEvent::~SimActivityEvent(CMMsl::SimActivityEvent *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100354508;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100354508;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100354508;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::SimActivityEvent::SimActivityEvent(uint64_t this, const CMMsl::SimActivityEvent *a2)
{
  uint64_t v2;

  *(_QWORD *)this = off_100354508;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  if ((*((_BYTE *)a2 + 24) & 1) != 0)
  {
    v2 = *((_QWORD *)a2 + 2);
    *(_BYTE *)(this + 24) = 1;
    *(_QWORD *)(this + 16) = v2;
  }
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

uint64_t CMMsl::SimMotionState::SimMotionState(uint64_t result, uint64_t a2)
{
  int v2;

  *(_QWORD *)result = off_100354540;
  *(_DWORD *)(result + 12) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    v2 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_DWORD *)(result + 8) = v2;
  }
  return result;
}

{
  *(_QWORD *)result = off_100354540;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = off_100354540;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::SimActivityEvent::operator=(uint64_t a1, const CMMsl::SimActivityEvent *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (**v9)(CMMsl::SimActivityEvent *__hidden);
  uint64_t v10;
  uint64_t v11;
  int v12;

  if ((const CMMsl::SimActivityEvent *)a1 != a2)
  {
    CMMsl::SimActivityEvent::SimActivityEvent((uint64_t)&v9, a2);
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v12;
    v12 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
    v7 = v10;
    v6 = v11;
    v10 = 0;
    v11 = v5;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v6;
    v9 = off_100354508;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::SimActivityEvent *a2, CMMsl::SimActivityEvent *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v5 = *(_QWORD *)(this + 8);
  v4 = *(_QWORD *)(this + 16);
  v6 = *((_QWORD *)a2 + 2);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *(_QWORD *)(this + 16) = v6;
  *((_QWORD *)a2 + 1) = v5;
  *((_QWORD *)a2 + 2) = v4;
  return this;
}

uint64_t CMMsl::SimActivityEvent::SimActivityEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_100354508;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v3;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_100354508;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v3;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t CMMsl::SimActivityEvent::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v5 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 8) = 0;
    v6 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    v10[1] = 0;
    v10[2] = v8;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v4;
    v10[0] = off_100354508;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::SimActivityEvent::formatText(CMMsl::SimActivityEvent *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "motionState");
  if ((*((_BYTE *)this + 24) & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SimActivityEvent::readFrom(CMMsl::SimActivityEvent *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t result;
  char v30;
  unsigned int v31;
  unint64_t v32;
  char v33;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
        operator new();
      if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 24) |= 1u;
        v21 = *((_QWORD *)a2 + 1);
        v22 = *((_QWORD *)a2 + 2);
        v23 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v22)
        {
          v30 = 0;
          v31 = 0;
          v26 = 0;
          if (v22 <= v21)
            v22 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v22 == v21)
            {
              v26 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_43;
            }
            v32 = v21 + 1;
            v33 = *(_BYTE *)(v23 + v21);
            *((_QWORD *)a2 + 1) = v32;
            v26 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0)
              break;
            v30 += 7;
            v21 = v32;
            v14 = v31++ > 8;
            if (v14)
            {
LABEL_39:
              v26 = 0;
              goto LABEL_43;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v26 = 0;
        }
        else
        {
          v24 = 0;
          v25 = 0;
          v26 = 0;
          while (1)
          {
            v27 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v28 = *(_BYTE *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0)
              break;
            v24 += 7;
            v21 = v27;
            v14 = v25++ > 8;
            if (v14)
              goto LABEL_39;
          }
        }
LABEL_43:
        *((_QWORD *)this + 2) = v26;
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SimMotionState::SimMotionState(uint64_t this)
{
  *(_QWORD *)this = off_100354540;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100354540;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

uint64_t CMMsl::SimActivityEvent::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = this;
  if ((*(_BYTE *)(this + 24) & 1) != 0)
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 16), 1u);
  v4 = *(const PB::Base **)(v3 + 8);
  if (v4)
    return PB::Writer::writeSubmessage(a2, v4, 2u);
  return this;
}

BOOL CMMsl::SimMotionState::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 12);
  result = (*(_BYTE *)(a2 + 12) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 12) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::SimActivityEvent::hash_value(CMMsl::SimActivityEvent *this)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if ((*((_BYTE *)this + 24) & 1) != 0)
    v1 = *((_QWORD *)this + 2);
  else
    v1 = 0;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *(_BYTE *)(v2 + 12);
    v2 = *(unsigned int *)(v2 + 8);
    if ((v3 & 1) == 0)
      v2 = 0;
  }
  return v2 ^ v1;
}

uint64_t CMMsl::SimActivityEvent::makeMotionState(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

void CMMsl::SimMotionState::~SimMotionState(CMMsl::SimMotionState *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::SimMotionState::SimMotionState(uint64_t this, const CMMsl::SimMotionState *a2)
{
  int v2;

  *(_QWORD *)this = off_100354540;
  *(_DWORD *)(this + 12) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::SimMotionState::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v6[0] = off_100354540;
    v3 = *(_BYTE *)(a2 + 12) & 1;
    v4 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v6[0] = off_100354540;
    v3 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 12) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::SimMotionState *a2, CMMsl::SimMotionState *a3)
{
  int v3;
  int v4;

  v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  v4 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  return this;
}

uint64_t CMMsl::SimMotionState::formatText(CMMsl::SimMotionState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 12) & 1) != 0)
    PB::TextFormatter::format(a2, "type", *((_DWORD *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SimMotionState::readFrom(CMMsl::SimMotionState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 12) |= 1u;
        v20 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v3 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          else
            v2 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_43;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
LABEL_42:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)a2 + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 2) = v24;
      }
      else
      {
        result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SimMotionState::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 12) & 1) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 8), 1u);
  return this;
}

uint64_t CMMsl::SimMotionState::hash_value(CMMsl::SimMotionState *this)
{
  if ((*((_BYTE *)this + 12) & 1) != 0)
    return *((unsigned int *)this + 2);
  else
    return 0;
}

void CMMsl::SitStandDetectorFeatures::~SitStandDetectorFeatures(CMMsl::SitStandDetectorFeatures *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::SitStandDetectorFeatures::SitStandDetectorFeatures(CMMsl::SitStandDetectorFeatures *this, const CMMsl::SitStandDetectorFeatures *a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)this = off_100354578;
  *((_DWORD *)this + 11) = 0;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 44) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 44) & 0x10) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 7);
    v3 |= 0x10u;
    *((_BYTE *)this + 44) = v3;
    *((_DWORD *)this + 7) = v4;
    v2 = *((_BYTE *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((_BYTE *)this + 44) = v3;
    *((_DWORD *)this + 4) = v4;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_15;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *((_BYTE *)this + 44) = v3;
  *((_DWORD *)this + 10) = v4;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0)
      goto LABEL_10;
    goto LABEL_16;
  }
LABEL_15:
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *((_BYTE *)this + 44) = v3;
  *((_DWORD *)this + 6) = v4;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_17;
  }
LABEL_16:
  LODWORD(v4) = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *((_BYTE *)this + 44) = v3;
  *((_DWORD *)this + 5) = v4;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0)
      return *(float *)&v4;
    goto LABEL_18;
  }
LABEL_17:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *((_BYTE *)this + 44) = v3;
  *((_DWORD *)this + 9) = v4;
  if ((*((_BYTE *)a2 + 44) & 0x20) == 0)
    return *(float *)&v4;
LABEL_18:
  LODWORD(v4) = *((_DWORD *)a2 + 8);
  *((_BYTE *)this + 44) = v3 | 0x20;
  *((_DWORD *)this + 8) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::SitStandDetectorFeatures::operator=(uint64_t a1, const CMMsl::SitStandDetectorFeatures *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  int v12;

  if ((const CMMsl::SitStandDetectorFeatures *)a1 != a2)
  {
    CMMsl::SitStandDetectorFeatures::SitStandDetectorFeatures((CMMsl::SitStandDetectorFeatures *)&v7, a2);
    v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v12;
    v12 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v8 = v4;
    LODWORD(v4) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v11;
    v11 = v4;
    v5 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v9;
    v9 = v5;
    *(_QWORD *)&v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v10;
    v10 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::SitStandDetectorFeatures *a2, CMMsl::SitStandDetectorFeatures *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  result = *((float *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((float *)a2 + 8) = result;
  return result;
}

float CMMsl::SitStandDetectorFeatures::SitStandDetectorFeatures(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100354578;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  result = *(float *)(a2 + 32);
  *(float *)(a1 + 32) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_100354578;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  result = *(float *)(a2 + 32);
  *(float *)(a1 + 32) = result;
  return result;
}

uint64_t CMMsl::SitStandDetectorFeatures::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  __int128 v12;
  uint64_t v13;
  int v14;
  int v15;

  if (a1 != a2)
  {
    v11[0] = off_100354578;
    v3 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a2 + 44) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a2 + 40);
    v15 = *(_DWORD *)(a1 + 44);
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v11[1] = v6;
    v14 = *(_DWORD *)(a1 + 40);
    v7 = *(_OWORD *)(a2 + 16);
    v12 = *(_OWORD *)(a1 + 16);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 44) = v3;
    *(_DWORD *)(a1 + 40) = v5;
    *(_OWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 32) = v9;
    v13 = v8;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

uint64_t CMMsl::SitStandDetectorFeatures::formatText(CMMsl::SitStandDetectorFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "magnitudeRangeInertialVertical", *((float *)this + 4));
    v5 = *((_BYTE *)this + 44);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*((_BYTE *)this + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "maxAngleBetweenThighAndShinDeg", *((float *)this + 5));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "minAngleBetweenThighAndShinDeg", *((float *)this + 6));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "motionPlanarity", *((float *)this + 7));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "timeToReachMaxThighAndShinAngleThreshold", *((float *)this + 8));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0)
      goto LABEL_8;
LABEL_16:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    if ((*((_BYTE *)this + 44) & 0x80) == 0)
      return PB::TextFormatter::endObject(a2);
LABEL_17:
    PB::TextFormatter::format(a2, "vm", *((float *)this + 10));
    return PB::TextFormatter::endObject(a2);
  }
LABEL_15:
  PB::TextFormatter::format(a2, "timeToReachMinThighAndShinAngleThreshold", *((float *)this + 9));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 1) != 0)
    goto LABEL_16;
LABEL_8:
  if (v5 < 0)
    goto LABEL_17;
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SitStandDetectorFeatures::readFrom(CMMsl::SitStandDetectorFeatures *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 44) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_47;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_50;
        case 2u:
          *((_BYTE *)this + 44) |= 0x10u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_47;
          *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_49;
        case 3u:
          *((_BYTE *)this + 44) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_47;
          *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_49;
        case 4u:
          *((_BYTE *)this + 44) |= 0x80u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_47;
          *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_49;
        case 5u:
          *((_BYTE *)this + 44) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_47;
          *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_49;
        case 6u:
          *((_BYTE *)this + 44) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_47;
          *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_49;
        case 7u:
          *((_BYTE *)this + 44) |= 0x40u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_47;
          *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_49;
        case 8u:
          *((_BYTE *)this + 44) |= 0x20u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          {
LABEL_47:
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_49:
            v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_50:
            *((_QWORD *)a2 + 1) = v2;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SitStandDetectorFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 44);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(this + 44) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 2u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 3u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 4u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 5u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 6u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 32), 8u);
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 7u);
  if ((*(_BYTE *)(v3 + 44) & 0x20) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 32), 8u);
  return this;
}

uint64_t CMMsl::SitStandDetectorFeatures::hash_value(CMMsl::SitStandDetectorFeatures *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;

  if ((*((_BYTE *)this + 44) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 44) & 0x10) != 0)
      goto LABEL_3;
LABEL_27:
    v3 = 0;
    if ((*((_BYTE *)this + 44) & 2) != 0)
      goto LABEL_6;
LABEL_28:
    v5 = 0;
    if ((*((_BYTE *)this + 44) & 0x80) != 0)
      goto LABEL_9;
LABEL_29:
    v7 = 0;
    if ((*((_BYTE *)this + 44) & 8) != 0)
      goto LABEL_12;
LABEL_30:
    v9 = 0;
    if ((*((_BYTE *)this + 44) & 4) != 0)
      goto LABEL_15;
LABEL_31:
    v11 = 0;
    if ((*((_BYTE *)this + 44) & 0x40) != 0)
      goto LABEL_18;
    goto LABEL_32;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 44) & 0x10) == 0)
    goto LABEL_27;
LABEL_3:
  v2 = *((float *)this + 7);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 44) & 2) == 0)
    goto LABEL_28;
LABEL_6:
  v4 = *((float *)this + 4);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((*((_BYTE *)this + 44) & 0x80) == 0)
    goto LABEL_29;
LABEL_9:
  v6 = *((float *)this + 10);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((*((_BYTE *)this + 44) & 8) == 0)
    goto LABEL_30;
LABEL_12:
  v8 = *((float *)this + 6);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  if ((*((_BYTE *)this + 44) & 4) == 0)
    goto LABEL_31;
LABEL_15:
  v10 = *((float *)this + 5);
  v11 = LODWORD(v10);
  if (v10 == 0.0)
    v11 = 0;
  if ((*((_BYTE *)this + 44) & 0x40) != 0)
  {
LABEL_18:
    v12 = *((float *)this + 9);
    v13 = LODWORD(v12);
    if (v12 == 0.0)
      v13 = 0;
    if ((*((_BYTE *)this + 44) & 0x20) != 0)
      goto LABEL_21;
LABEL_33:
    v15 = 0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15;
  }
LABEL_32:
  v13 = 0;
  if ((*((_BYTE *)this + 44) & 0x20) == 0)
    goto LABEL_33;
LABEL_21:
  v14 = *((float *)this + 8);
  v15 = LODWORD(v14);
  if (v14 == 0.0)
    v15 = 0;
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15;
}

void CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::~SitStandDetectorPosteriorBufferStatsForSitToStand(CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::SitStandDetectorPosteriorBufferStatsForSitToStand(CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *this, const CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)this = off_1003545B0;
  *((_DWORD *)this + 7) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 28) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 8) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *((_BYTE *)this + 28) = v3;
    *((_DWORD *)this + 6) = v4;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((_BYTE *)this + 28) = v3;
    *((_DWORD *)this + 4) = v4;
    if ((*((_BYTE *)a2 + 28) & 4) == 0)
      return *(float *)&v4;
  }
  else if ((v2 & 4) == 0)
  {
    return *(float *)&v4;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 5);
  *((_BYTE *)this + 28) = v3 | 4;
  *((_DWORD *)this + 5) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::operator=(uint64_t a1, const CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;

  if ((const CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *)a1 != a2)
  {
    CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::SitStandDetectorPosteriorBufferStatsForSitToStand((CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *)&v9, a2);
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v12;
    v12 = v3;
    v4 = v11;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = v4;
    v7 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v13;
    v13 = v7;
    v10 = v5;
    v11 = v6;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *a2, CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  result = *((float *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((float *)a2 + 5) = result;
  return result;
}

float CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::SitStandDetectorPosteriorBufferStatsForSitToStand(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_1003545B0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_1003545B0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];
  int v10;
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    v4 = *(_DWORD *)(a2 + 24);
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    v10 = *(_DWORD *)(a1 + 24);
    v7 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 24) = v4;
    v9[0] = off_1003545B0;
    v11 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v3;
    *(_QWORD *)(a1 + 16) = v7;
    v9[1] = v5;
    v9[2] = v6;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::formatText(CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "maxPosterior", *((float *)this + 4));
    v5 = *((_BYTE *)this + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "minPosterior", *((float *)this + 6));
      if ((*((_BYTE *)this + 28) & 1) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "meanPosterior", *((float *)this + 5));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 8) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 1) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::readFrom(CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 28) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_35;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_38;
        case 2u:
          *((_BYTE *)this + 28) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_35;
          *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_37;
        case 3u:
          *((_BYTE *)this + 28) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_35;
          *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_37;
        case 4u:
          *((_BYTE *)this + 28) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_37:
            v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_38:
            *((_QWORD *)a2 + 1) = v2;
          }
          else
          {
LABEL_35:
            *((_BYTE *)a2 + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 20), 4u);
  }
LABEL_8:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 3u);
  if ((*(_BYTE *)(v3 + 28) & 4) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 20), 4u);
  return this;
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::hash_value(CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;

  if ((*((_BYTE *)this + 28) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 28) & 8) != 0)
      goto LABEL_3;
LABEL_15:
    v3 = 0;
    if ((*((_BYTE *)this + 28) & 2) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 28) & 8) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((float *)this + 6);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 28) & 2) != 0)
  {
LABEL_6:
    v4 = *((float *)this + 4);
    v5 = LODWORD(v4);
    if (v4 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 28) & 4) != 0)
      goto LABEL_9;
LABEL_17:
    v7 = 0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7;
  }
LABEL_16:
  v5 = 0;
  if ((*((_BYTE *)this + 28) & 4) == 0)
    goto LABEL_17;
LABEL_9:
  v6 = *((float *)this + 5);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7;
}

void CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::~SitStandDetectorPosteriorBufferStatsForStandToSit(CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::SitStandDetectorPosteriorBufferStatsForStandToSit(CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *this, const CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)this = off_1003545E8;
  *((_DWORD *)this + 7) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 28) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 8) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *((_BYTE *)this + 28) = v3;
    *((_DWORD *)this + 6) = v4;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((_BYTE *)this + 28) = v3;
    *((_DWORD *)this + 4) = v4;
    if ((*((_BYTE *)a2 + 28) & 4) == 0)
      return *(float *)&v4;
  }
  else if ((v2 & 4) == 0)
  {
    return *(float *)&v4;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 5);
  *((_BYTE *)this + 28) = v3 | 4;
  *((_DWORD *)this + 5) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::operator=(uint64_t a1, const CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;

  if ((const CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *)a1 != a2)
  {
    CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::SitStandDetectorPosteriorBufferStatsForStandToSit((CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *)&v9, a2);
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v12;
    v12 = v3;
    v4 = v11;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = v4;
    v7 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v13;
    v13 = v7;
    v10 = v5;
    v11 = v6;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *a2, CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  result = *((float *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((float *)a2 + 5) = result;
  return result;
}

float CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::SitStandDetectorPosteriorBufferStatsForStandToSit(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_1003545E8;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_1003545E8;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];
  int v10;
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    v4 = *(_DWORD *)(a2 + 24);
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    v10 = *(_DWORD *)(a1 + 24);
    v7 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 24) = v4;
    v9[0] = off_1003545E8;
    v11 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v3;
    *(_QWORD *)(a1 + 16) = v7;
    v9[1] = v5;
    v9[2] = v6;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::formatText(CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "maxPosterior", *((float *)this + 4));
    v5 = *((_BYTE *)this + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "minPosterior", *((float *)this + 6));
      if ((*((_BYTE *)this + 28) & 1) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "meanPosterior", *((float *)this + 5));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 8) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 1) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::readFrom(CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 28) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_35;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_38;
        case 2u:
          *((_BYTE *)this + 28) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_35;
          *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_37;
        case 3u:
          *((_BYTE *)this + 28) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_35;
          *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_37;
        case 4u:
          *((_BYTE *)this + 28) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_37:
            v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_38:
            *((_QWORD *)a2 + 1) = v2;
          }
          else
          {
LABEL_35:
            *((_BYTE *)a2 + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 20), 4u);
  }
LABEL_8:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 3u);
  if ((*(_BYTE *)(v3 + 28) & 4) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 20), 4u);
  return this;
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::hash_value(CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;

  if ((*((_BYTE *)this + 28) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 28) & 8) != 0)
      goto LABEL_3;
LABEL_15:
    v3 = 0;
    if ((*((_BYTE *)this + 28) & 2) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 28) & 8) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((float *)this + 6);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 28) & 2) != 0)
  {
LABEL_6:
    v4 = *((float *)this + 4);
    v5 = LODWORD(v4);
    if (v4 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 28) & 4) != 0)
      goto LABEL_9;
LABEL_17:
    v7 = 0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7;
  }
LABEL_16:
  v5 = 0;
  if ((*((_BYTE *)this + 28) & 4) == 0)
    goto LABEL_17;
LABEL_9:
  v6 = *((float *)this + 5);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7;
}

void CMMsl::SitStandDetectorTransition::~SitStandDetectorTransition(CMMsl::SitStandDetectorTransition *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::SitStandDetectorTransition::SitStandDetectorTransition(uint64_t this, const CMMsl::SitStandDetectorTransition *a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)this = off_100354620;
  *(_QWORD *)(this + 16) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::SitStandDetectorTransition::operator=(uint64_t a1, uint64_t a2, double a3)
{
  char v4;
  char v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;

  if (a1 != a2)
  {
    v11[0] = off_100354620;
    HIDWORD(v12) = 0;
    v4 = *(_BYTE *)(a2 + 20);
    if ((v4 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      BYTE4(v12) = 1;
      v5 = 3;
      if ((v4 & 2) != 0)
        goto LABEL_4;
    }
    else
    {
      v5 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
      {
LABEL_4:
        v6 = *(_DWORD *)(a2 + 16);
        BYTE4(v12) = v5;
LABEL_7:
        v7 = HIDWORD(v12);
        v8 = *(_QWORD *)(a1 + 8);
        v9 = *(_QWORD *)(a1 + 16);
        *(double *)(a1 + 8) = a3;
        *(_DWORD *)(a1 + 16) = v6;
        *(_DWORD *)(a1 + 20) = v7;
        v11[1] = v8;
        v12 = v9;
        PB::Base::~Base((PB::Base *)v11);
        return a1;
      }
    }
    v6 = 0;
    goto LABEL_7;
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SitStandDetectorTransition *a2, CMMsl::SitStandDetectorTransition *a3)
{
  int v3;
  double result;
  int v5;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  return result;
}

double CMMsl::SitStandDetectorTransition::SitStandDetectorTransition(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100354620;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100354620;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::SitStandDetectorTransition::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  if (a1 != a2)
  {
    v8[0] = off_100354620;
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    v8[1] = v5;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::SitStandDetectorTransition::formatText(CMMsl::SitStandDetectorTransition *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "transitionType", *((_DWORD *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SitStandDetectorTransition::readFrom(CMMsl::SitStandDetectorTransition *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_47;
            }
            v30 = v21++;
            v31 = *(_BYTE *)(v22 + v30);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v25) = 0;
LABEL_46:
          v2 = v30 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v25;
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SitStandDetectorTransition::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 2u);
  return this;
}

uint64_t CMMsl::SitStandDetectorTransition::hash_value(CMMsl::SitStandDetectorTransition *this)
{
  double v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0;
    return v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((int *)this + 4);
  return v2 ^ *(_QWORD *)&v1;
}

void CMMsl::Skeleton2D::~Skeleton2D(CMMsl::Skeleton2D *this)
{
  void **v2;

  *(_QWORD *)this = off_100354658;
  v2 = (void **)((char *)this + 16);
  sub_1002394A8(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = off_100354658;
  v2 = (void **)((char *)this + 16);
  sub_1002394A8(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = off_100354658;
  v2 = (void **)((char *)this + 16);
  sub_1002394A8(&v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::Skeleton2D::Skeleton2D(uint64_t this, const CMMsl::Skeleton2D *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_100354658;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_DWORD *)(this + 48) = 0;
  if (*((_QWORD *)a2 + 2) != *((_QWORD *)a2 + 3))
    sub_1001F4DD8();
  v2 = *((_BYTE *)a2 + 48);
  if ((v2 & 2) != 0)
  {
    v3 = *((_QWORD *)a2 + 5);
    *(_BYTE *)(this + 48) |= 2u;
    *(_QWORD *)(this + 40) = v3;
    v2 = *((_BYTE *)a2 + 48);
  }
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 48) |= 1u;
    *(_QWORD *)(this + 8) = v4;
  }
  return this;
}

void sub_1001F4DD8()
{
  operator new();
}

void sub_1001F4F0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::Skeleton2D::operator=(uint64_t a1, const CMMsl::Skeleton2D *a2)
{
  int v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (**v9)(CMMsl::Skeleton2D *__hidden);
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void **v15;

  if ((const CMMsl::Skeleton2D *)a1 != a2)
  {
    CMMsl::Skeleton2D::Skeleton2D((uint64_t)&v9, a2);
    v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v14;
    v14 = v3;
    v4 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v11;
    v11 = v4;
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v12;
    v12 = v5;
    v6 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v13;
    v13 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v10;
    v10 = v7;
    v9 = off_100354658;
    v15 = (void **)&v11;
    sub_1002394A8(&v15);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::Skeleton2D *a2, CMMsl::Skeleton2D *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  v7 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

uint64_t CMMsl::Skeleton2D::Skeleton2D(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;

  *(_QWORD *)a1 = off_100354658;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = (_OWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  sub_100239524((_QWORD *)(a1 + 16));
  *v4 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  return a1;
}

uint64_t CMMsl::Skeleton2D::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (**v9)(CMMsl::Skeleton2D *__hidden);
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void **v15;

  if (a1 != a2)
  {
    CMMsl::Skeleton2D::Skeleton2D((uint64_t)&v9, a2);
    v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v14;
    v14 = v3;
    v4 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v11;
    v11 = v4;
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v12;
    v12 = v5;
    v6 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v13;
    v13 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v10;
    v10 = v7;
    v9 = off_100354658;
    v15 = (void **)&v11;
    sub_1002394A8(&v15);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::Skeleton2D::formatText(CMMsl::Skeleton2D *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 48) & 1) != 0)
    PB::TextFormatter::format(a2, "globalMachtime", *((double *)this + 1));
  v5 = (uint64_t *)*((_QWORD *)this + 2);
  v6 = (uint64_t *)*((_QWORD *)this + 3);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "joint");
  }
  if ((*((_BYTE *)this + 48) & 2) != 0)
    PB::TextFormatter::format(a2, "localMachtime", *((double *)this + 5));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Skeleton2D::readFrom(CMMsl::Skeleton2D *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
        break;
      if ((_DWORD)v20 == 2)
      {
        *((_BYTE *)this + 48) |= 2u;
        v22 = *((_QWORD *)a2 + 1);
        if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_30;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v22);
LABEL_34:
        *((_QWORD *)a2 + 1) += 8;
        goto LABEL_35;
      }
      if ((_DWORD)v20 == 1)
        sub_1001F545C();
      result = PB::Reader::skip(a2, v20, v11 & 7, 0);
      if (!(_DWORD)result)
        return result;
LABEL_35:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    *((_BYTE *)this + 48) |= 1u;
    v21 = *((_QWORD *)a2 + 1);
    if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((_QWORD *)a2 + 2))
    {
LABEL_30:
      *((_BYTE *)a2 + 24) = 1;
      goto LABEL_35;
    }
    *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v21);
    goto LABEL_34;
  }
  return v4 == 0;
}

void sub_1001F545C()
{
  operator new();
}

void sub_1001F559C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::Skeleton2D::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base **v4;
  const PB::Base **v5;
  const PB::Base *v6;
  char v7;

  v3 = this;
  v4 = *(const PB::Base ***)(this + 16);
  v5 = *(const PB::Base ***)(this + 24);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::writeSubmessage(a2, v6, 1u);
  }
  v7 = *(_BYTE *)(v3 + 48);
  if ((v7 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 40), 2u);
    v7 = *(_BYTE *)(v3 + 48);
  }
  if ((v7 & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8), 3u);
  return this;
}

BOOL sub_1001F563C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;
  BOOL v8;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t **)a2;
  if (v3 - *a1 != *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
    return 0;
  if (v2 == v3)
    return 1;
  v5 = v2 + 8;
  do
  {
    v6 = *v4++;
    result = CMMsl::Skeleton2DJoint::operator==(*(_QWORD *)(v5 - 8), v6);
    v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t CMMsl::Skeleton2D::hash_value(CMMsl::Skeleton2D *this)
{
  CMMsl::Skeleton2DJoint **v2;
  CMMsl::Skeleton2DJoint **v3;
  uint64_t v4;
  CMMsl::Skeleton2DJoint *v5;
  double v6;
  double v7;

  v2 = (CMMsl::Skeleton2DJoint **)*((_QWORD *)this + 2);
  v3 = (CMMsl::Skeleton2DJoint **)*((_QWORD *)this + 3);
  if (v2 == v3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *v2++;
      v4 ^= CMMsl::Skeleton2DJoint::hash_value(v5);
    }
    while (v2 != v3);
  }
  if ((*((_BYTE *)this + 48) & 2) != 0)
  {
    v6 = *((double *)this + 5);
    if (v6 == 0.0)
      v6 = 0.0;
    if ((*((_BYTE *)this + 48) & 1) != 0)
      goto LABEL_8;
LABEL_14:
    v7 = 0.0;
    return *(_QWORD *)&v6 ^ v4 ^ *(_QWORD *)&v7;
  }
  v6 = 0.0;
  if ((*((_BYTE *)this + 48) & 1) == 0)
    goto LABEL_14;
LABEL_8:
  v7 = *((double *)this + 1);
  if (v7 == 0.0)
    v7 = 0.0;
  return *(_QWORD *)&v6 ^ v4 ^ *(_QWORD *)&v7;
}

uint64_t CMMsl::Skeleton2DJoint::Skeleton2DJoint(uint64_t this)
{
  *(_QWORD *)this = off_100354690;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 36) = 0;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100354690;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 36) = 0;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

void CMMsl::Skeleton2DJoint::~Skeleton2DJoint(CMMsl::Skeleton2DJoint *this)
{
  void *v2;

  *(_QWORD *)this = off_100354690;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::Skeleton2DJoint::~Skeleton2DJoint(this);
  operator delete();
}

CMMsl::Skeleton2DJoint *CMMsl::Skeleton2DJoint::Skeleton2DJoint(CMMsl::Skeleton2DJoint *this, const CMMsl::Skeleton2DJoint *a2)
{
  char *v4;
  int v5;
  char v6;
  int v7;
  char v8;

  *((_QWORD *)this + 1) = 0;
  v4 = (char *)this + 8;
  *(_QWORD *)this = off_100354690;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 9) = 0;
  *((_DWORD *)this + 11) = 0;
  if ((*((_BYTE *)a2 + 44) & 2) != 0)
  {
    v5 = *((_DWORD *)a2 + 9);
    *((_BYTE *)this + 44) = 2;
    *((_DWORD *)this + 9) = v5;
  }
  if (this != a2)
    sub_100020CE4(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  v6 = *((_BYTE *)a2 + 44);
  if ((v6 & 1) != 0)
  {
    v7 = *((_DWORD *)a2 + 8);
    *((_BYTE *)this + 44) |= 1u;
    *((_DWORD *)this + 8) = v7;
    v6 = *((_BYTE *)a2 + 44);
  }
  if ((v6 & 4) != 0)
  {
    v8 = *((_BYTE *)a2 + 40);
    *((_BYTE *)this + 44) |= 4u;
    *((_BYTE *)this + 40) = v8;
  }
  return this;
}

uint64_t CMMsl::Skeleton2DJoint::operator=(uint64_t a1, const CMMsl::Skeleton2DJoint *a2)
{
  int v3;
  int v4;
  __int128 v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  int v13;
  char v14;
  int v15;

  if ((const CMMsl::Skeleton2DJoint *)a1 != a2)
  {
    CMMsl::Skeleton2DJoint::Skeleton2DJoint((CMMsl::Skeleton2DJoint *)&v9, a2);
    v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v15;
    v15 = v3;
    v4 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v13;
    v13 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v5;
    v6 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v11;
    v11 = v6;
    v7 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v12;
    v12 = v7;
    LOBYTE(v6) = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a1 + 40) = v14;
    v14 = v6;
    CMMsl::Skeleton2DJoint::~Skeleton2DJoint((CMMsl::Skeleton2DJoint *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::Skeleton2DJoint *a2, CMMsl::Skeleton2DJoint *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float result;

  v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  v4 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  result = *((float *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((float *)a2 + 8) = result;
  LOBYTE(v7) = *((_BYTE *)this + 40);
  *((_BYTE *)this + 40) = *((_BYTE *)a2 + 40);
  *((_BYTE *)a2 + 40) = v7;
  return result;
}

uint64_t CMMsl::Skeleton2DJoint::Skeleton2DJoint(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_100354690;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

{
  *(_QWORD *)a1 = off_100354690;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t CMMsl::Skeleton2DJoint::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  char v5;
  int v6;
  uint64_t v7;
  __int128 v8;
  int v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  void (**v14)(CMMsl::Skeleton2DJoint *__hidden);
  __int128 v15;
  uint64_t v16;
  int v17;
  int v18;
  char v19;
  int v20;

  if (a1 != a2)
  {
    v14 = off_100354690;
    v3 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a2 + 44) = 0;
    v4 = *(_DWORD *)(a2 + 36);
    v5 = *(_BYTE *)(a2 + 40);
    v6 = *(_DWORD *)(a2 + 32);
    v7 = *(_QWORD *)(a2 + 24);
    v8 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v9 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v3;
    v20 = v9;
    v10 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v4;
    v18 = v10;
    v11 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v15 = v11;
    v12 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v7;
    v16 = v12;
    LODWORD(v8) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v6;
    v17 = v8;
    LOBYTE(v12) = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a1 + 40) = v5;
    v19 = v12;
    CMMsl::Skeleton2DJoint::~Skeleton2DJoint((CMMsl::Skeleton2DJoint *)&v14);
  }
  return a1;
}

uint64_t CMMsl::Skeleton2DJoint::formatText(CMMsl::Skeleton2DJoint *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;
  float *v6;
  float *v7;
  float v8;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "confidence", *((float *)this + 8));
    v5 = *((_BYTE *)this + 44);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "joint", *((_DWORD *)this + 9));
  v6 = (float *)*((_QWORD *)this + 1);
  v7 = (float *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "position", v8);
  }
  if ((*((_BYTE *)this + 44) & 4) != 0)
    PB::TextFormatter::format(a2, "visible", *((_BYTE *)this + 40));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::Skeleton2DJoint::readFrom(CMMsl::Skeleton2DJoint *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  char *v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  _DWORD *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  BOOL v49;
  char v50;
  unsigned int v51;
  unint64_t v52;
  char v53;
  unint64_t v54;
  char *v55;
  _DWORD *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  int v64;
  unint64_t v65;
  _BYTE v68[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 8);
    v9 = (char *)this + 24;
    while (1)
    {
      v10 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v16 = v12++ > 8;
        if (v16)
          goto LABEL_20;
      }
LABEL_21:
      v22 = v13 & 7;
      if (v22 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 44) |= 2u;
          v23 = *((_QWORD *)a2 + 1);
          v24 = *((_QWORD *)a2 + 2);
          v25 = *(_QWORD *)a2;
          if (v23 <= 0xFFFFFFFFFFFFFFF5 && v23 + 10 <= v24)
          {
            v26 = 0;
            v27 = 0;
            v28 = 0;
            do
            {
              v29 = v23 + 1;
              *((_QWORD *)a2 + 1) = v23 + 1;
              v30 = *(_BYTE *)(v25 + v23);
              v28 |= (unint64_t)(v30 & 0x7F) << v26;
              if ((v30 & 0x80) == 0)
                goto LABEL_83;
              v26 += 7;
              v23 = v29;
              v16 = v27++ > 8;
            }
            while (!v16);
LABEL_67:
            LODWORD(v28) = 0;
            goto LABEL_83;
          }
          v50 = 0;
          v51 = 0;
          v28 = 0;
          if (v24 <= v23)
            v24 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v24 == v23)
            {
              LODWORD(v28) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v52 = v23 + 1;
              v53 = *(_BYTE *)(v25 + v23);
              *((_QWORD *)a2 + 1) = v52;
              v28 |= (unint64_t)(v53 & 0x7F) << v50;
              if (v53 < 0)
              {
                v50 += 7;
                v23 = v52;
                v16 = v51++ > 8;
                if (v16)
                  goto LABEL_67;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v28) = 0;
            }
            break;
          }
LABEL_83:
          *((_DWORD *)this + 9) = v28;
          goto LABEL_97;
        case 2u:
          if (v22 == 2)
          {
            if ((PB::Reader::placeMark(a2, v68) & 1) != 0)
              return 0;
            v31 = *((_QWORD *)a2 + 1);
            v32 = *((_QWORD *)a2 + 2);
            while (v31 < v32 && !*((_BYTE *)a2 + 24))
            {
              v34 = (char *)*((_QWORD *)this + 2);
              v33 = *((_QWORD *)this + 3);
              if ((unint64_t)v34 >= v33)
              {
                v36 = (char *)*v8;
                v37 = (v34 - (_BYTE *)*v8) >> 2;
                v38 = v37 + 1;
                if ((unint64_t)(v37 + 1) >> 62)
                  goto LABEL_107;
                v39 = v33 - (_QWORD)v36;
                if (v39 >> 1 > v38)
                  v38 = v39 >> 1;
                if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
                  v40 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v40 = v38;
                if (v40)
                {
                  v41 = (char *)sub_100020E2C((uint64_t)v9, v40);
                  v36 = (char *)*((_QWORD *)this + 1);
                  v34 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v41 = 0;
                }
                v42 = &v41[4 * v37];
                *(_DWORD *)v42 = 0;
                v35 = v42 + 4;
                while (v34 != v36)
                {
                  v43 = *((_DWORD *)v34 - 1);
                  v34 -= 4;
                  *((_DWORD *)v42 - 1) = v43;
                  v42 -= 4;
                }
                *((_QWORD *)this + 1) = v42;
                *((_QWORD *)this + 2) = v35;
                *((_QWORD *)this + 3) = &v41[4 * v40];
                if (v36)
                  operator delete(v36);
              }
              else
              {
                *(_DWORD *)v34 = 0;
                v35 = v34 + 4;
              }
              *((_QWORD *)this + 2) = v35;
              v44 = *((_QWORD *)a2 + 1);
              if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((_QWORD *)a2 + 2))
              {
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v35 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v44);
              v32 = *((_QWORD *)a2 + 2);
              v31 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v31;
            }
            PB::Reader::recallMark(a2, v68);
          }
          else
          {
            v55 = (char *)*((_QWORD *)this + 2);
            v54 = *((_QWORD *)this + 3);
            if ((unint64_t)v55 >= v54)
            {
              v57 = (char *)*v8;
              v58 = (v55 - (_BYTE *)*v8) >> 2;
              v59 = v58 + 1;
              if ((unint64_t)(v58 + 1) >> 62)
LABEL_107:
                sub_10000D5F8();
              v60 = v54 - (_QWORD)v57;
              if (v60 >> 1 > v59)
                v59 = v60 >> 1;
              if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL)
                v61 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v61 = v59;
              if (v61)
              {
                v62 = (char *)sub_100020E2C((uint64_t)v9, v61);
                v57 = (char *)*((_QWORD *)this + 1);
                v55 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v62 = 0;
              }
              v63 = &v62[4 * v58];
              *(_DWORD *)v63 = 0;
              v56 = v63 + 4;
              while (v55 != v57)
              {
                v64 = *((_DWORD *)v55 - 1);
                v55 -= 4;
                *((_DWORD *)v63 - 1) = v64;
                v63 -= 4;
              }
              *((_QWORD *)this + 1) = v63;
              *((_QWORD *)this + 2) = v56;
              *((_QWORD *)this + 3) = &v62[4 * v61];
              if (v57)
                operator delete(v57);
            }
            else
            {
              *(_DWORD *)v55 = 0;
              v56 = v55 + 4;
            }
            *((_QWORD *)this + 2) = v56;
            v65 = *((_QWORD *)a2 + 1);
            if (v65 <= 0xFFFFFFFFFFFFFFFBLL && v65 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v56 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v65);
LABEL_96:
              *((_QWORD *)a2 + 1) += 4;
            }
            else
            {
LABEL_94:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_97:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 3u:
          *((_BYTE *)this + 44) |= 1u;
          v45 = *((_QWORD *)a2 + 1);
          if (v45 > 0xFFFFFFFFFFFFFFFBLL || v45 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_94;
          *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v45);
          goto LABEL_96;
        case 4u:
          *((_BYTE *)this + 44) |= 4u;
          v46 = *((_QWORD *)a2 + 1);
          if (v46 >= *((_QWORD *)a2 + 2))
          {
            v49 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v47 = v46 + 1;
            v48 = *(unsigned __int8 *)(*(_QWORD *)a2 + v46);
            *((_QWORD *)a2 + 1) = v47;
            v49 = v48 != 0;
          }
          *((_BYTE *)this + 40) = v49;
          goto LABEL_97;
        default:
          if ((PB::Reader::skip(a2, v13 >> 3, v22, 0) & 1) == 0)
            return 0;
          goto LABEL_97;
      }
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_21;
      v17 += 7;
      v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::Skeleton2DJoint::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  char v7;

  v3 = this;
  if ((*(_BYTE *)(this + 44) & 2) != 0)
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 36), 1u);
  v4 = *(float **)(v3 + 8);
  v5 = *(float **)(v3 + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  v7 = *(_BYTE *)(v3 + 44);
  if ((v7 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 32), 3u);
    v7 = *(_BYTE *)(v3 + 44);
  }
  if ((v7 & 4) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 40), 4u);
  return this;
}

BOOL CMMsl::Skeleton2DJoint::operator==(uint64_t a1, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  _BOOL8 v5;

  if ((*(_BYTE *)(a1 + 44) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 2) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 2) != 0)
  {
    return 0;
  }
  v3 = *(float **)(a1 + 8);
  v2 = *(float **)(a1 + 16);
  v4 = *(float **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 1) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 1) != 0)
  {
    return 0;
  }
  v5 = (*(_BYTE *)(a2 + 44) & 4) == 0;
  if ((*(_BYTE *)(a1 + 44) & 4) != 0)
    return (*(_BYTE *)(a2 + 44) & 4) != 0 && *(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40);
  return v5;
}

uint64_t CMMsl::Skeleton2DJoint::hash_value(CMMsl::Skeleton2DJoint *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  if ((*((_BYTE *)this + 44) & 2) != 0)
    v2 = *((int *)this + 9);
  else
    v2 = 0;
  v3 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  if ((*((_BYTE *)this + 44) & 1) != 0)
  {
    v6 = *((float *)this + 8);
    v4 = LODWORD(v6);
    if (v6 == 0.0)
      v4 = 0;
    if ((*((_BYTE *)this + 44) & 4) != 0)
      goto LABEL_6;
LABEL_10:
    v5 = 0;
    return v3 ^ v2 ^ v4 ^ v5;
  }
  v4 = 0;
  if ((*((_BYTE *)this + 44) & 4) == 0)
    goto LABEL_10;
LABEL_6:
  v5 = *((unsigned __int8 *)this + 40);
  return v3 ^ v2 ^ v4 ^ v5;
}

void CMMsl::Skeleton3D::~Skeleton3D(CMMsl::Skeleton3D *this)
{
  void **v2;

  *(_QWORD *)this = off_1003546C8;
  v2 = (void **)((char *)this + 8);
  sub_1002394A8(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = off_1003546C8;
  v2 = (void **)((char *)this + 8);
  sub_1002394A8(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = off_1003546C8;
  v2 = (void **)((char *)this + 8);
  sub_1002394A8(&v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::Skeleton3D::Skeleton3D(_QWORD *this, const CMMsl::Skeleton3D *a2)
{
  this[1] = 0;
  *this = off_1003546C8;
  this[2] = 0;
  this[3] = 0;
  if (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2))
    sub_1001F6404();
  return this;
}

void sub_1001F6404()
{
  operator new();
}

void sub_1001F6538(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::Skeleton3D::operator=(uint64_t a1, const CMMsl::Skeleton3D *a2)
{
  __int128 v3;
  uint64_t v4;
  void (**v6)(CMMsl::Skeleton3D *__hidden);
  __int128 v7;
  uint64_t v8;
  void **v9;

  if ((const CMMsl::Skeleton3D *)a1 != a2)
  {
    CMMsl::Skeleton3D::Skeleton3D(&v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v4;
    v6 = off_1003546C8;
    v9 = (void **)&v7;
    sub_1002394A8(&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

_QWORD *CMMsl::swap(_QWORD *this, CMMsl::Skeleton3D *a2, CMMsl::Skeleton3D *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  return this;
}

_QWORD *CMMsl::Skeleton3D::Skeleton3D(_QWORD *a1, uint64_t a2)
{
  _OWORD *v4;

  *a1 = off_1003546C8;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  sub_100239524(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *a1 = off_1003546C8;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  sub_100239524(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

uint64_t CMMsl::Skeleton3D::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  void (**v9)(CMMsl::Skeleton3D *__hidden);
  __int128 v10;
  uint64_t v11;
  void **v12;

  if (a1 != a2)
  {
    v9 = off_1003546C8;
    v10 = 0uLL;
    v11 = 0;
    sub_100239524(&v10);
    v4 = *(_QWORD *)(a2 + 24);
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    v10 = v6;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v4;
    v11 = v7;
    v12 = (void **)&v10;
    v9 = off_1003546C8;
    sub_1002394A8(&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::Skeleton3D::formatText(CMMsl::Skeleton3D *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "joint");
  }
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Skeleton3D::readFrom(CMMsl::Skeleton3D *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        sub_1001F6974();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_1001F6974()
{
  operator new();
}

void sub_1001F6ABC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::Skeleton3D::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base **v2;
  const PB::Base **i;
  const PB::Base *v5;

  v2 = *(const PB::Base ***)(this + 8);
  for (i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5, 1u))
    v5 = *v2++;
  return this;
}

BOOL sub_1001F6B20(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;
  BOOL v8;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t **)a2;
  if (v3 - *a1 != *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
    return 0;
  if (v2 == v3)
    return 1;
  v5 = v2 + 8;
  do
  {
    v6 = *v4++;
    result = CMMsl::SkeletonJoint::operator==(*(_QWORD *)(v5 - 8), v6);
    v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t CMMsl::Skeleton3D::hash_value(CMMsl::Skeleton3D *this)
{
  CMMsl::SkeletonJoint **v1;
  CMMsl::SkeletonJoint **v2;
  uint64_t v3;
  CMMsl::SkeletonJoint *v4;

  v1 = (CMMsl::SkeletonJoint **)*((_QWORD *)this + 1);
  v2 = (CMMsl::SkeletonJoint **)*((_QWORD *)this + 2);
  if (v1 == v2)
    return 0;
  v3 = 0;
  do
  {
    v4 = *v1++;
    v3 ^= CMMsl::SkeletonJoint::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

void CMMsl::Skeleton3DLifted::~Skeleton3DLifted(CMMsl::Skeleton3DLifted *this)
{
  void **v2;

  *(_QWORD *)this = off_100354700;
  v2 = (void **)((char *)this + 16);
  sub_1002394A8(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = off_100354700;
  v2 = (void **)((char *)this + 16);
  sub_1002394A8(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = off_100354700;
  v2 = (void **)((char *)this + 16);
  sub_1002394A8(&v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::Skeleton3DLifted::Skeleton3DLifted(uint64_t this, const CMMsl::Skeleton3DLifted *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_100354700;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_DWORD *)(this + 48) = 0;
  if (*((_QWORD *)a2 + 2) != *((_QWORD *)a2 + 3))
    sub_1001F6D94();
  v2 = *((_BYTE *)a2 + 48);
  if ((v2 & 2) != 0)
  {
    v3 = *((_QWORD *)a2 + 5);
    *(_BYTE *)(this + 48) |= 2u;
    *(_QWORD *)(this + 40) = v3;
    v2 = *((_BYTE *)a2 + 48);
  }
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 48) |= 1u;
    *(_QWORD *)(this + 8) = v4;
  }
  return this;
}

void sub_1001F6D94()
{
  operator new();
}

void sub_1001F6EC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::Skeleton3DLifted::operator=(uint64_t a1, const CMMsl::Skeleton3DLifted *a2)
{
  int v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (**v9)(CMMsl::Skeleton3DLifted *__hidden);
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void **v15;

  if ((const CMMsl::Skeleton3DLifted *)a1 != a2)
  {
    CMMsl::Skeleton3DLifted::Skeleton3DLifted((uint64_t)&v9, a2);
    v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v14;
    v14 = v3;
    v4 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v11;
    v11 = v4;
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v12;
    v12 = v5;
    v6 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v13;
    v13 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v10;
    v10 = v7;
    v9 = off_100354700;
    v15 = (void **)&v11;
    sub_1002394A8(&v15);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::Skeleton3DLifted *a2, CMMsl::Skeleton3DLifted *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  v7 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

uint64_t CMMsl::Skeleton3DLifted::Skeleton3DLifted(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;

  *(_QWORD *)a1 = off_100354700;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = (_OWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  sub_100239524((_QWORD *)(a1 + 16));
  *v4 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  return a1;
}

uint64_t CMMsl::Skeleton3DLifted::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (**v9)(CMMsl::Skeleton3DLifted *__hidden);
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void **v15;

  if (a1 != a2)
  {
    CMMsl::Skeleton3DLifted::Skeleton3DLifted((uint64_t)&v9, a2);
    v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v14;
    v14 = v3;
    v4 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v11;
    v11 = v4;
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v12;
    v12 = v5;
    v6 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v13;
    v13 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v10;
    v10 = v7;
    v9 = off_100354700;
    v15 = (void **)&v11;
    sub_1002394A8(&v15);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::Skeleton3DLifted::formatText(CMMsl::Skeleton3DLifted *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 48) & 1) != 0)
    PB::TextFormatter::format(a2, "globalMachtime", *((double *)this + 1));
  v5 = (uint64_t *)*((_QWORD *)this + 2);
  v6 = (uint64_t *)*((_QWORD *)this + 3);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "joint");
  }
  if ((*((_BYTE *)this + 48) & 2) != 0)
    PB::TextFormatter::format(a2, "localMachtime", *((double *)this + 5));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Skeleton3DLifted::readFrom(CMMsl::Skeleton3DLifted *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
        break;
      if ((_DWORD)v20 == 2)
      {
        *((_BYTE *)this + 48) |= 2u;
        v22 = *((_QWORD *)a2 + 1);
        if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_30;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v22);
LABEL_34:
        *((_QWORD *)a2 + 1) += 8;
        goto LABEL_35;
      }
      if ((_DWORD)v20 == 1)
        sub_1001F7418();
      result = PB::Reader::skip(a2, v20, v11 & 7, 0);
      if (!(_DWORD)result)
        return result;
LABEL_35:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    *((_BYTE *)this + 48) |= 1u;
    v21 = *((_QWORD *)a2 + 1);
    if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((_QWORD *)a2 + 2))
    {
LABEL_30:
      *((_BYTE *)a2 + 24) = 1;
      goto LABEL_35;
    }
    *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v21);
    goto LABEL_34;
  }
  return v4 == 0;
}

void sub_1001F7418()
{
  operator new();
}

void sub_1001F7558(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::Skeleton3DLifted::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base **v4;
  const PB::Base **v5;
  const PB::Base *v6;
  char v7;

  v3 = this;
  v4 = *(const PB::Base ***)(this + 16);
  v5 = *(const PB::Base ***)(this + 24);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::writeSubmessage(a2, v6, 1u);
  }
  v7 = *(_BYTE *)(v3 + 48);
  if ((v7 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 40), 2u);
    v7 = *(_BYTE *)(v3 + 48);
  }
  if ((v7 & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8), 3u);
  return this;
}

BOOL sub_1001F75F8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;
  BOOL v8;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t **)a2;
  if (v3 - *a1 != *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
    return 0;
  if (v2 == v3)
    return 1;
  v5 = v2 + 8;
  do
  {
    v6 = *v4++;
    result = CMMsl::Skeleton3DLiftedJoint::operator==(*(_QWORD *)(v5 - 8), v6);
    v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t CMMsl::Skeleton3DLifted::hash_value(CMMsl::Skeleton3DLifted *this)
{
  CMMsl::Skeleton3DLiftedJoint **v2;
  CMMsl::Skeleton3DLiftedJoint **v3;
  uint64_t v4;
  CMMsl::Skeleton3DLiftedJoint *v5;
  double v6;
  double v7;

  v2 = (CMMsl::Skeleton3DLiftedJoint **)*((_QWORD *)this + 2);
  v3 = (CMMsl::Skeleton3DLiftedJoint **)*((_QWORD *)this + 3);
  if (v2 == v3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *v2++;
      v4 ^= CMMsl::Skeleton3DLiftedJoint::hash_value(v5);
    }
    while (v2 != v3);
  }
  if ((*((_BYTE *)this + 48) & 2) != 0)
  {
    v6 = *((double *)this + 5);
    if (v6 == 0.0)
      v6 = 0.0;
    if ((*((_BYTE *)this + 48) & 1) != 0)
      goto LABEL_8;
LABEL_14:
    v7 = 0.0;
    return *(_QWORD *)&v6 ^ v4 ^ *(_QWORD *)&v7;
  }
  v6 = 0.0;
  if ((*((_BYTE *)this + 48) & 1) == 0)
    goto LABEL_14;
LABEL_8:
  v7 = *((double *)this + 1);
  if (v7 == 0.0)
    v7 = 0.0;
  return *(_QWORD *)&v6 ^ v4 ^ *(_QWORD *)&v7;
}

double CMMsl::Skeleton3DLiftedJoint::Skeleton3DLiftedJoint(CMMsl::Skeleton3DLiftedJoint *this)
{
  double result;

  *(_QWORD *)this = off_100354738;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_100354738;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

void CMMsl::Skeleton3DLiftedJoint::~Skeleton3DLiftedJoint(CMMsl::Skeleton3DLiftedJoint *this)
{
  void *v2;

  *(_QWORD *)this = off_100354738;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::Skeleton3DLiftedJoint::~Skeleton3DLiftedJoint(this);
  operator delete();
}

CMMsl::Skeleton3DLiftedJoint *CMMsl::Skeleton3DLiftedJoint::Skeleton3DLiftedJoint(CMMsl::Skeleton3DLiftedJoint *this, const CMMsl::Skeleton3DLiftedJoint *a2)
{
  char *v3;
  int v4;

  *(_QWORD *)this = off_100354738;
  *(_OWORD *)((char *)this + 8) = 0u;
  v3 = (char *)this + 8;
  *(_OWORD *)((char *)this + 24) = 0u;
  if ((*((_BYTE *)a2 + 36) & 1) != 0)
  {
    v4 = *((_DWORD *)a2 + 8);
    *((_BYTE *)this + 36) = 1;
    *((_DWORD *)this + 8) = v4;
  }
  if (this != a2)
    sub_100020CE4(v3, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  return this;
}

uint64_t CMMsl::Skeleton3DLiftedJoint::operator=(uint64_t a1, const CMMsl::Skeleton3DLiftedJoint *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  _BYTE v7[8];
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  if ((const CMMsl::Skeleton3DLiftedJoint *)a1 != a2)
  {
    CMMsl::Skeleton3DLiftedJoint::Skeleton3DLiftedJoint((CMMsl::Skeleton3DLiftedJoint *)v7, a2);
    v3 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v10;
    v10 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    v9 = v5;
    CMMsl::Skeleton3DLiftedJoint::~Skeleton3DLiftedJoint((CMMsl::Skeleton3DLiftedJoint *)v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::Skeleton3DLiftedJoint *a2, CMMsl::Skeleton3DLiftedJoint *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_DWORD *)(this + 36);
  *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  v4 = *(_DWORD *)(this + 32);
  *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  v5 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  return this;
}

uint64_t CMMsl::Skeleton3DLiftedJoint::Skeleton3DLiftedJoint(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_100354738;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  return a1;
}

{
  *(_QWORD *)a1 = off_100354738;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  return a1;
}

uint64_t CMMsl::Skeleton3DLiftedJoint::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  void (**v10)(CMMsl::Skeleton3DLiftedJoint *__hidden);
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 != a2)
  {
    v10 = off_100354738;
    v3 = *(_QWORD *)(a2 + 24);
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v5 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 36) = 0;
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v5;
    v13 = v6;
    v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v4;
    v11 = v7;
    v8 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v3;
    v12 = v8;
    CMMsl::Skeleton3DLiftedJoint::~Skeleton3DLiftedJoint((CMMsl::Skeleton3DLiftedJoint *)&v10);
  }
  return a1;
}

uint64_t CMMsl::Skeleton3DLiftedJoint::formatText(CMMsl::Skeleton3DLiftedJoint *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 36) & 1) != 0)
    PB::TextFormatter::format(a2, "joint", *((_DWORD *)this + 8));
  v5 = (float *)*((_QWORD *)this + 1);
  v6 = (float *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "position", v7);
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::Skeleton3DLiftedJoint::readFrom(CMMsl::Skeleton3DLiftedJoint *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  char *v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  _DWORD *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  int v44;
  unint64_t v45;
  char v46;
  unsigned int v47;
  unint64_t v48;
  char v49;
  unint64_t v50;
  char *v51;
  _DWORD *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  int v60;
  unint64_t v61;
  _BYTE v64[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 8);
    v9 = (char *)this + 24;
    while (1)
    {
      v10 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v16 = v12++ > 8;
        if (v16)
          goto LABEL_20;
      }
LABEL_21:
      v22 = v13 & 7;
      if (v22 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v23 = v13 >> 3;
      if ((v13 >> 3) == 2)
      {
        if (v22 == 2)
        {
          if ((PB::Reader::placeMark(a2, v64) & 1) != 0)
            return 0;
          v32 = *((_QWORD *)a2 + 1);
          v33 = *((_QWORD *)a2 + 2);
          while (v32 < v33 && !*((_BYTE *)a2 + 24))
          {
            v35 = (char *)*((_QWORD *)this + 2);
            v34 = *((_QWORD *)this + 3);
            if ((unint64_t)v35 >= v34)
            {
              v37 = (char *)*v8;
              v38 = (v35 - (_BYTE *)*v8) >> 2;
              v39 = v38 + 1;
              if ((unint64_t)(v38 + 1) >> 62)
                goto LABEL_100;
              v40 = v34 - (_QWORD)v37;
              if (v40 >> 1 > v39)
                v39 = v40 >> 1;
              if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
                v41 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v41 = v39;
              if (v41)
              {
                v42 = (char *)sub_100020E2C((uint64_t)v9, v41);
                v37 = (char *)*((_QWORD *)this + 1);
                v35 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v42 = 0;
              }
              v43 = &v42[4 * v38];
              *(_DWORD *)v43 = 0;
              v36 = v43 + 4;
              while (v35 != v37)
              {
                v44 = *((_DWORD *)v35 - 1);
                v35 -= 4;
                *((_DWORD *)v43 - 1) = v44;
                v43 -= 4;
              }
              *((_QWORD *)this + 1) = v43;
              *((_QWORD *)this + 2) = v36;
              *((_QWORD *)this + 3) = &v42[4 * v41];
              if (v37)
                operator delete(v37);
            }
            else
            {
              *(_DWORD *)v35 = 0;
              v36 = v35 + 4;
            }
            *((_QWORD *)this + 2) = v36;
            v45 = *((_QWORD *)a2 + 1);
            if (v45 > 0xFFFFFFFFFFFFFFFBLL || v45 + 4 > *((_QWORD *)a2 + 2))
            {
              *((_BYTE *)a2 + 24) = 1;
              break;
            }
            *(v36 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v45);
            v33 = *((_QWORD *)a2 + 2);
            v32 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v32;
          }
          PB::Reader::recallMark(a2, v64);
        }
        else
        {
          v51 = (char *)*((_QWORD *)this + 2);
          v50 = *((_QWORD *)this + 3);
          if ((unint64_t)v51 >= v50)
          {
            v53 = (char *)*v8;
            v54 = (v51 - (_BYTE *)*v8) >> 2;
            v55 = v54 + 1;
            if ((unint64_t)(v54 + 1) >> 62)
LABEL_100:
              sub_10000D5F8();
            v56 = v50 - (_QWORD)v53;
            if (v56 >> 1 > v55)
              v55 = v56 >> 1;
            if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL)
              v57 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v57 = v55;
            if (v57)
            {
              v58 = (char *)sub_100020E2C((uint64_t)v9, v57);
              v53 = (char *)*((_QWORD *)this + 1);
              v51 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v58 = 0;
            }
            v59 = &v58[4 * v54];
            *(_DWORD *)v59 = 0;
            v52 = v59 + 4;
            while (v51 != v53)
            {
              v60 = *((_DWORD *)v51 - 1);
              v51 -= 4;
              *((_DWORD *)v59 - 1) = v60;
              v59 -= 4;
            }
            *((_QWORD *)this + 1) = v59;
            *((_QWORD *)this + 2) = v52;
            *((_QWORD *)this + 3) = &v58[4 * v57];
            if (v53)
              operator delete(v53);
          }
          else
          {
            *(_DWORD *)v51 = 0;
            v52 = v51 + 4;
          }
          *((_QWORD *)this + 2) = v52;
          v61 = *((_QWORD *)a2 + 1);
          if (v61 <= 0xFFFFFFFFFFFFFFFBLL && v61 + 4 <= *((_QWORD *)a2 + 2))
          {
            *(v52 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v61);
            *((_QWORD *)a2 + 1) += 4;
          }
          else
          {
            *((_BYTE *)a2 + 24) = 1;
          }
        }
      }
      else if ((_DWORD)v23 == 1)
      {
        *((_BYTE *)this + 36) |= 1u;
        v24 = *((_QWORD *)a2 + 1);
        v25 = *((_QWORD *)a2 + 2);
        v26 = *(_QWORD *)a2;
        if (v24 > 0xFFFFFFFFFFFFFFF5 || v24 + 10 > v25)
        {
          v46 = 0;
          v47 = 0;
          v29 = 0;
          if (v25 <= v24)
            v25 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v25 == v24)
            {
              LODWORD(v29) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_77;
            }
            v48 = v24 + 1;
            v49 = *(_BYTE *)(v26 + v24);
            *((_QWORD *)a2 + 1) = v48;
            v29 |= (unint64_t)(v49 & 0x7F) << v46;
            if ((v49 & 0x80) == 0)
              break;
            v46 += 7;
            v24 = v48;
            v16 = v47++ > 8;
            if (v16)
            {
LABEL_63:
              LODWORD(v29) = 0;
              goto LABEL_77;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v29) = 0;
        }
        else
        {
          v27 = 0;
          v28 = 0;
          v29 = 0;
          while (1)
          {
            v30 = v24 + 1;
            *((_QWORD *)a2 + 1) = v24 + 1;
            v31 = *(_BYTE *)(v26 + v24);
            v29 |= (unint64_t)(v31 & 0x7F) << v27;
            if ((v31 & 0x80) == 0)
              break;
            v27 += 7;
            v24 = v30;
            v16 = v28++ > 8;
            if (v16)
              goto LABEL_63;
          }
        }
LABEL_77:
        *((_DWORD *)this + 8) = v29;
      }
      else if ((PB::Reader::skip(a2, v23, v22, 0) & 1) == 0)
      {
        return 0;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_21;
      v17 += 7;
      v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::Skeleton3DLiftedJoint::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;

  v3 = this;
  if ((*(_BYTE *)(this + 36) & 1) != 0)
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 32), 1u);
  v5 = *(float **)(v3 + 8);
  v4 = *(float **)(v3 + 16);
  while (v5 != v4)
  {
    v6 = *v5++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  return this;
}

BOOL CMMsl::Skeleton3DLiftedJoint::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  float *v4;
  uint64_t v5;
  float v6;
  _BOOL8 result;
  BOOL v8;

  if ((*(_BYTE *)(a1 + 36) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 1) != 0)
  {
    return 0;
  }
  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(float **)(a2 + 8);
  if (v2 - v3 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  if (v3 == v2)
    return 1;
  v5 = v3 + 4;
  do
  {
    v6 = *v4++;
    result = *(float *)(v5 - 4) == v6;
    v8 = *(float *)(v5 - 4) != v6 || v5 == v2;
    v5 += 4;
  }
  while (!v8);
  return result;
}

uint64_t CMMsl::Skeleton3DLiftedJoint::hash_value(CMMsl::Skeleton3DLiftedJoint *this)
{
  uint64_t v1;

  if ((*((_BYTE *)this + 36) & 1) != 0)
    v1 = *((int *)this + 8);
  else
    v1 = 0;
  return PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1)) ^ v1;
}

void CMMsl::Skeleton3DRetargeted::~Skeleton3DRetargeted(CMMsl::Skeleton3DRetargeted *this)
{
  void **v2;

  *(_QWORD *)this = off_100354770;
  v2 = (void **)((char *)this + 16);
  sub_1002394A8(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = off_100354770;
  v2 = (void **)((char *)this + 16);
  sub_1002394A8(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = off_100354770;
  v2 = (void **)((char *)this + 16);
  sub_1002394A8(&v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::Skeleton3DRetargeted::Skeleton3DRetargeted(uint64_t this, const CMMsl::Skeleton3DRetargeted *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_100354770;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_DWORD *)(this + 48) = 0;
  if (*((_QWORD *)a2 + 2) != *((_QWORD *)a2 + 3))
    sub_1001F6404();
  v2 = *((_BYTE *)a2 + 48);
  if ((v2 & 2) != 0)
  {
    v3 = *((_QWORD *)a2 + 5);
    *(_BYTE *)(this + 48) |= 2u;
    *(_QWORD *)(this + 40) = v3;
    v2 = *((_BYTE *)a2 + 48);
  }
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 48) |= 1u;
    *(_QWORD *)(this + 8) = v4;
  }
  return this;
}

uint64_t CMMsl::Skeleton3DRetargeted::operator=(uint64_t a1, const CMMsl::Skeleton3DRetargeted *a2)
{
  int v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (**v9)(CMMsl::Skeleton3DRetargeted *__hidden);
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void **v15;

  if ((const CMMsl::Skeleton3DRetargeted *)a1 != a2)
  {
    CMMsl::Skeleton3DRetargeted::Skeleton3DRetargeted((uint64_t)&v9, a2);
    v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v14;
    v14 = v3;
    v4 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v11;
    v11 = v4;
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v12;
    v12 = v5;
    v6 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v13;
    v13 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v10;
    v10 = v7;
    v9 = off_100354770;
    v15 = (void **)&v11;
    sub_1002394A8(&v15);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::Skeleton3DRetargeted *a2, CMMsl::Skeleton3DRetargeted *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  v7 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

uint64_t CMMsl::Skeleton3DRetargeted::Skeleton3DRetargeted(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;

  *(_QWORD *)a1 = off_100354770;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = (_OWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  sub_100239524((_QWORD *)(a1 + 16));
  *v4 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  return a1;
}

uint64_t CMMsl::Skeleton3DRetargeted::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (**v9)(CMMsl::Skeleton3DRetargeted *__hidden);
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void **v15;

  if (a1 != a2)
  {
    CMMsl::Skeleton3DRetargeted::Skeleton3DRetargeted((uint64_t)&v9, a2);
    v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v14;
    v14 = v3;
    v4 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v11;
    v11 = v4;
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v12;
    v12 = v5;
    v6 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v13;
    v13 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v10;
    v10 = v7;
    v9 = off_100354770;
    v15 = (void **)&v11;
    sub_1002394A8(&v15);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::Skeleton3DRetargeted::formatText(CMMsl::Skeleton3DRetargeted *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 48) & 1) != 0)
    PB::TextFormatter::format(a2, "globalMachtime", *((double *)this + 1));
  v5 = (uint64_t *)*((_QWORD *)this + 2);
  v6 = (uint64_t *)*((_QWORD *)this + 3);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "joint");
  }
  if ((*((_BYTE *)this + 48) & 2) != 0)
    PB::TextFormatter::format(a2, "localMachtime", *((double *)this + 5));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Skeleton3DRetargeted::readFrom(CMMsl::Skeleton3DRetargeted *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
        break;
      if ((_DWORD)v20 == 2)
      {
        *((_BYTE *)this + 48) |= 2u;
        v22 = *((_QWORD *)a2 + 1);
        if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_30;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v22);
LABEL_34:
        *((_QWORD *)a2 + 1) += 8;
        goto LABEL_35;
      }
      if ((_DWORD)v20 == 1)
        sub_1001F6974();
      result = PB::Reader::skip(a2, v20, v11 & 7, 0);
      if (!(_DWORD)result)
        return result;
LABEL_35:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    *((_BYTE *)this + 48) |= 1u;
    v21 = *((_QWORD *)a2 + 1);
    if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((_QWORD *)a2 + 2))
    {
LABEL_30:
      *((_BYTE *)a2 + 24) = 1;
      goto LABEL_35;
    }
    *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v21);
    goto LABEL_34;
  }
  return v4 == 0;
}

uint64_t CMMsl::Skeleton3DRetargeted::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base **v4;
  const PB::Base **v5;
  const PB::Base *v6;
  char v7;

  v3 = this;
  v4 = *(const PB::Base ***)(this + 16);
  v5 = *(const PB::Base ***)(this + 24);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::writeSubmessage(a2, v6, 1u);
  }
  v7 = *(_BYTE *)(v3 + 48);
  if ((v7 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 40), 2u);
    v7 = *(_BYTE *)(v3 + 48);
  }
  if ((v7 & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8), 3u);
  return this;
}

uint64_t CMMsl::Skeleton3DRetargeted::hash_value(CMMsl::Skeleton3DRetargeted *this)
{
  CMMsl::SkeletonJoint **v2;
  CMMsl::SkeletonJoint **v3;
  uint64_t v4;
  CMMsl::SkeletonJoint *v5;
  double v6;
  double v7;

  v2 = (CMMsl::SkeletonJoint **)*((_QWORD *)this + 2);
  v3 = (CMMsl::SkeletonJoint **)*((_QWORD *)this + 3);
  if (v2 == v3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *v2++;
      v4 ^= CMMsl::SkeletonJoint::hash_value(v5);
    }
    while (v2 != v3);
  }
  if ((*((_BYTE *)this + 48) & 2) != 0)
  {
    v6 = *((double *)this + 5);
    if (v6 == 0.0)
      v6 = 0.0;
    if ((*((_BYTE *)this + 48) & 1) != 0)
      goto LABEL_8;
LABEL_14:
    v7 = 0.0;
    return *(_QWORD *)&v6 ^ v4 ^ *(_QWORD *)&v7;
  }
  v6 = 0.0;
  if ((*((_BYTE *)this + 48) & 1) == 0)
    goto LABEL_14;
LABEL_8:
  v7 = *((double *)this + 1);
  if (v7 == 0.0)
    v7 = 0.0;
  return *(_QWORD *)&v6 ^ v4 ^ *(_QWORD *)&v7;
}

double CMMsl::SkeletonJoint::SkeletonJoint(CMMsl::SkeletonJoint *this)
{
  double result;

  *(_QWORD *)this = off_1003547A8;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_1003547A8;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  return result;
}

void CMMsl::SkeletonJoint::~SkeletonJoint(CMMsl::SkeletonJoint *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_1003547A8;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::SkeletonJoint::~SkeletonJoint(this);
  operator delete();
}

CMMsl::SkeletonJoint *CMMsl::SkeletonJoint::SkeletonJoint(CMMsl::SkeletonJoint *this, const CMMsl::SkeletonJoint *a2)
{
  char *v4;
  int v5;

  *(_QWORD *)this = off_1003547A8;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  if ((*((_BYTE *)a2 + 60) & 1) != 0)
  {
    v5 = *((_DWORD *)a2 + 14);
    *((_BYTE *)this + 60) = 1;
    *((_DWORD *)this + 14) = v5;
  }
  if (this != a2)
  {
    sub_100020CE4(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
    sub_100020CE4((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
  }
  return this;
}

uint64_t CMMsl::SkeletonJoint::operator=(uint64_t a1, const CMMsl::SkeletonJoint *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  if ((const CMMsl::SkeletonJoint *)a1 != a2)
  {
    CMMsl::SkeletonJoint::SkeletonJoint((CMMsl::SkeletonJoint *)&v8, a2);
    v3 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v12;
    v12 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    v10 = v5;
    v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v11;
    v11 = v6;
    CMMsl::SkeletonJoint::~SkeletonJoint((CMMsl::SkeletonJoint *)&v8);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::SkeletonJoint *a2, CMMsl::SkeletonJoint *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_DWORD *)(this + 60);
  *(_DWORD *)(this + 60) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  v4 = *(_DWORD *)(this + 56);
  *(_DWORD *)(this + 56) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  v5 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *(_QWORD *)(this + 32);
  *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v8;
  v9 = *(_QWORD *)(this + 40);
  *(_QWORD *)(this + 40) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v9;
  v10 = *(_QWORD *)(this + 48);
  *(_QWORD *)(this + 48) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v10;
  return this;
}

uint64_t CMMsl::SkeletonJoint::SkeletonJoint(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = off_1003547A8;
  v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  sub_100239458(v4, (__n128 *)(a2 + 32));
  return a1;
}

uint64_t CMMsl::SkeletonJoint::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  if (a1 != a2)
  {
    CMMsl::SkeletonJoint::SkeletonJoint((uint64_t)&v8, a2);
    v3 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v12;
    v12 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    v10 = v5;
    v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v11;
    v11 = v6;
    CMMsl::SkeletonJoint::~SkeletonJoint((CMMsl::SkeletonJoint *)&v8);
  }
  return a1;
}

uint64_t CMMsl::SkeletonJoint::formatText(CMMsl::SkeletonJoint *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 60) & 1) != 0)
    PB::TextFormatter::format(a2, "joint", *((_DWORD *)this + 14));
  v5 = (float *)*((_QWORD *)this + 1);
  v6 = (float *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "position", v7);
  }
  v8 = (float *)*((_QWORD *)this + 4);
  v9 = (float *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "quaternion", v10);
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::SkeletonJoint::readFrom(CMMsl::SkeletonJoint *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  char *v9;
  void **v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  _DWORD *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  _DWORD *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  int v60;
  unint64_t v61;
  char v62;
  unsigned int v63;
  unint64_t v64;
  char v65;
  unint64_t v66;
  char *v67;
  _DWORD *v68;
  unint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  int v84;
  char *v85;
  int v86;
  unint64_t v87;
  _BYTE v90[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 32);
    v9 = (char *)this + 48;
    v10 = (void **)((char *)this + 8);
    v11 = (char *)this + 24;
    while (1)
    {
      v12 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v19 = 0;
        v20 = 0;
        v15 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v21 = v2 + 1;
          v22 = *(_BYTE *)(v12 + v2);
          *((_QWORD *)a2 + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0)
            goto LABEL_21;
          v19 += 7;
          v2 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            v15 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v25 = v15 >> 3;
      if ((v15 >> 3) == 3)
        break;
      if ((_DWORD)v25 == 2)
      {
        if (v24 != 2)
        {
          v70 = (char *)*((_QWORD *)this + 2);
          v69 = *((_QWORD *)this + 3);
          if ((unint64_t)v70 >= v69)
          {
            v77 = (char *)*v10;
            v78 = (v70 - (_BYTE *)*v10) >> 2;
            v79 = v78 + 1;
            if ((unint64_t)(v78 + 1) >> 62)
LABEL_144:
              sub_10000D5F8();
            v80 = v69 - (_QWORD)v77;
            if (v80 >> 1 > v79)
              v79 = v80 >> 1;
            if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFFCLL)
              v81 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v81 = v79;
            if (v81)
            {
              v82 = (char *)sub_100020E2C((uint64_t)v11, v81);
              v77 = (char *)*((_QWORD *)this + 1);
              v70 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v82 = 0;
            }
            v85 = &v82[4 * v78];
            *(_DWORD *)v85 = 0;
            v68 = v85 + 4;
            while (v70 != v77)
            {
              v86 = *((_DWORD *)v70 - 1);
              v70 -= 4;
              *((_DWORD *)v85 - 1) = v86;
              v85 -= 4;
            }
            *((_QWORD *)this + 1) = v85;
            *((_QWORD *)this + 2) = v68;
            *((_QWORD *)this + 3) = &v82[4 * v81];
            if (v77)
              operator delete(v77);
          }
          else
          {
            *(_DWORD *)v70 = 0;
            v68 = v70 + 4;
          }
          *((_QWORD *)this + 2) = v68;
LABEL_129:
          v87 = *((_QWORD *)a2 + 1);
          if (v87 <= 0xFFFFFFFFFFFFFFFBLL && v87 + 4 <= *((_QWORD *)a2 + 2))
          {
            *(v68 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v87);
            *((_QWORD *)a2 + 1) += 4;
          }
          else
          {
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_133;
        }
        if ((PB::Reader::placeMark(a2, v90) & 1) != 0)
          return 0;
        v48 = *((_QWORD *)a2 + 1);
        v49 = *((_QWORD *)a2 + 2);
        while (v48 < v49 && !*((_BYTE *)a2 + 24))
        {
          v51 = (char *)*((_QWORD *)this + 2);
          v50 = *((_QWORD *)this + 3);
          if ((unint64_t)v51 >= v50)
          {
            v53 = (char *)*v10;
            v54 = (v51 - (_BYTE *)*v10) >> 2;
            v55 = v54 + 1;
            if ((unint64_t)(v54 + 1) >> 62)
              goto LABEL_144;
            v56 = v50 - (_QWORD)v53;
            if (v56 >> 1 > v55)
              v55 = v56 >> 1;
            if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL)
              v57 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v57 = v55;
            if (v57)
            {
              v58 = (char *)sub_100020E2C((uint64_t)v11, v57);
              v53 = (char *)*((_QWORD *)this + 1);
              v51 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v58 = 0;
            }
            v59 = &v58[4 * v54];
            *(_DWORD *)v59 = 0;
            v52 = v59 + 4;
            while (v51 != v53)
            {
              v60 = *((_DWORD *)v51 - 1);
              v51 -= 4;
              *((_DWORD *)v59 - 1) = v60;
              v59 -= 4;
            }
            *((_QWORD *)this + 1) = v59;
            *((_QWORD *)this + 2) = v52;
            *((_QWORD *)this + 3) = &v58[4 * v57];
            if (v53)
              operator delete(v53);
          }
          else
          {
            *(_DWORD *)v51 = 0;
            v52 = v51 + 4;
          }
          *((_QWORD *)this + 2) = v52;
          v61 = *((_QWORD *)a2 + 1);
          if (v61 > 0xFFFFFFFFFFFFFFFBLL || v61 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_93;
          *(v52 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v61);
          v49 = *((_QWORD *)a2 + 2);
          v48 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v48;
        }
LABEL_94:
        PB::Reader::recallMark(a2, v90);
        goto LABEL_133;
      }
      if ((_DWORD)v25 == 1)
      {
        *((_BYTE *)this + 60) |= 1u;
        v26 = *((_QWORD *)a2 + 1);
        v27 = *((_QWORD *)a2 + 2);
        v28 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v27)
        {
          v62 = 0;
          v63 = 0;
          v31 = 0;
          if (v27 <= v26)
            v27 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v27 == v26)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_114;
            }
            v64 = v26 + 1;
            v65 = *(_BYTE *)(v28 + v26);
            *((_QWORD *)a2 + 1) = v64;
            v31 |= (unint64_t)(v65 & 0x7F) << v62;
            if ((v65 & 0x80) == 0)
              break;
            v62 += 7;
            v26 = v64;
            v18 = v63++ > 8;
            if (v18)
            {
LABEL_88:
              LODWORD(v31) = 0;
              goto LABEL_114;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v31) = 0;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v32 = v26 + 1;
            *((_QWORD *)a2 + 1) = v26 + 1;
            v33 = *(_BYTE *)(v28 + v26);
            v31 |= (unint64_t)(v33 & 0x7F) << v29;
            if ((v33 & 0x80) == 0)
              break;
            v29 += 7;
            v26 = v32;
            v18 = v30++ > 8;
            if (v18)
              goto LABEL_88;
          }
        }
LABEL_114:
        *((_DWORD *)this + 14) = v31;
      }
      else if ((PB::Reader::skip(a2, v25, v24, 0) & 1) == 0)
      {
        return 0;
      }
LABEL_133:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    if (v24 != 2)
    {
      v67 = (char *)*((_QWORD *)this + 5);
      v66 = *((_QWORD *)this + 6);
      if ((unint64_t)v67 >= v66)
      {
        v71 = (char *)*v8;
        v72 = (v67 - (_BYTE *)*v8) >> 2;
        v73 = v72 + 1;
        if ((unint64_t)(v72 + 1) >> 62)
LABEL_143:
          sub_10000D5F8();
        v74 = v66 - (_QWORD)v71;
        if (v74 >> 1 > v73)
          v73 = v74 >> 1;
        if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL)
          v75 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v75 = v73;
        if (v75)
        {
          v76 = (char *)sub_100020E2C((uint64_t)v9, v75);
          v71 = (char *)*((_QWORD *)this + 4);
          v67 = (char *)*((_QWORD *)this + 5);
        }
        else
        {
          v76 = 0;
        }
        v83 = &v76[4 * v72];
        *(_DWORD *)v83 = 0;
        v68 = v83 + 4;
        while (v67 != v71)
        {
          v84 = *((_DWORD *)v67 - 1);
          v67 -= 4;
          *((_DWORD *)v83 - 1) = v84;
          v83 -= 4;
        }
        *((_QWORD *)this + 4) = v83;
        *((_QWORD *)this + 5) = v68;
        *((_QWORD *)this + 6) = &v76[4 * v75];
        if (v71)
          operator delete(v71);
      }
      else
      {
        *(_DWORD *)v67 = 0;
        v68 = v67 + 4;
      }
      *((_QWORD *)this + 5) = v68;
      goto LABEL_129;
    }
    if ((PB::Reader::placeMark(a2, v90) & 1) != 0)
      return 0;
    v34 = *((_QWORD *)a2 + 1);
    v35 = *((_QWORD *)a2 + 2);
    while (v34 < v35 && !*((_BYTE *)a2 + 24))
    {
      v37 = (char *)*((_QWORD *)this + 5);
      v36 = *((_QWORD *)this + 6);
      if ((unint64_t)v37 >= v36)
      {
        v39 = (char *)*v8;
        v40 = (v37 - (_BYTE *)*v8) >> 2;
        v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 62)
          goto LABEL_143;
        v42 = v36 - (_QWORD)v39;
        if (v42 >> 1 > v41)
          v41 = v42 >> 1;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
          v43 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v43 = v41;
        if (v43)
        {
          v44 = (char *)sub_100020E2C((uint64_t)v9, v43);
          v39 = (char *)*((_QWORD *)this + 4);
          v37 = (char *)*((_QWORD *)this + 5);
        }
        else
        {
          v44 = 0;
        }
        v45 = &v44[4 * v40];
        *(_DWORD *)v45 = 0;
        v38 = v45 + 4;
        while (v37 != v39)
        {
          v46 = *((_DWORD *)v37 - 1);
          v37 -= 4;
          *((_DWORD *)v45 - 1) = v46;
          v45 -= 4;
        }
        *((_QWORD *)this + 4) = v45;
        *((_QWORD *)this + 5) = v38;
        *((_QWORD *)this + 6) = &v44[4 * v43];
        if (v39)
          operator delete(v39);
      }
      else
      {
        *(_DWORD *)v37 = 0;
        v38 = v37 + 4;
      }
      *((_QWORD *)this + 5) = v38;
      v47 = *((_QWORD *)a2 + 1);
      if (v47 > 0xFFFFFFFFFFFFFFFBLL || v47 + 4 > *((_QWORD *)a2 + 2))
      {
LABEL_93:
        *((_BYTE *)a2 + 24) = 1;
        goto LABEL_94;
      }
      *(v38 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v47);
      v35 = *((_QWORD *)a2 + 2);
      v34 = *((_QWORD *)a2 + 1) + 4;
      *((_QWORD *)a2 + 1) = v34;
    }
    goto LABEL_94;
  }
  return v4 == 0;
}

uint64_t CMMsl::SkeletonJoint::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;

  v3 = (_QWORD *)this;
  if ((*(_BYTE *)(this + 60) & 1) != 0)
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 56), 1u);
  v4 = (float *)v3[1];
  v5 = (float *)v3[2];
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  v8 = (float *)v3[4];
  v7 = (float *)v3[5];
  while (v8 != v7)
  {
    v9 = *v8++;
    this = PB::Writer::write(a2, v9, 3u);
  }
  return this;
}

BOOL CMMsl::SkeletonJoint::operator==(uint64_t a1, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  float v9;
  _BOOL8 result;
  BOOL v11;

  if ((*(_BYTE *)(a1 + 60) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 60) & 1) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 60) & 1) != 0)
  {
    return 0;
  }
  v3 = *(float **)(a1 + 8);
  v2 = *(float **)(a1 + 16);
  v4 = *(float **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v7 = *(float **)(a2 + 32);
  if (v5 - v6 != *(_QWORD *)(a2 + 40) - (_QWORD)v7)
    return 0;
  if (v6 == v5)
    return 1;
  v8 = v6 + 4;
  do
  {
    v9 = *v7++;
    result = *(float *)(v8 - 4) == v9;
    v11 = *(float *)(v8 - 4) != v9 || v8 == v5;
    v8 += 4;
  }
  while (!v11);
  return result;
}

uint64_t CMMsl::SkeletonJoint::hash_value(CMMsl::SkeletonJoint *this)
{
  uint64_t v2;
  uint64_t v3;

  if ((*((_BYTE *)this + 60) & 1) != 0)
    v2 = *((int *)this + 14);
  else
    v2 = 0;
  v3 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1)) ^ v2;
  return v3 ^ PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
}

void CMMsl::SoundPressureLevel::~SoundPressureLevel(CMMsl::SoundPressureLevel *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::SoundPressureLevel::SoundPressureLevel(uint64_t this, const CMMsl::SoundPressureLevel *a2)
{
  char v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)this = off_1003547E0;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
    v3 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) = 2;
    *(_DWORD *)(this + 16) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 1) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
LABEL_5:
    v4 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = v2;
    *(_QWORD *)(this + 8) = v4;
  }
  return this;
}

uint64_t CMMsl::SoundPressureLevel::operator=(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v3;
  char v5;
  char v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD v11[2];
  int v12;
  int v13;

  if (a1 != a2)
  {
    v11[0] = off_1003547E0;
    v13 = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 2) != 0)
    {
      a3 = *(float *)(a2 + 16);
      LOBYTE(v13) = 2;
      v6 = 3;
      if ((v5 & 1) != 0)
      {
LABEL_6:
        v3 = *(_QWORD *)(a2 + 8);
        LOBYTE(v13) = v6;
      }
    }
    else
    {
      v6 = 1;
      if ((*(_BYTE *)(a2 + 20) & 1) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v13;
    v13 = v7;
    v8 = *(_DWORD *)(a1 + 16);
    *(float *)(a1 + 16) = a3;
    v12 = v8;
    v9 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v11[1] = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::SoundPressureLevel *a2, CMMsl::SoundPressureLevel *a3)
{
  int v3;
  float result;
  uint64_t v5;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  return result;
}

float CMMsl::SoundPressureLevel::SoundPressureLevel(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_1003547E0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_1003547E0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::SoundPressureLevel::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  _QWORD v10[2];
  int v11;
  int v12;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_DWORD *)(a2 + 16);
    v5 = *(_QWORD *)(a2 + 8);
    v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    v12 = v6;
    v7 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v4;
    v11 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v5;
    v10[0] = off_1003547E0;
    v10[1] = v8;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::SoundPressureLevel::formatText(CMMsl::SoundPressureLevel *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "rms", *((float *)this + 4));
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SoundPressureLevel::readFrom(CMMsl::SoundPressureLevel *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 1u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              v25 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_47;
            }
            v30 = v21++;
            v31 = *(_BYTE *)(v22 + v30);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              v25 = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v25 = 0;
LABEL_46:
          v2 = v30 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              v25 = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_QWORD *)this + 1) = v25;
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 20) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SoundPressureLevel::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 16), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 1) != 0)
    return PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 8), 2u);
  return this;
}

uint64_t CMMsl::SoundPressureLevel::hash_value(CMMsl::SoundPressureLevel *this)
{
  uint64_t v1;
  uint64_t v2;
  float v3;

  if ((*((_BYTE *)this + 20) & 2) != 0)
  {
    v3 = *((float *)this + 4);
    v1 = LODWORD(v3);
    if (v3 == 0.0)
      v1 = 0;
    if ((*((_BYTE *)this + 20) & 1) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0;
    return v2 ^ v1;
  }
  v1 = 0;
  if ((*((_BYTE *)this + 20) & 1) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((_QWORD *)this + 1);
  return v2 ^ v1;
}

void CMMsl::SpatialEvent::~SpatialEvent(CMMsl::SpatialEvent *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::SpatialEvent::SpatialEvent(CMMsl::SpatialEvent *this, const CMMsl::SpatialEvent *a2)
{
  char v2;
  int v3;
  double result;

  *(_QWORD *)this = off_100354818;
  *((_QWORD *)this + 2) = 0;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
    v3 = *((_DWORD *)a2 + 4);
    *((_BYTE *)this + 20) = 2;
    *((_DWORD *)this + 4) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 1);
    *((_BYTE *)this + 20) = v2;
    *((double *)this + 1) = result;
  }
  return result;
}

uint64_t CMMsl::SpatialEvent::operator=(uint64_t a1, uint64_t a2, double a3)
{
  char v4;
  int v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;

  if (a1 != a2)
  {
    v11[0] = off_100354818;
    HIDWORD(v12) = 0;
    v4 = *(_BYTE *)(a2 + 20);
    if ((v4 & 2) != 0)
    {
      v5 = *(_DWORD *)(a2 + 16);
      BYTE4(v12) = 2;
      v6 = 3;
      if ((v4 & 1) != 0)
      {
LABEL_6:
        a3 = *(double *)(a2 + 8);
        BYTE4(v12) = v6;
      }
    }
    else
    {
      v5 = 0;
      v6 = 1;
      if ((*(_BYTE *)(a2 + 20) & 1) != 0)
        goto LABEL_6;
    }
    v7 = HIDWORD(v12);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v5;
    *(_DWORD *)(a1 + 20) = v7;
    *(double *)(a1 + 8) = a3;
    v11[1] = v9;
    v12 = v8;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SpatialEvent *a2, CMMsl::SpatialEvent *a3)
{
  int v3;
  int v4;
  double result;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

uint64_t CMMsl::SpatialEvent::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  if (a1 != a2)
  {
    v8[0] = off_100354818;
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    v6 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    v8[1] = v6;
    v8[2] = v5;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::SpatialEvent::formatText(CMMsl::SpatialEvent *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "event", *((_DWORD *)this + 4));
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SpatialEvent::readFrom(CMMsl::SpatialEvent *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 20) |= 2u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_47;
            }
            v30 = v21++;
            v31 = *(_BYTE *)(v22 + v30);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v25) = 0;
LABEL_46:
          v2 = v30 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v25;
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SpatialEvent::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 16), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8), 2u);
  return this;
}

uint64_t CMMsl::SpatialEvent::hash_value(CMMsl::SpatialEvent *this)
{
  uint64_t v1;
  double v2;

  if ((*((_BYTE *)this + 20) & 2) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 20) & 1) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0.0;
    return *(_QWORD *)&v2 ^ v1;
  }
  v1 = *((int *)this + 4);
  if ((*((_BYTE *)this + 20) & 1) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  return *(_QWORD *)&v2 ^ v1;
}

void CMMsl::SteadinessEvent::~SteadinessEvent(CMMsl::SteadinessEvent *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::SteadinessEvent::SteadinessEvent(CMMsl::SteadinessEvent *this, const CMMsl::SteadinessEvent *a2)
{
  __int16 v2;
  __int16 v3;
  double result;
  int v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;

  *(_QWORD *)this = off_100354850;
  *((_DWORD *)this + 15) = 0;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 8) != 0)
  {
    result = *((double *)a2 + 4);
    v3 = 8;
    *((_WORD *)this + 30) = 8;
    *((double *)this + 4) = result;
    v2 = *((_WORD *)a2 + 30);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 12);
    v3 |= 0x20u;
    *((_WORD *)this + 30) = v3;
    *((_DWORD *)this + 12) = v5;
    v2 = *((_WORD *)a2 + 30);
  }
LABEL_6:
  if ((v2 & 0x200) != 0)
  {
    v6 = *((_BYTE *)a2 + 55);
    v3 |= 0x200u;
    *((_WORD *)this + 30) = v3;
    *((_BYTE *)this + 55) = v6;
    v2 = *((_WORD *)a2 + 30);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_BYTE *)a2 + 56);
  v3 |= 0x400u;
  *((_WORD *)this + 30) = v3;
  *((_BYTE *)this + 56) = v7;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  v8 = *((_BYTE *)a2 + 52);
  v3 |= 0x40u;
  *((_WORD *)this + 30) = v3;
  *((_BYTE *)this + 52) = v8;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  v9 = *((_BYTE *)a2 + 53);
  v3 |= 0x80u;
  *((_WORD *)this + 30) = v3;
  *((_BYTE *)this + 53) = v9;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 2) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  v10 = *((_BYTE *)a2 + 54);
  v3 |= 0x100u;
  *((_WORD *)this + 30) = v3;
  *((_BYTE *)this + 54) = v10;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 2) == 0)
  {
LABEL_12:
    if ((v2 & 1) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  result = *((double *)a2 + 2);
  v3 |= 2u;
  *((_WORD *)this + 30) = v3;
  *((double *)this + 2) = result;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 1) == 0)
  {
LABEL_13:
    if ((v2 & 4) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_WORD *)this + 30) = v3;
  *((double *)this + 1) = result;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 4) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0)
      return result;
LABEL_24:
    result = *((double *)a2 + 5);
    *((_WORD *)this + 30) = v3 | 0x10;
    *((double *)this + 5) = result;
    return result;
  }
LABEL_23:
  result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_WORD *)this + 30) = v3;
  *((double *)this + 3) = result;
  if ((*((_WORD *)a2 + 30) & 0x10) != 0)
    goto LABEL_24;
  return result;
}

CMMsl *CMMsl::SteadinessEvent::operator=(CMMsl *a1, const CMMsl::SteadinessEvent *a2)
{
  CMMsl::SteadinessEvent *v3;
  _BYTE v5[64];

  if (a1 != a2)
  {
    CMMsl::SteadinessEvent::SteadinessEvent((CMMsl::SteadinessEvent *)v5, a2);
    CMMsl::swap(a1, (CMMsl::SteadinessEvent *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SteadinessEvent *a2, CMMsl::SteadinessEvent *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  v3 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  LOBYTE(v5) = *((_BYTE *)this + 55);
  *((_BYTE *)this + 55) = *((_BYTE *)a2 + 55);
  *((_BYTE *)a2 + 55) = v5;
  LOBYTE(v5) = *((_BYTE *)this + 56);
  *((_BYTE *)this + 56) = *((_BYTE *)a2 + 56);
  *((_BYTE *)a2 + 56) = v5;
  LOBYTE(v5) = *((_BYTE *)this + 52);
  *((_BYTE *)this + 52) = *((_BYTE *)a2 + 52);
  *((_BYTE *)a2 + 52) = v5;
  LOBYTE(v5) = *((_BYTE *)this + 53);
  *((_BYTE *)this + 53) = *((_BYTE *)a2 + 53);
  *((_BYTE *)a2 + 53) = v5;
  LOBYTE(v5) = *((_BYTE *)this + 54);
  *((_BYTE *)this + 54) = *((_BYTE *)a2 + 54);
  *((_BYTE *)a2 + 54) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v7;
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  result = *((double *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((double *)a2 + 5) = result;
  return result;
}

double CMMsl::SteadinessEvent::SteadinessEvent(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100354850;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 55) = *(_BYTE *)(a2 + 55);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_BYTE *)(a1 + 53) = *(_BYTE *)(a2 + 53);
  *(_BYTE *)(a1 + 54) = *(_BYTE *)(a2 + 54);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  result = *(double *)(a2 + 40);
  *(double *)(a1 + 40) = result;
  return result;
}

CMMsl *CMMsl::SteadinessEvent::operator=(CMMsl *this, uint64_t a2, CMMsl::SteadinessEvent *a3)
{
  void (**v5)(CMMsl::SteadinessEvent *__hidden);
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  int v9;
  int v10;
  char v11;
  int v12;

  if (this != (CMMsl *)a2)
  {
    v5 = off_100354850;
    v12 = *(_DWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 60) = 0;
    v9 = *(_DWORD *)(a2 + 48);
    v11 = *(_BYTE *)(a2 + 56);
    v10 = *(_DWORD *)(a2 + 52);
    v6 = *(_OWORD *)(a2 + 8);
    v7 = *(_OWORD *)(a2 + 24);
    v8 = *(_QWORD *)(a2 + 40);
    CMMsl::swap(this, (CMMsl::SteadinessEvent *)&v5, a3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return this;
}

uint64_t CMMsl::SteadinessEvent::formatText(CMMsl::SteadinessEvent *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(a2, "isBlockoutPeriodLow", *((_BYTE *)this + 52));
    v5 = *((_WORD *)this + 30);
    if ((v5 & 0x80) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "isBlockoutPeriodVeryLow", *((_BYTE *)this + 53));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "isSampleRecent", *((_BYTE *)this + 54));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 2) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "percentLow", *((double *)this + 1));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 2) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "percentOK", *((double *)this + 2));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "percentVeryLow", *((double *)this + 3));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 4));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "totalValidDuration", *((double *)this + 5));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x20) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(a2, "value", *((_DWORD *)this + 12));
    if ((*((_WORD *)this + 30) & 0x400) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "userHasOnboarded", *((_BYTE *)this + 55));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x20) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x400) != 0)
LABEL_12:
    PB::TextFormatter::format(a2, "writtenToHealthKit", *((_BYTE *)this + 56));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SteadinessEvent::readFrom(CMMsl::SteadinessEvent *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  int v31;
  BOOL v32;
  int v33;
  BOOL v34;
  int v35;
  BOOL v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 30) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_55;
              *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_74;
            case 2u:
              *((_WORD *)this + 30) |= 0x20u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_79;
                  }
                  v39 = v21++;
                  v40 = *(_BYTE *)(v22 + v39);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_78:
                    v2 = v39 + 1;
                    goto LABEL_79;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_78;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_79;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_79:
              *((_DWORD *)this + 12) = v25;
LABEL_80:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 3u:
              *((_WORD *)this + 30) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v28 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v28 = v27 != 0;
              }
              *((_BYTE *)this + 55) = v28;
              goto LABEL_80;
            case 4u:
              *((_WORD *)this + 30) |= 0x400u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v30 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v30 = v29 != 0;
              }
              *((_BYTE *)this + 56) = v30;
              goto LABEL_80;
            case 5u:
              *((_WORD *)this + 30) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v32 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v31 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v32 = v31 != 0;
              }
              *((_BYTE *)this + 52) = v32;
              goto LABEL_80;
            case 6u:
              *((_WORD *)this + 30) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v34 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v34 = v33 != 0;
              }
              *((_BYTE *)this + 53) = v34;
              goto LABEL_80;
            case 7u:
              *((_WORD *)this + 30) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v36 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v35 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v36 = v35 != 0;
              }
              *((_BYTE *)this + 54) = v36;
              goto LABEL_80;
            case 8u:
              *((_WORD *)this + 30) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_55;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_74;
            case 9u:
              *((_WORD *)this + 30) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_55;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_74;
            case 0xAu:
              *((_WORD *)this + 30) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_55;
              *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_74;
            case 0xBu:
              *((_WORD *)this + 30) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_74:
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_55:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_80;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_80;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::SteadinessEvent::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 60);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32), 1u);
    v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 2u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 55), 3u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 56), 4u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 52), 5u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 53), 6u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 2) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 54), 7u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 2) == 0)
  {
LABEL_9:
    if ((v4 & 1) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 8u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 1) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 9u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 40), 0xBu);
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 0xAu);
  if ((*(_WORD *)(v3 + 60) & 0x10) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 40), 0xBu);
  return this;
}

uint64_t CMMsl::SteadinessEvent::hash_value(CMMsl::SteadinessEvent *this)
{
  __int16 v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;

  v1 = *((_WORD *)this + 30);
  if ((v1 & 8) != 0)
  {
    v2 = *((double *)this + 4);
    if (v2 == 0.0)
      v2 = 0.0;
    if ((v1 & 0x20) != 0)
    {
LABEL_3:
      v3 = *((int *)this + 12);
      if ((*((_WORD *)this + 30) & 0x200) != 0)
        goto LABEL_4;
      goto LABEL_25;
    }
  }
  else
  {
    v2 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((*((_WORD *)this + 30) & 0x200) != 0)
  {
LABEL_4:
    v4 = *((unsigned __int8 *)this + 55);
    if ((*((_WORD *)this + 30) & 0x400) != 0)
      goto LABEL_5;
    goto LABEL_26;
  }
LABEL_25:
  v4 = 0;
  if ((*((_WORD *)this + 30) & 0x400) != 0)
  {
LABEL_5:
    v5 = *((unsigned __int8 *)this + 56);
    if ((v1 & 0x40) != 0)
      goto LABEL_6;
    goto LABEL_27;
  }
LABEL_26:
  v5 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_6:
    v6 = *((unsigned __int8 *)this + 52);
    if ((v1 & 0x80) != 0)
      goto LABEL_7;
    goto LABEL_28;
  }
LABEL_27:
  v6 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_7:
    v7 = *((unsigned __int8 *)this + 53);
    if ((*((_WORD *)this + 30) & 0x100) != 0)
      goto LABEL_8;
    goto LABEL_29;
  }
LABEL_28:
  v7 = 0;
  if ((*((_WORD *)this + 30) & 0x100) != 0)
  {
LABEL_8:
    v8 = *((unsigned __int8 *)this + 54);
    if ((v1 & 2) != 0)
      goto LABEL_9;
LABEL_30:
    v9 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_12;
LABEL_31:
    v10 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_29:
  v8 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_30;
LABEL_9:
  v9 = *((double *)this + 2);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_31;
LABEL_12:
  v10 = *((double *)this + 1);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((v1 & 4) != 0)
  {
LABEL_15:
    v11 = *((double *)this + 3);
    if (v11 == 0.0)
      v11 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_18;
LABEL_33:
    v12 = 0.0;
    return v3 ^ *(_QWORD *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12;
  }
LABEL_32:
  v11 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_33;
LABEL_18:
  v12 = *((double *)this + 5);
  if (v12 == 0.0)
    v12 = 0.0;
  return v3 ^ *(_QWORD *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12;
}

void CMMsl::SteadinessModelBalanceFeatures::~SteadinessModelBalanceFeatures(CMMsl::SteadinessModelBalanceFeatures *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::SteadinessModelBalanceFeatures::SteadinessModelBalanceFeatures(CMMsl::SteadinessModelBalanceFeatures *this, const CMMsl::SteadinessModelBalanceFeatures *a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)this = off_100354888;
  *((_DWORD *)this + 10) = 0;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 2) != 0)
  {
    result = *((double *)a2 + 2);
    v3 = 2;
    *((_BYTE *)this + 40) = 2;
    *((double *)this + 2) = result;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 40) & 1) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 1);
    v3 |= 1u;
    *((_BYTE *)this + 40) = v3;
    *((double *)this + 1) = result;
    v2 = *((_BYTE *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0)
      return result;
LABEL_10:
    result = *((double *)a2 + 4);
    *((_BYTE *)this + 40) = v3 | 8;
    *((double *)this + 4) = result;
    return result;
  }
  result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_BYTE *)this + 40) = v3;
  *((double *)this + 3) = result;
  if ((*((_BYTE *)a2 + 40) & 8) != 0)
    goto LABEL_10;
  return result;
}

uint64_t CMMsl::SteadinessModelBalanceFeatures::operator=(uint64_t a1, const CMMsl::SteadinessModelBalanceFeatures *a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  int v10;

  if ((const CMMsl::SteadinessModelBalanceFeatures *)a1 != a2)
  {
    CMMsl::SteadinessModelBalanceFeatures::SteadinessModelBalanceFeatures((CMMsl::SteadinessModelBalanceFeatures *)&v7, a2);
    v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v10;
    v10 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SteadinessModelBalanceFeatures *a2, CMMsl::SteadinessModelBalanceFeatures *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  result = *((double *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((double *)a2 + 4) = result;
  return result;
}

double CMMsl::SteadinessModelBalanceFeatures::SteadinessModelBalanceFeatures(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100354888;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100354888;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  return result;
}

uint64_t CMMsl::SteadinessModelBalanceFeatures::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  void (**v8)(CMMsl::SteadinessModelBalanceFeatures *__hidden);
  __int128 v9;
  __int128 v10;
  int v11;

  if (a1 != a2)
  {
    v8 = off_100354888;
    v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    v11 = *(_DWORD *)(a1 + 40);
    v4 = *(_OWORD *)(a2 + 8);
    v9 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a1 + 24);
    v6 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 40) = v3;
    *(_OWORD *)(a1 + 8) = v4;
    *(_OWORD *)(a1 + 24) = v6;
    v10 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::SteadinessModelBalanceFeatures::formatText(CMMsl::SteadinessModelBalanceFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "intermediateBoutsAsymmetryPercentageCv", *((double *)this + 1));
    v5 = *((_BYTE *)this + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "intermediateBoutsDoubleSupportPercentageMedian", *((double *)this + 3));
      if ((*((_BYTE *)this + 40) & 8) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "intermediateBoutsAsymmetryPercentageMedian", *((double *)this + 2));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "intermediateBoutsDoubleSupportPercentageStd", *((double *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SteadinessModelBalanceFeatures::readFrom(CMMsl::SteadinessModelBalanceFeatures *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 40) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_35;
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_37;
        case 2u:
          *((_BYTE *)this + 40) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_35;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_37;
        case 3u:
          *((_BYTE *)this + 40) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_35;
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_37;
        case 4u:
          *((_BYTE *)this + 40) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_37:
            v2 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v2;
          }
          else
          {
LABEL_35:
            *((_BYTE *)a2 + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SteadinessModelBalanceFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 40);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 40) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 2u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 32), 4u);
  }
LABEL_8:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 3u);
  if ((*(_BYTE *)(v3 + 40) & 8) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 32), 4u);
  return this;
}

uint64_t CMMsl::SteadinessModelBalanceFeatures::hash_value(CMMsl::SteadinessModelBalanceFeatures *this)
{
  double v1;
  double v2;
  double v3;
  double v4;

  if ((*((_BYTE *)this + 40) & 2) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 40) & 1) != 0)
      goto LABEL_3;
LABEL_15:
    v2 = 0.0;
    if ((*((_BYTE *)this + 40) & 4) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v1 = *((double *)this + 2);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 40) & 1) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 40) & 4) != 0)
  {
LABEL_6:
    v3 = *((double *)this + 3);
    if (v3 == 0.0)
      v3 = 0.0;
    if ((*((_BYTE *)this + 40) & 8) != 0)
      goto LABEL_9;
LABEL_17:
    v4 = 0.0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4;
  }
LABEL_16:
  v3 = 0.0;
  if ((*((_BYTE *)this + 40) & 8) == 0)
    goto LABEL_17;
LABEL_9:
  v4 = *((double *)this + 4);
  if (v4 == 0.0)
    v4 = 0.0;
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4;
}

void CMMsl::SteadinessModelContinuousWalkingFeatures::~SteadinessModelContinuousWalkingFeatures(CMMsl::SteadinessModelContinuousWalkingFeatures *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::SteadinessModelContinuousWalkingFeatures::SteadinessModelContinuousWalkingFeatures(CMMsl::SteadinessModelContinuousWalkingFeatures *this, const CMMsl::SteadinessModelContinuousWalkingFeatures *a2)
{
  int v2;
  int v3;
  double result;

  *(_QWORD *)this = off_1003548C0;
  *((_DWORD *)this + 44) = 0;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    v3 = 1;
    *((_DWORD *)this + 44) = 1;
    *((double *)this + 1) = result;
    v2 = *((_DWORD *)a2 + 44);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_DWORD *)this + 44) = v3;
    *((double *)this + 2) = result;
    v2 = *((_DWORD *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    result = *((double *)a2 + 3);
    v3 |= 4u;
    *((_DWORD *)this + 44) = v3;
    *((double *)this + 3) = result;
    v2 = *((_DWORD *)a2 + 44);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0)
        goto LABEL_9;
      goto LABEL_28;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 11);
  v3 |= 0x400u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 11) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  result = *((double *)a2 + 10);
  v3 |= 0x200u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 10) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 5) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 4) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 8) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x40) == 0)
  {
LABEL_13:
    if ((v2 & 0x20) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 7) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x20) == 0)
  {
LABEL_14:
    if ((v2 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 6) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x800) == 0)
  {
LABEL_15:
    if ((v2 & 0x100) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  result = *((double *)a2 + 12);
  v3 |= 0x800u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 12) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x100) == 0)
  {
LABEL_16:
    if ((v2 & 0x80000) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 9) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x80000) == 0)
  {
LABEL_17:
    if ((v2 & 0x100000) == 0)
      goto LABEL_18;
    goto LABEL_37;
  }
LABEL_36:
  result = *((double *)a2 + 20);
  v3 |= 0x80000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 20) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x100000) == 0)
  {
LABEL_18:
    if ((v2 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_38;
  }
LABEL_37:
  result = *((double *)a2 + 21);
  v3 |= 0x100000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 21) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x20000) == 0)
  {
LABEL_19:
    if ((v2 & 0x4000) == 0)
      goto LABEL_20;
    goto LABEL_39;
  }
LABEL_38:
  result = *((double *)a2 + 18);
  v3 |= 0x20000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 18) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x4000) == 0)
  {
LABEL_20:
    if ((v2 & 0x8000) == 0)
      goto LABEL_21;
    goto LABEL_40;
  }
LABEL_39:
  result = *((double *)a2 + 15);
  v3 |= 0x4000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 15) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x8000) == 0)
  {
LABEL_21:
    if ((v2 & 0x40000) == 0)
      goto LABEL_22;
    goto LABEL_41;
  }
LABEL_40:
  result = *((double *)a2 + 16);
  v3 |= 0x8000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 16) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x40000) == 0)
  {
LABEL_22:
    if ((v2 & 0x2000) == 0)
      goto LABEL_23;
    goto LABEL_42;
  }
LABEL_41:
  result = *((double *)a2 + 19);
  v3 |= 0x40000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 19) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x2000) == 0)
  {
LABEL_23:
    if ((v2 & 0x10000) == 0)
      goto LABEL_24;
    goto LABEL_43;
  }
LABEL_42:
  result = *((double *)a2 + 14);
  v3 |= 0x2000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 14) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x10000) == 0)
  {
LABEL_24:
    if ((v2 & 0x1000) == 0)
      return result;
LABEL_44:
    result = *((double *)a2 + 13);
    *((_DWORD *)this + 44) = v3 | 0x1000;
    *((double *)this + 13) = result;
    return result;
  }
LABEL_43:
  result = *((double *)a2 + 17);
  v3 |= 0x10000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 17) = result;
  if ((*((_DWORD *)a2 + 44) & 0x1000) != 0)
    goto LABEL_44;
  return result;
}

CMMsl *CMMsl::SteadinessModelContinuousWalkingFeatures::operator=(CMMsl *a1, const CMMsl::SteadinessModelContinuousWalkingFeatures *a2)
{
  CMMsl::SteadinessModelContinuousWalkingFeatures *v3;
  _BYTE v5[184];

  if (a1 != a2)
  {
    CMMsl::SteadinessModelContinuousWalkingFeatures::SteadinessModelContinuousWalkingFeatures((CMMsl::SteadinessModelContinuousWalkingFeatures *)v5, a2);
    CMMsl::swap(a1, (CMMsl::SteadinessModelContinuousWalkingFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SteadinessModelContinuousWalkingFeatures *a2, CMMsl::SteadinessModelContinuousWalkingFeatures *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double result;

  v3 = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v7;
  v8 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v8;
  v9 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v9;
  v10 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v10;
  v11 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v11;
  v12 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v12;
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v13;
  v14 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v14;
  v15 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v15;
  v16 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 20) = v16;
  v17 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
  *((_QWORD *)a2 + 21) = v17;
  v18 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v18;
  v19 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v19;
  v20 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v20;
  v21 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v21;
  v22 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v22;
  v23 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v23;
  result = *((double *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((double *)a2 + 13) = result;
  return result;
}

double CMMsl::SteadinessModelContinuousWalkingFeatures::SteadinessModelContinuousWalkingFeatures(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_1003548C0;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  result = *(double *)(a2 + 104);
  *(double *)(a1 + 104) = result;
  return result;
}

CMMsl *CMMsl::SteadinessModelContinuousWalkingFeatures::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::SteadinessModelContinuousWalkingFeatures *v3;
  _BYTE v5[184];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::SteadinessModelContinuousWalkingFeatures::SteadinessModelContinuousWalkingFeatures((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::SteadinessModelContinuousWalkingFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::SteadinessModelContinuousWalkingFeatures::formatText(CMMsl::SteadinessModelContinuousWalkingFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "allBoutsBoutDurationSecCv", *((double *)this + 1));
    v5 = *((_DWORD *)this + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_26;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "allBoutsBoutDurationSecMedian", *((double *)this + 2));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "allBoutsCycleTimeCv", *((double *)this + 3));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "intermediateBoutsCycleTimeCv", *((double *)this + 4));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "intermediateBoutsCycleTimeMedian", *((double *)this + 5));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "intermediateBoutsDoubleSupportPercentageMedian", *((double *)this + 6));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "intermediateBoutsStepLengthCv", *((double *)this + 7));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "intermediateBoutsStepLengthMedian", *((double *)this + 8));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "intermediateBoutsStepLengthMedianHeightnorm", *((double *)this + 9));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "intermediateBoutsWalkingSpeedCv", *((double *)this + 10));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "intermediateBoutsWalkingSpeedMedian", *((double *)this + 11));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "intermediateBoutsWalkingSpeedMedianSqrtheightnorm", *((double *)this + 12));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "longBoutsWalkingSpeedCountRatioLog", *((double *)this + 13));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "shortBoutsCycleTimeCv", *((double *)this + 14));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "shortBoutsCycleTimeMedian", *((double *)this + 15));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "shortBoutsDoubleSupportPercentageMedian", *((double *)this + 16));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "shortBoutsStepLengthCv", *((double *)this + 17));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "shortBoutsStepLengthMedianHeightnorm", *((double *)this + 18));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0)
      goto LABEL_21;
LABEL_43:
    PB::TextFormatter::format(a2, "shortBoutsWalkingSpeedMedian", *((double *)this + 20));
    if ((*((_DWORD *)this + 44) & 0x100000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_22;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "shortBoutsWalkingSpeedCv", *((double *)this + 19));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x80000) != 0)
    goto LABEL_43;
LABEL_21:
  if ((v5 & 0x100000) != 0)
LABEL_22:
    PB::TextFormatter::format(a2, "shortBoutsWalkingSpeedMedianSqrtheightnorm", *((double *)this + 21));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SteadinessModelContinuousWalkingFeatures::readFrom(CMMsl::SteadinessModelContinuousWalkingFeatures *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_DWORD *)this + 44) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_86;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_88;
        case 2u:
          *((_DWORD *)this + 44) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_86;
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_88;
        case 3u:
          *((_DWORD *)this + 44) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_86;
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_88;
        case 4u:
          *((_DWORD *)this + 44) |= 0x400u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_86;
          *((_QWORD *)this + 11) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_88;
        case 5u:
          *((_DWORD *)this + 44) |= 0x200u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_86;
          *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_88;
        case 6u:
          *((_DWORD *)this + 44) |= 0x10u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_86;
          *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_88;
        case 7u:
          *((_DWORD *)this + 44) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_86;
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_88;
        case 8u:
          *((_DWORD *)this + 44) |= 0x80u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_86;
          *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_88;
        case 9u:
          *((_DWORD *)this + 44) |= 0x40u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_86;
          *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_88;
        case 0xAu:
          *((_DWORD *)this + 44) |= 0x20u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_86;
          *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_88;
        case 0xBu:
          *((_DWORD *)this + 44) |= 0x800u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_86;
          *((_QWORD *)this + 12) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_88;
        case 0xCu:
          *((_DWORD *)this + 44) |= 0x100u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_86;
          *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_88;
        case 0xDu:
          *((_DWORD *)this + 44) |= 0x80000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_86;
          *((_QWORD *)this + 20) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_88;
        case 0xEu:
          *((_DWORD *)this + 44) |= 0x100000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_86;
          *((_QWORD *)this + 21) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_88;
        case 0xFu:
          *((_DWORD *)this + 44) |= 0x20000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_86;
          *((_QWORD *)this + 18) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_88;
        case 0x10u:
          *((_DWORD *)this + 44) |= 0x4000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_86;
          *((_QWORD *)this + 15) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_88;
        case 0x11u:
          *((_DWORD *)this + 44) |= 0x8000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_86;
          *((_QWORD *)this + 16) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_88;
        case 0x12u:
          *((_DWORD *)this + 44) |= 0x40000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_86;
          *((_QWORD *)this + 19) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_88;
        case 0x13u:
          *((_DWORD *)this + 44) |= 0x2000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_86;
          *((_QWORD *)this + 14) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_88;
        case 0x14u:
          *((_DWORD *)this + 44) |= 0x10000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_86;
          *((_QWORD *)this + 17) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_88;
        case 0x15u:
          *((_DWORD *)this + 44) |= 0x1000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          {
LABEL_86:
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            *((_QWORD *)this + 13) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_88:
            v2 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v2;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SteadinessModelContinuousWalkingFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 176);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_DWORD *)(v3 + 176);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_25;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 3u);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(double *)(v3 + 88), 4u);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(double *)(v3 + 80), 5u);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      goto LABEL_8;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 6u);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 7u);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 8u);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x40) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0)
      goto LABEL_11;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 9u);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x20) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 0xAu);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(double *)(v3 + 96), 0xBu);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x100) == 0)
  {
LABEL_13:
    if ((v4 & 0x80000) == 0)
      goto LABEL_14;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 0xCu);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x80000) == 0)
  {
LABEL_14:
    if ((v4 & 0x100000) == 0)
      goto LABEL_15;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(double *)(v3 + 160), 0xDu);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x100000) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000) == 0)
      goto LABEL_16;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(double *)(v3 + 168), 0xEu);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x20000) == 0)
  {
LABEL_16:
    if ((v4 & 0x4000) == 0)
      goto LABEL_17;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(double *)(v3 + 144), 0xFu);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x4000) == 0)
  {
LABEL_17:
    if ((v4 & 0x8000) == 0)
      goto LABEL_18;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 120), 0x10u);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x8000) == 0)
  {
LABEL_18:
    if ((v4 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 128), 0x11u);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x40000) == 0)
  {
LABEL_19:
    if ((v4 & 0x2000) == 0)
      goto LABEL_20;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 152), 0x12u);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x2000) == 0)
  {
LABEL_20:
    if ((v4 & 0x10000) == 0)
      goto LABEL_21;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(double *)(v3 + 112), 0x13u);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x10000) == 0)
  {
LABEL_21:
    if ((v4 & 0x1000) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 104), 0x15u);
  }
LABEL_42:
  this = PB::Writer::write(a2, *(double *)(v3 + 136), 0x14u);
  if ((*(_DWORD *)(v3 + 176) & 0x1000) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 104), 0x15u);
  return this;
}

uint64_t CMMsl::SteadinessModelContinuousWalkingFeatures::hash_value(CMMsl::SteadinessModelContinuousWalkingFeatures *this)
{
  int v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;

  v1 = *((_DWORD *)this + 44);
  if ((v1 & 1) == 0)
  {
    v2 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_3;
LABEL_66:
    v3 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_6;
LABEL_67:
    v4 = 0.0;
    if ((v1 & 0x400) != 0)
      goto LABEL_9;
LABEL_68:
    v5 = 0.0;
    if ((v1 & 0x200) != 0)
      goto LABEL_12;
LABEL_69:
    v6 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_15;
LABEL_70:
    v7 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_18;
LABEL_71:
    v8 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_21;
LABEL_72:
    v9 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_24;
LABEL_73:
    v10 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_27;
LABEL_74:
    v11 = 0.0;
    if ((v1 & 0x800) != 0)
      goto LABEL_30;
LABEL_75:
    v12 = 0.0;
    if ((v1 & 0x100) != 0)
      goto LABEL_33;
LABEL_76:
    v13 = 0.0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_36;
LABEL_77:
    v14 = 0.0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_39;
LABEL_78:
    v15 = 0.0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_42;
LABEL_79:
    v16 = 0.0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_45;
LABEL_80:
    v17 = 0.0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_48;
LABEL_81:
    v18 = 0.0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_51;
LABEL_82:
    v19 = 0.0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_54;
LABEL_83:
    v20 = 0.0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_57;
    goto LABEL_84;
  }
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_66;
LABEL_3:
  v3 = *((double *)this + 2);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_67;
LABEL_6:
  v4 = *((double *)this + 3);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 0x400) == 0)
    goto LABEL_68;
LABEL_9:
  v5 = *((double *)this + 11);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 0x200) == 0)
    goto LABEL_69;
LABEL_12:
  v6 = *((double *)this + 10);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_70;
LABEL_15:
  v7 = *((double *)this + 5);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_71;
LABEL_18:
  v8 = *((double *)this + 4);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((v1 & 0x80) == 0)
    goto LABEL_72;
LABEL_21:
  v9 = *((double *)this + 8);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((v1 & 0x40) == 0)
    goto LABEL_73;
LABEL_24:
  v10 = *((double *)this + 7);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_74;
LABEL_27:
  v11 = *((double *)this + 6);
  if (v11 == 0.0)
    v11 = 0.0;
  if ((v1 & 0x800) == 0)
    goto LABEL_75;
LABEL_30:
  v12 = *((double *)this + 12);
  if (v12 == 0.0)
    v12 = 0.0;
  if ((v1 & 0x100) == 0)
    goto LABEL_76;
LABEL_33:
  v13 = *((double *)this + 9);
  if (v13 == 0.0)
    v13 = 0.0;
  if ((v1 & 0x80000) == 0)
    goto LABEL_77;
LABEL_36:
  v14 = *((double *)this + 20);
  if (v14 == 0.0)
    v14 = 0.0;
  if ((v1 & 0x100000) == 0)
    goto LABEL_78;
LABEL_39:
  v15 = *((double *)this + 21);
  if (v15 == 0.0)
    v15 = 0.0;
  if ((v1 & 0x20000) == 0)
    goto LABEL_79;
LABEL_42:
  v16 = *((double *)this + 18);
  if (v16 == 0.0)
    v16 = 0.0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_80;
LABEL_45:
  v17 = *((double *)this + 15);
  if (v17 == 0.0)
    v17 = 0.0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_81;
LABEL_48:
  v18 = *((double *)this + 16);
  if (v18 == 0.0)
    v18 = 0.0;
  if ((v1 & 0x40000) == 0)
    goto LABEL_82;
LABEL_51:
  v19 = *((double *)this + 19);
  if (v19 == 0.0)
    v19 = 0.0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_83;
LABEL_54:
  v20 = *((double *)this + 14);
  if (v20 == 0.0)
    v20 = 0.0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_57:
    v21 = *((double *)this + 17);
    if (v21 == 0.0)
      v21 = 0.0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_60;
LABEL_85:
    v22 = 0.0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ *(_QWORD *)&v15 ^ *(_QWORD *)&v16 ^ *(_QWORD *)&v17 ^ *(_QWORD *)&v18 ^ *(_QWORD *)&v19 ^ *(_QWORD *)&v20 ^ *(_QWORD *)&v21 ^ *(_QWORD *)&v22;
  }
LABEL_84:
  v21 = 0.0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_85;
LABEL_60:
  v22 = *((double *)this + 13);
  if (v22 == 0.0)
    v22 = 0.0;
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ *(_QWORD *)&v15 ^ *(_QWORD *)&v16 ^ *(_QWORD *)&v17 ^ *(_QWORD *)&v18 ^ *(_QWORD *)&v19 ^ *(_QWORD *)&v20 ^ *(_QWORD *)&v21 ^ *(_QWORD *)&v22;
}

void CMMsl::SteadinessModelGaitBaselineFeatures::~SteadinessModelGaitBaselineFeatures(CMMsl::SteadinessModelGaitBaselineFeatures *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::SteadinessModelGaitBaselineFeatures::SteadinessModelGaitBaselineFeatures(CMMsl::SteadinessModelGaitBaselineFeatures *this, const CMMsl::SteadinessModelGaitBaselineFeatures *a2)
{
  __int16 v2;
  __int16 v3;
  double result;

  *(_QWORD *)this = off_1003548F8;
  *((_DWORD *)this + 22) = 0;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    v3 = 1;
    *((_WORD *)this + 44) = 1;
    *((double *)this + 1) = result;
    v2 = *((_WORD *)a2 + 44);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_WORD *)this + 44) = v3;
    *((double *)this + 2) = result;
    v2 = *((_WORD *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    result = *((double *)a2 + 3);
    v3 |= 4u;
    *((_WORD *)this + 44) = v3;
    *((double *)this + 3) = result;
    v2 = *((_WORD *)a2 + 44);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0)
        goto LABEL_9;
      goto LABEL_17;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 8) = result;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_18;
  }
LABEL_17:
  result = *((double *)a2 + 10);
  v3 |= 0x200u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 10) = result;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0)
      goto LABEL_11;
    goto LABEL_19;
  }
LABEL_18:
  result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 9) = result;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_20;
  }
LABEL_19:
  result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 4) = result;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_21;
  }
LABEL_20:
  result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 7) = result;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x10) == 0)
  {
LABEL_13:
    if ((v2 & 0x20) == 0)
      return result;
LABEL_22:
    result = *((double *)a2 + 6);
    *((_WORD *)this + 44) = v3 | 0x20;
    *((double *)this + 6) = result;
    return result;
  }
LABEL_21:
  result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 5) = result;
  if ((*((_WORD *)a2 + 44) & 0x20) != 0)
    goto LABEL_22;
  return result;
}

uint64_t CMMsl::SteadinessModelGaitBaselineFeatures::operator=(uint64_t a1, const CMMsl::SteadinessModelGaitBaselineFeatures *a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;

  if ((const CMMsl::SteadinessModelGaitBaselineFeatures *)a1 != a2)
  {
    CMMsl::SteadinessModelGaitBaselineFeatures::SteadinessModelGaitBaselineFeatures((CMMsl::SteadinessModelGaitBaselineFeatures *)&v10, a2);
    v3 = *(_DWORD *)(a1 + 88);
    *(_DWORD *)(a1 + 88) = v16;
    v16 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    v11 = v4;
    v5 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)(a1 + 72) = v15;
    v15 = v5;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    v12 = v6;
    v7 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v14;
    v14 = v7;
    v8 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    v13 = v8;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SteadinessModelGaitBaselineFeatures *a2, CMMsl::SteadinessModelGaitBaselineFeatures *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;

  v3 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v7;
  v8 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v8;
  v9 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v9;
  v10 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v10;
  v11 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v11;
  v12 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v12;
  result = *((double *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((double *)a2 + 6) = result;
  return result;
}

double CMMsl::SteadinessModelGaitBaselineFeatures::SteadinessModelGaitBaselineFeatures(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_1003548F8;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  result = *(double *)(a2 + 48);
  *(double *)(a1 + 48) = result;
  return result;
}

uint64_t CMMsl::SteadinessModelGaitBaselineFeatures::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  void (**v12)(CMMsl::SteadinessModelGaitBaselineFeatures *__hidden);
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;

  if (a1 != a2)
  {
    v12 = off_1003548F8;
    v3 = *(_DWORD *)(a2 + 88);
    *(_DWORD *)(a2 + 88) = 0;
    v18 = *(_DWORD *)(a1 + 88);
    v4 = *(_OWORD *)(a2 + 8);
    v13 = *(_OWORD *)(a1 + 8);
    v17 = *(_OWORD *)(a1 + 72);
    v5 = *(_OWORD *)(a2 + 24);
    v14 = *(_OWORD *)(a1 + 24);
    v6 = *(_OWORD *)(a1 + 56);
    v7 = *(_OWORD *)(a1 + 40);
    v8 = *(_OWORD *)(a2 + 40);
    v9 = *(_OWORD *)(a2 + 56);
    v10 = *(_OWORD *)(a2 + 72);
    *(_DWORD *)(a1 + 88) = v3;
    *(_OWORD *)(a1 + 8) = v4;
    *(_OWORD *)(a1 + 72) = v10;
    *(_OWORD *)(a1 + 24) = v5;
    *(_OWORD *)(a1 + 56) = v9;
    v16 = v6;
    *(_OWORD *)(a1 + 40) = v8;
    v15 = v7;
    PB::Base::~Base((PB::Base *)&v12);
  }
  return a1;
}

uint64_t CMMsl::SteadinessModelGaitBaselineFeatures::formatText(CMMsl::SteadinessModelGaitBaselineFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 44);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "asymmetryPercentageMedian", *((double *)this + 1));
    v5 = *((_WORD *)this + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "asymmetryPercentageStd", *((double *)this + 2));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "doubleSupportPercentageMedian", *((double *)this + 3));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "height", *((double *)this + 4));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "intermediateBoutsStepLengthQ95Heightnorm", *((double *)this + 5));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "intermediateBoutsWalkingSpeedQ95Sqrtheightnorm", *((double *)this + 6));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "modelOutputBalancePrior", *((double *)this + 7));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
LABEL_21:
    PB::TextFormatter::format(a2, "stepLengthXWalkingSpeedMedian", *((double *)this + 9));
    if ((*((_WORD *)this + 44) & 0x200) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_11;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "stepLengthMedian", *((double *)this + 8));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x100) != 0)
    goto LABEL_21;
LABEL_10:
  if ((v5 & 0x200) != 0)
LABEL_11:
    PB::TextFormatter::format(a2, "walkingSpeedMedian", *((double *)this + 10));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SteadinessModelGaitBaselineFeatures::readFrom(CMMsl::SteadinessModelGaitBaselineFeatures *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_WORD *)this + 44) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_53;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_55;
        case 2u:
          *((_WORD *)this + 44) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_53;
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_55;
        case 3u:
          *((_WORD *)this + 44) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_53;
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_55;
        case 4u:
          *((_WORD *)this + 44) |= 0x80u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_53;
          *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_55;
        case 5u:
          *((_WORD *)this + 44) |= 0x200u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_53;
          *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_55;
        case 6u:
          *((_WORD *)this + 44) |= 0x100u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_53;
          *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_55;
        case 7u:
          *((_WORD *)this + 44) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_53;
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_55;
        case 8u:
          *((_WORD *)this + 44) |= 0x40u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_53;
          *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_55;
        case 9u:
          *((_WORD *)this + 44) |= 0x10u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_53;
          *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_55;
        case 0xAu:
          *((_WORD *)this + 44) |= 0x20u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_55:
            v2 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v2;
          }
          else
          {
LABEL_53:
            *((_BYTE *)a2 + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SteadinessModelGaitBaselineFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 88);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_WORD *)(v3 + 88);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 3u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 4u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 80), 5u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 6u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 7u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 8u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 48), 0xAu);
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 9u);
  if ((*(_WORD *)(v3 + 88) & 0x20) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 48), 0xAu);
  return this;
}

uint64_t CMMsl::SteadinessModelGaitBaselineFeatures::hash_value(CMMsl::SteadinessModelGaitBaselineFeatures *this)
{
  __int16 v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;

  v1 = *((_WORD *)this + 44);
  if ((v1 & 1) == 0)
  {
    v2 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_3;
LABEL_33:
    v3 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_6;
LABEL_34:
    v4 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_9;
LABEL_35:
    v5 = 0.0;
    if ((*((_WORD *)this + 44) & 0x200) != 0)
      goto LABEL_12;
LABEL_36:
    v6 = 0.0;
    if ((*((_WORD *)this + 44) & 0x100) != 0)
      goto LABEL_15;
LABEL_37:
    v7 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_18;
LABEL_38:
    v8 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_21;
LABEL_39:
    v9 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_24;
    goto LABEL_40;
  }
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_33;
LABEL_3:
  v3 = *((double *)this + 2);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_34;
LABEL_6:
  v4 = *((double *)this + 3);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 0x80) == 0)
    goto LABEL_35;
LABEL_9:
  v5 = *((double *)this + 8);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((*((_WORD *)this + 44) & 0x200) == 0)
    goto LABEL_36;
LABEL_12:
  v6 = *((double *)this + 10);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((*((_WORD *)this + 44) & 0x100) == 0)
    goto LABEL_37;
LABEL_15:
  v7 = *((double *)this + 9);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_38;
LABEL_18:
  v8 = *((double *)this + 4);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((v1 & 0x40) == 0)
    goto LABEL_39;
LABEL_21:
  v9 = *((double *)this + 7);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((v1 & 0x10) != 0)
  {
LABEL_24:
    v10 = *((double *)this + 5);
    if (v10 == 0.0)
      v10 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_27;
LABEL_41:
    v11 = 0.0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11;
  }
LABEL_40:
  v10 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_41;
LABEL_27:
  v11 = *((double *)this + 6);
  if (v11 == 0.0)
    v11 = 0.0;
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11;
}

void CMMsl::SteadinessModelHarmonicFeatures::~SteadinessModelHarmonicFeatures(CMMsl::SteadinessModelHarmonicFeatures *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::SteadinessModelHarmonicFeatures::SteadinessModelHarmonicFeatures(CMMsl::SteadinessModelHarmonicFeatures *this, const CMMsl::SteadinessModelHarmonicFeatures *a2)
{
  int v2;
  int v3;
  double result;

  *(_QWORD *)this = off_100354930;
  *((_DWORD *)this + 62) = 0;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    v3 = 1;
    *((_DWORD *)this + 62) = 1;
    *((double *)this + 1) = result;
    v2 = *((_DWORD *)a2 + 62);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_DWORD *)this + 62) = v3;
    *((double *)this + 2) = result;
    v2 = *((_DWORD *)a2 + 62);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    result = *((double *)a2 + 3);
    v3 |= 4u;
    *((_DWORD *)this + 62) = v3;
    *((double *)this + 3) = result;
    v2 = *((_DWORD *)a2 + 62);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_37;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 4) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_38;
  }
LABEL_37:
  result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 5) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_39;
  }
LABEL_38:
  result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 6) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_40;
  }
LABEL_39:
  result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 7) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_41;
  }
LABEL_40:
  result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 8) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x100) == 0)
  {
LABEL_13:
    if ((v2 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_42;
  }
LABEL_41:
  result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 9) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x200) == 0)
  {
LABEL_14:
    if ((v2 & 0x400) == 0)
      goto LABEL_15;
    goto LABEL_43;
  }
LABEL_42:
  result = *((double *)a2 + 10);
  v3 |= 0x200u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 10) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x400) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_44;
  }
LABEL_43:
  result = *((double *)a2 + 11);
  v3 |= 0x400u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 11) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x800) == 0)
  {
LABEL_16:
    if ((v2 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_45;
  }
LABEL_44:
  result = *((double *)a2 + 12);
  v3 |= 0x800u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 12) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x1000) == 0)
  {
LABEL_17:
    if ((v2 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_46;
  }
LABEL_45:
  result = *((double *)a2 + 13);
  v3 |= 0x1000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 13) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x2000) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_47;
  }
LABEL_46:
  result = *((double *)a2 + 14);
  v3 |= 0x2000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 14) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x4000) == 0)
  {
LABEL_19:
    if ((v2 & 0x8000) == 0)
      goto LABEL_20;
    goto LABEL_48;
  }
LABEL_47:
  result = *((double *)a2 + 15);
  v3 |= 0x4000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 15) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x8000) == 0)
  {
LABEL_20:
    if ((v2 & 0x10000) == 0)
      goto LABEL_21;
    goto LABEL_49;
  }
LABEL_48:
  result = *((double *)a2 + 16);
  v3 |= 0x8000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 16) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x10000) == 0)
  {
LABEL_21:
    if ((v2 & 0x20000) == 0)
      goto LABEL_22;
    goto LABEL_50;
  }
LABEL_49:
  result = *((double *)a2 + 17);
  v3 |= 0x10000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 17) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x20000) == 0)
  {
LABEL_22:
    if ((v2 & 0x40000) == 0)
      goto LABEL_23;
    goto LABEL_51;
  }
LABEL_50:
  result = *((double *)a2 + 18);
  v3 |= 0x20000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 18) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x40000) == 0)
  {
LABEL_23:
    if ((v2 & 0x80000) == 0)
      goto LABEL_24;
    goto LABEL_52;
  }
LABEL_51:
  result = *((double *)a2 + 19);
  v3 |= 0x40000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 19) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x80000) == 0)
  {
LABEL_24:
    if ((v2 & 0x100000) == 0)
      goto LABEL_25;
    goto LABEL_53;
  }
LABEL_52:
  result = *((double *)a2 + 20);
  v3 |= 0x80000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 20) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x100000) == 0)
  {
LABEL_25:
    if ((v2 & 0x200000) == 0)
      goto LABEL_26;
    goto LABEL_54;
  }
LABEL_53:
  result = *((double *)a2 + 21);
  v3 |= 0x100000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 21) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x200000) == 0)
  {
LABEL_26:
    if ((v2 & 0x400000) == 0)
      goto LABEL_27;
    goto LABEL_55;
  }
LABEL_54:
  result = *((double *)a2 + 22);
  v3 |= 0x200000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 22) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x400000) == 0)
  {
LABEL_27:
    if ((v2 & 0x800000) == 0)
      goto LABEL_28;
    goto LABEL_56;
  }
LABEL_55:
  result = *((double *)a2 + 23);
  v3 |= 0x400000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 23) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x800000) == 0)
  {
LABEL_28:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_29;
    goto LABEL_57;
  }
LABEL_56:
  result = *((double *)a2 + 24);
  v3 |= 0x800000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 24) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_29:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_30;
    goto LABEL_58;
  }
LABEL_57:
  result = *((double *)a2 + 25);
  v3 |= 0x1000000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 25) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_30:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_31;
    goto LABEL_59;
  }
LABEL_58:
  result = *((double *)a2 + 27);
  v3 |= 0x4000000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 27) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_31:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_32;
    goto LABEL_60;
  }
LABEL_59:
  result = *((double *)a2 + 28);
  v3 |= 0x8000000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 28) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_33;
    goto LABEL_61;
  }
LABEL_60:
  result = *((double *)a2 + 29);
  v3 |= 0x10000000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 29) = result;
  v2 = *((_DWORD *)a2 + 62);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_33:
    if ((v2 & 0x2000000) == 0)
      return result;
LABEL_62:
    result = *((double *)a2 + 26);
    *((_DWORD *)this + 62) = v3 | 0x2000000;
    *((double *)this + 26) = result;
    return result;
  }
LABEL_61:
  result = *((double *)a2 + 30);
  v3 |= 0x20000000u;
  *((_DWORD *)this + 62) = v3;
  *((double *)this + 30) = result;
  if ((*((_DWORD *)a2 + 62) & 0x2000000) != 0)
    goto LABEL_62;
  return result;
}

CMMsl *CMMsl::SteadinessModelHarmonicFeatures::operator=(CMMsl *a1, const CMMsl::SteadinessModelHarmonicFeatures *a2)
{
  CMMsl::SteadinessModelHarmonicFeatures *v3;
  _BYTE v5[256];

  if (a1 != a2)
  {
    CMMsl::SteadinessModelHarmonicFeatures::SteadinessModelHarmonicFeatures((CMMsl::SteadinessModelHarmonicFeatures *)v5, a2);
    CMMsl::swap(a1, (CMMsl::SteadinessModelHarmonicFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SteadinessModelHarmonicFeatures *a2, CMMsl::SteadinessModelHarmonicFeatures *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double result;

  v3 = *((_DWORD *)this + 62);
  *((_DWORD *)this + 62) = *((_DWORD *)a2 + 62);
  *((_DWORD *)a2 + 62) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v7;
  v8 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  v9 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v9;
  v10 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v10;
  v11 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v11;
  v12 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v12;
  v13 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v13;
  v14 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v14;
  v15 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v15;
  v16 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v16;
  v17 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v17;
  v18 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v18;
  v19 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v19;
  v20 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v20;
  v21 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v21;
  v22 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v22;
  v23 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 20) = v23;
  v24 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
  *((_QWORD *)a2 + 21) = v24;
  v25 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = *((_QWORD *)a2 + 22);
  *((_QWORD *)a2 + 22) = v25;
  v26 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = *((_QWORD *)a2 + 23);
  *((_QWORD *)a2 + 23) = v26;
  v27 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = *((_QWORD *)a2 + 24);
  *((_QWORD *)a2 + 24) = v27;
  v28 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = *((_QWORD *)a2 + 25);
  *((_QWORD *)a2 + 25) = v28;
  v29 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = *((_QWORD *)a2 + 27);
  *((_QWORD *)a2 + 27) = v29;
  v30 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = *((_QWORD *)a2 + 28);
  *((_QWORD *)a2 + 28) = v30;
  v31 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = *((_QWORD *)a2 + 29);
  *((_QWORD *)a2 + 29) = v31;
  v32 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = *((_QWORD *)a2 + 30);
  *((_QWORD *)a2 + 30) = v32;
  result = *((double *)this + 26);
  *((_QWORD *)this + 26) = *((_QWORD *)a2 + 26);
  *((double *)a2 + 26) = result;
  return result;
}

double CMMsl::SteadinessModelHarmonicFeatures::SteadinessModelHarmonicFeatures(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100354930;
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(_DWORD *)(a2 + 248) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  result = *(double *)(a2 + 208);
  *(double *)(a1 + 208) = result;
  return result;
}

CMMsl *CMMsl::SteadinessModelHarmonicFeatures::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::SteadinessModelHarmonicFeatures *v3;
  _BYTE v5[256];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::SteadinessModelHarmonicFeatures::SteadinessModelHarmonicFeatures((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::SteadinessModelHarmonicFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::SteadinessModelHarmonicFeatures::formatText(CMMsl::SteadinessModelHarmonicFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityApCv", *((double *)this + 1));
    v5 = *((_DWORD *)this + 62);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_35;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityApMean", *((double *)this + 2));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityApMedian", *((double *)this + 3));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityApQ5", *((double *)this + 4));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityApQ95", *((double *)this + 5));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityMlCv", *((double *)this + 6));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityMlMean", *((double *)this + 7));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityMlMedian", *((double *)this + 8));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityMlQ5", *((double *)this + 9));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityMlQ95", *((double *)this + 10));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityVtCv", *((double *)this + 11));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityVtMean", *((double *)this + 12));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityVtMedian", *((double *)this + 13));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityVtQ5", *((double *)this + 14));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "allBoutsStepIndexOfHarmonicityVtQ95", *((double *)this + 15));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityApCv", *((double *)this + 16));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityApMean", *((double *)this + 17));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityApMedian", *((double *)this + 18));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityApQ5", *((double *)this + 19));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityApQ95", *((double *)this + 20));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityMlCv", *((double *)this + 21));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityMlMean", *((double *)this + 22));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v5 & 0x800000) == 0)
      goto LABEL_25;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityMlMedian", *((double *)this + 23));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x800000) == 0)
  {
LABEL_25:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_26;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityMlQ5", *((double *)this + 24));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_27;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityMlQ95", *((double *)this + 25));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_28;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityVtCv", *((double *)this + 26));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_29;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityVtMean", *((double *)this + 27));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_30;
LABEL_61:
    PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityVtQ5", *((double *)this + 29));
    if ((*((_DWORD *)this + 62) & 0x20000000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_31;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityVtMedian", *((double *)this + 28));
  v5 = *((_DWORD *)this + 62);
  if ((v5 & 0x10000000) != 0)
    goto LABEL_61;
LABEL_30:
  if ((v5 & 0x20000000) != 0)
LABEL_31:
    PB::TextFormatter::format(a2, "allBoutsSwingIndexOfHarmonicityVtQ95", *((double *)this + 30));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SteadinessModelHarmonicFeatures::readFrom(CMMsl::SteadinessModelHarmonicFeatures *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_DWORD *)this + 62) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_115;
        case 2u:
          *((_DWORD *)this + 62) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_115;
        case 3u:
          *((_DWORD *)this + 62) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_115;
        case 4u:
          *((_DWORD *)this + 62) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_115;
        case 5u:
          *((_DWORD *)this + 62) |= 0x10u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_115;
        case 6u:
          *((_DWORD *)this + 62) |= 0x20u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_115;
        case 7u:
          *((_DWORD *)this + 62) |= 0x40u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_115;
        case 8u:
          *((_DWORD *)this + 62) |= 0x80u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_115;
        case 9u:
          *((_DWORD *)this + 62) |= 0x100u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_115;
        case 0xAu:
          *((_DWORD *)this + 62) |= 0x200u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_115;
        case 0xBu:
          *((_DWORD *)this + 62) |= 0x400u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_QWORD *)this + 11) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_115;
        case 0xCu:
          *((_DWORD *)this + 62) |= 0x800u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_QWORD *)this + 12) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_115;
        case 0xDu:
          *((_DWORD *)this + 62) |= 0x1000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_QWORD *)this + 13) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_115;
        case 0xEu:
          *((_DWORD *)this + 62) |= 0x2000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_QWORD *)this + 14) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_115;
        case 0xFu:
          *((_DWORD *)this + 62) |= 0x4000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_QWORD *)this + 15) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_115;
        case 0x10u:
          *((_DWORD *)this + 62) |= 0x8000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_QWORD *)this + 16) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_115;
        case 0x11u:
          *((_DWORD *)this + 62) |= 0x10000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_QWORD *)this + 17) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_115;
        case 0x12u:
          *((_DWORD *)this + 62) |= 0x20000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_QWORD *)this + 18) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_115;
        case 0x13u:
          *((_DWORD *)this + 62) |= 0x40000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_QWORD *)this + 19) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_115;
        case 0x14u:
          *((_DWORD *)this + 62) |= 0x80000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_QWORD *)this + 20) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_115;
        case 0x15u:
          *((_DWORD *)this + 62) |= 0x100000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_QWORD *)this + 21) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_115;
        case 0x16u:
          *((_DWORD *)this + 62) |= 0x200000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_QWORD *)this + 22) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_115;
        case 0x17u:
          *((_DWORD *)this + 62) |= 0x400000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_QWORD *)this + 23) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_115;
        case 0x18u:
          *((_DWORD *)this + 62) |= 0x800000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_QWORD *)this + 24) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_115;
        case 0x19u:
          *((_DWORD *)this + 62) |= 0x1000000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_QWORD *)this + 25) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_115;
        case 0x1Au:
          *((_DWORD *)this + 62) |= 0x4000000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_QWORD *)this + 27) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_115;
        case 0x1Bu:
          *((_DWORD *)this + 62) |= 0x8000000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_QWORD *)this + 28) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_115;
        case 0x1Cu:
          *((_DWORD *)this + 62) |= 0x10000000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_QWORD *)this + 29) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_115;
        case 0x1Du:
          *((_DWORD *)this + 62) |= 0x20000000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_113;
          *((_QWORD *)this + 30) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_115;
        case 0x1Eu:
          *((_DWORD *)this + 62) |= 0x2000000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          {
LABEL_113:
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            *((_QWORD *)this + 26) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_115:
            v2 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v2;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SteadinessModelHarmonicFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 248);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_DWORD *)(v3 + 248);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_34;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 3u);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 4u);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 5u);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 6u);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 7u);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 8u);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 9u);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(double *)(v3 + 80), 0xAu);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x400) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(double *)(v3 + 88), 0xBu);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(double *)(v3 + 96), 0xCu);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x1000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(double *)(v3 + 104), 0xDu);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x2000) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(double *)(v3 + 112), 0xEu);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x4000) == 0)
  {
LABEL_16:
    if ((v4 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(double *)(v3 + 120), 0xFu);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x8000) == 0)
  {
LABEL_17:
    if ((v4 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(double *)(v3 + 128), 0x10u);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x10000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(double *)(v3 + 136), 0x11u);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x20000) == 0)
  {
LABEL_19:
    if ((v4 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(double *)(v3 + 144), 0x12u);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x40000) == 0)
  {
LABEL_20:
    if ((v4 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(double *)(v3 + 152), 0x13u);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x80000) == 0)
  {
LABEL_21:
    if ((v4 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(double *)(v3 + 160), 0x14u);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x100000) == 0)
  {
LABEL_22:
    if ((v4 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(double *)(v3 + 168), 0x15u);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x200000) == 0)
  {
LABEL_23:
    if ((v4 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(double *)(v3 + 176), 0x16u);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x400000) == 0)
  {
LABEL_24:
    if ((v4 & 0x800000) == 0)
      goto LABEL_25;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(double *)(v3 + 184), 0x17u);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x800000) == 0)
  {
LABEL_25:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_26;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(double *)(v3 + 192), 0x18u);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_27;
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::write(a2, *(double *)(v3 + 200), 0x19u);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_27:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_28;
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(double *)(v3 + 216), 0x1Au);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_28:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_29;
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(double *)(v3 + 224), 0x1Bu);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_30;
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(double *)(v3 + 232), 0x1Cu);
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_30:
    if ((v4 & 0x2000000) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 208), 0x1Eu);
  }
LABEL_60:
  this = PB::Writer::write(a2, *(double *)(v3 + 240), 0x1Du);
  if ((*(_DWORD *)(v3 + 248) & 0x2000000) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 208), 0x1Eu);
  return this;
}

uint64_t CMMsl::SteadinessModelHarmonicFeatures::hash_value(CMMsl::SteadinessModelHarmonicFeatures *this)
{
  int v1;
  double v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v33;
  double v34;
  double v35;

  v1 = *((_DWORD *)this + 62);
  if ((v1 & 1) == 0)
  {
    v35 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_3;
LABEL_117:
    v34 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_6;
LABEL_118:
    v33 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_9;
LABEL_119:
    v4 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_13;
LABEL_120:
    v5 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_17;
LABEL_121:
    v6 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_21;
LABEL_122:
    v7 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_25;
LABEL_123:
    v8 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_29;
LABEL_124:
    v9 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_33;
LABEL_125:
    v10 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_37;
LABEL_126:
    v11 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_41;
LABEL_127:
    v12 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_45;
LABEL_128:
    v13 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_49;
LABEL_129:
    v14 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_53;
LABEL_130:
    v15 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_57;
LABEL_131:
    v16 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_61;
LABEL_132:
    v17 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_65;
LABEL_133:
    v18 = 0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_69;
LABEL_134:
    v19 = 0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_73;
LABEL_135:
    v20 = 0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_77;
LABEL_136:
    v21 = 0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_81;
LABEL_137:
    v22 = 0;
    if ((v1 & 0x400000) != 0)
      goto LABEL_85;
LABEL_138:
    v23 = 0;
    if ((v1 & 0x800000) != 0)
      goto LABEL_89;
LABEL_139:
    v24 = 0;
    if ((v1 & 0x1000000) != 0)
      goto LABEL_93;
LABEL_140:
    v25 = 0;
    if ((v1 & 0x4000000) != 0)
      goto LABEL_97;
LABEL_141:
    v26 = 0;
    if ((v1 & 0x8000000) != 0)
      goto LABEL_101;
LABEL_142:
    v27 = 0;
    if ((v1 & 0x10000000) != 0)
      goto LABEL_105;
LABEL_143:
    v28 = 0.0;
    if ((v1 & 0x20000000) != 0)
      goto LABEL_108;
    goto LABEL_144;
  }
  v31 = *((double *)this + 1);
  if (v31 == 0.0)
    v31 = 0.0;
  v35 = v31;
  if ((v1 & 2) == 0)
    goto LABEL_117;
LABEL_3:
  v2 = *((double *)this + 2);
  if (v2 == 0.0)
    v2 = 0.0;
  v34 = v2;
  if ((v1 & 4) == 0)
    goto LABEL_118;
LABEL_6:
  v3 = *((double *)this + 3);
  if (v3 == 0.0)
    v3 = 0.0;
  v33 = v3;
  if ((v1 & 8) == 0)
    goto LABEL_119;
LABEL_9:
  if (*((double *)this + 4) == 0.0)
    v4 = 0;
  else
    v4 = *((_QWORD *)this + 4);
  if ((v1 & 0x10) == 0)
    goto LABEL_120;
LABEL_13:
  if (*((double *)this + 5) == 0.0)
    v5 = 0;
  else
    v5 = *((_QWORD *)this + 5);
  if ((v1 & 0x20) == 0)
    goto LABEL_121;
LABEL_17:
  if (*((double *)this + 6) == 0.0)
    v6 = 0;
  else
    v6 = *((_QWORD *)this + 6);
  if ((v1 & 0x40) == 0)
    goto LABEL_122;
LABEL_21:
  if (*((double *)this + 7) == 0.0)
    v7 = 0;
  else
    v7 = *((_QWORD *)this + 7);
  if ((v1 & 0x80) == 0)
    goto LABEL_123;
LABEL_25:
  if (*((double *)this + 8) == 0.0)
    v8 = 0;
  else
    v8 = *((_QWORD *)this + 8);
  if ((v1 & 0x100) == 0)
    goto LABEL_124;
LABEL_29:
  if (*((double *)this + 9) == 0.0)
    v9 = 0;
  else
    v9 = *((_QWORD *)this + 9);
  if ((v1 & 0x200) == 0)
    goto LABEL_125;
LABEL_33:
  if (*((double *)this + 10) == 0.0)
    v10 = 0;
  else
    v10 = *((_QWORD *)this + 10);
  if ((v1 & 0x400) == 0)
    goto LABEL_126;
LABEL_37:
  if (*((double *)this + 11) == 0.0)
    v11 = 0;
  else
    v11 = *((_QWORD *)this + 11);
  if ((v1 & 0x800) == 0)
    goto LABEL_127;
LABEL_41:
  if (*((double *)this + 12) == 0.0)
    v12 = 0;
  else
    v12 = *((_QWORD *)this + 12);
  if ((v1 & 0x1000) == 0)
    goto LABEL_128;
LABEL_45:
  if (*((double *)this + 13) == 0.0)
    v13 = 0;
  else
    v13 = *((_QWORD *)this + 13);
  if ((v1 & 0x2000) == 0)
    goto LABEL_129;
LABEL_49:
  if (*((double *)this + 14) == 0.0)
    v14 = 0;
  else
    v14 = *((_QWORD *)this + 14);
  if ((v1 & 0x4000) == 0)
    goto LABEL_130;
LABEL_53:
  if (*((double *)this + 15) == 0.0)
    v15 = 0;
  else
    v15 = *((_QWORD *)this + 15);
  if ((v1 & 0x8000) == 0)
    goto LABEL_131;
LABEL_57:
  if (*((double *)this + 16) == 0.0)
    v16 = 0;
  else
    v16 = *((_QWORD *)this + 16);
  if ((v1 & 0x10000) == 0)
    goto LABEL_132;
LABEL_61:
  if (*((double *)this + 17) == 0.0)
    v17 = 0;
  else
    v17 = *((_QWORD *)this + 17);
  if ((v1 & 0x20000) == 0)
    goto LABEL_133;
LABEL_65:
  if (*((double *)this + 18) == 0.0)
    v18 = 0;
  else
    v18 = *((_QWORD *)this + 18);
  if ((v1 & 0x40000) == 0)
    goto LABEL_134;
LABEL_69:
  if (*((double *)this + 19) == 0.0)
    v19 = 0;
  else
    v19 = *((_QWORD *)this + 19);
  if ((v1 & 0x80000) == 0)
    goto LABEL_135;
LABEL_73:
  if (*((double *)this + 20) == 0.0)
    v20 = 0;
  else
    v20 = *((_QWORD *)this + 20);
  if ((v1 & 0x100000) == 0)
    goto LABEL_136;
LABEL_77:
  if (*((double *)this + 21) == 0.0)
    v21 = 0;
  else
    v21 = *((_QWORD *)this + 21);
  if ((v1 & 0x200000) == 0)
    goto LABEL_137;
LABEL_81:
  if (*((double *)this + 22) == 0.0)
    v22 = 0;
  else
    v22 = *((_QWORD *)this + 22);
  if ((v1 & 0x400000) == 0)
    goto LABEL_138;
LABEL_85:
  if (*((double *)this + 23) == 0.0)
    v23 = 0;
  else
    v23 = *((_QWORD *)this + 23);
  if ((v1 & 0x800000) == 0)
    goto LABEL_139;
LABEL_89:
  if (*((double *)this + 24) == 0.0)
    v24 = 0;
  else
    v24 = *((_QWORD *)this + 24);
  if ((v1 & 0x1000000) == 0)
    goto LABEL_140;
LABEL_93:
  if (*((double *)this + 25) == 0.0)
    v25 = 0;
  else
    v25 = *((_QWORD *)this + 25);
  if ((v1 & 0x4000000) == 0)
    goto LABEL_141;
LABEL_97:
  if (*((double *)this + 27) == 0.0)
    v26 = 0;
  else
    v26 = *((_QWORD *)this + 27);
  if ((v1 & 0x8000000) == 0)
    goto LABEL_142;
LABEL_101:
  if (*((double *)this + 28) == 0.0)
    v27 = 0;
  else
    v27 = *((_QWORD *)this + 28);
  if ((v1 & 0x10000000) == 0)
    goto LABEL_143;
LABEL_105:
  v28 = *((double *)this + 29);
  if (v28 == 0.0)
    v28 = 0.0;
  if ((v1 & 0x20000000) != 0)
  {
LABEL_108:
    v29 = *((double *)this + 30);
    if (v29 == 0.0)
      v29 = 0.0;
    if ((v1 & 0x2000000) != 0)
      goto LABEL_111;
LABEL_145:
    v30 = 0.0;
    return *(_QWORD *)&v34 ^ *(_QWORD *)&v35 ^ *(_QWORD *)&v33 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ *(_QWORD *)&v28 ^ *(_QWORD *)&v29 ^ *(_QWORD *)&v30;
  }
LABEL_144:
  v29 = 0.0;
  if ((v1 & 0x2000000) == 0)
    goto LABEL_145;
LABEL_111:
  v30 = *((double *)this + 26);
  if (v30 == 0.0)
    v30 = 0.0;
  return *(_QWORD *)&v34 ^ *(_QWORD *)&v35 ^ *(_QWORD *)&v33 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ *(_QWORD *)&v28 ^ *(_QWORD *)&v29 ^ *(_QWORD *)&v30;
}

void CMMsl::SteadinessModelResult::~SteadinessModelResult(CMMsl::SteadinessModelResult *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::SteadinessModelResult::SteadinessModelResult(uint64_t this, const CMMsl::SteadinessModelResult *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;

  *(_QWORD *)this = off_100354968;
  *(_DWORD *)(this + 52) = 0;
  v2 = *((_BYTE *)a2 + 52);
  if ((v2 & 4) != 0)
  {
    v4 = *((_QWORD *)a2 + 3);
    v3 = 4;
    *(_BYTE *)(this + 52) = 4;
    *(_QWORD *)(this + 24) = v4;
    v2 = *((_BYTE *)a2 + 52);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 52) & 2) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *(_BYTE *)(this + 52) = v3;
    *(_QWORD *)(this + 16) = v5;
    v2 = *((_BYTE *)a2 + 52);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    v6 = *((_QWORD *)a2 + 1);
    v3 |= 1u;
    *(_BYTE *)(this + 52) = v3;
    *(_QWORD *)(this + 8) = v6;
    v2 = *((_BYTE *)a2 + 52);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_15;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 12);
  v3 |= 0x80u;
  *(_BYTE *)(this + 52) = v3;
  *(_DWORD *)(this + 48) = v7;
  v2 = *((_BYTE *)a2 + 52);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0)
      goto LABEL_10;
    goto LABEL_16;
  }
LABEL_15:
  v8 = *((_DWORD *)a2 + 9);
  v3 |= 0x10u;
  *(_BYTE *)(this + 52) = v3;
  *(_DWORD *)(this + 36) = v8;
  v2 = *((_BYTE *)a2 + 52);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_17;
  }
LABEL_16:
  v9 = *((_DWORD *)a2 + 8);
  v3 |= 8u;
  *(_BYTE *)(this + 52) = v3;
  *(_DWORD *)(this + 32) = v9;
  v2 = *((_BYTE *)a2 + 52);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0)
      return this;
LABEL_18:
    v11 = *((_DWORD *)a2 + 10);
    *(_BYTE *)(this + 52) = v3 | 0x20;
    *(_DWORD *)(this + 40) = v11;
    return this;
  }
LABEL_17:
  v10 = *((_DWORD *)a2 + 11);
  v3 |= 0x40u;
  *(_BYTE *)(this + 52) = v3;
  *(_DWORD *)(this + 44) = v10;
  if ((*((_BYTE *)a2 + 52) & 0x20) != 0)
    goto LABEL_18;
  return this;
}

uint64_t CMMsl::SteadinessModelResult::operator=(uint64_t a1, const CMMsl::SteadinessModelResult *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  if ((const CMMsl::SteadinessModelResult *)a1 != a2)
  {
    CMMsl::SteadinessModelResult::SteadinessModelResult((uint64_t)v7, a2);
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    v9 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v4;
    *(_QWORD *)&v4 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v11;
    v11 = v4;
    v5 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v10;
    v10 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SteadinessModelResult *a2, CMMsl::SteadinessModelResult *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  double result;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;

  v3 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v3;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v7 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v7;
  v8 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v8;
  v9 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v9;
  v10 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v10;
  v11 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v11;
  return result;
}

double CMMsl::SteadinessModelResult::SteadinessModelResult(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100354968;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100354968;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

uint64_t CMMsl::SteadinessModelResult::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  void (**v10)(CMMsl::SteadinessModelResult *__hidden);
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  if (a1 != a2)
  {
    v10 = off_100354968;
    v3 = *(_QWORD *)(a2 + 24);
    v4 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 52) = 0;
    v12 = *(_QWORD *)(a1 + 24);
    v5 = *(_OWORD *)(a1 + 8);
    v6 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    v11 = v5;
    v14 = *(_QWORD *)(a1 + 48);
    v7 = *(_OWORD *)(a1 + 32);
    v8 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = v4;
    *(_OWORD *)(a1 + 32) = v8;
    v13 = v7;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::SteadinessModelResult::formatText(CMMsl::SteadinessModelResult *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 52);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "likelihoodNotOK", *((double *)this + 1));
    v5 = *((_BYTE *)this + 52);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*((_BYTE *)this + 52) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "likelihoodOK", *((double *)this + 2));
  v5 = *((_BYTE *)this + 52);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "numDaysWithDataLast30Days", *((_DWORD *)this + 8));
  v5 = *((_BYTE *)this + 52);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "numDaysWithDataLast7Days", *((_DWORD *)this + 9));
  v5 = *((_BYTE *)this + 52);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "numValidBouts28Days", *((_DWORD *)this + 10));
  v5 = *((_BYTE *)this + 52);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 4) == 0)
      goto LABEL_8;
LABEL_16:
    PB::TextFormatter::format(a2, "rawSteadiness", *((double *)this + 3));
    if ((*((_BYTE *)this + 52) & 0x80) == 0)
      return PB::TextFormatter::endObject(a2);
LABEL_17:
    PB::TextFormatter::format(a2, "rejectionStatus", *((_DWORD *)this + 12));
    return PB::TextFormatter::endObject(a2);
  }
LABEL_15:
  PB::TextFormatter::format(a2, "numValidBouts7Days", *((_DWORD *)this + 11));
  v5 = *((_BYTE *)this + 52);
  if ((v5 & 4) != 0)
    goto LABEL_16;
LABEL_8:
  if (v5 < 0)
    goto LABEL_17;
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SteadinessModelResult::readFrom(CMMsl::SteadinessModelResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 52) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_32;
              *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_104;
            case 2u:
              *((_BYTE *)this + 52) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_32;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_104;
            case 3u:
              *((_BYTE *)this + 52) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_104:
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_32:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_130;
            case 4u:
              *((_BYTE *)this + 52) |= 0x80u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_109;
                  }
                  v53 = v21++;
                  v54 = *(_BYTE *)(v22 + v53);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_108:
                    v2 = v53 + 1;
                    goto LABEL_109;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_108;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_109;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_109:
              *((_DWORD *)this + 12) = v25;
              goto LABEL_130;
            case 5u:
              *((_BYTE *)this + 52) |= 0x10u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v55 = 0;
                v56 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_114;
                  }
                  v57 = v27++;
                  v58 = *(_BYTE *)(v28 + v57);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0)
                    break;
                  v55 += 7;
                  v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_113:
                    v2 = v57 + 1;
                    goto LABEL_114;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_113;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_114;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_114:
              *((_DWORD *)this + 9) = v31;
              goto LABEL_130;
            case 6u:
              *((_BYTE *)this + 52) |= 8u;
              v33 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_119;
                  }
                  v61 = v33++;
                  v62 = *(_BYTE *)(v34 + v61);
                  *((_QWORD *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_118:
                    v2 = v61 + 1;
                    goto LABEL_119;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v37) = 0;
                goto LABEL_118;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)a2 + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_119;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_119:
              *((_DWORD *)this + 8) = v37;
              goto LABEL_130;
            case 7u:
              *((_BYTE *)this + 52) |= 0x40u;
              v39 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v40 = *(_QWORD *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_124;
                  }
                  v65 = v39++;
                  v66 = *(_BYTE *)(v40 + v65);
                  *((_QWORD *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_123:
                    v2 = v65 + 1;
                    goto LABEL_124;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v43) = 0;
                goto LABEL_123;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)a2 + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_124;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_124:
              *((_DWORD *)this + 11) = v43;
              goto LABEL_130;
            case 8u:
              *((_BYTE *)this + 52) |= 0x20u;
              v45 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v46 = *(_QWORD *)a2;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v67 = 0;
                v68 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_129;
                  }
                  v69 = v45++;
                  v70 = *(_BYTE *)(v46 + v69);
                  *((_QWORD *)a2 + 1) = v45;
                  v49 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0)
                    break;
                  v67 += 7;
                  v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_128:
                    v2 = v69 + 1;
                    goto LABEL_129;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v49) = 0;
                goto LABEL_128;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)a2 + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_129;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_129:
              *((_DWORD *)this + 10) = v49;
LABEL_130:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_130;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::SteadinessModelResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 52);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24), 1u);
    v4 = *(_BYTE *)(v3 + 52);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(this + 52) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
  v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 3u);
  v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 4u);
  v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 36), 5u);
  v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 6u);
  v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 8u);
  }
LABEL_16:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 44), 7u);
  if ((*(_BYTE *)(v3 + 52) & 0x20) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 8u);
  return this;
}

uint64_t CMMsl::SteadinessModelResult::hash_value(CMMsl::SteadinessModelResult *this)
{
  double v1;
  double v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((*((_BYTE *)this + 52) & 4) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 52) & 2) != 0)
      goto LABEL_3;
LABEL_17:
    v2 = 0.0;
    if ((*((_BYTE *)this + 52) & 1) != 0)
      goto LABEL_6;
LABEL_18:
    v3 = 0.0;
    if ((*((_BYTE *)this + 52) & 0x80) != 0)
      goto LABEL_9;
    goto LABEL_19;
  }
  v1 = *((double *)this + 3);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 52) & 2) == 0)
    goto LABEL_17;
LABEL_3:
  v2 = *((double *)this + 2);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 52) & 1) == 0)
    goto LABEL_18;
LABEL_6:
  v3 = *((double *)this + 1);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((*((_BYTE *)this + 52) & 0x80) != 0)
  {
LABEL_9:
    v4 = *((unsigned int *)this + 12);
    if ((*((_BYTE *)this + 52) & 0x10) != 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  v4 = 0;
  if ((*((_BYTE *)this + 52) & 0x10) != 0)
  {
LABEL_10:
    v5 = *((int *)this + 9);
    if ((*((_BYTE *)this + 52) & 8) != 0)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  v5 = 0;
  if ((*((_BYTE *)this + 52) & 8) != 0)
  {
LABEL_11:
    v6 = *((int *)this + 8);
    if ((*((_BYTE *)this + 52) & 0x40) != 0)
      goto LABEL_12;
LABEL_22:
    v7 = 0;
    if ((*((_BYTE *)this + 52) & 0x20) != 0)
      goto LABEL_13;
LABEL_23:
    v8 = 0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8;
  }
LABEL_21:
  v6 = 0;
  if ((*((_BYTE *)this + 52) & 0x40) == 0)
    goto LABEL_22;
LABEL_12:
  v7 = *((int *)this + 11);
  if ((*((_BYTE *)this + 52) & 0x20) == 0)
    goto LABEL_23;
LABEL_13:
  v8 = *((int *)this + 10);
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8;
}

void CMMsl::SteadinessModelTemporalDispersionFeatures::~SteadinessModelTemporalDispersionFeatures(CMMsl::SteadinessModelTemporalDispersionFeatures *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::SteadinessModelTemporalDispersionFeatures::SteadinessModelTemporalDispersionFeatures(CMMsl::SteadinessModelTemporalDispersionFeatures *this, const CMMsl::SteadinessModelTemporalDispersionFeatures *a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)this = off_1003549A0;
  *((_DWORD *)this + 10) = 0;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 8) != 0)
  {
    result = *((double *)a2 + 4);
    v3 = 8;
    *((_BYTE *)this + 40) = 8;
    *((double *)this + 4) = result;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 40) & 4) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 3);
    v3 |= 4u;
    *((_BYTE *)this + 40) = v3;
    *((double *)this + 3) = result;
    v2 = *((_BYTE *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 2) == 0)
  {
    if ((v2 & 1) == 0)
      return result;
LABEL_10:
    result = *((double *)a2 + 1);
    *((_BYTE *)this + 40) = v3 | 1;
    *((double *)this + 1) = result;
    return result;
  }
  result = *((double *)a2 + 2);
  v3 |= 2u;
  *((_BYTE *)this + 40) = v3;
  *((double *)this + 2) = result;
  if ((*((_BYTE *)a2 + 40) & 1) != 0)
    goto LABEL_10;
  return result;
}

uint64_t CMMsl::SteadinessModelTemporalDispersionFeatures::operator=(uint64_t a1, const CMMsl::SteadinessModelTemporalDispersionFeatures *a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  int v10;

  if ((const CMMsl::SteadinessModelTemporalDispersionFeatures *)a1 != a2)
  {
    CMMsl::SteadinessModelTemporalDispersionFeatures::SteadinessModelTemporalDispersionFeatures((CMMsl::SteadinessModelTemporalDispersionFeatures *)&v7, a2);
    v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v10;
    v10 = v3;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SteadinessModelTemporalDispersionFeatures *a2, CMMsl::SteadinessModelTemporalDispersionFeatures *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::SteadinessModelTemporalDispersionFeatures::SteadinessModelTemporalDispersionFeatures(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_1003549A0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_1003549A0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::SteadinessModelTemporalDispersionFeatures::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  void (**v8)(CMMsl::SteadinessModelTemporalDispersionFeatures *__hidden);
  __int128 v9;
  __int128 v10;
  int v11;

  if (a1 != a2)
  {
    v8 = off_1003549A0;
    v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    v11 = *(_DWORD *)(a1 + 40);
    v10 = *(_OWORD *)(a1 + 24);
    v4 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a2 + 8);
    v6 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 40) = v3;
    *(_OWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 8) = v5;
    v9 = v4;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::SteadinessModelTemporalDispersionFeatures::formatText(CMMsl::SteadinessModelTemporalDispersionFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "centroidSlopeHeightNormDoubleSupportPercentageCadence", *((double *)this + 1));
    v5 = *((_BYTE *)this + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "l2DispersionHeightNormDoubleSupportPercentageCadence", *((double *)this + 3));
      if ((*((_BYTE *)this + 40) & 8) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "centroidSlopeHeightNormWalkingSpeedStepLength", *((double *)this + 2));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "l2DispersionHeightNormWalkingSpeedStepLength", *((double *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SteadinessModelTemporalDispersionFeatures::readFrom(CMMsl::SteadinessModelTemporalDispersionFeatures *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 40) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_35;
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_37;
        case 2u:
          *((_BYTE *)this + 40) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_35;
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_37;
        case 3u:
          *((_BYTE *)this + 40) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_35;
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_37;
        case 4u:
          *((_BYTE *)this + 40) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_37:
            v2 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v2;
          }
          else
          {
LABEL_35:
            *((_BYTE *)a2 + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SteadinessModelTemporalDispersionFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 40);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32), 1u);
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 8), 4u);
  }
LABEL_8:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
  if ((*(_BYTE *)(v3 + 40) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8), 4u);
  return this;
}

uint64_t CMMsl::SteadinessModelTemporalDispersionFeatures::hash_value(CMMsl::SteadinessModelTemporalDispersionFeatures *this)
{
  double v1;
  double v2;
  double v3;
  double v4;

  if ((*((_BYTE *)this + 40) & 8) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 40) & 4) != 0)
      goto LABEL_3;
LABEL_15:
    v2 = 0.0;
    if ((*((_BYTE *)this + 40) & 2) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v1 = *((double *)this + 4);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 40) & 4) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((double *)this + 3);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 40) & 2) != 0)
  {
LABEL_6:
    v3 = *((double *)this + 2);
    if (v3 == 0.0)
      v3 = 0.0;
    if ((*((_BYTE *)this + 40) & 1) != 0)
      goto LABEL_9;
LABEL_17:
    v4 = 0.0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4;
  }
LABEL_16:
  v3 = 0.0;
  if ((*((_BYTE *)this + 40) & 1) == 0)
    goto LABEL_17;
LABEL_9:
  v4 = *((double *)this + 1);
  if (v4 == 0.0)
    v4 = 0.0;
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4;
}

void CMMsl::SteadinessModelTemporalEntropyFeatures::~SteadinessModelTemporalEntropyFeatures(CMMsl::SteadinessModelTemporalEntropyFeatures *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::SteadinessModelTemporalEntropyFeatures::SteadinessModelTemporalEntropyFeatures(CMMsl::SteadinessModelTemporalEntropyFeatures *this, const CMMsl::SteadinessModelTemporalEntropyFeatures *a2)
{
  int v2;
  int v3;
  double result;

  *(_QWORD *)this = off_1003549D8;
  *((_DWORD *)this + 54) = 0;
  v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x80000) != 0)
  {
    result = *((double *)a2 + 20);
    v3 = 0x80000;
    *((_DWORD *)this + 54) = 0x80000;
    *((double *)this + 20) = result;
    v2 = *((_DWORD *)a2 + 54);
    if ((v2 & 0x40000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x40000) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 19);
    v3 |= 0x40000u;
    *((_DWORD *)this + 54) = v3;
    *((double *)this + 19) = result;
    v2 = *((_DWORD *)a2 + 54);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_DWORD *)this + 54) = v3;
    *((double *)this + 2) = result;
    v2 = *((_DWORD *)a2 + 54);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x100000) == 0)
        goto LABEL_9;
      goto LABEL_33;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 1) = result;
  v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x100000) == 0)
  {
LABEL_9:
    if ((v2 & 0x400000) == 0)
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_33:
  result = *((double *)a2 + 21);
  v3 |= 0x100000u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 21) = result;
  v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x400000) == 0)
  {
LABEL_10:
    if ((v2 & 0x200000) == 0)
      goto LABEL_11;
    goto LABEL_35;
  }
LABEL_34:
  result = *((double *)a2 + 23);
  v3 |= 0x400000u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 23) = result;
  v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x200000) == 0)
  {
LABEL_11:
    if ((v2 & 0x800000) == 0)
      goto LABEL_12;
    goto LABEL_36;
  }
LABEL_35:
  result = *((double *)a2 + 22);
  v3 |= 0x200000u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 22) = result;
  v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x800000) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_13;
    goto LABEL_37;
  }
LABEL_36:
  result = *((double *)a2 + 24);
  v3 |= 0x800000u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 24) = result;
  v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_13:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_14;
    goto LABEL_38;
  }
LABEL_37:
  result = *((double *)a2 + 26);
  v3 |= 0x2000000u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 26) = result;
  v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_14:
    if ((v2 & 4) == 0)
      goto LABEL_15;
    goto LABEL_39;
  }
LABEL_38:
  result = *((double *)a2 + 25);
  v3 |= 0x1000000u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 25) = result;
  v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 4) == 0)
  {
LABEL_15:
    if ((v2 & 0x10) == 0)
      goto LABEL_16;
    goto LABEL_40;
  }
LABEL_39:
  result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 3) = result;
  v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x10) == 0)
  {
LABEL_16:
    if ((v2 & 8) == 0)
      goto LABEL_17;
    goto LABEL_41;
  }
LABEL_40:
  result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 5) = result;
  v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 8) == 0)
  {
LABEL_17:
    if ((v2 & 0x20) == 0)
      goto LABEL_18;
    goto LABEL_42;
  }
LABEL_41:
  result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 4) = result;
  v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x20) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0)
      goto LABEL_19;
    goto LABEL_43;
  }
LABEL_42:
  result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 6) = result;
  v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x80) == 0)
  {
LABEL_19:
    if ((v2 & 0x40) == 0)
      goto LABEL_20;
    goto LABEL_44;
  }
LABEL_43:
  result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 8) = result;
  v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x40) == 0)
  {
LABEL_20:
    if ((v2 & 0x2000) == 0)
      goto LABEL_21;
    goto LABEL_45;
  }
LABEL_44:
  result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 7) = result;
  v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x2000) == 0)
  {
LABEL_21:
    if ((v2 & 0x200) == 0)
      goto LABEL_22;
    goto LABEL_46;
  }
LABEL_45:
  result = *((double *)a2 + 14);
  v3 |= 0x2000u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 14) = result;
  v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x200) == 0)
  {
LABEL_22:
    if ((v2 & 0x100) == 0)
      goto LABEL_23;
    goto LABEL_47;
  }
LABEL_46:
  result = *((double *)a2 + 10);
  v3 |= 0x200u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 10) = result;
  v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x100) == 0)
  {
LABEL_23:
    if ((v2 & 0x400) == 0)
      goto LABEL_24;
    goto LABEL_48;
  }
LABEL_47:
  result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 9) = result;
  v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x400) == 0)
  {
LABEL_24:
    if ((v2 & 0x4000) == 0)
      goto LABEL_25;
    goto LABEL_49;
  }
LABEL_48:
  result = *((double *)a2 + 11);
  v3 |= 0x400u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 11) = result;
  v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x4000) == 0)
  {
LABEL_25:
    if ((v2 & 0x8000) == 0)
      goto LABEL_26;
    goto LABEL_50;
  }
LABEL_49:
  result = *((double *)a2 + 15);
  v3 |= 0x4000u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 15) = result;
  v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x8000) == 0)
  {
LABEL_26:
    if ((v2 & 0x20000) == 0)
      goto LABEL_27;
    goto LABEL_51;
  }
LABEL_50:
  result = *((double *)a2 + 16);
  v3 |= 0x8000u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 16) = result;
  v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x20000) == 0)
  {
LABEL_27:
    if ((v2 & 0x10000) == 0)
      goto LABEL_28;
    goto LABEL_52;
  }
LABEL_51:
  result = *((double *)a2 + 18);
  v3 |= 0x20000u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 18) = result;
  v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x10000) == 0)
  {
LABEL_28:
    if ((v2 & 0x800) == 0)
      goto LABEL_29;
    goto LABEL_53;
  }
LABEL_52:
  result = *((double *)a2 + 17);
  v3 |= 0x10000u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 17) = result;
  v2 = *((_DWORD *)a2 + 54);
  if ((v2 & 0x800) == 0)
  {
LABEL_29:
    if ((v2 & 0x1000) == 0)
      return result;
LABEL_54:
    result = *((double *)a2 + 13);
    *((_DWORD *)this + 54) = v3 | 0x1000;
    *((double *)this + 13) = result;
    return result;
  }
LABEL_53:
  result = *((double *)a2 + 12);
  v3 |= 0x800u;
  *((_DWORD *)this + 54) = v3;
  *((double *)this + 12) = result;
  if ((*((_DWORD *)a2 + 54) & 0x1000) != 0)
    goto LABEL_54;
  return result;
}

CMMsl *CMMsl::SteadinessModelTemporalEntropyFeatures::operator=(CMMsl *a1, const CMMsl::SteadinessModelTemporalEntropyFeatures *a2)
{
  CMMsl::SteadinessModelTemporalEntropyFeatures *v3;
  _BYTE v5[224];

  if (a1 != a2)
  {
    CMMsl::SteadinessModelTemporalEntropyFeatures::SteadinessModelTemporalEntropyFeatures((CMMsl::SteadinessModelTemporalEntropyFeatures *)v5, a2);
    CMMsl::swap(a1, (CMMsl::SteadinessModelTemporalEntropyFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SteadinessModelTemporalEntropyFeatures *a2, CMMsl::SteadinessModelTemporalEntropyFeatures *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double result;

  v3 = *((_DWORD *)this + 54);
  *((_DWORD *)this + 54) = *((_DWORD *)a2 + 54);
  *((_DWORD *)a2 + 54) = v3;
  v4 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 20) = v4;
  v5 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v7;
  v8 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
  *((_QWORD *)a2 + 21) = v8;
  v9 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = *((_QWORD *)a2 + 23);
  *((_QWORD *)a2 + 23) = v9;
  v10 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = *((_QWORD *)a2 + 22);
  *((_QWORD *)a2 + 22) = v10;
  v11 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = *((_QWORD *)a2 + 24);
  *((_QWORD *)a2 + 24) = v11;
  v12 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = *((_QWORD *)a2 + 26);
  *((_QWORD *)a2 + 26) = v12;
  v13 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = *((_QWORD *)a2 + 25);
  *((_QWORD *)a2 + 25) = v13;
  v14 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v14;
  v15 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v15;
  v16 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v16;
  v17 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v17;
  v18 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v18;
  v19 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v19;
  v20 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v20;
  v21 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v21;
  v22 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v22;
  v23 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v23;
  v24 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v24;
  v25 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v25;
  v26 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v26;
  v27 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v27;
  v28 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v28;
  result = *((double *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((double *)a2 + 13) = result;
  return result;
}

double CMMsl::SteadinessModelTemporalEntropyFeatures::SteadinessModelTemporalEntropyFeatures(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_1003549D8;
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(_DWORD *)(a2 + 216) = 0;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  result = *(double *)(a2 + 104);
  *(double *)(a1 + 104) = result;
  return result;
}

CMMsl *CMMsl::SteadinessModelTemporalEntropyFeatures::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::SteadinessModelTemporalEntropyFeatures *v3;
  _BYTE v5[224];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::SteadinessModelTemporalEntropyFeatures::SteadinessModelTemporalEntropyFeatures((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::SteadinessModelTemporalEntropyFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::SteadinessModelTemporalEntropyFeatures::formatText(CMMsl::SteadinessModelTemporalEntropyFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "allBoutsCycleTimeEntropy5thTo95th", *((double *)this + 1));
    v5 = *((_DWORD *)this + 54);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_31;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "allBoutsCycleTimeEntropyMean", *((double *)this + 2));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "allBoutsCycleTimePoincareSd1Mean", *((double *)this + 3));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "allBoutsCycleTimePoincareSd1P5", *((double *)this + 4));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "allBoutsCycleTimePoincareSd1P95", *((double *)this + 5));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "allBoutsCycleTimePoincareSd2Mean", *((double *)this + 6));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "allBoutsCycleTimePoincareSd2P5", *((double *)this + 7));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "allBoutsCycleTimePoincareSd2P95", *((double *)this + 8));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "allBoutsMinGaitMetrics21CycleTimeEntropy5thTo95thLog", *((double *)this + 9));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "allBoutsMinGaitMetrics21CycleTimeEntropyMeanLog", *((double *)this + 10));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "allBoutsMinGaitMetrics21CycleTimeEntropyP5Log", *((double *)this + 11));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "allBoutsMinGaitMetrics21CycleTimePoincareSd1P5Log", *((double *)this + 12));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "allBoutsMinGaitMetrics21CycleTimePoincareSd2P5Log", *((double *)this + 13));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "allBoutsMinGaitMetrics21StepLengthEntropyMeanLog", *((double *)this + 14));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "allBoutsMinGaitMetrics21StepLengthPoincareSd1P5Log", *((double *)this + 15));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "allBoutsMinGaitMetrics21StepLengthPoincareSd1P95Log", *((double *)this + 16));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "allBoutsMinGaitMetrics21StepLengthPoincareSd2MeanLog", *((double *)this + 17));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "allBoutsMinGaitMetrics21StepLengthPoincareSd2P5Log", *((double *)this + 18));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "allBoutsStepLengthEntropy5thTo95th", *((double *)this + 19));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "allBoutsStepLengthEntropyMean", *((double *)this + 20));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "allBoutsStepLengthPoincareSd1Mean", *((double *)this + 21));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "allBoutsStepLengthPoincareSd1P5", *((double *)this + 22));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v5 & 0x800000) == 0)
      goto LABEL_25;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "allBoutsStepLengthPoincareSd1P95", *((double *)this + 23));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x800000) == 0)
  {
LABEL_25:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_26;
LABEL_53:
    PB::TextFormatter::format(a2, "allBoutsStepLengthPoincareSd2P5", *((double *)this + 25));
    if ((*((_DWORD *)this + 54) & 0x2000000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_27;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "allBoutsStepLengthPoincareSd2Mean", *((double *)this + 24));
  v5 = *((_DWORD *)this + 54);
  if ((v5 & 0x1000000) != 0)
    goto LABEL_53;
LABEL_26:
  if ((v5 & 0x2000000) != 0)
LABEL_27:
    PB::TextFormatter::format(a2, "allBoutsStepLengthPoincareSd2P95", *((double *)this + 26));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SteadinessModelTemporalEntropyFeatures::readFrom(CMMsl::SteadinessModelTemporalEntropyFeatures *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_DWORD *)this + 54) |= 0x80000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_101;
          *((_QWORD *)this + 20) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_103;
        case 2u:
          *((_DWORD *)this + 54) |= 0x40000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_101;
          *((_QWORD *)this + 19) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_103;
        case 3u:
          *((_DWORD *)this + 54) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_101;
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_103;
        case 4u:
          *((_DWORD *)this + 54) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_101;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_103;
        case 5u:
          *((_DWORD *)this + 54) |= 0x100000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_101;
          *((_QWORD *)this + 21) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_103;
        case 6u:
          *((_DWORD *)this + 54) |= 0x400000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_101;
          *((_QWORD *)this + 23) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_103;
        case 7u:
          *((_DWORD *)this + 54) |= 0x200000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_101;
          *((_QWORD *)this + 22) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_103;
        case 8u:
          *((_DWORD *)this + 54) |= 0x800000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_101;
          *((_QWORD *)this + 24) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_103;
        case 9u:
          *((_DWORD *)this + 54) |= 0x2000000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_101;
          *((_QWORD *)this + 26) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_103;
        case 0xAu:
          *((_DWORD *)this + 54) |= 0x1000000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_101;
          *((_QWORD *)this + 25) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_103;
        case 0xBu:
          *((_DWORD *)this + 54) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_101;
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_103;
        case 0xCu:
          *((_DWORD *)this + 54) |= 0x10u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_101;
          *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_103;
        case 0xDu:
          *((_DWORD *)this + 54) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_101;
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_103;
        case 0xEu:
          *((_DWORD *)this + 54) |= 0x20u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_101;
          *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_103;
        case 0xFu:
          *((_DWORD *)this + 54) |= 0x80u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_101;
          *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_103;
        case 0x10u:
          *((_DWORD *)this + 54) |= 0x40u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_101;
          *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_103;
        case 0x11u:
          *((_DWORD *)this + 54) |= 0x2000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_101;
          *((_QWORD *)this + 14) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_103;
        case 0x12u:
          *((_DWORD *)this + 54) |= 0x200u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_101;
          *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_103;
        case 0x13u:
          *((_DWORD *)this + 54) |= 0x100u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_101;
          *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_103;
        case 0x14u:
          *((_DWORD *)this + 54) |= 0x400u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_101;
          *((_QWORD *)this + 11) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_103;
        case 0x15u:
          *((_DWORD *)this + 54) |= 0x4000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_101;
          *((_QWORD *)this + 15) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_103;
        case 0x16u:
          *((_DWORD *)this + 54) |= 0x8000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_101;
          *((_QWORD *)this + 16) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_103;
        case 0x17u:
          *((_DWORD *)this + 54) |= 0x20000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_101;
          *((_QWORD *)this + 18) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_103;
        case 0x18u:
          *((_DWORD *)this + 54) |= 0x10000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_101;
          *((_QWORD *)this + 17) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_103;
        case 0x19u:
          *((_DWORD *)this + 54) |= 0x800u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_101;
          *((_QWORD *)this + 12) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_103;
        case 0x1Au:
          *((_DWORD *)this + 54) |= 0x1000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          {
LABEL_101:
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            *((_QWORD *)this + 13) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_103:
            v2 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v2;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SteadinessModelTemporalEntropyFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 216);
  if ((v4 & 0x80000) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 160), 1u);
    v4 = *(_DWORD *)(v3 + 216);
    if ((v4 & 0x40000) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_30;
    }
  }
  else if ((v4 & 0x40000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 152), 2u);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x100000) == 0)
      goto LABEL_6;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 4u);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x100000) == 0)
  {
LABEL_6:
    if ((v4 & 0x400000) == 0)
      goto LABEL_7;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(double *)(v3 + 168), 5u);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x400000) == 0)
  {
LABEL_7:
    if ((v4 & 0x200000) == 0)
      goto LABEL_8;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(double *)(v3 + 184), 6u);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x200000) == 0)
  {
LABEL_8:
    if ((v4 & 0x800000) == 0)
      goto LABEL_9;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(double *)(v3 + 176), 7u);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x800000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_10;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(double *)(v3 + 192), 8u);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_11;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(double *)(v3 + 208), 9u);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_11:
    if ((v4 & 4) == 0)
      goto LABEL_12;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(double *)(v3 + 200), 0xAu);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 4) == 0)
  {
LABEL_12:
    if ((v4 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 0xBu);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x10) == 0)
  {
LABEL_13:
    if ((v4 & 8) == 0)
      goto LABEL_14;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 0xCu);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 8) == 0)
  {
LABEL_14:
    if ((v4 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 0xDu);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x20) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0)
      goto LABEL_16;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 0xEu);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x80) == 0)
  {
LABEL_16:
    if ((v4 & 0x40) == 0)
      goto LABEL_17;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 0xFu);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x40) == 0)
  {
LABEL_17:
    if ((v4 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 0x10u);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x2000) == 0)
  {
LABEL_18:
    if ((v4 & 0x200) == 0)
      goto LABEL_19;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(double *)(v3 + 112), 0x11u);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x200) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(double *)(v3 + 80), 0x12u);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x400) == 0)
      goto LABEL_21;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 0x13u);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x400) == 0)
  {
LABEL_21:
    if ((v4 & 0x4000) == 0)
      goto LABEL_22;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(double *)(v3 + 88), 0x14u);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x4000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0)
      goto LABEL_23;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(double *)(v3 + 120), 0x15u);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x8000) == 0)
  {
LABEL_23:
    if ((v4 & 0x20000) == 0)
      goto LABEL_24;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(double *)(v3 + 128), 0x16u);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x20000) == 0)
  {
LABEL_24:
    if ((v4 & 0x10000) == 0)
      goto LABEL_25;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(double *)(v3 + 144), 0x17u);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x10000) == 0)
  {
LABEL_25:
    if ((v4 & 0x800) == 0)
      goto LABEL_26;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(double *)(v3 + 136), 0x18u);
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x800) == 0)
  {
LABEL_26:
    if ((v4 & 0x1000) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 104), 0x1Au);
  }
LABEL_52:
  this = PB::Writer::write(a2, *(double *)(v3 + 96), 0x19u);
  if ((*(_DWORD *)(v3 + 216) & 0x1000) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 104), 0x1Au);
  return this;
}

uint64_t CMMsl::SteadinessModelTemporalEntropyFeatures::hash_value(CMMsl::SteadinessModelTemporalEntropyFeatures *this)
{
  int v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;

  v1 = *((_DWORD *)this + 54);
  if ((v1 & 0x80000) == 0)
  {
    v2 = 0.0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_3;
LABEL_81:
    v3 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_6;
LABEL_82:
    v4 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_9;
LABEL_83:
    v5 = 0.0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_12;
LABEL_84:
    v6 = 0.0;
    if ((v1 & 0x400000) != 0)
      goto LABEL_15;
LABEL_85:
    v7 = 0.0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_18;
LABEL_86:
    v8 = 0.0;
    if ((v1 & 0x800000) != 0)
      goto LABEL_21;
LABEL_87:
    v9 = 0.0;
    if ((v1 & 0x2000000) != 0)
      goto LABEL_24;
LABEL_88:
    v10 = 0.0;
    if ((v1 & 0x1000000) != 0)
      goto LABEL_27;
LABEL_89:
    v11 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_30;
LABEL_90:
    v12 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_33;
LABEL_91:
    v13 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_36;
LABEL_92:
    v14 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_39;
LABEL_93:
    v15 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_42;
LABEL_94:
    v16 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_45;
LABEL_95:
    v17 = 0.0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_48;
LABEL_96:
    v18 = 0.0;
    if ((v1 & 0x200) != 0)
      goto LABEL_51;
LABEL_97:
    v19 = 0.0;
    if ((v1 & 0x100) != 0)
      goto LABEL_54;
LABEL_98:
    v20 = 0.0;
    if ((v1 & 0x400) != 0)
      goto LABEL_57;
LABEL_99:
    v21 = 0.0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_60;
LABEL_100:
    v22 = 0.0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_63;
LABEL_101:
    v23 = 0.0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_66;
LABEL_102:
    v24 = 0.0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_69;
LABEL_103:
    v25 = 0.0;
    if ((v1 & 0x800) != 0)
      goto LABEL_72;
    goto LABEL_104;
  }
  v2 = *((double *)this + 20);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 0x40000) == 0)
    goto LABEL_81;
LABEL_3:
  v3 = *((double *)this + 19);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_82;
LABEL_6:
  v4 = *((double *)this + 2);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_83;
LABEL_9:
  v5 = *((double *)this + 1);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 0x100000) == 0)
    goto LABEL_84;
LABEL_12:
  v6 = *((double *)this + 21);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 0x400000) == 0)
    goto LABEL_85;
LABEL_15:
  v7 = *((double *)this + 23);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v1 & 0x200000) == 0)
    goto LABEL_86;
LABEL_18:
  v8 = *((double *)this + 22);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((v1 & 0x800000) == 0)
    goto LABEL_87;
LABEL_21:
  v9 = *((double *)this + 24);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((v1 & 0x2000000) == 0)
    goto LABEL_88;
LABEL_24:
  v10 = *((double *)this + 26);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((v1 & 0x1000000) == 0)
    goto LABEL_89;
LABEL_27:
  v11 = *((double *)this + 25);
  if (v11 == 0.0)
    v11 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_90;
LABEL_30:
  v12 = *((double *)this + 3);
  if (v12 == 0.0)
    v12 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_91;
LABEL_33:
  v13 = *((double *)this + 5);
  if (v13 == 0.0)
    v13 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_92;
LABEL_36:
  v14 = *((double *)this + 4);
  if (v14 == 0.0)
    v14 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_93;
LABEL_39:
  v15 = *((double *)this + 6);
  if (v15 == 0.0)
    v15 = 0.0;
  if ((v1 & 0x80) == 0)
    goto LABEL_94;
LABEL_42:
  v16 = *((double *)this + 8);
  if (v16 == 0.0)
    v16 = 0.0;
  if ((v1 & 0x40) == 0)
    goto LABEL_95;
LABEL_45:
  v17 = *((double *)this + 7);
  if (v17 == 0.0)
    v17 = 0.0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_96;
LABEL_48:
  v18 = *((double *)this + 14);
  if (v18 == 0.0)
    v18 = 0.0;
  if ((v1 & 0x200) == 0)
    goto LABEL_97;
LABEL_51:
  v19 = *((double *)this + 10);
  if (v19 == 0.0)
    v19 = 0.0;
  if ((v1 & 0x100) == 0)
    goto LABEL_98;
LABEL_54:
  v20 = *((double *)this + 9);
  if (v20 == 0.0)
    v20 = 0.0;
  if ((v1 & 0x400) == 0)
    goto LABEL_99;
LABEL_57:
  v21 = *((double *)this + 11);
  if (v21 == 0.0)
    v21 = 0.0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_100;
LABEL_60:
  v22 = *((double *)this + 15);
  if (v22 == 0.0)
    v22 = 0.0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_101;
LABEL_63:
  v23 = *((double *)this + 16);
  if (v23 == 0.0)
    v23 = 0.0;
  if ((v1 & 0x20000) == 0)
    goto LABEL_102;
LABEL_66:
  v24 = *((double *)this + 18);
  if (v24 == 0.0)
    v24 = 0.0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_103;
LABEL_69:
  v25 = *((double *)this + 17);
  if (v25 == 0.0)
    v25 = 0.0;
  if ((v1 & 0x800) != 0)
  {
LABEL_72:
    v26 = *((double *)this + 12);
    if (v26 == 0.0)
      v26 = 0.0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_75;
LABEL_105:
    v27 = 0.0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ *(_QWORD *)&v15 ^ *(_QWORD *)&v16 ^ *(_QWORD *)&v17 ^ *(_QWORD *)&v18 ^ *(_QWORD *)&v19 ^ *(_QWORD *)&v20 ^ *(_QWORD *)&v21 ^ *(_QWORD *)&v22 ^ *(_QWORD *)&v23 ^ *(_QWORD *)&v24 ^ *(_QWORD *)&v25 ^ *(_QWORD *)&v26 ^ *(_QWORD *)&v27;
  }
LABEL_104:
  v26 = 0.0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_105;
LABEL_75:
  v27 = *((double *)this + 13);
  if (v27 == 0.0)
    v27 = 0.0;
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ *(_QWORD *)&v15 ^ *(_QWORD *)&v16 ^ *(_QWORD *)&v17 ^ *(_QWORD *)&v18 ^ *(_QWORD *)&v19 ^ *(_QWORD *)&v20 ^ *(_QWORD *)&v21 ^ *(_QWORD *)&v22 ^ *(_QWORD *)&v23 ^ *(_QWORD *)&v24 ^ *(_QWORD *)&v25 ^ *(_QWORD *)&v26 ^ *(_QWORD *)&v27;
}

void CMMsl::StepCadenceToStrideLengthBin::~StepCadenceToStrideLengthBin(CMMsl::StepCadenceToStrideLengthBin *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::StepCadenceToStrideLengthBin::StepCadenceToStrideLengthBin(CMMsl::StepCadenceToStrideLengthBin *this, const CMMsl::StepCadenceToStrideLengthBin *a2)
{
  char v2;
  char v3;
  int v4;
  double result;
  int v6;

  *(_QWORD *)this = off_100354A10;
  *((_DWORD *)this + 10) = 0;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 8) != 0)
  {
    v4 = *((_DWORD *)a2 + 8);
    v3 = 8;
    *((_BYTE *)this + 40) = 8;
    *((_DWORD *)this + 8) = v4;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 40) & 1) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 1);
    v3 |= 1u;
    *((_BYTE *)this + 40) = v3;
    *((double *)this + 1) = result;
    v2 = *((_BYTE *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_BYTE *)this + 40) = v3;
    *((double *)this + 2) = result;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        return result;
LABEL_12:
      result = *((double *)a2 + 3);
      *((_BYTE *)this + 40) = v3 | 4;
      *((double *)this + 3) = result;
      return result;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v6 = *((_DWORD *)a2 + 9);
  v3 |= 0x10u;
  *((_BYTE *)this + 40) = v3;
  *((_DWORD *)this + 9) = v6;
  if ((*((_BYTE *)a2 + 40) & 4) != 0)
    goto LABEL_12;
  return result;
}

uint64_t CMMsl::StepCadenceToStrideLengthBin::operator=(uint64_t a1, const CMMsl::StepCadenceToStrideLengthBin *a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  if ((const CMMsl::StepCadenceToStrideLengthBin *)a1 != a2)
  {
    CMMsl::StepCadenceToStrideLengthBin::StepCadenceToStrideLengthBin((CMMsl::StepCadenceToStrideLengthBin *)&v8, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v3;
    *(_QWORD *)&v3 = *(_QWORD *)(a1 + 24);
    v4 = *(_QWORD *)(a1 + 32);
    v5 = v11;
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v5;
    v6 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    v12 = v6;
    v10 = v3;
    v11 = v4;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::StepCadenceToStrideLengthBin *a2, CMMsl::StepCadenceToStrideLengthBin *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  double result;

  v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  v4 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v7;
  result = *((double *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((double *)a2 + 3) = result;
  return result;
}

double CMMsl::StepCadenceToStrideLengthBin::StepCadenceToStrideLengthBin(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100354A10;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100354A10;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::StepCadenceToStrideLengthBin::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  void (**v9)(CMMsl::StepCadenceToStrideLengthBin *__hidden);
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  if (a1 != a2)
  {
    v9 = off_100354A10;
    v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    v4 = *(_QWORD *)(a2 + 24);
    v13 = *(_DWORD *)(a1 + 40);
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    v10 = v5;
    *(_QWORD *)&v5 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 40) = v3;
    v7 = *(_QWORD *)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = v5;
    v11 = v7;
    v12 = v6;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::StepCadenceToStrideLengthBin::formatText(CMMsl::StepCadenceToStrideLengthBin *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "begin", *((double *)this + 1));
    v5 = *((_BYTE *)this + 40);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 40) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "bin", *((_DWORD *)this + 8));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 9));
    if ((*((_BYTE *)this + 40) & 4) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "end", *((double *)this + 2));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 4) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "strideLength", *((double *)this + 3));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::StepCadenceToStrideLengthBin::readFrom(CMMsl::StepCadenceToStrideLengthBin *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 40) |= 8u;
              v20 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v21 = *(_QWORD *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v33 = 0;
                v34 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_67;
                  }
                  v35 = v20++;
                  v36 = *(_BYTE *)(v21 + v35);
                  *((_QWORD *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0)
                    break;
                  v33 += 7;
                  v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_66;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v24) = 0;
LABEL_66:
                v2 = v35 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)a2 + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_67;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_67:
              *((_DWORD *)this + 8) = v24;
              goto LABEL_73;
            case 2u:
              *((_BYTE *)this + 40) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_46;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_62;
            case 3u:
              *((_BYTE *)this + 40) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_46;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_62;
            case 4u:
              *((_BYTE *)this + 40) |= 0x10u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_72;
                  }
                  v39 = v27++;
                  v40 = *(_BYTE *)(v28 + v39);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_71:
                    v2 = v39 + 1;
                    goto LABEL_72;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_71;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_72;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_72:
              *((_DWORD *)this + 9) = v31;
LABEL_73:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 5u:
              *((_BYTE *)this + 40) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_62:
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_46:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_73;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_73;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::StepCadenceToStrideLengthBin::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 40);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 32), 1u);
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 40) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 2u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 24), 5u);
  }
LABEL_10:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 36), 4u);
  if ((*(_BYTE *)(v3 + 40) & 4) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 24), 5u);
  return this;
}

uint64_t CMMsl::StepCadenceToStrideLengthBin::hash_value(CMMsl::StepCadenceToStrideLengthBin *this)
{
  uint64_t v1;
  double v2;
  double v3;
  uint64_t v4;
  double v5;

  if ((*((_BYTE *)this + 40) & 8) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 40) & 1) != 0)
      goto LABEL_3;
LABEL_14:
    v2 = 0.0;
    if ((*((_BYTE *)this + 40) & 2) != 0)
      goto LABEL_6;
LABEL_15:
    v3 = 0.0;
    if ((*((_BYTE *)this + 40) & 0x10) != 0)
      goto LABEL_9;
    goto LABEL_16;
  }
  v1 = *((unsigned int *)this + 8);
  if ((*((_BYTE *)this + 40) & 1) == 0)
    goto LABEL_14;
LABEL_3:
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 40) & 2) == 0)
    goto LABEL_15;
LABEL_6:
  v3 = *((double *)this + 2);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((*((_BYTE *)this + 40) & 0x10) != 0)
  {
LABEL_9:
    v4 = *((unsigned int *)this + 9);
    if ((*((_BYTE *)this + 40) & 4) != 0)
      goto LABEL_10;
LABEL_17:
    v5 = 0.0;
    return *(_QWORD *)&v2 ^ v1 ^ *(_QWORD *)&v3 ^ v4 ^ *(_QWORD *)&v5;
  }
LABEL_16:
  v4 = 0;
  if ((*((_BYTE *)this + 40) & 4) == 0)
    goto LABEL_17;
LABEL_10:
  v5 = *((double *)this + 3);
  if (v5 == 0.0)
    v5 = 0.0;
  return *(_QWORD *)&v2 ^ v1 ^ *(_QWORD *)&v3 ^ v4 ^ *(_QWORD *)&v5;
}

void CMMsl::StepCountEntry::~StepCountEntry(CMMsl::StepCountEntry *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = off_100354A48;
  v4 = *((_QWORD *)this + 9);
  v2 = (_QWORD *)((char *)this + 72);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_100011294((uint64_t)v2, v3);
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  PB::Base::~Base(this);
}

{
  CMMsl::StepCountEntry::~StepCountEntry(this);
  operator delete();
}

uint64_t CMMsl::StepCountEntry::StepCountEntry(uint64_t this, const CMMsl::StepCountEntry *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  char v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;

  *(_QWORD *)this = off_100354A48;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 72) = 0;
  *(_DWORD *)(this + 152) = 0;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x80) != 0)
  {
    v4 = *((_QWORD *)a2 + 11);
    v3 = 128;
    *(_DWORD *)(this + 152) = 128;
    *(_QWORD *)(this + 88) = v4;
    v2 = *((_DWORD *)a2 + 38);
    if ((v2 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x40) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 10);
    v3 |= 0x40u;
    *(_DWORD *)(this + 152) = v3;
    *(_QWORD *)(this + 80) = v5;
    v2 = *((_DWORD *)a2 + 38);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    v7 = *((_QWORD *)a2 + 6);
    v3 |= 0x10u;
    *(_DWORD *)(this + 152) = v3;
    *(_QWORD *)(this + 48) = v7;
    v2 = *((_DWORD *)a2 + 38);
    if ((v2 & 0x100) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_21;
    }
  }
  else if ((v2 & 0x100) == 0)
  {
    goto LABEL_8;
  }
  v8 = *((_DWORD *)a2 + 24);
  v3 |= 0x100u;
  *(_DWORD *)(this + 152) = v3;
  *(_DWORD *)(this + 96) = v8;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  v9 = *((_QWORD *)a2 + 5);
  v3 |= 8u;
  *(_DWORD *)(this + 152) = v3;
  *(_QWORD *)(this + 40) = v9;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x4000) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  v10 = *((_QWORD *)a2 + 8);
  v3 |= 0x20u;
  *(_DWORD *)(this + 152) = v3;
  *(_QWORD *)(this + 64) = v10;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x4000) == 0)
  {
LABEL_11:
    if ((v2 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  v11 = *((_DWORD *)a2 + 30);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 152) = v3;
  *(_DWORD *)(this + 120) = v11;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x8000) == 0)
  {
LABEL_12:
    if ((v2 & 4) == 0)
      goto LABEL_13;
    goto LABEL_25;
  }
LABEL_24:
  v12 = *((_DWORD *)a2 + 31);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 152) = v3;
  *(_DWORD *)(this + 124) = v12;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 4) == 0)
  {
LABEL_13:
    if ((v2 & 2) == 0)
      goto LABEL_14;
    goto LABEL_26;
  }
LABEL_25:
  v13 = *((_QWORD *)a2 + 4);
  v3 |= 4u;
  *(_DWORD *)(this + 152) = v3;
  *(_QWORD *)(this + 32) = v13;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 2) == 0)
  {
LABEL_14:
    if ((v2 & 1) == 0)
      goto LABEL_15;
    goto LABEL_27;
  }
LABEL_26:
  v14 = *((_QWORD *)a2 + 3);
  v3 |= 2u;
  *(_DWORD *)(this + 152) = v3;
  *(_QWORD *)(this + 24) = v14;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 1) == 0)
  {
LABEL_15:
    if ((v2 & 0x80000) == 0)
      goto LABEL_17;
    goto LABEL_16;
  }
LABEL_27:
  v15 = *((_QWORD *)a2 + 2);
  v3 |= 1u;
  *(_DWORD *)(this + 152) = v3;
  *(_QWORD *)(this + 16) = v15;
  if ((*((_DWORD *)a2 + 38) & 0x80000) != 0)
  {
LABEL_16:
    v6 = *((_DWORD *)a2 + 35);
    *(_DWORD *)(this + 152) = v3 | 0x80000;
    *(_DWORD *)(this + 140) = v6;
  }
LABEL_17:
  if (*((_QWORD *)a2 + 9))
    operator new();
  v16 = *((_DWORD *)a2 + 38);
  if ((v16 & 0x200000) != 0)
  {
    v17 = *((_BYTE *)a2 + 148);
    *(_DWORD *)(this + 152) |= 0x200000u;
    *(_BYTE *)(this + 148) = v17;
    v16 = *((_DWORD *)a2 + 38);
  }
  if ((v16 & 0x400000) != 0)
  {
    v18 = *((_BYTE *)a2 + 149);
    *(_DWORD *)(this + 152) |= 0x400000u;
    *(_BYTE *)(this + 149) = v18;
  }
  if (*((_QWORD *)a2 + 1))
    operator new();
  v19 = *((_DWORD *)a2 + 38);
  if ((v19 & 0x40000) != 0)
  {
    v22 = *((_DWORD *)a2 + 34);
    *(_DWORD *)(this + 152) |= 0x40000u;
    *(_DWORD *)(this + 136) = v22;
    v19 = *((_DWORD *)a2 + 38);
    if ((v19 & 0x100000) == 0)
    {
LABEL_37:
      if ((v19 & 0x20000) == 0)
        goto LABEL_38;
      goto LABEL_51;
    }
  }
  else if ((v19 & 0x100000) == 0)
  {
    goto LABEL_37;
  }
  v23 = *((_DWORD *)a2 + 36);
  *(_DWORD *)(this + 152) |= 0x100000u;
  *(_DWORD *)(this + 144) = v23;
  v19 = *((_DWORD *)a2 + 38);
  if ((v19 & 0x20000) == 0)
  {
LABEL_38:
    if ((v19 & 0x400) == 0)
      goto LABEL_39;
    goto LABEL_52;
  }
LABEL_51:
  v24 = *((_DWORD *)a2 + 33);
  *(_DWORD *)(this + 152) |= 0x20000u;
  *(_DWORD *)(this + 132) = v24;
  v19 = *((_DWORD *)a2 + 38);
  if ((v19 & 0x400) == 0)
  {
LABEL_39:
    if ((v19 & 0x800) == 0)
      goto LABEL_40;
    goto LABEL_53;
  }
LABEL_52:
  v25 = *((_DWORD *)a2 + 26);
  *(_DWORD *)(this + 152) |= 0x400u;
  *(_DWORD *)(this + 104) = v25;
  v19 = *((_DWORD *)a2 + 38);
  if ((v19 & 0x800) == 0)
  {
LABEL_40:
    if ((v19 & 0x2000) == 0)
      goto LABEL_41;
    goto LABEL_54;
  }
LABEL_53:
  v26 = *((_DWORD *)a2 + 27);
  *(_DWORD *)(this + 152) |= 0x800u;
  *(_DWORD *)(this + 108) = v26;
  v19 = *((_DWORD *)a2 + 38);
  if ((v19 & 0x2000) == 0)
  {
LABEL_41:
    if ((v19 & 0x200) == 0)
      goto LABEL_42;
    goto LABEL_55;
  }
LABEL_54:
  v27 = *((_DWORD *)a2 + 29);
  *(_DWORD *)(this + 152) |= 0x2000u;
  *(_DWORD *)(this + 116) = v27;
  v19 = *((_DWORD *)a2 + 38);
  if ((v19 & 0x200) == 0)
  {
LABEL_42:
    if ((v19 & 0x1000) == 0)
      goto LABEL_44;
    goto LABEL_43;
  }
LABEL_55:
  v28 = *((_DWORD *)a2 + 25);
  *(_DWORD *)(this + 152) |= 0x200u;
  *(_DWORD *)(this + 100) = v28;
  if ((*((_DWORD *)a2 + 38) & 0x1000) != 0)
  {
LABEL_43:
    v20 = *((_DWORD *)a2 + 28);
    *(_DWORD *)(this + 152) |= 0x1000u;
    *(_DWORD *)(this + 112) = v20;
  }
LABEL_44:
  if (*((_QWORD *)a2 + 7))
    operator new();
  if ((*((_BYTE *)a2 + 154) & 1) != 0)
  {
    v21 = *((_DWORD *)a2 + 32);
    *(_DWORD *)(this + 152) |= 0x10000u;
    *(_DWORD *)(this + 128) = v21;
  }
  return this;
}

CMMsl *CMMsl::StepCountEntry::operator=(CMMsl *a1, const CMMsl::StepCountEntry *a2)
{
  CMMsl::StepCountEntry *v3;
  _BYTE v5[160];

  if (a1 != a2)
  {
    CMMsl::StepCountEntry::StepCountEntry((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::StepCountEntry *)v5, v3);
    CMMsl::StepCountEntry::~StepCountEntry((CMMsl::StepCountEntry *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::StepCountEntry *a2, CMMsl::StepCountEntry *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v3;
  v4 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v4;
  v5 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v5;
  v6 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v6;
  v7 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v7;
  v8 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  v9 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v9;
  v10 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v10;
  v11 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v11;
  v12 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v12;
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v13;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  v15 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v15;
  v16 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v16;
  LOBYTE(v16) = *((_BYTE *)this + 148);
  *((_BYTE *)this + 148) = *((_BYTE *)a2 + 148);
  *((_BYTE *)a2 + 148) = v16;
  LOBYTE(v16) = *((_BYTE *)this + 149);
  *((_BYTE *)this + 149) = *((_BYTE *)a2 + 149);
  *((_BYTE *)a2 + 149) = v16;
  v17 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v17;
  LODWORD(v17) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v17;
  LODWORD(v17) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v17;
  LODWORD(v17) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v17;
  LODWORD(v17) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v17;
  LODWORD(v17) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v17;
  LODWORD(v17) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v17;
  LODWORD(v17) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v17;
  LODWORD(v17) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v17;
  v18 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v18;
  LODWORD(v18) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v18;
  return result;
}

uint64_t CMMsl::StepCountEntry::StepCountEntry(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = off_100354A48;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v4 = (uint64_t *)(a1 + 72);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  v5 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  v6 = *v4;
  *v4 = v5;
  if (v6)
    sub_100011294((uint64_t)v4, v6);
  *(_BYTE *)(a1 + 148) = *(_BYTE *)(a2 + 148);
  *(_BYTE *)(a1 + 149) = *(_BYTE *)(a2 + 149);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v10 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v9;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  return a1;
}

CMMsl *CMMsl::StepCountEntry::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::StepCountEntry *v3;
  _BYTE v5[160];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::StepCountEntry::StepCountEntry((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::StepCountEntry *)v5, v3);
    CMMsl::StepCountEntry::~StepCountEntry((CMMsl::StepCountEntry *)v5);
  }
  return a1;
}

uint64_t CMMsl::StepCountEntry::formatText(CMMsl::StepCountEntry *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "accelerometerPace");
  v6 = *((_DWORD *)this + 38);
  if ((v6 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "activeTime", *((double *)this + 2));
    v6 = *((_DWORD *)this + 38);
    if ((v6 & 0x100) == 0)
    {
LABEL_5:
      if ((v6 & 2) == 0)
        goto LABEL_6;
      goto LABEL_36;
    }
  }
  else if ((v6 & 0x100) == 0)
  {
    goto LABEL_5;
  }
  PB::TextFormatter::format(a2, "count", *((_DWORD *)this + 24));
  v6 = *((_DWORD *)this + 38);
  if ((v6 & 2) == 0)
  {
LABEL_6:
    if ((v6 & 4) == 0)
      goto LABEL_7;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "currentCadence", *((double *)this + 3));
  v6 = *((_DWORD *)this + 38);
  if ((v6 & 4) == 0)
  {
LABEL_7:
    if ((v6 & 8) == 0)
      goto LABEL_8;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "currentPace", *((double *)this + 4));
  v6 = *((_DWORD *)this + 38);
  if ((v6 & 8) == 0)
  {
LABEL_8:
    if ((v6 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "distance", *((double *)this + 5));
  v6 = *((_DWORD *)this + 38);
  if ((v6 & 0x200) == 0)
  {
LABEL_9:
    if ((v6 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "distanceSource", *((_DWORD *)this + 25));
  v6 = *((_DWORD *)this + 38);
  if ((v6 & 0x400) == 0)
  {
LABEL_10:
    if ((v6 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "elevationAscended", *((_DWORD *)this + 26));
  v6 = *((_DWORD *)this + 38);
  if ((v6 & 0x800) == 0)
  {
LABEL_11:
    if ((v6 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "elevationDescended", *((_DWORD *)this + 27));
  v6 = *((_DWORD *)this + 38);
  if ((v6 & 0x1000) == 0)
  {
LABEL_12:
    if ((v6 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "falseStepDetectorState", *((_DWORD *)this + 28));
  v6 = *((_DWORD *)this + 38);
  if ((v6 & 0x2000) == 0)
  {
LABEL_13:
    if ((v6 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "falseStepsSuppressed", *((_DWORD *)this + 29));
  v6 = *((_DWORD *)this + 38);
  if ((v6 & 0x10) == 0)
  {
LABEL_14:
    if ((v6 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "firstStepTime", *((double *)this + 6));
  v6 = *((_DWORD *)this + 38);
  if ((v6 & 0x4000) == 0)
  {
LABEL_15:
    if ((v6 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "floorsAscended", *((_DWORD *)this + 30));
  v6 = *((_DWORD *)this + 38);
  if ((v6 & 0x8000) == 0)
  {
LABEL_16:
    if ((v6 & 0x200000) == 0)
      goto LABEL_17;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "floorsDescended", *((_DWORD *)this + 31));
  v6 = *((_DWORD *)this + 38);
  if ((v6 & 0x200000) == 0)
  {
LABEL_17:
    if ((v6 & 0x400000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "isOdometerDistance", *((_BYTE *)this + 148));
  if ((*((_DWORD *)this + 38) & 0x400000) != 0)
LABEL_18:
    PB::TextFormatter::format(a2, "isOdometerPace", *((_BYTE *)this + 149));
LABEL_19:
  v7 = *((_QWORD *)this + 7);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "movementStats");
  v8 = *((_DWORD *)this + 38);
  if ((v8 & 0x10000) != 0)
  {
    PB::TextFormatter::format(a2, "paceSource", *((_DWORD *)this + 32));
    v8 = *((_DWORD *)this + 38);
    if ((v8 & 0x20000) == 0)
    {
LABEL_23:
      if ((v8 & 0x40000) == 0)
        goto LABEL_24;
      goto LABEL_51;
    }
  }
  else if ((v8 & 0x20000) == 0)
  {
    goto LABEL_23;
  }
  PB::TextFormatter::format(a2, "pedometerArmConstrainedState", *((_DWORD *)this + 33));
  v8 = *((_DWORD *)this + 38);
  if ((v8 & 0x40000) == 0)
  {
LABEL_24:
    if ((v8 & 0x20) == 0)
      goto LABEL_25;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "pushCount", *((_DWORD *)this + 34));
  v8 = *((_DWORD *)this + 38);
  if ((v8 & 0x20) == 0)
  {
LABEL_25:
    if ((v8 & 0x80000) == 0)
      goto LABEL_27;
    goto LABEL_26;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "rawDistance", *((double *)this + 8));
  if ((*((_DWORD *)this + 38) & 0x80000) != 0)
LABEL_26:
    PB::TextFormatter::format(a2, "recordId", *((_DWORD *)this + 35));
LABEL_27:
  if (*((_QWORD *)this + 9))
    PB::TextFormatter::format(a2, "sourceId");
  v9 = *((_DWORD *)this + 38);
  if ((v9 & 0x40) == 0)
  {
    if ((v9 & 0x80) == 0)
      goto LABEL_31;
LABEL_55:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 11));
    if ((*((_DWORD *)this + 38) & 0x100000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_32;
  }
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 10));
  v9 = *((_DWORD *)this + 38);
  if ((v9 & 0x80) != 0)
    goto LABEL_55;
LABEL_31:
  if ((v9 & 0x100000) != 0)
LABEL_32:
    PB::TextFormatter::format(a2, "workoutType", *((_DWORD *)this + 36));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::StepCountEntry::readFrom(CMMsl::StepCountEntry *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  BOOL v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  BOOL v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char v112;
  unsigned int v113;
  uint64_t v114;
  unint64_t v115;
  char v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  char v120;
  unsigned int v121;
  uint64_t v122;
  unint64_t v123;
  char v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  char v128;
  unsigned int v129;
  uint64_t v130;
  unint64_t v131;
  char v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char v136;
  unsigned int v137;
  uint64_t v138;
  unint64_t v139;
  char v140;
  char v141;
  unsigned int v142;
  unint64_t v143;
  char v144;
  char v145;
  unsigned int v146;
  unint64_t v147;
  char v148;
  char v149;
  unsigned int v150;
  unint64_t v151;
  char v152;
  char v153;
  unsigned int v154;
  unint64_t v155;
  char v156;
  char v157;
  unsigned int v158;
  unint64_t v159;
  char v160;
  char v161;
  unsigned int v162;
  unint64_t v163;
  char v164;
  char v165;
  unsigned int v166;
  unint64_t v167;
  char v168;
  char v169;
  unsigned int v170;
  unint64_t v171;
  char v172;
  char v173;
  unsigned int v174;
  unint64_t v175;
  char v176;
  char v177;
  unsigned int v178;
  unint64_t v179;
  char v180;
  char v181;
  unsigned int v182;
  unint64_t v183;
  char v184;
  char v185;
  unsigned int v186;
  unint64_t v187;
  char v188;
  char v189;
  unsigned int v190;
  unint64_t v191;
  char v192;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_DWORD *)this + 38) |= 0x80u;
          v20 = *((_QWORD *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_68;
          *((_QWORD *)this + 11) = *(_QWORD *)(*(_QWORD *)a2 + v20);
          goto LABEL_242;
        case 2u:
          *((_DWORD *)this + 38) |= 0x40u;
          v22 = *((_QWORD *)a2 + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_68;
          *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v22);
          goto LABEL_242;
        case 3u:
          *((_DWORD *)this + 38) |= 0x10u;
          v23 = *((_QWORD *)a2 + 1);
          if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_68;
          *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v23);
          goto LABEL_242;
        case 4u:
          *((_DWORD *)this + 38) |= 0x100u;
          v24 = *((_QWORD *)a2 + 1);
          v25 = *((_QWORD *)a2 + 2);
          v26 = *(_QWORD *)a2;
          if (v24 <= 0xFFFFFFFFFFFFFFF5 && v24 + 10 <= v25)
          {
            v27 = 0;
            v28 = 0;
            v29 = 0;
            do
            {
              v30 = v24 + 1;
              *((_QWORD *)a2 + 1) = v24 + 1;
              v31 = *(_BYTE *)(v26 + v24);
              v29 |= (unint64_t)(v31 & 0x7F) << v27;
              if ((v31 & 0x80) == 0)
                goto LABEL_246;
              v27 += 7;
              v24 = v30;
              v14 = v28++ > 8;
            }
            while (!v14);
LABEL_152:
            LODWORD(v29) = 0;
            goto LABEL_246;
          }
          v141 = 0;
          v142 = 0;
          v29 = 0;
          if (v25 <= v24)
            v25 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v25 == v24)
            {
              LODWORD(v29) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v143 = v24 + 1;
              v144 = *(_BYTE *)(v26 + v24);
              *((_QWORD *)a2 + 1) = v143;
              v29 |= (unint64_t)(v144 & 0x7F) << v141;
              if (v144 < 0)
              {
                v141 += 7;
                v24 = v143;
                v14 = v142++ > 8;
                if (v14)
                  goto LABEL_152;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v29) = 0;
            }
            break;
          }
LABEL_246:
          *((_DWORD *)this + 24) = v29;
          goto LABEL_295;
        case 5u:
          *((_DWORD *)this + 38) |= 8u;
          v32 = *((_QWORD *)a2 + 1);
          if (v32 > 0xFFFFFFFFFFFFFFF7 || v32 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_68;
          *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v32);
          goto LABEL_242;
        case 6u:
          *((_DWORD *)this + 38) |= 0x20u;
          v33 = *((_QWORD *)a2 + 1);
          if (v33 > 0xFFFFFFFFFFFFFFF7 || v33 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_68;
          *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v33);
          goto LABEL_242;
        case 7u:
          *((_DWORD *)this + 38) |= 0x4000u;
          v34 = *((_QWORD *)a2 + 1);
          v35 = *((_QWORD *)a2 + 2);
          v36 = *(_QWORD *)a2;
          if (v34 <= 0xFFFFFFFFFFFFFFF5 && v34 + 10 <= v35)
          {
            v37 = 0;
            v38 = 0;
            v39 = 0;
            do
            {
              v40 = v34 + 1;
              *((_QWORD *)a2 + 1) = v34 + 1;
              v41 = *(_BYTE *)(v36 + v34);
              v39 |= (unint64_t)(v41 & 0x7F) << v37;
              if ((v41 & 0x80) == 0)
                goto LABEL_250;
              v37 += 7;
              v34 = v40;
              v14 = v38++ > 8;
            }
            while (!v14);
LABEL_159:
            LODWORD(v39) = 0;
            goto LABEL_250;
          }
          v145 = 0;
          v146 = 0;
          v39 = 0;
          if (v35 <= v34)
            v35 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v35 == v34)
            {
              LODWORD(v39) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v147 = v34 + 1;
              v148 = *(_BYTE *)(v36 + v34);
              *((_QWORD *)a2 + 1) = v147;
              v39 |= (unint64_t)(v148 & 0x7F) << v145;
              if (v148 < 0)
              {
                v145 += 7;
                v34 = v147;
                v14 = v146++ > 8;
                if (v14)
                  goto LABEL_159;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v39) = 0;
            }
            break;
          }
LABEL_250:
          *((_DWORD *)this + 30) = v39;
          goto LABEL_295;
        case 8u:
          *((_DWORD *)this + 38) |= 0x8000u;
          v42 = *((_QWORD *)a2 + 1);
          v43 = *((_QWORD *)a2 + 2);
          v44 = *(_QWORD *)a2;
          if (v42 <= 0xFFFFFFFFFFFFFFF5 && v42 + 10 <= v43)
          {
            v45 = 0;
            v46 = 0;
            v47 = 0;
            do
            {
              v48 = v42 + 1;
              *((_QWORD *)a2 + 1) = v42 + 1;
              v49 = *(_BYTE *)(v44 + v42);
              v47 |= (unint64_t)(v49 & 0x7F) << v45;
              if ((v49 & 0x80) == 0)
                goto LABEL_254;
              v45 += 7;
              v42 = v48;
              v14 = v46++ > 8;
            }
            while (!v14);
LABEL_166:
            LODWORD(v47) = 0;
            goto LABEL_254;
          }
          v149 = 0;
          v150 = 0;
          v47 = 0;
          if (v43 <= v42)
            v43 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v43 == v42)
            {
              LODWORD(v47) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v151 = v42 + 1;
              v152 = *(_BYTE *)(v44 + v42);
              *((_QWORD *)a2 + 1) = v151;
              v47 |= (unint64_t)(v152 & 0x7F) << v149;
              if (v152 < 0)
              {
                v149 += 7;
                v42 = v151;
                v14 = v150++ > 8;
                if (v14)
                  goto LABEL_166;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v47) = 0;
            }
            break;
          }
LABEL_254:
          *((_DWORD *)this + 31) = v47;
          goto LABEL_295;
        case 9u:
          *((_DWORD *)this + 38) |= 4u;
          v50 = *((_QWORD *)a2 + 1);
          if (v50 > 0xFFFFFFFFFFFFFFF7 || v50 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_68;
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v50);
          goto LABEL_242;
        case 0xAu:
          *((_DWORD *)this + 38) |= 2u;
          v51 = *((_QWORD *)a2 + 1);
          if (v51 > 0xFFFFFFFFFFFFFFF7 || v51 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_68;
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v51);
          goto LABEL_242;
        case 0xBu:
          *((_DWORD *)this + 38) |= 1u;
          v52 = *((_QWORD *)a2 + 1);
          if (v52 <= 0xFFFFFFFFFFFFFFF7 && v52 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v52);
LABEL_242:
            *((_QWORD *)a2 + 1) += 8;
          }
          else
          {
LABEL_68:
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_295;
        case 0xCu:
          *((_DWORD *)this + 38) |= 0x80000u;
          v53 = *((_QWORD *)a2 + 1);
          v54 = *((_QWORD *)a2 + 2);
          v55 = *(_QWORD *)a2;
          if (v53 <= 0xFFFFFFFFFFFFFFF5 && v53 + 10 <= v54)
          {
            v56 = 0;
            v57 = 0;
            v58 = 0;
            do
            {
              v59 = v53 + 1;
              *((_QWORD *)a2 + 1) = v53 + 1;
              v60 = *(_BYTE *)(v55 + v53);
              v58 |= (unint64_t)(v60 & 0x7F) << v56;
              if ((v60 & 0x80) == 0)
                goto LABEL_258;
              v56 += 7;
              v53 = v59;
              v14 = v57++ > 8;
            }
            while (!v14);
LABEL_173:
            LODWORD(v58) = 0;
            goto LABEL_258;
          }
          v153 = 0;
          v154 = 0;
          v58 = 0;
          if (v54 <= v53)
            v54 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v54 == v53)
            {
              LODWORD(v58) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v155 = v53 + 1;
              v156 = *(_BYTE *)(v55 + v53);
              *((_QWORD *)a2 + 1) = v155;
              v58 |= (unint64_t)(v156 & 0x7F) << v153;
              if (v156 < 0)
              {
                v153 += 7;
                v53 = v155;
                v14 = v154++ > 8;
                if (v14)
                  goto LABEL_173;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v58) = 0;
            }
            break;
          }
LABEL_258:
          *((_DWORD *)this + 35) = v58;
          goto LABEL_295;
        case 0xDu:
          operator new();
        case 0xEu:
          *((_DWORD *)this + 38) |= 0x200000u;
          v61 = *((_QWORD *)a2 + 1);
          if (v61 >= *((_QWORD *)a2 + 2))
          {
            v64 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v62 = v61 + 1;
            v63 = *(unsigned __int8 *)(*(_QWORD *)a2 + v61);
            *((_QWORD *)a2 + 1) = v62;
            v64 = v63 != 0;
          }
          *((_BYTE *)this + 148) = v64;
          goto LABEL_295;
        case 0xFu:
          *((_DWORD *)this + 38) |= 0x400000u;
          v65 = *((_QWORD *)a2 + 1);
          if (v65 >= *((_QWORD *)a2 + 2))
          {
            v68 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v66 = v65 + 1;
            v67 = *(unsigned __int8 *)(*(_QWORD *)a2 + v65);
            *((_QWORD *)a2 + 1) = v66;
            v68 = v67 != 0;
          }
          *((_BYTE *)this + 149) = v68;
          goto LABEL_295;
        case 0x10u:
          operator new();
        case 0x11u:
          *((_DWORD *)this + 38) |= 0x40000u;
          v69 = *((_QWORD *)a2 + 1);
          v70 = *((_QWORD *)a2 + 2);
          v71 = *(_QWORD *)a2;
          if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
          {
            v72 = 0;
            v73 = 0;
            v74 = 0;
            do
            {
              v75 = v69 + 1;
              *((_QWORD *)a2 + 1) = v69 + 1;
              v76 = *(_BYTE *)(v71 + v69);
              v74 |= (unint64_t)(v76 & 0x7F) << v72;
              if ((v76 & 0x80) == 0)
                goto LABEL_262;
              v72 += 7;
              v69 = v75;
              v14 = v73++ > 8;
            }
            while (!v14);
LABEL_184:
            LODWORD(v74) = 0;
            goto LABEL_262;
          }
          v157 = 0;
          v158 = 0;
          v74 = 0;
          if (v70 <= v69)
            v70 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v70 == v69)
            {
              LODWORD(v74) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v159 = v69 + 1;
              v160 = *(_BYTE *)(v71 + v69);
              *((_QWORD *)a2 + 1) = v159;
              v74 |= (unint64_t)(v160 & 0x7F) << v157;
              if (v160 < 0)
              {
                v157 += 7;
                v69 = v159;
                v14 = v158++ > 8;
                if (v14)
                  goto LABEL_184;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v74) = 0;
            }
            break;
          }
LABEL_262:
          *((_DWORD *)this + 34) = v74;
          goto LABEL_295;
        case 0x12u:
          *((_DWORD *)this + 38) |= 0x100000u;
          v77 = *((_QWORD *)a2 + 1);
          v78 = *((_QWORD *)a2 + 2);
          v79 = *(_QWORD *)a2;
          if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
          {
            v80 = 0;
            v81 = 0;
            v82 = 0;
            do
            {
              v83 = v77 + 1;
              *((_QWORD *)a2 + 1) = v77 + 1;
              v84 = *(_BYTE *)(v79 + v77);
              v82 |= (unint64_t)(v84 & 0x7F) << v80;
              if ((v84 & 0x80) == 0)
                goto LABEL_266;
              v80 += 7;
              v77 = v83;
              v14 = v81++ > 8;
            }
            while (!v14);
LABEL_191:
            LODWORD(v82) = 0;
            goto LABEL_266;
          }
          v161 = 0;
          v162 = 0;
          v82 = 0;
          if (v78 <= v77)
            v78 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v78 == v77)
            {
              LODWORD(v82) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v163 = v77 + 1;
              v164 = *(_BYTE *)(v79 + v77);
              *((_QWORD *)a2 + 1) = v163;
              v82 |= (unint64_t)(v164 & 0x7F) << v161;
              if (v164 < 0)
              {
                v161 += 7;
                v77 = v163;
                v14 = v162++ > 8;
                if (v14)
                  goto LABEL_191;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v82) = 0;
            }
            break;
          }
LABEL_266:
          *((_DWORD *)this + 36) = v82;
          goto LABEL_295;
        case 0x13u:
          *((_DWORD *)this + 38) |= 0x20000u;
          v85 = *((_QWORD *)a2 + 1);
          v86 = *((_QWORD *)a2 + 2);
          v87 = *(_QWORD *)a2;
          if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
          {
            v88 = 0;
            v89 = 0;
            v90 = 0;
            do
            {
              v91 = v85 + 1;
              *((_QWORD *)a2 + 1) = v85 + 1;
              v92 = *(_BYTE *)(v87 + v85);
              v90 |= (unint64_t)(v92 & 0x7F) << v88;
              if ((v92 & 0x80) == 0)
                goto LABEL_270;
              v88 += 7;
              v85 = v91;
              v14 = v89++ > 8;
            }
            while (!v14);
LABEL_198:
            LODWORD(v90) = 0;
            goto LABEL_270;
          }
          v165 = 0;
          v166 = 0;
          v90 = 0;
          if (v86 <= v85)
            v86 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v86 == v85)
            {
              LODWORD(v90) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v167 = v85 + 1;
              v168 = *(_BYTE *)(v87 + v85);
              *((_QWORD *)a2 + 1) = v167;
              v90 |= (unint64_t)(v168 & 0x7F) << v165;
              if (v168 < 0)
              {
                v165 += 7;
                v85 = v167;
                v14 = v166++ > 8;
                if (v14)
                  goto LABEL_198;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v90) = 0;
            }
            break;
          }
LABEL_270:
          *((_DWORD *)this + 33) = v90;
          goto LABEL_295;
        case 0x14u:
          *((_DWORD *)this + 38) |= 0x400u;
          v93 = *((_QWORD *)a2 + 1);
          v94 = *((_QWORD *)a2 + 2);
          v95 = *(_QWORD *)a2;
          if (v93 <= 0xFFFFFFFFFFFFFFF5 && v93 + 10 <= v94)
          {
            v96 = 0;
            v97 = 0;
            v98 = 0;
            do
            {
              v99 = v93 + 1;
              *((_QWORD *)a2 + 1) = v93 + 1;
              v100 = *(_BYTE *)(v95 + v93);
              v98 |= (unint64_t)(v100 & 0x7F) << v96;
              if ((v100 & 0x80) == 0)
                goto LABEL_274;
              v96 += 7;
              v93 = v99;
              v14 = v97++ > 8;
            }
            while (!v14);
LABEL_205:
            LODWORD(v98) = 0;
            goto LABEL_274;
          }
          v169 = 0;
          v170 = 0;
          v98 = 0;
          if (v94 <= v93)
            v94 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v94 == v93)
            {
              LODWORD(v98) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v171 = v93 + 1;
              v172 = *(_BYTE *)(v95 + v93);
              *((_QWORD *)a2 + 1) = v171;
              v98 |= (unint64_t)(v172 & 0x7F) << v169;
              if (v172 < 0)
              {
                v169 += 7;
                v93 = v171;
                v14 = v170++ > 8;
                if (v14)
                  goto LABEL_205;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v98) = 0;
            }
            break;
          }
LABEL_274:
          *((_DWORD *)this + 26) = v98;
          goto LABEL_295;
        case 0x15u:
          *((_DWORD *)this + 38) |= 0x800u;
          v101 = *((_QWORD *)a2 + 1);
          v102 = *((_QWORD *)a2 + 2);
          v103 = *(_QWORD *)a2;
          if (v101 <= 0xFFFFFFFFFFFFFFF5 && v101 + 10 <= v102)
          {
            v104 = 0;
            v105 = 0;
            v106 = 0;
            do
            {
              v107 = v101 + 1;
              *((_QWORD *)a2 + 1) = v101 + 1;
              v108 = *(_BYTE *)(v103 + v101);
              v106 |= (unint64_t)(v108 & 0x7F) << v104;
              if ((v108 & 0x80) == 0)
                goto LABEL_278;
              v104 += 7;
              v101 = v107;
              v14 = v105++ > 8;
            }
            while (!v14);
LABEL_212:
            LODWORD(v106) = 0;
            goto LABEL_278;
          }
          v173 = 0;
          v174 = 0;
          v106 = 0;
          if (v102 <= v101)
            v102 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v102 == v101)
            {
              LODWORD(v106) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v175 = v101 + 1;
              v176 = *(_BYTE *)(v103 + v101);
              *((_QWORD *)a2 + 1) = v175;
              v106 |= (unint64_t)(v176 & 0x7F) << v173;
              if (v176 < 0)
              {
                v173 += 7;
                v101 = v175;
                v14 = v174++ > 8;
                if (v14)
                  goto LABEL_212;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v106) = 0;
            }
            break;
          }
LABEL_278:
          *((_DWORD *)this + 27) = v106;
          goto LABEL_295;
        case 0x16u:
          *((_DWORD *)this + 38) |= 0x2000u;
          v109 = *((_QWORD *)a2 + 1);
          v110 = *((_QWORD *)a2 + 2);
          v111 = *(_QWORD *)a2;
          if (v109 <= 0xFFFFFFFFFFFFFFF5 && v109 + 10 <= v110)
          {
            v112 = 0;
            v113 = 0;
            v114 = 0;
            do
            {
              v115 = v109 + 1;
              *((_QWORD *)a2 + 1) = v109 + 1;
              v116 = *(_BYTE *)(v111 + v109);
              v114 |= (unint64_t)(v116 & 0x7F) << v112;
              if ((v116 & 0x80) == 0)
                goto LABEL_282;
              v112 += 7;
              v109 = v115;
              v14 = v113++ > 8;
            }
            while (!v14);
LABEL_219:
            LODWORD(v114) = 0;
            goto LABEL_282;
          }
          v177 = 0;
          v178 = 0;
          v114 = 0;
          if (v110 <= v109)
            v110 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v110 == v109)
            {
              LODWORD(v114) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v179 = v109 + 1;
              v180 = *(_BYTE *)(v111 + v109);
              *((_QWORD *)a2 + 1) = v179;
              v114 |= (unint64_t)(v180 & 0x7F) << v177;
              if (v180 < 0)
              {
                v177 += 7;
                v109 = v179;
                v14 = v178++ > 8;
                if (v14)
                  goto LABEL_219;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v114) = 0;
            }
            break;
          }
LABEL_282:
          *((_DWORD *)this + 29) = v114;
          goto LABEL_295;
        case 0x17u:
          *((_DWORD *)this + 38) |= 0x200u;
          v117 = *((_QWORD *)a2 + 1);
          v118 = *((_QWORD *)a2 + 2);
          v119 = *(_QWORD *)a2;
          if (v117 <= 0xFFFFFFFFFFFFFFF5 && v117 + 10 <= v118)
          {
            v120 = 0;
            v121 = 0;
            v122 = 0;
            do
            {
              v123 = v117 + 1;
              *((_QWORD *)a2 + 1) = v117 + 1;
              v124 = *(_BYTE *)(v119 + v117);
              v122 |= (unint64_t)(v124 & 0x7F) << v120;
              if ((v124 & 0x80) == 0)
                goto LABEL_286;
              v120 += 7;
              v117 = v123;
              v14 = v121++ > 8;
            }
            while (!v14);
LABEL_226:
            LODWORD(v122) = 0;
            goto LABEL_286;
          }
          v181 = 0;
          v182 = 0;
          v122 = 0;
          if (v118 <= v117)
            v118 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v118 == v117)
            {
              LODWORD(v122) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v183 = v117 + 1;
              v184 = *(_BYTE *)(v119 + v117);
              *((_QWORD *)a2 + 1) = v183;
              v122 |= (unint64_t)(v184 & 0x7F) << v181;
              if (v184 < 0)
              {
                v181 += 7;
                v117 = v183;
                v14 = v182++ > 8;
                if (v14)
                  goto LABEL_226;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v122) = 0;
            }
            break;
          }
LABEL_286:
          *((_DWORD *)this + 25) = v122;
          goto LABEL_295;
        case 0x18u:
          *((_DWORD *)this + 38) |= 0x1000u;
          v125 = *((_QWORD *)a2 + 1);
          v126 = *((_QWORD *)a2 + 2);
          v127 = *(_QWORD *)a2;
          if (v125 <= 0xFFFFFFFFFFFFFFF5 && v125 + 10 <= v126)
          {
            v128 = 0;
            v129 = 0;
            v130 = 0;
            do
            {
              v131 = v125 + 1;
              *((_QWORD *)a2 + 1) = v125 + 1;
              v132 = *(_BYTE *)(v127 + v125);
              v130 |= (unint64_t)(v132 & 0x7F) << v128;
              if ((v132 & 0x80) == 0)
                goto LABEL_290;
              v128 += 7;
              v125 = v131;
              v14 = v129++ > 8;
            }
            while (!v14);
LABEL_233:
            LODWORD(v130) = 0;
            goto LABEL_290;
          }
          v185 = 0;
          v186 = 0;
          v130 = 0;
          if (v126 <= v125)
            v126 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v126 == v125)
            {
              LODWORD(v130) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v187 = v125 + 1;
              v188 = *(_BYTE *)(v127 + v125);
              *((_QWORD *)a2 + 1) = v187;
              v130 |= (unint64_t)(v188 & 0x7F) << v185;
              if (v188 < 0)
              {
                v185 += 7;
                v125 = v187;
                v14 = v186++ > 8;
                if (v14)
                  goto LABEL_233;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v130) = 0;
            }
            break;
          }
LABEL_290:
          *((_DWORD *)this + 28) = v130;
          goto LABEL_295;
        case 0x19u:
          operator new();
        case 0x1Au:
          *((_DWORD *)this + 38) |= 0x10000u;
          v133 = *((_QWORD *)a2 + 1);
          v134 = *((_QWORD *)a2 + 2);
          v135 = *(_QWORD *)a2;
          if (v133 <= 0xFFFFFFFFFFFFFFF5 && v133 + 10 <= v134)
          {
            v136 = 0;
            v137 = 0;
            v138 = 0;
            do
            {
              v139 = v133 + 1;
              *((_QWORD *)a2 + 1) = v133 + 1;
              v140 = *(_BYTE *)(v135 + v133);
              v138 |= (unint64_t)(v140 & 0x7F) << v136;
              if ((v140 & 0x80) == 0)
                goto LABEL_294;
              v136 += 7;
              v133 = v139;
              v14 = v137++ > 8;
            }
            while (!v14);
LABEL_240:
            LODWORD(v138) = 0;
            goto LABEL_294;
          }
          v189 = 0;
          v190 = 0;
          v138 = 0;
          if (v134 <= v133)
            v134 = *((_QWORD *)a2 + 1);
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_295;
      }
      while (1)
      {
        if (v134 == v133)
        {
          LODWORD(v138) = 0;
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_294;
        }
        v191 = v133 + 1;
        v192 = *(_BYTE *)(v135 + v133);
        *((_QWORD *)a2 + 1) = v191;
        v138 |= (unint64_t)(v192 & 0x7F) << v189;
        if ((v192 & 0x80) == 0)
          break;
        v189 += 7;
        v133 = v191;
        v14 = v190++ > 8;
        if (v14)
          goto LABEL_240;
      }
      if (*((_BYTE *)a2 + 24))
        LODWORD(v138) = 0;
LABEL_294:
      *((_DWORD *)this + 32) = v138;
LABEL_295:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::StepCountEntry::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  const PB::Base *v7;
  int v8;
  const PB::Base *v9;

  v3 = this;
  v4 = *(_DWORD *)(this + 152);
  if ((v4 & 0x80) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 88), 1u);
    v4 = *(_DWORD *)(v3 + 152);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_37;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 80), 2u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x100) == 0)
      goto LABEL_5;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 3u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x100) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 96), 4u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 5u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x4000) == 0)
      goto LABEL_8;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 6u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x4000) == 0)
  {
LABEL_8:
    if ((v4 & 0x8000) == 0)
      goto LABEL_9;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 120), 7u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x8000) == 0)
  {
LABEL_9:
    if ((v4 & 4) == 0)
      goto LABEL_10;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 124), 8u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 4) == 0)
  {
LABEL_10:
    if ((v4 & 2) == 0)
      goto LABEL_11;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 9u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 2) == 0)
  {
LABEL_11:
    if ((v4 & 1) == 0)
      goto LABEL_12;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 0xAu);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 1) == 0)
  {
LABEL_12:
    if ((v4 & 0x80000) == 0)
      goto LABEL_14;
    goto LABEL_13;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 0xBu);
  if ((*(_DWORD *)(v3 + 152) & 0x80000) != 0)
LABEL_13:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 140), 0xCu);
LABEL_14:
  v5 = *(_QWORD *)(v3 + 72);
  if (v5)
    this = PB::Writer::write(a2, v5, 13);
  v6 = *(_DWORD *)(v3 + 152);
  if ((v6 & 0x200000) != 0)
  {
    this = PB::Writer::write(a2, *(_BYTE *)(v3 + 148), 0xEu);
    v6 = *(_DWORD *)(v3 + 152);
  }
  if ((v6 & 0x400000) != 0)
    this = PB::Writer::write(a2, *(_BYTE *)(v3 + 149), 0xFu);
  v7 = *(const PB::Base **)(v3 + 8);
  if (v7)
    this = PB::Writer::writeSubmessage(a2, v7, 0x10u);
  v8 = *(_DWORD *)(v3 + 152);
  if ((v8 & 0x40000) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 136), 0x11u);
    v8 = *(_DWORD *)(v3 + 152);
    if ((v8 & 0x100000) == 0)
    {
LABEL_24:
      if ((v8 & 0x20000) == 0)
        goto LABEL_25;
      goto LABEL_49;
    }
  }
  else if ((v8 & 0x100000) == 0)
  {
    goto LABEL_24;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 144), 0x12u);
  v8 = *(_DWORD *)(v3 + 152);
  if ((v8 & 0x20000) == 0)
  {
LABEL_25:
    if ((v8 & 0x400) == 0)
      goto LABEL_26;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 132), 0x13u);
  v8 = *(_DWORD *)(v3 + 152);
  if ((v8 & 0x400) == 0)
  {
LABEL_26:
    if ((v8 & 0x800) == 0)
      goto LABEL_27;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 104), 0x14u);
  v8 = *(_DWORD *)(v3 + 152);
  if ((v8 & 0x800) == 0)
  {
LABEL_27:
    if ((v8 & 0x2000) == 0)
      goto LABEL_28;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 108), 0x15u);
  v8 = *(_DWORD *)(v3 + 152);
  if ((v8 & 0x2000) == 0)
  {
LABEL_28:
    if ((v8 & 0x200) == 0)
      goto LABEL_29;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 116), 0x16u);
  v8 = *(_DWORD *)(v3 + 152);
  if ((v8 & 0x200) == 0)
  {
LABEL_29:
    if ((v8 & 0x1000) == 0)
      goto LABEL_31;
    goto LABEL_30;
  }
LABEL_53:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 100), 0x17u);
  if ((*(_DWORD *)(v3 + 152) & 0x1000) != 0)
LABEL_30:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 112), 0x18u);
LABEL_31:
  v9 = *(const PB::Base **)(v3 + 56);
  if (v9)
    this = PB::Writer::writeSubmessage(a2, v9, 0x19u);
  if ((*(_BYTE *)(v3 + 154) & 1) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 128), 0x1Au);
  return this;
}

unint64_t CMMsl::StepCountEntry::hash_value(CMMsl::StepCountEntry *this)
{
  int v2;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v31;
  double v32;
  double v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  char v38;

  v2 = *((_DWORD *)this + 38);
  if ((v2 & 0x80) == 0)
  {
    v37 = 0.0;
    if ((v2 & 0x40) != 0)
      goto LABEL_3;
LABEL_34:
    v36 = 0.0;
    if ((v2 & 0x10) != 0)
      goto LABEL_6;
LABEL_35:
    v35 = 0.0;
    if ((v2 & 0x100) != 0)
      goto LABEL_9;
    goto LABEL_36;
  }
  v12 = *((double *)this + 11);
  if (v12 == 0.0)
    v12 = 0.0;
  v37 = v12;
  if ((v2 & 0x40) == 0)
    goto LABEL_34;
LABEL_3:
  v3 = *((double *)this + 10);
  if (v3 == 0.0)
    v3 = 0.0;
  v36 = v3;
  if ((v2 & 0x10) == 0)
    goto LABEL_35;
LABEL_6:
  v4 = *((double *)this + 6);
  if (v4 == 0.0)
    v4 = 0.0;
  v35 = v4;
  if ((v2 & 0x100) != 0)
  {
LABEL_9:
    v34 = *((unsigned int *)this + 24);
    if ((v2 & 8) != 0)
      goto LABEL_10;
LABEL_37:
    v33 = 0.0;
    if ((v2 & 0x20) != 0)
      goto LABEL_13;
LABEL_38:
    v32 = 0.0;
    if ((v2 & 0x4000) != 0)
      goto LABEL_16;
    goto LABEL_39;
  }
LABEL_36:
  v34 = 0;
  if ((v2 & 8) == 0)
    goto LABEL_37;
LABEL_10:
  v5 = *((double *)this + 5);
  if (v5 == 0.0)
    v5 = 0.0;
  v33 = v5;
  if ((v2 & 0x20) == 0)
    goto LABEL_38;
LABEL_13:
  v6 = *((double *)this + 8);
  if (v6 == 0.0)
    v6 = 0.0;
  v32 = v6;
  if ((v2 & 0x4000) != 0)
  {
LABEL_16:
    v31 = *((unsigned int *)this + 30);
    if ((v2 & 0x8000) != 0)
      goto LABEL_17;
    goto LABEL_40;
  }
LABEL_39:
  v31 = 0;
  if ((v2 & 0x8000) != 0)
  {
LABEL_17:
    v7 = *((unsigned int *)this + 31);
    if ((v2 & 4) != 0)
      goto LABEL_18;
LABEL_41:
    v8 = 0;
    if ((v2 & 2) != 0)
      goto LABEL_22;
LABEL_42:
    v9 = 0;
    if ((v2 & 1) != 0)
      goto LABEL_26;
    goto LABEL_43;
  }
LABEL_40:
  v7 = 0;
  if ((v2 & 4) == 0)
    goto LABEL_41;
LABEL_18:
  if (*((double *)this + 4) == 0.0)
    v8 = 0;
  else
    v8 = *((_QWORD *)this + 4);
  if ((v2 & 2) == 0)
    goto LABEL_42;
LABEL_22:
  if (*((double *)this + 3) == 0.0)
    v9 = 0;
  else
    v9 = *((_QWORD *)this + 3);
  if ((v2 & 1) != 0)
  {
LABEL_26:
    if (*((double *)this + 2) == 0.0)
      v10 = 0;
    else
      v10 = *((_QWORD *)this + 2);
    if ((v2 & 0x80000) != 0)
      goto LABEL_30;
    goto LABEL_44;
  }
LABEL_43:
  v10 = 0;
  if ((v2 & 0x80000) != 0)
  {
LABEL_30:
    v11 = *((int *)this + 35);
    goto LABEL_45;
  }
LABEL_44:
  v11 = 0;
LABEL_45:
  v13 = *((_QWORD *)this + 9);
  if (v13)
  {
    v14 = sub_1000112DC((uint64_t)&v38, v13);
    v2 = *((_DWORD *)this + 38);
    if ((v2 & 0x200000) == 0)
      goto LABEL_47;
LABEL_50:
    v15 = *((unsigned __int8 *)this + 148);
    if ((v2 & 0x400000) != 0)
      goto LABEL_48;
    goto LABEL_51;
  }
  v14 = 0;
  if ((v2 & 0x200000) != 0)
    goto LABEL_50;
LABEL_47:
  v15 = 0;
  if ((v2 & 0x400000) != 0)
  {
LABEL_48:
    v16 = *((unsigned __int8 *)this + 149);
    goto LABEL_52;
  }
LABEL_51:
  v16 = 0;
LABEL_52:
  v17 = *((_QWORD *)this + 1);
  if (v17)
    v17 = CMMsl::AccelerometerPace::hash_value((CMMsl::AccelerometerPace *)v17);
  if ((v2 & 0x40000) != 0)
  {
    v18 = *((unsigned int *)this + 34);
    if ((v2 & 0x100000) != 0)
    {
LABEL_56:
      v19 = *((unsigned int *)this + 36);
      if ((v2 & 0x20000) != 0)
        goto LABEL_57;
      goto LABEL_65;
    }
  }
  else
  {
    v18 = 0;
    if ((v2 & 0x100000) != 0)
      goto LABEL_56;
  }
  v19 = 0;
  if ((v2 & 0x20000) != 0)
  {
LABEL_57:
    v20 = *((unsigned int *)this + 33);
    if ((v2 & 0x400) != 0)
      goto LABEL_58;
    goto LABEL_66;
  }
LABEL_65:
  v20 = 0;
  if ((v2 & 0x400) != 0)
  {
LABEL_58:
    v21 = *((unsigned int *)this + 26);
    if ((v2 & 0x800) != 0)
      goto LABEL_59;
    goto LABEL_67;
  }
LABEL_66:
  v21 = 0;
  if ((v2 & 0x800) != 0)
  {
LABEL_59:
    v22 = *((unsigned int *)this + 27);
    if ((v2 & 0x2000) != 0)
      goto LABEL_60;
    goto LABEL_68;
  }
LABEL_67:
  v22 = 0;
  if ((v2 & 0x2000) != 0)
  {
LABEL_60:
    v23 = *((unsigned int *)this + 29);
    if ((v2 & 0x200) != 0)
      goto LABEL_61;
LABEL_69:
    v24 = 0;
    if ((v2 & 0x1000) != 0)
      goto LABEL_62;
LABEL_70:
    v25 = 0;
    goto LABEL_71;
  }
LABEL_68:
  v23 = 0;
  if ((v2 & 0x200) == 0)
    goto LABEL_69;
LABEL_61:
  v24 = *((unsigned int *)this + 25);
  if ((v2 & 0x1000) == 0)
    goto LABEL_70;
LABEL_62:
  v25 = *((unsigned int *)this + 28);
LABEL_71:
  v26 = *((_QWORD *)this + 7);
  if (v26)
  {
    v27 = *(float *)(v26 + 8);
    v28 = v27 == 0.0 || (*(_BYTE *)(v26 + 12) & 1) == 0;
    v26 = LODWORD(v27);
    if (v28)
      v26 = 0;
  }
  if ((v2 & 0x10000) != 0)
    v29 = *((int *)this + 32);
  else
    v29 = 0;
  return *(_QWORD *)&v36 ^ *(_QWORD *)&v37 ^ *(_QWORD *)&v35 ^ v34 ^ *(_QWORD *)&v33 ^ *(_QWORD *)&v32 ^ v31 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v29;
}

uint64_t CMMsl::StepCountEntry::makeAccelerometerPace(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

uint64_t CMMsl::StepCountEntry::makeMovementStats(uint64_t this)
{
  if (!*(_QWORD *)(this + 56))
    operator new();
  return this;
}

void CMMsl::StepCountEntryAddition::~StepCountEntryAddition(CMMsl::StepCountEntryAddition *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::StepCountEntryAddition::StepCountEntryAddition(uint64_t this, const CMMsl::StepCountEntryAddition *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;

  *(_QWORD *)this = off_100354A80;
  *(_DWORD *)(this + 72) = 0;
  v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x20) != 0)
  {
    v4 = *((_QWORD *)a2 + 6);
    v3 = 32;
    *(_WORD *)(this + 72) = 32;
    *(_QWORD *)(this + 48) = v4;
    v2 = *((_WORD *)a2 + 36);
    if ((v2 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 16);
    v3 |= 0x80u;
    *(_WORD *)(this + 72) = v3;
    *(_DWORD *)(this + 64) = v5;
    v2 = *((_WORD *)a2 + 36);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *((_QWORD *)a2 + 3);
    v3 |= 4u;
    *(_WORD *)(this + 72) = v3;
    *(_QWORD *)(this + 24) = v6;
    v2 = *((_WORD *)a2 + 36);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 72) = v3;
  *(_QWORD *)(this + 32) = v7;
  v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  v8 = *((_QWORD *)a2 + 5);
  v3 |= 0x10u;
  *(_WORD *)(this + 72) = v3;
  *(_QWORD *)(this + 40) = v8;
  v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x200) == 0)
  {
LABEL_10:
    if ((v2 & 1) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  v9 = *((_BYTE *)a2 + 69);
  v3 |= 0x200u;
  *(_WORD *)(this + 72) = v3;
  *(_BYTE *)(this + 69) = v9;
  v2 = *((_WORD *)a2 + 36);
  if ((v2 & 1) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  v10 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 72) = v3;
  *(_QWORD *)(this + 8) = v10;
  v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  v11 = *((_QWORD *)a2 + 7);
  v3 |= 0x40u;
  *(_WORD *)(this + 72) = v3;
  *(_QWORD *)(this + 56) = v11;
  v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x400) == 0)
  {
LABEL_13:
    if ((v2 & 2) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  v12 = *((_BYTE *)a2 + 70);
  v3 |= 0x400u;
  *(_WORD *)(this + 72) = v3;
  *(_BYTE *)(this + 70) = v12;
  v2 = *((_WORD *)a2 + 36);
  if ((v2 & 2) == 0)
  {
LABEL_14:
    if ((v2 & 0x100) == 0)
      return this;
LABEL_24:
    v14 = *((_BYTE *)a2 + 68);
    *(_WORD *)(this + 72) = v3 | 0x100;
    *(_BYTE *)(this + 68) = v14;
    return this;
  }
LABEL_23:
  v13 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 72) = v3;
  *(_QWORD *)(this + 16) = v13;
  if ((*((_WORD *)a2 + 36) & 0x100) != 0)
    goto LABEL_24;
  return this;
}

CMMsl *CMMsl::StepCountEntryAddition::operator=(CMMsl *a1, const CMMsl::StepCountEntryAddition *a2)
{
  CMMsl::StepCountEntryAddition *v3;
  _BYTE v5[80];

  if (a1 != a2)
  {
    CMMsl::StepCountEntryAddition::StepCountEntryAddition((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::StepCountEntryAddition *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::StepCountEntryAddition *a2, CMMsl::StepCountEntryAddition *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;

  v3 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  v4 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v4;
  v5 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v5;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v7;
  v8 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  LOBYTE(v5) = *((_BYTE *)this + 69);
  *((_BYTE *)this + 69) = *((_BYTE *)a2 + 69);
  *((_BYTE *)a2 + 69) = v5;
  v9 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v9;
  v10 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v10;
  LOBYTE(v5) = *((_BYTE *)this + 70);
  *((_BYTE *)this + 70) = *((_BYTE *)a2 + 70);
  *((_BYTE *)a2 + 70) = v5;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  LOBYTE(v5) = *((_BYTE *)this + 68);
  *((_BYTE *)this + 68) = *((_BYTE *)a2 + 68);
  *((_BYTE *)a2 + 68) = v5;
  return result;
}

double CMMsl::StepCountEntryAddition::StepCountEntryAddition(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100354A80;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 69) = *(_BYTE *)(a2 + 69);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 70) = *(_BYTE *)(a2 + 70);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
  return result;
}

CMMsl *CMMsl::StepCountEntryAddition::operator=(CMMsl *this, uint64_t a2, CMMsl::StepCountEntryAddition *a3)
{
  void (**v5)(CMMsl::StepCountEntryAddition *__hidden);
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  char v11;
  __int16 v12;
  int v13;

  if (this != (CMMsl *)a2)
  {
    v5 = off_100354A80;
    v13 = *(_DWORD *)(a2 + 72);
    *(_DWORD *)(a2 + 72) = 0;
    v10 = *(_DWORD *)(a2 + 64);
    v7 = *(_OWORD *)(a2 + 24);
    v8 = *(_OWORD *)(a2 + 40);
    v12 = *(_WORD *)(a2 + 69);
    v9 = *(_QWORD *)(a2 + 56);
    v6 = *(_OWORD *)(a2 + 8);
    v11 = *(_BYTE *)(a2 + 68);
    CMMsl::swap(this, (CMMsl::StepCountEntryAddition *)&v5, a3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return this;
}

uint64_t CMMsl::StepCountEntryAddition::formatText(CMMsl::StepCountEntryAddition *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 36);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "calibratedDistance", *((double *)this + 1));
    v5 = *((_WORD *)this + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "energyDeltaDistance", *((double *)this + 2));
  v5 = *((_WORD *)this + 36);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "energyIsCalibrated", *((_BYTE *)this + 68));
  v5 = *((_WORD *)this + 36);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "incrementalActiveTime", *((double *)this + 3));
  v5 = *((_WORD *)this + 36);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "incrementalSteps", *((_DWORD *)this + 16));
  v5 = *((_WORD *)this + 36);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "lastStepTime", *((double *)this + 4));
  v5 = *((_WORD *)this + 36);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "odometerSpeed", *((double *)this + 5));
  v5 = *((_WORD *)this + 36);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "rawPace", *((double *)this + 6));
  v5 = *((_WORD *)this + 36);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(a2, "stepCadenceDeltaDistance", *((double *)this + 7));
    if ((*((_WORD *)this + 36) & 0x400) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "rawPaceDidJump", *((_BYTE *)this + 69));
  v5 = *((_WORD *)this + 36);
  if ((v5 & 0x40) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x400) != 0)
LABEL_12:
    PB::TextFormatter::format(a2, "stepCadenceIsCalibrated", *((_BYTE *)this + 70));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::StepCountEntryAddition::readFrom(CMMsl::StepCountEntryAddition *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  int v31;
  BOOL v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 36) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_55;
              *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_72;
            case 2u:
              *((_WORD *)this + 36) |= 0x80u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v33 = 0;
                v34 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_77;
                  }
                  v35 = v21++;
                  v36 = *(_BYTE *)(v22 + v35);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0)
                    break;
                  v33 += 7;
                  v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_76:
                    v2 = v35 + 1;
                    goto LABEL_77;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_76;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_77;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_77:
              *((_DWORD *)this + 16) = v25;
LABEL_78:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 3u:
              *((_WORD *)this + 36) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_55;
              *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_72;
            case 4u:
              *((_WORD *)this + 36) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_55;
              *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_72;
            case 5u:
              *((_WORD *)this + 36) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_55;
              *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_72;
            case 6u:
              *((_WORD *)this + 36) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v28 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v28 = v27 != 0;
              }
              *((_BYTE *)this + 69) = v28;
              goto LABEL_78;
            case 7u:
              *((_WORD *)this + 36) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_55;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_72;
            case 8u:
              *((_WORD *)this + 36) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_55;
              *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_72;
            case 9u:
              *((_WORD *)this + 36) |= 0x400u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v30 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v30 = v29 != 0;
              }
              *((_BYTE *)this + 70) = v30;
              goto LABEL_78;
            case 0xAu:
              *((_WORD *)this + 36) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_72:
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_55:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_78;
            case 0xBu:
              *((_WORD *)this + 36) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v32 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v31 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v32 = v31 != 0;
              }
              *((_BYTE *)this + 68) = v32;
              goto LABEL_78;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_78;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::StepCountEntryAddition::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 72);
  if ((v4 & 0x20) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 48), 1u);
    v4 = *(_WORD *)(v3 + 72);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 64), 2u);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 3u);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 4u);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 5u);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 1) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 69), 6u);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 1) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 7u);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 8u);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x400) == 0)
  {
LABEL_10:
    if ((v4 & 2) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 70), 9u);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 2) == 0)
  {
LABEL_11:
    if ((v4 & 0x100) == 0)
      return this;
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 68), 0xBu);
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 0xAu);
  if ((*(_WORD *)(v3 + 72) & 0x100) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 68), 0xBu);
  return this;
}

uint64_t CMMsl::StepCountEntryAddition::hash_value(CMMsl::StepCountEntryAddition *this)
{
  __int16 v1;
  double v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t v10;
  double v11;
  uint64_t v12;

  v1 = *((_WORD *)this + 36);
  if ((v1 & 0x20) != 0)
  {
    v2 = *((double *)this + 6);
    if (v2 == 0.0)
      v2 = 0.0;
    if ((v1 & 0x80) != 0)
    {
LABEL_3:
      v3 = *((unsigned int *)this + 16);
      if ((v1 & 4) != 0)
        goto LABEL_4;
LABEL_29:
      v4 = 0.0;
      if ((v1 & 8) != 0)
        goto LABEL_7;
LABEL_30:
      v5 = 0.0;
      if ((v1 & 0x10) != 0)
        goto LABEL_10;
LABEL_31:
      v6 = 0.0;
      if ((*((_WORD *)this + 36) & 0x200) != 0)
        goto LABEL_13;
      goto LABEL_32;
    }
  }
  else
  {
    v2 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_29;
LABEL_4:
  v4 = *((double *)this + 3);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_30;
LABEL_7:
  v5 = *((double *)this + 4);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_31;
LABEL_10:
  v6 = *((double *)this + 5);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((*((_WORD *)this + 36) & 0x200) != 0)
  {
LABEL_13:
    v7 = *((unsigned __int8 *)this + 69);
    if ((v1 & 1) != 0)
      goto LABEL_14;
LABEL_33:
    v8 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_17;
LABEL_34:
    v9 = 0.0;
    if ((*((_WORD *)this + 36) & 0x400) != 0)
      goto LABEL_20;
    goto LABEL_35;
  }
LABEL_32:
  v7 = 0;
  if ((v1 & 1) == 0)
    goto LABEL_33;
LABEL_14:
  v8 = *((double *)this + 1);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((v1 & 0x40) == 0)
    goto LABEL_34;
LABEL_17:
  v9 = *((double *)this + 7);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((*((_WORD *)this + 36) & 0x400) != 0)
  {
LABEL_20:
    v10 = *((unsigned __int8 *)this + 70);
    if ((v1 & 2) != 0)
      goto LABEL_21;
    goto LABEL_36;
  }
LABEL_35:
  v10 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_21:
    v11 = *((double *)this + 2);
    if (v11 == 0.0)
      v11 = 0.0;
    if ((*((_WORD *)this + 36) & 0x100) != 0)
      goto LABEL_24;
LABEL_37:
    v12 = 0;
    return v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ v10 ^ *(_QWORD *)&v11 ^ v12;
  }
LABEL_36:
  v11 = 0.0;
  if ((*((_WORD *)this + 36) & 0x100) == 0)
    goto LABEL_37;
LABEL_24:
  v12 = *((unsigned __int8 *)this + 68);
  return v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ v10 ^ *(_QWORD *)&v11 ^ v12;
}

void CMMsl::StepDistanceFusionResult::~StepDistanceFusionResult(CMMsl::StepDistanceFusionResult *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_100354AB8;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  PB::Base::~Base(this);
}

{
  CMMsl::StepDistanceFusionResult::~StepDistanceFusionResult(this);
  operator delete();
}

uint64_t CMMsl::StepDistanceFusionResult::StepDistanceFusionResult(uint64_t this, const CMMsl::StepDistanceFusionResult *a2)
{
  __int16 v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;

  *(_QWORD *)this = off_100354AB8;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 100) = 0;
  *(_QWORD *)(this + 16) = 0;
  if (*((_QWORD *)a2 + 2))
    operator new();
  if (*((_QWORD *)a2 + 1))
    operator new();
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 3);
    *(_WORD *)(this + 100) |= 1u;
    *(_QWORD *)(this + 24) = v4;
    v2 = *((_WORD *)a2 + 50);
    if ((v2 & 2) == 0)
    {
LABEL_7:
      if ((v2 & 0x80) == 0)
        goto LABEL_8;
      goto LABEL_20;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_7;
  }
  v5 = *((_QWORD *)a2 + 4);
  *(_WORD *)(this + 100) |= 2u;
  *(_QWORD *)(this + 32) = v5;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x80) == 0)
  {
LABEL_8:
    if ((v2 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  v6 = *((_QWORD *)a2 + 10);
  *(_WORD *)(this + 100) |= 0x80u;
  *(_QWORD *)(this + 80) = v6;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  v7 = *((_QWORD *)a2 + 8);
  *(_WORD *)(this + 100) |= 0x20u;
  *(_QWORD *)(this + 64) = v7;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 4) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  v8 = *((_QWORD *)a2 + 9);
  *(_WORD *)(this + 100) |= 0x40u;
  *(_QWORD *)(this + 72) = v8;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 4) == 0)
  {
LABEL_11:
    if ((v2 & 8) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  v9 = *((_QWORD *)a2 + 5);
  *(_WORD *)(this + 100) |= 4u;
  *(_QWORD *)(this + 40) = v9;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 8) == 0)
  {
LABEL_12:
    if ((v2 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_25;
  }
LABEL_24:
  v10 = *((_QWORD *)a2 + 6);
  *(_WORD *)(this + 100) |= 8u;
  *(_QWORD *)(this + 48) = v10;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x10) == 0)
  {
LABEL_13:
    if ((v2 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_26;
  }
LABEL_25:
  v11 = *((_QWORD *)a2 + 7);
  *(_WORD *)(this + 100) |= 0x10u;
  *(_QWORD *)(this + 56) = v11;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x400) == 0)
  {
LABEL_14:
    if ((v2 & 0x200) == 0)
      goto LABEL_15;
    goto LABEL_27;
  }
LABEL_26:
  v12 = *((_BYTE *)a2 + 96);
  *(_WORD *)(this + 100) |= 0x400u;
  *(_BYTE *)(this + 96) = v12;
  v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x200) == 0)
  {
LABEL_15:
    if ((v2 & 0x100) == 0)
      return this;
    goto LABEL_16;
  }
LABEL_27:
  v13 = *((_DWORD *)a2 + 23);
  *(_WORD *)(this + 100) |= 0x200u;
  *(_DWORD *)(this + 92) = v13;
  if ((*((_WORD *)a2 + 50) & 0x100) == 0)
    return this;
LABEL_16:
  v3 = *((_DWORD *)a2 + 22);
  *(_WORD *)(this + 100) |= 0x100u;
  *(_DWORD *)(this + 88) = v3;
  return this;
}

CMMsl *CMMsl::StepDistanceFusionResult::operator=(CMMsl *a1, const CMMsl::StepDistanceFusionResult *a2)
{
  CMMsl::StepDistanceFusionResult *v3;
  _BYTE v5[104];

  if (a1 != a2)
  {
    CMMsl::StepDistanceFusionResult::StepDistanceFusionResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::StepDistanceFusionResult *)v5, v3);
    CMMsl::StepDistanceFusionResult::~StepDistanceFusionResult((CMMsl::StepDistanceFusionResult *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::StepDistanceFusionResult *a2, CMMsl::StepDistanceFusionResult *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;

  v3 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v7;
  v8 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v8;
  v9 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v9;
  v10 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v10;
  v11 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v11;
  v12 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v12;
  result = *((double *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((double *)a2 + 7) = result;
  LOBYTE(v5) = *((_BYTE *)this + 96);
  *((_BYTE *)this + 96) = *((_BYTE *)a2 + 96);
  *((_BYTE *)a2 + 96) = v5;
  LODWORD(v5) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v5;
  LODWORD(v5) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v5;
  return result;
}

uint64_t CMMsl::StepDistanceFusionResult::StepDistanceFusionResult(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = off_100354AB8;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a2 + 100) = 0;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v8 = *v4;
  *v4 = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  return a1;
}

CMMsl *CMMsl::StepDistanceFusionResult::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::StepDistanceFusionResult *v3;
  _BYTE v5[104];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::StepDistanceFusionResult::StepDistanceFusionResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::StepDistanceFusionResult *)v5, v3);
    CMMsl::StepDistanceFusionResult::~StepDistanceFusionResult((CMMsl::StepDistanceFusionResult *)v5);
  }
  return a1;
}

uint64_t CMMsl::StepDistanceFusionResult::formatText(CMMsl::StepDistanceFusionResult *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "addition");
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "fused");
  v7 = *((_WORD *)this + 50);
  if ((v7 & 0x400) != 0)
  {
    PB::TextFormatter::format(a2, "isVehicular", *((_BYTE *)this + 96));
    v7 = *((_WORD *)this + 50);
    if ((v7 & 1) == 0)
    {
LABEL_7:
      if ((v7 & 0x100) == 0)
        goto LABEL_8;
      goto LABEL_20;
    }
  }
  else if ((v7 & 1) == 0)
  {
    goto LABEL_7;
  }
  PB::TextFormatter::format(a2, "odometerDeltaDistance", *((double *)this + 3));
  v7 = *((_WORD *)this + 50);
  if ((v7 & 0x100) == 0)
  {
LABEL_8:
    if ((v7 & 2) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "odometerQuality", *((_DWORD *)this + 22));
  v7 = *((_WORD *)this + 50);
  if ((v7 & 2) == 0)
  {
LABEL_9:
    if ((v7 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "odometerSmoothMeanPace", *((double *)this + 4));
  v7 = *((_WORD *)this + 50);
  if ((v7 & 0x200) == 0)
  {
LABEL_10:
    if ((v7 & 4) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "pedometerDistanceSource", *((_DWORD *)this + 23));
  v7 = *((_WORD *)this + 50);
  if ((v7 & 4) == 0)
  {
LABEL_11:
    if ((v7 & 8) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "speedStdDevOdometer", *((double *)this + 5));
  v7 = *((_WORD *)this + 50);
  if ((v7 & 8) == 0)
  {
LABEL_12:
    if ((v7 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "speedStdDevPedometer", *((double *)this + 6));
  v7 = *((_WORD *)this + 50);
  if ((v7 & 0x10) == 0)
  {
LABEL_13:
    if ((v7 & 0x20) == 0)
      goto LABEL_14;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "speedStdDevResidualTolerance", *((double *)this + 7));
  v7 = *((_WORD *)this + 50);
  if ((v7 & 0x20) == 0)
  {
LABEL_14:
    if ((v7 & 0x40) == 0)
      goto LABEL_15;
LABEL_27:
    PB::TextFormatter::format(a2, "totalDistanceFused", *((double *)this + 9));
    if ((*((_WORD *)this + 50) & 0x80) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_16;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "totalDistanceCalibratedPedometer", *((double *)this + 8));
  v7 = *((_WORD *)this + 50);
  if ((v7 & 0x40) != 0)
    goto LABEL_27;
LABEL_15:
  if ((v7 & 0x80) != 0)
LABEL_16:
    PB::TextFormatter::format(a2, "totalDistanceOdometer", *((double *)this + 10));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::StepDistanceFusionResult::readFrom(CMMsl::StepDistanceFusionResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  BOOL v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          operator new();
        case 3u:
          *((_WORD *)this + 50) |= 1u;
          v21 = *((_QWORD *)a2 + 1);
          if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_49;
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v21);
          goto LABEL_83;
        case 4u:
          *((_WORD *)this + 50) |= 2u;
          v22 = *((_QWORD *)a2 + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_49;
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v22);
          goto LABEL_83;
        case 5u:
          *((_WORD *)this + 50) |= 0x80u;
          v23 = *((_QWORD *)a2 + 1);
          if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_49;
          *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v23);
          goto LABEL_83;
        case 6u:
          *((_WORD *)this + 50) |= 0x20u;
          v24 = *((_QWORD *)a2 + 1);
          if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_49;
          *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v24);
          goto LABEL_83;
        case 7u:
          *((_WORD *)this + 50) |= 0x40u;
          v25 = *((_QWORD *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_49;
          *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v25);
          goto LABEL_83;
        case 8u:
          *((_WORD *)this + 50) |= 4u;
          v26 = *((_QWORD *)a2 + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_49;
          *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v26);
          goto LABEL_83;
        case 9u:
          *((_WORD *)this + 50) |= 8u;
          v27 = *((_QWORD *)a2 + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_49;
          *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v27);
          goto LABEL_83;
        case 0xAu:
          *((_WORD *)this + 50) |= 0x10u;
          v28 = *((_QWORD *)a2 + 1);
          if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v28);
LABEL_83:
            *((_QWORD *)a2 + 1) += 8;
          }
          else
          {
LABEL_49:
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_92;
        case 0xBu:
          *((_WORD *)this + 50) |= 0x400u;
          v29 = *((_QWORD *)a2 + 1);
          if (v29 >= *((_QWORD *)a2 + 2))
          {
            v32 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v30 = v29 + 1;
            v31 = *(unsigned __int8 *)(*(_QWORD *)a2 + v29);
            *((_QWORD *)a2 + 1) = v30;
            v32 = v31 != 0;
          }
          *((_BYTE *)this + 96) = v32;
          goto LABEL_92;
        case 0xCu:
          *((_WORD *)this + 50) |= 0x200u;
          v33 = *((_QWORD *)a2 + 1);
          v34 = *((_QWORD *)a2 + 2);
          v35 = *(_QWORD *)a2;
          if (v33 <= 0xFFFFFFFFFFFFFFF5 && v33 + 10 <= v34)
          {
            v36 = 0;
            v37 = 0;
            v38 = 0;
            do
            {
              v39 = v33 + 1;
              *((_QWORD *)a2 + 1) = v33 + 1;
              v40 = *(_BYTE *)(v35 + v33);
              v38 |= (unint64_t)(v40 & 0x7F) << v36;
              if ((v40 & 0x80) == 0)
                goto LABEL_87;
              v36 += 7;
              v33 = v39;
              v14 = v37++ > 8;
            }
            while (!v14);
LABEL_74:
            LODWORD(v38) = 0;
            goto LABEL_87;
          }
          v49 = 0;
          v50 = 0;
          v38 = 0;
          if (v34 <= v33)
            v34 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v34 == v33)
            {
              LODWORD(v38) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v51 = v33 + 1;
              v52 = *(_BYTE *)(v35 + v33);
              *((_QWORD *)a2 + 1) = v51;
              v38 |= (unint64_t)(v52 & 0x7F) << v49;
              if (v52 < 0)
              {
                v49 += 7;
                v33 = v51;
                v14 = v50++ > 8;
                if (v14)
                  goto LABEL_74;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v38) = 0;
            }
            break;
          }
LABEL_87:
          *((_DWORD *)this + 23) = v38;
          goto LABEL_92;
        case 0xDu:
          *((_WORD *)this + 50) |= 0x100u;
          v41 = *((_QWORD *)a2 + 1);
          v42 = *((_QWORD *)a2 + 2);
          v43 = *(_QWORD *)a2;
          if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
          {
            v44 = 0;
            v45 = 0;
            v46 = 0;
            do
            {
              v47 = v41 + 1;
              *((_QWORD *)a2 + 1) = v41 + 1;
              v48 = *(_BYTE *)(v43 + v41);
              v46 |= (unint64_t)(v48 & 0x7F) << v44;
              if ((v48 & 0x80) == 0)
                goto LABEL_91;
              v44 += 7;
              v41 = v47;
              v14 = v45++ > 8;
            }
            while (!v14);
LABEL_81:
            LODWORD(v46) = 0;
            goto LABEL_91;
          }
          v53 = 0;
          v54 = 0;
          v46 = 0;
          if (v42 <= v41)
            v42 = *((_QWORD *)a2 + 1);
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_92;
      }
      while (1)
      {
        if (v42 == v41)
        {
          LODWORD(v46) = 0;
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_91;
        }
        v55 = v41 + 1;
        v56 = *(_BYTE *)(v43 + v41);
        *((_QWORD *)a2 + 1) = v55;
        v46 |= (unint64_t)(v56 & 0x7F) << v53;
        if ((v56 & 0x80) == 0)
          break;
        v53 += 7;
        v41 = v55;
        v14 = v54++ > 8;
        if (v14)
          goto LABEL_81;
      }
      if (*((_BYTE *)a2 + 24))
        LODWORD(v46) = 0;
LABEL_91:
      *((_DWORD *)this + 22) = v46;
LABEL_92:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::StepDistanceFusionResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  const PB::Base *v5;
  __int16 v6;

  v3 = this;
  v4 = *(const PB::Base **)(this + 16);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5, 2u);
  v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 24), 3u);
    v6 = *(_WORD *)(v3 + 100);
    if ((v6 & 2) == 0)
    {
LABEL_7:
      if ((v6 & 0x80) == 0)
        goto LABEL_8;
      goto LABEL_19;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_7;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 4u);
  v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x80) == 0)
  {
LABEL_8:
    if ((v6 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 80), 5u);
  v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x20) == 0)
  {
LABEL_9:
    if ((v6 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 6u);
  v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x40) == 0)
  {
LABEL_10:
    if ((v6 & 4) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 7u);
  v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 4) == 0)
  {
LABEL_11:
    if ((v6 & 8) == 0)
      goto LABEL_12;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 8u);
  v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 8) == 0)
  {
LABEL_12:
    if ((v6 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 9u);
  v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x10) == 0)
  {
LABEL_13:
    if ((v6 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 0xAu);
  v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x400) == 0)
  {
LABEL_14:
    if ((v6 & 0x200) == 0)
      goto LABEL_15;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 96), 0xBu);
  v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x200) == 0)
  {
LABEL_15:
    if ((v6 & 0x100) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 88), 0xDu);
  }
LABEL_26:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 92), 0xCu);
  if ((*(_WORD *)(v3 + 100) & 0x100) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 88), 0xDu);
  return this;
}

unint64_t CMMsl::StepDistanceFusionResult::hash_value(CMMsl::StepDistanceFusionResult *this)
{
  CMMsl::StepCountEntry *v2;
  unint64_t v3;
  unint64_t v4;
  __int16 v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = (CMMsl::StepCountEntry *)*((_QWORD *)this + 2);
  if (v2)
    v3 = CMMsl::StepCountEntry::hash_value(v2);
  else
    v3 = 0;
  v4 = *((_QWORD *)this + 1);
  if (v4)
    v4 = CMMsl::StepCountEntryAddition::hash_value((CMMsl::StepCountEntryAddition *)v4);
  v5 = *((_WORD *)this + 50);
  if ((v5 & 1) == 0)
  {
    v6 = 0.0;
    if ((v5 & 2) != 0)
      goto LABEL_8;
LABEL_35:
    v7 = 0.0;
    if ((v5 & 0x80) != 0)
      goto LABEL_11;
LABEL_36:
    v8 = 0.0;
    if ((v5 & 0x20) != 0)
      goto LABEL_14;
LABEL_37:
    v9 = 0.0;
    if ((v5 & 0x40) != 0)
      goto LABEL_17;
LABEL_38:
    v10 = 0.0;
    if ((v5 & 4) != 0)
      goto LABEL_20;
LABEL_39:
    v11 = 0.0;
    if ((v5 & 8) != 0)
      goto LABEL_23;
LABEL_40:
    v12 = 0.0;
    if ((v5 & 0x10) != 0)
      goto LABEL_26;
LABEL_41:
    v13 = 0.0;
    if ((*((_WORD *)this + 50) & 0x400) != 0)
      goto LABEL_29;
    goto LABEL_42;
  }
  v6 = *((double *)this + 3);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v5 & 2) == 0)
    goto LABEL_35;
LABEL_8:
  v7 = *((double *)this + 4);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v5 & 0x80) == 0)
    goto LABEL_36;
LABEL_11:
  v8 = *((double *)this + 10);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((v5 & 0x20) == 0)
    goto LABEL_37;
LABEL_14:
  v9 = *((double *)this + 8);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((v5 & 0x40) == 0)
    goto LABEL_38;
LABEL_17:
  v10 = *((double *)this + 9);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((v5 & 4) == 0)
    goto LABEL_39;
LABEL_20:
  v11 = *((double *)this + 5);
  if (v11 == 0.0)
    v11 = 0.0;
  if ((v5 & 8) == 0)
    goto LABEL_40;
LABEL_23:
  v12 = *((double *)this + 6);
  if (v12 == 0.0)
    v12 = 0.0;
  if ((v5 & 0x10) == 0)
    goto LABEL_41;
LABEL_26:
  v13 = *((double *)this + 7);
  if (v13 == 0.0)
    v13 = 0.0;
  if ((*((_WORD *)this + 50) & 0x400) != 0)
  {
LABEL_29:
    v14 = *((unsigned __int8 *)this + 96);
    if ((*((_WORD *)this + 50) & 0x200) != 0)
      goto LABEL_30;
LABEL_43:
    v15 = 0;
    if ((*((_WORD *)this + 50) & 0x100) != 0)
      goto LABEL_31;
LABEL_44:
    v16 = 0;
    return v4 ^ v3 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ v14 ^ v15 ^ v16;
  }
LABEL_42:
  v14 = 0;
  if ((*((_WORD *)this + 50) & 0x200) == 0)
    goto LABEL_43;
LABEL_30:
  v15 = *((int *)this + 23);
  if ((*((_WORD *)this + 50) & 0x100) == 0)
    goto LABEL_44;
LABEL_31:
  v16 = *((int *)this + 22);
  return v4 ^ v3 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ v14 ^ v15 ^ v16;
}

uint64_t CMMsl::StepDistanceFusionResult::makeFused(uint64_t this)
{
  if (!*(_QWORD *)(this + 16))
    operator new();
  return this;
}

uint64_t CMMsl::StepDistanceFusionResult::makeAddition(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

void CMMsl::StepLikelihoodFeatures::~StepLikelihoodFeatures(CMMsl::StepLikelihoodFeatures *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::StepLikelihoodFeatures::StepLikelihoodFeatures(CMMsl::StepLikelihoodFeatures *this, const CMMsl::StepLikelihoodFeatures *a2)
{
  __int16 v2;
  __int16 v3;
  double result;

  *(_QWORD *)this = off_100354AF0;
  *((_DWORD *)this + 24) = 0;
  v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x40) != 0)
  {
    result = *((double *)a2 + 7);
    v3 = 64;
    *((_WORD *)this + 48) = 64;
    *((double *)this + 7) = result;
    v2 = *((_WORD *)a2 + 48);
    if ((v2 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_WORD *)a2 + 48) & 0x400) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 11);
    v3 |= 0x400u;
    *((_WORD *)this + 48) = v3;
    *((double *)this + 11) = result;
    v2 = *((_WORD *)a2 + 48);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    result = *((double *)a2 + 6);
    v3 |= 0x20u;
    *((_WORD *)this + 48) = v3;
    *((double *)this + 6) = result;
    v2 = *((_WORD *)a2 + 48);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_WORD *)this + 48) = v3;
  *((double *)this + 4) = result;
  v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  result = *((double *)a2 + 10);
  v3 |= 0x200u;
  *((_WORD *)this + 48) = v3;
  *((double *)this + 10) = result;
  v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_WORD *)this + 48) = v3;
  *((double *)this + 9) = result;
  v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x10) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_WORD *)this + 48) = v3;
  *((double *)this + 5) = result;
  v2 = *((_WORD *)a2 + 48);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_WORD *)this + 48) = v3;
  *((double *)this + 3) = result;
  v2 = *((_WORD *)a2 + 48);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 0x80) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  result = *((double *)a2 + 2);
  v3 |= 2u;
  *((_WORD *)this + 48) = v3;
  *((double *)this + 2) = result;
  v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x80) == 0)
  {
LABEL_14:
    if ((v2 & 1) == 0)
      return result;
LABEL_24:
    result = *((double *)a2 + 1);
    *((_WORD *)this + 48) = v3 | 1;
    *((double *)this + 1) = result;
    return result;
  }
LABEL_23:
  result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_WORD *)this + 48) = v3;
  *((double *)this + 8) = result;
  if ((*((_WORD *)a2 + 48) & 1) != 0)
    goto LABEL_24;
  return result;
}

CMMsl *CMMsl::StepLikelihoodFeatures::operator=(CMMsl *a1, const CMMsl::StepLikelihoodFeatures *a2)
{
  CMMsl::StepLikelihoodFeatures *v3;
  _BYTE v5[104];

  if (a1 != a2)
  {
    CMMsl::StepLikelihoodFeatures::StepLikelihoodFeatures((CMMsl::StepLikelihoodFeatures *)v5, a2);
    CMMsl::swap(a1, (CMMsl::StepLikelihoodFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::StepLikelihoodFeatures *a2, CMMsl::StepLikelihoodFeatures *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;

  v3 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v3;
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v4;
  v5 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v5;
  v6 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v6;
  v7 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v7;
  v8 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v8;
  v9 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v9;
  v10 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v10;
  v11 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v11;
  v12 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v12;
  v13 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v13;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::StepLikelihoodFeatures::StepLikelihoodFeatures(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100354AF0;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

CMMsl *CMMsl::StepLikelihoodFeatures::operator=(CMMsl *this, uint64_t a2, CMMsl::StepLikelihoodFeatures *a3)
{
  __int128 v4;
  __int128 v5;
  void (**v7)(CMMsl::StepLikelihoodFeatures *__hidden);
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;

  if (this != (CMMsl *)a2)
  {
    v7 = off_100354AF0;
    v14 = *(_DWORD *)(a2 + 96);
    *(_DWORD *)(a2 + 96) = 0;
    v13 = *(_QWORD *)(a2 + 88);
    v4 = *(_OWORD *)(a2 + 72);
    v5 = *(_OWORD *)(a2 + 40);
    v9 = *(_OWORD *)(a2 + 24);
    v10 = v5;
    v11 = *(_OWORD *)(a2 + 56);
    v12 = v4;
    v8 = *(_OWORD *)(a2 + 8);
    CMMsl::swap(this, (CMMsl::StepLikelihoodFeatures *)&v7, a3);
    PB::Base::~Base((PB::Base *)&v7);
  }
  return this;
}

uint64_t CMMsl::StepLikelihoodFeatures::formatText(CMMsl::StepLikelihoodFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 48);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "bobbiness", *((double *)this + 1));
    v5 = *((_WORD *)this + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "bufferAvgSampleRateHz", *((double *)this + 2));
  v5 = *((_WORD *)this + 48);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "concavityDeltaDeg", *((double *)this + 3));
  v5 = *((_WORD *)this + 48);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "deltaInertialZVel", *((double *)this + 4));
  v5 = *((_WORD *)this + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "horizontalDisplacement", *((double *)this + 5));
  v5 = *((_WORD *)this + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "impulseDurationSec", *((double *)this + 6));
  v5 = *((_WORD *)this + 48);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "likelihoodRatio", *((double *)this + 7));
  v5 = *((_WORD *)this + 48);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "peakiness", *((double *)this + 8));
  v5 = *((_WORD *)this + 48);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(a2, "thetaRollFaceDeg", *((double *)this + 10));
    if ((*((_WORD *)this + 48) & 0x400) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "thetaPitchFaceDeg", *((double *)this + 9));
  v5 = *((_WORD *)this + 48);
  if ((v5 & 0x200) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x400) != 0)
LABEL_12:
    PB::TextFormatter::format(a2, "timeSinceLastStepSec", *((double *)this + 11));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::StepLikelihoodFeatures::readFrom(CMMsl::StepLikelihoodFeatures *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_WORD *)this + 48) |= 0x40u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_54;
          *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_58;
        case 2u:
          *((_WORD *)this + 48) |= 0x400u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_54;
          *((_QWORD *)this + 11) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_58;
        case 3u:
          *((_WORD *)this + 48) |= 0x20u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_54;
          *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_58;
        case 4u:
          *((_WORD *)this + 48) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_54;
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_58;
        case 5u:
          *((_WORD *)this + 48) |= 0x200u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_54;
          *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_58;
        case 6u:
          *((_WORD *)this + 48) |= 0x100u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_54;
          *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_58;
        case 7u:
          *((_WORD *)this + 48) |= 0x10u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_54;
          *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_58;
        case 8u:
          *((_WORD *)this + 48) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_54;
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_58;
        case 9u:
          *((_WORD *)this + 48) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_54;
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_58;
        case 0xAu:
          *((_WORD *)this + 48) |= 0x80u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_54;
          *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_58;
        case 0xBu:
          *((_WORD *)this + 48) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_58:
            v2 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v2;
          }
          else
          {
LABEL_54:
            *((_BYTE *)a2 + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::StepLikelihoodFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 96);
  if ((v4 & 0x40) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 56), 1u);
    v4 = *(_WORD *)(v3 + 96);
    if ((v4 & 0x400) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((*(_WORD *)(this + 96) & 0x400) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 88), 2u);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 3u);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 4u);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 80), 5u);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 6u);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 7u);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 8u);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 9u);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x80) == 0)
  {
LABEL_11:
    if ((v4 & 1) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 8), 0xBu);
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 0xAu);
  if ((*(_WORD *)(v3 + 96) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8), 0xBu);
  return this;
}

uint64_t CMMsl::StepLikelihoodFeatures::hash_value(CMMsl::StepLikelihoodFeatures *this)
{
  __int16 v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;

  v1 = *((_WORD *)this + 48);
  if ((v1 & 0x40) == 0)
  {
    v2 = 0.0;
    if ((*((_WORD *)this + 48) & 0x400) != 0)
      goto LABEL_3;
LABEL_36:
    v3 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_6;
LABEL_37:
    v4 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_9;
LABEL_38:
    v5 = 0.0;
    if ((*((_WORD *)this + 48) & 0x200) != 0)
      goto LABEL_12;
LABEL_39:
    v6 = 0.0;
    if ((*((_WORD *)this + 48) & 0x100) != 0)
      goto LABEL_15;
LABEL_40:
    v7 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_18;
LABEL_41:
    v8 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_21;
LABEL_42:
    v9 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_24;
LABEL_43:
    v10 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_27;
    goto LABEL_44;
  }
  v2 = *((double *)this + 7);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_WORD *)this + 48) & 0x400) == 0)
    goto LABEL_36;
LABEL_3:
  v3 = *((double *)this + 11);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_37;
LABEL_6:
  v4 = *((double *)this + 6);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_38;
LABEL_9:
  v5 = *((double *)this + 4);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((*((_WORD *)this + 48) & 0x200) == 0)
    goto LABEL_39;
LABEL_12:
  v6 = *((double *)this + 10);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((*((_WORD *)this + 48) & 0x100) == 0)
    goto LABEL_40;
LABEL_15:
  v7 = *((double *)this + 9);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_41;
LABEL_18:
  v8 = *((double *)this + 5);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_42;
LABEL_21:
  v9 = *((double *)this + 3);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_43;
LABEL_24:
  v10 = *((double *)this + 2);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((v1 & 0x80) != 0)
  {
LABEL_27:
    v11 = *((double *)this + 8);
    if (v11 == 0.0)
      v11 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_30;
LABEL_45:
    v12 = 0.0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12;
  }
LABEL_44:
  v11 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_45;
LABEL_30:
  v12 = *((double *)this + 1);
  if (v12 == 0.0)
    v12 = 0.0;
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12;
}

void CMMsl::StreamingHeartRateData::~StreamingHeartRateData(CMMsl::StreamingHeartRateData *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100354B28;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100354B28;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100354B28;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::StreamingHeartRateData::StreamingHeartRateData(_QWORD *this, const CMMsl::StreamingHeartRateData *a2)
{
  *this = off_100354B28;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::StreamingHeartRateData *CMMsl::StreamingHeartRateData::operator=(const CMMsl::StreamingHeartRateData *a1, const CMMsl::StreamingHeartRateData *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::StreamingHeartRateData *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::StreamingHeartRateData::StreamingHeartRateData(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_100354B28;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::StreamingHeartRateData *a2, CMMsl::StreamingHeartRateData *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::StreamingHeartRateData::StreamingHeartRateData(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100354B28;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100354B28;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::StreamingHeartRateData::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_100354B28;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::StreamingHeartRateData::formatText(CMMsl::StreamingHeartRateData *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::StreamingHeartRateData::readFrom(CMMsl::StreamingHeartRateData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::StreamingHeartRateData::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

CMMsl::OnsetHeartRateData *CMMsl::StreamingHeartRateData::hash_value(CMMsl::StreamingHeartRateData *this)
{
  CMMsl::OnsetHeartRateData *result;

  result = (CMMsl::OnsetHeartRateData *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::OnsetHeartRateData *)CMMsl::OnsetHeartRateData::hash_value(result);
  return result;
}

uint64_t CMMsl::StreamingHeartRateData::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

void CMMsl::StreamingHighFrequencyHeartRateData::~StreamingHighFrequencyHeartRateData(CMMsl::StreamingHighFrequencyHeartRateData *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100354B60;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100354B60;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100354B60;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::StreamingHighFrequencyHeartRateData::StreamingHighFrequencyHeartRateData(_QWORD *this, const CMMsl::StreamingHighFrequencyHeartRateData *a2)
{
  *this = off_100354B60;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::StreamingHighFrequencyHeartRateData *CMMsl::StreamingHighFrequencyHeartRateData::operator=(const CMMsl::StreamingHighFrequencyHeartRateData *a1, const CMMsl::StreamingHighFrequencyHeartRateData *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::StreamingHighFrequencyHeartRateData *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::StreamingHighFrequencyHeartRateData::StreamingHighFrequencyHeartRateData(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_100354B60;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::StreamingHighFrequencyHeartRateData *a2, CMMsl::StreamingHighFrequencyHeartRateData *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::StreamingHighFrequencyHeartRateData::StreamingHighFrequencyHeartRateData(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100354B60;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100354B60;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::StreamingHighFrequencyHeartRateData::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_100354B60;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::StreamingHighFrequencyHeartRateData::formatText(CMMsl::StreamingHighFrequencyHeartRateData *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::StreamingHighFrequencyHeartRateData::readFrom(CMMsl::StreamingHighFrequencyHeartRateData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::StreamingHighFrequencyHeartRateData::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

CMMsl::OnsetHeartRateData *CMMsl::StreamingHighFrequencyHeartRateData::hash_value(CMMsl::StreamingHighFrequencyHeartRateData *this)
{
  CMMsl::OnsetHeartRateData *result;

  result = (CMMsl::OnsetHeartRateData *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::OnsetHeartRateData *)CMMsl::OnsetHeartRateData::hash_value(result);
  return result;
}

uint64_t CMMsl::StreamingHighFrequencyHeartRateData::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

void CMMsl::StrideCalBin::~StrideCalBin(CMMsl::StrideCalBin *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::StrideCalBin::StrideCalBin(CMMsl::StrideCalBin *this, const CMMsl::StrideCalBin *a2)
{
  char v2;
  char v3;
  int v4;
  double result;
  int v6;

  *(_QWORD *)this = off_100354B98;
  *((_DWORD *)this + 10) = 0;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 8) != 0)
  {
    v4 = *((_DWORD *)a2 + 8);
    v3 = 8;
    *((_BYTE *)this + 40) = 8;
    *((_DWORD *)this + 8) = v4;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 40) & 1) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 1);
    v3 |= 1u;
    *((_BYTE *)this + 40) = v3;
    *((double *)this + 1) = result;
    v2 = *((_BYTE *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_BYTE *)this + 40) = v3;
    *((double *)this + 2) = result;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        return result;
LABEL_12:
      result = *((double *)a2 + 3);
      *((_BYTE *)this + 40) = v3 | 4;
      *((double *)this + 3) = result;
      return result;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v6 = *((_DWORD *)a2 + 9);
  v3 |= 0x10u;
  *((_BYTE *)this + 40) = v3;
  *((_DWORD *)this + 9) = v6;
  if ((*((_BYTE *)a2 + 40) & 4) != 0)
    goto LABEL_12;
  return result;
}

uint64_t CMMsl::StrideCalBin::operator=(uint64_t a1, const CMMsl::StrideCalBin *a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  if ((const CMMsl::StrideCalBin *)a1 != a2)
  {
    CMMsl::StrideCalBin::StrideCalBin((CMMsl::StrideCalBin *)&v8, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v3;
    *(_QWORD *)&v3 = *(_QWORD *)(a1 + 24);
    v4 = *(_QWORD *)(a1 + 32);
    v5 = v11;
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v5;
    v6 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    v12 = v6;
    v10 = v3;
    v11 = v4;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::StrideCalBin *a2, CMMsl::StrideCalBin *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  double result;

  v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  v4 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v7;
  result = *((double *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((double *)a2 + 3) = result;
  return result;
}

double CMMsl::StrideCalBin::StrideCalBin(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100354B98;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100354B98;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::StrideCalBin::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  void (**v9)(CMMsl::StrideCalBin *__hidden);
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  if (a1 != a2)
  {
    v9 = off_100354B98;
    v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    v4 = *(_QWORD *)(a2 + 24);
    v13 = *(_DWORD *)(a1 + 40);
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    v10 = v5;
    *(_QWORD *)&v5 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 40) = v3;
    v7 = *(_QWORD *)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = v5;
    v11 = v7;
    v12 = v6;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::StrideCalBin::formatText(CMMsl::StrideCalBin *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "begin", *((double *)this + 1));
    v5 = *((_BYTE *)this + 40);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 40) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "bin", *((_DWORD *)this + 8));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "kValue", *((double *)this + 3));
    if ((*((_BYTE *)this + 40) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "end", *((double *)this + 2));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 4) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 9));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::StrideCalBin::readFrom(CMMsl::StrideCalBin *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 40) |= 8u;
              v20 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v21 = *(_QWORD *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v33 = 0;
                v34 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_67;
                  }
                  v35 = v20++;
                  v36 = *(_BYTE *)(v21 + v35);
                  *((_QWORD *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0)
                    break;
                  v33 += 7;
                  v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_66;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v24) = 0;
LABEL_66:
                v2 = v35 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)a2 + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_67;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_67:
              *((_DWORD *)this + 8) = v24;
              goto LABEL_73;
            case 2u:
              *((_BYTE *)this + 40) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_46;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_62;
            case 3u:
              *((_BYTE *)this + 40) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_46;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_62;
            case 4u:
              *((_BYTE *)this + 40) |= 0x10u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_72;
                  }
                  v39 = v27++;
                  v40 = *(_BYTE *)(v28 + v39);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_71:
                    v2 = v39 + 1;
                    goto LABEL_72;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_71;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_72;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_72:
              *((_DWORD *)this + 9) = v31;
LABEL_73:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 5u:
              *((_BYTE *)this + 40) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_62:
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_46:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_73;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_73;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::StrideCalBin::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 40);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 32), 1u);
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 40) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 2u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 24), 5u);
  }
LABEL_10:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 36), 4u);
  if ((*(_BYTE *)(v3 + 40) & 4) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 24), 5u);
  return this;
}

uint64_t CMMsl::StrideCalBin::hash_value(CMMsl::StrideCalBin *this)
{
  uint64_t v1;
  double v2;
  double v3;
  uint64_t v4;
  double v5;

  if ((*((_BYTE *)this + 40) & 8) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 40) & 1) != 0)
      goto LABEL_3;
LABEL_14:
    v2 = 0.0;
    if ((*((_BYTE *)this + 40) & 2) != 0)
      goto LABEL_6;
LABEL_15:
    v3 = 0.0;
    if ((*((_BYTE *)this + 40) & 0x10) != 0)
      goto LABEL_9;
    goto LABEL_16;
  }
  v1 = *((unsigned int *)this + 8);
  if ((*((_BYTE *)this + 40) & 1) == 0)
    goto LABEL_14;
LABEL_3:
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 40) & 2) == 0)
    goto LABEL_15;
LABEL_6:
  v3 = *((double *)this + 2);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((*((_BYTE *)this + 40) & 0x10) != 0)
  {
LABEL_9:
    v4 = *((unsigned int *)this + 9);
    if ((*((_BYTE *)this + 40) & 4) != 0)
      goto LABEL_10;
LABEL_17:
    v5 = 0.0;
    return *(_QWORD *)&v2 ^ v1 ^ *(_QWORD *)&v3 ^ v4 ^ *(_QWORD *)&v5;
  }
LABEL_16:
  v4 = 0;
  if ((*((_BYTE *)this + 40) & 4) == 0)
    goto LABEL_17;
LABEL_10:
  v5 = *((double *)this + 3);
  if (v5 == 0.0)
    v5 = 0.0;
  return *(_QWORD *)&v2 ^ v1 ^ *(_QWORD *)&v3 ^ v4 ^ *(_QWORD *)&v5;
}

void CMMsl::StrideCalEntry::~StrideCalEntry(CMMsl::StrideCalEntry *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::StrideCalEntry::StrideCalEntry(uint64_t this, const CMMsl::StrideCalEntry *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  *(_QWORD *)this = off_100354BD0;
  *(_DWORD *)(this + 92) = 0;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x100) != 0)
  {
    v4 = *((_QWORD *)a2 + 9);
    v3 = 256;
    *(_WORD *)(this + 92) = 256;
    *(_QWORD *)(this + 72) = v4;
    v2 = *((_WORD *)a2 + 46);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *(_WORD *)(this + 92) = v3;
    *(_QWORD *)(this + 16) = v5;
    v2 = *((_WORD *)a2 + 46);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *((_QWORD *)a2 + 4);
    v3 |= 8u;
    *(_WORD *)(this + 92) = v3;
    *(_QWORD *)(this + 32) = v6;
    v2 = *((_WORD *)a2 + 46);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        goto LABEL_9;
      goto LABEL_19;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 5);
  v3 |= 0x10u;
  *(_WORD *)(this + 92) = v3;
  *(_QWORD *)(this + 40) = v7;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x800) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  v8 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 92) = v3;
  *(_QWORD *)(this + 8) = v8;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x800) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  v9 = *((_DWORD *)a2 + 22);
  v3 |= 0x800u;
  *(_WORD *)(this + 92) = v3;
  *(_DWORD *)(this + 88) = v9;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_22;
  }
LABEL_21:
  v10 = *((_DWORD *)a2 + 21);
  v3 |= 0x400u;
  *(_WORD *)(this + 92) = v3;
  *(_DWORD *)(this + 84) = v10;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_23;
  }
LABEL_22:
  v11 = *((_QWORD *)a2 + 8);
  v3 |= 0x80u;
  *(_WORD *)(this + 92) = v3;
  *(_QWORD *)(this + 64) = v11;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x20) == 0)
  {
LABEL_13:
    if ((v2 & 4) == 0)
      goto LABEL_14;
    goto LABEL_24;
  }
LABEL_23:
  v12 = *((_QWORD *)a2 + 6);
  v3 |= 0x20u;
  *(_WORD *)(this + 92) = v3;
  *(_QWORD *)(this + 48) = v12;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 4) == 0)
  {
LABEL_14:
    if ((v2 & 0x40) == 0)
      goto LABEL_15;
    goto LABEL_25;
  }
LABEL_24:
  v13 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *(_WORD *)(this + 92) = v3;
  *(_QWORD *)(this + 24) = v13;
  v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x40) == 0)
  {
LABEL_15:
    if ((v2 & 0x200) == 0)
      return this;
LABEL_26:
    v15 = *((_DWORD *)a2 + 20);
    *(_WORD *)(this + 92) = v3 | 0x200;
    *(_DWORD *)(this + 80) = v15;
    return this;
  }
LABEL_25:
  v14 = *((_QWORD *)a2 + 7);
  v3 |= 0x40u;
  *(_WORD *)(this + 92) = v3;
  *(_QWORD *)(this + 56) = v14;
  if ((*((_WORD *)a2 + 46) & 0x200) != 0)
    goto LABEL_26;
  return this;
}

CMMsl *CMMsl::StrideCalEntry::operator=(CMMsl *a1, const CMMsl::StrideCalEntry *a2)
{
  CMMsl::StrideCalEntry *v3;
  _BYTE v5[96];

  if (a1 != a2)
  {
    CMMsl::StrideCalEntry::StrideCalEntry((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::StrideCalEntry *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::StrideCalEntry *a2, CMMsl::StrideCalEntry *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  int v15;

  v3 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v3;
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  v7 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  v9 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v9;
  v10 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v10;
  v11 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v11;
  v12 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v12;
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v13;
  result = *((double *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((double *)a2 + 7) = result;
  v15 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v15;
  return result;
}

double CMMsl::StrideCalEntry::StrideCalEntry(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100354BD0;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 92) = 0;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  result = *(double *)(a2 + 56);
  *(double *)(a1 + 56) = result;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  return result;
}

CMMsl *CMMsl::StrideCalEntry::operator=(CMMsl *this, uint64_t a2, CMMsl::StrideCalEntry *a3)
{
  __int128 v4;
  void (**v6)(CMMsl::StrideCalEntry *__hidden);
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;

  if (this != (CMMsl *)a2)
  {
    v6 = off_100354BD0;
    v11 = *(_QWORD *)(a2 + 72);
    v7 = *(_OWORD *)(a2 + 8);
    v9 = *(_OWORD *)(a2 + 40);
    v8 = *(_OWORD *)(a2 + 24);
    v10 = *(_OWORD *)(a2 + 56);
    v4 = *(_OWORD *)(a2 + 80);
    *(_DWORD *)(a2 + 92) = 0;
    v12 = v4;
    CMMsl::swap(this, (CMMsl::StrideCalEntry *)&v6, a3);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return this;
}

uint64_t CMMsl::StrideCalEntry::formatText(CMMsl::StrideCalEntry *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 46);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "distance", *((double *)this + 1));
    v5 = *((_WORD *)this + 46);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "endTime", *((double *)this + 2));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "gpsSource", *((double *)this + 3));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "kvalue", *((double *)this + 4));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "kvalueTrack", *((double *)this + 5));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "percentGrade", *((double *)this + 6));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "runningFormStrideLength", *((double *)this + 7));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "runningFormStrideLengthMetrics", *((_DWORD *)this + 20));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "session", *((_DWORD *)this + 21));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v5 & 0x100) == 0)
      goto LABEL_12;
LABEL_25:
    PB::TextFormatter::format(a2, "startTime", *((double *)this + 9));
    if ((*((_WORD *)this + 46) & 0x800) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_13;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "speed", *((double *)this + 8));
  v5 = *((_WORD *)this + 46);
  if ((v5 & 0x100) != 0)
    goto LABEL_25;
LABEL_12:
  if ((v5 & 0x800) != 0)
LABEL_13:
    PB::TextFormatter::format(a2, "steps", *((_DWORD *)this + 22));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::StrideCalEntry::readFrom(CMMsl::StrideCalEntry *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 46) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_64;
              *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_94;
            case 2u:
              *((_WORD *)this + 46) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_64;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_94;
            case 3u:
              *((_WORD *)this + 46) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_64;
              *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_94;
            case 4u:
              *((_WORD *)this + 46) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_64;
              *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_94;
            case 5u:
              *((_WORD *)this + 46) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_64;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_94;
            case 6u:
              *((_WORD *)this + 46) |= 0x800u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v39 = 0;
                v40 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_99;
                  }
                  v41 = v21++;
                  v42 = *(_BYTE *)(v22 + v41);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0)
                    break;
                  v39 += 7;
                  v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_98:
                    v2 = v41 + 1;
                    goto LABEL_99;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_98;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_99;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_99:
              *((_DWORD *)this + 22) = v25;
              goto LABEL_110;
            case 7u:
              *((_WORD *)this + 46) |= 0x400u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v43 = 0;
                v44 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_104;
                  }
                  v45 = v27++;
                  v46 = *(_BYTE *)(v28 + v45);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0)
                    break;
                  v43 += 7;
                  v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_103:
                    v2 = v45 + 1;
                    goto LABEL_104;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_103;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_104;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_104:
              *((_DWORD *)this + 21) = v31;
              goto LABEL_110;
            case 8u:
              *((_WORD *)this + 46) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_64;
              *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_94;
            case 9u:
              *((_WORD *)this + 46) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_64;
              *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_94;
            case 0xAu:
              *((_WORD *)this + 46) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_64;
              *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_94;
            case 0xBu:
              *((_WORD *)this + 46) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_94:
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_64:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_110;
            case 0xCu:
              *((_WORD *)this + 46) |= 0x200u;
              v33 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_109;
                  }
                  v49 = v33++;
                  v50 = *(_BYTE *)(v34 + v49);
                  *((_QWORD *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_108:
                    v2 = v49 + 1;
                    goto LABEL_109;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v37) = 0;
                goto LABEL_108;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)a2 + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_109;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_109:
              *((_DWORD *)this + 20) = v37;
LABEL_110:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_110;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::StrideCalEntry::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 92);
  if ((v4 & 0x100) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 72), 1u);
    v4 = *(_WORD *)(v3 + 92);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 3u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 4u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x800) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 5u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x800) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 88), 6u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 84), 7u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 8u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 9u);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_11:
    if ((v4 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 0xAu);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x40) == 0)
  {
LABEL_12:
    if ((v4 & 0x200) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 80), 0xCu);
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 0xBu);
  if ((*(_WORD *)(v3 + 92) & 0x200) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 80), 0xCu);
  return this;
}

uint64_t CMMsl::StrideCalEntry::hash_value(CMMsl::StrideCalEntry *this)
{
  __int16 v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;

  v1 = *((_WORD *)this + 46);
  if ((v1 & 0x100) == 0)
  {
    v2 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_3;
LABEL_33:
    v3 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_6;
LABEL_34:
    v4 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_9;
LABEL_35:
    v5 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_12;
LABEL_36:
    v6 = 0.0;
    if ((*((_WORD *)this + 46) & 0x800) != 0)
      goto LABEL_15;
    goto LABEL_37;
  }
  v2 = *((double *)this + 9);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_33;
LABEL_3:
  v3 = *((double *)this + 2);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_34;
LABEL_6:
  v4 = *((double *)this + 4);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_35;
LABEL_9:
  v5 = *((double *)this + 5);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_36;
LABEL_12:
  v6 = *((double *)this + 1);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((*((_WORD *)this + 46) & 0x800) != 0)
  {
LABEL_15:
    v7 = *((int *)this + 22);
    if ((*((_WORD *)this + 46) & 0x400) != 0)
      goto LABEL_16;
    goto LABEL_38;
  }
LABEL_37:
  v7 = 0;
  if ((*((_WORD *)this + 46) & 0x400) != 0)
  {
LABEL_16:
    v8 = *((int *)this + 21);
    if ((v1 & 0x80) != 0)
      goto LABEL_17;
LABEL_39:
    v9 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_20;
LABEL_40:
    v10 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_23;
LABEL_41:
    v11 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_26;
    goto LABEL_42;
  }
LABEL_38:
  v8 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_39;
LABEL_17:
  v9 = *((double *)this + 8);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_40;
LABEL_20:
  v10 = *((double *)this + 6);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_41;
LABEL_23:
  v11 = *((double *)this + 3);
  if (v11 == 0.0)
    v11 = 0.0;
  if ((v1 & 0x40) != 0)
  {
LABEL_26:
    v12 = *((double *)this + 7);
    if (v12 == 0.0)
      v12 = 0.0;
    if ((*((_WORD *)this + 46) & 0x200) != 0)
      goto LABEL_29;
LABEL_43:
    v13 = 0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ v7 ^ v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ v13;
  }
LABEL_42:
  v12 = 0.0;
  if ((*((_WORD *)this + 46) & 0x200) == 0)
    goto LABEL_43;
LABEL_29:
  v13 = *((int *)this + 20);
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ v7 ^ v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ v13;
}

void CMMsl::SubStats::~SubStats(CMMsl::SubStats *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::SubStats::SubStats(CMMsl::SubStats *this, const CMMsl::SubStats *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  float result;
  char v7;
  int v8;
  int v9;

  *(_QWORD *)this = off_100354C08;
  *((_DWORD *)this + 14) = 0;
  v2 = *((_WORD *)a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_WORD *)this + 28) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_WORD *)a2 + 28);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 8);
    v3 |= 0x20u;
    *((_WORD *)this + 28) = v3;
    *((_DWORD *)this + 8) = v5;
    v2 = *((_WORD *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    result = *((float *)a2 + 5);
    v3 |= 4u;
    *((_WORD *)this + 28) = v3;
    *((float *)this + 5) = result;
    v2 = *((_WORD *)a2 + 28);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  result = *((float *)a2 + 7);
  v3 |= 0x10u;
  *((_WORD *)this + 28) = v3;
  *((float *)this + 7) = result;
  v2 = *((_WORD *)a2 + 28);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  result = *((float *)a2 + 6);
  v3 |= 8u;
  *((_WORD *)this + 28) = v3;
  *((float *)this + 6) = result;
  v2 = *((_WORD *)a2 + 28);
  if ((v2 & 0x200) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  result = *((float *)a2 + 12);
  v3 |= 0x200u;
  *((_WORD *)this + 28) = v3;
  *((float *)this + 12) = result;
  v2 = *((_WORD *)a2 + 28);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  result = *((float *)a2 + 10);
  v3 |= 0x80u;
  *((_WORD *)this + 28) = v3;
  *((float *)this + 10) = result;
  v2 = *((_WORD *)a2 + 28);
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  v7 = *((_BYTE *)a2 + 52);
  v3 |= 0x400u;
  *((_WORD *)this + 28) = v3;
  *((_BYTE *)this + 52) = v7;
  v2 = *((_WORD *)a2 + 28);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  v8 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *((_WORD *)this + 28) = v3;
  *((_DWORD *)this + 4) = v8;
  v2 = *((_WORD *)a2 + 28);
  if ((v2 & 0x100) == 0)
  {
LABEL_14:
    if ((v2 & 0x40) == 0)
      return result;
LABEL_24:
    result = *((float *)a2 + 9);
    *((_WORD *)this + 28) = v3 | 0x40;
    *((float *)this + 9) = result;
    return result;
  }
LABEL_23:
  v9 = *((_DWORD *)a2 + 11);
  v3 |= 0x100u;
  *((_WORD *)this + 28) = v3;
  *((_DWORD *)this + 11) = v9;
  if ((*((_WORD *)a2 + 28) & 0x40) != 0)
    goto LABEL_24;
  return result;
}

CMMsl *CMMsl::SubStats::operator=(CMMsl *a1, const CMMsl::SubStats *a2)
{
  CMMsl::SubStats *v3;
  _BYTE v5[64];

  if (a1 != a2)
  {
    CMMsl::SubStats::SubStats((CMMsl::SubStats *)v5, a2);
    CMMsl::swap(a1, (CMMsl::SubStats *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::SubStats *a2, CMMsl::SubStats *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  float result;

  v3 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  v5 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v5;
  v6 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v6;
  v7 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v7;
  v8 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v8;
  v9 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v9;
  LOBYTE(v4) = *((_BYTE *)this + 52);
  *((_BYTE *)this + 52) = *((_BYTE *)a2 + 52);
  *((_BYTE *)a2 + 52) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  result = *((float *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((float *)a2 + 9) = result;
  return result;
}

float CMMsl::SubStats::SubStats(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100354C08;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  return result;
}

CMMsl *CMMsl::SubStats::operator=(CMMsl *this, uint64_t a2, CMMsl::SubStats *a3)
{
  uint64_t v4;
  _QWORD v6[2];
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  char v14;
  int v15;

  if (this != (CMMsl *)a2)
  {
    v15 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a2 + 56) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v6[0] = off_100354C08;
    v6[1] = v4;
    v10 = *(_DWORD *)(a2 + 32);
    v9 = *(_DWORD *)(a2 + 28);
    v8 = *(_QWORD *)(a2 + 20);
    v13 = *(_DWORD *)(a2 + 48);
    v14 = *(_BYTE *)(a2 + 52);
    v7 = *(_DWORD *)(a2 + 16);
    v12 = *(_DWORD *)(a2 + 44);
    v11 = *(_QWORD *)(a2 + 36);
    CMMsl::swap(this, (CMMsl::SubStats *)v6, a3);
    PB::Base::~Base((PB::Base *)v6);
  }
  return this;
}

uint64_t CMMsl::SubStats::formatText(CMMsl::SubStats *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "classifierCall", *((_DWORD *)this + 4));
    v5 = *((_WORD *)this + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "featureSlope", *((float *)this + 5));
  v5 = *((_WORD *)this + 28);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "maxAccel", *((float *)this + 6));
  v5 = *((_WORD *)this + 28);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "maxMinPressure", *((float *)this + 7));
  v5 = *((_WORD *)this + 28);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "model", *((_DWORD *)this + 8));
  v5 = *((_WORD *)this + 28);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "sCal", *((float *)this + 9));
  v5 = *((_WORD *)this + 28);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "slopeNxCorr", *((float *)this + 10));
  v5 = *((_WORD *)this + 28);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 1) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 11));
  v5 = *((_WORD *)this + 28);
  if ((v5 & 1) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(a2, "xCorr", *((float *)this + 12));
    if ((*((_WORD *)this + 28) & 0x400) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 1));
  v5 = *((_WORD *)this + 28);
  if ((v5 & 0x200) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x400) != 0)
LABEL_12:
    PB::TextFormatter::format(a2, "zoh", *((_BYTE *)this + 52));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SubStats::readFrom(CMMsl::SubStats *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 28) |= 1u;
              v20 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v21 = *(_QWORD *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_108;
                  }
                  v49 = v20++;
                  v50 = *(_BYTE *)(v21 + v49);
                  *((_QWORD *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_107;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v24 = 0;
LABEL_107:
                v2 = v49 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)a2 + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_108;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_108:
              *((_QWORD *)this + 1) = v24;
              goto LABEL_124;
            case 2u:
              *((_WORD *)this + 28) |= 0x20u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_113;
                  }
                  v53 = v27++;
                  v54 = *(_BYTE *)(v28 + v53);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_112:
                    v2 = v53 + 1;
                    goto LABEL_113;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_112;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_113;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_113:
              *((_DWORD *)this + 8) = v31;
              goto LABEL_124;
            case 3u:
              *((_WORD *)this + 28) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_71;
              *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_103;
            case 4u:
              *((_WORD *)this + 28) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_71;
              *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_103;
            case 5u:
              *((_WORD *)this + 28) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_71;
              *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_103;
            case 6u:
              *((_WORD *)this + 28) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_71;
              *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_103;
            case 7u:
              *((_WORD *)this + 28) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_71;
              *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_103;
            case 8u:
              *((_WORD *)this + 28) |= 0x400u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v34 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v34 = v33 != 0;
              }
              *((_BYTE *)this + 52) = v34;
              goto LABEL_124;
            case 9u:
              *((_WORD *)this + 28) |= 2u;
              v35 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v36 = *(_QWORD *)a2;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                v55 = 0;
                v56 = 0;
                v39 = 0;
                if (v2 <= v35)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_118;
                  }
                  v57 = v35++;
                  v58 = *(_BYTE *)(v36 + v57);
                  *((_QWORD *)a2 + 1) = v35;
                  v39 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0)
                    break;
                  v55 += 7;
                  v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_117:
                    v2 = v57 + 1;
                    goto LABEL_118;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v39) = 0;
                goto LABEL_117;
              }
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v2 = v35 + 1;
                *((_QWORD *)a2 + 1) = v35 + 1;
                v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0)
                  goto LABEL_118;
                v37 += 7;
                v35 = v2;
                v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_118:
              *((_DWORD *)this + 4) = v39;
              goto LABEL_124;
            case 0xAu:
              *((_WORD *)this + 28) |= 0x100u;
              v41 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v42 = *(_QWORD *)a2;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v45 = 0;
                if (v2 <= v41)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_123;
                  }
                  v61 = v41++;
                  v62 = *(_BYTE *)(v42 + v61);
                  *((_QWORD *)a2 + 1) = v41;
                  v45 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_122:
                    v2 = v61 + 1;
                    goto LABEL_123;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v45) = 0;
                goto LABEL_122;
              }
              v43 = 0;
              v44 = 0;
              v45 = 0;
              do
              {
                v2 = v41 + 1;
                *((_QWORD *)a2 + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0)
                  goto LABEL_123;
                v43 += 7;
                v41 = v2;
                v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_123:
              *((_DWORD *)this + 11) = v45;
LABEL_124:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xBu:
              *((_WORD *)this + 28) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_103:
                v2 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_71:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_124;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_124;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::SubStats::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 56);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 8), 1u);
    v4 = *(_WORD *)(v3 + 56);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 2u);
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 3u);
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 4u);
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 5u);
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 6u);
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 7u);
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 52), 8u);
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 9u);
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x40) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 36), 0xBu);
  }
LABEL_22:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 44), 0xAu);
  if ((*(_WORD *)(v3 + 56) & 0x40) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 36), 0xBu);
  return this;
}

uint64_t CMMsl::SubStats::hash_value(CMMsl::SubStats *this)
{
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;

  v1 = *((_WORD *)this + 28);
  if ((v1 & 1) != 0)
  {
    v2 = *((_QWORD *)this + 1);
    if ((v1 & 0x20) != 0)
    {
LABEL_3:
      v3 = *((int *)this + 8);
      if ((v1 & 4) != 0)
        goto LABEL_4;
LABEL_27:
      v5 = 0;
      if ((v1 & 0x10) != 0)
        goto LABEL_7;
LABEL_28:
      v7 = 0;
      if ((v1 & 8) != 0)
        goto LABEL_10;
LABEL_29:
      v9 = 0;
      if ((*((_WORD *)this + 28) & 0x200) != 0)
        goto LABEL_13;
LABEL_30:
      v11 = 0;
      if ((v1 & 0x80) != 0)
        goto LABEL_16;
LABEL_31:
      v13 = 0;
      if ((*((_WORD *)this + 28) & 0x400) != 0)
        goto LABEL_19;
      goto LABEL_32;
    }
  }
  else
  {
    v2 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_27;
LABEL_4:
  v4 = *((float *)this + 5);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_28;
LABEL_7:
  v6 = *((float *)this + 7);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_29;
LABEL_10:
  v8 = *((float *)this + 6);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  if ((*((_WORD *)this + 28) & 0x200) == 0)
    goto LABEL_30;
LABEL_13:
  v10 = *((float *)this + 12);
  v11 = LODWORD(v10);
  if (v10 == 0.0)
    v11 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_31;
LABEL_16:
  v12 = *((float *)this + 10);
  v13 = LODWORD(v12);
  if (v12 == 0.0)
    v13 = 0;
  if ((*((_WORD *)this + 28) & 0x400) != 0)
  {
LABEL_19:
    v14 = *((unsigned __int8 *)this + 52);
    if ((v1 & 2) != 0)
      goto LABEL_20;
    goto LABEL_33;
  }
LABEL_32:
  v14 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_20:
    v15 = *((int *)this + 4);
    if ((*((_WORD *)this + 28) & 0x100) != 0)
      goto LABEL_21;
    goto LABEL_34;
  }
LABEL_33:
  v15 = 0;
  if ((*((_WORD *)this + 28) & 0x100) != 0)
  {
LABEL_21:
    v16 = *((unsigned int *)this + 11);
    if ((v1 & 0x40) != 0)
      goto LABEL_22;
LABEL_35:
    v18 = 0;
    return v3 ^ v2 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v14 ^ v15 ^ v16 ^ v18;
  }
LABEL_34:
  v16 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_35;
LABEL_22:
  v17 = *((float *)this + 9);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  return v3 ^ v2 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v14 ^ v15 ^ v16 ^ v18;
}

