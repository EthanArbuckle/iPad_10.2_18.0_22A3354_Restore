void CMMsl::SwingDoTCandidate::~SwingDoTCandidate(CMMsl::SwingDoTCandidate *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::SwingDoTCandidate::SwingDoTCandidate(CMMsl::SwingDoTCandidate *this, const CMMsl::SwingDoTCandidate *a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)this = off_100354C40;
  *((_DWORD *)this + 8) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 8) != 0)
  {
    LODWORD(result) = *((_DWORD *)a2 + 7);
    v3 = 8;
    *((_BYTE *)this + 32) = 8;
    *((_DWORD *)this + 7) = LODWORD(result);
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *((_BYTE *)this + 32) = v3;
    *((_DWORD *)this + 6) = LODWORD(result);
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0)
      return result;
LABEL_10:
    result = *((double *)a2 + 2);
    *((_BYTE *)this + 32) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
  result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_BYTE *)this + 32) = v3;
  *((double *)this + 1) = result;
  if ((*((_BYTE *)a2 + 32) & 2) != 0)
    goto LABEL_10;
  return result;
}

uint64_t CMMsl::SwingDoTCandidate::operator=(uint64_t a1, const CMMsl::SwingDoTCandidate *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  uint64_t v9;
  int v10;

  if ((const CMMsl::SwingDoTCandidate *)a1 != a2)
  {
    CMMsl::SwingDoTCandidate::SwingDoTCandidate((CMMsl::SwingDoTCandidate *)v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::SwingDoTCandidate *a2, CMMsl::SwingDoTCandidate *a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  double result;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  v5 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::SwingDoTCandidate::SwingDoTCandidate(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100354C40;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100354C40;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::SwingDoTCandidate::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  void (**v8)(CMMsl::SwingDoTCandidate *__hidden);
  __int128 v9;
  uint64_t v10;
  int v11;

  if (a1 != a2)
  {
    v8 = off_100354C40;
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v11 = *(_DWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    v9 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::SwingDoTCandidate::formatText(CMMsl::SwingDoTCandidate *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "dirAngleRad", *((float *)this + 6));
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "peakTimestamp", *((double *)this + 1));
      if ((*((_BYTE *)this + 32) & 2) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "extremaVal", *((float *)this + 7));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "valleyTimestamp", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::SwingDoTCandidate::readFrom(CMMsl::SwingDoTCandidate *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 32) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_36;
          *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_30;
        case 2u:
          *((_BYTE *)this + 32) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_36;
          *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_30:
          v2 = *((_QWORD *)a2 + 1) + 4;
          goto LABEL_39;
        case 3u:
          *((_BYTE *)this + 32) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_36;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_38;
        case 4u:
          *((_BYTE *)this + 32) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_38:
            v2 = *((_QWORD *)a2 + 1) + 8;
LABEL_39:
            *((_QWORD *)a2 + 1) = v2;
          }
          else
          {
LABEL_36:
            *((_BYTE *)a2 + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SwingDoTCandidate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 28), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 16), 4u);
  }
LABEL_8:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 3u);
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16), 4u);
  return this;
}

uint64_t CMMsl::SwingDoTCandidate::hash_value(CMMsl::SwingDoTCandidate *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  double v4;
  double v5;
  float v6;

  if ((*((_BYTE *)this + 32) & 8) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_3;
LABEL_15:
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 1) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v6 = *((float *)this + 7);
  v1 = LODWORD(v6);
  if (v6 == 0.0)
    v1 = 0;
  if ((*((_BYTE *)this + 32) & 4) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((float *)this + 6);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 32) & 1) != 0)
  {
LABEL_6:
    v4 = *((double *)this + 1);
    if (v4 == 0.0)
      v4 = 0.0;
    if ((*((_BYTE *)this + 32) & 2) != 0)
      goto LABEL_9;
LABEL_17:
    v5 = 0.0;
    return v3 ^ v1 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5;
  }
LABEL_16:
  v4 = 0.0;
  if ((*((_BYTE *)this + 32) & 2) == 0)
    goto LABEL_17;
LABEL_9:
  v5 = *((double *)this + 2);
  if (v5 == 0.0)
    v5 = 0.0;
  return v3 ^ v1 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5;
}

void CMMsl::TapAccept::~TapAccept(CMMsl::TapAccept *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::TapAccept::TapAccept(uint64_t this, const CMMsl::TapAccept *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;

  *(_QWORD *)this = off_100354C78;
  *(_DWORD *)(this + 36) = -1;
  *(_DWORD *)(this + 44) = 0;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 2) != 0)
  {
    v4 = *((_QWORD *)a2 + 2);
    v3 = 2;
    *(_BYTE *)(this + 44) = 2;
    *(_QWORD *)(this + 16) = v4;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 44) & 4) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *(_BYTE *)(this + 44) = v3;
    *(_DWORD *)(this + 24) = v5;
    v2 = *((_BYTE *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    v6 = *((_DWORD *)a2 + 9);
    v3 |= 0x20u;
    *(_BYTE *)(this + 44) = v3;
    *(_DWORD *)(this + 36) = v6;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *(_BYTE *)(this + 44) = v3;
  *(_DWORD *)(this + 32) = v7;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  v8 = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *(_BYTE *)(this + 44) = v3;
  *(_DWORD *)(this + 28) = v8;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 1) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      return this;
LABEL_16:
    v10 = *((_DWORD *)a2 + 10);
    *(_BYTE *)(this + 44) = v3 | 0x40;
    *(_DWORD *)(this + 40) = v10;
    return this;
  }
LABEL_15:
  v9 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_BYTE *)(this + 44) = v3;
  *(_QWORD *)(this + 8) = v9;
  if ((*((_BYTE *)a2 + 44) & 0x40) != 0)
    goto LABEL_16;
  return this;
}

uint64_t CMMsl::TapAccept::operator=(uint64_t a1, const CMMsl::TapAccept *a2)
{
  int v3;
  int v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v8;
  __int128 v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  if ((const CMMsl::TapAccept *)a1 != a2)
  {
    CMMsl::TapAccept::TapAccept((uint64_t)&v8, a2);
    v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v13;
    v13 = v3;
    v4 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    v10 = v4;
    v5 = *(_QWORD *)(a1 + 28);
    *(_QWORD *)(a1 + 28) = v11;
    v11 = v5;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v6;
    *(_QWORD *)&v6 = *(_QWORD *)(a1 + 36);
    *(_QWORD *)(a1 + 36) = v12;
    v12 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::TapAccept *a2, CMMsl::TapAccept *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  double result;
  uint64_t v8;

  v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  result = *(double *)((char *)a2 + 36);
  v8 = *(_QWORD *)((char *)this + 36);
  *(double *)((char *)this + 36) = result;
  *(_QWORD *)((char *)a2 + 36) = v8;
  return result;
}

double CMMsl::TapAccept::TapAccept(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100354C78;
  *(_DWORD *)(a1 + 36) = -1;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 36);
  *(double *)(a1 + 36) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100354C78;
  *(_DWORD *)(a1 + 36) = -1;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 36);
  *(double *)(a1 + 36) = result;
  return result;
}

uint64_t CMMsl::TapAccept::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  void (**v9)(CMMsl::TapAccept *__hidden);
  __int128 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  if (a1 != a2)
  {
    v9 = off_100354C78;
    v3 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a2 + 44) = 0;
    v4 = *(_DWORD *)(a2 + 24);
    v14 = *(_DWORD *)(a1 + 44);
    v11 = *(_DWORD *)(a1 + 24);
    v5 = *(_QWORD *)(a1 + 28);
    *(_QWORD *)(a1 + 28) = *(_QWORD *)(a2 + 28);
    v12 = v5;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    v10 = v6;
    *(_QWORD *)&v6 = *(_QWORD *)(a1 + 36);
    v7 = *(_QWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 24) = v4;
    *(_DWORD *)(a1 + 44) = v3;
    *(_QWORD *)(a1 + 36) = v7;
    v13 = v6;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::TapAccept::formatText(CMMsl::TapAccept *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 6));
    v5 = *((_BYTE *)this + 44);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*((_BYTE *)this + 44) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "peakHalfWidth", *((float *)this + 7));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "peakMagnitude", *((float *)this + 8));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "peakTime", *((double *)this + 1));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(a2, "tapCounter", *((_DWORD *)this + 10));
    if ((*((_BYTE *)this + 44) & 2) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "tapAcceptStatus", *((_DWORD *)this + 9));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 0x40) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 2) != 0)
LABEL_8:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::TapAccept::readFrom(CMMsl::TapAccept *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 44) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_50;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_80;
            case 2u:
              *((_BYTE *)this + 44) |= 4u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v39 = 0;
                v40 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_86;
                  }
                  v41 = v21++;
                  v42 = *(_BYTE *)(v22 + v41);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0)
                    break;
                  v39 += 7;
                  v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_85:
                    v2 = v41 + 1;
                    goto LABEL_86;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_85;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_86;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_86:
              *((_DWORD *)this + 6) = v25;
              goto LABEL_97;
            case 3u:
              *((_BYTE *)this + 44) |= 0x20u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v43 = 0;
                v44 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_91;
                  }
                  v45 = v27++;
                  v46 = *(_BYTE *)(v28 + v45);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0)
                    break;
                  v43 += 7;
                  v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_90:
                    v2 = v45 + 1;
                    goto LABEL_91;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_90;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_91;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_91:
              *((_DWORD *)this + 9) = v31;
              goto LABEL_97;
            case 4u:
              *((_BYTE *)this + 44) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_50;
              *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_47;
            case 5u:
              *((_BYTE *)this + 44) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_50;
              *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_47:
              v2 = *((_QWORD *)a2 + 1) + 4;
              goto LABEL_81;
            case 6u:
              *((_BYTE *)this + 44) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_80:
                v2 = *((_QWORD *)a2 + 1) + 8;
LABEL_81:
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_50:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_97;
            case 7u:
              *((_BYTE *)this + 44) |= 0x40u;
              v33 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_96;
                  }
                  v49 = v33++;
                  v50 = *(_BYTE *)(v34 + v49);
                  *((_QWORD *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_95:
                    v2 = v49 + 1;
                    goto LABEL_96;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v37) = 0;
                goto LABEL_95;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)a2 + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_96;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_96:
              *((_DWORD *)this + 10) = v37;
LABEL_97:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_97;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::TapAccept::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 44);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(this + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 36), 3u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 4u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 5u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 1) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 7u);
  }
LABEL_14:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 6u);
  if ((*(_BYTE *)(v3 + 44) & 0x40) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 7u);
  return this;
}

uint64_t CMMsl::TapAccept::hash_value(CMMsl::TapAccept *this)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  double v8;
  uint64_t v9;

  if ((*((_BYTE *)this + 44) & 2) != 0)
  {
    v1 = *((double *)this + 2);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 44) & 4) != 0)
    {
LABEL_3:
      v2 = *((unsigned int *)this + 6);
      if ((*((_BYTE *)this + 44) & 0x20) != 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 44) & 4) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 44) & 0x20) != 0)
  {
LABEL_4:
    v3 = *((int *)this + 9);
    if ((*((_BYTE *)this + 44) & 0x10) != 0)
      goto LABEL_5;
LABEL_20:
    v5 = 0;
    if ((*((_BYTE *)this + 44) & 8) != 0)
      goto LABEL_8;
LABEL_21:
    v7 = 0;
    if ((*((_BYTE *)this + 44) & 1) != 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_19:
  v3 = 0;
  if ((*((_BYTE *)this + 44) & 0x10) == 0)
    goto LABEL_20;
LABEL_5:
  v4 = *((float *)this + 8);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((*((_BYTE *)this + 44) & 8) == 0)
    goto LABEL_21;
LABEL_8:
  v6 = *((float *)this + 7);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((*((_BYTE *)this + 44) & 1) != 0)
  {
LABEL_11:
    v8 = *((double *)this + 1);
    if (v8 == 0.0)
      v8 = 0.0;
    if ((*((_BYTE *)this + 44) & 0x40) != 0)
      goto LABEL_14;
LABEL_23:
    v9 = 0;
    return v2 ^ *(_QWORD *)&v1 ^ v3 ^ v5 ^ v7 ^ *(_QWORD *)&v8 ^ v9;
  }
LABEL_22:
  v8 = 0.0;
  if ((*((_BYTE *)this + 44) & 0x40) == 0)
    goto LABEL_23;
LABEL_14:
  v9 = *((unsigned int *)this + 10);
  return v2 ^ *(_QWORD *)&v1 ^ v3 ^ v5 ^ v7 ^ *(_QWORD *)&v8 ^ v9;
}

void CMMsl::TapDetect::~TapDetect(CMMsl::TapDetect *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::TapDetect::TapDetect(CMMsl::TapDetect *this, const CMMsl::TapDetect *a2)
{
  double result;
  __int16 v3;
  __int16 v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;

  *(_QWORD *)this = off_100354CB0;
  *((_DWORD *)this + 7) = -2;
  result = NAN;
  *(_OWORD *)((char *)this + 52) = xmmword_1002ECB00;
  v3 = *((_WORD *)a2 + 32);
  if ((v3 & 2) != 0)
  {
    result = *((double *)a2 + 2);
    v4 = 2;
    *((_WORD *)this + 32) = 2;
    *((double *)this + 2) = result;
    v3 = *((_WORD *)a2 + 32);
    if ((v3 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v4 = 0;
  if ((v3 & 0x20) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 9);
    v4 |= 0x20u;
    *((_WORD *)this + 32) = v4;
    *((_DWORD *)this + 9) = v5;
    v3 = *((_WORD *)a2 + 32);
  }
LABEL_6:
  if ((v3 & 0x400) != 0)
  {
    v6 = *((_DWORD *)a2 + 14);
    v4 |= 0x400u;
    *((_WORD *)this + 32) = v4;
    *((_DWORD *)this + 14) = v6;
    v3 = *((_WORD *)a2 + 32);
    if ((v3 & 4) == 0)
    {
LABEL_8:
      if ((v3 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_19;
    }
  }
  else if ((v3 & 4) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 6);
  v4 |= 4u;
  *((_WORD *)this + 32) = v4;
  *((_DWORD *)this + 6) = v7;
  v3 = *((_WORD *)a2 + 32);
  if ((v3 & 0x10) == 0)
  {
LABEL_9:
    if ((v3 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  v8 = *((_DWORD *)a2 + 8);
  v4 |= 0x10u;
  *((_WORD *)this + 32) = v4;
  *((_DWORD *)this + 8) = v8;
  v3 = *((_WORD *)a2 + 32);
  if ((v3 & 0x200) == 0)
  {
LABEL_10:
    if ((v3 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  v9 = *((_DWORD *)a2 + 13);
  v4 |= 0x200u;
  *((_WORD *)this + 32) = v4;
  *((_DWORD *)this + 13) = v9;
  v3 = *((_WORD *)a2 + 32);
  if ((v3 & 0x800) == 0)
  {
LABEL_11:
    if ((v3 & 8) == 0)
      goto LABEL_12;
    goto LABEL_22;
  }
LABEL_21:
  v10 = *((_DWORD *)a2 + 15);
  v4 |= 0x800u;
  *((_WORD *)this + 32) = v4;
  *((_DWORD *)this + 15) = v10;
  v3 = *((_WORD *)a2 + 32);
  if ((v3 & 8) == 0)
  {
LABEL_12:
    if ((v3 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_23;
  }
LABEL_22:
  v11 = *((_DWORD *)a2 + 7);
  v4 |= 8u;
  *((_WORD *)this + 32) = v4;
  *((_DWORD *)this + 7) = v11;
  v3 = *((_WORD *)a2 + 32);
  if ((v3 & 0x100) == 0)
  {
LABEL_13:
    if ((v3 & 0x80) == 0)
      goto LABEL_14;
    goto LABEL_24;
  }
LABEL_23:
  LODWORD(result) = *((_DWORD *)a2 + 12);
  v4 |= 0x100u;
  *((_WORD *)this + 32) = v4;
  *((_DWORD *)this + 12) = LODWORD(result);
  v3 = *((_WORD *)a2 + 32);
  if ((v3 & 0x80) == 0)
  {
LABEL_14:
    if ((v3 & 0x40) == 0)
      goto LABEL_15;
    goto LABEL_25;
  }
LABEL_24:
  LODWORD(result) = *((_DWORD *)a2 + 11);
  v4 |= 0x80u;
  *((_WORD *)this + 32) = v4;
  *((_DWORD *)this + 11) = LODWORD(result);
  v3 = *((_WORD *)a2 + 32);
  if ((v3 & 0x40) == 0)
  {
LABEL_15:
    if ((v3 & 1) == 0)
      return result;
LABEL_26:
    result = *((double *)a2 + 1);
    *((_WORD *)this + 32) = v4 | 1;
    *((double *)this + 1) = result;
    return result;
  }
LABEL_25:
  LODWORD(result) = *((_DWORD *)a2 + 10);
  v4 |= 0x40u;
  *((_WORD *)this + 32) = v4;
  *((_DWORD *)this + 10) = LODWORD(result);
  if ((*((_WORD *)a2 + 32) & 1) != 0)
    goto LABEL_26;
  return result;
}

CMMsl *CMMsl::TapDetect::operator=(CMMsl *a1, const CMMsl::TapDetect *a2)
{
  CMMsl::TapDetect *v3;
  _BYTE v5[72];

  if (a1 != a2)
  {
    CMMsl::TapDetect::TapDetect((CMMsl::TapDetect *)v5, a2);
    CMMsl::swap(a1, (CMMsl::TapDetect *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::TapDetect *a2, CMMsl::TapDetect *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  double result;

  v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v5;
  v6 = *(_QWORD *)((char *)this + 52);
  *(_QWORD *)((char *)this + 52) = *(_QWORD *)((char *)a2 + 52);
  *(_QWORD *)((char *)a2 + 52) = v6;
  v7 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v7;
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  v9 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v9;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::TapDetect::TapDetect(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100354CB0;
  *(_DWORD *)(a1 + 28) = -2;
  *(_QWORD *)(a1 + 52) = 0x100000001;
  *(_DWORD *)(a1 + 60) = -2;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 52) = *(_QWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

CMMsl *CMMsl::TapDetect::operator=(CMMsl *this, uint64_t a2, CMMsl::TapDetect *a3)
{
  __int128 v4;
  __int128 v5;
  void (**v7)(CMMsl::TapDetect *__hidden);
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  __int128 v12;

  if (this != (CMMsl *)a2)
  {
    v7 = off_100354CB0;
    v4 = *(_OWORD *)(a2 + 52);
    *(_DWORD *)(a2 + 64) = 0;
    v12 = v4;
    v5 = *(_OWORD *)(a2 + 24);
    v11 = *(_DWORD *)(a2 + 48);
    v10 = *(_QWORD *)(a2 + 40);
    v8 = *(_OWORD *)(a2 + 8);
    v9 = v5;
    CMMsl::swap(this, (CMMsl::TapDetect *)&v7, a3);
    PB::Base::~Base((PB::Base *)&v7);
  }
  return this;
}

uint64_t CMMsl::TapDetect::formatText(CMMsl::TapDetect *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "axis", *((_DWORD *)this + 6));
    v5 = *((_WORD *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "clippedPeakType", *((_DWORD *)this + 7));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "direction", *((_DWORD *)this + 8));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 9));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "peakHalfWidth", *((float *)this + 10));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "peakMagnitude", *((float *)this + 11));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "peakTime", *((double *)this + 1));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "peakValue", *((float *)this + 12));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "strideDirection", *((_DWORD *)this + 13));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 2) == 0)
      goto LABEL_12;
LABEL_25:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
    if ((*((_WORD *)this + 32) & 0x800) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_13;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "tapDetectStatus", *((_DWORD *)this + 14));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 2) != 0)
    goto LABEL_25;
LABEL_12:
  if ((v5 & 0x800) != 0)
LABEL_13:
    PB::TextFormatter::format(a2, "widthCalculationMethod", *((_DWORD *)this + 15));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::TapDetect::readFrom(CMMsl::TapDetect *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  unint64_t v81;
  char v82;
  char v83;
  unsigned int v84;
  unint64_t v85;
  char v86;
  char v87;
  unsigned int v88;
  unint64_t v89;
  char v90;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 32) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_88;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_139;
            case 2u:
              *((_WORD *)this + 32) |= 0x20u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_145;
                  }
                  v65 = v21++;
                  v66 = *(_BYTE *)(v22 + v65);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_144:
                    v2 = v65 + 1;
                    goto LABEL_145;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_144;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_145;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_145:
              *((_DWORD *)this + 9) = v25;
              goto LABEL_176;
            case 3u:
              *((_WORD *)this + 32) |= 0x400u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v67 = 0;
                v68 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_150;
                  }
                  v69 = v27++;
                  v70 = *(_BYTE *)(v28 + v69);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0)
                    break;
                  v67 += 7;
                  v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_149:
                    v2 = v69 + 1;
                    goto LABEL_150;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_149;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_150;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_150:
              *((_DWORD *)this + 14) = v31;
              goto LABEL_176;
            case 4u:
              *((_WORD *)this + 32) |= 4u;
              v33 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v71 = 0;
                v72 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_155;
                  }
                  v73 = v33++;
                  v74 = *(_BYTE *)(v34 + v73);
                  *((_QWORD *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0)
                    break;
                  v71 += 7;
                  v14 = v72++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_154:
                    v2 = v73 + 1;
                    goto LABEL_155;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v37) = 0;
                goto LABEL_154;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)a2 + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_155;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_155:
              *((_DWORD *)this + 6) = v37;
              goto LABEL_176;
            case 5u:
              *((_WORD *)this + 32) |= 0x10u;
              v39 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v40 = *(_QWORD *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v75 = 0;
                v76 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_160;
                  }
                  v77 = v39++;
                  v78 = *(_BYTE *)(v40 + v77);
                  *((_QWORD *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0)
                    break;
                  v75 += 7;
                  v14 = v76++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_159:
                    v2 = v77 + 1;
                    goto LABEL_160;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v43) = 0;
                goto LABEL_159;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)a2 + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_160;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_160:
              *((_DWORD *)this + 8) = v43;
              goto LABEL_176;
            case 6u:
              *((_WORD *)this + 32) |= 0x200u;
              v45 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v46 = *(_QWORD *)a2;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v79 = 0;
                v80 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_165;
                  }
                  v81 = v45++;
                  v82 = *(_BYTE *)(v46 + v81);
                  *((_QWORD *)a2 + 1) = v45;
                  v49 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0)
                    break;
                  v79 += 7;
                  v14 = v80++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_164:
                    v2 = v81 + 1;
                    goto LABEL_165;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v49) = 0;
                goto LABEL_164;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)a2 + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_165;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_165:
              *((_DWORD *)this + 13) = v49;
              goto LABEL_176;
            case 7u:
              *((_WORD *)this + 32) |= 0x800u;
              v51 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v52 = *(_QWORD *)a2;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                v83 = 0;
                v84 = 0;
                v55 = 0;
                if (v2 <= v51)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_170;
                  }
                  v85 = v51++;
                  v86 = *(_BYTE *)(v52 + v85);
                  *((_QWORD *)a2 + 1) = v51;
                  v55 |= (unint64_t)(v86 & 0x7F) << v83;
                  if ((v86 & 0x80) == 0)
                    break;
                  v83 += 7;
                  v14 = v84++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_169:
                    v2 = v85 + 1;
                    goto LABEL_170;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v55) = 0;
                goto LABEL_169;
              }
              v53 = 0;
              v54 = 0;
              v55 = 0;
              do
              {
                v2 = v51 + 1;
                *((_QWORD *)a2 + 1) = v51 + 1;
                v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0)
                  goto LABEL_170;
                v53 += 7;
                v51 = v2;
                v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_170:
              *((_DWORD *)this + 15) = v55;
              goto LABEL_176;
            case 8u:
              *((_WORD *)this + 32) |= 8u;
              v57 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v58 = *(_QWORD *)a2;
              if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
              {
                v87 = 0;
                v88 = 0;
                v61 = 0;
                if (v2 <= v57)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v57)
                  {
                    LODWORD(v61) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_175;
                  }
                  v89 = v57++;
                  v90 = *(_BYTE *)(v58 + v89);
                  *((_QWORD *)a2 + 1) = v57;
                  v61 |= (unint64_t)(v90 & 0x7F) << v87;
                  if ((v90 & 0x80) == 0)
                    break;
                  v87 += 7;
                  v14 = v88++ > 8;
                  if (v14)
                  {
                    LODWORD(v61) = 0;
LABEL_174:
                    v2 = v89 + 1;
                    goto LABEL_175;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v61) = 0;
                goto LABEL_174;
              }
              v59 = 0;
              v60 = 0;
              v61 = 0;
              do
              {
                v2 = v57 + 1;
                *((_QWORD *)a2 + 1) = v57 + 1;
                v62 = *(_BYTE *)(v58 + v57);
                v61 |= (unint64_t)(v62 & 0x7F) << v59;
                if ((v62 & 0x80) == 0)
                  goto LABEL_175;
                v59 += 7;
                v57 = v2;
                v14 = v60++ > 8;
              }
              while (!v14);
              LODWORD(v61) = 0;
LABEL_175:
              *((_DWORD *)this + 7) = v61;
LABEL_176:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 9u:
              *((_WORD *)this + 32) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_88;
              *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_85;
            case 0xAu:
              *((_WORD *)this + 32) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_88;
              *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_85;
            case 0xBu:
              *((_WORD *)this + 32) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_88;
              *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_85:
              v2 = *((_QWORD *)a2 + 1) + 4;
              goto LABEL_140;
            case 0xCu:
              *((_WORD *)this + 32) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_139:
                v2 = *((_QWORD *)a2 + 1) + 8;
LABEL_140:
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_88:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_176;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_176;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::TapDetect::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 64);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
    v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 36), 2u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 56), 3u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 4u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 5u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 52), 6u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 60), 7u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 8u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 9u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_11:
    if ((v4 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 0xAu);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_12:
    if ((v4 & 1) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 8), 0xCu);
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 0xBu);
  if ((*(_WORD *)(v3 + 64) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8), 0xCu);
  return this;
}

uint64_t CMMsl::TapDetect::hash_value(CMMsl::TapDetect *this)
{
  __int16 v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  double v16;

  v1 = *((_WORD *)this + 32);
  if ((v1 & 2) != 0)
  {
    v2 = *((double *)this + 2);
    if (v2 == 0.0)
      v2 = 0.0;
    if ((v1 & 0x20) != 0)
    {
LABEL_3:
      v3 = *((unsigned int *)this + 9);
      if ((*((_WORD *)this + 32) & 0x400) != 0)
        goto LABEL_4;
      goto LABEL_26;
    }
  }
  else
  {
    v2 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((*((_WORD *)this + 32) & 0x400) != 0)
  {
LABEL_4:
    v4 = *((int *)this + 14);
    if ((v1 & 4) != 0)
      goto LABEL_5;
    goto LABEL_27;
  }
LABEL_26:
  v4 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_5:
    v5 = *((int *)this + 6);
    if ((v1 & 0x10) != 0)
      goto LABEL_6;
    goto LABEL_28;
  }
LABEL_27:
  v5 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_6:
    v6 = *((int *)this + 8);
    if ((*((_WORD *)this + 32) & 0x200) != 0)
      goto LABEL_7;
    goto LABEL_29;
  }
LABEL_28:
  v6 = 0;
  if ((*((_WORD *)this + 32) & 0x200) != 0)
  {
LABEL_7:
    v7 = *((int *)this + 13);
    if ((*((_WORD *)this + 32) & 0x800) != 0)
      goto LABEL_8;
    goto LABEL_30;
  }
LABEL_29:
  v7 = 0;
  if ((*((_WORD *)this + 32) & 0x800) != 0)
  {
LABEL_8:
    v8 = *((int *)this + 15);
    if ((v1 & 8) != 0)
      goto LABEL_9;
    goto LABEL_31;
  }
LABEL_30:
  v8 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_9:
    v9 = *((int *)this + 7);
    if ((*((_WORD *)this + 32) & 0x100) != 0)
      goto LABEL_10;
LABEL_32:
    v11 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_13;
LABEL_33:
    v13 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_31:
  v9 = 0;
  if ((*((_WORD *)this + 32) & 0x100) == 0)
    goto LABEL_32;
LABEL_10:
  v10 = *((float *)this + 12);
  v11 = LODWORD(v10);
  if (v10 == 0.0)
    v11 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_33;
LABEL_13:
  v12 = *((float *)this + 11);
  v13 = LODWORD(v12);
  if (v12 == 0.0)
    v13 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_16:
    v14 = *((float *)this + 10);
    v15 = LODWORD(v14);
    if (v14 == 0.0)
      v15 = 0;
    if ((v1 & 1) != 0)
      goto LABEL_19;
LABEL_35:
    v16 = 0.0;
    return v3 ^ *(_QWORD *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v11 ^ v13 ^ v15 ^ *(_QWORD *)&v16;
  }
LABEL_34:
  v15 = 0;
  if ((v1 & 1) == 0)
    goto LABEL_35;
LABEL_19:
  v16 = *((double *)this + 1);
  if (v16 == 0.0)
    v16 = 0.0;
  return v3 ^ *(_QWORD *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v11 ^ v13 ^ v15 ^ *(_QWORD *)&v16;
}

void CMMsl::TempestPoCAuxiliaryDeviceMotion::~TempestPoCAuxiliaryDeviceMotion(CMMsl::TempestPoCAuxiliaryDeviceMotion *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_100354CE8;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::TempestPoCAuxiliaryDeviceMotion::~TempestPoCAuxiliaryDeviceMotion(this);
  operator delete();
}

CMMsl::TempestPoCAuxiliaryDeviceMotion *CMMsl::TempestPoCAuxiliaryDeviceMotion::TempestPoCAuxiliaryDeviceMotion(CMMsl::TempestPoCAuxiliaryDeviceMotion *this, const CMMsl::TempestPoCAuxiliaryDeviceMotion *a2)
{
  __int16 v4;
  uint64_t v5;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = off_100354CE8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 26) = 0;
  if (*((_QWORD *)a2 + 10))
    operator new();
  if (this != a2)
    sub_100020CE4((char *)this + 8, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  v4 = *((_WORD *)a2 + 52);
  if ((v4 & 0x80) != 0)
  {
    v7 = *((_DWORD *)a2 + 23);
    *((_WORD *)this + 52) |= 0x80u;
    *((_DWORD *)this + 23) = v7;
    v4 = *((_WORD *)a2 + 52);
    if ((v4 & 0x40) == 0)
    {
LABEL_7:
      if ((v4 & 0x100) == 0)
        goto LABEL_8;
      goto LABEL_19;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_7;
  }
  v8 = *((_DWORD *)a2 + 22);
  *((_WORD *)this + 52) |= 0x40u;
  *((_DWORD *)this + 22) = v8;
  v4 = *((_WORD *)a2 + 52);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  v9 = *((_DWORD *)a2 + 24);
  *((_WORD *)this + 52) |= 0x100u;
  *((_DWORD *)this + 24) = v9;
  v4 = *((_WORD *)a2 + 52);
  if ((v4 & 0x200) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  v10 = *((_DWORD *)a2 + 25);
  *((_WORD *)this + 52) |= 0x200u;
  *((_DWORD *)this + 25) = v10;
  v4 = *((_WORD *)a2 + 52);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  v11 = *((_QWORD *)a2 + 5);
  *((_WORD *)this + 52) |= 2u;
  *((_QWORD *)this + 5) = v11;
  v4 = *((_WORD *)a2 + 52);
  if ((v4 & 4) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_23;
  }
LABEL_22:
  v12 = *((_QWORD *)a2 + 6);
  *((_WORD *)this + 52) |= 4u;
  *((_QWORD *)this + 6) = v12;
  v4 = *((_WORD *)a2 + 52);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_24;
  }
LABEL_23:
  v13 = *((_QWORD *)a2 + 8);
  *((_WORD *)this + 52) |= 0x10u;
  *((_QWORD *)this + 8) = v13;
  v4 = *((_WORD *)a2 + 52);
  if ((v4 & 0x20) == 0)
  {
LABEL_13:
    if ((v4 & 1) == 0)
      goto LABEL_14;
LABEL_25:
    v15 = *((_QWORD *)a2 + 4);
    *((_WORD *)this + 52) |= 1u;
    *((_QWORD *)this + 4) = v15;
    if ((*((_WORD *)a2 + 52) & 8) == 0)
      return this;
    goto LABEL_15;
  }
LABEL_24:
  v14 = *((_QWORD *)a2 + 9);
  *((_WORD *)this + 52) |= 0x20u;
  *((_QWORD *)this + 9) = v14;
  v4 = *((_WORD *)a2 + 52);
  if ((v4 & 1) != 0)
    goto LABEL_25;
LABEL_14:
  if ((v4 & 8) != 0)
  {
LABEL_15:
    v5 = *((_QWORD *)a2 + 7);
    *((_WORD *)this + 52) |= 8u;
    *((_QWORD *)this + 7) = v5;
  }
  return this;
}

CMMsl *CMMsl::TempestPoCAuxiliaryDeviceMotion::operator=(CMMsl *a1, const CMMsl::TempestPoCAuxiliaryDeviceMotion *a2)
{
  CMMsl::TempestPoCAuxiliaryDeviceMotion *v3;
  _BYTE v5[112];

  if (a1 != a2)
  {
    CMMsl::TempestPoCAuxiliaryDeviceMotion::TempestPoCAuxiliaryDeviceMotion((CMMsl::TempestPoCAuxiliaryDeviceMotion *)v5, a2);
    CMMsl::swap(a1, (CMMsl::TempestPoCAuxiliaryDeviceMotion *)v5, v3);
    CMMsl::TempestPoCAuxiliaryDeviceMotion::~TempestPoCAuxiliaryDeviceMotion((CMMsl::TempestPoCAuxiliaryDeviceMotion *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::TempestPoCAuxiliaryDeviceMotion *a2, CMMsl::TempestPoCAuxiliaryDeviceMotion *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double result;

  v3 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v3;
  v4 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v8;
  LODWORD(v7) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v7;
  LODWORD(v7) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v7;
  v9 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v9;
  v10 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v10;
  v11 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v11;
  v12 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v12;
  v13 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v13;
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v14;
  result = *((double *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((double *)a2 + 7) = result;
  return result;
}

uint64_t CMMsl::TempestPoCAuxiliaryDeviceMotion::TempestPoCAuxiliaryDeviceMotion(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = off_100354CE8;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = 0;
  v5 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  v6 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_100239458(v4, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

CMMsl *CMMsl::TempestPoCAuxiliaryDeviceMotion::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::TempestPoCAuxiliaryDeviceMotion *v3;
  _BYTE v5[112];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::TempestPoCAuxiliaryDeviceMotion::TempestPoCAuxiliaryDeviceMotion((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::TempestPoCAuxiliaryDeviceMotion *)v5, v3);
    CMMsl::TempestPoCAuxiliaryDeviceMotion::~TempestPoCAuxiliaryDeviceMotion((CMMsl::TempestPoCAuxiliaryDeviceMotion *)v5);
  }
  return a1;
}

uint64_t CMMsl::TempestPoCAuxiliaryDeviceMotion::formatText(CMMsl::TempestPoCAuxiliaryDeviceMotion *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;
  __int16 v8;
  uint64_t v9;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_WORD *)this + 52) & 1) != 0)
    PB::TextFormatter::format(a2, "auxiliaryIosTimeUncertainty", *((double *)this + 4));
  v5 = (float *)*((_QWORD *)this + 1);
  v6 = (float *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "filteredAcceleration", v7);
  }
  v8 = *((_WORD *)this + 52);
  if ((v8 & 0x40) != 0)
  {
    PB::TextFormatter::format(a2, "quiescentMode", *((_DWORD *)this + 22));
    v8 = *((_WORD *)this + 52);
    if ((v8 & 0x80) == 0)
    {
LABEL_7:
      if ((v8 & 2) == 0)
        goto LABEL_8;
      goto LABEL_21;
    }
  }
  else if ((v8 & 0x80) == 0)
  {
    goto LABEL_7;
  }
  PB::TextFormatter::format(a2, "quiescentNoise", *((float *)this + 23));
  v8 = *((_WORD *)this + 52);
  if ((v8 & 2) == 0)
  {
LABEL_8:
    if ((v8 & 4) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "sensorTimeBeforeAlignment", *((double *)this + 5));
  v8 = *((_WORD *)this + 52);
  if ((v8 & 4) == 0)
  {
LABEL_9:
    if ((v8 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "sentCftime", *((double *)this + 6));
  v8 = *((_WORD *)this + 52);
  if ((v8 & 0x100) == 0)
  {
LABEL_10:
    if ((v8 & 8) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "sequenceNumber", *((_DWORD *)this + 24));
  v8 = *((_WORD *)this + 52);
  if ((v8 & 8) == 0)
  {
LABEL_11:
    if ((v8 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "sourceIosTimeUncertainty", *((double *)this + 7));
  v8 = *((_WORD *)this + 52);
  if ((v8 & 0x10) == 0)
  {
LABEL_12:
    if ((v8 & 0x20) == 0)
      goto LABEL_14;
    goto LABEL_13;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "sourceReceiveCftime", *((double *)this + 8));
  if ((*((_WORD *)this + 52) & 0x20) != 0)
LABEL_13:
    PB::TextFormatter::format(a2, "sourceReceiveSensorTimestamp", *((double *)this + 9));
LABEL_14:
  v9 = *((_QWORD *)this + 10);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, a2, "super");
  if ((*((_WORD *)this + 52) & 0x200) != 0)
    PB::TextFormatter::format(a2, "version", *((float *)this + 25));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::TempestPoCAuxiliaryDeviceMotion::readFrom(CMMsl::TempestPoCAuxiliaryDeviceMotion *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  char *v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  _DWORD *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  _DWORD *v64;
  char v65;
  unsigned int v66;
  unint64_t v67;
  char v68;
  char v69;
  unsigned int v70;
  unint64_t v71;
  char v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  int v80;
  unint64_t v81;
  _BYTE v84[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 8);
    v9 = (char *)this + 24;
    while (1)
    {
      v10 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v16 = v12++ > 8;
        if (v16)
          goto LABEL_20;
      }
LABEL_21:
      v22 = v13 & 7;
      if (v22 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          if (v22 == 2)
          {
            if ((PB::Reader::placeMark(a2, v84) & 1) != 0)
              return 0;
            v23 = *((_QWORD *)a2 + 1);
            v24 = *((_QWORD *)a2 + 2);
            while (v23 < v24 && !*((_BYTE *)a2 + 24))
            {
              v26 = (char *)*((_QWORD *)this + 2);
              v25 = *((_QWORD *)this + 3);
              if ((unint64_t)v26 >= v25)
              {
                v28 = (char *)*v8;
                v29 = (v26 - (_BYTE *)*v8) >> 2;
                v30 = v29 + 1;
                if ((unint64_t)(v29 + 1) >> 62)
                  goto LABEL_145;
                v31 = v25 - (_QWORD)v28;
                if (v31 >> 1 > v30)
                  v30 = v31 >> 1;
                if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
                  v32 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v32 = v30;
                if (v32)
                {
                  v33 = (char *)sub_100020E2C((uint64_t)v9, v32);
                  v28 = (char *)*((_QWORD *)this + 1);
                  v26 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v33 = 0;
                }
                v34 = &v33[4 * v29];
                *(_DWORD *)v34 = 0;
                v27 = v34 + 4;
                while (v26 != v28)
                {
                  v35 = *((_DWORD *)v26 - 1);
                  v26 -= 4;
                  *((_DWORD *)v34 - 1) = v35;
                  v34 -= 4;
                }
                *((_QWORD *)this + 1) = v34;
                *((_QWORD *)this + 2) = v27;
                *((_QWORD *)this + 3) = &v33[4 * v32];
                if (v28)
                  operator delete(v28);
              }
              else
              {
                *(_DWORD *)v26 = 0;
                v27 = v26 + 4;
              }
              *((_QWORD *)this + 2) = v27;
              v36 = *((_QWORD *)a2 + 1);
              if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((_QWORD *)a2 + 2))
              {
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v27 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v36);
              v24 = *((_QWORD *)a2 + 2);
              v23 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v23;
            }
            PB::Reader::recallMark(a2, v84);
          }
          else
          {
            v63 = (char *)*((_QWORD *)this + 2);
            v62 = *((_QWORD *)this + 3);
            if ((unint64_t)v63 >= v62)
            {
              v73 = (char *)*v8;
              v74 = (v63 - (_BYTE *)*v8) >> 2;
              v75 = v74 + 1;
              if ((unint64_t)(v74 + 1) >> 62)
LABEL_145:
                sub_10000D5F8();
              v76 = v62 - (_QWORD)v73;
              if (v76 >> 1 > v75)
                v75 = v76 >> 1;
              if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL)
                v77 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v77 = v75;
              if (v77)
              {
                v78 = (char *)sub_100020E2C((uint64_t)v9, v77);
                v73 = (char *)*((_QWORD *)this + 1);
                v63 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v78 = 0;
              }
              v79 = &v78[4 * v74];
              *(_DWORD *)v79 = 0;
              v64 = v79 + 4;
              while (v63 != v73)
              {
                v80 = *((_DWORD *)v63 - 1);
                v63 -= 4;
                *((_DWORD *)v79 - 1) = v80;
                v79 -= 4;
              }
              *((_QWORD *)this + 1) = v79;
              *((_QWORD *)this + 2) = v64;
              *((_QWORD *)this + 3) = &v78[4 * v77];
              if (v73)
                operator delete(v73);
            }
            else
            {
              *(_DWORD *)v63 = 0;
              v64 = v63 + 4;
            }
            *((_QWORD *)this + 2) = v64;
            v81 = *((_QWORD *)a2 + 1);
            if (v81 <= 0xFFFFFFFFFFFFFFFBLL && v81 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v64 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v81);
LABEL_133:
              v61 = *((_QWORD *)a2 + 1) + 4;
LABEL_134:
              *((_QWORD *)a2 + 1) = v61;
            }
            else
            {
LABEL_131:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_135:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 3u:
          *((_WORD *)this + 52) |= 0x80u;
          v37 = *((_QWORD *)a2 + 1);
          if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_131;
          *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v37);
          goto LABEL_133;
        case 4u:
          *((_WORD *)this + 52) |= 0x40u;
          v38 = *((_QWORD *)a2 + 1);
          v39 = *((_QWORD *)a2 + 2);
          v40 = *(_QWORD *)a2;
          if (v38 <= 0xFFFFFFFFFFFFFFF5 && v38 + 10 <= v39)
          {
            v41 = 0;
            v42 = 0;
            v43 = 0;
            do
            {
              v44 = v38 + 1;
              *((_QWORD *)a2 + 1) = v38 + 1;
              v45 = *(_BYTE *)(v40 + v38);
              v43 |= (unint64_t)(v45 & 0x7F) << v41;
              if ((v45 & 0x80) == 0)
                goto LABEL_118;
              v41 += 7;
              v38 = v44;
              v16 = v42++ > 8;
            }
            while (!v16);
LABEL_98:
            LODWORD(v43) = 0;
            goto LABEL_118;
          }
          v65 = 0;
          v66 = 0;
          v43 = 0;
          if (v39 <= v38)
            v39 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v39 == v38)
            {
              LODWORD(v43) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v67 = v38 + 1;
              v68 = *(_BYTE *)(v40 + v38);
              *((_QWORD *)a2 + 1) = v67;
              v43 |= (unint64_t)(v68 & 0x7F) << v65;
              if (v68 < 0)
              {
                v65 += 7;
                v38 = v67;
                v16 = v66++ > 8;
                if (v16)
                  goto LABEL_98;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v43) = 0;
            }
            break;
          }
LABEL_118:
          *((_DWORD *)this + 22) = v43;
          goto LABEL_135;
        case 5u:
          *((_WORD *)this + 52) |= 0x100u;
          v46 = *((_QWORD *)a2 + 1);
          v47 = *((_QWORD *)a2 + 2);
          v48 = *(_QWORD *)a2;
          if (v46 <= 0xFFFFFFFFFFFFFFF5 && v46 + 10 <= v47)
          {
            v49 = 0;
            v50 = 0;
            v51 = 0;
            do
            {
              v52 = v46 + 1;
              *((_QWORD *)a2 + 1) = v46 + 1;
              v53 = *(_BYTE *)(v48 + v46);
              v51 |= (unint64_t)(v53 & 0x7F) << v49;
              if ((v53 & 0x80) == 0)
                goto LABEL_121;
              v49 += 7;
              v46 = v52;
              v16 = v50++ > 8;
            }
            while (!v16);
LABEL_105:
            LODWORD(v51) = 0;
            goto LABEL_121;
          }
          v69 = 0;
          v70 = 0;
          v51 = 0;
          if (v47 <= v46)
            v47 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v47 == v46)
            {
              LODWORD(v51) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v71 = v46 + 1;
              v72 = *(_BYTE *)(v48 + v46);
              *((_QWORD *)a2 + 1) = v71;
              v51 |= (unint64_t)(v72 & 0x7F) << v69;
              if (v72 < 0)
              {
                v69 += 7;
                v46 = v71;
                v16 = v70++ > 8;
                if (v16)
                  goto LABEL_105;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v51) = 0;
            }
            break;
          }
LABEL_121:
          *((_DWORD *)this + 24) = v51;
          goto LABEL_135;
        case 6u:
          *((_WORD *)this + 52) |= 0x200u;
          v54 = *((_QWORD *)a2 + 1);
          if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_131;
          *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v54);
          goto LABEL_133;
        case 7u:
          *((_WORD *)this + 52) |= 2u;
          v55 = *((_QWORD *)a2 + 1);
          if (v55 > 0xFFFFFFFFFFFFFFF7 || v55 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_131;
          *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v55);
          goto LABEL_89;
        case 8u:
          *((_WORD *)this + 52) |= 4u;
          v56 = *((_QWORD *)a2 + 1);
          if (v56 > 0xFFFFFFFFFFFFFFF7 || v56 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_131;
          *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v56);
          goto LABEL_89;
        case 9u:
          *((_WORD *)this + 52) |= 0x10u;
          v57 = *((_QWORD *)a2 + 1);
          if (v57 > 0xFFFFFFFFFFFFFFF7 || v57 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_131;
          *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v57);
          goto LABEL_89;
        case 0xAu:
          *((_WORD *)this + 52) |= 0x20u;
          v58 = *((_QWORD *)a2 + 1);
          if (v58 > 0xFFFFFFFFFFFFFFF7 || v58 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_131;
          *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v58);
          goto LABEL_89;
        case 0xBu:
          *((_WORD *)this + 52) |= 1u;
          v59 = *((_QWORD *)a2 + 1);
          if (v59 > 0xFFFFFFFFFFFFFFF7 || v59 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_131;
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v59);
          goto LABEL_89;
        case 0xCu:
          *((_WORD *)this + 52) |= 8u;
          v60 = *((_QWORD *)a2 + 1);
          if (v60 > 0xFFFFFFFFFFFFFFF7 || v60 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_131;
          *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v60);
LABEL_89:
          v61 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_134;
        default:
          if ((PB::Reader::skip(a2, v13 >> 3, v22, 0) & 1) == 0)
            return 0;
          goto LABEL_135;
      }
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_21;
      v17 += 7;
      v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::TempestPoCAuxiliaryDeviceMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  float *v5;
  float *v6;
  float v7;
  __int16 v8;

  v3 = this;
  v4 = *(const PB::Base **)(this + 80);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7, 2u);
  }
  v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 0x80) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 92), 3u);
    v8 = *(_WORD *)(v3 + 104);
    if ((v8 & 0x40) == 0)
    {
LABEL_8:
      if ((v8 & 0x100) == 0)
        goto LABEL_9;
      goto LABEL_19;
    }
  }
  else if ((v8 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 88), 4u);
  v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 0x100) == 0)
  {
LABEL_9:
    if ((v8 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 96), 5u);
  v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 0x200) == 0)
  {
LABEL_10:
    if ((v8 & 2) == 0)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 6u);
  v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 2) == 0)
  {
LABEL_11:
    if ((v8 & 4) == 0)
      goto LABEL_12;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 7u);
  v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 4) == 0)
  {
LABEL_12:
    if ((v8 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 8u);
  v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 0x10) == 0)
  {
LABEL_13:
    if ((v8 & 0x20) == 0)
      goto LABEL_14;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 9u);
  v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 0x20) == 0)
  {
LABEL_14:
    if ((v8 & 1) == 0)
      goto LABEL_15;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 0xAu);
  v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 1) == 0)
  {
LABEL_15:
    if ((v8 & 8) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 56), 0xCu);
  }
LABEL_25:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 0xBu);
  if ((*(_WORD *)(v3 + 104) & 8) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 56), 0xCu);
  return this;
}

uint64_t CMMsl::TempestPoCAuxiliaryDeviceMotion::hash_value(CMMsl::TempestPoCAuxiliaryDeviceMotion *this)
{
  CMMsl::AuxiliaryDeviceMotion *v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  float v17;

  v2 = (CMMsl::AuxiliaryDeviceMotion *)*((_QWORD *)this + 10);
  if (v2)
    v3 = CMMsl::AuxiliaryDeviceMotion::hash_value(v2);
  else
    v3 = 0;
  v4 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  v5 = *((_WORD *)this + 52);
  if ((v5 & 0x80) != 0)
  {
    v17 = *((float *)this + 23);
    v6 = LODWORD(v17);
    if (v17 == 0.0)
      v6 = 0;
    if ((v5 & 0x40) != 0)
    {
LABEL_6:
      v7 = *((unsigned int *)this + 22);
      if ((*((_WORD *)this + 52) & 0x100) != 0)
        goto LABEL_7;
      goto LABEL_33;
    }
  }
  else
  {
    v6 = 0;
    if ((v5 & 0x40) != 0)
      goto LABEL_6;
  }
  v7 = 0;
  if ((*((_WORD *)this + 52) & 0x100) != 0)
  {
LABEL_7:
    v8 = *((unsigned int *)this + 24);
    if ((*((_WORD *)this + 52) & 0x200) != 0)
      goto LABEL_8;
LABEL_34:
    v10 = 0;
    if ((v5 & 2) != 0)
      goto LABEL_11;
LABEL_35:
    v11 = 0.0;
    if ((v5 & 4) != 0)
      goto LABEL_14;
LABEL_36:
    v12 = 0.0;
    if ((v5 & 0x10) != 0)
      goto LABEL_17;
LABEL_37:
    v13 = 0.0;
    if ((v5 & 0x20) != 0)
      goto LABEL_20;
LABEL_38:
    v14 = 0.0;
    if ((v5 & 1) != 0)
      goto LABEL_23;
    goto LABEL_39;
  }
LABEL_33:
  v8 = 0;
  if ((*((_WORD *)this + 52) & 0x200) == 0)
    goto LABEL_34;
LABEL_8:
  v9 = *((float *)this + 25);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v5 & 2) == 0)
    goto LABEL_35;
LABEL_11:
  v11 = *((double *)this + 5);
  if (v11 == 0.0)
    v11 = 0.0;
  if ((v5 & 4) == 0)
    goto LABEL_36;
LABEL_14:
  v12 = *((double *)this + 6);
  if (v12 == 0.0)
    v12 = 0.0;
  if ((v5 & 0x10) == 0)
    goto LABEL_37;
LABEL_17:
  v13 = *((double *)this + 8);
  if (v13 == 0.0)
    v13 = 0.0;
  if ((v5 & 0x20) == 0)
    goto LABEL_38;
LABEL_20:
  v14 = *((double *)this + 9);
  if (v14 == 0.0)
    v14 = 0.0;
  if ((v5 & 1) != 0)
  {
LABEL_23:
    v15 = *((double *)this + 4);
    if (v15 == 0.0)
      v15 = 0.0;
    if ((v5 & 8) != 0)
      goto LABEL_26;
LABEL_40:
    v16 = 0.0;
    return v4 ^ v3 ^ v6 ^ v7 ^ v8 ^ v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ *(_QWORD *)&v15 ^ *(_QWORD *)&v16;
  }
LABEL_39:
  v15 = 0.0;
  if ((v5 & 8) == 0)
    goto LABEL_40;
LABEL_26:
  v16 = *((double *)this + 7);
  if (v16 == 0.0)
    v16 = 0.0;
  return v4 ^ v3 ^ v6 ^ v7 ^ v8 ^ v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ *(_QWORD *)&v15 ^ *(_QWORD *)&v16;
}

uint64_t CMMsl::TempestPoCAuxiliaryDeviceMotion::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 80))
    operator new();
  return this;
}

void CMMsl::TempestPoCListenerOrientation::~TempestPoCListenerOrientation(CMMsl::TempestPoCListenerOrientation *this)
{
  void *v2;

  *(_QWORD *)this = off_100354D20;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::TempestPoCListenerOrientation::~TempestPoCListenerOrientation(this);
  operator delete();
}

CMMsl::TempestPoCListenerOrientation *CMMsl::TempestPoCListenerOrientation::TempestPoCListenerOrientation(CMMsl::TempestPoCListenerOrientation *this, const CMMsl::TempestPoCListenerOrientation *a2)
{
  char *v4;
  __int16 v5;
  __int16 v6;
  uint64_t v7;
  int v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  int v13;
  char v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)this = off_100354D20;
  *((_QWORD *)this + 1) = 0;
  v4 = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 24) = 0;
  v5 = *((_WORD *)a2 + 48);
  if ((v5 & 0x10) != 0)
  {
    v7 = *((_QWORD *)a2 + 8);
    v6 = 16;
    *((_WORD *)this + 48) = 16;
    *((_QWORD *)this + 8) = v7;
    v5 = *((_WORD *)a2 + 48);
    if ((v5 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((*((_WORD *)a2 + 48) & 0x200) != 0)
  {
LABEL_5:
    v8 = *((_DWORD *)a2 + 22);
    v6 |= 0x200u;
    *((_WORD *)this + 48) = v6;
    *((_DWORD *)this + 22) = v8;
    v5 = *((_WORD *)a2 + 48);
  }
LABEL_6:
  if ((v5 & 0x80) == 0)
  {
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
  v13 = *((_DWORD *)a2 + 20);
  v6 |= 0x80u;
  *((_WORD *)this + 48) = v6;
  *((_DWORD *)this + 20) = v13;
  if ((*((_WORD *)a2 + 48) & 0x100) != 0)
  {
LABEL_8:
    v9 = *((_DWORD *)a2 + 21);
    *((_WORD *)this + 48) = v6 | 0x100;
    *((_DWORD *)this + 21) = v9;
  }
LABEL_9:
  if (this != a2)
    sub_100020CE4(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  v10 = *((_WORD *)a2 + 48);
  if ((v10 & 0x400) != 0)
  {
    v14 = *((_BYTE *)a2 + 92);
    *((_WORD *)this + 48) |= 0x400u;
    *((_BYTE *)this + 92) = v14;
    v10 = *((_WORD *)a2 + 48);
    if ((v10 & 0x20) == 0)
    {
LABEL_13:
      if ((v10 & 0x40) == 0)
        goto LABEL_14;
      goto LABEL_24;
    }
  }
  else if ((v10 & 0x20) == 0)
  {
    goto LABEL_13;
  }
  v15 = *((_DWORD *)a2 + 18);
  *((_WORD *)this + 48) |= 0x20u;
  *((_DWORD *)this + 18) = v15;
  v10 = *((_WORD *)a2 + 48);
  if ((v10 & 0x40) == 0)
  {
LABEL_14:
    if ((v10 & 8) == 0)
      goto LABEL_15;
    goto LABEL_25;
  }
LABEL_24:
  v16 = *((_DWORD *)a2 + 19);
  *((_WORD *)this + 48) |= 0x40u;
  *((_DWORD *)this + 19) = v16;
  v10 = *((_WORD *)a2 + 48);
  if ((v10 & 8) == 0)
  {
LABEL_15:
    if ((v10 & 1) == 0)
      goto LABEL_16;
    goto LABEL_26;
  }
LABEL_25:
  v17 = *((_QWORD *)a2 + 7);
  *((_WORD *)this + 48) |= 8u;
  *((_QWORD *)this + 7) = v17;
  v10 = *((_WORD *)a2 + 48);
  if ((v10 & 1) == 0)
  {
LABEL_16:
    if ((v10 & 4) == 0)
      goto LABEL_17;
LABEL_27:
    v19 = *((_QWORD *)a2 + 6);
    *((_WORD *)this + 48) |= 4u;
    *((_QWORD *)this + 6) = v19;
    if ((*((_WORD *)a2 + 48) & 2) == 0)
      return this;
    goto LABEL_18;
  }
LABEL_26:
  v18 = *((_QWORD *)a2 + 4);
  *((_WORD *)this + 48) |= 1u;
  *((_QWORD *)this + 4) = v18;
  v10 = *((_WORD *)a2 + 48);
  if ((v10 & 4) != 0)
    goto LABEL_27;
LABEL_17:
  if ((v10 & 2) != 0)
  {
LABEL_18:
    v11 = *((_QWORD *)a2 + 5);
    *((_WORD *)this + 48) |= 2u;
    *((_QWORD *)this + 5) = v11;
  }
  return this;
}

CMMsl *CMMsl::TempestPoCListenerOrientation::operator=(CMMsl *a1, const CMMsl::TempestPoCListenerOrientation *a2)
{
  CMMsl::TempestPoCListenerOrientation *v3;
  _BYTE v5[104];

  if (a1 != a2)
  {
    CMMsl::TempestPoCListenerOrientation::TempestPoCListenerOrientation((CMMsl::TempestPoCListenerOrientation *)v5, a2);
    CMMsl::swap(a1, (CMMsl::TempestPoCListenerOrientation *)v5, v3);
    CMMsl::TempestPoCListenerOrientation::~TempestPoCListenerOrientation((CMMsl::TempestPoCListenerOrientation *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::TempestPoCListenerOrientation *a2, CMMsl::TempestPoCListenerOrientation *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;

  v3 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v3;
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  LODWORD(v4) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v4;
  LODWORD(v4) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 92);
  *((_BYTE *)this + 92) = *((_BYTE *)a2 + 92);
  *((_BYTE *)a2 + 92) = v7;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  LODWORD(v4) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v4;
  v8 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v8;
  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v9;
  v10 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v10;
  result = *((double *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((double *)a2 + 5) = result;
  return result;
}

uint64_t CMMsl::TempestPoCListenerOrientation::TempestPoCListenerOrientation(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_100354D20;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

CMMsl *CMMsl::TempestPoCListenerOrientation::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::TempestPoCListenerOrientation *v3;
  _BYTE v5[104];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::TempestPoCListenerOrientation::TempestPoCListenerOrientation((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::TempestPoCListenerOrientation *)v5, v3);
    CMMsl::TempestPoCListenerOrientation::~TempestPoCListenerOrientation((CMMsl::TempestPoCListenerOrientation *)v5);
  }
  return a1;
}

uint64_t CMMsl::TempestPoCListenerOrientation::formatText(CMMsl::TempestPoCListenerOrientation *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;
  float *v6;
  float *v7;
  float v8;
  __int16 v9;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 48);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(a2, "angularVelocityConstraintRps", *((float *)this + 18));
    v5 = *((_WORD *)this + 48);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "consumedAuxTimestamp", *((double *)this + 4));
  v5 = *((_WORD *)this + 48);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "dthetaNormRad", *((float *)this + 19));
  v5 = *((_WORD *)this + 48);
  if ((v5 & 0x400) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "inBTZ", *((_BYTE *)this + 92));
  v5 = *((_WORD *)this + 48);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "listenerPitch", *((float *)this + 20));
  v5 = *((_WORD *)this + 48);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x200) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "listenerRoll", *((float *)this + 21));
  v5 = *((_WORD *)this + 48);
  if ((v5 & 0x200) == 0)
  {
LABEL_8:
    if ((v5 & 2) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "listenerYaw", *((float *)this + 22));
  if ((*((_WORD *)this + 48) & 2) != 0)
LABEL_9:
    PB::TextFormatter::format(a2, "machAbsTimestamp", *((double *)this + 5));
LABEL_10:
  v6 = (float *)*((_QWORD *)this + 1);
  v7 = (float *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "quaternion", v8);
  }
  v9 = *((_WORD *)this + 48);
  if ((v9 & 4) == 0)
  {
    if ((v9 & 8) == 0)
      goto LABEL_14;
LABEL_26:
    PB::TextFormatter::format(a2, "srcTimestamp", *((double *)this + 7));
    if ((*((_WORD *)this + 48) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_15;
  }
  PB::TextFormatter::format(a2, "receivedAuxTimestamp", *((double *)this + 6));
  v9 = *((_WORD *)this + 48);
  if ((v9 & 8) != 0)
    goto LABEL_26;
LABEL_14:
  if ((v9 & 0x10) != 0)
LABEL_15:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 8));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::TempestPoCListenerOrientation::readFrom(CMMsl::TempestPoCListenerOrientation *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  char *v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  _DWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  BOOL v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  _DWORD *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  int v62;
  unint64_t v63;
  _BYTE v65[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 8);
    v9 = (char *)this + 24;
    while (1)
    {
      v10 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        if (v12++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v22 = v13 & 7;
      if (v22 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *((_WORD *)this + 48) |= 0x10u;
          v23 = *((_QWORD *)a2 + 1);
          if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_104;
          *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v23);
          goto LABEL_81;
        case 2u:
          *((_WORD *)this + 48) |= 0x200u;
          v24 = *((_QWORD *)a2 + 1);
          if (v24 > 0xFFFFFFFFFFFFFFFBLL || v24 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_104;
          *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v24);
          goto LABEL_106;
        case 3u:
          *((_WORD *)this + 48) |= 0x80u;
          v25 = *((_QWORD *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_104;
          *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v25);
          goto LABEL_106;
        case 4u:
          *((_WORD *)this + 48) |= 0x100u;
          v26 = *((_QWORD *)a2 + 1);
          if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_104;
          *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v26);
          goto LABEL_106;
        case 5u:
          if (v22 == 2)
          {
            if ((PB::Reader::placeMark(a2, v65) & 1) != 0)
              return 0;
            v27 = *((_QWORD *)a2 + 1);
            v28 = *((_QWORD *)a2 + 2);
            while (v27 < v28 && !*((_BYTE *)a2 + 24))
            {
              v30 = (char *)*((_QWORD *)this + 2);
              v29 = *((_QWORD *)this + 3);
              if ((unint64_t)v30 >= v29)
              {
                v32 = (char *)*v8;
                v33 = (v30 - (_BYTE *)*v8) >> 2;
                v34 = v33 + 1;
                if ((unint64_t)(v33 + 1) >> 62)
                  goto LABEL_116;
                v35 = v29 - (_QWORD)v32;
                if (v35 >> 1 > v34)
                  v34 = v35 >> 1;
                if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
                  v36 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v36 = v34;
                if (v36)
                {
                  v37 = (char *)sub_100020E2C((uint64_t)v9, v36);
                  v32 = (char *)*((_QWORD *)this + 1);
                  v30 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v37 = 0;
                }
                v38 = &v37[4 * v33];
                *(_DWORD *)v38 = 0;
                v31 = v38 + 4;
                while (v30 != v32)
                {
                  v39 = *((_DWORD *)v30 - 1);
                  v30 -= 4;
                  *((_DWORD *)v38 - 1) = v39;
                  v38 -= 4;
                }
                *((_QWORD *)this + 1) = v38;
                *((_QWORD *)this + 2) = v31;
                *((_QWORD *)this + 3) = &v37[4 * v36];
                if (v32)
                  operator delete(v32);
              }
              else
              {
                *(_DWORD *)v30 = 0;
                v31 = v30 + 4;
              }
              *((_QWORD *)this + 2) = v31;
              v40 = *((_QWORD *)a2 + 1);
              if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)a2 + 2))
              {
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v31 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v40);
              v28 = *((_QWORD *)a2 + 2);
              v27 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v27;
            }
            PB::Reader::recallMark(a2, v65);
          }
          else
          {
            v53 = (char *)*((_QWORD *)this + 2);
            v52 = *((_QWORD *)this + 3);
            if ((unint64_t)v53 >= v52)
            {
              v55 = (char *)*v8;
              v56 = (v53 - (_BYTE *)*v8) >> 2;
              v57 = v56 + 1;
              if ((unint64_t)(v56 + 1) >> 62)
LABEL_116:
                sub_10000D5F8();
              v58 = v52 - (_QWORD)v55;
              if (v58 >> 1 > v57)
                v57 = v58 >> 1;
              if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
                v59 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v59 = v57;
              if (v59)
              {
                v60 = (char *)sub_100020E2C((uint64_t)v9, v59);
                v55 = (char *)*((_QWORD *)this + 1);
                v53 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v60 = 0;
              }
              v61 = &v60[4 * v56];
              *(_DWORD *)v61 = 0;
              v54 = v61 + 4;
              while (v53 != v55)
              {
                v62 = *((_DWORD *)v53 - 1);
                v53 -= 4;
                *((_DWORD *)v61 - 1) = v62;
                v61 -= 4;
              }
              *((_QWORD *)this + 1) = v61;
              *((_QWORD *)this + 2) = v54;
              *((_QWORD *)this + 3) = &v60[4 * v59];
              if (v55)
                operator delete(v55);
            }
            else
            {
              *(_DWORD *)v53 = 0;
              v54 = v53 + 4;
            }
            *((_QWORD *)this + 2) = v54;
            v63 = *((_QWORD *)a2 + 1);
            if (v63 <= 0xFFFFFFFFFFFFFFFBLL && v63 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v54 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v63);
LABEL_106:
              v51 = *((_QWORD *)a2 + 1) + 4;
LABEL_107:
              *((_QWORD *)a2 + 1) = v51;
            }
            else
            {
LABEL_104:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_108:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || *((_BYTE *)a2 + 24))
            return v4 == 0;
          break;
        case 6u:
          *((_WORD *)this + 48) |= 0x400u;
          v41 = *((_QWORD *)a2 + 1);
          if (v41 >= *((_QWORD *)a2 + 2))
          {
            v44 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v42 = v41 + 1;
            v43 = *(unsigned __int8 *)(*(_QWORD *)a2 + v41);
            *((_QWORD *)a2 + 1) = v42;
            v44 = v43 != 0;
          }
          *((_BYTE *)this + 92) = v44;
          goto LABEL_108;
        case 7u:
          *((_WORD *)this + 48) |= 0x20u;
          v45 = *((_QWORD *)a2 + 1);
          if (v45 > 0xFFFFFFFFFFFFFFFBLL || v45 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_104;
          *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v45);
          goto LABEL_106;
        case 8u:
          *((_WORD *)this + 48) |= 0x40u;
          v46 = *((_QWORD *)a2 + 1);
          if (v46 > 0xFFFFFFFFFFFFFFFBLL || v46 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_104;
          *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v46);
          goto LABEL_106;
        case 9u:
          *((_WORD *)this + 48) |= 8u;
          v47 = *((_QWORD *)a2 + 1);
          if (v47 > 0xFFFFFFFFFFFFFFF7 || v47 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_104;
          *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v47);
          goto LABEL_81;
        case 0xAu:
          *((_WORD *)this + 48) |= 1u;
          v48 = *((_QWORD *)a2 + 1);
          if (v48 > 0xFFFFFFFFFFFFFFF7 || v48 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_104;
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v48);
          goto LABEL_81;
        case 0xBu:
          *((_WORD *)this + 48) |= 4u;
          v49 = *((_QWORD *)a2 + 1);
          if (v49 > 0xFFFFFFFFFFFFFFF7 || v49 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_104;
          *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v49);
          goto LABEL_81;
        case 0xCu:
          *((_WORD *)this + 48) |= 2u;
          v50 = *((_QWORD *)a2 + 1);
          if (v50 > 0xFFFFFFFFFFFFFFF7 || v50 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_104;
          *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v50);
LABEL_81:
          v51 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_107;
        default:
          if ((PB::Reader::skip(a2, v13 >> 3, v22, 0) & 1) == 0)
            return 0;
          goto LABEL_108;
      }
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_21;
      v17 += 7;
      v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::TempestPoCListenerOrientation::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;
  float *v5;
  float *v6;
  float v7;
  __int16 v8;

  v3 = this;
  v4 = *(_WORD *)(this + 96);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 64), 1u);
    v4 = *(_WORD *)(v3 + 96);
    if ((v4 & 0x200) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0)
        goto LABEL_4;
LABEL_19:
      this = PB::Writer::write(a2, *(float *)(v3 + 80), 3u);
      if ((*(_WORD *)(v3 + 96) & 0x100) == 0)
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  else if ((*(_WORD *)(this + 96) & 0x200) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 2u);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x80) != 0)
    goto LABEL_19;
LABEL_4:
  if ((v4 & 0x100) != 0)
LABEL_5:
    this = PB::Writer::write(a2, *(float *)(v3 + 84), 4u);
LABEL_6:
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7, 5u);
  }
  v8 = *(_WORD *)(v3 + 96);
  if ((v8 & 0x400) != 0)
  {
    this = PB::Writer::write(a2, *(_BYTE *)(v3 + 92), 6u);
    v8 = *(_WORD *)(v3 + 96);
    if ((v8 & 0x20) == 0)
    {
LABEL_11:
      if ((v8 & 0x40) == 0)
        goto LABEL_12;
      goto LABEL_23;
    }
  }
  else if ((v8 & 0x20) == 0)
  {
    goto LABEL_11;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 7u);
  v8 = *(_WORD *)(v3 + 96);
  if ((v8 & 0x40) == 0)
  {
LABEL_12:
    if ((v8 & 8) == 0)
      goto LABEL_13;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 8u);
  v8 = *(_WORD *)(v3 + 96);
  if ((v8 & 8) == 0)
  {
LABEL_13:
    if ((v8 & 1) == 0)
      goto LABEL_14;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 9u);
  v8 = *(_WORD *)(v3 + 96);
  if ((v8 & 1) == 0)
  {
LABEL_14:
    if ((v8 & 4) == 0)
      goto LABEL_15;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 0xAu);
  v8 = *(_WORD *)(v3 + 96);
  if ((v8 & 4) == 0)
  {
LABEL_15:
    if ((v8 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 40), 0xCu);
  }
LABEL_26:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 0xBu);
  if ((*(_WORD *)(v3 + 96) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 40), 0xCu);
  return this;
}

uint64_t CMMsl::TempestPoCListenerOrientation::hash_value(CMMsl::TempestPoCListenerOrientation *this)
{
  __int16 v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;

  v2 = *((_WORD *)this + 48);
  if ((v2 & 0x10) == 0)
  {
    v3 = 0;
    if ((*((_WORD *)this + 48) & 0x200) != 0)
      goto LABEL_3;
LABEL_18:
    v5 = 0;
    if ((v2 & 0x80) != 0)
      goto LABEL_7;
    goto LABEL_19;
  }
  if (*((double *)this + 8) == 0.0)
    v3 = 0;
  else
    v3 = *((_QWORD *)this + 8);
  if ((*((_WORD *)this + 48) & 0x200) == 0)
    goto LABEL_18;
LABEL_3:
  v4 = *((float *)this + 22);
  if (v4 == 0.0)
    v5 = 0;
  else
    v5 = LODWORD(v4);
  if ((v2 & 0x80) != 0)
  {
LABEL_7:
    v6 = *((float *)this + 20);
    if (v6 == 0.0)
      v7 = 0;
    else
      v7 = LODWORD(v6);
    if ((*((_WORD *)this + 48) & 0x100) != 0)
      goto LABEL_11;
LABEL_20:
    v9 = 0;
    goto LABEL_21;
  }
LABEL_19:
  v7 = 0;
  if ((*((_WORD *)this + 48) & 0x100) == 0)
    goto LABEL_20;
LABEL_11:
  v8 = *((float *)this + 21);
  if (v8 == 0.0)
    v9 = 0;
  else
    v9 = LODWORD(v8);
LABEL_21:
  v10 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  v11 = *((_WORD *)this + 48);
  if ((v11 & 0x400) == 0)
  {
    v12 = 0;
    if ((v11 & 0x20) != 0)
      goto LABEL_23;
LABEL_42:
    v14 = 0;
    if ((v11 & 0x40) != 0)
      goto LABEL_26;
LABEL_43:
    v16 = 0;
    if ((v11 & 8) != 0)
      goto LABEL_29;
LABEL_44:
    v17 = 0.0;
    if ((v11 & 1) != 0)
      goto LABEL_32;
LABEL_45:
    v18 = 0.0;
    if ((v11 & 4) != 0)
      goto LABEL_35;
    goto LABEL_46;
  }
  v12 = *((unsigned __int8 *)this + 92);
  if ((v11 & 0x20) == 0)
    goto LABEL_42;
LABEL_23:
  v13 = *((float *)this + 18);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((v11 & 0x40) == 0)
    goto LABEL_43;
LABEL_26:
  v15 = *((float *)this + 19);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v11 & 8) == 0)
    goto LABEL_44;
LABEL_29:
  v17 = *((double *)this + 7);
  if (v17 == 0.0)
    v17 = 0.0;
  if ((v11 & 1) == 0)
    goto LABEL_45;
LABEL_32:
  v18 = *((double *)this + 4);
  if (v18 == 0.0)
    v18 = 0.0;
  if ((v11 & 4) != 0)
  {
LABEL_35:
    v19 = *((double *)this + 6);
    if (v19 == 0.0)
      v19 = 0.0;
    if ((v11 & 2) != 0)
      goto LABEL_38;
LABEL_47:
    v20 = 0.0;
    return v5 ^ v3 ^ v7 ^ v9 ^ v12 ^ v14 ^ v16 ^ *(_QWORD *)&v17 ^ v10 ^ *(_QWORD *)&v18 ^ *(_QWORD *)&v19 ^ *(_QWORD *)&v20;
  }
LABEL_46:
  v19 = 0.0;
  if ((v11 & 2) == 0)
    goto LABEL_47;
LABEL_38:
  v20 = *((double *)this + 5);
  if (v20 == 0.0)
    v20 = 0.0;
  return v5 ^ v3 ^ v7 ^ v9 ^ v12 ^ v14 ^ v16 ^ *(_QWORD *)&v17 ^ v10 ^ *(_QWORD *)&v18 ^ *(_QWORD *)&v19 ^ *(_QWORD *)&v20;
}

void CMMsl::Timestamp::~Timestamp(CMMsl::Timestamp *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::Timestamp::Timestamp(uint64_t this, const CMMsl::Timestamp *a2)
{
  char v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)this = off_100354D58;
  *(_QWORD *)(this + 16) = 0;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
    v3 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) = 2;
    *(_DWORD *)(this + 16) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 1) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
LABEL_5:
    v4 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = v2;
    *(_QWORD *)(this + 8) = v4;
  }
  return this;
}

uint64_t CMMsl::Timestamp::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v4;
  int v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;

  if (a1 != a2)
  {
    v11[0] = off_100354D58;
    HIDWORD(v12) = 0;
    v4 = *(_BYTE *)(a2 + 20);
    if ((v4 & 2) != 0)
    {
      v5 = *(_DWORD *)(a2 + 16);
      BYTE4(v12) = 2;
      v6 = 3;
      if ((v4 & 1) != 0)
      {
LABEL_6:
        v2 = *(_QWORD *)(a2 + 8);
        BYTE4(v12) = v6;
      }
    }
    else
    {
      v5 = 0;
      v6 = 1;
      if ((*(_BYTE *)(a2 + 20) & 1) != 0)
        goto LABEL_6;
    }
    v7 = HIDWORD(v12);
    v8 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v5;
    *(_DWORD *)(a1 + 20) = v7;
    v12 = v8;
    v9 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v2;
    v11[1] = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v4;
    v8[2] = v5;
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v8[0] = off_100354D58;
    v8[1] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::Timestamp *a2, CMMsl::Timestamp *a3)
{
  int v3;
  int v4;
  uint64_t v5;

  v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  v5 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  return this;
}

uint64_t CMMsl::Timestamp::formatText(CMMsl::Timestamp *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "source", *((_DWORD *)this + 4));
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Timestamp::readFrom(CMMsl::Timestamp *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t result;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)a2 + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 1u;
        v27 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v28 = *(_QWORD *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v31 = 0;
          if (v2 <= v27)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v27)
            {
              v31 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_64;
            }
            v40 = v27++;
            v41 = *(_BYTE *)(v28 + v40);
            *((_QWORD *)a2 + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              v31 = 0;
              goto LABEL_63;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v31 = 0;
LABEL_63:
          v3 = v40 + 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v3 = v27 + 1;
            *((_QWORD *)a2 + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v3;
            v14 = v30++ > 8;
            if (v14)
            {
              v31 = 0;
              break;
            }
          }
        }
LABEL_64:
        *((_QWORD *)this + 1) = v31;
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 20) |= 2u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v34 = 0;
          v35 = 0;
          v25 = 0;
          if (v2 <= v21)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_60;
            }
            v36 = v21++;
            v37 = *(_BYTE *)(v22 + v36);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0)
              break;
            v34 += 7;
            v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_59;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v25) = 0;
LABEL_59:
          v3 = v36 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v3 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v3;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_60:
        *((_DWORD *)this + 4) = v25;
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::Timestamp::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 16), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 1) != 0)
    return PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 8), 2u);
  return this;
}

uint64_t CMMsl::Timestamp::hash_value(CMMsl::Timestamp *this)
{
  uint64_t v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 2) != 0)
  {
    v1 = *((int *)this + 4);
    if ((*((_BYTE *)this + 20) & 1) != 0)
      goto LABEL_3;
LABEL_5:
    v2 = 0;
    return v2 ^ v1;
  }
  v1 = 0;
  if ((*((_BYTE *)this + 20) & 1) == 0)
    goto LABEL_5;
LABEL_3:
  v2 = *((_QWORD *)this + 1);
  return v2 ^ v1;
}

void CMMsl::TouchOscarEmu::~TouchOscarEmu(CMMsl::TouchOscarEmu *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::TouchOscarEmu::TouchOscarEmu(uint64_t this, const CMMsl::TouchOscarEmu *a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)this = off_100354D90;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_BYTE *)a2 + 16);
    *(_BYTE *)(this + 20) = v2;
    *(_BYTE *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::TouchOscarEmu::operator=(uint64_t a1, uint64_t a2, double a3)
{
  char v3;
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  _QWORD v10[2];
  char v11;
  int v12;

  if (a1 != a2)
  {
    v10[0] = off_100354D90;
    v12 = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      LOBYTE(v12) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v3 = *(_BYTE *)(a2 + 16);
        LOBYTE(v12) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v12;
    v12 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a3;
    v10[1] = v8;
    LOBYTE(v7) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v3;
    v11 = v7;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::TouchOscarEmu *a2, CMMsl::TouchOscarEmu *a3)
{
  int v3;
  double result;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v3) = *((_BYTE *)this + 16);
  *((_BYTE *)this + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a2 + 16) = v3;
  return result;
}

double CMMsl::TouchOscarEmu::TouchOscarEmu(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100354D90;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100354D90;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

uint64_t CMMsl::TouchOscarEmu::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  _QWORD v9[2];
  char v10;
  int v11;

  if (a1 != a2)
  {
    v9[0] = off_100354D90;
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_BYTE *)(a2 + 16);
    v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v9[1] = v7;
    LOBYTE(v3) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v5;
    v10 = v3;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::TouchOscarEmu::formatText(CMMsl::TouchOscarEmu *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "touchDetected", *((_BYTE *)this + 16));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::TouchOscarEmu::readFrom(CMMsl::TouchOscarEmu *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  int v21;
  BOOL v22;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v22 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v21 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v22 = v21 != 0;
        }
        *((_BYTE *)this + 16) = v22;
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::TouchOscarEmu::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 16), 2u);
  return this;
}

uint64_t CMMsl::TouchOscarEmu::hash_value(CMMsl::TouchOscarEmu *this)
{
  double v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0;
    return v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((unsigned __int8 *)this + 16);
  return v2 ^ *(_QWORD *)&v1;
}

void CMMsl::TrackRunData::~TrackRunData(CMMsl::TrackRunData *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::TrackRunData::TrackRunData(uint64_t this, const CMMsl::TrackRunData *a2)
{
  char v2;
  char v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  char v10;

  *(_QWORD *)this = off_100354DC8;
  *(_DWORD *)(this + 40) = 0;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 0x10) != 0)
  {
    v4 = *((_DWORD *)a2 + 7);
    v3 = 16;
    *(_BYTE *)(this + 40) = 16;
    *(_DWORD *)(this + 28) = v4;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 40) & 4) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(_BYTE *)(this + 40) = v3;
    *(_DWORD *)(this + 20) = v5;
    v2 = *((_BYTE *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *(_BYTE *)(this + 40) = v3;
    *(_DWORD *)(this + 24) = v6;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *(_BYTE *)(this + 40) = v3;
  *(_DWORD *)(this + 16) = v7;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  v8 = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *(_BYTE *)(this + 40) = v3;
  *(_DWORD *)(this + 32) = v8;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 1) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      return this;
LABEL_16:
    v10 = *((_BYTE *)a2 + 36);
    *(_BYTE *)(this + 40) = v3 | 0x40;
    *(_BYTE *)(this + 36) = v10;
    return this;
  }
LABEL_15:
  v9 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_BYTE *)(this + 40) = v3;
  *(_QWORD *)(this + 8) = v9;
  if ((*((_BYTE *)a2 + 40) & 0x40) != 0)
    goto LABEL_16;
  return this;
}

uint64_t CMMsl::TrackRunData::operator=(uint64_t a1, const CMMsl::TrackRunData *a2)
{
  int v3;
  __int128 v4;
  int v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  char v12;
  int v13;

  if ((const CMMsl::TrackRunData *)a1 != a2)
  {
    CMMsl::TrackRunData::TrackRunData((uint64_t)&v8, a2);
    v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v13;
    v13 = v3;
    v4 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    v10 = v4;
    v5 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v11;
    v11 = v5;
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v9 = v6;
    LOBYTE(v5) = *(_BYTE *)(a1 + 36);
    *(_BYTE *)(a1 + 36) = v12;
    v12 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::TrackRunData *a2, CMMsl::TrackRunData *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  double result;

  v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  v4 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  v5 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v5;
  v6 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v6;
  v7 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v7;
  v8 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v8;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v8) = *((_BYTE *)this + 36);
  *((_BYTE *)this + 36) = *((_BYTE *)a2 + 36);
  *((_BYTE *)a2 + 36) = v8;
  return result;
}

double CMMsl::TrackRunData::TrackRunData(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100354DC8;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100354DC8;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  return result;
}

uint64_t CMMsl::TrackRunData::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  char v6;
  __int128 v7;
  __int128 v8;
  int v9;
  _QWORD v11[2];
  __int128 v12;
  int v13;
  char v14;
  int v15;

  if (a1 != a2)
  {
    v11[0] = off_100354DC8;
    v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    v4 = *(_DWORD *)(a2 + 32);
    v5 = *(_QWORD *)(a2 + 8);
    v6 = *(_BYTE *)(a2 + 36);
    v15 = *(_DWORD *)(a1 + 40);
    v7 = *(_OWORD *)(a1 + 16);
    v8 = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 40) = v3;
    *(_OWORD *)(a1 + 16) = v8;
    v12 = v7;
    v9 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v4;
    v13 = v9;
    *(_QWORD *)&v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v5;
    v11[1] = v7;
    LOBYTE(v9) = *(_BYTE *)(a1 + 36);
    *(_BYTE *)(a1 + 36) = v6;
    v14 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

uint64_t CMMsl::TrackRunData::formatText(CMMsl::TrackRunData *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "distanceToTrackMeters", *((double *)this + 1));
    v5 = *((_BYTE *)this + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*((_BYTE *)this + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "estimatedLaneConfidence", *((_DWORD *)this + 4));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "estimatedLaneNumber", *((_DWORD *)this + 5));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "laneCount", *((_DWORD *)this + 6));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(a2, "odometerHasBeenCorrected", *((_BYTE *)this + 36));
    if ((*((_BYTE *)this + 40) & 0x20) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "laneNumber", *((_DWORD *)this + 7));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 0x40) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 0x20) != 0)
LABEL_8:
    PB::TextFormatter::format(a2, "trackProximity", *((_DWORD *)this + 8));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::TrackRunData::readFrom(CMMsl::TrackRunData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  int v51;
  BOOL v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  unint64_t v67;
  char v68;
  char v69;
  unsigned int v70;
  unint64_t v71;
  char v72;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 40) |= 0x10u;
              v20 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v21 = *(_QWORD *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_106;
                  }
                  v55 = v20++;
                  v56 = *(_BYTE *)(v21 + v55);
                  *((_QWORD *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_105;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v24) = 0;
LABEL_105:
                v2 = v55 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)a2 + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_106;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_106:
              *((_DWORD *)this + 7) = v24;
              goto LABEL_127;
            case 2u:
              *((_BYTE *)this + 40) |= 4u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_111;
                  }
                  v59 = v27++;
                  v60 = *(_BYTE *)(v28 + v59);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_110:
                    v2 = v59 + 1;
                    goto LABEL_111;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_110;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_111;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_111:
              *((_DWORD *)this + 5) = v31;
              goto LABEL_127;
            case 3u:
              *((_BYTE *)this + 40) |= 8u;
              v33 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v61 = 0;
                v62 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_116;
                  }
                  v63 = v33++;
                  v64 = *(_BYTE *)(v34 + v63);
                  *((_QWORD *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0)
                    break;
                  v61 += 7;
                  v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_115:
                    v2 = v63 + 1;
                    goto LABEL_116;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v37) = 0;
                goto LABEL_115;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)a2 + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_116;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_116:
              *((_DWORD *)this + 6) = v37;
              goto LABEL_127;
            case 4u:
              *((_BYTE *)this + 40) |= 2u;
              v39 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v40 = *(_QWORD *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v65 = 0;
                v66 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_121;
                  }
                  v67 = v39++;
                  v68 = *(_BYTE *)(v40 + v67);
                  *((_QWORD *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0)
                    break;
                  v65 += 7;
                  v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_120:
                    v2 = v67 + 1;
                    goto LABEL_121;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v43) = 0;
                goto LABEL_120;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)a2 + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_121;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_121:
              *((_DWORD *)this + 4) = v43;
              goto LABEL_127;
            case 5u:
              *((_BYTE *)this + 40) |= 0x20u;
              v45 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v46 = *(_QWORD *)a2;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v69 = 0;
                v70 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_126;
                  }
                  v71 = v45++;
                  v72 = *(_BYTE *)(v46 + v71);
                  *((_QWORD *)a2 + 1) = v45;
                  v49 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0)
                    break;
                  v69 += 7;
                  v14 = v70++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_125:
                    v2 = v71 + 1;
                    goto LABEL_126;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v49) = 0;
                goto LABEL_125;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)a2 + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_126;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_126:
              *((_DWORD *)this + 8) = v49;
LABEL_127:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 6u:
              *((_BYTE *)this + 40) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_127;
            case 7u:
              *((_BYTE *)this + 40) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v52 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v51 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v52 = v51 != 0;
              }
              *((_BYTE *)this + 36) = v52;
              goto LABEL_127;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_127;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::TrackRunData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 40);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 28), 1u);
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(this + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 2u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 3u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 4u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 5u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 1) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      return this;
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 36), 7u);
  }
LABEL_14:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 6u);
  if ((*(_BYTE *)(v3 + 40) & 0x40) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 36), 7u);
  return this;
}

uint64_t CMMsl::TrackRunData::hash_value(CMMsl::TrackRunData *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;

  if ((*((_BYTE *)this + 40) & 0x10) != 0)
  {
    v1 = *((int *)this + 7);
    if ((*((_BYTE *)this + 40) & 4) != 0)
    {
LABEL_3:
      v2 = *((int *)this + 5);
      if ((*((_BYTE *)this + 40) & 8) != 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 40) & 4) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 40) & 8) != 0)
  {
LABEL_4:
    v3 = *((int *)this + 6);
    if ((*((_BYTE *)this + 40) & 2) != 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  v3 = 0;
  if ((*((_BYTE *)this + 40) & 2) != 0)
  {
LABEL_5:
    v4 = *((int *)this + 4);
    if ((*((_BYTE *)this + 40) & 0x20) != 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  v4 = 0;
  if ((*((_BYTE *)this + 40) & 0x20) != 0)
  {
LABEL_6:
    v5 = *((int *)this + 8);
    if ((*((_BYTE *)this + 40) & 1) != 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  v5 = 0;
  if ((*((_BYTE *)this + 40) & 1) != 0)
  {
LABEL_7:
    v6 = *((double *)this + 1);
    if (v6 == 0.0)
      v6 = 0.0;
    if ((*((_BYTE *)this + 40) & 0x40) != 0)
      goto LABEL_10;
LABEL_17:
    v7 = 0;
    return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ *(_QWORD *)&v6 ^ v7;
  }
LABEL_16:
  v6 = 0.0;
  if ((*((_BYTE *)this + 40) & 0x40) == 0)
    goto LABEL_17;
LABEL_10:
  v7 = *((unsigned __int8 *)this + 36);
  return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ *(_QWORD *)&v6 ^ v7;
}

void CMMsl::UWBRange::~UWBRange(CMMsl::UWBRange *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::UWBRange::UWBRange(CMMsl::UWBRange *this, const CMMsl::UWBRange *a2)
{
  char v2;
  char v3;
  double result;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = off_100354E00;
  *((_DWORD *)this + 14) = 0;
  v2 = *((_BYTE *)a2 + 56);
  if ((v2 & 8) != 0)
  {
    result = *((double *)a2 + 4);
    v3 = 8;
    *((_BYTE *)this + 56) = 8;
    *((double *)this + 4) = result;
    v2 = *((_BYTE *)a2 + 56);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 56) & 4) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 3);
    v3 |= 4u;
    *((_BYTE *)this + 56) = v3;
    *((double *)this + 3) = result;
    v2 = *((_BYTE *)a2 + 56);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    v5 = *((_QWORD *)a2 + 1);
    v3 |= 1u;
    *((_BYTE *)this + 56) = v3;
    *((_QWORD *)this + 1) = v5;
    v2 = *((_BYTE *)a2 + 56);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *((_BYTE *)this + 56) = v3;
  *((_QWORD *)this + 2) = v6;
  v2 = *((_BYTE *)a2 + 56);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      return result;
LABEL_14:
    result = *((double *)a2 + 6);
    *((_BYTE *)this + 56) = v3 | 0x20;
    *((double *)this + 6) = result;
    return result;
  }
LABEL_13:
  result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_BYTE *)this + 56) = v3;
  *((double *)this + 5) = result;
  if ((*((_BYTE *)a2 + 56) & 0x20) != 0)
    goto LABEL_14;
  return result;
}

uint64_t CMMsl::UWBRange::operator=(uint64_t a1, const CMMsl::UWBRange *a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;

  if ((const CMMsl::UWBRange *)a1 != a2)
  {
    CMMsl::UWBRange::UWBRange((CMMsl::UWBRange *)&v8, a2);
    v3 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v12;
    v12 = v3;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v5;
    v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v11;
    v11 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::UWBRange *a2, CMMsl::UWBRange *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  v3 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  v8 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  result = *((double *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((double *)a2 + 6) = result;
  return result;
}

double CMMsl::UWBRange::UWBRange(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100354E00;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  result = *(double *)(a2 + 48);
  *(double *)(a1 + 48) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100354E00;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  result = *(double *)(a2 + 48);
  *(double *)(a1 + 48) = result;
  return result;
}

uint64_t CMMsl::UWBRange::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  void (**v9)(CMMsl::UWBRange *__hidden);
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;

  if (a1 != a2)
  {
    v9 = off_100354E00;
    v3 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a2 + 56) = 0;
    v13 = *(_DWORD *)(a1 + 56);
    v4 = *(_OWORD *)(a2 + 24);
    v11 = *(_OWORD *)(a1 + 24);
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    v10 = v5;
    v6 = *(_OWORD *)(a1 + 40);
    v7 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v4;
    *(_DWORD *)(a1 + 56) = v3;
    *(_OWORD *)(a1 + 40) = v7;
    v12 = v6;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::UWBRange::formatText(CMMsl::UWBRange *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 56);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "cycleIndex", *((_QWORD *)this + 1));
    v5 = *((_BYTE *)this + 56);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*((_BYTE *)this + 56) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "error", *((_QWORD *)this + 2));
  v5 = *((_BYTE *)this + 56);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "machAbsoluteTimestamp", *((double *)this + 3));
  v5 = *((_BYTE *)this + 56);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(a2, "range", *((double *)this + 5));
    if ((*((_BYTE *)this + 56) & 0x20) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "machContinuousTimestamp", *((double *)this + 4));
  v5 = *((_BYTE *)this + 56);
  if ((v5 & 0x10) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 0x20) != 0)
LABEL_7:
    PB::TextFormatter::format(a2, "rssi", *((double *)this + 6));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::UWBRange::readFrom(CMMsl::UWBRange *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 56) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_49;
              *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_65;
            case 2u:
              *((_BYTE *)this + 56) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_49;
              *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_65;
            case 3u:
              *((_BYTE *)this + 56) |= 1u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v33 = 0;
                v34 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    v25 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_70;
                  }
                  v35 = v21++;
                  v36 = *(_BYTE *)(v22 + v35);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0)
                    break;
                  v33 += 7;
                  v14 = v34++ > 8;
                  if (v14)
                  {
                    v25 = 0;
LABEL_69:
                    v2 = v35 + 1;
                    goto LABEL_70;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v25 = 0;
                goto LABEL_69;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_70;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              v25 = 0;
LABEL_70:
              *((_QWORD *)this + 1) = v25;
              goto LABEL_76;
            case 4u:
              *((_BYTE *)this + 56) |= 2u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_75;
                  }
                  v39 = v27++;
                  v40 = *(_BYTE *)(v28 + v39);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_74:
                    v2 = v39 + 1;
                    goto LABEL_75;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v31 = 0;
                goto LABEL_74;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_75;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_75:
              *((_QWORD *)this + 2) = v31;
LABEL_76:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 5u:
              *((_BYTE *)this + 56) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_49;
              *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_65;
            case 6u:
              *((_BYTE *)this + 56) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_65:
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_49:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_76;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_76;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::UWBRange::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 56);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32), 1u);
    v4 = *(_BYTE *)(v3 + 56);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(this + 56) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 8), 3u);
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 16), 4u);
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 48), 6u);
  }
LABEL_12:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 5u);
  if ((*(_BYTE *)(v3 + 56) & 0x20) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 48), 6u);
  return this;
}

uint64_t CMMsl::UWBRange::hash_value(CMMsl::UWBRange *this)
{
  double v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;

  if ((*((_BYTE *)this + 56) & 8) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 56) & 4) != 0)
      goto LABEL_3;
LABEL_17:
    v2 = 0.0;
    if ((*((_BYTE *)this + 56) & 1) != 0)
      goto LABEL_6;
    goto LABEL_18;
  }
  v1 = *((double *)this + 4);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 56) & 4) == 0)
    goto LABEL_17;
LABEL_3:
  v2 = *((double *)this + 3);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 56) & 1) != 0)
  {
LABEL_6:
    v3 = *((_QWORD *)this + 1);
    if ((*((_BYTE *)this + 56) & 2) != 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  v3 = 0;
  if ((*((_BYTE *)this + 56) & 2) != 0)
  {
LABEL_7:
    v4 = *((_QWORD *)this + 2);
    if ((*((_BYTE *)this + 56) & 0x10) != 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  v4 = 0;
  if ((*((_BYTE *)this + 56) & 0x10) != 0)
  {
LABEL_8:
    v5 = *((double *)this + 5);
    if (v5 == 0.0)
      v5 = 0.0;
    if ((*((_BYTE *)this + 56) & 0x20) != 0)
      goto LABEL_11;
LABEL_21:
    v6 = 0.0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ v3 ^ v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6;
  }
LABEL_20:
  v5 = 0.0;
  if ((*((_BYTE *)this + 56) & 0x20) == 0)
    goto LABEL_21;
LABEL_11:
  v6 = *((double *)this + 6);
  if (v6 == 0.0)
    v6 = 0.0;
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ v3 ^ v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6;
}

void CMMsl::UltraFastAccel::~UltraFastAccel(CMMsl::UltraFastAccel *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_100354E38;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_100354E38;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_100354E38;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::UltraFastAccel::UltraFastAccel(uint64_t this, const CMMsl::UltraFastAccel *a2)
{
  uint64_t v2;

  *(_QWORD *)this = off_100354E38;
  *(_QWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 0;
  if (*((_QWORD *)a2 + 2))
    operator new();
  if ((*((_BYTE *)a2 + 24) & 1) != 0)
  {
    v2 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 24) |= 1u;
    *(_QWORD *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::UltraFastAccel::operator=(uint64_t a1, const CMMsl::UltraFastAccel *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (**v8)(CMMsl::UltraFastAccel *__hidden);
  uint64_t v9;
  uint64_t v10;
  int v11;

  if ((const CMMsl::UltraFastAccel *)a1 != a2)
  {
    CMMsl::UltraFastAccel::UltraFastAccel((uint64_t)&v8, a2);
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v11;
    v11 = v3;
    v5 = *(_QWORD *)(a1 + 8);
    v4 = *(_QWORD *)(a1 + 16);
    v6 = v10;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v6;
    v8 = off_100354E38;
    v9 = v5;
    v10 = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::UltraFastAccel *a2, CMMsl::UltraFastAccel *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v5 = *(_QWORD *)(this + 8);
  v4 = *(_QWORD *)(this + 16);
  v6 = *((_QWORD *)a2 + 2);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *(_QWORD *)(this + 16) = v6;
  *((_QWORD *)a2 + 1) = v5;
  *((_QWORD *)a2 + 2) = v4;
  return this;
}

uint64_t CMMsl::UltraFastAccel::UltraFastAccel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_100354E38;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_100354E38;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  return a1;
}

uint64_t CMMsl::UltraFastAccel::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v5 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    v6 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v3;
    v11 = v6;
    v8 = *(_QWORD *)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v4;
    v10[0] = off_100354E38;
    v10[1] = v8;
    v10[2] = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::UltraFastAccel::formatText(CMMsl::UltraFastAccel *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 24) & 1) != 0)
    PB::TextFormatter::format(a2, "aopTimestamp", *((_QWORD *)this + 1));
  v5 = *((_QWORD *)this + 2);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::UltraFastAccel::readFrom(CMMsl::UltraFastAccel *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t result;
  char v30;
  unsigned int v31;
  unint64_t v32;
  char v33;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 24) |= 1u;
        v21 = *((_QWORD *)a2 + 1);
        v22 = *((_QWORD *)a2 + 2);
        v23 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v22)
        {
          v30 = 0;
          v31 = 0;
          v26 = 0;
          if (v22 <= v21)
            v22 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v22 == v21)
            {
              v26 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_43;
            }
            v32 = v21 + 1;
            v33 = *(_BYTE *)(v23 + v21);
            *((_QWORD *)a2 + 1) = v32;
            v26 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0)
              break;
            v30 += 7;
            v21 = v32;
            v14 = v31++ > 8;
            if (v14)
            {
LABEL_39:
              v26 = 0;
              goto LABEL_43;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v26 = 0;
        }
        else
        {
          v24 = 0;
          v25 = 0;
          v26 = 0;
          while (1)
          {
            v27 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v28 = *(_BYTE *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0)
              break;
            v24 += 7;
            v21 = v27;
            v14 = v25++ > 8;
            if (v14)
              goto LABEL_39;
          }
        }
LABEL_43:
        *((_QWORD *)this + 1) = v26;
      }
      else
      {
        if ((_DWORD)v20 == 1)
          operator new();
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::UltraFastAccel::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = this;
  v4 = *(const PB::Base **)(this + 16);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  if ((*(_BYTE *)(v3 + 24) & 1) != 0)
    return PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 8), 2u);
  return this;
}

unint64_t CMMsl::UltraFastAccel::hash_value(CMMsl::UltraFastAccel *this)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    v2 = CMMsl::Accel::hash_value((CMMsl::Accel *)v2);
  if ((*((_BYTE *)this + 24) & 1) != 0)
    v3 = *((_QWORD *)this + 1);
  else
    v3 = 0;
  return v3 ^ v2;
}

uint64_t CMMsl::UltraFastAccel::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 16))
    operator new();
  return this;
}

void CMMsl::UserStudyEvent::~UserStudyEvent(CMMsl::UserStudyEvent *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_100354E70;
  v4 = *((_QWORD *)this + 1);
  v2 = (_QWORD *)((char *)this + 8);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_100011294((uint64_t)v2, v3);
  PB::Base::~Base(this);
}

{
  CMMsl::UserStudyEvent::~UserStudyEvent(this);
  operator delete();
}

uint64_t CMMsl::UserStudyEvent::UserStudyEvent(uint64_t this, const CMMsl::UserStudyEvent *a2)
{
  uint64_t v2;

  *(_QWORD *)this = off_100354E70;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  if ((*((_BYTE *)a2 + 24) & 1) != 0)
  {
    v2 = *((_QWORD *)a2 + 2);
    *(_BYTE *)(this + 24) = 1;
    *(_QWORD *)(this + 16) = v2;
  }
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

uint64_t CMMsl::UserStudyEvent::operator=(uint64_t a1, const CMMsl::UserStudyEvent *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  if ((const CMMsl::UserStudyEvent *)a1 != a2)
  {
    CMMsl::UserStudyEvent::UserStudyEvent((uint64_t)&v7, a2);
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v8 = v5;
    CMMsl::UserStudyEvent::~UserStudyEvent((CMMsl::UserStudyEvent *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::UserStudyEvent *a2, CMMsl::UserStudyEvent *a3)
{
  int v3;
  double result;
  uint64_t v5;

  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  return result;
}

uint64_t CMMsl::UserStudyEvent::UserStudyEvent(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_100354E70;
  *(_QWORD *)(a1 + 8) = 0;
  v3 = (uint64_t *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *v3;
  *v3 = v4;
  if (v5)
    sub_100011294((uint64_t)v3, v5);
  return a1;
}

uint64_t CMMsl::UserStudyEvent::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  if (a1 != a2)
  {
    CMMsl::UserStudyEvent::UserStudyEvent((uint64_t)&v7, a2);
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v8 = v5;
    CMMsl::UserStudyEvent::~UserStudyEvent((CMMsl::UserStudyEvent *)&v7);
  }
  return a1;
}

uint64_t CMMsl::UserStudyEvent::formatText(CMMsl::UserStudyEvent *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format(a2, "event");
  if ((*((_BYTE *)this + 24) & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::UserStudyEvent::readFrom(CMMsl::UserStudyEvent *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
        operator new();
      if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 24) |= 1u;
        v21 = *((_QWORD *)a2 + 1);
        if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v21);
          *((_QWORD *)a2 + 1) += 8;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::UserStudyEvent::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = this;
  if ((*(_BYTE *)(this + 24) & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4)
    return PB::Writer::write(a2, v4, 2);
  return this;
}

unint64_t CMMsl::UserStudyEvent::hash_value(CMMsl::UserStudyEvent *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v5;

  if ((*((_BYTE *)this + 24) & 1) != 0)
  {
    if (*((double *)this + 2) == 0.0)
      v1 = 0;
    else
      v1 = *((_QWORD *)this + 2);
  }
  else
  {
    v1 = 0;
  }
  v2 = *((_QWORD *)this + 1);
  if (v2)
    v3 = sub_1000112DC((uint64_t)&v5, v2);
  else
    v3 = 0;
  return v3 ^ v1;
}

void CMMsl::VIOEstimation::~VIOEstimation(CMMsl::VIOEstimation *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  *(_QWORD *)this = off_100354EA8;
  v2 = (void *)*((_QWORD *)this + 34);
  if (v2)
  {
    *((_QWORD *)this + 35) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 31);
  if (v3)
  {
    *((_QWORD *)this + 32) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 28);
  if (v4)
  {
    *((_QWORD *)this + 29) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 25);
  if (v5)
  {
    *((_QWORD *)this + 26) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 22);
  if (v6)
  {
    *((_QWORD *)this + 23) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 19);
  if (v7)
  {
    *((_QWORD *)this + 20) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 16);
  if (v8)
  {
    *((_QWORD *)this + 17) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 13);
  if (v9)
  {
    *((_QWORD *)this + 14) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 10);
  if (v10)
  {
    *((_QWORD *)this + 11) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 7);
  if (v11)
  {
    *((_QWORD *)this + 8) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 4);
  if (v12)
  {
    *((_QWORD *)this + 5) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 1);
  if (v13)
  {
    *((_QWORD *)this + 2) = v13;
    operator delete(v13);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::VIOEstimation::~VIOEstimation(this);
  operator delete();
}

CMMsl::VIOEstimation *CMMsl::VIOEstimation::VIOEstimation(CMMsl::VIOEstimation *this, const CMMsl::VIOEstimation *a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char v10;
  char v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  int v17;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)this = off_100354EA8;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  v5 = (char *)this + 56;
  *(_OWORD *)((char *)this + 104) = 0u;
  v6 = (char *)this + 104;
  *(_OWORD *)((char *)this + 152) = 0u;
  v7 = (char *)this + 152;
  *(_OWORD *)((char *)this + 200) = 0u;
  v8 = (char *)this + 200;
  *(_OWORD *)((char *)this + 248) = 0u;
  v9 = (char *)this + 248;
  *((_QWORD *)this + 42) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  v10 = *((_BYTE *)a2 + 340);
  if ((v10 & 0x40) != 0)
  {
    v12 = *((_DWORD *)a2 + 84);
    v11 = 64;
    *((_BYTE *)this + 340) = 64;
    *((_DWORD *)this + 84) = v12;
    v10 = *((_BYTE *)a2 + 340);
    if ((v10 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v11 = 0;
  if ((*((_BYTE *)a2 + 340) & 4) != 0)
  {
LABEL_5:
    v13 = *((_QWORD *)a2 + 39);
    v11 |= 4u;
    *((_BYTE *)this + 340) = v11;
    *((_QWORD *)this + 39) = v13;
    v10 = *((_BYTE *)a2 + 340);
  }
LABEL_6:
  if ((v10 & 1) != 0)
  {
    v19 = *((_QWORD *)a2 + 37);
    v11 |= 1u;
    *((_BYTE *)this + 340) = v11;
    *((_QWORD *)this + 37) = v19;
    v10 = *((_BYTE *)a2 + 340);
    if ((v10 & 8) == 0)
    {
LABEL_8:
      if ((v10 & 2) == 0)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  else if ((v10 & 8) == 0)
  {
    goto LABEL_8;
  }
  v20 = *((_QWORD *)a2 + 40);
  v11 |= 8u;
  *((_BYTE *)this + 340) = v11;
  *((_QWORD *)this + 40) = v20;
  if ((*((_BYTE *)a2 + 340) & 2) != 0)
  {
LABEL_9:
    v14 = *((_QWORD *)a2 + 38);
    *((_BYTE *)this + 340) = v11 | 2;
    *((_QWORD *)this + 38) = v14;
  }
LABEL_10:
  if (this != a2)
  {
    sub_100239350((char *)this + 176, *((char **)a2 + 22), *((_QWORD *)a2 + 23), (uint64_t)(*((_QWORD *)a2 + 23) - *((_QWORD *)a2 + 22)) >> 3);
    sub_100239350(v6, *((char **)a2 + 13), *((_QWORD *)a2 + 14), (uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 3);
    sub_100239350((char *)this + 272, *((char **)a2 + 34), *((_QWORD *)a2 + 35), (uint64_t)(*((_QWORD *)a2 + 35) - *((_QWORD *)a2 + 34)) >> 3);
    sub_100239350(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
    sub_100239350((char *)this + 224, *((char **)a2 + 28), *((_QWORD *)a2 + 29), (uint64_t)(*((_QWORD *)a2 + 29) - *((_QWORD *)a2 + 28)) >> 3);
    sub_100239350(v7, *((char **)a2 + 19), *((_QWORD *)a2 + 20), (uint64_t)(*((_QWORD *)a2 + 20) - *((_QWORD *)a2 + 19)) >> 3);
    sub_100239350((char *)this + 128, *((char **)a2 + 16), *((_QWORD *)a2 + 17), (uint64_t)(*((_QWORD *)a2 + 17) - *((_QWORD *)a2 + 16)) >> 3);
    sub_100239350(v9, *((char **)a2 + 31), *((_QWORD *)a2 + 32), (uint64_t)(*((_QWORD *)a2 + 32) - *((_QWORD *)a2 + 31)) >> 3);
    sub_100239350((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3);
    sub_100239350(v8, *((char **)a2 + 25), *((_QWORD *)a2 + 26), (uint64_t)(*((_QWORD *)a2 + 26) - *((_QWORD *)a2 + 25)) >> 3);
    sub_100239350((char *)this + 80, *((char **)a2 + 10), *((_QWORD *)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 3);
    sub_100239350(v5, *((char **)a2 + 7), *((_QWORD *)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 3);
  }
  v15 = *((_BYTE *)a2 + 340);
  if ((v15 & 0x20) != 0)
  {
    v16 = *((_DWORD *)a2 + 83);
    *((_BYTE *)this + 340) |= 0x20u;
    *((_DWORD *)this + 83) = v16;
    v15 = *((_BYTE *)a2 + 340);
  }
  if ((v15 & 0x10) != 0)
  {
    v17 = *((_DWORD *)a2 + 82);
    *((_BYTE *)this + 340) |= 0x10u;
    *((_DWORD *)this + 82) = v17;
  }
  return this;
}

CMMsl *CMMsl::VIOEstimation::operator=(CMMsl *a1, const CMMsl::VIOEstimation *a2)
{
  CMMsl::VIOEstimation *v3;
  _BYTE v5[344];

  if (a1 != a2)
  {
    CMMsl::VIOEstimation::VIOEstimation((CMMsl::VIOEstimation *)v5, a2);
    CMMsl::swap(a1, (CMMsl::VIOEstimation *)v5, v3);
    CMMsl::VIOEstimation::~VIOEstimation((CMMsl::VIOEstimation *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::VIOEstimation *a2, CMMsl::VIOEstimation *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float result;

  v3 = *((_DWORD *)this + 85);
  *((_DWORD *)this + 85) = *((_DWORD *)a2 + 85);
  *((_DWORD *)a2 + 85) = v3;
  v4 = *((_DWORD *)this + 84);
  *((_DWORD *)this + 84) = *((_DWORD *)a2 + 84);
  *((_DWORD *)a2 + 84) = v4;
  v5 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = *((_QWORD *)a2 + 39);
  *((_QWORD *)a2 + 39) = v5;
  v6 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = *((_QWORD *)a2 + 37);
  *((_QWORD *)a2 + 37) = v6;
  v7 = *((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = *((_QWORD *)a2 + 40);
  *((_QWORD *)a2 + 40) = v7;
  v8 = *((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = *((_QWORD *)a2 + 38);
  *((_QWORD *)a2 + 38) = v8;
  v9 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = *((_QWORD *)a2 + 22);
  *((_QWORD *)a2 + 22) = v9;
  v10 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = *((_QWORD *)a2 + 23);
  *((_QWORD *)a2 + 23) = v10;
  v11 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = *((_QWORD *)a2 + 24);
  *((_QWORD *)a2 + 24) = v11;
  v12 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v12;
  v13 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v13;
  v14 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v14;
  v15 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = *((_QWORD *)a2 + 34);
  *((_QWORD *)a2 + 34) = v15;
  v16 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = *((_QWORD *)a2 + 35);
  *((_QWORD *)a2 + 35) = v16;
  v17 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = *((_QWORD *)a2 + 36);
  *((_QWORD *)a2 + 36) = v17;
  v18 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v18;
  v19 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v19;
  v20 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v20;
  v21 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = *((_QWORD *)a2 + 28);
  *((_QWORD *)a2 + 28) = v21;
  v22 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = *((_QWORD *)a2 + 29);
  *((_QWORD *)a2 + 29) = v22;
  v23 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = *((_QWORD *)a2 + 30);
  *((_QWORD *)a2 + 30) = v23;
  v24 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v24;
  v25 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 20) = v25;
  v26 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
  *((_QWORD *)a2 + 21) = v26;
  v27 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v27;
  v28 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v28;
  v29 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v29;
  v30 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = *((_QWORD *)a2 + 31);
  *((_QWORD *)a2 + 31) = v30;
  v31 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = *((_QWORD *)a2 + 32);
  *((_QWORD *)a2 + 32) = v31;
  v32 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = *((_QWORD *)a2 + 33);
  *((_QWORD *)a2 + 33) = v32;
  v33 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v33;
  v34 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v34;
  v35 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v35;
  v36 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = *((_QWORD *)a2 + 25);
  *((_QWORD *)a2 + 25) = v36;
  v37 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = *((_QWORD *)a2 + 26);
  *((_QWORD *)a2 + 26) = v37;
  v38 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = *((_QWORD *)a2 + 27);
  *((_QWORD *)a2 + 27) = v38;
  v39 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v39;
  v40 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v40;
  v41 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v41;
  v42 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v42;
  v43 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v43;
  v44 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v44;
  LODWORD(v8) = *((_DWORD *)this + 83);
  *((_DWORD *)this + 83) = *((_DWORD *)a2 + 83);
  *((_DWORD *)a2 + 83) = v8;
  result = *((float *)this + 82);
  *((_DWORD *)this + 82) = *((_DWORD *)a2 + 82);
  *((float *)a2 + 82) = result;
  return result;
}

uint64_t CMMsl::VIOEstimation::VIOEstimation(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = off_100354EA8;
  v6 = a1 + 32;
  v7 = a1 + 80;
  v5 = a1 + 128;
  *(_DWORD *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 340) = *(_DWORD *)(a2 + 340);
  *(_DWORD *)(a2 + 340) = 0;
  *(_DWORD *)(a1 + 336) = *(_DWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  sub_100239458(a1 + 176, (__n128 *)(a2 + 176));
  sub_100239458(a1 + 104, (__n128 *)(a2 + 104));
  sub_100239458(a1 + 272, (__n128 *)(a2 + 272));
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  sub_100239458(a1 + 224, (__n128 *)(a2 + 224));
  sub_100239458(a1 + 152, (__n128 *)(a2 + 152));
  sub_100239458(v5, (__n128 *)(a2 + 128));
  sub_100239458(a1 + 248, (__n128 *)(a2 + 248));
  sub_100239458(v6, (__n128 *)(a2 + 32));
  sub_100239458(a1 + 200, (__n128 *)(a2 + 200));
  sub_100239458(v7, (__n128 *)(a2 + 80));
  sub_100239458(a1 + 56, (__n128 *)(a2 + 56));
  *(_DWORD *)(a1 + 332) = *(_DWORD *)(a2 + 332);
  *(_DWORD *)(a1 + 328) = *(_DWORD *)(a2 + 328);
  return a1;
}

CMMsl *CMMsl::VIOEstimation::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::VIOEstimation *v3;
  _BYTE v5[344];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::VIOEstimation::VIOEstimation((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::VIOEstimation *)v5, v3);
    CMMsl::VIOEstimation::~VIOEstimation((CMMsl::VIOEstimation *)v5);
  }
  return a1;
}

uint64_t CMMsl::VIOEstimation::formatText(CMMsl::VIOEstimation *this, PB::TextFormatter *a2, const char *a3)
{
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;
  char v11;
  double *v12;
  double *v13;
  double v14;
  double *v15;
  double *v16;
  double v17;
  double *v18;
  double *v19;
  double v20;
  double *v21;
  double *v22;
  double v23;
  char v24;
  double *v25;
  double *v26;
  double v27;
  double *v28;
  double *v29;
  double v30;
  double *v31;
  double *v32;
  double v33;
  double *v34;
  double *v35;
  double v36;
  char v37;
  double *v38;
  double *v39;
  double v40;
  double *v41;
  double *v42;
  double v43;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (double *)*((_QWORD *)this + 1);
  v6 = (double *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "accelBias", v7);
  }
  v8 = (double *)*((_QWORD *)this + 4);
  v9 = (double *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "accelBiasCov", v10);
  }
  v11 = *((_BYTE *)this + 340);
  if ((v11 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "cameraImageResolutionHeight", *((float *)this + 82));
    v11 = *((_BYTE *)this + 340);
  }
  if ((v11 & 0x20) != 0)
    PB::TextFormatter::format(a2, "cameraImageResolutionWidth", *((float *)this + 83));
  v12 = (double *)*((_QWORD *)this + 7);
  v13 = (double *)*((_QWORD *)this + 8);
  while (v12 != v13)
  {
    v14 = *v12++;
    PB::TextFormatter::format(a2, "cameraIntrinsics", v14);
  }
  v15 = (double *)*((_QWORD *)this + 10);
  v16 = (double *)*((_QWORD *)this + 11);
  while (v15 != v16)
  {
    v17 = *v15++;
    PB::TextFormatter::format(a2, "cameraPose", v17);
  }
  v18 = (double *)*((_QWORD *)this + 13);
  v19 = (double *)*((_QWORD *)this + 14);
  while (v18 != v19)
  {
    v20 = *v18++;
    PB::TextFormatter::format(a2, "gyroBias", v20);
  }
  v21 = (double *)*((_QWORD *)this + 16);
  v22 = (double *)*((_QWORD *)this + 17);
  while (v21 != v22)
  {
    v23 = *v21++;
    PB::TextFormatter::format(a2, "gyroBiasCov", v23);
  }
  v24 = *((_BYTE *)this + 340);
  if ((v24 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "machContinuousOriginTimestamp", *((double *)this + 37));
    v24 = *((_BYTE *)this + 340);
  }
  if ((v24 & 2) != 0)
    PB::TextFormatter::format(a2, "machContinuousTimestamp", *((double *)this + 38));
  v25 = (double *)*((_QWORD *)this + 22);
  v26 = (double *)*((_QWORD *)this + 23);
  while (v25 != v26)
  {
    v27 = *v25++;
    PB::TextFormatter::format(a2, "orientation", v27);
  }
  v28 = (double *)*((_QWORD *)this + 19);
  v29 = (double *)*((_QWORD *)this + 20);
  while (v28 != v29)
  {
    v30 = *v28++;
    PB::TextFormatter::format(a2, "orientationCov", v30);
  }
  if ((*((_BYTE *)this + 340) & 4) != 0)
    PB::TextFormatter::format(a2, "originTimestamp", *((double *)this + 39));
  v31 = (double *)*((_QWORD *)this + 28);
  v32 = (double *)*((_QWORD *)this + 29);
  while (v31 != v32)
  {
    v33 = *v31++;
    PB::TextFormatter::format(a2, "position", v33);
  }
  v34 = (double *)*((_QWORD *)this + 25);
  v35 = (double *)*((_QWORD *)this + 26);
  while (v34 != v35)
  {
    v36 = *v34++;
    PB::TextFormatter::format(a2, "positionCov", v36);
  }
  v37 = *((_BYTE *)this + 340);
  if ((v37 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 40));
    v37 = *((_BYTE *)this + 340);
  }
  if ((v37 & 0x40) != 0)
    PB::TextFormatter::format(a2, "trackingState", *((_DWORD *)this + 84));
  v38 = (double *)*((_QWORD *)this + 34);
  v39 = (double *)*((_QWORD *)this + 35);
  while (v38 != v39)
  {
    v40 = *v38++;
    PB::TextFormatter::format(a2, "velocity", v40);
  }
  v41 = (double *)*((_QWORD *)this + 31);
  v42 = (double *)*((_QWORD *)this + 32);
  while (v41 != v42)
  {
    v43 = *v41++;
    PB::TextFormatter::format(a2, "velocityCov", v43);
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::VIOEstimation::readFrom(CMMsl::VIOEstimation *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  void **v9;
  void **v10;
  uint64_t v11;
  char v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  _QWORD *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  _QWORD *v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  _QWORD *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  _QWORD *v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  _QWORD *v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  char *v123;
  _QWORD *v124;
  char *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  char *v137;
  _QWORD *v138;
  char *v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  char *v151;
  _QWORD *v152;
  char *v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  char *v165;
  _QWORD *v166;
  char *v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  char *v179;
  _QWORD *v180;
  char *v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  char *v193;
  _QWORD *v194;
  char *v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  unint64_t v199;
  char *v200;
  char *v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  char v207;
  unsigned int v208;
  unint64_t v209;
  char v210;
  unint64_t v211;
  char *v212;
  _QWORD *v213;
  unint64_t v214;
  char *v215;
  unint64_t v216;
  char *v217;
  unint64_t v218;
  char *v219;
  unint64_t v220;
  char *v221;
  unint64_t v222;
  char *v223;
  unint64_t v224;
  char *v225;
  unint64_t v226;
  char *v227;
  unint64_t v228;
  char *v229;
  unint64_t v230;
  char *v231;
  unint64_t v232;
  char *v233;
  unint64_t v234;
  char *v235;
  char *v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  unint64_t v240;
  char *v241;
  char *v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  unint64_t v246;
  char *v247;
  char *v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t v252;
  char *v253;
  char *v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t v258;
  char *v259;
  char *v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  unint64_t v264;
  char *v265;
  char *v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  unint64_t v270;
  char *v271;
  char *v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t v275;
  unint64_t v276;
  char *v277;
  char *v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t v281;
  unint64_t v282;
  char *v283;
  char *v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  unint64_t v288;
  char *v289;
  char *v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  unint64_t v294;
  char *v295;
  char *v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  unint64_t v300;
  char *v301;
  char *v302;
  uint64_t v303;
  unint64_t v304;
  uint64_t v305;
  unint64_t v306;
  char *v307;
  char *v308;
  uint64_t v309;
  char *v310;
  uint64_t v311;
  char *v312;
  uint64_t v313;
  char *v314;
  uint64_t v315;
  char *v316;
  uint64_t v317;
  char *v318;
  uint64_t v319;
  char *v320;
  uint64_t v321;
  char *v322;
  uint64_t v323;
  char *v324;
  uint64_t v325;
  char *v326;
  uint64_t v327;
  char *v328;
  uint64_t v329;
  char *v330;
  uint64_t v331;
  unint64_t v332;
  char *v335;
  char *v336;
  char *v337;
  char *v338;
  char *v339;
  char *v340;
  char *v341;
  char *v342;
  char *v343;
  char *v344;
  char *v345;
  char *v346;
  void **v347;
  void **v348;
  void **v349;
  void **v350;
  void **v351;
  void **v352;
  void **v353;
  void **v354;
  void **v355;
  _BYTE v356[24];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v355 = (void **)((char *)this + 56);
    v346 = (char *)this + 72;
    v354 = (void **)((char *)this + 80);
    v345 = (char *)this + 96;
    v353 = (void **)((char *)this + 200);
    v352 = (void **)((char *)this + 32);
    v343 = (char *)this + 48;
    v344 = (char *)this + 216;
    v342 = (char *)this + 264;
    v350 = (void **)((char *)this + 128);
    v351 = (void **)((char *)this + 248);
    v349 = (void **)((char *)this + 152);
    v340 = (char *)this + 168;
    v341 = (char *)this + 144;
    v339 = (char *)this + 240;
    v347 = (void **)((char *)this + 8);
    v348 = (void **)((char *)this + 224);
    v8 = (void **)((char *)this + 272);
    v337 = (char *)this + 288;
    v338 = (char *)this + 24;
    v9 = (void **)((char *)this + 104);
    v10 = (void **)((char *)this + 176);
    v335 = (char *)this + 192;
    v336 = (char *)this + 120;
    while (1)
    {
      v11 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      while (1)
      {
        v15 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v16 = *(_BYTE *)(v11 + v2);
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0)
          break;
        v12 += 7;
        v2 = v15;
        v17 = v13++ > 8;
        if (v17)
          goto LABEL_20;
      }
LABEL_21:
      v23 = v14 & 7;
      if (v23 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v14 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 340) |= 0x40u;
          v24 = *((_QWORD *)a2 + 1);
          v25 = *((_QWORD *)a2 + 2);
          v26 = *(_QWORD *)a2;
          if (v24 <= 0xFFFFFFFFFFFFFFF5 && v24 + 10 <= v25)
          {
            v27 = 0;
            v28 = 0;
            v29 = 0;
            do
            {
              v30 = v24 + 1;
              *((_QWORD *)a2 + 1) = v24 + 1;
              v31 = *(_BYTE *)(v26 + v24);
              v29 |= (unint64_t)(v31 & 0x7F) << v27;
              if ((v31 & 0x80) == 0)
                goto LABEL_471;
              v27 += 7;
              v24 = v30;
              v17 = v28++ > 8;
            }
            while (!v17);
LABEL_347:
            LODWORD(v29) = 0;
            goto LABEL_471;
          }
          v207 = 0;
          v208 = 0;
          v29 = 0;
          if (v25 <= v24)
            v25 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v25 == v24)
            {
              LODWORD(v29) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v209 = v24 + 1;
              v210 = *(_BYTE *)(v26 + v24);
              *((_QWORD *)a2 + 1) = v209;
              v29 |= (unint64_t)(v210 & 0x7F) << v207;
              if (v210 < 0)
              {
                v207 += 7;
                v24 = v209;
                v17 = v208++ > 8;
                if (v17)
                  goto LABEL_347;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v29) = 0;
            }
            break;
          }
LABEL_471:
          *((_DWORD *)this + 84) = v29;
          goto LABEL_562;
        case 2u:
          *((_BYTE *)this + 340) |= 4u;
          v32 = *((_QWORD *)a2 + 1);
          if (v32 > 0xFFFFFFFFFFFFFFF7 || v32 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_558;
          *((_QWORD *)this + 39) = *(_QWORD *)(*(_QWORD *)a2 + v32);
          goto LABEL_560;
        case 3u:
          *((_BYTE *)this + 340) |= 1u;
          v33 = *((_QWORD *)a2 + 1);
          if (v33 > 0xFFFFFFFFFFFFFFF7 || v33 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_558;
          *((_QWORD *)this + 37) = *(_QWORD *)(*(_QWORD *)a2 + v33);
          goto LABEL_560;
        case 4u:
          *((_BYTE *)this + 340) |= 8u;
          v34 = *((_QWORD *)a2 + 1);
          if (v34 > 0xFFFFFFFFFFFFFFF7 || v34 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_558;
          *((_QWORD *)this + 40) = *(_QWORD *)(*(_QWORD *)a2 + v34);
          goto LABEL_560;
        case 5u:
          *((_BYTE *)this + 340) |= 2u;
          v35 = *((_QWORD *)a2 + 1);
          if (v35 > 0xFFFFFFFFFFFFFFF7 || v35 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_558;
          *((_QWORD *)this + 38) = *(_QWORD *)(*(_QWORD *)a2 + v35);
          goto LABEL_560;
        case 6u:
          if (v23 != 2)
          {
            v212 = (char *)*((_QWORD *)this + 23);
            v211 = *((_QWORD *)this + 24);
            if ((unint64_t)v212 >= v211)
            {
              v236 = (char *)*v10;
              v237 = (v212 - (_BYTE *)*v10) >> 3;
              v238 = v237 + 1;
              if ((unint64_t)(v237 + 1) >> 61)
LABEL_572:
                sub_10000D5F8();
              v239 = v211 - (_QWORD)v236;
              if (v239 >> 2 > v238)
                v238 = v239 >> 2;
              if ((unint64_t)v239 >= 0x7FFFFFFFFFFFFFF8)
                v240 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v240 = v238;
              if (v240)
              {
                v241 = (char *)sub_10000D60C((uint64_t)v335, v240);
                v236 = (char *)*((_QWORD *)this + 22);
                v212 = (char *)*((_QWORD *)this + 23);
              }
              else
              {
                v241 = 0;
              }
              v308 = &v241[8 * v237];
              *(_QWORD *)v308 = 0;
              v213 = v308 + 8;
              while (v212 != v236)
              {
                v309 = *((_QWORD *)v212 - 1);
                v212 -= 8;
                *((_QWORD *)v308 - 1) = v309;
                v308 -= 8;
              }
              *((_QWORD *)this + 22) = v308;
              *((_QWORD *)this + 23) = v213;
              *((_QWORD *)this + 24) = &v241[8 * v240];
              if (v236)
                operator delete(v236);
            }
            else
            {
              *(_QWORD *)v212 = 0;
              v213 = v212 + 8;
            }
            *((_QWORD *)this + 23) = v213;
            goto LABEL_556;
          }
          if ((PB::Reader::placeMark(a2, v356) & 1) != 0)
            return 0;
          v36 = *((_QWORD *)a2 + 1);
          v37 = *((_QWORD *)a2 + 2);
          while (v36 < v37 && !*((_BYTE *)a2 + 24))
          {
            v39 = (char *)*((_QWORD *)this + 23);
            v38 = *((_QWORD *)this + 24);
            if ((unint64_t)v39 >= v38)
            {
              v41 = (char *)*v10;
              v42 = (v39 - (_BYTE *)*v10) >> 3;
              v43 = v42 + 1;
              if ((unint64_t)(v42 + 1) >> 61)
                goto LABEL_572;
              v44 = v38 - (_QWORD)v41;
              if (v44 >> 2 > v43)
                v43 = v44 >> 2;
              if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
                v45 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v45 = v43;
              if (v45)
              {
                v46 = (char *)sub_10000D60C((uint64_t)v335, v45);
                v41 = (char *)*((_QWORD *)this + 22);
                v39 = (char *)*((_QWORD *)this + 23);
              }
              else
              {
                v46 = 0;
              }
              v47 = &v46[8 * v42];
              *(_QWORD *)v47 = 0;
              v40 = v47 + 8;
              while (v39 != v41)
              {
                v48 = *((_QWORD *)v39 - 1);
                v39 -= 8;
                *((_QWORD *)v47 - 1) = v48;
                v47 -= 8;
              }
              *((_QWORD *)this + 22) = v47;
              *((_QWORD *)this + 23) = v40;
              *((_QWORD *)this + 24) = &v46[8 * v45];
              if (v41)
                operator delete(v41);
            }
            else
            {
              *(_QWORD *)v39 = 0;
              v40 = v39 + 8;
            }
            *((_QWORD *)this + 23) = v40;
            v49 = *((_QWORD *)a2 + 1);
            if (v49 > 0xFFFFFFFFFFFFFFF7 || v49 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_332;
            *(v40 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v49);
            v37 = *((_QWORD *)a2 + 2);
            v36 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v36;
          }
          goto LABEL_333;
        case 7u:
          if (v23 != 2)
          {
            v215 = (char *)*((_QWORD *)this + 14);
            v214 = *((_QWORD *)this + 15);
            if ((unint64_t)v215 >= v214)
            {
              v242 = (char *)*v9;
              v243 = (v215 - (_BYTE *)*v9) >> 3;
              v244 = v243 + 1;
              if ((unint64_t)(v243 + 1) >> 61)
LABEL_573:
                sub_10000D5F8();
              v245 = v214 - (_QWORD)v242;
              if (v245 >> 2 > v244)
                v244 = v245 >> 2;
              if ((unint64_t)v245 >= 0x7FFFFFFFFFFFFFF8)
                v246 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v246 = v244;
              if (v246)
              {
                v247 = (char *)sub_10000D60C((uint64_t)v336, v246);
                v242 = (char *)*((_QWORD *)this + 13);
                v215 = (char *)*((_QWORD *)this + 14);
              }
              else
              {
                v247 = 0;
              }
              v310 = &v247[8 * v243];
              *(_QWORD *)v310 = 0;
              v213 = v310 + 8;
              while (v215 != v242)
              {
                v311 = *((_QWORD *)v215 - 1);
                v215 -= 8;
                *((_QWORD *)v310 - 1) = v311;
                v310 -= 8;
              }
              *((_QWORD *)this + 13) = v310;
              *((_QWORD *)this + 14) = v213;
              *((_QWORD *)this + 15) = &v247[8 * v246];
              if (v242)
                operator delete(v242);
            }
            else
            {
              *(_QWORD *)v215 = 0;
              v213 = v215 + 8;
            }
            *((_QWORD *)this + 14) = v213;
            goto LABEL_556;
          }
          if ((PB::Reader::placeMark(a2, v356) & 1) != 0)
            return 0;
          v50 = *((_QWORD *)a2 + 1);
          v51 = *((_QWORD *)a2 + 2);
          while (v50 < v51 && !*((_BYTE *)a2 + 24))
          {
            v53 = (char *)*((_QWORD *)this + 14);
            v52 = *((_QWORD *)this + 15);
            if ((unint64_t)v53 >= v52)
            {
              v55 = (char *)*v9;
              v56 = (v53 - (_BYTE *)*v9) >> 3;
              v57 = v56 + 1;
              if ((unint64_t)(v56 + 1) >> 61)
                goto LABEL_573;
              v58 = v52 - (_QWORD)v55;
              if (v58 >> 2 > v57)
                v57 = v58 >> 2;
              if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
                v59 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v59 = v57;
              if (v59)
              {
                v60 = (char *)sub_10000D60C((uint64_t)v336, v59);
                v55 = (char *)*((_QWORD *)this + 13);
                v53 = (char *)*((_QWORD *)this + 14);
              }
              else
              {
                v60 = 0;
              }
              v61 = &v60[8 * v56];
              *(_QWORD *)v61 = 0;
              v54 = v61 + 8;
              while (v53 != v55)
              {
                v62 = *((_QWORD *)v53 - 1);
                v53 -= 8;
                *((_QWORD *)v61 - 1) = v62;
                v61 -= 8;
              }
              *((_QWORD *)this + 13) = v61;
              *((_QWORD *)this + 14) = v54;
              *((_QWORD *)this + 15) = &v60[8 * v59];
              if (v55)
                operator delete(v55);
            }
            else
            {
              *(_QWORD *)v53 = 0;
              v54 = v53 + 8;
            }
            *((_QWORD *)this + 14) = v54;
            v63 = *((_QWORD *)a2 + 1);
            if (v63 > 0xFFFFFFFFFFFFFFF7 || v63 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_332;
            *(v54 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v63);
            v51 = *((_QWORD *)a2 + 2);
            v50 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v50;
          }
          goto LABEL_333;
        case 8u:
          if (v23 != 2)
          {
            v217 = (char *)*((_QWORD *)this + 35);
            v216 = *((_QWORD *)this + 36);
            if ((unint64_t)v217 >= v216)
            {
              v248 = (char *)*v8;
              v249 = (v217 - (_BYTE *)*v8) >> 3;
              v250 = v249 + 1;
              if ((unint64_t)(v249 + 1) >> 61)
LABEL_574:
                sub_10000D5F8();
              v251 = v216 - (_QWORD)v248;
              if (v251 >> 2 > v250)
                v250 = v251 >> 2;
              if ((unint64_t)v251 >= 0x7FFFFFFFFFFFFFF8)
                v252 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v252 = v250;
              if (v252)
              {
                v253 = (char *)sub_10000D60C((uint64_t)v337, v252);
                v248 = (char *)*((_QWORD *)this + 34);
                v217 = (char *)*((_QWORD *)this + 35);
              }
              else
              {
                v253 = 0;
              }
              v312 = &v253[8 * v249];
              *(_QWORD *)v312 = 0;
              v213 = v312 + 8;
              while (v217 != v248)
              {
                v313 = *((_QWORD *)v217 - 1);
                v217 -= 8;
                *((_QWORD *)v312 - 1) = v313;
                v312 -= 8;
              }
              *((_QWORD *)this + 34) = v312;
              *((_QWORD *)this + 35) = v213;
              *((_QWORD *)this + 36) = &v253[8 * v252];
              if (v248)
                operator delete(v248);
            }
            else
            {
              *(_QWORD *)v217 = 0;
              v213 = v217 + 8;
            }
            *((_QWORD *)this + 35) = v213;
            goto LABEL_556;
          }
          if ((PB::Reader::placeMark(a2, v356) & 1) != 0)
            return 0;
          v64 = *((_QWORD *)a2 + 1);
          v65 = *((_QWORD *)a2 + 2);
          while (v64 < v65 && !*((_BYTE *)a2 + 24))
          {
            v67 = (char *)*((_QWORD *)this + 35);
            v66 = *((_QWORD *)this + 36);
            if ((unint64_t)v67 >= v66)
            {
              v69 = (char *)*v8;
              v70 = (v67 - (_BYTE *)*v8) >> 3;
              v71 = v70 + 1;
              if ((unint64_t)(v70 + 1) >> 61)
                goto LABEL_574;
              v72 = v66 - (_QWORD)v69;
              if (v72 >> 2 > v71)
                v71 = v72 >> 2;
              if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8)
                v73 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v73 = v71;
              if (v73)
              {
                v74 = (char *)sub_10000D60C((uint64_t)v337, v73);
                v69 = (char *)*((_QWORD *)this + 34);
                v67 = (char *)*((_QWORD *)this + 35);
              }
              else
              {
                v74 = 0;
              }
              v75 = &v74[8 * v70];
              *(_QWORD *)v75 = 0;
              v68 = v75 + 8;
              while (v67 != v69)
              {
                v76 = *((_QWORD *)v67 - 1);
                v67 -= 8;
                *((_QWORD *)v75 - 1) = v76;
                v75 -= 8;
              }
              *((_QWORD *)this + 34) = v75;
              *((_QWORD *)this + 35) = v68;
              *((_QWORD *)this + 36) = &v74[8 * v73];
              if (v69)
                operator delete(v69);
            }
            else
            {
              *(_QWORD *)v67 = 0;
              v68 = v67 + 8;
            }
            *((_QWORD *)this + 35) = v68;
            v77 = *((_QWORD *)a2 + 1);
            if (v77 > 0xFFFFFFFFFFFFFFF7 || v77 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_332;
            *(v68 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v77);
            v65 = *((_QWORD *)a2 + 2);
            v64 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v64;
          }
          goto LABEL_333;
        case 9u:
          if (v23 != 2)
          {
            v219 = (char *)*((_QWORD *)this + 2);
            v218 = *((_QWORD *)this + 3);
            if ((unint64_t)v219 >= v218)
            {
              v254 = (char *)*v347;
              v255 = (v219 - (_BYTE *)*v347) >> 3;
              v256 = v255 + 1;
              if ((unint64_t)(v255 + 1) >> 61)
LABEL_575:
                sub_10000D5F8();
              v257 = v218 - (_QWORD)v254;
              if (v257 >> 2 > v256)
                v256 = v257 >> 2;
              if ((unint64_t)v257 >= 0x7FFFFFFFFFFFFFF8)
                v258 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v258 = v256;
              if (v258)
              {
                v259 = (char *)sub_10000D60C((uint64_t)v338, v258);
                v254 = (char *)*((_QWORD *)this + 1);
                v219 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v259 = 0;
              }
              v314 = &v259[8 * v255];
              *(_QWORD *)v314 = 0;
              v213 = v314 + 8;
              while (v219 != v254)
              {
                v315 = *((_QWORD *)v219 - 1);
                v219 -= 8;
                *((_QWORD *)v314 - 1) = v315;
                v314 -= 8;
              }
              *((_QWORD *)this + 1) = v314;
              *((_QWORD *)this + 2) = v213;
              *((_QWORD *)this + 3) = &v259[8 * v258];
              if (v254)
                operator delete(v254);
            }
            else
            {
              *(_QWORD *)v219 = 0;
              v213 = v219 + 8;
            }
            *((_QWORD *)this + 2) = v213;
            goto LABEL_556;
          }
          if ((PB::Reader::placeMark(a2, v356) & 1) != 0)
            return 0;
          v78 = *((_QWORD *)a2 + 1);
          v79 = *((_QWORD *)a2 + 2);
          while (v78 < v79 && !*((_BYTE *)a2 + 24))
          {
            v81 = (char *)*((_QWORD *)this + 2);
            v80 = *((_QWORD *)this + 3);
            if ((unint64_t)v81 >= v80)
            {
              v83 = (char *)*v347;
              v84 = (v81 - (_BYTE *)*v347) >> 3;
              v85 = v84 + 1;
              if ((unint64_t)(v84 + 1) >> 61)
                goto LABEL_575;
              v86 = v80 - (_QWORD)v83;
              if (v86 >> 2 > v85)
                v85 = v86 >> 2;
              if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF8)
                v87 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v87 = v85;
              if (v87)
              {
                v88 = (char *)sub_10000D60C((uint64_t)v338, v87);
                v83 = (char *)*((_QWORD *)this + 1);
                v81 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v88 = 0;
              }
              v89 = &v88[8 * v84];
              *(_QWORD *)v89 = 0;
              v82 = v89 + 8;
              while (v81 != v83)
              {
                v90 = *((_QWORD *)v81 - 1);
                v81 -= 8;
                *((_QWORD *)v89 - 1) = v90;
                v89 -= 8;
              }
              *((_QWORD *)this + 1) = v89;
              *((_QWORD *)this + 2) = v82;
              *((_QWORD *)this + 3) = &v88[8 * v87];
              if (v83)
                operator delete(v83);
            }
            else
            {
              *(_QWORD *)v81 = 0;
              v82 = v81 + 8;
            }
            *((_QWORD *)this + 2) = v82;
            v91 = *((_QWORD *)a2 + 1);
            if (v91 > 0xFFFFFFFFFFFFFFF7 || v91 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_332;
            *(v82 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v91);
            v79 = *((_QWORD *)a2 + 2);
            v78 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v78;
          }
          goto LABEL_333;
        case 0xAu:
          if (v23 != 2)
          {
            v221 = (char *)*((_QWORD *)this + 29);
            v220 = *((_QWORD *)this + 30);
            if ((unint64_t)v221 >= v220)
            {
              v260 = (char *)*v348;
              v261 = (v221 - (_BYTE *)*v348) >> 3;
              v262 = v261 + 1;
              if ((unint64_t)(v261 + 1) >> 61)
LABEL_576:
                sub_10000D5F8();
              v263 = v220 - (_QWORD)v260;
              if (v263 >> 2 > v262)
                v262 = v263 >> 2;
              if ((unint64_t)v263 >= 0x7FFFFFFFFFFFFFF8)
                v264 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v264 = v262;
              if (v264)
              {
                v265 = (char *)sub_10000D60C((uint64_t)v339, v264);
                v260 = (char *)*((_QWORD *)this + 28);
                v221 = (char *)*((_QWORD *)this + 29);
              }
              else
              {
                v265 = 0;
              }
              v316 = &v265[8 * v261];
              *(_QWORD *)v316 = 0;
              v213 = v316 + 8;
              while (v221 != v260)
              {
                v317 = *((_QWORD *)v221 - 1);
                v221 -= 8;
                *((_QWORD *)v316 - 1) = v317;
                v316 -= 8;
              }
              *((_QWORD *)this + 28) = v316;
              *((_QWORD *)this + 29) = v213;
              *((_QWORD *)this + 30) = &v265[8 * v264];
              if (v260)
                operator delete(v260);
            }
            else
            {
              *(_QWORD *)v221 = 0;
              v213 = v221 + 8;
            }
            *((_QWORD *)this + 29) = v213;
            goto LABEL_556;
          }
          if ((PB::Reader::placeMark(a2, v356) & 1) != 0)
            return 0;
          v92 = *((_QWORD *)a2 + 1);
          v93 = *((_QWORD *)a2 + 2);
          while (v92 < v93 && !*((_BYTE *)a2 + 24))
          {
            v95 = (char *)*((_QWORD *)this + 29);
            v94 = *((_QWORD *)this + 30);
            if ((unint64_t)v95 >= v94)
            {
              v97 = (char *)*v348;
              v98 = (v95 - (_BYTE *)*v348) >> 3;
              v99 = v98 + 1;
              if ((unint64_t)(v98 + 1) >> 61)
                goto LABEL_576;
              v100 = v94 - (_QWORD)v97;
              if (v100 >> 2 > v99)
                v99 = v100 >> 2;
              if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFF8)
                v101 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v101 = v99;
              if (v101)
              {
                v102 = (char *)sub_10000D60C((uint64_t)v339, v101);
                v97 = (char *)*((_QWORD *)this + 28);
                v95 = (char *)*((_QWORD *)this + 29);
              }
              else
              {
                v102 = 0;
              }
              v103 = &v102[8 * v98];
              *(_QWORD *)v103 = 0;
              v96 = v103 + 8;
              while (v95 != v97)
              {
                v104 = *((_QWORD *)v95 - 1);
                v95 -= 8;
                *((_QWORD *)v103 - 1) = v104;
                v103 -= 8;
              }
              *((_QWORD *)this + 28) = v103;
              *((_QWORD *)this + 29) = v96;
              *((_QWORD *)this + 30) = &v102[8 * v101];
              if (v97)
                operator delete(v97);
            }
            else
            {
              *(_QWORD *)v95 = 0;
              v96 = v95 + 8;
            }
            *((_QWORD *)this + 29) = v96;
            v105 = *((_QWORD *)a2 + 1);
            if (v105 > 0xFFFFFFFFFFFFFFF7 || v105 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_332;
            *(v96 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v105);
            v93 = *((_QWORD *)a2 + 2);
            v92 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v92;
          }
          goto LABEL_333;
        case 0xBu:
          if (v23 != 2)
          {
            v223 = (char *)*((_QWORD *)this + 20);
            v222 = *((_QWORD *)this + 21);
            if ((unint64_t)v223 >= v222)
            {
              v266 = (char *)*v349;
              v267 = (v223 - (_BYTE *)*v349) >> 3;
              v268 = v267 + 1;
              if ((unint64_t)(v267 + 1) >> 61)
LABEL_577:
                sub_10000D5F8();
              v269 = v222 - (_QWORD)v266;
              if (v269 >> 2 > v268)
                v268 = v269 >> 2;
              if ((unint64_t)v269 >= 0x7FFFFFFFFFFFFFF8)
                v270 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v270 = v268;
              if (v270)
              {
                v271 = (char *)sub_10000D60C((uint64_t)v340, v270);
                v266 = (char *)*((_QWORD *)this + 19);
                v223 = (char *)*((_QWORD *)this + 20);
              }
              else
              {
                v271 = 0;
              }
              v318 = &v271[8 * v267];
              *(_QWORD *)v318 = 0;
              v213 = v318 + 8;
              while (v223 != v266)
              {
                v319 = *((_QWORD *)v223 - 1);
                v223 -= 8;
                *((_QWORD *)v318 - 1) = v319;
                v318 -= 8;
              }
              *((_QWORD *)this + 19) = v318;
              *((_QWORD *)this + 20) = v213;
              *((_QWORD *)this + 21) = &v271[8 * v270];
              if (v266)
                operator delete(v266);
            }
            else
            {
              *(_QWORD *)v223 = 0;
              v213 = v223 + 8;
            }
            *((_QWORD *)this + 20) = v213;
            goto LABEL_556;
          }
          if ((PB::Reader::placeMark(a2, v356) & 1) != 0)
            return 0;
          v106 = *((_QWORD *)a2 + 1);
          v107 = *((_QWORD *)a2 + 2);
          while (v106 < v107 && !*((_BYTE *)a2 + 24))
          {
            v109 = (char *)*((_QWORD *)this + 20);
            v108 = *((_QWORD *)this + 21);
            if ((unint64_t)v109 >= v108)
            {
              v111 = (char *)*v349;
              v112 = (v109 - (_BYTE *)*v349) >> 3;
              v113 = v112 + 1;
              if ((unint64_t)(v112 + 1) >> 61)
                goto LABEL_577;
              v114 = v108 - (_QWORD)v111;
              if (v114 >> 2 > v113)
                v113 = v114 >> 2;
              if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFF8)
                v115 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v115 = v113;
              if (v115)
              {
                v116 = (char *)sub_10000D60C((uint64_t)v340, v115);
                v111 = (char *)*((_QWORD *)this + 19);
                v109 = (char *)*((_QWORD *)this + 20);
              }
              else
              {
                v116 = 0;
              }
              v117 = &v116[8 * v112];
              *(_QWORD *)v117 = 0;
              v110 = v117 + 8;
              while (v109 != v111)
              {
                v118 = *((_QWORD *)v109 - 1);
                v109 -= 8;
                *((_QWORD *)v117 - 1) = v118;
                v117 -= 8;
              }
              *((_QWORD *)this + 19) = v117;
              *((_QWORD *)this + 20) = v110;
              *((_QWORD *)this + 21) = &v116[8 * v115];
              if (v111)
                operator delete(v111);
            }
            else
            {
              *(_QWORD *)v109 = 0;
              v110 = v109 + 8;
            }
            *((_QWORD *)this + 20) = v110;
            v119 = *((_QWORD *)a2 + 1);
            if (v119 > 0xFFFFFFFFFFFFFFF7 || v119 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_332;
            *(v110 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v119);
            v107 = *((_QWORD *)a2 + 2);
            v106 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v106;
          }
          goto LABEL_333;
        case 0xCu:
          if (v23 != 2)
          {
            v225 = (char *)*((_QWORD *)this + 17);
            v224 = *((_QWORD *)this + 18);
            if ((unint64_t)v225 >= v224)
            {
              v272 = (char *)*v350;
              v273 = (v225 - (_BYTE *)*v350) >> 3;
              v274 = v273 + 1;
              if ((unint64_t)(v273 + 1) >> 61)
LABEL_578:
                sub_10000D5F8();
              v275 = v224 - (_QWORD)v272;
              if (v275 >> 2 > v274)
                v274 = v275 >> 2;
              if ((unint64_t)v275 >= 0x7FFFFFFFFFFFFFF8)
                v276 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v276 = v274;
              if (v276)
              {
                v277 = (char *)sub_10000D60C((uint64_t)v341, v276);
                v272 = (char *)*((_QWORD *)this + 16);
                v225 = (char *)*((_QWORD *)this + 17);
              }
              else
              {
                v277 = 0;
              }
              v320 = &v277[8 * v273];
              *(_QWORD *)v320 = 0;
              v213 = v320 + 8;
              while (v225 != v272)
              {
                v321 = *((_QWORD *)v225 - 1);
                v225 -= 8;
                *((_QWORD *)v320 - 1) = v321;
                v320 -= 8;
              }
              *((_QWORD *)this + 16) = v320;
              *((_QWORD *)this + 17) = v213;
              *((_QWORD *)this + 18) = &v277[8 * v276];
              if (v272)
                operator delete(v272);
            }
            else
            {
              *(_QWORD *)v225 = 0;
              v213 = v225 + 8;
            }
            *((_QWORD *)this + 17) = v213;
            goto LABEL_556;
          }
          if ((PB::Reader::placeMark(a2, v356) & 1) != 0)
            return 0;
          v120 = *((_QWORD *)a2 + 1);
          v121 = *((_QWORD *)a2 + 2);
          while (v120 < v121 && !*((_BYTE *)a2 + 24))
          {
            v123 = (char *)*((_QWORD *)this + 17);
            v122 = *((_QWORD *)this + 18);
            if ((unint64_t)v123 >= v122)
            {
              v125 = (char *)*v350;
              v126 = (v123 - (_BYTE *)*v350) >> 3;
              v127 = v126 + 1;
              if ((unint64_t)(v126 + 1) >> 61)
                goto LABEL_578;
              v128 = v122 - (_QWORD)v125;
              if (v128 >> 2 > v127)
                v127 = v128 >> 2;
              if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFF8)
                v129 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v129 = v127;
              if (v129)
              {
                v130 = (char *)sub_10000D60C((uint64_t)v341, v129);
                v125 = (char *)*((_QWORD *)this + 16);
                v123 = (char *)*((_QWORD *)this + 17);
              }
              else
              {
                v130 = 0;
              }
              v131 = &v130[8 * v126];
              *(_QWORD *)v131 = 0;
              v124 = v131 + 8;
              while (v123 != v125)
              {
                v132 = *((_QWORD *)v123 - 1);
                v123 -= 8;
                *((_QWORD *)v131 - 1) = v132;
                v131 -= 8;
              }
              *((_QWORD *)this + 16) = v131;
              *((_QWORD *)this + 17) = v124;
              *((_QWORD *)this + 18) = &v130[8 * v129];
              if (v125)
                operator delete(v125);
            }
            else
            {
              *(_QWORD *)v123 = 0;
              v124 = v123 + 8;
            }
            *((_QWORD *)this + 17) = v124;
            v133 = *((_QWORD *)a2 + 1);
            if (v133 > 0xFFFFFFFFFFFFFFF7 || v133 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_332;
            *(v124 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v133);
            v121 = *((_QWORD *)a2 + 2);
            v120 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v120;
          }
          goto LABEL_333;
        case 0xDu:
          if (v23 != 2)
          {
            v227 = (char *)*((_QWORD *)this + 32);
            v226 = *((_QWORD *)this + 33);
            if ((unint64_t)v227 >= v226)
            {
              v278 = (char *)*v351;
              v279 = (v227 - (_BYTE *)*v351) >> 3;
              v280 = v279 + 1;
              if ((unint64_t)(v279 + 1) >> 61)
LABEL_579:
                sub_10000D5F8();
              v281 = v226 - (_QWORD)v278;
              if (v281 >> 2 > v280)
                v280 = v281 >> 2;
              if ((unint64_t)v281 >= 0x7FFFFFFFFFFFFFF8)
                v282 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v282 = v280;
              if (v282)
              {
                v283 = (char *)sub_10000D60C((uint64_t)v342, v282);
                v278 = (char *)*((_QWORD *)this + 31);
                v227 = (char *)*((_QWORD *)this + 32);
              }
              else
              {
                v283 = 0;
              }
              v322 = &v283[8 * v279];
              *(_QWORD *)v322 = 0;
              v213 = v322 + 8;
              while (v227 != v278)
              {
                v323 = *((_QWORD *)v227 - 1);
                v227 -= 8;
                *((_QWORD *)v322 - 1) = v323;
                v322 -= 8;
              }
              *((_QWORD *)this + 31) = v322;
              *((_QWORD *)this + 32) = v213;
              *((_QWORD *)this + 33) = &v283[8 * v282];
              if (v278)
                operator delete(v278);
            }
            else
            {
              *(_QWORD *)v227 = 0;
              v213 = v227 + 8;
            }
            *((_QWORD *)this + 32) = v213;
            goto LABEL_556;
          }
          if ((PB::Reader::placeMark(a2, v356) & 1) != 0)
            return 0;
          v134 = *((_QWORD *)a2 + 1);
          v135 = *((_QWORD *)a2 + 2);
          while (v134 < v135 && !*((_BYTE *)a2 + 24))
          {
            v137 = (char *)*((_QWORD *)this + 32);
            v136 = *((_QWORD *)this + 33);
            if ((unint64_t)v137 >= v136)
            {
              v139 = (char *)*v351;
              v140 = (v137 - (_BYTE *)*v351) >> 3;
              v141 = v140 + 1;
              if ((unint64_t)(v140 + 1) >> 61)
                goto LABEL_579;
              v142 = v136 - (_QWORD)v139;
              if (v142 >> 2 > v141)
                v141 = v142 >> 2;
              if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFF8)
                v143 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v143 = v141;
              if (v143)
              {
                v144 = (char *)sub_10000D60C((uint64_t)v342, v143);
                v139 = (char *)*((_QWORD *)this + 31);
                v137 = (char *)*((_QWORD *)this + 32);
              }
              else
              {
                v144 = 0;
              }
              v145 = &v144[8 * v140];
              *(_QWORD *)v145 = 0;
              v138 = v145 + 8;
              while (v137 != v139)
              {
                v146 = *((_QWORD *)v137 - 1);
                v137 -= 8;
                *((_QWORD *)v145 - 1) = v146;
                v145 -= 8;
              }
              *((_QWORD *)this + 31) = v145;
              *((_QWORD *)this + 32) = v138;
              *((_QWORD *)this + 33) = &v144[8 * v143];
              if (v139)
                operator delete(v139);
            }
            else
            {
              *(_QWORD *)v137 = 0;
              v138 = v137 + 8;
            }
            *((_QWORD *)this + 32) = v138;
            v147 = *((_QWORD *)a2 + 1);
            if (v147 > 0xFFFFFFFFFFFFFFF7 || v147 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_332;
            *(v138 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v147);
            v135 = *((_QWORD *)a2 + 2);
            v134 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v134;
          }
          goto LABEL_333;
        case 0xEu:
          if (v23 != 2)
          {
            v229 = (char *)*((_QWORD *)this + 5);
            v228 = *((_QWORD *)this + 6);
            if ((unint64_t)v229 >= v228)
            {
              v284 = (char *)*v352;
              v285 = (v229 - (_BYTE *)*v352) >> 3;
              v286 = v285 + 1;
              if ((unint64_t)(v285 + 1) >> 61)
LABEL_580:
                sub_10000D5F8();
              v287 = v228 - (_QWORD)v284;
              if (v287 >> 2 > v286)
                v286 = v287 >> 2;
              if ((unint64_t)v287 >= 0x7FFFFFFFFFFFFFF8)
                v288 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v288 = v286;
              if (v288)
              {
                v289 = (char *)sub_10000D60C((uint64_t)v343, v288);
                v284 = (char *)*((_QWORD *)this + 4);
                v229 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v289 = 0;
              }
              v324 = &v289[8 * v285];
              *(_QWORD *)v324 = 0;
              v213 = v324 + 8;
              while (v229 != v284)
              {
                v325 = *((_QWORD *)v229 - 1);
                v229 -= 8;
                *((_QWORD *)v324 - 1) = v325;
                v324 -= 8;
              }
              *((_QWORD *)this + 4) = v324;
              *((_QWORD *)this + 5) = v213;
              *((_QWORD *)this + 6) = &v289[8 * v288];
              if (v284)
                operator delete(v284);
            }
            else
            {
              *(_QWORD *)v229 = 0;
              v213 = v229 + 8;
            }
            *((_QWORD *)this + 5) = v213;
            goto LABEL_556;
          }
          if ((PB::Reader::placeMark(a2, v356) & 1) != 0)
            return 0;
          v148 = *((_QWORD *)a2 + 1);
          v149 = *((_QWORD *)a2 + 2);
          while (v148 < v149 && !*((_BYTE *)a2 + 24))
          {
            v151 = (char *)*((_QWORD *)this + 5);
            v150 = *((_QWORD *)this + 6);
            if ((unint64_t)v151 >= v150)
            {
              v153 = (char *)*v352;
              v154 = (v151 - (_BYTE *)*v352) >> 3;
              v155 = v154 + 1;
              if ((unint64_t)(v154 + 1) >> 61)
                goto LABEL_580;
              v156 = v150 - (_QWORD)v153;
              if (v156 >> 2 > v155)
                v155 = v156 >> 2;
              if ((unint64_t)v156 >= 0x7FFFFFFFFFFFFFF8)
                v157 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v157 = v155;
              if (v157)
              {
                v158 = (char *)sub_10000D60C((uint64_t)v343, v157);
                v153 = (char *)*((_QWORD *)this + 4);
                v151 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v158 = 0;
              }
              v159 = &v158[8 * v154];
              *(_QWORD *)v159 = 0;
              v152 = v159 + 8;
              while (v151 != v153)
              {
                v160 = *((_QWORD *)v151 - 1);
                v151 -= 8;
                *((_QWORD *)v159 - 1) = v160;
                v159 -= 8;
              }
              *((_QWORD *)this + 4) = v159;
              *((_QWORD *)this + 5) = v152;
              *((_QWORD *)this + 6) = &v158[8 * v157];
              if (v153)
                operator delete(v153);
            }
            else
            {
              *(_QWORD *)v151 = 0;
              v152 = v151 + 8;
            }
            *((_QWORD *)this + 5) = v152;
            v161 = *((_QWORD *)a2 + 1);
            if (v161 > 0xFFFFFFFFFFFFFFF7 || v161 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_332;
            *(v152 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v161);
            v149 = *((_QWORD *)a2 + 2);
            v148 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v148;
          }
          goto LABEL_333;
        case 0xFu:
          if (v23 != 2)
          {
            v231 = (char *)*((_QWORD *)this + 26);
            v230 = *((_QWORD *)this + 27);
            if ((unint64_t)v231 >= v230)
            {
              v290 = (char *)*v353;
              v291 = (v231 - (_BYTE *)*v353) >> 3;
              v292 = v291 + 1;
              if ((unint64_t)(v291 + 1) >> 61)
LABEL_581:
                sub_10000D5F8();
              v293 = v230 - (_QWORD)v290;
              if (v293 >> 2 > v292)
                v292 = v293 >> 2;
              if ((unint64_t)v293 >= 0x7FFFFFFFFFFFFFF8)
                v294 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v294 = v292;
              if (v294)
              {
                v295 = (char *)sub_10000D60C((uint64_t)v344, v294);
                v290 = (char *)*((_QWORD *)this + 25);
                v231 = (char *)*((_QWORD *)this + 26);
              }
              else
              {
                v295 = 0;
              }
              v326 = &v295[8 * v291];
              *(_QWORD *)v326 = 0;
              v213 = v326 + 8;
              while (v231 != v290)
              {
                v327 = *((_QWORD *)v231 - 1);
                v231 -= 8;
                *((_QWORD *)v326 - 1) = v327;
                v326 -= 8;
              }
              *((_QWORD *)this + 25) = v326;
              *((_QWORD *)this + 26) = v213;
              *((_QWORD *)this + 27) = &v295[8 * v294];
              if (v290)
                operator delete(v290);
            }
            else
            {
              *(_QWORD *)v231 = 0;
              v213 = v231 + 8;
            }
            *((_QWORD *)this + 26) = v213;
            goto LABEL_556;
          }
          if ((PB::Reader::placeMark(a2, v356) & 1) != 0)
            return 0;
          v162 = *((_QWORD *)a2 + 1);
          v163 = *((_QWORD *)a2 + 2);
          while (v162 < v163 && !*((_BYTE *)a2 + 24))
          {
            v165 = (char *)*((_QWORD *)this + 26);
            v164 = *((_QWORD *)this + 27);
            if ((unint64_t)v165 >= v164)
            {
              v167 = (char *)*v353;
              v168 = (v165 - (_BYTE *)*v353) >> 3;
              v169 = v168 + 1;
              if ((unint64_t)(v168 + 1) >> 61)
                goto LABEL_581;
              v170 = v164 - (_QWORD)v167;
              if (v170 >> 2 > v169)
                v169 = v170 >> 2;
              if ((unint64_t)v170 >= 0x7FFFFFFFFFFFFFF8)
                v171 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v171 = v169;
              if (v171)
              {
                v172 = (char *)sub_10000D60C((uint64_t)v344, v171);
                v167 = (char *)*((_QWORD *)this + 25);
                v165 = (char *)*((_QWORD *)this + 26);
              }
              else
              {
                v172 = 0;
              }
              v173 = &v172[8 * v168];
              *(_QWORD *)v173 = 0;
              v166 = v173 + 8;
              while (v165 != v167)
              {
                v174 = *((_QWORD *)v165 - 1);
                v165 -= 8;
                *((_QWORD *)v173 - 1) = v174;
                v173 -= 8;
              }
              *((_QWORD *)this + 25) = v173;
              *((_QWORD *)this + 26) = v166;
              *((_QWORD *)this + 27) = &v172[8 * v171];
              if (v167)
                operator delete(v167);
            }
            else
            {
              *(_QWORD *)v165 = 0;
              v166 = v165 + 8;
            }
            *((_QWORD *)this + 26) = v166;
            v175 = *((_QWORD *)a2 + 1);
            if (v175 > 0xFFFFFFFFFFFFFFF7 || v175 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_332;
            *(v166 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v175);
            v163 = *((_QWORD *)a2 + 2);
            v162 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v162;
          }
          goto LABEL_333;
        case 0x10u:
          if (v23 != 2)
          {
            v233 = (char *)*((_QWORD *)this + 11);
            v232 = *((_QWORD *)this + 12);
            if ((unint64_t)v233 >= v232)
            {
              v296 = (char *)*v354;
              v297 = (v233 - (_BYTE *)*v354) >> 3;
              v298 = v297 + 1;
              if ((unint64_t)(v297 + 1) >> 61)
LABEL_582:
                sub_10000D5F8();
              v299 = v232 - (_QWORD)v296;
              if (v299 >> 2 > v298)
                v298 = v299 >> 2;
              if ((unint64_t)v299 >= 0x7FFFFFFFFFFFFFF8)
                v300 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v300 = v298;
              if (v300)
              {
                v301 = (char *)sub_10000D60C((uint64_t)v345, v300);
                v296 = (char *)*((_QWORD *)this + 10);
                v233 = (char *)*((_QWORD *)this + 11);
              }
              else
              {
                v301 = 0;
              }
              v328 = &v301[8 * v297];
              *(_QWORD *)v328 = 0;
              v213 = v328 + 8;
              while (v233 != v296)
              {
                v329 = *((_QWORD *)v233 - 1);
                v233 -= 8;
                *((_QWORD *)v328 - 1) = v329;
                v328 -= 8;
              }
              *((_QWORD *)this + 10) = v328;
              *((_QWORD *)this + 11) = v213;
              *((_QWORD *)this + 12) = &v301[8 * v300];
              if (v296)
                operator delete(v296);
            }
            else
            {
              *(_QWORD *)v233 = 0;
              v213 = v233 + 8;
            }
            *((_QWORD *)this + 11) = v213;
            goto LABEL_556;
          }
          if ((PB::Reader::placeMark(a2, v356) & 1) != 0)
            return 0;
          v176 = *((_QWORD *)a2 + 1);
          v177 = *((_QWORD *)a2 + 2);
          while (v176 < v177 && !*((_BYTE *)a2 + 24))
          {
            v179 = (char *)*((_QWORD *)this + 11);
            v178 = *((_QWORD *)this + 12);
            if ((unint64_t)v179 >= v178)
            {
              v181 = (char *)*v354;
              v182 = (v179 - (_BYTE *)*v354) >> 3;
              v183 = v182 + 1;
              if ((unint64_t)(v182 + 1) >> 61)
                goto LABEL_582;
              v184 = v178 - (_QWORD)v181;
              if (v184 >> 2 > v183)
                v183 = v184 >> 2;
              if ((unint64_t)v184 >= 0x7FFFFFFFFFFFFFF8)
                v185 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v185 = v183;
              if (v185)
              {
                v186 = (char *)sub_10000D60C((uint64_t)v345, v185);
                v181 = (char *)*((_QWORD *)this + 10);
                v179 = (char *)*((_QWORD *)this + 11);
              }
              else
              {
                v186 = 0;
              }
              v187 = &v186[8 * v182];
              *(_QWORD *)v187 = 0;
              v180 = v187 + 8;
              while (v179 != v181)
              {
                v188 = *((_QWORD *)v179 - 1);
                v179 -= 8;
                *((_QWORD *)v187 - 1) = v188;
                v187 -= 8;
              }
              *((_QWORD *)this + 10) = v187;
              *((_QWORD *)this + 11) = v180;
              *((_QWORD *)this + 12) = &v186[8 * v185];
              if (v181)
                operator delete(v181);
            }
            else
            {
              *(_QWORD *)v179 = 0;
              v180 = v179 + 8;
            }
            *((_QWORD *)this + 11) = v180;
            v189 = *((_QWORD *)a2 + 1);
            if (v189 > 0xFFFFFFFFFFFFFFF7 || v189 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_332;
            *(v180 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v189);
            v177 = *((_QWORD *)a2 + 2);
            v176 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v176;
          }
          goto LABEL_333;
        case 0x11u:
          if (v23 == 2)
          {
            if ((PB::Reader::placeMark(a2, v356) & 1) != 0)
              return 0;
            v190 = *((_QWORD *)a2 + 1);
            v191 = *((_QWORD *)a2 + 2);
            while (v190 < v191 && !*((_BYTE *)a2 + 24))
            {
              v193 = (char *)*((_QWORD *)this + 8);
              v192 = *((_QWORD *)this + 9);
              if ((unint64_t)v193 >= v192)
              {
                v195 = (char *)*v355;
                v196 = (v193 - (_BYTE *)*v355) >> 3;
                v197 = v196 + 1;
                if ((unint64_t)(v196 + 1) >> 61)
                  goto LABEL_583;
                v198 = v192 - (_QWORD)v195;
                if (v198 >> 2 > v197)
                  v197 = v198 >> 2;
                if ((unint64_t)v198 >= 0x7FFFFFFFFFFFFFF8)
                  v199 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v199 = v197;
                if (v199)
                {
                  v200 = (char *)sub_10000D60C((uint64_t)v346, v199);
                  v195 = (char *)*((_QWORD *)this + 7);
                  v193 = (char *)*((_QWORD *)this + 8);
                }
                else
                {
                  v200 = 0;
                }
                v201 = &v200[8 * v196];
                *(_QWORD *)v201 = 0;
                v194 = v201 + 8;
                while (v193 != v195)
                {
                  v202 = *((_QWORD *)v193 - 1);
                  v193 -= 8;
                  *((_QWORD *)v201 - 1) = v202;
                  v201 -= 8;
                }
                *((_QWORD *)this + 7) = v201;
                *((_QWORD *)this + 8) = v194;
                *((_QWORD *)this + 9) = &v200[8 * v199];
                if (v195)
                  operator delete(v195);
              }
              else
              {
                *(_QWORD *)v193 = 0;
                v194 = v193 + 8;
              }
              *((_QWORD *)this + 8) = v194;
              v203 = *((_QWORD *)a2 + 1);
              if (v203 > 0xFFFFFFFFFFFFFFF7 || v203 + 8 > *((_QWORD *)a2 + 2))
              {
LABEL_332:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v194 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v203);
              v191 = *((_QWORD *)a2 + 2);
              v190 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v190;
            }
LABEL_333:
            PB::Reader::recallMark(a2, v356);
          }
          else
          {
            v235 = (char *)*((_QWORD *)this + 8);
            v234 = *((_QWORD *)this + 9);
            if ((unint64_t)v235 >= v234)
            {
              v302 = (char *)*v355;
              v303 = (v235 - (_BYTE *)*v355) >> 3;
              v304 = v303 + 1;
              if ((unint64_t)(v303 + 1) >> 61)
LABEL_583:
                sub_10000D5F8();
              v305 = v234 - (_QWORD)v302;
              if (v305 >> 2 > v304)
                v304 = v305 >> 2;
              if ((unint64_t)v305 >= 0x7FFFFFFFFFFFFFF8)
                v306 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v306 = v304;
              if (v306)
              {
                v307 = (char *)sub_10000D60C((uint64_t)v346, v306);
                v302 = (char *)*((_QWORD *)this + 7);
                v235 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v307 = 0;
              }
              v330 = &v307[8 * v303];
              *(_QWORD *)v330 = 0;
              v213 = v330 + 8;
              while (v235 != v302)
              {
                v331 = *((_QWORD *)v235 - 1);
                v235 -= 8;
                *((_QWORD *)v330 - 1) = v331;
                v330 -= 8;
              }
              *((_QWORD *)this + 7) = v330;
              *((_QWORD *)this + 8) = v213;
              *((_QWORD *)this + 9) = &v307[8 * v306];
              if (v302)
                operator delete(v302);
            }
            else
            {
              *(_QWORD *)v235 = 0;
              v213 = v235 + 8;
            }
            *((_QWORD *)this + 8) = v213;
LABEL_556:
            v332 = *((_QWORD *)a2 + 1);
            if (v332 <= 0xFFFFFFFFFFFFFFF7 && v332 + 8 <= *((_QWORD *)a2 + 2))
            {
              *(v213 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v332);
LABEL_560:
              v206 = *((_QWORD *)a2 + 1) + 8;
LABEL_561:
              *((_QWORD *)a2 + 1) = v206;
            }
            else
            {
LABEL_558:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_562:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 0x12u:
          *((_BYTE *)this + 340) |= 0x20u;
          v204 = *((_QWORD *)a2 + 1);
          if (v204 > 0xFFFFFFFFFFFFFFFBLL || v204 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_558;
          *((_DWORD *)this + 83) = *(_DWORD *)(*(_QWORD *)a2 + v204);
          goto LABEL_340;
        case 0x13u:
          *((_BYTE *)this + 340) |= 0x10u;
          v205 = *((_QWORD *)a2 + 1);
          if (v205 > 0xFFFFFFFFFFFFFFFBLL || v205 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_558;
          *((_DWORD *)this + 82) = *(_DWORD *)(*(_QWORD *)a2 + v205);
LABEL_340:
          v206 = *((_QWORD *)a2 + 1) + 4;
          goto LABEL_561;
        default:
          if ((PB::Reader::skip(a2, v14 >> 3, v23, 0) & 1) == 0)
            return 0;
          goto LABEL_562;
      }
    }
    v18 = 0;
    v19 = 0;
    v14 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v20 = v2 + 1;
      v21 = *(_BYTE *)(v11 + v2);
      *((_QWORD *)a2 + 1) = v20;
      v14 |= (unint64_t)(v21 & 0x7F) << v18;
      if ((v21 & 0x80) == 0)
        goto LABEL_21;
      v18 += 7;
      v2 = v20;
      if (v19++ >= 9)
      {
LABEL_20:
        v14 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::VIOEstimation::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;
  double *v11;
  double *v12;
  double v13;
  double *v14;
  double *v15;
  double v16;
  double *v17;
  double *v18;
  double v19;
  double *v20;
  double *v21;
  double v22;
  double *v23;
  double *v24;
  double v25;
  double *v26;
  double *v27;
  double v28;
  double *v29;
  double *v30;
  double v31;
  double *v32;
  double *v33;
  double v34;
  double *v35;
  double *v36;
  double v37;
  double *v38;
  double *v39;
  double v40;
  char v41;

  v3 = this;
  v4 = *(_BYTE *)(this + 340);
  if ((v4 & 0x40) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 336), 1u);
    v4 = *(_BYTE *)(v3 + 340);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_49;
    }
  }
  else if ((*(_BYTE *)(this + 340) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 312), 2u);
  v4 = *(_BYTE *)(v3 + 340);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
LABEL_50:
    this = PB::Writer::write(a2, *(double *)(v3 + 320), 4u);
    if ((*(_BYTE *)(v3 + 340) & 2) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(double *)(v3 + 296), 3u);
  v4 = *(_BYTE *)(v3 + 340);
  if ((v4 & 8) != 0)
    goto LABEL_50;
LABEL_5:
  if ((v4 & 2) != 0)
LABEL_6:
    this = PB::Writer::write(a2, *(double *)(v3 + 304), 5u);
LABEL_7:
  v5 = *(double **)(v3 + 176);
  v6 = *(double **)(v3 + 184);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7, 6u);
  }
  v8 = *(double **)(v3 + 104);
  v9 = *(double **)(v3 + 112);
  while (v8 != v9)
  {
    v10 = *v8++;
    this = PB::Writer::write(a2, v10, 7u);
  }
  v11 = *(double **)(v3 + 272);
  v12 = *(double **)(v3 + 280);
  while (v11 != v12)
  {
    v13 = *v11++;
    this = PB::Writer::write(a2, v13, 8u);
  }
  v14 = *(double **)(v3 + 8);
  v15 = *(double **)(v3 + 16);
  while (v14 != v15)
  {
    v16 = *v14++;
    this = PB::Writer::write(a2, v16, 9u);
  }
  v17 = *(double **)(v3 + 224);
  v18 = *(double **)(v3 + 232);
  while (v17 != v18)
  {
    v19 = *v17++;
    this = PB::Writer::write(a2, v19, 0xAu);
  }
  v20 = *(double **)(v3 + 152);
  v21 = *(double **)(v3 + 160);
  while (v20 != v21)
  {
    v22 = *v20++;
    this = PB::Writer::write(a2, v22, 0xBu);
  }
  v23 = *(double **)(v3 + 128);
  v24 = *(double **)(v3 + 136);
  while (v23 != v24)
  {
    v25 = *v23++;
    this = PB::Writer::write(a2, v25, 0xCu);
  }
  v26 = *(double **)(v3 + 248);
  v27 = *(double **)(v3 + 256);
  while (v26 != v27)
  {
    v28 = *v26++;
    this = PB::Writer::write(a2, v28, 0xDu);
  }
  v29 = *(double **)(v3 + 32);
  v30 = *(double **)(v3 + 40);
  while (v29 != v30)
  {
    v31 = *v29++;
    this = PB::Writer::write(a2, v31, 0xEu);
  }
  v32 = *(double **)(v3 + 200);
  v33 = *(double **)(v3 + 208);
  while (v32 != v33)
  {
    v34 = *v32++;
    this = PB::Writer::write(a2, v34, 0xFu);
  }
  v35 = *(double **)(v3 + 80);
  v36 = *(double **)(v3 + 88);
  while (v35 != v36)
  {
    v37 = *v35++;
    this = PB::Writer::write(a2, v37, 0x10u);
  }
  v38 = *(double **)(v3 + 56);
  v39 = *(double **)(v3 + 64);
  while (v38 != v39)
  {
    v40 = *v38++;
    this = PB::Writer::write(a2, v40, 0x11u);
  }
  v41 = *(_BYTE *)(v3 + 340);
  if ((v41 & 0x20) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 332), 0x12u);
    v41 = *(_BYTE *)(v3 + 340);
  }
  if ((v41 & 0x10) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 328), 0x13u);
  return this;
}

uint64_t CMMsl::VIOEstimation::hash_value(CMMsl::VIOEstimation *this)
{
  double v2;
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;

  if ((*((_BYTE *)this + 340) & 0x40) == 0)
  {
    v27 = 0;
    if ((*((_BYTE *)this + 340) & 4) != 0)
      goto LABEL_3;
LABEL_16:
    v26 = 0.0;
    if ((*((_BYTE *)this + 340) & 1) != 0)
      goto LABEL_6;
LABEL_17:
    v25 = 0.0;
    if ((*((_BYTE *)this + 340) & 8) != 0)
      goto LABEL_9;
    goto LABEL_18;
  }
  v27 = *((int *)this + 84);
  if ((*((_BYTE *)this + 340) & 4) == 0)
    goto LABEL_16;
LABEL_3:
  v2 = *((double *)this + 39);
  if (v2 == 0.0)
    v2 = 0.0;
  v26 = v2;
  if ((*((_BYTE *)this + 340) & 1) == 0)
    goto LABEL_17;
LABEL_6:
  v3 = *((double *)this + 37);
  if (v3 == 0.0)
    v3 = 0.0;
  v25 = v3;
  if ((*((_BYTE *)this + 340) & 8) != 0)
  {
LABEL_9:
    v4 = *((double *)this + 40);
    if (v4 == 0.0)
      v4 = 0.0;
    v24 = v4;
    if ((*((_BYTE *)this + 340) & 2) != 0)
      goto LABEL_12;
LABEL_19:
    v23 = 0.0;
    goto LABEL_20;
  }
LABEL_18:
  v24 = 0.0;
  if ((*((_BYTE *)this + 340) & 2) == 0)
    goto LABEL_19;
LABEL_12:
  v5 = *((double *)this + 38);
  if (v5 == 0.0)
    v5 = 0.0;
  v23 = v5;
LABEL_20:
  v22 = PBHashBytes(*((_QWORD *)this + 22), *((_QWORD *)this + 23) - *((_QWORD *)this + 22));
  v21 = PBHashBytes(*((_QWORD *)this + 13), *((_QWORD *)this + 14) - *((_QWORD *)this + 13));
  v6 = PBHashBytes(*((_QWORD *)this + 34), *((_QWORD *)this + 35) - *((_QWORD *)this + 34));
  v7 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  v8 = PBHashBytes(*((_QWORD *)this + 28), *((_QWORD *)this + 29) - *((_QWORD *)this + 28));
  v9 = PBHashBytes(*((_QWORD *)this + 19), *((_QWORD *)this + 20) - *((_QWORD *)this + 19));
  v10 = PBHashBytes(*((_QWORD *)this + 16), *((_QWORD *)this + 17) - *((_QWORD *)this + 16));
  v11 = PBHashBytes(*((_QWORD *)this + 31), *((_QWORD *)this + 32) - *((_QWORD *)this + 31));
  v12 = PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
  v13 = PBHashBytes(*((_QWORD *)this + 25), *((_QWORD *)this + 26) - *((_QWORD *)this + 25));
  v14 = PBHashBytes(*((_QWORD *)this + 10), *((_QWORD *)this + 11) - *((_QWORD *)this + 10));
  v15 = PBHashBytes(*((_QWORD *)this + 7), *((_QWORD *)this + 8) - *((_QWORD *)this + 7));
  if ((*((_BYTE *)this + 340) & 0x20) != 0)
  {
    v19 = *((float *)this + 83);
    v16 = LODWORD(v19);
    if (v19 == 0.0)
      v16 = 0;
    if ((*((_BYTE *)this + 340) & 0x10) != 0)
      goto LABEL_22;
LABEL_28:
    v18 = 0;
    return *(_QWORD *)&v26 ^ v27 ^ *(_QWORD *)&v25 ^ *(_QWORD *)&v24 ^ *(_QWORD *)&v23 ^ v22 ^ v21 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v18;
  }
  v16 = 0;
  if ((*((_BYTE *)this + 340) & 0x10) == 0)
    goto LABEL_28;
LABEL_22:
  v17 = *((float *)this + 82);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  return *(_QWORD *)&v26 ^ v27 ^ *(_QWORD *)&v25 ^ *(_QWORD *)&v24 ^ *(_QWORD *)&v23 ^ v22 ^ v21 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v18;
}

void CMMsl::VIOPose::~VIOPose(CMMsl::VIOPose *this)
{
  void *v2;

  *(_QWORD *)this = off_100354EE0;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::VIOPose::~VIOPose(this);
  operator delete();
}

CMMsl::VIOPose *CMMsl::VIOPose::VIOPose(CMMsl::VIOPose *this, const CMMsl::VIOPose *a2)
{
  char *v4;
  __int16 v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)this = off_100354EE0;
  *((_QWORD *)this + 1) = 0;
  v4 = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 28) = 0;
  v5 = *((_WORD *)a2 + 56);
  if ((v5 & 1) != 0)
  {
    v7 = *((_QWORD *)a2 + 4);
    v6 = 1;
    *((_WORD *)this + 56) = 1;
    *((_QWORD *)this + 4) = v7;
    v5 = *((_WORD *)a2 + 56);
    if ((v5 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((*((_WORD *)a2 + 56) & 0x200) != 0)
  {
LABEL_5:
    v8 = *((_QWORD *)a2 + 13);
    v6 |= 0x200u;
    *((_WORD *)this + 56) = v6;
    *((_QWORD *)this + 13) = v8;
    v5 = *((_WORD *)a2 + 56);
  }
LABEL_6:
  if ((v5 & 2) != 0)
  {
    v9 = *((_QWORD *)a2 + 5);
    *((_WORD *)this + 56) = v6 | 2;
    *((_QWORD *)this + 5) = v9;
  }
  if (this != a2)
    sub_100239350(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
  v10 = *((_WORD *)a2 + 56);
  if ((v10 & 8) != 0)
  {
    v13 = *((_QWORD *)a2 + 7);
    *((_WORD *)this + 56) |= 8u;
    *((_QWORD *)this + 7) = v13;
    v10 = *((_WORD *)a2 + 56);
    if ((v10 & 0x10) == 0)
    {
LABEL_12:
      if ((v10 & 0x20) == 0)
        goto LABEL_13;
      goto LABEL_21;
    }
  }
  else if ((v10 & 0x10) == 0)
  {
    goto LABEL_12;
  }
  v14 = *((_QWORD *)a2 + 8);
  *((_WORD *)this + 56) |= 0x10u;
  *((_QWORD *)this + 8) = v14;
  v10 = *((_WORD *)a2 + 56);
  if ((v10 & 0x20) == 0)
  {
LABEL_13:
    if ((v10 & 4) == 0)
      goto LABEL_14;
    goto LABEL_22;
  }
LABEL_21:
  v15 = *((_QWORD *)a2 + 9);
  *((_WORD *)this + 56) |= 0x20u;
  *((_QWORD *)this + 9) = v15;
  v10 = *((_WORD *)a2 + 56);
  if ((v10 & 4) == 0)
  {
LABEL_14:
    if ((v10 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_23;
  }
LABEL_22:
  v16 = *((_QWORD *)a2 + 6);
  *((_WORD *)this + 56) |= 4u;
  *((_QWORD *)this + 6) = v16;
  v10 = *((_WORD *)a2 + 56);
  if ((v10 & 0x80) == 0)
  {
LABEL_15:
    if ((v10 & 0x100) == 0)
      goto LABEL_16;
LABEL_24:
    v18 = *((_QWORD *)a2 + 12);
    *((_WORD *)this + 56) |= 0x100u;
    *((_QWORD *)this + 12) = v18;
    if ((*((_WORD *)a2 + 56) & 0x40) == 0)
      return this;
    goto LABEL_17;
  }
LABEL_23:
  v17 = *((_QWORD *)a2 + 11);
  *((_WORD *)this + 56) |= 0x80u;
  *((_QWORD *)this + 11) = v17;
  v10 = *((_WORD *)a2 + 56);
  if ((v10 & 0x100) != 0)
    goto LABEL_24;
LABEL_16:
  if ((v10 & 0x40) != 0)
  {
LABEL_17:
    v11 = *((_QWORD *)a2 + 10);
    *((_WORD *)this + 56) |= 0x40u;
    *((_QWORD *)this + 10) = v11;
  }
  return this;
}

CMMsl *CMMsl::VIOPose::operator=(CMMsl *a1, const CMMsl::VIOPose *a2)
{
  CMMsl::VIOPose *v3;
  _BYTE v5[120];

  if (a1 != a2)
  {
    CMMsl::VIOPose::VIOPose((CMMsl::VIOPose *)v5, a2);
    CMMsl::swap(a1, (CMMsl::VIOPose *)v5, v3);
    CMMsl::VIOPose::~VIOPose((CMMsl::VIOPose *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::VIOPose *a2, CMMsl::VIOPose *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double result;

  v3 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v5;
  v6 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v6;
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v7;
  v8 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v8;
  v9 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v9;
  v10 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v10;
  v11 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v11;
  v12 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v12;
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v13;
  v14 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v14;
  v15 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v15;
  result = *((double *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((double *)a2 + 10) = result;
  return result;
}

uint64_t CMMsl::VIOPose::VIOPose(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_100354EE0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return a1;
}

CMMsl *CMMsl::VIOPose::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::VIOPose *v3;
  _BYTE v5[120];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::VIOPose::VIOPose((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::VIOPose *)v5, v3);
    CMMsl::VIOPose::~VIOPose((CMMsl::VIOPose *)v5);
  }
  return a1;
}

uint64_t CMMsl::VIOPose::formatText(CMMsl::VIOPose *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;
  double *v6;
  double *v7;
  double v8;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 56);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "currentTimestamp", *((double *)this + 4));
    v5 = *((_WORD *)this + 56);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "latestInertialTimestamp", *((double *)this + 5));
  v5 = *((_WORD *)this + 56);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "latestInertialTimestampMeta", *((double *)this + 6));
  v5 = *((_WORD *)this + 56);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "positionX", *((double *)this + 7));
  v5 = *((_WORD *)this + 56);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "positionY", *((double *)this + 8));
  v5 = *((_WORD *)this + 56);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "positionZ", *((double *)this + 9));
  v5 = *((_WORD *)this + 56);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "predictionComputeTimeMeta", *((double *)this + 10));
  v5 = *((_WORD *)this + 56);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "predictionTimeMeta", *((double *)this + 11));
  if ((*((_WORD *)this + 56) & 0x100) != 0)
LABEL_10:
    PB::TextFormatter::format(a2, "propagationTimeMeta", *((double *)this + 12));
LABEL_11:
  v6 = (double *)*((_QWORD *)this + 1);
  v7 = (double *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "rotationMatrixElement", v8);
  }
  if ((*((_WORD *)this + 56) & 0x200) != 0)
    PB::TextFormatter::format(a2, "targetTimestamp", *((double *)this + 13));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::VIOPose::readFrom(CMMsl::VIOPose *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  char *v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  _BYTE v60[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 8);
    v9 = (char *)this + 24;
    while (1)
    {
      v10 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        if (v12++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v22 = v13 & 7;
      if (v22 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *((_WORD *)this + 56) |= 1u;
          v23 = *((_QWORD *)a2 + 1);
          if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_99;
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v23);
          goto LABEL_101;
        case 2u:
          *((_WORD *)this + 56) |= 0x200u;
          v24 = *((_QWORD *)a2 + 1);
          if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_99;
          *((_QWORD *)this + 13) = *(_QWORD *)(*(_QWORD *)a2 + v24);
          goto LABEL_101;
        case 3u:
          *((_WORD *)this + 56) |= 2u;
          v25 = *((_QWORD *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_99;
          *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v25);
          goto LABEL_101;
        case 4u:
          if (v22 == 2)
          {
            if ((PB::Reader::placeMark(a2, v60) & 1) != 0)
              return 0;
            v26 = *((_QWORD *)a2 + 1);
            v27 = *((_QWORD *)a2 + 2);
            while (v26 < v27 && !*((_BYTE *)a2 + 24))
            {
              v29 = (char *)*((_QWORD *)this + 2);
              v28 = *((_QWORD *)this + 3);
              if ((unint64_t)v29 >= v28)
              {
                v31 = (char *)*v8;
                v32 = (v29 - (_BYTE *)*v8) >> 3;
                v33 = v32 + 1;
                if ((unint64_t)(v32 + 1) >> 61)
                  goto LABEL_110;
                v34 = v28 - (_QWORD)v31;
                if (v34 >> 2 > v33)
                  v33 = v34 >> 2;
                if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
                  v35 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v35 = v33;
                if (v35)
                {
                  v36 = (char *)sub_10000D60C((uint64_t)v9, v35);
                  v31 = (char *)*((_QWORD *)this + 1);
                  v29 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v36 = 0;
                }
                v37 = &v36[8 * v32];
                *(_QWORD *)v37 = 0;
                v30 = v37 + 8;
                while (v29 != v31)
                {
                  v38 = *((_QWORD *)v29 - 1);
                  v29 -= 8;
                  *((_QWORD *)v37 - 1) = v38;
                  v37 -= 8;
                }
                *((_QWORD *)this + 1) = v37;
                *((_QWORD *)this + 2) = v30;
                *((_QWORD *)this + 3) = &v36[8 * v35];
                if (v31)
                  operator delete(v31);
              }
              else
              {
                *(_QWORD *)v29 = 0;
                v30 = v29 + 8;
              }
              *((_QWORD *)this + 2) = v30;
              v39 = *((_QWORD *)a2 + 1);
              if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((_QWORD *)a2 + 2))
              {
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v30 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v39);
              v27 = *((_QWORD *)a2 + 2);
              v26 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v26;
            }
            PB::Reader::recallMark(a2, v60);
          }
          else
          {
            v48 = (char *)*((_QWORD *)this + 2);
            v47 = *((_QWORD *)this + 3);
            if ((unint64_t)v48 >= v47)
            {
              v50 = (char *)*v8;
              v51 = (v48 - (_BYTE *)*v8) >> 3;
              v52 = v51 + 1;
              if ((unint64_t)(v51 + 1) >> 61)
LABEL_110:
                sub_10000D5F8();
              v53 = v47 - (_QWORD)v50;
              if (v53 >> 2 > v52)
                v52 = v53 >> 2;
              if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
                v54 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v54 = v52;
              if (v54)
              {
                v55 = (char *)sub_10000D60C((uint64_t)v9, v54);
                v50 = (char *)*((_QWORD *)this + 1);
                v48 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v55 = 0;
              }
              v56 = &v55[8 * v51];
              *(_QWORD *)v56 = 0;
              v49 = v56 + 8;
              while (v48 != v50)
              {
                v57 = *((_QWORD *)v48 - 1);
                v48 -= 8;
                *((_QWORD *)v56 - 1) = v57;
                v56 -= 8;
              }
              *((_QWORD *)this + 1) = v56;
              *((_QWORD *)this + 2) = v49;
              *((_QWORD *)this + 3) = &v55[8 * v54];
              if (v50)
                operator delete(v50);
            }
            else
            {
              *(_QWORD *)v48 = 0;
              v49 = v48 + 8;
            }
            *((_QWORD *)this + 2) = v49;
            v58 = *((_QWORD *)a2 + 1);
            if (v58 <= 0xFFFFFFFFFFFFFFF7 && v58 + 8 <= *((_QWORD *)a2 + 2))
            {
              *(v49 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v58);
LABEL_101:
              *((_QWORD *)a2 + 1) += 8;
            }
            else
            {
LABEL_99:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_102:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || *((_BYTE *)a2 + 24))
            return v4 == 0;
          break;
        case 5u:
          *((_WORD *)this + 56) |= 8u;
          v40 = *((_QWORD *)a2 + 1);
          if (v40 > 0xFFFFFFFFFFFFFFF7 || v40 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_99;
          *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v40);
          goto LABEL_101;
        case 6u:
          *((_WORD *)this + 56) |= 0x10u;
          v41 = *((_QWORD *)a2 + 1);
          if (v41 > 0xFFFFFFFFFFFFFFF7 || v41 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_99;
          *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v41);
          goto LABEL_101;
        case 7u:
          *((_WORD *)this + 56) |= 0x20u;
          v42 = *((_QWORD *)a2 + 1);
          if (v42 > 0xFFFFFFFFFFFFFFF7 || v42 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_99;
          *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v42);
          goto LABEL_101;
        case 8u:
          *((_WORD *)this + 56) |= 4u;
          v43 = *((_QWORD *)a2 + 1);
          if (v43 > 0xFFFFFFFFFFFFFFF7 || v43 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_99;
          *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v43);
          goto LABEL_101;
        case 9u:
          *((_WORD *)this + 56) |= 0x80u;
          v44 = *((_QWORD *)a2 + 1);
          if (v44 > 0xFFFFFFFFFFFFFFF7 || v44 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_99;
          *((_QWORD *)this + 11) = *(_QWORD *)(*(_QWORD *)a2 + v44);
          goto LABEL_101;
        case 0xAu:
          *((_WORD *)this + 56) |= 0x100u;
          v45 = *((_QWORD *)a2 + 1);
          if (v45 > 0xFFFFFFFFFFFFFFF7 || v45 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_99;
          *((_QWORD *)this + 12) = *(_QWORD *)(*(_QWORD *)a2 + v45);
          goto LABEL_101;
        case 0xBu:
          *((_WORD *)this + 56) |= 0x40u;
          v46 = *((_QWORD *)a2 + 1);
          if (v46 > 0xFFFFFFFFFFFFFFF7 || v46 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_99;
          *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v46);
          goto LABEL_101;
        default:
          if ((PB::Reader::skip(a2, v13 >> 3, v22, 0) & 1) == 0)
            return 0;
          goto LABEL_102;
      }
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_21;
      v17 += 7;
      v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::VIOPose::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;
  double *v5;
  double *v6;
  double v7;
  __int16 v8;

  v3 = this;
  v4 = *(_WORD *)(this + 112);
  if ((v4 & 1) == 0)
  {
    if ((*(_WORD *)(this + 112) & 0x200) == 0)
      goto LABEL_3;
LABEL_17:
    this = PB::Writer::write(a2, *(double *)(v3 + 104), 2u);
    if ((*(_WORD *)(v3 + 112) & 2) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  this = PB::Writer::write(a2, *(double *)(this + 32), 1u);
  v4 = *(_WORD *)(v3 + 112);
  if ((v4 & 0x200) != 0)
    goto LABEL_17;
LABEL_3:
  if ((v4 & 2) != 0)
LABEL_4:
    this = PB::Writer::write(a2, *(double *)(v3 + 40), 3u);
LABEL_5:
  v5 = *(double **)(v3 + 8);
  v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7, 4u);
  }
  v8 = *(_WORD *)(v3 + 112);
  if ((v8 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 56), 5u);
    v8 = *(_WORD *)(v3 + 112);
    if ((v8 & 0x10) == 0)
    {
LABEL_10:
      if ((v8 & 0x20) == 0)
        goto LABEL_11;
      goto LABEL_21;
    }
  }
  else if ((v8 & 0x10) == 0)
  {
    goto LABEL_10;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 6u);
  v8 = *(_WORD *)(v3 + 112);
  if ((v8 & 0x20) == 0)
  {
LABEL_11:
    if ((v8 & 4) == 0)
      goto LABEL_12;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 7u);
  v8 = *(_WORD *)(v3 + 112);
  if ((v8 & 4) == 0)
  {
LABEL_12:
    if ((v8 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 8u);
  v8 = *(_WORD *)(v3 + 112);
  if ((v8 & 0x80) == 0)
  {
LABEL_13:
    if ((v8 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 88), 9u);
  v8 = *(_WORD *)(v3 + 112);
  if ((v8 & 0x100) == 0)
  {
LABEL_14:
    if ((v8 & 0x40) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 80), 0xBu);
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 96), 0xAu);
  if ((*(_WORD *)(v3 + 112) & 0x40) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 80), 0xBu);
  return this;
}

uint64_t CMMsl::VIOPose::hash_value(CMMsl::VIOPose *this)
{
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;

  v2 = *((_WORD *)this + 56);
  if ((v2 & 1) != 0)
  {
    if (*((double *)this + 4) == 0.0)
      v3 = 0;
    else
      v3 = *((_QWORD *)this + 4);
    if ((*((_WORD *)this + 56) & 0x200) != 0)
    {
LABEL_3:
      if (*((double *)this + 13) == 0.0)
        v4 = 0;
      else
        v4 = *((_QWORD *)this + 13);
      if ((v2 & 2) != 0)
        goto LABEL_7;
LABEL_15:
      v5 = 0;
      goto LABEL_16;
    }
  }
  else
  {
    v3 = 0;
    if ((*((_WORD *)this + 56) & 0x200) != 0)
      goto LABEL_3;
  }
  v4 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_15;
LABEL_7:
  if (*((double *)this + 5) == 0.0)
    v5 = 0;
  else
    v5 = *((_QWORD *)this + 5);
LABEL_16:
  v6 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  v7 = *((_WORD *)this + 56);
  if ((v7 & 8) == 0)
  {
    v8 = 0.0;
    if ((v7 & 0x10) != 0)
      goto LABEL_18;
LABEL_39:
    v9 = 0.0;
    if ((v7 & 0x20) != 0)
      goto LABEL_21;
LABEL_40:
    v10 = 0.0;
    if ((v7 & 4) != 0)
      goto LABEL_24;
LABEL_41:
    v11 = 0.0;
    if ((v7 & 0x80) != 0)
      goto LABEL_27;
LABEL_42:
    v12 = 0.0;
    if ((*((_WORD *)this + 56) & 0x100) != 0)
      goto LABEL_30;
    goto LABEL_43;
  }
  v8 = *((double *)this + 7);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((v7 & 0x10) == 0)
    goto LABEL_39;
LABEL_18:
  v9 = *((double *)this + 8);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((v7 & 0x20) == 0)
    goto LABEL_40;
LABEL_21:
  v10 = *((double *)this + 9);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((v7 & 4) == 0)
    goto LABEL_41;
LABEL_24:
  v11 = *((double *)this + 6);
  if (v11 == 0.0)
    v11 = 0.0;
  if ((v7 & 0x80) == 0)
    goto LABEL_42;
LABEL_27:
  v12 = *((double *)this + 11);
  if (v12 == 0.0)
    v12 = 0.0;
  if ((*((_WORD *)this + 56) & 0x100) != 0)
  {
LABEL_30:
    v13 = *((double *)this + 12);
    if (v13 == 0.0)
      v13 = 0.0;
    if ((v7 & 0x40) != 0)
      goto LABEL_33;
LABEL_44:
    v14 = 0.0;
    return v4 ^ v3 ^ v5 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ v6 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14;
  }
LABEL_43:
  v13 = 0.0;
  if ((v7 & 0x40) == 0)
    goto LABEL_44;
LABEL_33:
  v14 = *((double *)this + 10);
  if (v14 == 0.0)
    v14 = 0.0;
  return v4 ^ v3 ^ v5 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ v6 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14;
}

void CMMsl::VIOReplayPose::~VIOReplayPose(CMMsl::VIOReplayPose *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_100354F18;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::VIOReplayPose::~VIOReplayPose(this);
  operator delete();
}

CMMsl::VIOReplayPose *CMMsl::VIOReplayPose::VIOReplayPose(CMMsl::VIOReplayPose *this, const CMMsl::VIOReplayPose *a2)
{
  char *v4;
  uint64_t v5;

  *(_QWORD *)this = off_100354F18;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *((_DWORD *)this + 16) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if ((*((_BYTE *)a2 + 64) & 1) != 0)
  {
    v5 = *((_QWORD *)a2 + 7);
    *((_BYTE *)this + 64) = 1;
    *((_QWORD *)this + 7) = v5;
  }
  if (this != a2)
  {
    sub_100239350(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
    sub_100239350((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3);
  }
  return this;
}

uint64_t CMMsl::VIOReplayPose::operator=(uint64_t a1, const CMMsl::VIOReplayPose *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE v9[8];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;

  if ((const CMMsl::VIOReplayPose *)a1 != a2)
  {
    CMMsl::VIOReplayPose::VIOReplayPose((CMMsl::VIOReplayPose *)v9, a2);
    v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    v14 = v3;
    v4 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v13;
    v13 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v10 = v5;
    v11 = v6;
    v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v7;
    CMMsl::VIOReplayPose::~VIOReplayPose((CMMsl::VIOReplayPose *)v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::VIOReplayPose *a2, CMMsl::VIOReplayPose *a3)
{
  int v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  result = *((double *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((double *)a2 + 7) = result;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v8;
  v9 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v9;
  v10 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v10;
  return result;
}

uint64_t CMMsl::VIOReplayPose::VIOReplayPose(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = off_100354F18;
  v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  sub_100239458(v4, (__n128 *)(a2 + 32));
  return a1;
}

uint64_t CMMsl::VIOReplayPose::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE v9[8];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;

  if (a1 != a2)
  {
    CMMsl::VIOReplayPose::VIOReplayPose((uint64_t)v9, a2);
    v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    v14 = v3;
    v4 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v13;
    v13 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v10 = v5;
    v11 = v6;
    v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v7;
    CMMsl::VIOReplayPose::~VIOReplayPose((CMMsl::VIOReplayPose *)v9);
  }
  return a1;
}

uint64_t CMMsl::VIOReplayPose::formatText(CMMsl::VIOReplayPose *this, PB::TextFormatter *a2, const char *a3)
{
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (double *)*((_QWORD *)this + 1);
  v6 = (double *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "so3", v7);
  }
  if ((*((_BYTE *)this + 64) & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 7));
  v8 = (double *)*((_QWORD *)this + 4);
  v9 = (double *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "translation", v10);
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::VIOReplayPose::readFrom(CMMsl::VIOReplayPose *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  char *v9;
  void **v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  _QWORD *v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  _BYTE v78[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 32);
    v9 = (char *)this + 48;
    v10 = (void **)((char *)this + 8);
    v11 = (char *)this + 24;
    while (1)
    {
      v12 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v19 = 0;
        v20 = 0;
        v15 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v21 = v2 + 1;
          v22 = *(_BYTE *)(v12 + v2);
          *((_QWORD *)a2 + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0)
            goto LABEL_21;
          v19 += 7;
          v2 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            v15 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v25 = v15 >> 3;
      if ((v15 >> 3) == 3)
        break;
      if ((_DWORD)v25 == 2)
      {
        if (v24 == 2)
        {
          if ((PB::Reader::placeMark(a2, v78) & 1) != 0)
            return 0;
          v41 = *((_QWORD *)a2 + 1);
          v42 = *((_QWORD *)a2 + 2);
          while (v41 < v42 && !*((_BYTE *)a2 + 24))
          {
            v44 = (char *)*((_QWORD *)this + 2);
            v43 = *((_QWORD *)this + 3);
            if ((unint64_t)v44 >= v43)
            {
              v46 = (char *)*v10;
              v47 = (v44 - (_BYTE *)*v10) >> 3;
              v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 61)
                goto LABEL_128;
              v49 = v43 - (_QWORD)v46;
              if (v49 >> 2 > v48)
                v48 = v49 >> 2;
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
                v50 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v50 = v48;
              if (v50)
              {
                v51 = (char *)sub_10000D60C((uint64_t)v11, v50);
                v46 = (char *)*((_QWORD *)this + 1);
                v44 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v51 = 0;
              }
              v52 = &v51[8 * v47];
              *(_QWORD *)v52 = 0;
              v45 = v52 + 8;
              while (v44 != v46)
              {
                v53 = *((_QWORD *)v44 - 1);
                v44 -= 8;
                *((_QWORD *)v52 - 1) = v53;
                v52 -= 8;
              }
              *((_QWORD *)this + 1) = v52;
              *((_QWORD *)this + 2) = v45;
              *((_QWORD *)this + 3) = &v51[8 * v50];
              if (v46)
                operator delete(v46);
            }
            else
            {
              *(_QWORD *)v44 = 0;
              v45 = v44 + 8;
            }
            *((_QWORD *)this + 2) = v45;
            v54 = *((_QWORD *)a2 + 1);
            if (v54 > 0xFFFFFFFFFFFFFFF7 || v54 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_82;
            *(v45 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v54);
            v42 = *((_QWORD *)a2 + 2);
            v41 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v41;
          }
          goto LABEL_83;
        }
        v59 = (char *)*((_QWORD *)this + 2);
        v58 = *((_QWORD *)this + 3);
        if ((unint64_t)v59 >= v58)
        {
          v66 = (char *)*v10;
          v67 = (v59 - (_BYTE *)*v10) >> 3;
          v68 = v67 + 1;
          if ((unint64_t)(v67 + 1) >> 61)
LABEL_128:
            sub_10000D5F8();
          v69 = v58 - (_QWORD)v66;
          if (v69 >> 2 > v68)
            v68 = v69 >> 2;
          if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
            v70 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v70 = v68;
          if (v70)
          {
            v71 = (char *)sub_10000D60C((uint64_t)v11, v70);
            v66 = (char *)*((_QWORD *)this + 1);
            v59 = (char *)*((_QWORD *)this + 2);
          }
          else
          {
            v71 = 0;
          }
          v74 = &v71[8 * v67];
          *(_QWORD *)v74 = 0;
          v57 = v74 + 8;
          while (v59 != v66)
          {
            v75 = *((_QWORD *)v59 - 1);
            v59 -= 8;
            *((_QWORD *)v74 - 1) = v75;
            v74 -= 8;
          }
          *((_QWORD *)this + 1) = v74;
          *((_QWORD *)this + 2) = v57;
          *((_QWORD *)this + 3) = &v71[8 * v70];
          if (v66)
            operator delete(v66);
        }
        else
        {
          *(_QWORD *)v59 = 0;
          v57 = v59 + 8;
        }
        *((_QWORD *)this + 2) = v57;
LABEL_114:
        v76 = *((_QWORD *)a2 + 1);
        if (v76 > 0xFFFFFFFFFFFFFFF7 || v76 + 8 > *((_QWORD *)a2 + 2))
        {
LABEL_116:
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_119;
        }
        *(v57 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v76);
        goto LABEL_118;
      }
      if ((_DWORD)v25 == 1)
      {
        *((_BYTE *)this + 64) |= 1u;
        v26 = *((_QWORD *)a2 + 1);
        if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_116;
        *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v26);
LABEL_118:
        *((_QWORD *)a2 + 1) += 8;
        goto LABEL_119;
      }
      if ((PB::Reader::skip(a2, v25, v24, 0) & 1) == 0)
        return 0;
LABEL_119:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    if (v24 == 2)
    {
      if ((PB::Reader::placeMark(a2, v78) & 1) != 0)
        return 0;
      v27 = *((_QWORD *)a2 + 1);
      v28 = *((_QWORD *)a2 + 2);
      while (v27 < v28 && !*((_BYTE *)a2 + 24))
      {
        v30 = (char *)*((_QWORD *)this + 5);
        v29 = *((_QWORD *)this + 6);
        if ((unint64_t)v30 >= v29)
        {
          v32 = (char *)*v8;
          v33 = (v30 - (_BYTE *)*v8) >> 3;
          v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 61)
            goto LABEL_127;
          v35 = v29 - (_QWORD)v32;
          if (v35 >> 2 > v34)
            v34 = v35 >> 2;
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
            v36 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v36 = v34;
          if (v36)
          {
            v37 = (char *)sub_10000D60C((uint64_t)v9, v36);
            v32 = (char *)*((_QWORD *)this + 4);
            v30 = (char *)*((_QWORD *)this + 5);
          }
          else
          {
            v37 = 0;
          }
          v38 = &v37[8 * v33];
          *(_QWORD *)v38 = 0;
          v31 = v38 + 8;
          while (v30 != v32)
          {
            v39 = *((_QWORD *)v30 - 1);
            v30 -= 8;
            *((_QWORD *)v38 - 1) = v39;
            v38 -= 8;
          }
          *((_QWORD *)this + 4) = v38;
          *((_QWORD *)this + 5) = v31;
          *((_QWORD *)this + 6) = &v37[8 * v36];
          if (v32)
            operator delete(v32);
        }
        else
        {
          *(_QWORD *)v30 = 0;
          v31 = v30 + 8;
        }
        *((_QWORD *)this + 5) = v31;
        v40 = *((_QWORD *)a2 + 1);
        if (v40 > 0xFFFFFFFFFFFFFFF7 || v40 + 8 > *((_QWORD *)a2 + 2))
        {
LABEL_82:
          *((_BYTE *)a2 + 24) = 1;
          break;
        }
        *(v31 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v40);
        v28 = *((_QWORD *)a2 + 2);
        v27 = *((_QWORD *)a2 + 1) + 8;
        *((_QWORD *)a2 + 1) = v27;
      }
LABEL_83:
      PB::Reader::recallMark(a2, v78);
      goto LABEL_119;
    }
    v56 = (char *)*((_QWORD *)this + 5);
    v55 = *((_QWORD *)this + 6);
    if ((unint64_t)v56 >= v55)
    {
      v60 = (char *)*v8;
      v61 = (v56 - (_BYTE *)*v8) >> 3;
      v62 = v61 + 1;
      if ((unint64_t)(v61 + 1) >> 61)
LABEL_127:
        sub_10000D5F8();
      v63 = v55 - (_QWORD)v60;
      if (v63 >> 2 > v62)
        v62 = v63 >> 2;
      if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8)
        v64 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v64 = v62;
      if (v64)
      {
        v65 = (char *)sub_10000D60C((uint64_t)v9, v64);
        v60 = (char *)*((_QWORD *)this + 4);
        v56 = (char *)*((_QWORD *)this + 5);
      }
      else
      {
        v65 = 0;
      }
      v72 = &v65[8 * v61];
      *(_QWORD *)v72 = 0;
      v57 = v72 + 8;
      while (v56 != v60)
      {
        v73 = *((_QWORD *)v56 - 1);
        v56 -= 8;
        *((_QWORD *)v72 - 1) = v73;
        v72 -= 8;
      }
      *((_QWORD *)this + 4) = v72;
      *((_QWORD *)this + 5) = v57;
      *((_QWORD *)this + 6) = &v65[8 * v64];
      if (v60)
        operator delete(v60);
    }
    else
    {
      *(_QWORD *)v56 = 0;
      v57 = v56 + 8;
    }
    *((_QWORD *)this + 5) = v57;
    goto LABEL_114;
  }
  return v4 == 0;
}

uint64_t CMMsl::VIOReplayPose::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;

  v3 = (_QWORD *)this;
  if ((*(_BYTE *)(this + 64) & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 56), 1u);
  v4 = (double *)v3[1];
  v5 = (double *)v3[2];
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  v8 = (double *)v3[4];
  v7 = (double *)v3[5];
  while (v8 != v7)
  {
    v9 = *v8++;
    this = PB::Writer::write(a2, v9, 3u);
  }
  return this;
}

uint64_t CMMsl::VIOReplayPose::hash_value(CMMsl::VIOReplayPose *this)
{
  uint64_t v2;
  uint64_t v3;

  if ((*((_BYTE *)this + 64) & 1) != 0)
  {
    if (*((double *)this + 7) == 0.0)
      v2 = 0;
    else
      v2 = *((_QWORD *)this + 7);
  }
  else
  {
    v2 = 0;
  }
  v3 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1)) ^ v2;
  return v3 ^ PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
}

void CMMsl::VO2MaxInput::~VO2MaxInput(CMMsl::VO2MaxInput *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::VO2MaxInput::VO2MaxInput(CMMsl::VO2MaxInput *this, const CMMsl::VO2MaxInput *a2)
{
  __int16 v2;
  __int16 v3;
  double result;
  int v5;
  int v6;
  char v7;
  char v8;
  int v9;
  char v10;

  *(_QWORD *)this = off_100354F50;
  *((_DWORD *)this + 22) = 0;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x80) != 0)
  {
    result = *((double *)a2 + 8);
    v3 = 128;
    *((_WORD *)this + 44) = 128;
    *((double *)this + 8) = result;
    v2 = *((_WORD *)a2 + 44);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 6);
    v3 |= 0x20u;
    *((_WORD *)this + 44) = v3;
    *((double *)this + 6) = result;
    v2 = *((_WORD *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 0x200) != 0)
  {
    v5 = *((_DWORD *)a2 + 19);
    v3 |= 0x200u;
    *((_WORD *)this + 44) = v3;
    *((_DWORD *)this + 19) = v5;
    v2 = *((_WORD *)a2 + 44);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_21;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 3) = result;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 4) = result;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 2) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  result = *((double *)a2 + 2);
  v3 |= 2u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 2) = result;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  v6 = *((_DWORD *)a2 + 18);
  v3 |= 0x100u;
  *((_WORD *)this + 44) = v3;
  *((_DWORD *)this + 18) = v6;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_25;
  }
LABEL_24:
  result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 1) = result;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x40) == 0)
  {
LABEL_13:
    if ((v2 & 0x800) == 0)
      goto LABEL_14;
    goto LABEL_26;
  }
LABEL_25:
  result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 7) = result;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x800) == 0)
  {
LABEL_14:
    if ((v2 & 0x1000) == 0)
      goto LABEL_15;
    goto LABEL_27;
  }
LABEL_26:
  v7 = *((_BYTE *)a2 + 84);
  v3 |= 0x800u;
  *((_WORD *)this + 44) = v3;
  *((_BYTE *)this + 84) = v7;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x1000) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0)
      goto LABEL_16;
    goto LABEL_28;
  }
LABEL_27:
  v8 = *((_BYTE *)a2 + 85);
  v3 |= 0x1000u;
  *((_WORD *)this + 44) = v3;
  *((_BYTE *)this + 85) = v8;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x2000) == 0)
      goto LABEL_17;
    goto LABEL_29;
  }
LABEL_28:
  v9 = *((_DWORD *)a2 + 20);
  v3 |= 0x400u;
  *((_WORD *)this + 44) = v3;
  *((_DWORD *)this + 20) = v9;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x2000) == 0)
  {
LABEL_17:
    if ((v2 & 0x10) == 0)
      return result;
LABEL_30:
    result = *((double *)a2 + 5);
    *((_WORD *)this + 44) = v3 | 0x10;
    *((double *)this + 5) = result;
    return result;
  }
LABEL_29:
  v10 = *((_BYTE *)a2 + 86);
  v3 |= 0x2000u;
  *((_WORD *)this + 44) = v3;
  *((_BYTE *)this + 86) = v10;
  if ((*((_WORD *)a2 + 44) & 0x10) != 0)
    goto LABEL_30;
  return result;
}

CMMsl *CMMsl::VO2MaxInput::operator=(CMMsl *a1, const CMMsl::VO2MaxInput *a2)
{
  CMMsl::VO2MaxInput *v3;
  _BYTE v5[96];

  if (a1 != a2)
  {
    CMMsl::VO2MaxInput::VO2MaxInput((CMMsl::VO2MaxInput *)v5, a2);
    CMMsl::swap(a1, (CMMsl::VO2MaxInput *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::VO2MaxInput *a2, CMMsl::VO2MaxInput *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  double result;

  v3 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v3;
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v4;
  v5 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v5;
  v6 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v8;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v9;
  v10 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v10;
  v11 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v11;
  v12 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v12;
  LOBYTE(v10) = *((_BYTE *)this + 84);
  *((_BYTE *)this + 84) = *((_BYTE *)a2 + 84);
  *((_BYTE *)a2 + 84) = v10;
  LOBYTE(v10) = *((_BYTE *)this + 85);
  *((_BYTE *)this + 85) = *((_BYTE *)a2 + 85);
  *((_BYTE *)a2 + 85) = v10;
  v13 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 86);
  *((_BYTE *)this + 86) = *((_BYTE *)a2 + 86);
  *((_BYTE *)a2 + 86) = v13;
  result = *((double *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((double *)a2 + 5) = result;
  return result;
}

double CMMsl::VO2MaxInput::VO2MaxInput(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100354F50;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  *(_BYTE *)(a1 + 85) = *(_BYTE *)(a2 + 85);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 86) = *(_BYTE *)(a2 + 86);
  result = *(double *)(a2 + 40);
  *(double *)(a1 + 40) = result;
  return result;
}

CMMsl *CMMsl::VO2MaxInput::operator=(CMMsl *this, uint64_t a2, CMMsl::VO2MaxInput *a3)
{
  void (**v5)(CMMsl::VO2MaxInput *__hidden);
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  __int16 v12;
  char v13;
  int v14;

  if (this != (CMMsl *)a2)
  {
    v5 = off_100354F50;
    v14 = *(_DWORD *)(a2 + 88);
    *(_DWORD *)(a2 + 88) = 0;
    v7 = *(_OWORD *)(a2 + 24);
    v10 = *(_QWORD *)(a2 + 72);
    v6 = *(_OWORD *)(a2 + 8);
    v9 = *(_OWORD *)(a2 + 56);
    v12 = *(_WORD *)(a2 + 84);
    v11 = *(_DWORD *)(a2 + 80);
    v13 = *(_BYTE *)(a2 + 86);
    v8 = *(_OWORD *)(a2 + 40);
    CMMsl::swap(this, (CMMsl::VO2MaxInput *)&v5, a3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return this;
}

uint64_t CMMsl::VO2MaxInput::formatText(CMMsl::VO2MaxInput *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 44);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "cadence", *((double *)this + 1));
    v5 = *((_WORD *)this + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "grade", *((double *)this + 2));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 0x800) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "gradeType", *((_DWORD *)this + 18));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x800) == 0)
  {
LABEL_5:
    if ((v5 & 0x1000) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "hasGps", *((_BYTE *)this + 84));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x1000) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "hasStrideCal", *((_BYTE *)this + 85));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "heartRate", *((double *)this + 3));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "heartRateConfidence", *((double *)this + 4));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "hrTime", *((double *)this + 5));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "isStroller", *((_BYTE *)this + 86));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "metSource", *((_DWORD *)this + 19));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_12:
    if ((v5 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "mets", *((double *)this + 6));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_13:
    if ((v5 & 0x80) == 0)
      goto LABEL_14;
LABEL_29:
    PB::TextFormatter::format(a2, "startDate", *((double *)this + 8));
    if ((*((_WORD *)this + 44) & 0x400) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_15;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "pace", *((double *)this + 7));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x80) != 0)
    goto LABEL_29;
LABEL_14:
  if ((v5 & 0x400) != 0)
LABEL_15:
    PB::TextFormatter::format(a2, "workoutType", *((_DWORD *)this + 20));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::VO2MaxInput::readFrom(CMMsl::VO2MaxInput *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  int v35;
  BOOL v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  char v42;
  int v43;
  BOOL v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 44) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_74;
              *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_103;
            case 2u:
              *((_WORD *)this + 44) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_74;
              *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_103;
            case 3u:
              *((_WORD *)this + 44) |= 0x200u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v45 = 0;
                v46 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_108;
                  }
                  v47 = v21++;
                  v48 = *(_BYTE *)(v22 + v47);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0)
                    break;
                  v45 += 7;
                  v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_107:
                    v2 = v47 + 1;
                    goto LABEL_108;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_107;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_108;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_108:
              *((_DWORD *)this + 19) = v25;
              goto LABEL_119;
            case 4u:
              *((_WORD *)this + 44) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_74;
              *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_103;
            case 5u:
              *((_WORD *)this + 44) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_74;
              *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_103;
            case 6u:
              *((_WORD *)this + 44) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_74;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_103;
            case 7u:
              *((_WORD *)this + 44) |= 0x100u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_113;
                  }
                  v51 = v27++;
                  v52 = *(_BYTE *)(v28 + v51);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_112:
                    v2 = v51 + 1;
                    goto LABEL_113;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_112;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_113;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_113:
              *((_DWORD *)this + 18) = v31;
              goto LABEL_119;
            case 8u:
              *((_WORD *)this + 44) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_74;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_103;
            case 9u:
              *((_WORD *)this + 44) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_74;
              *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_103;
            case 0xAu:
              *((_WORD *)this + 44) |= 0x800u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v34 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v34 = v33 != 0;
              }
              *((_BYTE *)this + 84) = v34;
              goto LABEL_119;
            case 0xBu:
              *((_WORD *)this + 44) |= 0x1000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v36 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v35 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v36 = v35 != 0;
              }
              *((_BYTE *)this + 85) = v36;
              goto LABEL_119;
            case 0xCu:
              *((_WORD *)this + 44) |= 0x400u;
              v37 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v38 = *(_QWORD *)a2;
              if (v37 > 0xFFFFFFFFFFFFFFF5 || v37 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v41 = 0;
                if (v2 <= v37)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v37)
                  {
                    LODWORD(v41) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_118;
                  }
                  v55 = v37++;
                  v56 = *(_BYTE *)(v38 + v55);
                  *((_QWORD *)a2 + 1) = v37;
                  v41 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v41) = 0;
LABEL_117:
                    v2 = v55 + 1;
                    goto LABEL_118;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v41) = 0;
                goto LABEL_117;
              }
              v39 = 0;
              v40 = 0;
              v41 = 0;
              do
              {
                v2 = v37 + 1;
                *((_QWORD *)a2 + 1) = v37 + 1;
                v42 = *(_BYTE *)(v38 + v37);
                v41 |= (unint64_t)(v42 & 0x7F) << v39;
                if ((v42 & 0x80) == 0)
                  goto LABEL_118;
                v39 += 7;
                v37 = v2;
                v14 = v40++ > 8;
              }
              while (!v14);
              LODWORD(v41) = 0;
LABEL_118:
              *((_DWORD *)this + 20) = v41;
LABEL_119:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xDu:
              *((_WORD *)this + 44) |= 0x2000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v44 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v43 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v44 = v43 != 0;
              }
              *((_BYTE *)this + 86) = v44;
              goto LABEL_119;
            case 0xEu:
              *((_WORD *)this + 44) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_103:
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_74:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_119;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_119;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::VO2MaxInput::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 88);
  if ((v4 & 0x80) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 64), 1u);
    v4 = *(_WORD *)(v3 + 88);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 2u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 76), 3u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 4u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 5u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 2) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 6u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 72), 7u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 8u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x40) == 0)
  {
LABEL_10:
    if ((v4 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 9u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x800) == 0)
  {
LABEL_11:
    if ((v4 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 84), 0xAu);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x1000) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 85), 0xBu);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 80), 0xCu);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x2000) == 0)
  {
LABEL_14:
    if ((v4 & 0x10) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 40), 0xEu);
  }
LABEL_28:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 86), 0xDu);
  if ((*(_WORD *)(v3 + 88) & 0x10) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 40), 0xEu);
  return this;
}

uint64_t CMMsl::VO2MaxInput::hash_value(CMMsl::VO2MaxInput *this)
{
  __int16 v1;
  double v2;
  double v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;

  v1 = *((_WORD *)this + 44);
  if ((v1 & 0x80) == 0)
  {
    v2 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_3;
LABEL_33:
    v3 = 0.0;
    if ((*((_WORD *)this + 44) & 0x200) != 0)
      goto LABEL_6;
    goto LABEL_34;
  }
  v2 = *((double *)this + 8);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_33;
LABEL_3:
  v3 = *((double *)this + 6);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((*((_WORD *)this + 44) & 0x200) != 0)
  {
LABEL_6:
    v4 = *((int *)this + 19);
    if ((v1 & 4) != 0)
      goto LABEL_7;
LABEL_35:
    v5 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_10;
LABEL_36:
    v6 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_13;
LABEL_37:
    v7 = 0.0;
    if ((*((_WORD *)this + 44) & 0x100) != 0)
      goto LABEL_16;
    goto LABEL_38;
  }
LABEL_34:
  v4 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_35;
LABEL_7:
  v5 = *((double *)this + 3);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_36;
LABEL_10:
  v6 = *((double *)this + 4);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_37;
LABEL_13:
  v7 = *((double *)this + 2);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((*((_WORD *)this + 44) & 0x100) != 0)
  {
LABEL_16:
    v8 = *((int *)this + 18);
    if ((v1 & 1) != 0)
      goto LABEL_17;
LABEL_39:
    v9 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_20;
LABEL_40:
    v10 = 0.0;
    if ((*((_WORD *)this + 44) & 0x800) != 0)
      goto LABEL_23;
    goto LABEL_41;
  }
LABEL_38:
  v8 = 0;
  if ((v1 & 1) == 0)
    goto LABEL_39;
LABEL_17:
  v9 = *((double *)this + 1);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((v1 & 0x40) == 0)
    goto LABEL_40;
LABEL_20:
  v10 = *((double *)this + 7);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((*((_WORD *)this + 44) & 0x800) != 0)
  {
LABEL_23:
    v11 = *((unsigned __int8 *)this + 84);
    if ((*((_WORD *)this + 44) & 0x1000) != 0)
      goto LABEL_24;
    goto LABEL_42;
  }
LABEL_41:
  v11 = 0;
  if ((*((_WORD *)this + 44) & 0x1000) != 0)
  {
LABEL_24:
    v12 = *((unsigned __int8 *)this + 85);
    if ((*((_WORD *)this + 44) & 0x400) != 0)
      goto LABEL_25;
    goto LABEL_43;
  }
LABEL_42:
  v12 = 0;
  if ((*((_WORD *)this + 44) & 0x400) != 0)
  {
LABEL_25:
    v13 = *((int *)this + 20);
    if ((*((_WORD *)this + 44) & 0x2000) != 0)
      goto LABEL_26;
    goto LABEL_44;
  }
LABEL_43:
  v13 = 0;
  if ((*((_WORD *)this + 44) & 0x2000) != 0)
  {
LABEL_26:
    v14 = *((unsigned __int8 *)this + 86);
    if ((v1 & 0x10) != 0)
      goto LABEL_27;
LABEL_45:
    v15 = 0.0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ *(_QWORD *)&v15;
  }
LABEL_44:
  v14 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_45;
LABEL_27:
  v15 = *((double *)this + 5);
  if (v15 == 0.0)
    v15 = 0.0;
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ *(_QWORD *)&v15;
}

void CMMsl::VO2MaxModelInput::~VO2MaxModelInput(CMMsl::VO2MaxModelInput *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::VO2MaxModelInput::VO2MaxModelInput(CMMsl::VO2MaxModelInput *this, const CMMsl::VO2MaxModelInput *a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)this = off_100354F88;
  *((_DWORD *)this + 10) = 0;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 4) != 0)
  {
    result = *((double *)a2 + 3);
    v3 = 4;
    *((_BYTE *)this + 40) = 4;
    *((double *)this + 3) = result;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 40) & 2) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_BYTE *)this + 40) = v3;
    *((double *)this + 2) = result;
    v2 = *((_BYTE *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 1) == 0)
  {
    if ((v2 & 8) == 0)
      return result;
LABEL_10:
    result = *((double *)a2 + 4);
    *((_BYTE *)this + 40) = v3 | 8;
    *((double *)this + 4) = result;
    return result;
  }
  result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_BYTE *)this + 40) = v3;
  *((double *)this + 1) = result;
  if ((*((_BYTE *)a2 + 40) & 8) != 0)
    goto LABEL_10;
  return result;
}

uint64_t CMMsl::VO2MaxModelInput::operator=(uint64_t a1, const CMMsl::VO2MaxModelInput *a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  int v10;

  if ((const CMMsl::VO2MaxModelInput *)a1 != a2)
  {
    CMMsl::VO2MaxModelInput::VO2MaxModelInput((CMMsl::VO2MaxModelInput *)&v7, a2);
    v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v10;
    v10 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::VO2MaxModelInput *a2, CMMsl::VO2MaxModelInput *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  result = *((double *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((double *)a2 + 4) = result;
  return result;
}

double CMMsl::VO2MaxModelInput::VO2MaxModelInput(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100354F88;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100354F88;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  return result;
}

uint64_t CMMsl::VO2MaxModelInput::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  void (**v8)(CMMsl::VO2MaxModelInput *__hidden);
  __int128 v9;
  __int128 v10;
  int v11;

  if (a1 != a2)
  {
    v8 = off_100354F88;
    v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    v11 = *(_DWORD *)(a1 + 40);
    v4 = *(_OWORD *)(a2 + 8);
    v9 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a1 + 24);
    v6 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 40) = v3;
    *(_OWORD *)(a1 + 8) = v4;
    *(_OWORD *)(a1 + 24) = v6;
    v10 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::VO2MaxModelInput::formatText(CMMsl::VO2MaxModelInput *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "hr", *((double *)this + 1));
    v5 = *((_BYTE *)this + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "time", *((double *)this + 3));
      if ((*((_BYTE *)this + 40) & 8) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "hrTime", *((double *)this + 2));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "vo2", *((double *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::VO2MaxModelInput::readFrom(CMMsl::VO2MaxModelInput *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 40) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_35;
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_37;
        case 2u:
          *((_BYTE *)this + 40) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_35;
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_37;
        case 3u:
          *((_BYTE *)this + 40) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_35;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_37;
        case 4u:
          *((_BYTE *)this + 40) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_37:
            v2 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v2;
          }
          else
          {
LABEL_35:
            *((_BYTE *)a2 + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::VO2MaxModelInput::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 40);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24), 1u);
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 32), 4u);
  }
LABEL_8:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 3u);
  if ((*(_BYTE *)(v3 + 40) & 8) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 32), 4u);
  return this;
}

uint64_t CMMsl::VO2MaxModelInput::hash_value(CMMsl::VO2MaxModelInput *this)
{
  double v1;
  double v2;
  double v3;
  double v4;

  if ((*((_BYTE *)this + 40) & 4) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 40) & 2) != 0)
      goto LABEL_3;
LABEL_15:
    v2 = 0.0;
    if ((*((_BYTE *)this + 40) & 1) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v1 = *((double *)this + 3);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 40) & 2) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((double *)this + 2);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 40) & 1) != 0)
  {
LABEL_6:
    v3 = *((double *)this + 1);
    if (v3 == 0.0)
      v3 = 0.0;
    if ((*((_BYTE *)this + 40) & 8) != 0)
      goto LABEL_9;
LABEL_17:
    v4 = 0.0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4;
  }
LABEL_16:
  v3 = 0.0;
  if ((*((_BYTE *)this + 40) & 8) == 0)
    goto LABEL_17;
LABEL_9:
  v4 = *((double *)this + 4);
  if (v4 == 0.0)
    v4 = 0.0;
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4;
}

void CMMsl::VO2MaxOutput::~VO2MaxOutput(CMMsl::VO2MaxOutput *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::VO2MaxOutput::VO2MaxOutput(uint64_t this, const CMMsl::VO2MaxOutput *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  *(_QWORD *)this = off_100354FC0;
  *(_DWORD *)(this + 72) = 0;
  v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x20) != 0)
  {
    v4 = *((_QWORD *)a2 + 6);
    v3 = 32;
    *(_WORD *)(this + 72) = 32;
    *(_QWORD *)(this + 48) = v4;
    v2 = *((_WORD *)a2 + 36);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *(_WORD *)(this + 72) = v3;
    *(_QWORD *)(this + 16) = v5;
    v2 = *((_WORD *)a2 + 36);
  }
LABEL_6:
  if ((v2 & 0x100) != 0)
  {
    v6 = *((_DWORD *)a2 + 17);
    v3 |= 0x100u;
    *(_WORD *)(this + 72) = v3;
    *(_DWORD *)(this + 68) = v6;
    v2 = *((_WORD *)a2 + 36);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 72) = v3;
  *(_QWORD *)(this + 8) = v7;
  v2 = *((_WORD *)a2 + 36);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_17;
  }
LABEL_16:
  v8 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 72) = v3;
  *(_QWORD *)(this + 32) = v8;
  v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_18;
  }
LABEL_17:
  v9 = *((_QWORD *)a2 + 5);
  v3 |= 0x10u;
  *(_WORD *)(this + 72) = v3;
  *(_QWORD *)(this + 40) = v9;
  v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0)
      goto LABEL_12;
    goto LABEL_19;
  }
LABEL_18:
  v10 = *((_QWORD *)a2 + 7);
  v3 |= 0x40u;
  *(_WORD *)(this + 72) = v3;
  *(_QWORD *)(this + 56) = v10;
  v2 = *((_WORD *)a2 + 36);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0)
      return this;
LABEL_20:
    v12 = *((_DWORD *)a2 + 16);
    *(_WORD *)(this + 72) = v3 | 0x80;
    *(_DWORD *)(this + 64) = v12;
    return this;
  }
LABEL_19:
  v11 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *(_WORD *)(this + 72) = v3;
  *(_QWORD *)(this + 24) = v11;
  if ((*((_WORD *)a2 + 36) & 0x80) != 0)
    goto LABEL_20;
  return this;
}

uint64_t CMMsl::VO2MaxOutput::operator=(uint64_t a1, const CMMsl::VO2MaxOutput *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  if ((const CMMsl::VO2MaxOutput *)a1 != a2)
  {
    CMMsl::VO2MaxOutput::VO2MaxOutput((uint64_t)&v10, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    v11 = v3;
    v4 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    v13 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    v12 = v5;
    *(_QWORD *)&v5 = v15;
    v6 = *(_QWORD *)(a1 + 56);
    v7 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 56) = v14;
    *(_QWORD *)(a1 + 64) = v5;
    v8 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v16;
    v16 = v8;
    v14 = v6;
    v15 = v7;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::VO2MaxOutput *a2, CMMsl::VO2MaxOutput *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  int v12;

  v3 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  v4 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v6;
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v7;
  v8 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v8;
  v9 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v9;
  v10 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v10;
  result = *((double *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((double *)a2 + 3) = result;
  v12 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v12;
  return result;
}

double CMMsl::VO2MaxOutput::VO2MaxOutput(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100354FC0;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100354FC0;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  return result;
}

uint64_t CMMsl::VO2MaxOutput::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  void (**v11)(CMMsl::VO2MaxOutput *__hidden);
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  if (a1 != a2)
  {
    v11 = off_100354FC0;
    v3 = *(_DWORD *)(a2 + 72);
    *(_DWORD *)(a2 + 72) = 0;
    v4 = *(_QWORD *)(a2 + 56);
    v17 = *(_DWORD *)(a1 + 72);
    v5 = *(_OWORD *)(a2 + 8);
    v12 = *(_OWORD *)(a1 + 8);
    v14 = *(_OWORD *)(a1 + 40);
    v6 = *(_OWORD *)(a1 + 24);
    v7 = *(_OWORD *)(a2 + 24);
    v8 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 8) = v5;
    *(_OWORD *)(a1 + 40) = v8;
    *(_QWORD *)&v5 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)&v8 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 56) = v4;
    *(_OWORD *)(a1 + 24) = v7;
    v13 = v6;
    v9 = *(_QWORD *)(a2 + 64);
    *(_DWORD *)(a1 + 72) = v3;
    *(_QWORD *)(a1 + 64) = v9;
    v15 = v5;
    v16 = v8;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

uint64_t CMMsl::VO2MaxOutput::formatText(CMMsl::VO2MaxOutput *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 36);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "durationInSeconds", *((double *)this + 1));
    v5 = *((_WORD *)this + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "estimatedVo2Max", *((double *)this + 2));
  v5 = *((_WORD *)this + 36);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "filteredVo2Max", *((double *)this + 3));
  v5 = *((_WORD *)this + 36);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "hrMax", *((double *)this + 4));
  v5 = *((_WORD *)this + 36);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "hrMin", *((double *)this + 5));
  v5 = *((_WORD *)this + 36);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "sessionType", *((_DWORD *)this + 16));
  v5 = *((_WORD *)this + 36);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0)
      goto LABEL_9;
LABEL_19:
    PB::TextFormatter::format(a2, "variance", *((double *)this + 7));
    if ((*((_WORD *)this + 36) & 0x100) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_10;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 6));
  v5 = *((_WORD *)this + 36);
  if ((v5 & 0x40) != 0)
    goto LABEL_19;
LABEL_9:
  if ((v5 & 0x100) != 0)
LABEL_10:
    PB::TextFormatter::format(a2, "workoutType", *((_DWORD *)this + 17));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::VO2MaxOutput::readFrom(CMMsl::VO2MaxOutput *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 36) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_51;
              *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_74;
            case 2u:
              *((_WORD *)this + 36) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_51;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_74;
            case 3u:
              *((_WORD *)this + 36) |= 0x100u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v33 = 0;
                v34 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_79;
                  }
                  v35 = v21++;
                  v36 = *(_BYTE *)(v22 + v35);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0)
                    break;
                  v33 += 7;
                  v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_78:
                    v2 = v35 + 1;
                    goto LABEL_79;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_78;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_79;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_79:
              *((_DWORD *)this + 17) = v25;
              goto LABEL_85;
            case 4u:
              *((_WORD *)this + 36) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_51;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_74;
            case 5u:
              *((_WORD *)this + 36) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_51;
              *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_74;
            case 6u:
              *((_WORD *)this + 36) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_51;
              *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_74;
            case 7u:
              *((_WORD *)this + 36) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_51;
              *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_74;
            case 8u:
              *((_WORD *)this + 36) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_74:
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_51:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_85;
            case 9u:
              *((_WORD *)this + 36) |= 0x80u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_84;
                  }
                  v39 = v27++;
                  v40 = *(_BYTE *)(v28 + v39);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_83:
                    v2 = v39 + 1;
                    goto LABEL_84;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_83;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_84;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_84:
              *((_DWORD *)this + 16) = v31;
LABEL_85:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_85;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::VO2MaxOutput::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 72);
  if ((v4 & 0x20) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 48), 1u);
    v4 = *(_WORD *)(v3 + 72);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x100) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 68), 3u);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 4u);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 5u);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 6u);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 7u);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 64), 9u);
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 8u);
  if ((*(_WORD *)(v3 + 72) & 0x80) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 64), 9u);
  return this;
}

uint64_t CMMsl::VO2MaxOutput::hash_value(CMMsl::VO2MaxOutput *this)
{
  __int16 v1;
  double v2;
  double v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;

  v1 = *((_WORD *)this + 36);
  if ((v1 & 0x20) == 0)
  {
    v2 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_3;
LABEL_26:
    v3 = 0.0;
    if ((*((_WORD *)this + 36) & 0x100) != 0)
      goto LABEL_6;
    goto LABEL_27;
  }
  v2 = *((double *)this + 6);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_26;
LABEL_3:
  v3 = *((double *)this + 2);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((*((_WORD *)this + 36) & 0x100) != 0)
  {
LABEL_6:
    v4 = *((int *)this + 17);
    if ((v1 & 1) != 0)
      goto LABEL_7;
LABEL_28:
    v5 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_10;
LABEL_29:
    v6 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_13;
LABEL_30:
    v7 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_16;
LABEL_31:
    v8 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_19;
    goto LABEL_32;
  }
LABEL_27:
  v4 = 0;
  if ((v1 & 1) == 0)
    goto LABEL_28;
LABEL_7:
  v5 = *((double *)this + 1);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_29;
LABEL_10:
  v6 = *((double *)this + 4);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_30;
LABEL_13:
  v7 = *((double *)this + 5);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v1 & 0x40) == 0)
    goto LABEL_31;
LABEL_16:
  v8 = *((double *)this + 7);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((v1 & 4) != 0)
  {
LABEL_19:
    v9 = *((double *)this + 3);
    if (v9 == 0.0)
      v9 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_22;
LABEL_33:
    v10 = 0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ v10;
  }
LABEL_32:
  v9 = 0.0;
  if ((v1 & 0x80) == 0)
    goto LABEL_33;
LABEL_22:
  v10 = *((int *)this + 16);
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ v10;
}

void CMMsl::VehicularFlagsData::~VehicularFlagsData(CMMsl::VehicularFlagsData *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::VehicularFlagsData::VehicularFlagsData(uint64_t this, const CMMsl::VehicularFlagsData *a2)
{
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  int v9;

  *(_QWORD *)this = off_100354FF8;
  *(_DWORD *)(this + 20) = 0;
  v2 = *((_BYTE *)a2 + 20);
  if ((v2 & 0x10) != 0)
  {
    v4 = *((_BYTE *)a2 + 15);
    v3 = 16;
    *(_BYTE *)(this + 20) = 16;
    *(_BYTE *)(this + 15) = v4;
    v2 = *((_BYTE *)a2 + 20);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 20) & 8) != 0)
  {
LABEL_5:
    v5 = *((_BYTE *)a2 + 14);
    v3 |= 8u;
    *(_BYTE *)(this + 20) = v3;
    *(_BYTE *)(this + 14) = v5;
    v2 = *((_BYTE *)a2 + 20);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *((_BYTE *)a2 + 12);
    v3 |= 2u;
    *(_BYTE *)(this + 20) = v3;
    *(_BYTE *)(this + 12) = v6;
    v2 = *((_BYTE *)a2 + 20);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_BYTE *)a2 + 16);
  v3 |= 0x20u;
  *(_BYTE *)(this + 20) = v3;
  *(_BYTE *)(this + 16) = v7;
  v2 = *((_BYTE *)a2 + 20);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0)
      return this;
LABEL_14:
    v9 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 20) = v3 | 1;
    *(_DWORD *)(this + 8) = v9;
    return this;
  }
LABEL_13:
  v8 = *((_BYTE *)a2 + 13);
  v3 |= 4u;
  *(_BYTE *)(this + 20) = v3;
  *(_BYTE *)(this + 13) = v8;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
    goto LABEL_14;
  return this;
}

uint64_t CMMsl::VehicularFlagsData::operator=(uint64_t a1, const CMMsl::VehicularFlagsData *a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  _BYTE v8[8];
  int v9;
  int v10;
  char v11;
  int v12;

  if ((const CMMsl::VehicularFlagsData *)a1 != a2)
  {
    CMMsl::VehicularFlagsData::VehicularFlagsData((uint64_t)v8, a2);
    v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v12;
    v12 = v3;
    LOBYTE(v3) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v11;
    v11 = v3;
    v5 = *(_DWORD *)(a1 + 8);
    v4 = *(_DWORD *)(a1 + 12);
    v6 = v10;
    *(_DWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 12) = v6;
    v9 = v5;
    v10 = v4;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::VehicularFlagsData *a2, CMMsl::VehicularFlagsData *a3)
{
  int v3;
  int v4;

  v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 15);
  *(_BYTE *)(this + 15) = *((_BYTE *)a2 + 15);
  *((_BYTE *)a2 + 15) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 14);
  *(_BYTE *)(this + 14) = *((_BYTE *)a2 + 14);
  *((_BYTE *)a2 + 14) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 12);
  *(_BYTE *)(this + 12) = *((_BYTE *)a2 + 12);
  *((_BYTE *)a2 + 12) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 16);
  *(_BYTE *)(this + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a2 + 16) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 13);
  *(_BYTE *)(this + 13) = *((_BYTE *)a2 + 13);
  *((_BYTE *)a2 + 13) = v3;
  v4 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  return this;
}

uint64_t CMMsl::VehicularFlagsData::VehicularFlagsData(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = off_100354FF8;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_BYTE *)(result + 15) = *(_BYTE *)(a2 + 15);
  *(_BYTE *)(result + 14) = *(_BYTE *)(a2 + 14);
  *(_BYTE *)(result + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(result + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(result + 13) = *(_BYTE *)(a2 + 13);
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = off_100354FF8;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_BYTE *)(result + 15) = *(_BYTE *)(a2 + 15);
  *(_BYTE *)(result + 14) = *(_BYTE *)(a2 + 14);
  *(_BYTE *)(result + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(result + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(result + 13) = *(_BYTE *)(a2 + 13);
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::VehicularFlagsData::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  int v5;
  int v6;
  int v7;
  int v8;
  void (**v10)(CMMsl::VehicularFlagsData *__hidden);
  int v11;
  int v12;
  char v13;
  int v14;

  if (a1 != a2)
  {
    v10 = off_100354FF8;
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_BYTE *)(a2 + 16);
    v14 = *(_DWORD *)(a1 + 20);
    v13 = *(_BYTE *)(a1 + 16);
    v5 = *(_DWORD *)(a2 + 8);
    v6 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a1 + 20) = v3;
    *(_BYTE *)(a1 + 16) = v4;
    v8 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = v5;
    *(_DWORD *)(a1 + 12) = v6;
    v11 = v8;
    v12 = v7;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::VehicularFlagsData::formatText(CMMsl::VehicularFlagsData *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "basebandHint", *((_BYTE *)this + 12));
    v5 = *((_BYTE *)this + 20);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*((_BYTE *)this + 20) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "btHint", *((_BYTE *)this + 13));
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "gpsHint", *((_BYTE *)this + 14));
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(a2, "vehicularData", *((_DWORD *)this + 2));
    if ((*((_BYTE *)this + 20) & 0x20) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "motionHint", *((_BYTE *)this + 15));
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 1) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 0x20) != 0)
LABEL_7:
    PB::TextFormatter::format(a2, "wifiHint", *((_BYTE *)this + 16));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::VehicularFlagsData::readFrom(CMMsl::VehicularFlagsData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v3 > v2)
          v2 = v3;
        while (v2 != v3)
        {
          v17 = v3 + 1;
          v18 = *(_BYTE *)(v8 + v3);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v3 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v3 + 1;
          *((_QWORD *)a2 + 1) = v3 + 1;
          v13 = *(_BYTE *)(v8 + v3);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v3 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 20) |= 0x10u;
              v3 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              if (v3 >= v2)
              {
                v21 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v3++);
                *((_QWORD *)a2 + 1) = v3;
                v21 = v20 != 0;
              }
              *((_BYTE *)this + 15) = v21;
              goto LABEL_64;
            case 2u:
              *((_BYTE *)this + 20) |= 8u;
              v3 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              if (v3 >= v2)
              {
                v24 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v23 = *(unsigned __int8 *)(*(_QWORD *)a2 + v3++);
                *((_QWORD *)a2 + 1) = v3;
                v24 = v23 != 0;
              }
              *((_BYTE *)this + 14) = v24;
              goto LABEL_64;
            case 3u:
              *((_BYTE *)this + 20) |= 2u;
              v3 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              if (v3 >= v2)
              {
                v26 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v25 = *(unsigned __int8 *)(*(_QWORD *)a2 + v3++);
                *((_QWORD *)a2 + 1) = v3;
                v26 = v25 != 0;
              }
              *((_BYTE *)this + 12) = v26;
              goto LABEL_64;
            case 4u:
              *((_BYTE *)this + 20) |= 0x20u;
              v3 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              if (v3 >= v2)
              {
                v28 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)a2 + v3++);
                *((_QWORD *)a2 + 1) = v3;
                v28 = v27 != 0;
              }
              *((_BYTE *)this + 16) = v28;
              goto LABEL_64;
            case 5u:
              *((_BYTE *)this + 20) |= 4u;
              v3 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              if (v3 >= v2)
              {
                v30 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)a2 + v3++);
                *((_QWORD *)a2 + 1) = v3;
                v30 = v29 != 0;
              }
              *((_BYTE *)this + 13) = v30;
              goto LABEL_64;
            case 6u:
              *((_BYTE *)this + 20) |= 1u;
              v31 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v32 = *(_QWORD *)a2;
              if (v31 > 0xFFFFFFFFFFFFFFF5 || v31 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v35 = 0;
                if (v2 <= v31)
                  v3 = *((_QWORD *)a2 + 1);
                else
                  v3 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v3 == v31)
                  {
                    LODWORD(v35) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_63;
                  }
                  v39 = v31++;
                  v40 = *(_BYTE *)(v32 + v39);
                  *((_QWORD *)a2 + 1) = v31;
                  v35 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v35) = 0;
LABEL_62:
                    v3 = v39 + 1;
                    goto LABEL_63;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v35) = 0;
                goto LABEL_62;
              }
              v33 = 0;
              v34 = 0;
              v35 = 0;
              do
              {
                v3 = v31 + 1;
                *((_QWORD *)a2 + 1) = v31 + 1;
                v36 = *(_BYTE *)(v32 + v31);
                v35 |= (unint64_t)(v36 & 0x7F) << v33;
                if ((v36 & 0x80) == 0)
                  goto LABEL_63;
                v33 += 7;
                v31 = v3;
                v14 = v34++ > 8;
              }
              while (!v14);
              LODWORD(v35) = 0;
LABEL_63:
              *((_DWORD *)this + 2) = v35;
LABEL_64:
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v3 >= v2 || *((_BYTE *)a2 + 24))
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v3 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              goto LABEL_64;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::VehicularFlagsData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(_BYTE *)(this + 15), 1u);
    v4 = *(_BYTE *)(v3 + 20);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(this + 20) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 14), 2u);
  v4 = *(_BYTE *)(v3 + 20);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 12), 3u);
  v4 = *(_BYTE *)(v3 + 20);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 16), 4u);
  v4 = *(_BYTE *)(v3 + 20);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 8), 6u);
  }
LABEL_12:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 13), 5u);
  if ((*(_BYTE *)(v3 + 20) & 1) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 8), 6u);
  return this;
}

uint64_t CMMsl::VehicularFlagsData::hash_value(CMMsl::VehicularFlagsData *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*((_BYTE *)this + 20) & 0x10) != 0)
  {
    v1 = *((unsigned __int8 *)this + 15);
    if ((*((_BYTE *)this + 20) & 8) != 0)
    {
LABEL_3:
      v2 = *((unsigned __int8 *)this + 14);
      if ((*((_BYTE *)this + 20) & 2) != 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 20) & 8) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 20) & 2) != 0)
  {
LABEL_4:
    v3 = *((unsigned __int8 *)this + 12);
    if ((*((_BYTE *)this + 20) & 0x20) != 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  v3 = 0;
  if ((*((_BYTE *)this + 20) & 0x20) != 0)
  {
LABEL_5:
    v4 = *((unsigned __int8 *)this + 16);
    if ((*((_BYTE *)this + 20) & 4) != 0)
      goto LABEL_6;
LABEL_12:
    v5 = 0;
    if ((*((_BYTE *)this + 20) & 1) != 0)
      goto LABEL_7;
LABEL_13:
    v6 = 0;
    return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ v6;
  }
LABEL_11:
  v4 = 0;
  if ((*((_BYTE *)this + 20) & 4) == 0)
    goto LABEL_12;
LABEL_6:
  v5 = *((unsigned __int8 *)this + 13);
  if ((*((_BYTE *)this + 20) & 1) == 0)
    goto LABEL_13;
LABEL_7:
  v6 = *((unsigned int *)this + 2);
  return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ v6;
}

void CMMsl::VelocityEstimatorFusionState::~VelocityEstimatorFusionState(CMMsl::VelocityEstimatorFusionState *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::VelocityEstimatorFusionState::VelocityEstimatorFusionState(CMMsl::VelocityEstimatorFusionState *this, const CMMsl::VelocityEstimatorFusionState *a2)
{
  __int16 v2;
  __int16 v3;
  double result;
  int v5;
  int v6;
  int v7;

  *(_QWORD *)this = off_100355030;
  *((_DWORD *)this + 15) = 0;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    v3 = 1;
    *((_WORD *)this + 30) = 1;
    *((double *)this + 1) = result;
    v2 = *((_WORD *)a2 + 30);
    if ((v2 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_WORD *)a2 + 30) & 0x100) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 12);
    v3 |= 0x100u;
    *((_WORD *)this + 30) = v3;
    *((_DWORD *)this + 12) = LODWORD(result);
    v2 = *((_WORD *)a2 + 30);
  }
LABEL_6:
  if ((v2 & 0x200) != 0)
  {
    LODWORD(result) = *((_DWORD *)a2 + 13);
    v3 |= 0x200u;
    *((_WORD *)this + 30) = v3;
    *((_DWORD *)this + 13) = LODWORD(result);
    v2 = *((_WORD *)a2 + 30);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(result) = *((_DWORD *)a2 + 14);
  v3 |= 0x400u;
  *((_WORD *)this + 30) = v3;
  *((_DWORD *)this + 14) = LODWORD(result);
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  LODWORD(result) = *((_DWORD *)a2 + 9);
  v3 |= 0x20u;
  *((_WORD *)this + 30) = v3;
  *((_DWORD *)this + 9) = LODWORD(result);
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  LODWORD(result) = *((_DWORD *)a2 + 10);
  v3 |= 0x40u;
  *((_WORD *)this + 30) = v3;
  *((_DWORD *)this + 10) = LODWORD(result);
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  LODWORD(result) = *((_DWORD *)a2 + 11);
  v3 |= 0x80u;
  *((_WORD *)this + 30) = v3;
  *((_DWORD *)this + 11) = LODWORD(result);
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  v5 = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *((_WORD *)this + 30) = v3;
  *((_DWORD *)this + 6) = v5;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  v6 = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((_WORD *)this + 30) = v3;
  *((_DWORD *)this + 7) = v6;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 2) == 0)
      return result;
LABEL_24:
    result = *((double *)a2 + 2);
    *((_WORD *)this + 30) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
LABEL_23:
  v7 = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *((_WORD *)this + 30) = v3;
  *((_DWORD *)this + 8) = v7;
  if ((*((_WORD *)a2 + 30) & 2) != 0)
    goto LABEL_24;
  return result;
}

CMMsl *CMMsl::VelocityEstimatorFusionState::operator=(CMMsl *a1, const CMMsl::VelocityEstimatorFusionState *a2)
{
  CMMsl::VelocityEstimatorFusionState *v3;
  _BYTE v5[64];

  if (a1 != a2)
  {
    CMMsl::VelocityEstimatorFusionState::VelocityEstimatorFusionState((CMMsl::VelocityEstimatorFusionState *)v5, a2);
    CMMsl::swap(a1, (CMMsl::VelocityEstimatorFusionState *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::VelocityEstimatorFusionState *a2, CMMsl::VelocityEstimatorFusionState *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  double result;

  v3 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  v5 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  v6 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v6;
  v7 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v7;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::VelocityEstimatorFusionState::VelocityEstimatorFusionState(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100355030;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

CMMsl *CMMsl::VelocityEstimatorFusionState::operator=(CMMsl *this, uint64_t a2, CMMsl::VelocityEstimatorFusionState *a3)
{
  void (**v5)(CMMsl::VelocityEstimatorFusionState *__hidden);
  __int128 v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  int v11;

  if (this != (CMMsl *)a2)
  {
    v5 = off_100355030;
    v11 = *(_DWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 60) = 0;
    v10 = *(_QWORD *)(a2 + 52);
    v9 = *(_OWORD *)(a2 + 36);
    v7 = *(_QWORD *)(a2 + 24);
    v8 = *(_DWORD *)(a2 + 32);
    v6 = *(_OWORD *)(a2 + 8);
    CMMsl::swap(this, (CMMsl::VelocityEstimatorFusionState *)&v5, a3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return this;
}

uint64_t CMMsl::VelocityEstimatorFusionState::formatText(CMMsl::VelocityEstimatorFusionState *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 30);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "sourceX", *((_DWORD *)this + 6));
    v5 = *((_WORD *)this + 30);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "sourceY", *((_DWORD *)this + 7));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "sourceZ", *((_DWORD *)this + 8));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 2) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 2) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "velocityUncX", *((float *)this + 9));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "velocityUncY", *((float *)this + 10));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "velocityUncZ", *((float *)this + 11));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(a2, "velocityY", *((float *)this + 13));
    if ((*((_WORD *)this + 30) & 0x400) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "velocityX", *((float *)this + 12));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x200) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x400) != 0)
LABEL_12:
    PB::TextFormatter::format(a2, "velocityZ", *((float *)this + 14));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::VelocityEstimatorFusionState::readFrom(CMMsl::VelocityEstimatorFusionState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 30) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_69;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_92;
            case 2u:
              *((_WORD *)this + 30) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_69;
              *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_45;
            case 3u:
              *((_WORD *)this + 30) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_69;
              *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_45;
            case 4u:
              *((_WORD *)this + 30) |= 0x400u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_69;
              *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_45;
            case 5u:
              *((_WORD *)this + 30) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_69;
              *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_45;
            case 6u:
              *((_WORD *)this + 30) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_69;
              *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_45;
            case 7u:
              *((_WORD *)this + 30) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_69;
              *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_45:
              v2 = *((_QWORD *)a2 + 1) + 4;
              goto LABEL_93;
            case 8u:
              *((_WORD *)this + 30) |= 4u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v39 = 0;
                v40 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_98;
                  }
                  v41 = v21++;
                  v42 = *(_BYTE *)(v22 + v41);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0)
                    break;
                  v39 += 7;
                  v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_97:
                    v2 = v41 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_97;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_98;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_98:
              *((_DWORD *)this + 6) = v25;
              goto LABEL_109;
            case 9u:
              *((_WORD *)this + 30) |= 8u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v43 = 0;
                v44 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_103;
                  }
                  v45 = v27++;
                  v46 = *(_BYTE *)(v28 + v45);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0)
                    break;
                  v43 += 7;
                  v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_102:
                    v2 = v45 + 1;
                    goto LABEL_103;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_102;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_103;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_103:
              *((_DWORD *)this + 7) = v31;
              goto LABEL_109;
            case 0xAu:
              *((_WORD *)this + 30) |= 0x10u;
              v33 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_108;
                  }
                  v49 = v33++;
                  v50 = *(_BYTE *)(v34 + v49);
                  *((_QWORD *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_107:
                    v2 = v49 + 1;
                    goto LABEL_108;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v37) = 0;
                goto LABEL_107;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)a2 + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_108;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_108:
              *((_DWORD *)this + 8) = v37;
LABEL_109:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xBu:
              *((_WORD *)this + 30) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_92:
                v2 = *((_QWORD *)a2 + 1) + 8;
LABEL_93:
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_69:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_109;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_109;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::VelocityEstimatorFusionState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 60);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((*(_WORD *)(this + 60) & 0x100) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 2u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 3u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 4u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 5u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 6u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 7u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 8u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 9u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 16), 0xBu);
  }
LABEL_22:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 0xAu);
  if ((*(_WORD *)(v3 + 60) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16), 0xBu);
  return this;
}

uint64_t CMMsl::VelocityEstimatorFusionState::hash_value(CMMsl::VelocityEstimatorFusionState *this)
{
  __int16 v1;
  double v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;

  v1 = *((_WORD *)this + 30);
  if ((v1 & 1) == 0)
  {
    v2 = 0.0;
    if ((*((_WORD *)this + 30) & 0x100) != 0)
      goto LABEL_3;
LABEL_30:
    v4 = 0;
    if ((*((_WORD *)this + 30) & 0x200) != 0)
      goto LABEL_6;
LABEL_31:
    v6 = 0;
    if ((*((_WORD *)this + 30) & 0x400) != 0)
      goto LABEL_9;
LABEL_32:
    v8 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_12;
LABEL_33:
    v10 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_15;
LABEL_34:
    v12 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_18;
LABEL_35:
    v14 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_21;
    goto LABEL_36;
  }
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_WORD *)this + 30) & 0x100) == 0)
    goto LABEL_30;
LABEL_3:
  v3 = *((float *)this + 12);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((*((_WORD *)this + 30) & 0x200) == 0)
    goto LABEL_31;
LABEL_6:
  v5 = *((float *)this + 13);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((*((_WORD *)this + 30) & 0x400) == 0)
    goto LABEL_32;
LABEL_9:
  v7 = *((float *)this + 14);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_33;
LABEL_12:
  v9 = *((float *)this + 9);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_34;
LABEL_15:
  v11 = *((float *)this + 10);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_35;
LABEL_18:
  v13 = *((float *)this + 11);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_21:
    v15 = *((unsigned int *)this + 6);
    if ((v1 & 8) != 0)
      goto LABEL_22;
    goto LABEL_37;
  }
LABEL_36:
  v15 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_22:
    v16 = *((unsigned int *)this + 7);
    if ((v1 & 0x10) != 0)
      goto LABEL_23;
    goto LABEL_38;
  }
LABEL_37:
  v16 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_23:
    v17 = *((unsigned int *)this + 8);
    if ((v1 & 2) != 0)
      goto LABEL_24;
LABEL_39:
    v18 = 0.0;
    return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v15 ^ v16 ^ v17 ^ *(_QWORD *)&v18;
  }
LABEL_38:
  v17 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_39;
LABEL_24:
  v18 = *((double *)this + 2);
  if (v18 == 0.0)
    v18 = 0.0;
  return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v15 ^ v16 ^ v17 ^ *(_QWORD *)&v18;
}

void CMMsl::VibrationEvent::~VibrationEvent(CMMsl::VibrationEvent *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::VibrationEvent::VibrationEvent(uint64_t this, const CMMsl::VibrationEvent *a2)
{
  char v2;

  *(_QWORD *)this = off_100355068;
  *(_DWORD *)(this + 12) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_BYTE *)a2 + 8);
    *(_BYTE *)(this + 12) = 1;
    *(_BYTE *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::VibrationEvent::operator=(uint64_t a1, uint64_t a2)
{
  char v3;
  int v4;
  char v5;
  void (**v7)(CMMsl::VibrationEvent *__hidden);
  char v8;
  int v9;

  if (a1 != a2)
  {
    v7 = off_100355068;
    v3 = *(_BYTE *)(a2 + 8);
    v4 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(_BYTE *)(a2 + 12) & 1;
    v9 = v4;
    v5 = *(_BYTE *)(a1 + 8);
    *(_BYTE *)(a1 + 8) = v3;
    v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

{
  int v3;
  char v4;
  int v5;
  void (**v7)(CMMsl::VibrationEvent *__hidden);
  char v8;
  int v9;

  if (a1 != a2)
  {
    v7 = off_100355068;
    v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    v4 = *(_BYTE *)(a2 + 8);
    v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    v9 = v5;
    LOBYTE(v3) = *(_BYTE *)(a1 + 8);
    *(_BYTE *)(a1 + 8) = v4;
    v8 = v3;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::VibrationEvent *a2, CMMsl::VibrationEvent *a3)
{
  int v3;

  v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 8);
  *(_BYTE *)(this + 8) = *((_BYTE *)a2 + 8);
  *((_BYTE *)a2 + 8) = v3;
  return this;
}

uint64_t CMMsl::VibrationEvent::formatText(CMMsl::VibrationEvent *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 12) & 1) != 0)
    PB::TextFormatter::format(a2, "isDeviceVibrating", *((_BYTE *)this + 8));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::VibrationEvent::readFrom(CMMsl::VibrationEvent *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 12) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        if (v2 >= v3)
        {
          v21 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v21 = v20 != 0;
        }
        *((_BYTE *)this + 8) = v21;
      }
      else
      {
        result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::VibrationEvent::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 12) & 1) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(this + 8), 1u);
  return this;
}

uint64_t CMMsl::VibrationEvent::hash_value(CMMsl::VibrationEvent *this)
{
  if ((*((_BYTE *)this + 12) & 1) != 0)
    return *((unsigned __int8 *)this + 8);
  else
    return 0;
}

void CMMsl::ViewObstructedMachineLearningDecision::~ViewObstructedMachineLearningDecision(CMMsl::ViewObstructedMachineLearningDecision *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::ViewObstructedMachineLearningDecision::ViewObstructedMachineLearningDecision(uint64_t this, const CMMsl::ViewObstructedMachineLearningDecision *a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)this = off_1003550A0;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_BYTE *)a2 + 16);
    *(_BYTE *)(this + 20) = v2;
    *(_BYTE *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::ViewObstructedMachineLearningDecision::operator=(uint64_t a1, uint64_t a2)
{
  char v2;
  void (**v4)(CMMsl::ViewObstructedMachineLearningDecision *__hidden);
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  char v9;
  _QWORD v11[2];
  char v12;
  int v13;

  if (a1 != a2)
  {
    v4 = off_1003550A0;
    v11[0] = off_1003550A0;
    v13 = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      v4 = *(void (***)(CMMsl::ViewObstructedMachineLearningDecision *__hidden))(a2 + 8);
      LOBYTE(v13) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v2 = *(_BYTE *)(a2 + 16);
        LOBYTE(v13) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v13;
    v13 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v11[1] = v8;
    v9 = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v2;
    v12 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

{
  int v3;
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  _QWORD v9[2];
  char v10;
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_BYTE *)(a2 + 16);
    v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v9[0] = off_1003550A0;
    v9[1] = v7;
    LOBYTE(v3) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v5;
    v10 = v3;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::ViewObstructedMachineLearningDecision *a2, CMMsl::ViewObstructedMachineLearningDecision *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LOBYTE(v4) = *(_BYTE *)(this + 16);
  *(_BYTE *)(this + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a2 + 16) = v4;
  return this;
}

uint64_t CMMsl::ViewObstructedMachineLearningDecision::formatText(CMMsl::ViewObstructedMachineLearningDecision *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "shouldSuppress", *((_BYTE *)this + 16));
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ViewObstructedMachineLearningDecision::readFrom(CMMsl::ViewObstructedMachineLearningDecision *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  uint64_t result;
  char v30;
  unsigned int v31;
  unint64_t v32;
  char v33;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        if (v2 >= v3)
        {
          v28 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v27 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v28 = v27 != 0;
        }
        *((_BYTE *)this + 16) = v28;
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v21 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v3)
        {
          v30 = 0;
          v31 = 0;
          v25 = 0;
          if (v3 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          else
            v2 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v2 == v21)
            {
              v25 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_48;
            }
            v32 = v21++;
            v33 = *(_BYTE *)(v22 + v32);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0)
              break;
            v30 += 7;
            v14 = v31++ > 8;
            if (v14)
            {
              v25 = 0;
              goto LABEL_47;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v25 = 0;
LABEL_47:
          v2 = v32 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              v25 = 0;
              break;
            }
          }
        }
LABEL_48:
        *((_QWORD *)this + 1) = v25;
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::ViewObstructedMachineLearningDecision::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 16), 2u);
  return this;
}

uint64_t CMMsl::ViewObstructedMachineLearningDecision::hash_value(CMMsl::ViewObstructedMachineLearningDecision *this)
{
  uint64_t v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((_QWORD *)this + 1);
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_5:
    v2 = 0;
    return v2 ^ v1;
  }
  v1 = 0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_5;
LABEL_3:
  v2 = *((unsigned __int8 *)this + 16);
  return v2 ^ v1;
}

void CMMsl::ViewObstructedMachineLearningFeatures::~ViewObstructedMachineLearningFeatures(CMMsl::ViewObstructedMachineLearningFeatures *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::ViewObstructedMachineLearningFeatures::ViewObstructedMachineLearningFeatures(CMMsl::ViewObstructedMachineLearningFeatures *this, const CMMsl::ViewObstructedMachineLearningFeatures *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  float result;

  *(_QWORD *)this = off_1003550D8;
  *((_DWORD *)this + 29) = 0;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_DWORD *)this + 29) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_DWORD *)a2 + 29);
    if ((v2 & 0x4000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x4000) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 17);
    v3 |= 0x4000u;
    *((_DWORD *)this + 29) = v3;
    *((float *)this + 17) = result;
    v2 = *((_DWORD *)a2 + 29);
  }
LABEL_6:
  if ((v2 & 0x8000) != 0)
  {
    result = *((float *)a2 + 18);
    v3 |= 0x8000u;
    *((_DWORD *)this + 29) = v3;
    *((float *)this + 18) = result;
    v2 = *((_DWORD *)a2 + 29);
    if ((v2 & 0x10000) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0)
        goto LABEL_9;
      goto LABEL_33;
    }
  }
  else if ((v2 & 0x10000) == 0)
  {
    goto LABEL_8;
  }
  result = *((float *)a2 + 19);
  v3 |= 0x10000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 19) = result;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_33:
  result = *((float *)a2 + 12);
  v3 |= 0x200u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 12) = result;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x400) == 0)
  {
LABEL_10:
    if ((v2 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_35;
  }
LABEL_34:
  result = *((float *)a2 + 13);
  v3 |= 0x400u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 13) = result;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x800) == 0)
  {
LABEL_11:
    if ((v2 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_36;
  }
LABEL_35:
  result = *((float *)a2 + 14);
  v3 |= 0x800u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 14) = result;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x1000) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_37;
  }
LABEL_36:
  result = *((float *)a2 + 15);
  v3 |= 0x1000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 15) = result;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_14;
    goto LABEL_38;
  }
LABEL_37:
  result = *((float *)a2 + 16);
  v3 |= 0x2000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 16) = result;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x40000) == 0)
      goto LABEL_15;
    goto LABEL_39;
  }
LABEL_38:
  result = *((float *)a2 + 28);
  v3 |= 0x2000000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 28) = result;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x40000) == 0)
  {
LABEL_15:
    if ((v2 & 0x20000) == 0)
      goto LABEL_16;
    goto LABEL_40;
  }
LABEL_39:
  result = *((float *)a2 + 21);
  v3 |= 0x40000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 21) = result;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x20000) == 0)
  {
LABEL_16:
    if ((v2 & 4) == 0)
      goto LABEL_17;
    goto LABEL_41;
  }
LABEL_40:
  result = *((float *)a2 + 20);
  v3 |= 0x20000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 20) = result;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 4) == 0)
  {
LABEL_17:
    if ((v2 & 8) == 0)
      goto LABEL_18;
    goto LABEL_42;
  }
LABEL_41:
  result = *((float *)a2 + 5);
  v3 |= 4u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 5) = result;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 8) == 0)
  {
LABEL_18:
    if ((v2 & 0x10) == 0)
      goto LABEL_19;
    goto LABEL_43;
  }
LABEL_42:
  result = *((float *)a2 + 6);
  v3 |= 8u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 6) = result;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x10) == 0)
  {
LABEL_19:
    if ((v2 & 0x20) == 0)
      goto LABEL_20;
    goto LABEL_44;
  }
LABEL_43:
  result = *((float *)a2 + 7);
  v3 |= 0x10u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 7) = result;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x20) == 0)
  {
LABEL_20:
    if ((v2 & 0x40) == 0)
      goto LABEL_21;
    goto LABEL_45;
  }
LABEL_44:
  result = *((float *)a2 + 8);
  v3 |= 0x20u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 8) = result;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x40) == 0)
  {
LABEL_21:
    if ((v2 & 0x80) == 0)
      goto LABEL_22;
    goto LABEL_46;
  }
LABEL_45:
  result = *((float *)a2 + 9);
  v3 |= 0x40u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 9) = result;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x80) == 0)
  {
LABEL_22:
    if ((v2 & 0x80000) == 0)
      goto LABEL_23;
    goto LABEL_47;
  }
LABEL_46:
  result = *((float *)a2 + 10);
  v3 |= 0x80u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 10) = result;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x80000) == 0)
  {
LABEL_23:
    if ((v2 & 0x100000) == 0)
      goto LABEL_24;
    goto LABEL_48;
  }
LABEL_47:
  result = *((float *)a2 + 22);
  v3 |= 0x80000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 22) = result;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x100000) == 0)
  {
LABEL_24:
    if ((v2 & 0x200000) == 0)
      goto LABEL_25;
    goto LABEL_49;
  }
LABEL_48:
  result = *((float *)a2 + 23);
  v3 |= 0x100000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 23) = result;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x200000) == 0)
  {
LABEL_25:
    if ((v2 & 0x400000) == 0)
      goto LABEL_26;
    goto LABEL_50;
  }
LABEL_49:
  result = *((float *)a2 + 24);
  v3 |= 0x200000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 24) = result;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x400000) == 0)
  {
LABEL_26:
    if ((v2 & 0x800000) == 0)
      goto LABEL_27;
    goto LABEL_51;
  }
LABEL_50:
  result = *((float *)a2 + 25);
  v3 |= 0x400000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 25) = result;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x800000) == 0)
  {
LABEL_27:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_28;
    goto LABEL_52;
  }
LABEL_51:
  result = *((float *)a2 + 26);
  v3 |= 0x800000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 26) = result;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_28:
    if ((v2 & 0x100) == 0)
      goto LABEL_29;
    goto LABEL_53;
  }
LABEL_52:
  result = *((float *)a2 + 27);
  v3 |= 0x1000000u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 27) = result;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x100) == 0)
  {
LABEL_29:
    if ((v2 & 2) == 0)
      return result;
LABEL_54:
    result = *((float *)a2 + 4);
    *((_DWORD *)this + 29) = v3 | 2;
    *((float *)this + 4) = result;
    return result;
  }
LABEL_53:
  result = *((float *)a2 + 11);
  v3 |= 0x100u;
  *((_DWORD *)this + 29) = v3;
  *((float *)this + 11) = result;
  if ((*((_DWORD *)a2 + 29) & 2) != 0)
    goto LABEL_54;
  return result;
}

CMMsl *CMMsl::ViewObstructedMachineLearningFeatures::operator=(CMMsl *a1, const CMMsl::ViewObstructedMachineLearningFeatures *a2)
{
  CMMsl::ViewObstructedMachineLearningFeatures *v3;
  _BYTE v5[120];

  if (a1 != a2)
  {
    CMMsl::ViewObstructedMachineLearningFeatures::ViewObstructedMachineLearningFeatures((CMMsl::ViewObstructedMachineLearningFeatures *)v5, a2);
    CMMsl::swap(a1, (CMMsl::ViewObstructedMachineLearningFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ViewObstructedMachineLearningFeatures *a2, CMMsl::ViewObstructedMachineLearningFeatures *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  float result;

  v3 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v5;
  v6 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v6;
  v7 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v7;
  v8 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v8;
  v9 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v9;
  v10 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v10;
  v11 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v11;
  v12 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v12;
  v13 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v13;
  v14 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v14;
  v15 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v15;
  v16 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v16;
  v17 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v17;
  v18 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v18;
  v19 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v19;
  v20 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v20;
  v21 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v21;
  v22 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v22;
  v23 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v23;
  v24 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v24;
  v25 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v25;
  v26 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v26;
  v27 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v27;
  v28 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v28;
  result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

float CMMsl::ViewObstructedMachineLearningFeatures::ViewObstructedMachineLearningFeatures(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_1003550D8;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a2 + 116) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

CMMsl *CMMsl::ViewObstructedMachineLearningFeatures::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::ViewObstructedMachineLearningFeatures *v3;
  _BYTE v5[120];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::ViewObstructedMachineLearningFeatures::ViewObstructedMachineLearningFeatures((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::ViewObstructedMachineLearningFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::ViewObstructedMachineLearningFeatures::formatText(CMMsl::ViewObstructedMachineLearningFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "absMeanGravX", *((float *)this + 4));
    v5 = *((_DWORD *)this + 29);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_31;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "accelFFTBin1", *((float *)this + 5));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "accelFFTBin2", *((float *)this + 6));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "accelFFTBin3", *((float *)this + 7));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "accelFFTBin4", *((float *)this + 8));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "accelFFTBin5", *((float *)this + 9));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "accelFFTBin6", *((float *)this + 10));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "accelFFTBinDotPressureFFTBin", *((float *)this + 11));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "fFTBin1", *((float *)this + 12));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "fFTBin2", *((float *)this + 13));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "fFTBin3", *((float *)this + 14));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "fFTBin4", *((float *)this + 15));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "fFTBin5", *((float *)this + 16));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "meanGravX", *((float *)this + 17));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "meanGravY", *((float *)this + 18));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "meanGravZ", *((float *)this + 19));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "medianLux", *((float *)this + 20));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 0x80000) == 0)
      goto LABEL_20;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "medianPocketProbability", *((float *)this + 21));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x80000) == 0)
  {
LABEL_20:
    if ((v5 & 0x100000) == 0)
      goto LABEL_21;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "pressureFFTBin1", *((float *)this + 22));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x100000) == 0)
  {
LABEL_21:
    if ((v5 & 0x200000) == 0)
      goto LABEL_22;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "pressureFFTBin2", *((float *)this + 23));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x200000) == 0)
  {
LABEL_22:
    if ((v5 & 0x400000) == 0)
      goto LABEL_23;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "pressureFFTBin3", *((float *)this + 24));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x400000) == 0)
  {
LABEL_23:
    if ((v5 & 0x800000) == 0)
      goto LABEL_24;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "pressureFFTBin4", *((float *)this + 25));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x800000) == 0)
  {
LABEL_24:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_25;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "pressureFFTBin5", *((float *)this + 26));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_26;
LABEL_53:
    PB::TextFormatter::format(a2, "stdPressure", *((float *)this + 28));
    if ((*((_DWORD *)this + 29) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_27;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "pressureFFTBin6", *((float *)this + 27));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x2000000) != 0)
    goto LABEL_53;
LABEL_26:
  if ((v5 & 1) != 0)
LABEL_27:
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ViewObstructedMachineLearningFeatures::readFrom(CMMsl::ViewObstructedMachineLearningFeatures *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 29) |= 1u;
              v20 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v21 = *(_QWORD *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_124;
                  }
                  v29 = v20++;
                  v30 = *(_BYTE *)(v21 + v29);
                  *((_QWORD *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_123;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v24 = 0;
LABEL_123:
                v2 = v29 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)a2 + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_124;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_124:
              *((_QWORD *)this + 1) = v24;
              goto LABEL_115;
            case 2u:
              *((_DWORD *)this + 29) |= 0x4000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_105;
              *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_114;
            case 3u:
              *((_DWORD *)this + 29) |= 0x8000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_105;
              *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_114;
            case 4u:
              *((_DWORD *)this + 29) |= 0x10000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_105;
              *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_114;
            case 5u:
              *((_DWORD *)this + 29) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_105;
              *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_114;
            case 6u:
              *((_DWORD *)this + 29) |= 0x400u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_105;
              *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_114;
            case 7u:
              *((_DWORD *)this + 29) |= 0x800u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_105;
              *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_114;
            case 8u:
              *((_DWORD *)this + 29) |= 0x1000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_105;
              *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_114;
            case 9u:
              *((_DWORD *)this + 29) |= 0x2000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_105;
              *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_114;
            case 0xAu:
              *((_DWORD *)this + 29) |= 0x2000000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_105;
              *((_DWORD *)this + 28) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_114;
            case 0xBu:
              *((_DWORD *)this + 29) |= 0x40000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_105;
              *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_114;
            case 0xCu:
              *((_DWORD *)this + 29) |= 0x20000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_105;
              *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_114;
            case 0xDu:
              *((_DWORD *)this + 29) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_105;
              *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_114;
            case 0xEu:
              *((_DWORD *)this + 29) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_105;
              *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_114;
            case 0xFu:
              *((_DWORD *)this + 29) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_105;
              *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_114;
            case 0x10u:
              *((_DWORD *)this + 29) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_105;
              *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_114;
            case 0x11u:
              *((_DWORD *)this + 29) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_105;
              *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_114;
            case 0x12u:
              *((_DWORD *)this + 29) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_105;
              *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_114;
            case 0x13u:
              *((_DWORD *)this + 29) |= 0x80000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_105;
              *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_114;
            case 0x14u:
              *((_DWORD *)this + 29) |= 0x100000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_105;
              *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_114;
            case 0x15u:
              *((_DWORD *)this + 29) |= 0x200000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_105;
              *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_114;
            case 0x16u:
              *((_DWORD *)this + 29) |= 0x400000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_105;
              *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_114;
            case 0x17u:
              *((_DWORD *)this + 29) |= 0x800000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_105;
              *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_114;
            case 0x18u:
              *((_DWORD *)this + 29) |= 0x1000000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_105;
              *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_114;
            case 0x19u:
              *((_DWORD *)this + 29) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_105;
              *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_114;
            case 0x1Au:
              *((_DWORD *)this + 29) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_114:
                v2 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_105:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_115;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
LABEL_115:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::ViewObstructedMachineLearningFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 116);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 8), 1u);
    v4 = *(_DWORD *)(v3 + 116);
    if ((v4 & 0x4000) == 0)
    {
LABEL_3:
      if ((v4 & 0x8000) == 0)
        goto LABEL_4;
      goto LABEL_30;
    }
  }
  else if ((v4 & 0x4000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 2u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x8000) == 0)
  {
LABEL_4:
    if ((v4 & 0x10000) == 0)
      goto LABEL_5;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 3u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x10000) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 4u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x400) == 0)
      goto LABEL_7;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 5u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x400) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0)
      goto LABEL_8;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 6u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 7u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 8u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_11;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 9u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x40000) == 0)
      goto LABEL_12;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 112), 0xAu);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40000) == 0)
  {
LABEL_12:
    if ((v4 & 0x20000) == 0)
      goto LABEL_13;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 0xBu);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20000) == 0)
  {
LABEL_13:
    if ((v4 & 4) == 0)
      goto LABEL_14;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0xCu);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 4) == 0)
  {
LABEL_14:
    if ((v4 & 8) == 0)
      goto LABEL_15;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 0xDu);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 8) == 0)
  {
LABEL_15:
    if ((v4 & 0x10) == 0)
      goto LABEL_16;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 0xEu);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x10) == 0)
  {
LABEL_16:
    if ((v4 & 0x20) == 0)
      goto LABEL_17;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 0xFu);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20) == 0)
  {
LABEL_17:
    if ((v4 & 0x40) == 0)
      goto LABEL_18;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 0x10u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40) == 0)
  {
LABEL_18:
    if ((v4 & 0x80) == 0)
      goto LABEL_19;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 0x11u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x80) == 0)
  {
LABEL_19:
    if ((v4 & 0x80000) == 0)
      goto LABEL_20;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 0x12u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x80000) == 0)
  {
LABEL_20:
    if ((v4 & 0x100000) == 0)
      goto LABEL_21;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 0x13u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x100000) == 0)
  {
LABEL_21:
    if ((v4 & 0x200000) == 0)
      goto LABEL_22;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 92), 0x14u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x200000) == 0)
  {
LABEL_22:
    if ((v4 & 0x400000) == 0)
      goto LABEL_23;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 0x15u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x400000) == 0)
  {
LABEL_23:
    if ((v4 & 0x800000) == 0)
      goto LABEL_24;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 0x16u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x800000) == 0)
  {
LABEL_24:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_25;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 0x17u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x100) == 0)
      goto LABEL_26;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(float *)(v3 + 108), 0x18u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x100) == 0)
  {
LABEL_26:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 16), 0x1Au);
  }
LABEL_52:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 0x19u);
  if ((*(_DWORD *)(v3 + 116) & 2) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 16), 0x1Au);
  return this;
}

uint64_t CMMsl::ViewObstructedMachineLearningFeatures::hash_value(CMMsl::ViewObstructedMachineLearningFeatures *this)
{
  int v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  float v47;
  uint64_t v48;
  float v49;
  uint64_t v50;
  float v51;
  uint64_t v52;

  v1 = *((_DWORD *)this + 29);
  if ((v1 & 1) == 0)
  {
    v2 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_3;
LABEL_79:
    v4 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_6;
LABEL_80:
    v6 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_9;
LABEL_81:
    v8 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_12;
LABEL_82:
    v10 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_15;
LABEL_83:
    v12 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_18;
LABEL_84:
    v14 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_21;
LABEL_85:
    v16 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_24;
LABEL_86:
    v18 = 0;
    if ((v1 & 0x2000000) != 0)
      goto LABEL_27;
LABEL_87:
    v20 = 0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_30;
LABEL_88:
    v22 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_33;
LABEL_89:
    v24 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_36;
LABEL_90:
    v26 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_39;
LABEL_91:
    v28 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_42;
LABEL_92:
    v30 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_45;
LABEL_93:
    v32 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_48;
LABEL_94:
    v34 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_51;
LABEL_95:
    v36 = 0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_54;
LABEL_96:
    v38 = 0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_57;
LABEL_97:
    v40 = 0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_60;
LABEL_98:
    v42 = 0;
    if ((v1 & 0x400000) != 0)
      goto LABEL_63;
LABEL_99:
    v44 = 0;
    if ((v1 & 0x800000) != 0)
      goto LABEL_66;
LABEL_100:
    v46 = 0;
    if ((v1 & 0x1000000) != 0)
      goto LABEL_69;
LABEL_101:
    v48 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_72;
    goto LABEL_102;
  }
  v2 = *((_QWORD *)this + 1);
  if ((v1 & 0x4000) == 0)
    goto LABEL_79;
LABEL_3:
  v3 = *((float *)this + 17);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_80;
LABEL_6:
  v5 = *((float *)this + 18);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_81;
LABEL_9:
  v7 = *((float *)this + 19);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x200) == 0)
    goto LABEL_82;
LABEL_12:
  v9 = *((float *)this + 12);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 0x400) == 0)
    goto LABEL_83;
LABEL_15:
  v11 = *((float *)this + 13);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_84;
LABEL_18:
  v13 = *((float *)this + 14);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_85;
LABEL_21:
  v15 = *((float *)this + 15);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_86;
LABEL_24:
  v17 = *((float *)this + 16);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v1 & 0x2000000) == 0)
    goto LABEL_87;
LABEL_27:
  v19 = *((float *)this + 28);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  if ((v1 & 0x40000) == 0)
    goto LABEL_88;
LABEL_30:
  v21 = *((float *)this + 21);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  if ((v1 & 0x20000) == 0)
    goto LABEL_89;
LABEL_33:
  v23 = *((float *)this + 20);
  v24 = LODWORD(v23);
  if (v23 == 0.0)
    v24 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_90;
LABEL_36:
  v25 = *((float *)this + 5);
  v26 = LODWORD(v25);
  if (v25 == 0.0)
    v26 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_91;
LABEL_39:
  v27 = *((float *)this + 6);
  v28 = LODWORD(v27);
  if (v27 == 0.0)
    v28 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_92;
LABEL_42:
  v29 = *((float *)this + 7);
  v30 = LODWORD(v29);
  if (v29 == 0.0)
    v30 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_93;
LABEL_45:
  v31 = *((float *)this + 8);
  v32 = LODWORD(v31);
  if (v31 == 0.0)
    v32 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_94;
LABEL_48:
  v33 = *((float *)this + 9);
  v34 = LODWORD(v33);
  if (v33 == 0.0)
    v34 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_95;
LABEL_51:
  v35 = *((float *)this + 10);
  v36 = LODWORD(v35);
  if (v35 == 0.0)
    v36 = 0;
  if ((v1 & 0x80000) == 0)
    goto LABEL_96;
LABEL_54:
  v37 = *((float *)this + 22);
  v38 = LODWORD(v37);
  if (v37 == 0.0)
    v38 = 0;
  if ((v1 & 0x100000) == 0)
    goto LABEL_97;
LABEL_57:
  v39 = *((float *)this + 23);
  v40 = LODWORD(v39);
  if (v39 == 0.0)
    v40 = 0;
  if ((v1 & 0x200000) == 0)
    goto LABEL_98;
LABEL_60:
  v41 = *((float *)this + 24);
  v42 = LODWORD(v41);
  if (v41 == 0.0)
    v42 = 0;
  if ((v1 & 0x400000) == 0)
    goto LABEL_99;
LABEL_63:
  v43 = *((float *)this + 25);
  v44 = LODWORD(v43);
  if (v43 == 0.0)
    v44 = 0;
  if ((v1 & 0x800000) == 0)
    goto LABEL_100;
LABEL_66:
  v45 = *((float *)this + 26);
  v46 = LODWORD(v45);
  if (v45 == 0.0)
    v46 = 0;
  if ((v1 & 0x1000000) == 0)
    goto LABEL_101;
LABEL_69:
  v47 = *((float *)this + 27);
  v48 = LODWORD(v47);
  if (v47 == 0.0)
    v48 = 0;
  if ((v1 & 0x100) != 0)
  {
LABEL_72:
    v49 = *((float *)this + 11);
    v50 = LODWORD(v49);
    if (v49 == 0.0)
      v50 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_75;
LABEL_103:
    v52 = 0;
    return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v42 ^ v44 ^ v46 ^ v48 ^ v50 ^ v52;
  }
LABEL_102:
  v50 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_103;
LABEL_75:
  v51 = *((float *)this + 4);
  v52 = LODWORD(v51);
  if (v51 == 0.0)
    v52 = 0;
  return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v42 ^ v44 ^ v46 ^ v48 ^ v50 ^ v52;
}

void CMMsl::ViewObstructedMachineLearningProbabilities::~ViewObstructedMachineLearningProbabilities(CMMsl::ViewObstructedMachineLearningProbabilities *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::ViewObstructedMachineLearningProbabilities::ViewObstructedMachineLearningProbabilities(CMMsl::ViewObstructedMachineLearningProbabilities *this, const CMMsl::ViewObstructedMachineLearningProbabilities *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  float result;

  *(_QWORD *)this = off_100355110;
  *((_DWORD *)this + 16) = 0;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_WORD *)this + 32) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_WORD *)a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 5);
    v3 |= 4u;
    *((_WORD *)this + 32) = v3;
    *((float *)this + 5) = result;
    v2 = *((_WORD *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    result = *((float *)a2 + 7);
    v3 |= 0x10u;
    *((_WORD *)this + 32) = v3;
    *((float *)this + 7) = result;
    v2 = *((_WORD *)a2 + 32);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_20;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  result = *((float *)a2 + 8);
  v3 |= 0x20u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 8) = result;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  result = *((float *)a2 + 9);
  v3 |= 0x40u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 9) = result;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x400) == 0)
  {
LABEL_10:
    if ((v2 & 0x1000) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  result = *((float *)a2 + 13);
  v3 |= 0x400u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 13) = result;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x1000) == 0)
  {
LABEL_11:
    if ((v2 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_23;
  }
LABEL_22:
  result = *((float *)a2 + 15);
  v3 |= 0x1000u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 15) = result;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x200) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0)
      goto LABEL_13;
    goto LABEL_24;
  }
LABEL_23:
  result = *((float *)a2 + 12);
  v3 |= 0x200u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 12) = result;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 0x800) == 0)
      goto LABEL_14;
    goto LABEL_25;
  }
LABEL_24:
  result = *((float *)a2 + 4);
  v3 |= 2u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 4) = result;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x800) == 0)
  {
LABEL_14:
    if ((v2 & 0x100) == 0)
      goto LABEL_15;
    goto LABEL_26;
  }
LABEL_25:
  result = *((float *)a2 + 14);
  v3 |= 0x800u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 14) = result;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x100) == 0)
  {
LABEL_15:
    if ((v2 & 8) == 0)
      goto LABEL_16;
    goto LABEL_27;
  }
LABEL_26:
  result = *((float *)a2 + 11);
  v3 |= 0x100u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 11) = result;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 8) == 0)
  {
LABEL_16:
    if ((v2 & 0x80) == 0)
      return result;
LABEL_28:
    result = *((float *)a2 + 10);
    *((_WORD *)this + 32) = v3 | 0x80;
    *((float *)this + 10) = result;
    return result;
  }
LABEL_27:
  result = *((float *)a2 + 6);
  v3 |= 8u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 6) = result;
  if ((*((_WORD *)a2 + 32) & 0x80) != 0)
    goto LABEL_28;
  return result;
}

CMMsl *CMMsl::ViewObstructedMachineLearningProbabilities::operator=(CMMsl *a1, const CMMsl::ViewObstructedMachineLearningProbabilities *a2)
{
  CMMsl::ViewObstructedMachineLearningProbabilities *v3;
  _BYTE v5[72];

  if (a1 != a2)
  {
    CMMsl::ViewObstructedMachineLearningProbabilities::ViewObstructedMachineLearningProbabilities((CMMsl::ViewObstructedMachineLearningProbabilities *)v5, a2);
    CMMsl::swap(a1, (CMMsl::ViewObstructedMachineLearningProbabilities *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ViewObstructedMachineLearningProbabilities *a2, CMMsl::ViewObstructedMachineLearningProbabilities *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  float result;

  v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v5;
  v6 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v6;
  v7 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v7;
  v8 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v8;
  v9 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v9;
  v10 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v10;
  v11 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v11;
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  v13 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v13;
  v14 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v14;
  v15 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v15;
  result = *((float *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((float *)a2 + 10) = result;
  return result;
}

float CMMsl::ViewObstructedMachineLearningProbabilities::ViewObstructedMachineLearningProbabilities(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100355110;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(float *)(a2 + 40);
  *(float *)(a1 + 40) = result;
  return result;
}

CMMsl *CMMsl::ViewObstructedMachineLearningProbabilities::operator=(CMMsl *this, uint64_t a2, CMMsl::ViewObstructedMachineLearningProbabilities *a3)
{
  uint64_t v4;
  __int128 v5;
  _QWORD v7[2];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;

  if (this != (CMMsl *)a2)
  {
    v11 = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(a2 + 64) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v7[0] = off_100355110;
    v7[1] = v4;
    v5 = *(_OWORD *)(a2 + 32);
    v10 = *(_OWORD *)(a2 + 48);
    v8 = *(_OWORD *)(a2 + 16);
    v9 = v5;
    CMMsl::swap(this, (CMMsl::ViewObstructedMachineLearningProbabilities *)v7, a3);
    PB::Base::~Base((PB::Base *)v7);
  }
  return this;
}

uint64_t CMMsl::ViewObstructedMachineLearningProbabilities::formatText(CMMsl::ViewObstructedMachineLearningProbabilities *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "bagObstructed", *((float *)this + 4));
    v5 = *((_WORD *)this + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "closeCoveredBagObstructed", *((float *)this + 5));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "closeCoveredObstructed", *((float *)this + 6));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "closeCoveredPocketObstructed", *((float *)this + 7));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "inHandObstructed", *((float *)this + 8));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "looseCoveredBagObstructed", *((float *)this + 9));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "looseCoveredObstructed", *((float *)this + 10));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "looseCoveredPocketObstructed", *((float *)this + 11));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "obstructed", *((float *)this + 12));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "otherObstructed", *((float *)this + 13));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 1) == 0)
      goto LABEL_13;
LABEL_27:
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 1));
    if ((*((_WORD *)this + 32) & 0x1000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_14;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "pocketObstructed", *((float *)this + 14));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 1) != 0)
    goto LABEL_27;
LABEL_13:
  if ((v5 & 0x1000) != 0)
LABEL_14:
    PB::TextFormatter::format(a2, "visible", *((float *)this + 15));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ViewObstructedMachineLearningProbabilities::readFrom(CMMsl::ViewObstructedMachineLearningProbabilities *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 32) |= 1u;
              v20 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v21 = *(_QWORD *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_80;
                  }
                  v29 = v20++;
                  v30 = *(_BYTE *)(v21 + v29);
                  *((_QWORD *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_79;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v24 = 0;
LABEL_79:
                v2 = v29 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)a2 + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_80;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_80:
              *((_QWORD *)this + 1) = v24;
              goto LABEL_81;
            case 2u:
              *((_WORD *)this + 32) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_66;
              *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_75;
            case 3u:
              *((_WORD *)this + 32) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_66;
              *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_75;
            case 4u:
              *((_WORD *)this + 32) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_66;
              *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_75;
            case 5u:
              *((_WORD *)this + 32) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_66;
              *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_75;
            case 6u:
              *((_WORD *)this + 32) |= 0x400u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_66;
              *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_75;
            case 7u:
              *((_WORD *)this + 32) |= 0x1000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_66;
              *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_75;
            case 8u:
              *((_WORD *)this + 32) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_66;
              *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_75;
            case 9u:
              *((_WORD *)this + 32) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_66;
              *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_75;
            case 0xAu:
              *((_WORD *)this + 32) |= 0x800u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_66;
              *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_75;
            case 0xBu:
              *((_WORD *)this + 32) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_66;
              *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_75;
            case 0xCu:
              *((_WORD *)this + 32) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_66;
              *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_75;
            case 0xDu:
              *((_WORD *)this + 32) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_75:
                v2 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_66:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_81;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
LABEL_81:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::ViewObstructedMachineLearningProbabilities::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 64);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 8), 1u);
    v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 2u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 3u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 4u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x400) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 5u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x400) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 6u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x1000) == 0)
  {
LABEL_8:
    if ((v4 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 7u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x200) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 8u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 9u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x800) == 0)
  {
LABEL_11:
    if ((v4 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 0xAu);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 0xBu);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 0x80) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 40), 0xDu);
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 0xCu);
  if ((*(_WORD *)(v3 + 64) & 0x80) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 40), 0xDu);
  return this;
}

uint64_t CMMsl::ViewObstructedMachineLearningProbabilities::hash_value(CMMsl::ViewObstructedMachineLearningProbabilities *this)
{
  __int16 v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;

  v1 = *((_WORD *)this + 32);
  if ((v1 & 1) == 0)
  {
    v2 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_3;
LABEL_40:
    v4 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_6;
LABEL_41:
    v6 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_9;
LABEL_42:
    v8 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_12;
LABEL_43:
    v10 = 0;
    if ((*((_WORD *)this + 32) & 0x400) != 0)
      goto LABEL_15;
LABEL_44:
    v12 = 0;
    if ((*((_WORD *)this + 32) & 0x1000) != 0)
      goto LABEL_18;
LABEL_45:
    v14 = 0;
    if ((*((_WORD *)this + 32) & 0x200) != 0)
      goto LABEL_21;
LABEL_46:
    v16 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_24;
LABEL_47:
    v18 = 0;
    if ((*((_WORD *)this + 32) & 0x800) != 0)
      goto LABEL_27;
LABEL_48:
    v20 = 0;
    if ((*((_WORD *)this + 32) & 0x100) != 0)
      goto LABEL_30;
LABEL_49:
    v22 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_33;
    goto LABEL_50;
  }
  v2 = *((_QWORD *)this + 1);
  if ((v1 & 4) == 0)
    goto LABEL_40;
LABEL_3:
  v3 = *((float *)this + 5);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_41;
LABEL_6:
  v5 = *((float *)this + 7);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_42;
LABEL_9:
  v7 = *((float *)this + 8);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_43;
LABEL_12:
  v9 = *((float *)this + 9);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((*((_WORD *)this + 32) & 0x400) == 0)
    goto LABEL_44;
LABEL_15:
  v11 = *((float *)this + 13);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((*((_WORD *)this + 32) & 0x1000) == 0)
    goto LABEL_45;
LABEL_18:
  v13 = *((float *)this + 15);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((*((_WORD *)this + 32) & 0x200) == 0)
    goto LABEL_46;
LABEL_21:
  v15 = *((float *)this + 12);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_47;
LABEL_24:
  v17 = *((float *)this + 4);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((*((_WORD *)this + 32) & 0x800) == 0)
    goto LABEL_48;
LABEL_27:
  v19 = *((float *)this + 14);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  if ((*((_WORD *)this + 32) & 0x100) == 0)
    goto LABEL_49;
LABEL_30:
  v21 = *((float *)this + 11);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_33:
    v23 = *((float *)this + 6);
    v24 = LODWORD(v23);
    if (v23 == 0.0)
      v24 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_36;
LABEL_51:
    v26 = 0;
    return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26;
  }
LABEL_50:
  v24 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_51;
LABEL_36:
  v25 = *((float *)this + 10);
  v26 = LODWORD(v25);
  if (v25 == 0.0)
    v26 = 0;
  return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26;
}

void CMMsl::ViewObstructedState::~ViewObstructedState(CMMsl::ViewObstructedState *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::ViewObstructedState::ViewObstructedState(uint64_t this, const CMMsl::ViewObstructedState *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  char v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  char v22;

  *(_QWORD *)this = off_100355148;
  *(_DWORD *)(this + 84) = 0;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_DWORD *)(this + 84) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_DWORD *)a2 + 21);
    if ((v2 & 0x20000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20000) != 0)
  {
LABEL_5:
    v5 = *((_BYTE *)a2 + 80);
    v3 |= 0x20000u;
    *(_DWORD *)(this + 84) = v3;
    *(_BYTE *)(this + 80) = v5;
    v2 = *((_DWORD *)a2 + 21);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(_DWORD *)(this + 84) = v3;
    *(_DWORD *)(this + 20) = v6;
    v2 = *((_DWORD *)a2 + 21);
    if ((v2 & 0x2000) == 0)
    {
LABEL_8:
      if ((v2 & 0x1000) == 0)
        goto LABEL_9;
      goto LABEL_26;
    }
  }
  else if ((v2 & 0x2000) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 16);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 64) = v7;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x1000) == 0)
  {
LABEL_9:
    if ((v2 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  v8 = *((_DWORD *)a2 + 15);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 60) = v8;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x200) == 0)
  {
LABEL_10:
    if ((v2 & 0x10000) == 0)
      goto LABEL_11;
    goto LABEL_28;
  }
LABEL_27:
  v9 = *((_DWORD *)a2 + 12);
  v3 |= 0x200u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 48) = v9;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x10000) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_28:
  v10 = *((_DWORD *)a2 + 19);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 76) = v10;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  v11 = *((_DWORD *)a2 + 13);
  v3 |= 0x400u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 52) = v11;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x800) == 0)
  {
LABEL_13:
    if ((v2 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_31;
  }
LABEL_30:
  v12 = *((_DWORD *)a2 + 14);
  v3 |= 0x800u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 56) = v12;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x40) == 0)
  {
LABEL_14:
    if ((v2 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_31:
  v13 = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 36) = v13;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x80) == 0)
  {
LABEL_15:
    if ((v2 & 8) == 0)
      goto LABEL_16;
    goto LABEL_33;
  }
LABEL_32:
  v14 = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 40) = v14;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 8) == 0)
  {
LABEL_16:
    if ((v2 & 0x10) == 0)
      goto LABEL_17;
    goto LABEL_34;
  }
LABEL_33:
  v15 = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 24) = v15;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x10) == 0)
  {
LABEL_17:
    if ((v2 & 0x20) == 0)
      goto LABEL_18;
    goto LABEL_35;
  }
LABEL_34:
  v16 = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 28) = v16;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x20) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_36;
  }
LABEL_35:
  v17 = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 32) = v17;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x4000) == 0)
  {
LABEL_19:
    if ((v2 & 0x8000) == 0)
      goto LABEL_20;
    goto LABEL_37;
  }
LABEL_36:
  v18 = *((_DWORD *)a2 + 17);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 68) = v18;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x8000) == 0)
  {
LABEL_20:
    if ((v2 & 0x100) == 0)
      goto LABEL_21;
    goto LABEL_38;
  }
LABEL_37:
  v19 = *((_DWORD *)a2 + 18);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 72) = v19;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x100) == 0)
  {
LABEL_21:
    if ((v2 & 2) == 0)
      goto LABEL_22;
    goto LABEL_39;
  }
LABEL_38:
  v20 = *((_DWORD *)a2 + 11);
  v3 |= 0x100u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 44) = v20;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 2) == 0)
  {
LABEL_22:
    if ((v2 & 0x40000) == 0)
      return this;
LABEL_40:
    v22 = *((_BYTE *)a2 + 81);
    *(_DWORD *)(this + 84) = v3 | 0x40000;
    *(_BYTE *)(this + 81) = v22;
    return this;
  }
LABEL_39:
  v21 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 16) = v21;
  if ((*((_DWORD *)a2 + 21) & 0x40000) != 0)
    goto LABEL_40;
  return this;
}

CMMsl *CMMsl::ViewObstructedState::operator=(CMMsl *a1, const CMMsl::ViewObstructedState *a2)
{
  CMMsl::ViewObstructedState *v3;
  _BYTE v5[88];

  if (a1 != a2)
  {
    CMMsl::ViewObstructedState::ViewObstructedState((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::ViewObstructedState *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ViewObstructedState *a2, CMMsl::ViewObstructedState *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  float result;

  v3 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LOBYTE(v4) = *((_BYTE *)this + 80);
  *((_BYTE *)this + 80) = *((_BYTE *)a2 + 80);
  *((_BYTE *)a2 + 80) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  v5 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  v6 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v6;
  v7 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v7;
  v8 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v8;
  v9 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v9;
  v10 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v10;
  v11 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v11;
  v12 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v12;
  v13 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v13;
  v14 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v14;
  v15 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v15;
  result = *((float *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((float *)a2 + 11) = result;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LOBYTE(v4) = *((_BYTE *)this + 81);
  *((_BYTE *)this + 81) = *((_BYTE *)a2 + 81);
  *((_BYTE *)a2 + 81) = v4;
  return result;
}

float CMMsl::ViewObstructedState::ViewObstructedState(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100355148;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a2 + 84) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  result = *(float *)(a2 + 44);
  *(float *)(a1 + 44) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  return result;
}

CMMsl *CMMsl::ViewObstructedState::operator=(CMMsl *this, uint64_t a2, CMMsl::ViewObstructedState *a3)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _QWORD v8[3];
  __int128 v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char v15;
  char v16;
  int v17;

  if (this != (CMMsl *)a2)
  {
    v17 = *(_DWORD *)(a2 + 84);
    *(_DWORD *)(a2 + 84) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v8[0] = off_100355148;
    v8[1] = v4;
    v15 = *(_BYTE *)(a2 + 80);
    v12 = *(_QWORD *)(a2 + 60);
    v14 = *(_DWORD *)(a2 + 76);
    v11 = *(_DWORD *)(a2 + 56);
    v5 = *(_OWORD *)(a2 + 24);
    v13 = *(_QWORD *)(a2 + 68);
    v6 = *(_OWORD *)(a2 + 40);
    v9 = v5;
    v10 = v6;
    v8[2] = *(_QWORD *)(a2 + 16);
    v16 = *(_BYTE *)(a2 + 81);
    CMMsl::swap(this, (CMMsl::ViewObstructedState *)v8, a3);
    PB::Base::~Base((PB::Base *)v8);
  }
  return this;
}

uint64_t CMMsl::ViewObstructedState::formatText(CMMsl::ViewObstructedState *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "currentEventTag", *((_DWORD *)this + 4));
    v5 = *((_DWORD *)this + 21);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_24;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "currentState", *((_DWORD *)this + 5));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "filteredGravityX", *((float *)this + 6));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "filteredGravityY", *((float *)this + 7));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "filteredGravityZ", *((float *)this + 8));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "gravityAngle", *((float *)this + 9));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "gravityShift", *((float *)this + 10));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "isMovingFiltered", *((float *)this + 11));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "lux", *((float *)this + 12));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "luxBaseline", *((float *)this + 13));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "luxShift", *((float *)this + 14));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "motionType", *((_DWORD *)this + 15));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "orientation", *((_DWORD *)this + 16));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "pocketProbEnter", *((float *)this + 17));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "pocketProbExit", *((float *)this + 18));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "pocketProbability", *((float *)this + 19));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0)
      goto LABEL_19;
LABEL_39:
    PB::TextFormatter::format(a2, "sufficientMotion", *((_BYTE *)this + 81));
    if ((*((_DWORD *)this + 21) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_20;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "shouldSuppress", *((_BYTE *)this + 80));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x40000) != 0)
    goto LABEL_39;
LABEL_19:
  if ((v5 & 1) != 0)
LABEL_20:
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ViewObstructedState::readFrom(CMMsl::ViewObstructedState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  int v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  char v52;
  int v53;
  BOOL v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 21) |= 1u;
              v20 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v21 = *(_QWORD *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v55 = 0;
                v56 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_144;
                  }
                  v57 = v20++;
                  v58 = *(_BYTE *)(v21 + v57);
                  *((_QWORD *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0)
                    break;
                  v55 += 7;
                  v14 = v56++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_143;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v24 = 0;
LABEL_143:
                v2 = v57 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)a2 + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_144;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_144:
              *((_QWORD *)this + 1) = v24;
              goto LABEL_165;
            case 2u:
              *((_DWORD *)this + 21) |= 0x20000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v28 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v28 = v27 != 0;
              }
              *((_BYTE *)this + 80) = v28;
              goto LABEL_165;
            case 3u:
              *((_DWORD *)this + 21) |= 4u;
              v29 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v30 = *(_QWORD *)a2;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v33 = 0;
                if (v2 <= v29)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_149;
                  }
                  v61 = v29++;
                  v62 = *(_BYTE *)(v30 + v61);
                  *((_QWORD *)a2 + 1) = v29;
                  v33 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_148:
                    v2 = v61 + 1;
                    goto LABEL_149;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v33) = 0;
                goto LABEL_148;
              }
              v31 = 0;
              v32 = 0;
              v33 = 0;
              do
              {
                v2 = v29 + 1;
                *((_QWORD *)a2 + 1) = v29 + 1;
                v34 = *(_BYTE *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0)
                  goto LABEL_149;
                v31 += 7;
                v29 = v2;
                v14 = v32++ > 8;
              }
              while (!v14);
              LODWORD(v33) = 0;
LABEL_149:
              *((_DWORD *)this + 5) = v33;
              goto LABEL_165;
            case 4u:
              *((_DWORD *)this + 21) |= 0x2000u;
              v35 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v36 = *(_QWORD *)a2;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v39 = 0;
                if (v2 <= v35)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_154;
                  }
                  v65 = v35++;
                  v66 = *(_BYTE *)(v36 + v65);
                  *((_QWORD *)a2 + 1) = v35;
                  v39 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_153:
                    v2 = v65 + 1;
                    goto LABEL_154;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v39) = 0;
                goto LABEL_153;
              }
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v2 = v35 + 1;
                *((_QWORD *)a2 + 1) = v35 + 1;
                v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0)
                  goto LABEL_154;
                v37 += 7;
                v35 = v2;
                v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_154:
              *((_DWORD *)this + 16) = v39;
              goto LABEL_165;
            case 5u:
              *((_DWORD *)this + 21) |= 0x1000u;
              v41 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v42 = *(_QWORD *)a2;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                v67 = 0;
                v68 = 0;
                v45 = 0;
                if (v2 <= v41)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_159;
                  }
                  v69 = v41++;
                  v70 = *(_BYTE *)(v42 + v69);
                  *((_QWORD *)a2 + 1) = v41;
                  v45 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0)
                    break;
                  v67 += 7;
                  v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_158:
                    v2 = v69 + 1;
                    goto LABEL_159;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v45) = 0;
                goto LABEL_158;
              }
              v43 = 0;
              v44 = 0;
              v45 = 0;
              do
              {
                v2 = v41 + 1;
                *((_QWORD *)a2 + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0)
                  goto LABEL_159;
                v43 += 7;
                v41 = v2;
                v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_159:
              *((_DWORD *)this + 15) = v45;
              goto LABEL_165;
            case 6u:
              *((_DWORD *)this + 21) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_89;
              *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_139;
            case 7u:
              *((_DWORD *)this + 21) |= 0x10000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_89;
              *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_139;
            case 8u:
              *((_DWORD *)this + 21) |= 0x400u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_89;
              *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_139;
            case 9u:
              *((_DWORD *)this + 21) |= 0x800u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_89;
              *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_139;
            case 0xAu:
              *((_DWORD *)this + 21) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_89;
              *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_139;
            case 0xBu:
              *((_DWORD *)this + 21) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_89;
              *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_139;
            case 0xCu:
              *((_DWORD *)this + 21) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_89;
              *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_139;
            case 0xDu:
              *((_DWORD *)this + 21) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_89;
              *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_139;
            case 0xEu:
              *((_DWORD *)this + 21) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_89;
              *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_139;
            case 0xFu:
              *((_DWORD *)this + 21) |= 0x4000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_89;
              *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_139;
            case 0x10u:
              *((_DWORD *)this + 21) |= 0x8000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_89;
              *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_139;
            case 0x11u:
              *((_DWORD *)this + 21) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_139:
                v2 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_89:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_165;
            case 0x12u:
              *((_DWORD *)this + 21) |= 2u;
              v47 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v48 = *(_QWORD *)a2;
              if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
              {
                v71 = 0;
                v72 = 0;
                v51 = 0;
                if (v2 <= v47)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v47)
                  {
                    LODWORD(v51) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_164;
                  }
                  v73 = v47++;
                  v74 = *(_BYTE *)(v48 + v73);
                  *((_QWORD *)a2 + 1) = v47;
                  v51 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0)
                    break;
                  v71 += 7;
                  v14 = v72++ > 8;
                  if (v14)
                  {
                    LODWORD(v51) = 0;
LABEL_163:
                    v2 = v73 + 1;
                    goto LABEL_164;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v51) = 0;
                goto LABEL_163;
              }
              v49 = 0;
              v50 = 0;
              v51 = 0;
              do
              {
                v2 = v47 + 1;
                *((_QWORD *)a2 + 1) = v47 + 1;
                v52 = *(_BYTE *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0)
                  goto LABEL_164;
                v49 += 7;
                v47 = v2;
                v14 = v50++ > 8;
              }
              while (!v14);
              LODWORD(v51) = 0;
LABEL_164:
              *((_DWORD *)this + 4) = v51;
LABEL_165:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0x13u:
              *((_DWORD *)this + 21) |= 0x40000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v54 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v53 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v54 = v53 != 0;
              }
              *((_BYTE *)this + 81) = v54;
              goto LABEL_165;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_165;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::ViewObstructedState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 84);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 8), 1u);
    v4 = *(_DWORD *)(v3 + 84);
    if ((v4 & 0x20000) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_23;
    }
  }
  else if ((v4 & 0x20000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 80), 2u);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x2000) == 0)
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 3u);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x2000) == 0)
  {
LABEL_5:
    if ((v4 & 0x1000) == 0)
      goto LABEL_6;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 64), 4u);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x1000) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 60), 5u);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x10000) == 0)
      goto LABEL_8;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 6u);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x10000) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0)
      goto LABEL_9;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 7u);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x800) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 8u);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x800) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 9u);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x40) == 0)
  {
LABEL_11:
    if ((v4 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 0xAu);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x80) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 0xBu);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 0xCu);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x10) == 0)
  {
LABEL_14:
    if ((v4 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 0xDu);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x20) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 0xEu);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x4000) == 0)
  {
LABEL_16:
    if ((v4 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 0xFu);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x8000) == 0)
  {
LABEL_17:
    if ((v4 & 0x100) == 0)
      goto LABEL_18;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0x10u);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x100) == 0)
  {
LABEL_18:
    if ((v4 & 2) == 0)
      goto LABEL_19;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 0x11u);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 2) == 0)
  {
LABEL_19:
    if ((v4 & 0x40000) == 0)
      return this;
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 81), 0x13u);
  }
LABEL_38:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 0x12u);
  if ((*(_DWORD *)(v3 + 84) & 0x40000) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 81), 0x13u);
  return this;
}

uint64_t CMMsl::ViewObstructedState::hash_value(CMMsl::ViewObstructedState *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *((_DWORD *)this + 21);
  if ((v1 & 1) != 0)
  {
    v2 = *((_QWORD *)this + 1);
    if ((v1 & 0x20000) != 0)
    {
LABEL_3:
      v3 = *((unsigned __int8 *)this + 80);
      if ((v1 & 4) != 0)
        goto LABEL_4;
      goto LABEL_47;
    }
  }
  else
  {
    v2 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_4:
    v4 = *((unsigned int *)this + 5);
    if ((v1 & 0x2000) != 0)
      goto LABEL_5;
    goto LABEL_48;
  }
LABEL_47:
  v4 = 0;
  if ((v1 & 0x2000) != 0)
  {
LABEL_5:
    v5 = *((unsigned int *)this + 16);
    if ((v1 & 0x1000) != 0)
      goto LABEL_6;
    goto LABEL_49;
  }
LABEL_48:
  v5 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_6:
    v6 = *((unsigned int *)this + 15);
    if ((v1 & 0x200) != 0)
      goto LABEL_7;
LABEL_50:
    v8 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_10;
LABEL_51:
    v10 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_13;
LABEL_52:
    v12 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_16;
LABEL_53:
    v14 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_19;
LABEL_54:
    v16 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_22;
LABEL_55:
    v18 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_25;
LABEL_56:
    v20 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_28;
LABEL_57:
    v22 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_31;
LABEL_58:
    v24 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_34;
LABEL_59:
    v26 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_37;
LABEL_60:
    v28 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_40;
LABEL_61:
    v30 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_43;
LABEL_62:
    v31 = 0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_44;
LABEL_63:
    v32 = 0;
    return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v31 ^ v32;
  }
LABEL_49:
  v6 = 0;
  if ((v1 & 0x200) == 0)
    goto LABEL_50;
LABEL_7:
  v7 = *((float *)this + 12);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_51;
LABEL_10:
  v9 = *((float *)this + 19);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 0x400) == 0)
    goto LABEL_52;
LABEL_13:
  v11 = *((float *)this + 13);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_53;
LABEL_16:
  v13 = *((float *)this + 14);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_54;
LABEL_19:
  v15 = *((float *)this + 9);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_55;
LABEL_22:
  v17 = *((float *)this + 10);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_56;
LABEL_25:
  v19 = *((float *)this + 6);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_57;
LABEL_28:
  v21 = *((float *)this + 7);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_58;
LABEL_31:
  v23 = *((float *)this + 8);
  v24 = LODWORD(v23);
  if (v23 == 0.0)
    v24 = 0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_59;
LABEL_34:
  v25 = *((float *)this + 17);
  v26 = LODWORD(v25);
  if (v25 == 0.0)
    v26 = 0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_60;
LABEL_37:
  v27 = *((float *)this + 18);
  v28 = LODWORD(v27);
  if (v27 == 0.0)
    v28 = 0;
  if ((v1 & 0x100) == 0)
    goto LABEL_61;
LABEL_40:
  v29 = *((float *)this + 11);
  v30 = LODWORD(v29);
  if (v29 == 0.0)
    v30 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_62;
LABEL_43:
  v31 = *((unsigned int *)this + 4);
  if ((v1 & 0x40000) == 0)
    goto LABEL_63;
LABEL_44:
  v32 = *((unsigned __int8 *)this + 81);
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v31 ^ v32;
}

void CMMsl::VisionCompassBias::~VisionCompassBias(CMMsl::VisionCompassBias *this)
{
  void *v2;

  *(_QWORD *)this = off_100355180;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::VisionCompassBias::~VisionCompassBias(this);
  operator delete();
}

CMMsl::VisionCompassBias *CMMsl::VisionCompassBias::VisionCompassBias(CMMsl::VisionCompassBias *this, const CMMsl::VisionCompassBias *a2)
{
  char *v4;
  __int16 v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  __int16 v10;
  int v11;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;

  *(_QWORD *)this = off_100355180;
  *((_QWORD *)this + 1) = 0;
  v4 = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 19) = 0;
  v5 = *((_WORD *)a2 + 38);
  if ((v5 & 1) != 0)
  {
    v7 = *((_QWORD *)a2 + 4);
    v6 = 1;
    *((_WORD *)this + 38) = 1;
    *((_QWORD *)this + 4) = v7;
    v5 = *((_WORD *)a2 + 38);
    if ((v5 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((v5 & 2) != 0)
  {
LABEL_5:
    v8 = *((_QWORD *)a2 + 5);
    v6 |= 2u;
    *((_WORD *)this + 38) = v6;
    *((_QWORD *)this + 5) = v8;
    v5 = *((_WORD *)a2 + 38);
  }
LABEL_6:
  if ((v5 & 4) != 0)
  {
    v13 = *((_DWORD *)a2 + 12);
    v6 |= 4u;
    *((_WORD *)this + 38) = v6;
    *((_DWORD *)this + 12) = v13;
    v5 = *((_WORD *)a2 + 38);
    if ((v5 & 0x10) == 0)
    {
LABEL_8:
      if ((v5 & 8) == 0)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v14 = *((_DWORD *)a2 + 14);
  v6 |= 0x10u;
  *((_WORD *)this + 38) = v6;
  *((_DWORD *)this + 14) = v14;
  if ((*((_WORD *)a2 + 38) & 8) != 0)
  {
LABEL_9:
    v9 = *((_DWORD *)a2 + 13);
    *((_WORD *)this + 38) = v6 | 8;
    *((_DWORD *)this + 13) = v9;
  }
LABEL_10:
  if (this != a2)
    sub_100020CE4(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  v10 = *((_WORD *)a2 + 38);
  if ((v10 & 0x40) != 0)
  {
    v15 = *((_DWORD *)a2 + 16);
    *((_WORD *)this + 38) |= 0x40u;
    *((_DWORD *)this + 16) = v15;
    v10 = *((_WORD *)a2 + 38);
    if ((v10 & 0x80) == 0)
    {
LABEL_14:
      if ((v10 & 0x100) == 0)
        goto LABEL_15;
LABEL_23:
      v17 = *((_DWORD *)a2 + 18);
      *((_WORD *)this + 38) |= 0x100u;
      *((_DWORD *)this + 18) = v17;
      if ((*((_WORD *)a2 + 38) & 0x20) == 0)
        return this;
      goto LABEL_16;
    }
  }
  else if ((v10 & 0x80) == 0)
  {
    goto LABEL_14;
  }
  v16 = *((_DWORD *)a2 + 17);
  *((_WORD *)this + 38) |= 0x80u;
  *((_DWORD *)this + 17) = v16;
  v10 = *((_WORD *)a2 + 38);
  if ((v10 & 0x100) != 0)
    goto LABEL_23;
LABEL_15:
  if ((v10 & 0x20) != 0)
  {
LABEL_16:
    v11 = *((_DWORD *)a2 + 15);
    *((_WORD *)this + 38) |= 0x20u;
    *((_DWORD *)this + 15) = v11;
  }
  return this;
}

CMMsl *CMMsl::VisionCompassBias::operator=(CMMsl *a1, const CMMsl::VisionCompassBias *a2)
{
  CMMsl::VisionCompassBias *v3;
  _BYTE v5[80];

  if (a1 != a2)
  {
    CMMsl::VisionCompassBias::VisionCompassBias((CMMsl::VisionCompassBias *)v5, a2);
    CMMsl::swap(a1, (CMMsl::VisionCompassBias *)v5, v3);
    CMMsl::VisionCompassBias::~VisionCompassBias((CMMsl::VisionCompassBias *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::VisionCompassBias *a2, CMMsl::VisionCompassBias *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float result;

  v3 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v5;
  LODWORD(v5) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  LODWORD(v5) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v5;
  LODWORD(v5) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v5;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  LODWORD(v5) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v5;
  result = *((float *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((float *)a2 + 17) = result;
  LODWORD(v8) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v8;
  LODWORD(v8) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v8;
  return result;
}

uint64_t CMMsl::VisionCompassBias::VisionCompassBias(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_100355180;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a2 + 76) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  return a1;
}

CMMsl *CMMsl::VisionCompassBias::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::VisionCompassBias *v3;
  _BYTE v5[80];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::VisionCompassBias::VisionCompassBias((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::VisionCompassBias *)v5, v3);
    CMMsl::VisionCompassBias::~VisionCompassBias((CMMsl::VisionCompassBias *)v5);
  }
  return a1;
}

uint64_t CMMsl::VisionCompassBias::formatText(CMMsl::VisionCompassBias *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;
  float *v6;
  float *v7;
  float v8;
  __int16 v9;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 38);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "compassBias", *((float *)this + 12));
    v5 = *((_WORD *)this + 38);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "estimatedBiasUncertainty", *((float *)this + 13));
  v5 = *((_WORD *)this + 38);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "estimatedHeading", *((float *)this + 14));
  if ((*((_WORD *)this + 38) & 0x20) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "globalReferenceFrame", *((_DWORD *)this + 15));
LABEL_6:
  v6 = (float *)*((_QWORD *)this + 1);
  v7 = (float *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "lslGlobalToDeviceFrameRotationMatrix", v8);
  }
  v9 = *((_WORD *)this + 38);
  if ((v9 & 0x40) != 0)
  {
    PB::TextFormatter::format(a2, "lslHeadingAccuracy", *((float *)this + 16));
    v9 = *((_WORD *)this + 38);
    if ((v9 & 0x80) == 0)
    {
LABEL_10:
      if ((v9 & 1) == 0)
        goto LABEL_11;
      goto LABEL_21;
    }
  }
  else if ((v9 & 0x80) == 0)
  {
    goto LABEL_10;
  }
  PB::TextFormatter::format(a2, "lslHeadingConfidence", *((float *)this + 17));
  v9 = *((_WORD *)this + 38);
  if ((v9 & 1) == 0)
  {
LABEL_11:
    if ((v9 & 0x100) == 0)
      goto LABEL_12;
LABEL_22:
    PB::TextFormatter::format(a2, "roadID", *((_DWORD *)this + 18));
    if ((*((_WORD *)this + 38) & 2) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_13;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "machContinuousTimestamp", *((double *)this + 4));
  v9 = *((_WORD *)this + 38);
  if ((v9 & 0x100) != 0)
    goto LABEL_22;
LABEL_12:
  if ((v9 & 2) != 0)
LABEL_13:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 5));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::VisionCompassBias::readFrom(CMMsl::VisionCompassBias *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  char *v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  _DWORD *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  unint64_t v61;
  char *v62;
  _DWORD *v63;
  char v64;
  unsigned int v65;
  unint64_t v66;
  char v67;
  char v68;
  unsigned int v69;
  unint64_t v70;
  char v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  int v79;
  unint64_t v80;
  _BYTE v83[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 8);
    v9 = (char *)this + 24;
    while (1)
    {
      v10 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v16 = v12++ > 8;
        if (v16)
          goto LABEL_20;
      }
LABEL_21:
      v22 = v13 & 7;
      if (v22 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *((_WORD *)this + 38) |= 1u;
          v23 = *((_QWORD *)a2 + 1);
          if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_127;
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v23);
          goto LABEL_31;
        case 2u:
          *((_WORD *)this + 38) |= 2u;
          v24 = *((_QWORD *)a2 + 1);
          if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_127;
          *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v24);
LABEL_31:
          v25 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_130;
        case 3u:
          *((_WORD *)this + 38) |= 4u;
          v26 = *((_QWORD *)a2 + 1);
          if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_127;
          *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v26);
          goto LABEL_129;
        case 4u:
          *((_WORD *)this + 38) |= 0x10u;
          v27 = *((_QWORD *)a2 + 1);
          if (v27 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_127;
          *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v27);
          goto LABEL_129;
        case 5u:
          *((_WORD *)this + 38) |= 8u;
          v28 = *((_QWORD *)a2 + 1);
          if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_127;
          *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v28);
          goto LABEL_129;
        case 6u:
          if (v22 == 2)
          {
            if ((PB::Reader::placeMark(a2, v83) & 1) != 0)
              return 0;
            v29 = *((_QWORD *)a2 + 1);
            v30 = *((_QWORD *)a2 + 2);
            while (v29 < v30 && !*((_BYTE *)a2 + 24))
            {
              v32 = (char *)*((_QWORD *)this + 2);
              v31 = *((_QWORD *)this + 3);
              if ((unint64_t)v32 >= v31)
              {
                v34 = (char *)*v8;
                v35 = (v32 - (_BYTE *)*v8) >> 2;
                v36 = v35 + 1;
                if ((unint64_t)(v35 + 1) >> 62)
                  goto LABEL_141;
                v37 = v31 - (_QWORD)v34;
                if (v37 >> 1 > v36)
                  v36 = v37 >> 1;
                if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
                  v38 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v38 = v36;
                if (v38)
                {
                  v39 = (char *)sub_100020E2C((uint64_t)v9, v38);
                  v34 = (char *)*((_QWORD *)this + 1);
                  v32 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v39 = 0;
                }
                v40 = &v39[4 * v35];
                *(_DWORD *)v40 = 0;
                v33 = v40 + 4;
                while (v32 != v34)
                {
                  v41 = *((_DWORD *)v32 - 1);
                  v32 -= 4;
                  *((_DWORD *)v40 - 1) = v41;
                  v40 -= 4;
                }
                *((_QWORD *)this + 1) = v40;
                *((_QWORD *)this + 2) = v33;
                *((_QWORD *)this + 3) = &v39[4 * v38];
                if (v34)
                  operator delete(v34);
              }
              else
              {
                *(_DWORD *)v32 = 0;
                v33 = v32 + 4;
              }
              *((_QWORD *)this + 2) = v33;
              v42 = *((_QWORD *)a2 + 1);
              if (v42 > 0xFFFFFFFFFFFFFFFBLL || v42 + 4 > *((_QWORD *)a2 + 2))
              {
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v33 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v42);
              v30 = *((_QWORD *)a2 + 2);
              v29 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v29;
            }
            PB::Reader::recallMark(a2, v83);
          }
          else
          {
            v62 = (char *)*((_QWORD *)this + 2);
            v61 = *((_QWORD *)this + 3);
            if ((unint64_t)v62 >= v61)
            {
              v72 = (char *)*v8;
              v73 = (v62 - (_BYTE *)*v8) >> 2;
              v74 = v73 + 1;
              if ((unint64_t)(v73 + 1) >> 62)
LABEL_141:
                sub_10000D5F8();
              v75 = v61 - (_QWORD)v72;
              if (v75 >> 1 > v74)
                v74 = v75 >> 1;
              if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFFCLL)
                v76 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v76 = v74;
              if (v76)
              {
                v77 = (char *)sub_100020E2C((uint64_t)v9, v76);
                v72 = (char *)*((_QWORD *)this + 1);
                v62 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v77 = 0;
              }
              v78 = &v77[4 * v73];
              *(_DWORD *)v78 = 0;
              v63 = v78 + 4;
              while (v62 != v72)
              {
                v79 = *((_DWORD *)v62 - 1);
                v62 -= 4;
                *((_DWORD *)v78 - 1) = v79;
                v78 -= 4;
              }
              *((_QWORD *)this + 1) = v78;
              *((_QWORD *)this + 2) = v63;
              *((_QWORD *)this + 3) = &v77[4 * v76];
              if (v72)
                operator delete(v72);
            }
            else
            {
              *(_DWORD *)v62 = 0;
              v63 = v62 + 4;
            }
            *((_QWORD *)this + 2) = v63;
            v80 = *((_QWORD *)a2 + 1);
            if (v80 <= 0xFFFFFFFFFFFFFFFBLL && v80 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v63 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v80);
LABEL_129:
              v25 = *((_QWORD *)a2 + 1) + 4;
LABEL_130:
              *((_QWORD *)a2 + 1) = v25;
            }
            else
            {
LABEL_127:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_131:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 7u:
          *((_WORD *)this + 38) |= 0x40u;
          v43 = *((_QWORD *)a2 + 1);
          if (v43 > 0xFFFFFFFFFFFFFFFBLL || v43 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_127;
          *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v43);
          goto LABEL_129;
        case 8u:
          *((_WORD *)this + 38) |= 0x80u;
          v44 = *((_QWORD *)a2 + 1);
          if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_127;
          *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v44);
          goto LABEL_129;
        case 9u:
          *((_WORD *)this + 38) |= 0x100u;
          v45 = *((_QWORD *)a2 + 1);
          v46 = *((_QWORD *)a2 + 2);
          v47 = *(_QWORD *)a2;
          if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
          {
            v48 = 0;
            v49 = 0;
            v50 = 0;
            do
            {
              v51 = v45 + 1;
              *((_QWORD *)a2 + 1) = v45 + 1;
              v52 = *(_BYTE *)(v47 + v45);
              v50 |= (unint64_t)(v52 & 0x7F) << v48;
              if ((v52 & 0x80) == 0)
                goto LABEL_113;
              v48 += 7;
              v45 = v51;
              v16 = v49++ > 8;
            }
            while (!v16);
LABEL_93:
            LODWORD(v50) = 0;
            goto LABEL_113;
          }
          v64 = 0;
          v65 = 0;
          v50 = 0;
          if (v46 <= v45)
            v46 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v46 == v45)
            {
              LODWORD(v50) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v66 = v45 + 1;
              v67 = *(_BYTE *)(v47 + v45);
              *((_QWORD *)a2 + 1) = v66;
              v50 |= (unint64_t)(v67 & 0x7F) << v64;
              if (v67 < 0)
              {
                v64 += 7;
                v45 = v66;
                v16 = v65++ > 8;
                if (v16)
                  goto LABEL_93;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v50) = 0;
            }
            break;
          }
LABEL_113:
          *((_DWORD *)this + 18) = v50;
          goto LABEL_131;
        case 0xAu:
          *((_WORD *)this + 38) |= 0x20u;
          v53 = *((_QWORD *)a2 + 1);
          v54 = *((_QWORD *)a2 + 2);
          v55 = *(_QWORD *)a2;
          if (v53 <= 0xFFFFFFFFFFFFFFF5 && v53 + 10 <= v54)
          {
            v56 = 0;
            v57 = 0;
            v58 = 0;
            do
            {
              v59 = v53 + 1;
              *((_QWORD *)a2 + 1) = v53 + 1;
              v60 = *(_BYTE *)(v55 + v53);
              v58 |= (unint64_t)(v60 & 0x7F) << v56;
              if ((v60 & 0x80) == 0)
                goto LABEL_116;
              v56 += 7;
              v53 = v59;
              v16 = v57++ > 8;
            }
            while (!v16);
LABEL_100:
            LODWORD(v58) = 0;
            goto LABEL_116;
          }
          v68 = 0;
          v69 = 0;
          v58 = 0;
          if (v54 <= v53)
            v54 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v54 == v53)
            {
              LODWORD(v58) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v70 = v53 + 1;
              v71 = *(_BYTE *)(v55 + v53);
              *((_QWORD *)a2 + 1) = v70;
              v58 |= (unint64_t)(v71 & 0x7F) << v68;
              if (v71 < 0)
              {
                v68 += 7;
                v53 = v70;
                v16 = v69++ > 8;
                if (v16)
                  goto LABEL_100;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v58) = 0;
            }
            break;
          }
LABEL_116:
          *((_DWORD *)this + 15) = v58;
          goto LABEL_131;
        default:
          if ((PB::Reader::skip(a2, v13 >> 3, v22, 0) & 1) == 0)
            return 0;
          goto LABEL_131;
      }
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_21;
      v17 += 7;
      v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::VisionCompassBias::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;
  float *v5;
  float *v6;
  float v7;
  __int16 v8;

  v3 = this;
  v4 = *(_WORD *)(this + 76);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32), 1u);
    v4 = *(_WORD *)(v3 + 76);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 2u);
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
LABEL_18:
    this = PB::Writer::write(a2, *(float *)(v3 + 56), 4u);
    if ((*(_WORD *)(v3 + 76) & 8) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 3u);
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x10) != 0)
    goto LABEL_18;
LABEL_5:
  if ((v4 & 8) != 0)
LABEL_6:
    this = PB::Writer::write(a2, *(float *)(v3 + 52), 5u);
LABEL_7:
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7, 6u);
  }
  v8 = *(_WORD *)(v3 + 76);
  if ((v8 & 0x40) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 64), 7u);
    v8 = *(_WORD *)(v3 + 76);
    if ((v8 & 0x80) == 0)
    {
LABEL_12:
      if ((v8 & 0x100) == 0)
        goto LABEL_13;
      goto LABEL_22;
    }
  }
  else if ((v8 & 0x80) == 0)
  {
    goto LABEL_12;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 8u);
  v8 = *(_WORD *)(v3 + 76);
  if ((v8 & 0x100) == 0)
  {
LABEL_13:
    if ((v8 & 0x20) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 60), 0xAu);
  }
LABEL_22:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 72), 9u);
  if ((*(_WORD *)(v3 + 76) & 0x20) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 60), 0xAu);
  return this;
}

uint64_t CMMsl::VisionCompassBias::hash_value(CMMsl::VisionCompassBias *this)
{
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;

  v2 = *((_WORD *)this + 38);
  if ((v2 & 1) == 0)
  {
    v3 = 0;
    if ((v2 & 2) != 0)
      goto LABEL_3;
LABEL_22:
    v4 = 0;
    if ((v2 & 4) != 0)
      goto LABEL_7;
LABEL_23:
    v6 = 0;
    if ((v2 & 0x10) != 0)
      goto LABEL_11;
    goto LABEL_24;
  }
  if (*((double *)this + 4) == 0.0)
    v3 = 0;
  else
    v3 = *((_QWORD *)this + 4);
  if ((v2 & 2) == 0)
    goto LABEL_22;
LABEL_3:
  if (*((double *)this + 5) == 0.0)
    v4 = 0;
  else
    v4 = *((_QWORD *)this + 5);
  if ((v2 & 4) == 0)
    goto LABEL_23;
LABEL_7:
  v5 = *((float *)this + 12);
  if (v5 == 0.0)
    v6 = 0;
  else
    v6 = LODWORD(v5);
  if ((v2 & 0x10) != 0)
  {
LABEL_11:
    v7 = *((float *)this + 14);
    if (v7 == 0.0)
      v8 = 0;
    else
      v8 = LODWORD(v7);
    if ((v2 & 8) != 0)
      goto LABEL_15;
LABEL_25:
    v10 = 0;
    goto LABEL_26;
  }
LABEL_24:
  v8 = 0;
  if ((v2 & 8) == 0)
    goto LABEL_25;
LABEL_15:
  v9 = *((float *)this + 13);
  if (v9 == 0.0)
    v10 = 0;
  else
    v10 = LODWORD(v9);
LABEL_26:
  v11 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  v12 = *((_WORD *)this + 38);
  if ((v12 & 0x40) == 0)
  {
    v13 = 0;
    if ((v12 & 0x80) != 0)
      goto LABEL_28;
LABEL_36:
    v15 = 0;
    if ((*((_WORD *)this + 38) & 0x100) != 0)
      goto LABEL_31;
LABEL_37:
    v16 = 0;
    if ((v12 & 0x20) != 0)
      goto LABEL_32;
LABEL_38:
    v17 = 0;
    return v4 ^ v3 ^ v6 ^ v8 ^ v10 ^ v13 ^ v15 ^ v16 ^ v11 ^ v17;
  }
  v18 = *((float *)this + 16);
  v13 = LODWORD(v18);
  if (v18 == 0.0)
    v13 = 0;
  if ((v12 & 0x80) == 0)
    goto LABEL_36;
LABEL_28:
  v14 = *((float *)this + 17);
  v15 = LODWORD(v14);
  if (v14 == 0.0)
    v15 = 0;
  if ((*((_WORD *)this + 38) & 0x100) == 0)
    goto LABEL_37;
LABEL_31:
  v16 = *((unsigned int *)this + 18);
  if ((v12 & 0x20) == 0)
    goto LABEL_38;
LABEL_32:
  v17 = *((unsigned int *)this + 15);
  return v4 ^ v3 ^ v6 ^ v8 ^ v10 ^ v13 ^ v15 ^ v16 ^ v11 ^ v17;
}

void CMMsl::VisualLocalization::~VisualLocalization(CMMsl::VisualLocalization *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_1003551B8;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::VisualLocalization::~VisualLocalization(this);
  operator delete();
}

CMMsl::VisualLocalization *CMMsl::VisualLocalization::VisualLocalization(CMMsl::VisualLocalization *this, const CMMsl::VisualLocalization *a2)
{
  char *v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)this = off_1003551B8;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *((_DWORD *)this + 25) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  v5 = *((_BYTE *)a2 + 100);
  if ((v5 & 0x10) != 0)
  {
    v7 = *((_QWORD *)a2 + 11);
    v6 = 16;
    *((_BYTE *)this + 100) = 16;
    *((_QWORD *)this + 11) = v7;
    v5 = *((_BYTE *)a2 + 100);
    if ((v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((*((_BYTE *)a2 + 100) & 4) != 0)
  {
LABEL_5:
    v8 = *((_QWORD *)a2 + 9);
    v6 |= 4u;
    *((_BYTE *)this + 100) = v6;
    *((_QWORD *)this + 9) = v8;
    v5 = *((_BYTE *)a2 + 100);
  }
LABEL_6:
  if ((v5 & 8) != 0)
  {
    v12 = *((_QWORD *)a2 + 10);
    v6 |= 8u;
    *((_BYTE *)this + 100) = v6;
    *((_QWORD *)this + 10) = v12;
    v5 = *((_BYTE *)a2 + 100);
    if ((v5 & 1) == 0)
    {
LABEL_8:
      if ((v5 & 2) == 0)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_8;
  }
  v13 = *((_QWORD *)a2 + 7);
  v6 |= 1u;
  *((_BYTE *)this + 100) = v6;
  *((_QWORD *)this + 7) = v13;
  if ((*((_BYTE *)a2 + 100) & 2) != 0)
  {
LABEL_9:
    v9 = *((_QWORD *)a2 + 8);
    *((_BYTE *)this + 100) = v6 | 2;
    *((_QWORD *)this + 8) = v9;
  }
LABEL_10:
  if (this != a2)
  {
    sub_100239350((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3);
    sub_100020CE4(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  }
  if ((*((_BYTE *)a2 + 100) & 0x20) != 0)
  {
    v10 = *((_DWORD *)a2 + 24);
    *((_BYTE *)this + 100) |= 0x20u;
    *((_DWORD *)this + 24) = v10;
  }
  return this;
}

CMMsl *CMMsl::VisualLocalization::operator=(CMMsl *a1, const CMMsl::VisualLocalization *a2)
{
  CMMsl::VisualLocalization *v3;
  _BYTE v5[104];

  if (a1 != a2)
  {
    CMMsl::VisualLocalization::VisualLocalization((CMMsl::VisualLocalization *)v5, a2);
    CMMsl::swap(a1, (CMMsl::VisualLocalization *)v5, v3);
    CMMsl::VisualLocalization::~VisualLocalization((CMMsl::VisualLocalization *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::VisualLocalization *a2, CMMsl::VisualLocalization *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float result;

  v3 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v3;
  v4 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v4;
  v5 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v5;
  v6 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v6;
  v7 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v7;
  v8 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v8;
  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v9;
  v10 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v10;
  v11 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v11;
  v12 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v12;
  v13 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v13;
  v14 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v14;
  result = *((float *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((float *)a2 + 24) = result;
  return result;
}

uint64_t CMMsl::VisualLocalization::VisualLocalization(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_1003551B8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a2 + 100) = 0;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  sub_100239458(a1 + 32, (__n128 *)(a2 + 32));
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  return a1;
}

CMMsl *CMMsl::VisualLocalization::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::VisualLocalization *v3;
  _BYTE v5[104];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::VisualLocalization::VisualLocalization((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::VisualLocalization *)v5, v3);
    CMMsl::VisualLocalization::~VisualLocalization((CMMsl::VisualLocalization *)v5);
  }
  return a1;
}

uint64_t CMMsl::VisualLocalization::formatText(CMMsl::VisualLocalization *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;
  float *v6;
  float *v7;
  float v8;
  char v9;
  double *v10;
  double *v11;
  double v12;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 100);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "altitudeOfLocalizedPoseInEcefCoordinate", *((double *)this + 7));
    v5 = *((_BYTE *)this + 100);
  }
  if ((v5 & 0x20) != 0)
    PB::TextFormatter::format(a2, "confidence", *((float *)this + 24));
  v6 = (float *)*((_QWORD *)this + 1);
  v7 = (float *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "covariance", v8);
  }
  v9 = *((_BYTE *)this + 100);
  if ((v9 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "horizontalAccuracyOfLocalizedPoseInEcefCoordinate", *((double *)this + 8));
    v9 = *((_BYTE *)this + 100);
    if ((v9 & 4) == 0)
    {
LABEL_9:
      if ((v9 & 8) == 0)
        goto LABEL_10;
      goto LABEL_17;
    }
  }
  else if ((*((_BYTE *)this + 100) & 4) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(a2, "latitudeOfLocalizedPoseInEcefCoordinate", *((double *)this + 9));
  v9 = *((_BYTE *)this + 100);
  if ((v9 & 8) == 0)
  {
LABEL_10:
    if ((v9 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "longitudeOfLocalizedPoseInEcefCoordinate", *((double *)this + 10));
  if ((*((_BYTE *)this + 100) & 0x10) != 0)
LABEL_11:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 11));
LABEL_12:
  v10 = (double *)*((_QWORD *)this + 4);
  v11 = (double *)*((_QWORD *)this + 5);
  while (v10 != v11)
  {
    v12 = *v10++;
    PB::TextFormatter::format(a2, "transformMatrixFromCameraToEcefCoordinate", v12);
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::VisualLocalization::readFrom(CMMsl::VisualLocalization *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  char *v9;
  void **v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  _DWORD *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  _QWORD *v61;
  unint64_t v62;
  char *v63;
  _DWORD *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  int v82;
  unint64_t v83;
  _BYTE v85[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 8);
    v9 = (char *)this + 24;
    v10 = (void **)((char *)this + 32);
    v11 = (char *)this + 48;
    while (1)
    {
      v12 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 100) |= 0x10u;
          v25 = *((_QWORD *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_131;
          *((_QWORD *)this + 11) = *(_QWORD *)(*(_QWORD *)a2 + v25);
          goto LABEL_122;
        case 2u:
          *((_BYTE *)this + 100) |= 4u;
          v26 = *((_QWORD *)a2 + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_131;
          *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v26);
          goto LABEL_122;
        case 3u:
          *((_BYTE *)this + 100) |= 8u;
          v27 = *((_QWORD *)a2 + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_131;
          *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v27);
          goto LABEL_122;
        case 4u:
          *((_BYTE *)this + 100) |= 1u;
          v28 = *((_QWORD *)a2 + 1);
          if (v28 > 0xFFFFFFFFFFFFFFF7 || v28 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_131;
          *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v28);
          goto LABEL_122;
        case 5u:
          *((_BYTE *)this + 100) |= 2u;
          v29 = *((_QWORD *)a2 + 1);
          if (v29 > 0xFFFFFFFFFFFFFFF7 || v29 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_131;
          *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v29);
          goto LABEL_122;
        case 6u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark(a2, v85) & 1) != 0)
              return 0;
            v30 = *((_QWORD *)a2 + 1);
            v31 = *((_QWORD *)a2 + 2);
            while (v30 < v31 && !*((_BYTE *)a2 + 24))
            {
              v33 = (char *)*((_QWORD *)this + 5);
              v32 = *((_QWORD *)this + 6);
              if ((unint64_t)v33 >= v32)
              {
                v35 = (char *)*v10;
                v36 = (v33 - (_BYTE *)*v10) >> 3;
                v37 = v36 + 1;
                if ((unint64_t)(v36 + 1) >> 61)
                  goto LABEL_143;
                v38 = v32 - (_QWORD)v35;
                if (v38 >> 2 > v37)
                  v37 = v38 >> 2;
                if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
                  v39 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v39 = v37;
                if (v39)
                {
                  v40 = (char *)sub_10000D60C((uint64_t)v11, v39);
                  v35 = (char *)*((_QWORD *)this + 4);
                  v33 = (char *)*((_QWORD *)this + 5);
                }
                else
                {
                  v40 = 0;
                }
                v41 = &v40[8 * v36];
                *(_QWORD *)v41 = 0;
                v34 = v41 + 8;
                while (v33 != v35)
                {
                  v42 = *((_QWORD *)v33 - 1);
                  v33 -= 8;
                  *((_QWORD *)v41 - 1) = v42;
                  v41 -= 8;
                }
                *((_QWORD *)this + 4) = v41;
                *((_QWORD *)this + 5) = v34;
                *((_QWORD *)this + 6) = &v40[8 * v39];
                if (v35)
                  operator delete(v35);
              }
              else
              {
                *(_QWORD *)v33 = 0;
                v34 = v33 + 8;
              }
              *((_QWORD *)this + 5) = v34;
              v43 = *((_QWORD *)a2 + 1);
              if (v43 > 0xFFFFFFFFFFFFFFF7 || v43 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_95;
              *(v34 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v43);
              v31 = *((_QWORD *)a2 + 2);
              v30 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v30;
            }
            goto LABEL_96;
          }
          v60 = (char *)*((_QWORD *)this + 5);
          v59 = *((_QWORD *)this + 6);
          if ((unint64_t)v60 >= v59)
          {
            v65 = (char *)*v10;
            v66 = (v60 - (_BYTE *)*v10) >> 3;
            v67 = v66 + 1;
            if ((unint64_t)(v66 + 1) >> 61)
LABEL_143:
              sub_10000D5F8();
            v68 = v59 - (_QWORD)v65;
            if (v68 >> 2 > v67)
              v67 = v68 >> 2;
            if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8)
              v69 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v69 = v67;
            if (v69)
            {
              v70 = (char *)sub_10000D60C((uint64_t)v11, v69);
              v65 = (char *)*((_QWORD *)this + 4);
              v60 = (char *)*((_QWORD *)this + 5);
            }
            else
            {
              v70 = 0;
            }
            v77 = &v70[8 * v66];
            *(_QWORD *)v77 = 0;
            v61 = v77 + 8;
            while (v60 != v65)
            {
              v78 = *((_QWORD *)v60 - 1);
              v60 -= 8;
              *((_QWORD *)v77 - 1) = v78;
              v77 -= 8;
            }
            *((_QWORD *)this + 4) = v77;
            *((_QWORD *)this + 5) = v61;
            *((_QWORD *)this + 6) = &v70[8 * v69];
            if (v65)
              operator delete(v65);
          }
          else
          {
            *(_QWORD *)v60 = 0;
            v61 = v60 + 8;
          }
          *((_QWORD *)this + 5) = v61;
          v79 = *((_QWORD *)a2 + 1);
          if (v79 <= 0xFFFFFFFFFFFFFFF7 && v79 + 8 <= *((_QWORD *)a2 + 2))
          {
            *(v61 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v79);
LABEL_122:
            v80 = *((_QWORD *)a2 + 1) + 8;
            goto LABEL_134;
          }
          goto LABEL_131;
        case 7u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark(a2, v85) & 1) != 0)
              return 0;
            v44 = *((_QWORD *)a2 + 1);
            v45 = *((_QWORD *)a2 + 2);
            while (v44 < v45 && !*((_BYTE *)a2 + 24))
            {
              v47 = (char *)*((_QWORD *)this + 2);
              v46 = *((_QWORD *)this + 3);
              if ((unint64_t)v47 >= v46)
              {
                v49 = (char *)*v8;
                v50 = (v47 - (_BYTE *)*v8) >> 2;
                v51 = v50 + 1;
                if ((unint64_t)(v50 + 1) >> 62)
                  goto LABEL_144;
                v52 = v46 - (_QWORD)v49;
                if (v52 >> 1 > v51)
                  v51 = v52 >> 1;
                if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL)
                  v53 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v53 = v51;
                if (v53)
                {
                  v54 = (char *)sub_100020E2C((uint64_t)v9, v53);
                  v49 = (char *)*((_QWORD *)this + 1);
                  v47 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v54 = 0;
                }
                v55 = &v54[4 * v50];
                *(_DWORD *)v55 = 0;
                v48 = v55 + 4;
                while (v47 != v49)
                {
                  v56 = *((_DWORD *)v47 - 1);
                  v47 -= 4;
                  *((_DWORD *)v55 - 1) = v56;
                  v55 -= 4;
                }
                *((_QWORD *)this + 1) = v55;
                *((_QWORD *)this + 2) = v48;
                *((_QWORD *)this + 3) = &v54[4 * v53];
                if (v49)
                  operator delete(v49);
              }
              else
              {
                *(_DWORD *)v47 = 0;
                v48 = v47 + 4;
              }
              *((_QWORD *)this + 2) = v48;
              v57 = *((_QWORD *)a2 + 1);
              if (v57 > 0xFFFFFFFFFFFFFFFBLL || v57 + 4 > *((_QWORD *)a2 + 2))
              {
LABEL_95:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v48 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v57);
              v45 = *((_QWORD *)a2 + 2);
              v44 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v44;
            }
LABEL_96:
            PB::Reader::recallMark(a2, v85);
          }
          else
          {
            v63 = (char *)*((_QWORD *)this + 2);
            v62 = *((_QWORD *)this + 3);
            if ((unint64_t)v63 >= v62)
            {
              v71 = (char *)*v8;
              v72 = (v63 - (_BYTE *)*v8) >> 2;
              v73 = v72 + 1;
              if ((unint64_t)(v72 + 1) >> 62)
LABEL_144:
                sub_10000D5F8();
              v74 = v62 - (_QWORD)v71;
              if (v74 >> 1 > v73)
                v73 = v74 >> 1;
              if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL)
                v75 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v75 = v73;
              if (v75)
              {
                v76 = (char *)sub_100020E2C((uint64_t)v9, v75);
                v71 = (char *)*((_QWORD *)this + 1);
                v63 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v76 = 0;
              }
              v81 = &v76[4 * v72];
              *(_DWORD *)v81 = 0;
              v64 = v81 + 4;
              while (v63 != v71)
              {
                v82 = *((_DWORD *)v63 - 1);
                v63 -= 4;
                *((_DWORD *)v81 - 1) = v82;
                v81 -= 4;
              }
              *((_QWORD *)this + 1) = v81;
              *((_QWORD *)this + 2) = v64;
              *((_QWORD *)this + 3) = &v76[4 * v75];
              if (v71)
                operator delete(v71);
            }
            else
            {
              *(_DWORD *)v63 = 0;
              v64 = v63 + 4;
            }
            *((_QWORD *)this + 2) = v64;
            v83 = *((_QWORD *)a2 + 1);
            if (v83 <= 0xFFFFFFFFFFFFFFFBLL && v83 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v64 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v83);
LABEL_133:
              v80 = *((_QWORD *)a2 + 1) + 4;
LABEL_134:
              *((_QWORD *)a2 + 1) = v80;
            }
            else
            {
LABEL_131:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_135:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || *((_BYTE *)a2 + 24))
            return v4 == 0;
          break;
        case 8u:
          *((_BYTE *)this + 100) |= 0x20u;
          v58 = *((_QWORD *)a2 + 1);
          if (v58 > 0xFFFFFFFFFFFFFFFBLL || v58 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_131;
          *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v58);
          goto LABEL_133;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v24, 0) & 1) == 0)
            return 0;
          goto LABEL_135;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::VisualLocalization::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  double *v5;
  double *v6;
  double v7;
  float *v8;
  float *v9;
  float v10;

  v3 = this;
  v4 = *(_BYTE *)(this + 100);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 88), 1u);
    v4 = *(_BYTE *)(v3 + 100);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((*(_BYTE *)(this + 100) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 2u);
  v4 = *(_BYTE *)(v3 + 100);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
LABEL_18:
    this = PB::Writer::write(a2, *(double *)(v3 + 56), 4u);
    if ((*(_BYTE *)(v3 + 100) & 2) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 80), 3u);
  v4 = *(_BYTE *)(v3 + 100);
  if ((v4 & 1) != 0)
    goto LABEL_18;
LABEL_5:
  if ((v4 & 2) != 0)
LABEL_6:
    this = PB::Writer::write(a2, *(double *)(v3 + 64), 5u);
LABEL_7:
  v5 = *(double **)(v3 + 32);
  v6 = *(double **)(v3 + 40);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7, 6u);
  }
  v8 = *(float **)(v3 + 8);
  v9 = *(float **)(v3 + 16);
  while (v8 != v9)
  {
    v10 = *v8++;
    this = PB::Writer::write(a2, v10, 7u);
  }
  if ((*(_BYTE *)(v3 + 100) & 0x20) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 96), 8u);
  return this;
}

uint64_t CMMsl::VisualLocalization::hash_value(CMMsl::VisualLocalization *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;

  if ((*((_BYTE *)this + 100) & 0x10) == 0)
  {
    v2 = 0;
    if ((*((_BYTE *)this + 100) & 4) != 0)
      goto LABEL_3;
LABEL_22:
    v3 = 0;
    if ((*((_BYTE *)this + 100) & 8) != 0)
      goto LABEL_7;
LABEL_23:
    v4 = 0;
    if ((*((_BYTE *)this + 100) & 1) != 0)
      goto LABEL_11;
    goto LABEL_24;
  }
  if (*((double *)this + 11) == 0.0)
    v2 = 0;
  else
    v2 = *((_QWORD *)this + 11);
  if ((*((_BYTE *)this + 100) & 4) == 0)
    goto LABEL_22;
LABEL_3:
  if (*((double *)this + 9) == 0.0)
    v3 = 0;
  else
    v3 = *((_QWORD *)this + 9);
  if ((*((_BYTE *)this + 100) & 8) == 0)
    goto LABEL_23;
LABEL_7:
  if (*((double *)this + 10) == 0.0)
    v4 = 0;
  else
    v4 = *((_QWORD *)this + 10);
  if ((*((_BYTE *)this + 100) & 1) != 0)
  {
LABEL_11:
    if (*((double *)this + 7) == 0.0)
      v5 = 0;
    else
      v5 = *((_QWORD *)this + 7);
    if ((*((_BYTE *)this + 100) & 2) != 0)
      goto LABEL_15;
LABEL_25:
    v6 = 0;
    goto LABEL_26;
  }
LABEL_24:
  v5 = 0;
  if ((*((_BYTE *)this + 100) & 2) == 0)
    goto LABEL_25;
LABEL_15:
  if (*((double *)this + 8) == 0.0)
    v6 = 0;
  else
    v6 = *((_QWORD *)this + 8);
LABEL_26:
  v7 = PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
  v8 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  if ((*((_BYTE *)this + 100) & 0x20) != 0)
  {
    v10 = *((float *)this + 24);
    v9 = LODWORD(v10);
    if (v10 == 0.0)
      v9 = 0;
  }
  else
  {
    v9 = 0;
  }
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9;
}

void CMMsl::VisualLocalizationAttitudeConstraints::~VisualLocalizationAttitudeConstraints(CMMsl::VisualLocalizationAttitudeConstraints *this)
{
  void *v2;

  *(_QWORD *)this = off_1003551F0;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::VisualLocalizationAttitudeConstraints::~VisualLocalizationAttitudeConstraints(this);
  operator delete();
}

CMMsl::VisualLocalizationAttitudeConstraints *CMMsl::VisualLocalizationAttitudeConstraints::VisualLocalizationAttitudeConstraints(CMMsl::VisualLocalizationAttitudeConstraints *this, const CMMsl::VisualLocalizationAttitudeConstraints *a2)
{
  char *v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v12;

  *(_QWORD *)this = off_1003551F0;
  *((_QWORD *)this + 1) = 0;
  v4 = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 15) = 0;
  v5 = *((_BYTE *)a2 + 60);
  if ((v5 & 2) != 0)
  {
    v7 = *((_QWORD *)a2 + 5);
    v6 = 2;
    *((_BYTE *)this + 60) = 2;
    *((_QWORD *)this + 5) = v7;
    v5 = *((_BYTE *)a2 + 60);
    if ((v5 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((*((_BYTE *)a2 + 60) & 1) != 0)
  {
LABEL_5:
    v8 = *((_QWORD *)a2 + 4);
    v6 |= 1u;
    *((_BYTE *)this + 60) = v6;
    *((_QWORD *)this + 4) = v8;
    v5 = *((_BYTE *)a2 + 60);
  }
LABEL_6:
  if ((v5 & 0x10) == 0)
  {
    if ((v5 & 8) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
  v12 = *((_DWORD *)a2 + 14);
  v6 |= 0x10u;
  *((_BYTE *)this + 60) = v6;
  *((_DWORD *)this + 14) = v12;
  if ((*((_BYTE *)a2 + 60) & 8) != 0)
  {
LABEL_8:
    v9 = *((_DWORD *)a2 + 13);
    *((_BYTE *)this + 60) = v6 | 8;
    *((_DWORD *)this + 13) = v9;
  }
LABEL_9:
  if (this != a2)
    sub_100020CE4(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  if ((*((_BYTE *)a2 + 60) & 4) != 0)
  {
    v10 = *((_DWORD *)a2 + 12);
    *((_BYTE *)this + 60) |= 4u;
    *((_DWORD *)this + 12) = v10;
  }
  return this;
}

uint64_t CMMsl::VisualLocalizationAttitudeConstraints::operator=(uint64_t a1, const CMMsl::VisualLocalizationAttitudeConstraints *a2)
{
  int v3;
  __int128 v4;
  int v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  int v15;

  if ((const CMMsl::VisualLocalizationAttitudeConstraints *)a1 != a2)
  {
    CMMsl::VisualLocalizationAttitudeConstraints::VisualLocalizationAttitudeConstraints((CMMsl::VisualLocalizationAttitudeConstraints *)&v9, a2);
    v3 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 60) = v15;
    v15 = v3;
    v4 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v12;
    v12 = v4;
    v5 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v14;
    v14 = v5;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v6;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v11;
    v11 = v7;
    *(_QWORD *)&v6 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v13;
    v13 = v6;
    CMMsl::VisualLocalizationAttitudeConstraints::~VisualLocalizationAttitudeConstraints((CMMsl::VisualLocalizationAttitudeConstraints *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::VisualLocalizationAttitudeConstraints *a2, CMMsl::VisualLocalizationAttitudeConstraints *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float result;

  v3 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v4;
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  LODWORD(v5) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v5;
  LODWORD(v5) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v5;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  result = *((float *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((float *)a2 + 12) = result;
  return result;
}

uint64_t CMMsl::VisualLocalizationAttitudeConstraints::VisualLocalizationAttitudeConstraints(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_1003551F0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return a1;
}

uint64_t CMMsl::VisualLocalizationAttitudeConstraints::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  int v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  int v15;

  if (a1 != a2)
  {
    CMMsl::VisualLocalizationAttitudeConstraints::VisualLocalizationAttitudeConstraints((uint64_t)&v9, a2);
    v3 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 60) = v15;
    v15 = v3;
    v4 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v12;
    v12 = v4;
    v5 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v14;
    v14 = v5;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v6;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v11;
    v11 = v7;
    *(_QWORD *)&v6 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v13;
    v13 = v6;
    CMMsl::VisualLocalizationAttitudeConstraints::~VisualLocalizationAttitudeConstraints((CMMsl::VisualLocalizationAttitudeConstraints *)&v9);
  }
  return a1;
}

uint64_t CMMsl::VisualLocalizationAttitudeConstraints::formatText(CMMsl::VisualLocalizationAttitudeConstraints *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;
  float *v6;
  float *v7;
  float v8;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 60);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "deltaHeading", *((float *)this + 12));
    v5 = *((_BYTE *)this + 60);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((*((_BYTE *)this + 60) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "gravityZ", *((float *)this + 13));
  v5 = *((_BYTE *)this + 60);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "lastStateTimestamp", *((double *)this + 4));
  if ((*((_BYTE *)this + 60) & 0x10) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "meanRotRate", *((float *)this + 14));
LABEL_6:
  v6 = (float *)*((_QWORD *)this + 1);
  v7 = (float *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "quaternion", v8);
  }
  if ((*((_BYTE *)this + 60) & 2) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 5));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::VisualLocalizationAttitudeConstraints::readFrom(CMMsl::VisualLocalizationAttitudeConstraints *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  char *v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  _DWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _DWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  int v53;
  unint64_t v54;
  _BYTE v56[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 8);
    v9 = (char *)this + 24;
    while (1)
    {
      v10 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        if (v12++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v22 = v13 & 7;
      if (v22 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 60) |= 2u;
          v23 = *((_QWORD *)a2 + 1);
          if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_85;
          *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v23);
          goto LABEL_31;
        case 2u:
          *((_BYTE *)this + 60) |= 1u;
          v24 = *((_QWORD *)a2 + 1);
          if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_85;
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v24);
LABEL_31:
          v25 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_88;
        case 3u:
          *((_BYTE *)this + 60) |= 0x10u;
          v26 = *((_QWORD *)a2 + 1);
          if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_85;
          *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v26);
          goto LABEL_87;
        case 4u:
          *((_BYTE *)this + 60) |= 8u;
          v27 = *((_QWORD *)a2 + 1);
          if (v27 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_85;
          *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v27);
          goto LABEL_87;
        case 5u:
          if (v22 == 2)
          {
            if ((PB::Reader::placeMark(a2, v56) & 1) != 0)
              return 0;
            v28 = *((_QWORD *)a2 + 1);
            v29 = *((_QWORD *)a2 + 2);
            while (v28 < v29 && !*((_BYTE *)a2 + 24))
            {
              v31 = (char *)*((_QWORD *)this + 2);
              v30 = *((_QWORD *)this + 3);
              if ((unint64_t)v31 >= v30)
              {
                v33 = (char *)*v8;
                v34 = (v31 - (_BYTE *)*v8) >> 2;
                v35 = v34 + 1;
                if ((unint64_t)(v34 + 1) >> 62)
                  goto LABEL_97;
                v36 = v30 - (_QWORD)v33;
                if (v36 >> 1 > v35)
                  v35 = v36 >> 1;
                if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
                  v37 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v37 = v35;
                if (v37)
                {
                  v38 = (char *)sub_100020E2C((uint64_t)v9, v37);
                  v33 = (char *)*((_QWORD *)this + 1);
                  v31 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v38 = 0;
                }
                v39 = &v38[4 * v34];
                *(_DWORD *)v39 = 0;
                v32 = v39 + 4;
                while (v31 != v33)
                {
                  v40 = *((_DWORD *)v31 - 1);
                  v31 -= 4;
                  *((_DWORD *)v39 - 1) = v40;
                  v39 -= 4;
                }
                *((_QWORD *)this + 1) = v39;
                *((_QWORD *)this + 2) = v32;
                *((_QWORD *)this + 3) = &v38[4 * v37];
                if (v33)
                  operator delete(v33);
              }
              else
              {
                *(_DWORD *)v31 = 0;
                v32 = v31 + 4;
              }
              *((_QWORD *)this + 2) = v32;
              v41 = *((_QWORD *)a2 + 1);
              if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((_QWORD *)a2 + 2))
              {
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v32 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v41);
              v29 = *((_QWORD *)a2 + 2);
              v28 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v28;
            }
            PB::Reader::recallMark(a2, v56);
          }
          else
          {
            v44 = (char *)*((_QWORD *)this + 2);
            v43 = *((_QWORD *)this + 3);
            if ((unint64_t)v44 >= v43)
            {
              v46 = (char *)*v8;
              v47 = (v44 - (_BYTE *)*v8) >> 2;
              v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 62)
LABEL_97:
                sub_10000D5F8();
              v49 = v43 - (_QWORD)v46;
              if (v49 >> 1 > v48)
                v48 = v49 >> 1;
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
                v50 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v50 = v48;
              if (v50)
              {
                v51 = (char *)sub_100020E2C((uint64_t)v9, v50);
                v46 = (char *)*((_QWORD *)this + 1);
                v44 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v51 = 0;
              }
              v52 = &v51[4 * v47];
              *(_DWORD *)v52 = 0;
              v45 = v52 + 4;
              while (v44 != v46)
              {
                v53 = *((_DWORD *)v44 - 1);
                v44 -= 4;
                *((_DWORD *)v52 - 1) = v53;
                v52 -= 4;
              }
              *((_QWORD *)this + 1) = v52;
              *((_QWORD *)this + 2) = v45;
              *((_QWORD *)this + 3) = &v51[4 * v50];
              if (v46)
                operator delete(v46);
            }
            else
            {
              *(_DWORD *)v44 = 0;
              v45 = v44 + 4;
            }
            *((_QWORD *)this + 2) = v45;
            v54 = *((_QWORD *)a2 + 1);
            if (v54 <= 0xFFFFFFFFFFFFFFFBLL && v54 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v45 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v54);
LABEL_87:
              v25 = *((_QWORD *)a2 + 1) + 4;
LABEL_88:
              *((_QWORD *)a2 + 1) = v25;
            }
            else
            {
LABEL_85:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_89:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || *((_BYTE *)a2 + 24))
            return v4 == 0;
          break;
        case 6u:
          *((_BYTE *)this + 60) |= 4u;
          v42 = *((_QWORD *)a2 + 1);
          if (v42 > 0xFFFFFFFFFFFFFFFBLL || v42 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_85;
          *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v42);
          goto LABEL_87;
        default:
          if ((PB::Reader::skip(a2, v13 >> 3, v22, 0) & 1) == 0)
            return 0;
          goto LABEL_89;
      }
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_21;
      v17 += 7;
      v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::VisualLocalizationAttitudeConstraints::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  float *v5;
  float *v6;
  float v7;

  v3 = this;
  v4 = *(_BYTE *)(this + 60);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 40), 1u);
    v4 = *(_BYTE *)(v3 + 60);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
LABEL_13:
      this = PB::Writer::write(a2, *(float *)(v3 + 56), 3u);
      if ((*(_BYTE *)(v3 + 60) & 8) == 0)
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(this + 60) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 2u);
  v4 = *(_BYTE *)(v3 + 60);
  if ((v4 & 0x10) != 0)
    goto LABEL_13;
LABEL_4:
  if ((v4 & 8) != 0)
LABEL_5:
    this = PB::Writer::write(a2, *(float *)(v3 + 52), 4u);
LABEL_6:
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7, 5u);
  }
  if ((*(_BYTE *)(v3 + 60) & 4) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 48), 6u);
  return this;
}

uint64_t CMMsl::VisualLocalizationAttitudeConstraints::hash_value(CMMsl::VisualLocalizationAttitudeConstraints *this)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;

  if ((*((_BYTE *)this + 60) & 2) == 0)
  {
    v2 = 0;
    if ((*((_BYTE *)this + 60) & 1) != 0)
      goto LABEL_3;
LABEL_18:
    v3 = 0;
    if ((*((_BYTE *)this + 60) & 0x10) != 0)
      goto LABEL_7;
    goto LABEL_19;
  }
  if (*((double *)this + 5) == 0.0)
    v2 = 0;
  else
    v2 = *((_QWORD *)this + 5);
  if ((*((_BYTE *)this + 60) & 1) == 0)
    goto LABEL_18;
LABEL_3:
  if (*((double *)this + 4) == 0.0)
    v3 = 0;
  else
    v3 = *((_QWORD *)this + 4);
  if ((*((_BYTE *)this + 60) & 0x10) != 0)
  {
LABEL_7:
    v4 = *((float *)this + 14);
    if (v4 == 0.0)
      v5 = 0;
    else
      v5 = LODWORD(v4);
    if ((*((_BYTE *)this + 60) & 8) != 0)
      goto LABEL_11;
LABEL_20:
    v7 = 0;
    goto LABEL_21;
  }
LABEL_19:
  v5 = 0;
  if ((*((_BYTE *)this + 60) & 8) == 0)
    goto LABEL_20;
LABEL_11:
  v6 = *((float *)this + 13);
  if (v6 == 0.0)
    v7 = 0;
  else
    v7 = LODWORD(v6);
LABEL_21:
  v8 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  if ((*((_BYTE *)this + 60) & 4) != 0)
  {
    v10 = *((float *)this + 12);
    v9 = LODWORD(v10);
    if (v10 == 0.0)
      v9 = 0;
  }
  else
  {
    v9 = 0;
  }
  return v3 ^ v2 ^ v5 ^ v7 ^ v9 ^ v8;
}

void CMMsl::VisualLocalizationAttitudeCorrection::~VisualLocalizationAttitudeCorrection(CMMsl::VisualLocalizationAttitudeCorrection *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100355228;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100355228;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100355228;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::VisualLocalizationAttitudeCorrection::VisualLocalizationAttitudeCorrection(_QWORD *this, const CMMsl::VisualLocalizationAttitudeCorrection *a2)
{
  *this = off_100355228;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::VisualLocalizationAttitudeCorrection *CMMsl::VisualLocalizationAttitudeCorrection::operator=(const CMMsl::VisualLocalizationAttitudeCorrection *a1, const CMMsl::VisualLocalizationAttitudeCorrection *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::VisualLocalizationAttitudeCorrection *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::VisualLocalizationAttitudeCorrection::VisualLocalizationAttitudeCorrection(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_100355228;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::VisualLocalizationAttitudeCorrection *a2, CMMsl::VisualLocalizationAttitudeCorrection *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::VisualLocalizationAttitudeCorrection::VisualLocalizationAttitudeCorrection(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100355228;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100355228;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::VisualLocalizationAttitudeCorrection::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_100355228;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::VisualLocalizationAttitudeCorrection::formatText(CMMsl::VisualLocalizationAttitudeCorrection *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "correction");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::VisualLocalizationAttitudeCorrection::readFrom(CMMsl::VisualLocalizationAttitudeCorrection *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::VisualLocalizationAttitudeCorrection::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

CMMsl::DeviceMotionCorrection *CMMsl::VisualLocalizationAttitudeCorrection::hash_value(CMMsl::VisualLocalizationAttitudeCorrection *this)
{
  CMMsl::DeviceMotionCorrection *result;

  result = (CMMsl::DeviceMotionCorrection *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::DeviceMotionCorrection *)CMMsl::DeviceMotionCorrection::hash_value(result);
  return result;
}

uint64_t CMMsl::VisualLocalizationAttitudeCorrection::makeCorrection(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

void CMMsl::VisualStateMeasurement::~VisualStateMeasurement(CMMsl::VisualStateMeasurement *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = off_100355260;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::VisualStateMeasurement::~VisualStateMeasurement(this);
  operator delete();
}

CMMsl::VisualStateMeasurement *CMMsl::VisualStateMeasurement::VisualStateMeasurement(CMMsl::VisualStateMeasurement *this, const CMMsl::VisualStateMeasurement *a2)
{
  char *v4;
  uint64_t v5;
  char v6;
  char v7;
  int v8;

  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_QWORD *)this = off_100355260;
  *((_DWORD *)this + 24) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 9) = 0;
  if ((*((_BYTE *)a2 + 96) & 1) != 0)
  {
    v5 = *((_QWORD *)a2 + 10);
    *((_BYTE *)this + 96) = 1;
    *((_QWORD *)this + 10) = v5;
  }
  if (this != a2)
  {
    sub_100239350(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
    sub_100239350((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3);
    sub_100239350((char *)this + 56, *((char **)a2 + 7), *((_QWORD *)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 3);
  }
  v6 = *((_BYTE *)a2 + 96);
  if ((v6 & 4) != 0)
  {
    v7 = *((_BYTE *)a2 + 92);
    *((_BYTE *)this + 96) |= 4u;
    *((_BYTE *)this + 92) = v7;
    v6 = *((_BYTE *)a2 + 96);
  }
  if ((v6 & 2) != 0)
  {
    v8 = *((_DWORD *)a2 + 22);
    *((_BYTE *)this + 96) |= 2u;
    *((_DWORD *)this + 22) = v8;
  }
  return this;
}

CMMsl *CMMsl::VisualStateMeasurement::operator=(CMMsl *a1, const CMMsl::VisualStateMeasurement *a2)
{
  CMMsl::VisualStateMeasurement *v3;
  _BYTE v5[104];

  if (a1 != a2)
  {
    CMMsl::VisualStateMeasurement::VisualStateMeasurement((CMMsl::VisualStateMeasurement *)v5, a2);
    CMMsl::swap(a1, (CMMsl::VisualStateMeasurement *)v5, v3);
    CMMsl::VisualStateMeasurement::~VisualStateMeasurement((CMMsl::VisualStateMeasurement *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::VisualStateMeasurement *a2, CMMsl::VisualStateMeasurement *a3)
{
  int v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v3;
  result = *((double *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((double *)a2 + 10) = result;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v8;
  v9 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v9;
  v10 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v10;
  v11 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v11;
  v12 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v12;
  v13 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 92);
  *((_BYTE *)this + 92) = *((_BYTE *)a2 + 92);
  *((_BYTE *)a2 + 92) = v13;
  LODWORD(v13) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v13;
  return result;
}

uint64_t CMMsl::VisualStateMeasurement::VisualStateMeasurement(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_100355260;
  v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  v5 = a1 + 56;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  sub_100239458(v4, (__n128 *)(a2 + 32));
  sub_100239458(v5, (__n128 *)(a2 + 56));
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  return a1;
}

CMMsl *CMMsl::VisualStateMeasurement::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::VisualStateMeasurement *v3;
  _BYTE v5[104];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::VisualStateMeasurement::VisualStateMeasurement((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::VisualStateMeasurement *)v5, v3);
    CMMsl::VisualStateMeasurement::~VisualStateMeasurement((CMMsl::VisualStateMeasurement *)v5);
  }
  return a1;
}

uint64_t CMMsl::VisualStateMeasurement::formatText(CMMsl::VisualStateMeasurement *this, PB::TextFormatter *a2, const char *a3)
{
  double *v5;
  double *v6;
  double v7;
  char v8;
  double *v9;
  double *v10;
  double v11;
  double *v12;
  double *v13;
  double v14;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (double *)*((_QWORD *)this + 1);
  v6 = (double *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "attitude", v7);
  }
  v8 = *((_BYTE *)this + 96);
  if ((v8 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "isInitFinished", *((_BYTE *)this + 92));
    v8 = *((_BYTE *)this + 96);
    if ((v8 & 1) == 0)
    {
LABEL_5:
      if ((v8 & 2) == 0)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  else if ((*((_BYTE *)this + 96) & 1) == 0)
  {
    goto LABEL_5;
  }
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 10));
  if ((*((_BYTE *)this + 96) & 2) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "trackingState", *((_DWORD *)this + 22));
LABEL_7:
  v9 = (double *)*((_QWORD *)this + 4);
  v10 = (double *)*((_QWORD *)this + 5);
  while (v9 != v10)
  {
    v11 = *v9++;
    PB::TextFormatter::format(a2, "translation", v11);
  }
  v12 = (double *)*((_QWORD *)this + 7);
  v13 = (double *)*((_QWORD *)this + 8);
  while (v12 != v13)
  {
    v14 = *v12++;
    PB::TextFormatter::format(a2, "velocity", v14);
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::VisualStateMeasurement::readFrom(CMMsl::VisualStateMeasurement *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  void **v9;
  void **v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  _QWORD *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  int v70;
  BOOL v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char v75;
  unsigned int v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  unint64_t v80;
  char *v81;
  _QWORD *v82;
  unint64_t v83;
  char *v84;
  unint64_t v85;
  char *v86;
  char v87;
  unsigned int v88;
  unint64_t v89;
  char v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  char *v118;
  char *v119;
  _BYTE v120[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 56);
    v9 = (void **)((char *)this + 32);
    v118 = (char *)this + 48;
    v119 = (char *)this + 72;
    v10 = (void **)((char *)this + 8);
    v11 = (char *)this + 24;
    while (1)
    {
      v12 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 96) |= 1u;
          v25 = *((_QWORD *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_177;
          *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v25);
          goto LABEL_179;
        case 2u:
          if (v24 != 2)
          {
            v81 = (char *)*((_QWORD *)this + 2);
            v80 = *((_QWORD *)this + 3);
            if ((unint64_t)v81 >= v80)
            {
              v91 = (char *)*v10;
              v92 = (v81 - (_BYTE *)*v10) >> 3;
              v93 = v92 + 1;
              if ((unint64_t)(v92 + 1) >> 61)
LABEL_190:
                sub_10000D5F8();
              v94 = v80 - (_QWORD)v91;
              if (v94 >> 2 > v93)
                v93 = v94 >> 2;
              if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8)
                v95 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v95 = v93;
              if (v95)
              {
                v96 = (char *)sub_10000D60C((uint64_t)v11, v95);
                v91 = (char *)*((_QWORD *)this + 1);
                v81 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v96 = 0;
              }
              v109 = &v96[8 * v92];
              *(_QWORD *)v109 = 0;
              v82 = v109 + 8;
              while (v81 != v91)
              {
                v110 = *((_QWORD *)v81 - 1);
                v81 -= 8;
                *((_QWORD *)v109 - 1) = v110;
                v109 -= 8;
              }
              *((_QWORD *)this + 1) = v109;
              *((_QWORD *)this + 2) = v82;
              *((_QWORD *)this + 3) = &v96[8 * v95];
              if (v91)
                operator delete(v91);
            }
            else
            {
              *(_QWORD *)v81 = 0;
              v82 = v81 + 8;
            }
            *((_QWORD *)this + 2) = v82;
            goto LABEL_175;
          }
          if ((PB::Reader::placeMark(a2, v120) & 1) != 0)
            return 0;
          v26 = *((_QWORD *)a2 + 1);
          v27 = *((_QWORD *)a2 + 2);
          while (v26 < v27 && !*((_BYTE *)a2 + 24))
          {
            v29 = (char *)*((_QWORD *)this + 2);
            v28 = *((_QWORD *)this + 3);
            if ((unint64_t)v29 >= v28)
            {
              v31 = (char *)*v10;
              v32 = (v29 - (_BYTE *)*v10) >> 3;
              v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 61)
                goto LABEL_190;
              v34 = v28 - (_QWORD)v31;
              if (v34 >> 2 > v33)
                v33 = v34 >> 2;
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
                v35 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v35 = v33;
              if (v35)
              {
                v36 = (char *)sub_10000D60C((uint64_t)v11, v35);
                v31 = (char *)*((_QWORD *)this + 1);
                v29 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v36 = 0;
              }
              v37 = &v36[8 * v32];
              *(_QWORD *)v37 = 0;
              v30 = v37 + 8;
              while (v29 != v31)
              {
                v38 = *((_QWORD *)v29 - 1);
                v29 -= 8;
                *((_QWORD *)v37 - 1) = v38;
                v37 -= 8;
              }
              *((_QWORD *)this + 1) = v37;
              *((_QWORD *)this + 2) = v30;
              *((_QWORD *)this + 3) = &v36[8 * v35];
              if (v31)
                operator delete(v31);
            }
            else
            {
              *(_QWORD *)v29 = 0;
              v30 = v29 + 8;
            }
            *((_QWORD *)this + 2) = v30;
            v39 = *((_QWORD *)a2 + 1);
            if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_124;
            *(v30 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v39);
            v27 = *((_QWORD *)a2 + 2);
            v26 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v26;
          }
          goto LABEL_125;
        case 3u:
          if (v24 != 2)
          {
            v84 = (char *)*((_QWORD *)this + 5);
            v83 = *((_QWORD *)this + 6);
            if ((unint64_t)v84 >= v83)
            {
              v97 = (char *)*v9;
              v98 = (v84 - (_BYTE *)*v9) >> 3;
              v99 = v98 + 1;
              if ((unint64_t)(v98 + 1) >> 61)
LABEL_191:
                sub_10000D5F8();
              v100 = v83 - (_QWORD)v97;
              if (v100 >> 2 > v99)
                v99 = v100 >> 2;
              if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFF8)
                v101 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v101 = v99;
              if (v101)
              {
                v102 = (char *)sub_10000D60C((uint64_t)v118, v101);
                v97 = (char *)*((_QWORD *)this + 4);
                v84 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v102 = 0;
              }
              v111 = &v102[8 * v98];
              *(_QWORD *)v111 = 0;
              v82 = v111 + 8;
              while (v84 != v97)
              {
                v112 = *((_QWORD *)v84 - 1);
                v84 -= 8;
                *((_QWORD *)v111 - 1) = v112;
                v111 -= 8;
              }
              *((_QWORD *)this + 4) = v111;
              *((_QWORD *)this + 5) = v82;
              *((_QWORD *)this + 6) = &v102[8 * v101];
              if (v97)
                operator delete(v97);
            }
            else
            {
              *(_QWORD *)v84 = 0;
              v82 = v84 + 8;
            }
            *((_QWORD *)this + 5) = v82;
            goto LABEL_175;
          }
          if ((PB::Reader::placeMark(a2, v120) & 1) != 0)
            return 0;
          v40 = *((_QWORD *)a2 + 1);
          v41 = *((_QWORD *)a2 + 2);
          while (v40 < v41 && !*((_BYTE *)a2 + 24))
          {
            v43 = (char *)*((_QWORD *)this + 5);
            v42 = *((_QWORD *)this + 6);
            if ((unint64_t)v43 >= v42)
            {
              v45 = (char *)*v9;
              v46 = (v43 - (_BYTE *)*v9) >> 3;
              v47 = v46 + 1;
              if ((unint64_t)(v46 + 1) >> 61)
                goto LABEL_191;
              v48 = v42 - (_QWORD)v45;
              if (v48 >> 2 > v47)
                v47 = v48 >> 2;
              if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
                v49 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v49 = v47;
              if (v49)
              {
                v50 = (char *)sub_10000D60C((uint64_t)v118, v49);
                v45 = (char *)*((_QWORD *)this + 4);
                v43 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v50 = 0;
              }
              v51 = &v50[8 * v46];
              *(_QWORD *)v51 = 0;
              v44 = v51 + 8;
              while (v43 != v45)
              {
                v52 = *((_QWORD *)v43 - 1);
                v43 -= 8;
                *((_QWORD *)v51 - 1) = v52;
                v51 -= 8;
              }
              *((_QWORD *)this + 4) = v51;
              *((_QWORD *)this + 5) = v44;
              *((_QWORD *)this + 6) = &v50[8 * v49];
              if (v45)
                operator delete(v45);
            }
            else
            {
              *(_QWORD *)v43 = 0;
              v44 = v43 + 8;
            }
            *((_QWORD *)this + 5) = v44;
            v53 = *((_QWORD *)a2 + 1);
            if (v53 > 0xFFFFFFFFFFFFFFF7 || v53 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_124;
            *(v44 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v53);
            v41 = *((_QWORD *)a2 + 2);
            v40 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v40;
          }
          goto LABEL_125;
        case 4u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark(a2, v120) & 1) != 0)
              return 0;
            v54 = *((_QWORD *)a2 + 1);
            v55 = *((_QWORD *)a2 + 2);
            while (v54 < v55 && !*((_BYTE *)a2 + 24))
            {
              v57 = (char *)*((_QWORD *)this + 8);
              v56 = *((_QWORD *)this + 9);
              if ((unint64_t)v57 >= v56)
              {
                v59 = (char *)*v8;
                v60 = (v57 - (_BYTE *)*v8) >> 3;
                v61 = v60 + 1;
                if ((unint64_t)(v60 + 1) >> 61)
                  goto LABEL_192;
                v62 = v56 - (_QWORD)v59;
                if (v62 >> 2 > v61)
                  v61 = v62 >> 2;
                if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
                  v63 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v63 = v61;
                if (v63)
                {
                  v64 = (char *)sub_10000D60C((uint64_t)v119, v63);
                  v59 = (char *)*((_QWORD *)this + 7);
                  v57 = (char *)*((_QWORD *)this + 8);
                }
                else
                {
                  v64 = 0;
                }
                v65 = &v64[8 * v60];
                *(_QWORD *)v65 = 0;
                v58 = v65 + 8;
                while (v57 != v59)
                {
                  v66 = *((_QWORD *)v57 - 1);
                  v57 -= 8;
                  *((_QWORD *)v65 - 1) = v66;
                  v65 -= 8;
                }
                *((_QWORD *)this + 7) = v65;
                *((_QWORD *)this + 8) = v58;
                *((_QWORD *)this + 9) = &v64[8 * v63];
                if (v59)
                  operator delete(v59);
              }
              else
              {
                *(_QWORD *)v57 = 0;
                v58 = v57 + 8;
              }
              *((_QWORD *)this + 8) = v58;
              v67 = *((_QWORD *)a2 + 1);
              if (v67 > 0xFFFFFFFFFFFFFFF7 || v67 + 8 > *((_QWORD *)a2 + 2))
              {
LABEL_124:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v58 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v67);
              v55 = *((_QWORD *)a2 + 2);
              v54 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v54;
            }
LABEL_125:
            PB::Reader::recallMark(a2, v120);
          }
          else
          {
            v86 = (char *)*((_QWORD *)this + 8);
            v85 = *((_QWORD *)this + 9);
            if ((unint64_t)v86 >= v85)
            {
              v103 = (char *)*v8;
              v104 = (v86 - (_BYTE *)*v8) >> 3;
              v105 = v104 + 1;
              if ((unint64_t)(v104 + 1) >> 61)
LABEL_192:
                sub_10000D5F8();
              v106 = v85 - (_QWORD)v103;
              if (v106 >> 2 > v105)
                v105 = v106 >> 2;
              if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFF8)
                v107 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v107 = v105;
              if (v107)
              {
                v108 = (char *)sub_10000D60C((uint64_t)v119, v107);
                v103 = (char *)*((_QWORD *)this + 7);
                v86 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v108 = 0;
              }
              v113 = &v108[8 * v104];
              *(_QWORD *)v113 = 0;
              v82 = v113 + 8;
              while (v86 != v103)
              {
                v114 = *((_QWORD *)v86 - 1);
                v86 -= 8;
                *((_QWORD *)v113 - 1) = v114;
                v113 -= 8;
              }
              *((_QWORD *)this + 7) = v113;
              *((_QWORD *)this + 8) = v82;
              *((_QWORD *)this + 9) = &v108[8 * v107];
              if (v103)
                operator delete(v103);
            }
            else
            {
              *(_QWORD *)v86 = 0;
              v82 = v86 + 8;
            }
            *((_QWORD *)this + 8) = v82;
LABEL_175:
            v115 = *((_QWORD *)a2 + 1);
            if (v115 <= 0xFFFFFFFFFFFFFFF7 && v115 + 8 <= *((_QWORD *)a2 + 2))
            {
              *(v82 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v115);
LABEL_179:
              *((_QWORD *)a2 + 1) += 8;
            }
            else
            {
LABEL_177:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_180:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 5u:
          *((_BYTE *)this + 96) |= 4u;
          v68 = *((_QWORD *)a2 + 1);
          if (v68 >= *((_QWORD *)a2 + 2))
          {
            v71 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v69 = v68 + 1;
            v70 = *(unsigned __int8 *)(*(_QWORD *)a2 + v68);
            *((_QWORD *)a2 + 1) = v69;
            v71 = v70 != 0;
          }
          *((_BYTE *)this + 92) = v71;
          goto LABEL_180;
        case 6u:
          *((_BYTE *)this + 96) |= 2u;
          v72 = *((_QWORD *)a2 + 1);
          v73 = *((_QWORD *)a2 + 2);
          v74 = *(_QWORD *)a2;
          if (v72 <= 0xFFFFFFFFFFFFFFF5 && v72 + 10 <= v73)
          {
            v75 = 0;
            v76 = 0;
            v77 = 0;
            do
            {
              v78 = v72 + 1;
              *((_QWORD *)a2 + 1) = v72 + 1;
              v79 = *(_BYTE *)(v74 + v72);
              v77 |= (unint64_t)(v79 & 0x7F) << v75;
              if ((v79 & 0x80) == 0)
                goto LABEL_153;
              v75 += 7;
              v72 = v78;
              v18 = v76++ > 8;
            }
            while (!v18);
LABEL_123:
            LODWORD(v77) = 0;
            goto LABEL_153;
          }
          v87 = 0;
          v88 = 0;
          v77 = 0;
          if (v73 <= v72)
            v73 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v73 == v72)
            {
              LODWORD(v77) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v89 = v72 + 1;
              v90 = *(_BYTE *)(v74 + v72);
              *((_QWORD *)a2 + 1) = v89;
              v77 |= (unint64_t)(v90 & 0x7F) << v87;
              if (v90 < 0)
              {
                v87 += 7;
                v72 = v89;
                v18 = v88++ > 8;
                if (v18)
                  goto LABEL_123;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v77) = 0;
            }
            break;
          }
LABEL_153:
          *((_DWORD *)this + 22) = v77;
          goto LABEL_180;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v24, 0) & 1) == 0)
            return 0;
          goto LABEL_180;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::VisualStateMeasurement::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;
  double *v10;
  double *v11;
  double v12;
  char v13;

  v3 = this;
  if ((*(_BYTE *)(this + 96) & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 80), 1u);
  v4 = *(double **)(v3 + 8);
  v5 = *(double **)(v3 + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  v7 = *(double **)(v3 + 32);
  v8 = *(double **)(v3 + 40);
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::write(a2, v9, 3u);
  }
  v10 = *(double **)(v3 + 56);
  v11 = *(double **)(v3 + 64);
  while (v10 != v11)
  {
    v12 = *v10++;
    this = PB::Writer::write(a2, v12, 4u);
  }
  v13 = *(_BYTE *)(v3 + 96);
  if ((v13 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(_BYTE *)(v3 + 92), 5u);
    v13 = *(_BYTE *)(v3 + 96);
  }
  if ((v13 & 2) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 88), 6u);
  return this;
}

uint64_t CMMsl::VisualStateMeasurement::hash_value(CMMsl::VisualStateMeasurement *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((*((_BYTE *)this + 96) & 1) != 0)
  {
    if (*((double *)this + 10) == 0.0)
      v2 = 0;
    else
      v2 = *((_QWORD *)this + 10);
  }
  else
  {
    v2 = 0;
  }
  v3 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  v4 = PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
  v5 = PBHashBytes(*((_QWORD *)this + 7), *((_QWORD *)this + 8) - *((_QWORD *)this + 7));
  if ((*((_BYTE *)this + 96) & 4) != 0)
  {
    v6 = *((unsigned __int8 *)this + 92);
    if ((*((_BYTE *)this + 96) & 2) != 0)
      goto LABEL_8;
LABEL_10:
    v7 = 0;
    return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7;
  }
  v6 = 0;
  if ((*((_BYTE *)this + 96) & 2) == 0)
    goto LABEL_10;
LABEL_8:
  v7 = *((unsigned int *)this + 22);
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7;
}

void CMMsl::WakeGestureNotification::~WakeGestureNotification(CMMsl::WakeGestureNotification *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::WakeGestureNotification::WakeGestureNotification(CMMsl::WakeGestureNotification *this, const CMMsl::WakeGestureNotification *a2)
{
  char v2;
  char v3;
  double result;
  uint64_t v5;
  int v6;
  int v7;
  char v8;

  *(_QWORD *)this = off_100355298;
  *((_DWORD *)this + 11) = 0;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 2) != 0)
  {
    result = *((double *)a2 + 2);
    v3 = 2;
    *((_BYTE *)this + 44) = 2;
    *((double *)this + 2) = result;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 44) & 4) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 3);
    v3 |= 4u;
    *((_BYTE *)this + 44) = v3;
    *((_QWORD *)this + 3) = v5;
    v2 = *((_BYTE *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    v6 = *((_DWORD *)a2 + 9);
    v3 |= 0x10u;
    *((_BYTE *)this + 44) = v3;
    *((_DWORD *)this + 9) = v6;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 8);
  v3 |= 8u;
  *((_BYTE *)this + 44) = v3;
  *((_DWORD *)this + 8) = v7;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0)
      return result;
LABEL_14:
    result = *((double *)a2 + 1);
    *((_BYTE *)this + 44) = v3 | 1;
    *((double *)this + 1) = result;
    return result;
  }
LABEL_13:
  v8 = *((_BYTE *)a2 + 40);
  v3 |= 0x20u;
  *((_BYTE *)this + 44) = v3;
  *((_BYTE *)this + 40) = v8;
  if ((*((_BYTE *)a2 + 44) & 1) != 0)
    goto LABEL_14;
  return result;
}

uint64_t CMMsl::WakeGestureNotification::operator=(uint64_t a1, const CMMsl::WakeGestureNotification *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;

  if ((const CMMsl::WakeGestureNotification *)a1 != a2)
  {
    CMMsl::WakeGestureNotification::WakeGestureNotification((CMMsl::WakeGestureNotification *)&v8, a2);
    v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v13;
    v13 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v10;
    v10 = v4;
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v11;
    v11 = v5;
    LOBYTE(v4) = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a1 + 40) = v12;
    v12 = v4;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::WakeGestureNotification *a2, CMMsl::WakeGestureNotification *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  LODWORD(v5) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v5;
  LODWORD(v5) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  LOBYTE(v5) = *((_BYTE *)this + 40);
  *((_BYTE *)this + 40) = *((_BYTE *)a2 + 40);
  *((_BYTE *)a2 + 40) = v5;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::WakeGestureNotification::WakeGestureNotification(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100355298;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100355298;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::WakeGestureNotification::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  void (**v11)(CMMsl::WakeGestureNotification *__hidden);
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;

  if (a1 != a2)
  {
    v11 = off_100355298;
    v3 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a2 + 44) = 0;
    v4 = *(_QWORD *)(a2 + 24);
    v5 = *(_BYTE *)(a2 + 40);
    v16 = *(_DWORD *)(a1 + 44);
    v6 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v4;
    v13 = v6;
    v7 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    v14 = v7;
    LOBYTE(v4) = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a1 + 40) = v5;
    v15 = v4;
    v8 = *(_OWORD *)(a1 + 8);
    v9 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 44) = v3;
    *(_OWORD *)(a1 + 8) = v9;
    v12 = v8;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

uint64_t CMMsl::WakeGestureNotification::formatText(CMMsl::WakeGestureNotification *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "gestureType", *((_DWORD *)this + 8));
    v5 = *((_BYTE *)this + 44);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*((_BYTE *)this + 44) & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "hostPowerState", *((_BYTE *)this + 40));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "machContinuousTime", *((double *)this + 1));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 9));
    if ((*((_BYTE *)this + 44) & 4) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "receivedTime", *((double *)this + 2));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 0x10) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 4) != 0)
LABEL_7:
    PB::TextFormatter::format(a2, "timestampPossible", *((_QWORD *)this + 3));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WakeGestureNotification::readFrom(CMMsl::WakeGestureNotification *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  int v39;
  BOOL v40;
  char v41;
  unsigned int v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 44) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_52;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_77;
            case 2u:
              *((_BYTE *)this + 44) |= 4u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v41 = 0;
                v42 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    v25 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_82;
                  }
                  v43 = v21++;
                  v44 = *(_BYTE *)(v22 + v43);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v44 & 0x7F) << v41;
                  if ((v44 & 0x80) == 0)
                    break;
                  v41 += 7;
                  v14 = v42++ > 8;
                  if (v14)
                  {
                    v25 = 0;
LABEL_81:
                    v2 = v43 + 1;
                    goto LABEL_82;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v25 = 0;
                goto LABEL_81;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_82;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              v25 = 0;
LABEL_82:
              *((_QWORD *)this + 3) = v25;
              goto LABEL_93;
            case 3u:
              *((_BYTE *)this + 44) |= 0x10u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v45 = 0;
                v46 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_87;
                  }
                  v47 = v27++;
                  v48 = *(_BYTE *)(v28 + v47);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0)
                    break;
                  v45 += 7;
                  v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_86:
                    v2 = v47 + 1;
                    goto LABEL_87;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_86;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_87;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_87:
              *((_DWORD *)this + 9) = v31;
              goto LABEL_93;
            case 4u:
              *((_BYTE *)this + 44) |= 8u;
              v33 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_92;
                  }
                  v51 = v33++;
                  v52 = *(_BYTE *)(v34 + v51);
                  *((_QWORD *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_91:
                    v2 = v51 + 1;
                    goto LABEL_92;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v37) = 0;
                goto LABEL_91;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)a2 + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_92;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_92:
              *((_DWORD *)this + 8) = v37;
LABEL_93:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 5u:
              *((_BYTE *)this + 44) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v40 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v39 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v40 = v39 != 0;
              }
              *((_BYTE *)this + 40) = v40;
              goto LABEL_93;
            case 6u:
              *((_BYTE *)this + 44) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_77:
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_52:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_93;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_93;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::WakeGestureNotification::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 44);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(this + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 36), 3u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 4u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 8), 6u);
  }
LABEL_12:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 40), 5u);
  if ((*(_BYTE *)(v3 + 44) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8), 6u);
  return this;
}

uint64_t CMMsl::WakeGestureNotification::hash_value(CMMsl::WakeGestureNotification *this)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  if ((*((_BYTE *)this + 44) & 2) != 0)
  {
    v1 = *((double *)this + 2);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 44) & 4) != 0)
    {
LABEL_3:
      v2 = *((_QWORD *)this + 3);
      if ((*((_BYTE *)this + 44) & 0x10) != 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 44) & 4) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 44) & 0x10) != 0)
  {
LABEL_4:
    v3 = *((int *)this + 9);
    if ((*((_BYTE *)this + 44) & 8) != 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  v3 = 0;
  if ((*((_BYTE *)this + 44) & 8) != 0)
  {
LABEL_5:
    v4 = *((int *)this + 8);
    if ((*((_BYTE *)this + 44) & 0x20) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  v4 = 0;
  if ((*((_BYTE *)this + 44) & 0x20) != 0)
  {
LABEL_6:
    v5 = *((unsigned __int8 *)this + 40);
    if ((*((_BYTE *)this + 44) & 1) != 0)
      goto LABEL_7;
LABEL_17:
    v6 = 0.0;
    return v2 ^ *(_QWORD *)&v1 ^ v3 ^ v4 ^ v5 ^ *(_QWORD *)&v6;
  }
LABEL_16:
  v5 = 0;
  if ((*((_BYTE *)this + 44) & 1) == 0)
    goto LABEL_17;
LABEL_7:
  v6 = *((double *)this + 1);
  if (v6 == 0.0)
    v6 = 0.0;
  return v2 ^ *(_QWORD *)&v1 ^ v3 ^ v4 ^ v5 ^ *(_QWORD *)&v6;
}

void CMMsl::WakeGestureSample::~WakeGestureSample(CMMsl::WakeGestureSample *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::WakeGestureSample::WakeGestureSample(uint64_t this, const CMMsl::WakeGestureSample *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  *(_QWORD *)this = off_1003552D0;
  *(_DWORD *)(this + 84) = 0;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x10) != 0)
  {
    v4 = *((_QWORD *)a2 + 5);
    v3 = 16;
    *(_DWORD *)(this + 84) = 16;
    *(_QWORD *)(this + 40) = v4;
    v2 = *((_DWORD *)a2 + 21);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 6);
    v3 |= 0x20u;
    *(_DWORD *)(this + 84) = v3;
    *(_QWORD *)(this + 48) = v5;
    v2 = *((_DWORD *)a2 + 21);
  }
LABEL_6:
  if ((v2 & 0x200) != 0)
  {
    v6 = *((_DWORD *)a2 + 17);
    v3 |= 0x200u;
    *(_DWORD *)(this + 84) = v3;
    *(_DWORD *)(this + 68) = v6;
    v2 = *((_DWORD *)a2 + 21);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x800) == 0)
        goto LABEL_9;
      goto LABEL_25;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 18);
  v3 |= 0x400u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 72) = v7;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x800) == 0)
  {
LABEL_9:
    if ((v2 & 0x10000) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  v8 = *((_BYTE *)a2 + 76);
  v3 |= 0x800u;
  *(_DWORD *)(this + 84) = v3;
  *(_BYTE *)(this + 76) = v8;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x10000) == 0)
  {
LABEL_10:
    if ((v2 & 0x4000) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  v9 = *((_BYTE *)a2 + 81);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 84) = v3;
  *(_BYTE *)(this + 81) = v9;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x4000) == 0)
  {
LABEL_11:
    if ((v2 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  v10 = *((_BYTE *)a2 + 79);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 84) = v3;
  *(_BYTE *)(this + 79) = v10;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x8000) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  v11 = *((_BYTE *)a2 + 80);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 84) = v3;
  *(_BYTE *)(this + 80) = v11;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 0x20000) == 0)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  v12 = *((_BYTE *)a2 + 78);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 84) = v3;
  *(_BYTE *)(this + 78) = v12;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x20000) == 0)
  {
LABEL_14:
    if ((v2 & 0x1000) == 0)
      goto LABEL_15;
    goto LABEL_31;
  }
LABEL_30:
  v13 = *((_BYTE *)a2 + 82);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 84) = v3;
  *(_BYTE *)(this + 82) = v13;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x1000) == 0)
  {
LABEL_15:
    if ((v2 & 2) == 0)
      goto LABEL_16;
    goto LABEL_32;
  }
LABEL_31:
  v14 = *((_BYTE *)a2 + 77);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 84) = v3;
  *(_BYTE *)(this + 77) = v14;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 2) == 0)
  {
LABEL_16:
    if ((v2 & 1) == 0)
      goto LABEL_17;
    goto LABEL_33;
  }
LABEL_32:
  v15 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 84) = v3;
  *(_QWORD *)(this + 16) = v15;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 1) == 0)
  {
LABEL_17:
    if ((v2 & 0x80) == 0)
      goto LABEL_18;
    goto LABEL_34;
  }
LABEL_33:
  v16 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 84) = v3;
  *(_QWORD *)(this + 8) = v16;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x80) == 0)
  {
LABEL_18:
    if ((v2 & 8) == 0)
      goto LABEL_19;
    goto LABEL_35;
  }
LABEL_34:
  v17 = *((_DWORD *)a2 + 15);
  v3 |= 0x80u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 60) = v17;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 8) == 0)
  {
LABEL_19:
    if ((v2 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_36;
  }
LABEL_35:
  v18 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_DWORD *)(this + 84) = v3;
  *(_QWORD *)(this + 32) = v18;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 0x100) == 0)
  {
LABEL_20:
    if ((v2 & 4) == 0)
      goto LABEL_21;
    goto LABEL_37;
  }
LABEL_36:
  v19 = *((_DWORD *)a2 + 16);
  v3 |= 0x100u;
  *(_DWORD *)(this + 84) = v3;
  *(_DWORD *)(this + 64) = v19;
  v2 = *((_DWORD *)a2 + 21);
  if ((v2 & 4) == 0)
  {
LABEL_21:
    if ((v2 & 0x40) == 0)
      return this;
LABEL_38:
    v21 = *((_DWORD *)a2 + 14);
    *(_DWORD *)(this + 84) = v3 | 0x40;
    *(_DWORD *)(this + 56) = v21;
    return this;
  }
LABEL_37:
  v20 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *(_DWORD *)(this + 84) = v3;
  *(_QWORD *)(this + 24) = v20;
  if ((*((_DWORD *)a2 + 21) & 0x40) != 0)
    goto LABEL_38;
  return this;
}

CMMsl *CMMsl::WakeGestureSample::operator=(CMMsl *a1, const CMMsl::WakeGestureSample *a2)
{
  CMMsl::WakeGestureSample *v3;
  _BYTE v5[88];

  if (a1 != a2)
  {
    CMMsl::WakeGestureSample::WakeGestureSample((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::WakeGestureSample *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::WakeGestureSample *a2, CMMsl::WakeGestureSample *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  double result;
  int v14;

  v3 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v3;
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v4;
  v5 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v5;
  v6 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v6;
  v7 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 76);
  *((_BYTE *)this + 76) = *((_BYTE *)a2 + 76);
  *((_BYTE *)a2 + 76) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 81);
  *((_BYTE *)this + 81) = *((_BYTE *)a2 + 81);
  *((_BYTE *)a2 + 81) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 79);
  *((_BYTE *)this + 79) = *((_BYTE *)a2 + 79);
  *((_BYTE *)a2 + 79) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 80);
  *((_BYTE *)this + 80) = *((_BYTE *)a2 + 80);
  *((_BYTE *)a2 + 80) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 78);
  *((_BYTE *)this + 78) = *((_BYTE *)a2 + 78);
  *((_BYTE *)a2 + 78) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 82);
  *((_BYTE *)this + 82) = *((_BYTE *)a2 + 82);
  *((_BYTE *)a2 + 82) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 77);
  *((_BYTE *)this + 77) = *((_BYTE *)a2 + 77);
  *((_BYTE *)a2 + 77) = v7;
  v8 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v8;
  v9 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v9;
  v10 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v10;
  v11 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v11;
  v12 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v12;
  result = *((double *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((double *)a2 + 3) = result;
  v14 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v14;
  return result;
}

double CMMsl::WakeGestureSample::WakeGestureSample(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_1003552D0;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a2 + 84) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  *(_BYTE *)(a1 + 79) = *(_BYTE *)(a2 + 79);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 78) = *(_BYTE *)(a2 + 78);
  *(_BYTE *)(a1 + 82) = *(_BYTE *)(a2 + 82);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return result;
}

CMMsl *CMMsl::WakeGestureSample::operator=(CMMsl *this, uint64_t a2, CMMsl::WakeGestureSample *a3)
{
  __int128 v4;
  void (**v6)(CMMsl::WakeGestureSample *__hidden);
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;
  int v12;
  __int16 v13;
  char v14;
  int v15;

  if (this != (CMMsl *)a2)
  {
    v6 = off_1003552D0;
    v15 = *(_DWORD *)(a2 + 84);
    *(_DWORD *)(a2 + 84) = 0;
    v9 = *(_OWORD *)(a2 + 40);
    v11 = *(_DWORD *)(a2 + 72);
    v13 = *(_WORD *)(a2 + 80);
    v14 = *(_BYTE *)(a2 + 82);
    v12 = *(_DWORD *)(a2 + 76);
    v4 = *(_OWORD *)(a2 + 24);
    v7 = *(_OWORD *)(a2 + 8);
    v8 = v4;
    v10 = *(_OWORD *)(a2 + 56);
    CMMsl::swap(this, (CMMsl::WakeGestureSample *)&v6, a3);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return this;
}

uint64_t CMMsl::WakeGestureSample::formatText(CMMsl::WakeGestureSample *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(a2, "detectionMode", *((_DWORD *)this + 14));
    v5 = *((_DWORD *)this + 21);
    if ((v5 & 0x800) == 0)
    {
LABEL_3:
      if ((v5 & 0x1000) == 0)
        goto LABEL_4;
      goto LABEL_23;
    }
  }
  else if ((v5 & 0x800) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "detectorRunning", *((_BYTE *)this + 76));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x1000) == 0)
  {
LABEL_4:
    if ((v5 & 0x2000) == 0)
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "enableStateDetected", *((_BYTE *)this + 77));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x2000) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0)
      goto LABEL_6;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "fireAll", *((_BYTE *)this + 78));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 0x4000) == 0)
      goto LABEL_7;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "gestureDetectionDelay", *((double *)this + 1));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x4000) == 0)
  {
LABEL_7:
    if ((v5 & 0x8000) == 0)
      goto LABEL_8;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "gyroInUse", *((_BYTE *)this + 79));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x8000) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "hostAwake", *((_BYTE *)this + 80));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 2) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "hostWakeCount", *((_DWORD *)this + 15));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 2) == 0)
  {
LABEL_10:
    if ((v5 & 0x10000) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "hostWakeDelay", *((double *)this + 2));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x10000) == 0)
  {
LABEL_11:
    if ((v5 & 4) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "invertSensors", *((_BYTE *)this + 81));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 4) == 0)
  {
LABEL_12:
    if ((v5 & 8) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "runningModeDuration", *((double *)this + 3));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 8) == 0)
  {
LABEL_13:
    if ((v5 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "runningModeStartTime", *((double *)this + 4));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x100) == 0)
  {
LABEL_14:
    if ((v5 & 0x200) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "runningSwitchCount", *((_DWORD *)this + 16));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x200) == 0)
  {
LABEL_15:
    if ((v5 & 0x10) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 17));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x10) == 0)
  {
LABEL_16:
    if ((v5 & 0x20) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 5));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x20) == 0)
  {
LABEL_17:
    if ((v5 & 0x400) == 0)
      goto LABEL_18;
LABEL_37:
    PB::TextFormatter::format(a2, "type", *((_DWORD *)this + 18));
    if ((*((_DWORD *)this + 21) & 0x20000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_19;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "timestampPossible", *((double *)this + 6));
  v5 = *((_DWORD *)this + 21);
  if ((v5 & 0x400) != 0)
    goto LABEL_37;
LABEL_18:
  if ((v5 & 0x20000) != 0)
LABEL_19:
    PB::TextFormatter::format(a2, "wakePending", *((_BYTE *)this + 82));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WakeGestureSample::readFrom(CMMsl::WakeGestureSample *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  int v35;
  BOOL v36;
  int v37;
  BOOL v38;
  int v39;
  BOOL v40;
  int v41;
  BOOL v42;
  int v43;
  BOOL v44;
  int v45;
  BOOL v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  char v58;
  unint64_t v59;
  uint64_t v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  unint64_t v67;
  char v68;
  char v69;
  unsigned int v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  unint64_t v75;
  char v76;
  char v77;
  unsigned int v78;
  unint64_t v79;
  char v80;
  char v81;
  unsigned int v82;
  unint64_t v83;
  char v84;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 21) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_83;
              *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_141;
            case 2u:
              *((_DWORD *)this + 21) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_83;
              *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_141;
            case 3u:
              *((_DWORD *)this + 21) |= 0x200u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v65 = 0;
                v66 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_146;
                  }
                  v67 = v21++;
                  v68 = *(_BYTE *)(v22 + v67);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0)
                    break;
                  v65 += 7;
                  v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_145:
                    v2 = v67 + 1;
                    goto LABEL_146;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_145;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_146;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_146:
              *((_DWORD *)this + 17) = v25;
              goto LABEL_167;
            case 4u:
              *((_DWORD *)this + 21) |= 0x400u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v69 = 0;
                v70 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_151;
                  }
                  v71 = v27++;
                  v72 = *(_BYTE *)(v28 + v71);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0)
                    break;
                  v69 += 7;
                  v14 = v70++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_150:
                    v2 = v71 + 1;
                    goto LABEL_151;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_150;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_151;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_151:
              *((_DWORD *)this + 18) = v31;
              goto LABEL_167;
            case 5u:
              *((_DWORD *)this + 21) |= 0x800u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v34 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v34 = v33 != 0;
              }
              *((_BYTE *)this + 76) = v34;
              goto LABEL_167;
            case 6u:
              *((_DWORD *)this + 21) |= 0x10000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v36 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v35 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v36 = v35 != 0;
              }
              *((_BYTE *)this + 81) = v36;
              goto LABEL_167;
            case 7u:
              *((_DWORD *)this + 21) |= 0x4000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v38 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v37 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v38 = v37 != 0;
              }
              *((_BYTE *)this + 79) = v38;
              goto LABEL_167;
            case 8u:
              *((_DWORD *)this + 21) |= 0x8000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v40 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v39 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v40 = v39 != 0;
              }
              *((_BYTE *)this + 80) = v40;
              goto LABEL_167;
            case 9u:
              *((_DWORD *)this + 21) |= 0x2000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v42 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v41 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v42 = v41 != 0;
              }
              *((_BYTE *)this + 78) = v42;
              goto LABEL_167;
            case 0xAu:
              *((_DWORD *)this + 21) |= 0x20000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v44 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v43 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v44 = v43 != 0;
              }
              *((_BYTE *)this + 82) = v44;
              goto LABEL_167;
            case 0xBu:
              *((_DWORD *)this + 21) |= 0x1000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v46 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v45 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v46 = v45 != 0;
              }
              *((_BYTE *)this + 77) = v46;
              goto LABEL_167;
            case 0xCu:
              *((_DWORD *)this + 21) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_83;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_141;
            case 0xDu:
              *((_DWORD *)this + 21) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_83;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_141;
            case 0xEu:
              *((_DWORD *)this + 21) |= 0x80u;
              v47 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v48 = *(_QWORD *)a2;
              if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
              {
                v73 = 0;
                v74 = 0;
                v51 = 0;
                if (v2 <= v47)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v47)
                  {
                    LODWORD(v51) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_156;
                  }
                  v75 = v47++;
                  v76 = *(_BYTE *)(v48 + v75);
                  *((_QWORD *)a2 + 1) = v47;
                  v51 |= (unint64_t)(v76 & 0x7F) << v73;
                  if ((v76 & 0x80) == 0)
                    break;
                  v73 += 7;
                  v14 = v74++ > 8;
                  if (v14)
                  {
                    LODWORD(v51) = 0;
LABEL_155:
                    v2 = v75 + 1;
                    goto LABEL_156;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v51) = 0;
                goto LABEL_155;
              }
              v49 = 0;
              v50 = 0;
              v51 = 0;
              do
              {
                v2 = v47 + 1;
                *((_QWORD *)a2 + 1) = v47 + 1;
                v52 = *(_BYTE *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0)
                  goto LABEL_156;
                v49 += 7;
                v47 = v2;
                v14 = v50++ > 8;
              }
              while (!v14);
              LODWORD(v51) = 0;
LABEL_156:
              *((_DWORD *)this + 15) = v51;
              goto LABEL_167;
            case 0xFu:
              *((_DWORD *)this + 21) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_83;
              *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_141;
            case 0x10u:
              *((_DWORD *)this + 21) |= 0x100u;
              v53 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v54 = *(_QWORD *)a2;
              if (v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v2)
              {
                v77 = 0;
                v78 = 0;
                v57 = 0;
                if (v2 <= v53)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v53)
                  {
                    LODWORD(v57) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_161;
                  }
                  v79 = v53++;
                  v80 = *(_BYTE *)(v54 + v79);
                  *((_QWORD *)a2 + 1) = v53;
                  v57 |= (unint64_t)(v80 & 0x7F) << v77;
                  if ((v80 & 0x80) == 0)
                    break;
                  v77 += 7;
                  v14 = v78++ > 8;
                  if (v14)
                  {
                    LODWORD(v57) = 0;
LABEL_160:
                    v2 = v79 + 1;
                    goto LABEL_161;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v57) = 0;
                goto LABEL_160;
              }
              v55 = 0;
              v56 = 0;
              v57 = 0;
              do
              {
                v2 = v53 + 1;
                *((_QWORD *)a2 + 1) = v53 + 1;
                v58 = *(_BYTE *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0)
                  goto LABEL_161;
                v55 += 7;
                v53 = v2;
                v14 = v56++ > 8;
              }
              while (!v14);
              LODWORD(v57) = 0;
LABEL_161:
              *((_DWORD *)this + 16) = v57;
              goto LABEL_167;
            case 0x11u:
              *((_DWORD *)this + 21) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_141:
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_83:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_167;
            case 0x12u:
              *((_DWORD *)this + 21) |= 0x40u;
              v59 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v60 = *(_QWORD *)a2;
              if (v59 > 0xFFFFFFFFFFFFFFF5 || v59 + 10 > v2)
              {
                v81 = 0;
                v82 = 0;
                v63 = 0;
                if (v2 <= v59)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v59)
                  {
                    LODWORD(v63) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_166;
                  }
                  v83 = v59++;
                  v84 = *(_BYTE *)(v60 + v83);
                  *((_QWORD *)a2 + 1) = v59;
                  v63 |= (unint64_t)(v84 & 0x7F) << v81;
                  if ((v84 & 0x80) == 0)
                    break;
                  v81 += 7;
                  v14 = v82++ > 8;
                  if (v14)
                  {
                    LODWORD(v63) = 0;
LABEL_165:
                    v2 = v83 + 1;
                    goto LABEL_166;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v63) = 0;
                goto LABEL_165;
              }
              v61 = 0;
              v62 = 0;
              v63 = 0;
              do
              {
                v2 = v59 + 1;
                *((_QWORD *)a2 + 1) = v59 + 1;
                v64 = *(_BYTE *)(v60 + v59);
                v63 |= (unint64_t)(v64 & 0x7F) << v61;
                if ((v64 & 0x80) == 0)
                  goto LABEL_166;
                v61 += 7;
                v59 = v2;
                v14 = v62++ > 8;
              }
              while (!v14);
              LODWORD(v63) = 0;
LABEL_166:
              *((_DWORD *)this + 14) = v63;
LABEL_167:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_167;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::WakeGestureSample::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 84);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 40), 1u);
    v4 = *(_DWORD *)(v3 + 84);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0)
        goto LABEL_4;
      goto LABEL_22;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 2u);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 68), 3u);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 72), 4u);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x10000) == 0)
      goto LABEL_7;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 76), 5u);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x10000) == 0)
  {
LABEL_7:
    if ((v4 & 0x4000) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 81), 6u);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x4000) == 0)
  {
LABEL_8:
    if ((v4 & 0x8000) == 0)
      goto LABEL_9;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 79), 7u);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x8000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 80), 8u);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x20000) == 0)
      goto LABEL_11;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 78), 9u);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x20000) == 0)
  {
LABEL_11:
    if ((v4 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 82), 0xAu);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x1000) == 0)
  {
LABEL_12:
    if ((v4 & 2) == 0)
      goto LABEL_13;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 77), 0xBu);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 2) == 0)
  {
LABEL_13:
    if ((v4 & 1) == 0)
      goto LABEL_14;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 0xCu);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 1) == 0)
  {
LABEL_14:
    if ((v4 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 0xDu);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x80) == 0)
  {
LABEL_15:
    if ((v4 & 8) == 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 60), 0xEu);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 8) == 0)
  {
LABEL_16:
    if ((v4 & 0x100) == 0)
      goto LABEL_17;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 0xFu);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x100) == 0)
  {
LABEL_17:
    if ((v4 & 4) == 0)
      goto LABEL_18;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 64), 0x10u);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 4) == 0)
  {
LABEL_18:
    if ((v4 & 0x40) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 56), 0x12u);
  }
LABEL_36:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 0x11u);
  if ((*(_DWORD *)(v3 + 84) & 0x40) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 56), 0x12u);
  return this;
}

uint64_t CMMsl::WakeGestureSample::hash_value(CMMsl::WakeGestureSample *this)
{
  int v1;
  double v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  double v18;
  uint64_t v19;

  v1 = *((_DWORD *)this + 21);
  if ((v1 & 0x10) == 0)
  {
    v2 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_3;
LABEL_33:
    v3 = 0.0;
    if ((v1 & 0x200) != 0)
      goto LABEL_6;
    goto LABEL_34;
  }
  v2 = *((double *)this + 5);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_33;
LABEL_3:
  v3 = *((double *)this + 6);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 0x200) != 0)
  {
LABEL_6:
    v4 = *((int *)this + 17);
    if ((v1 & 0x400) != 0)
      goto LABEL_7;
    goto LABEL_35;
  }
LABEL_34:
  v4 = 0;
  if ((v1 & 0x400) != 0)
  {
LABEL_7:
    v5 = *((int *)this + 18);
    if ((v1 & 0x800) != 0)
      goto LABEL_8;
    goto LABEL_36;
  }
LABEL_35:
  v5 = 0;
  if ((v1 & 0x800) != 0)
  {
LABEL_8:
    v6 = *((unsigned __int8 *)this + 76);
    if ((v1 & 0x10000) != 0)
      goto LABEL_9;
    goto LABEL_37;
  }
LABEL_36:
  v6 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_9:
    v7 = *((unsigned __int8 *)this + 81);
    if ((v1 & 0x4000) != 0)
      goto LABEL_10;
    goto LABEL_38;
  }
LABEL_37:
  v7 = 0;
  if ((v1 & 0x4000) != 0)
  {
LABEL_10:
    v8 = *((unsigned __int8 *)this + 79);
    if ((v1 & 0x8000) != 0)
      goto LABEL_11;
    goto LABEL_39;
  }
LABEL_38:
  v8 = 0;
  if ((v1 & 0x8000) != 0)
  {
LABEL_11:
    v9 = *((unsigned __int8 *)this + 80);
    if ((v1 & 0x2000) != 0)
      goto LABEL_12;
    goto LABEL_40;
  }
LABEL_39:
  v9 = 0;
  if ((v1 & 0x2000) != 0)
  {
LABEL_12:
    v10 = *((unsigned __int8 *)this + 78);
    if ((v1 & 0x20000) != 0)
      goto LABEL_13;
    goto LABEL_41;
  }
LABEL_40:
  v10 = 0;
  if ((v1 & 0x20000) != 0)
  {
LABEL_13:
    v11 = *((unsigned __int8 *)this + 82);
    if ((v1 & 0x1000) != 0)
      goto LABEL_14;
    goto LABEL_42;
  }
LABEL_41:
  v11 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_14:
    v12 = *((unsigned __int8 *)this + 77);
    if ((v1 & 2) != 0)
      goto LABEL_15;
LABEL_43:
    v13 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_18;
LABEL_44:
    v14 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_21;
    goto LABEL_45;
  }
LABEL_42:
  v12 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_43;
LABEL_15:
  v13 = *((double *)this + 2);
  if (v13 == 0.0)
    v13 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_44;
LABEL_18:
  v14 = *((double *)this + 1);
  if (v14 == 0.0)
    v14 = 0.0;
  if ((v1 & 0x80) != 0)
  {
LABEL_21:
    v15 = *((int *)this + 15);
    if ((v1 & 8) != 0)
      goto LABEL_22;
LABEL_46:
    v16 = 0.0;
    if ((v1 & 0x100) != 0)
      goto LABEL_25;
    goto LABEL_47;
  }
LABEL_45:
  v15 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_46;
LABEL_22:
  v16 = *((double *)this + 4);
  if (v16 == 0.0)
    v16 = 0.0;
  if ((v1 & 0x100) != 0)
  {
LABEL_25:
    v17 = *((int *)this + 16);
    if ((v1 & 4) != 0)
      goto LABEL_26;
    goto LABEL_48;
  }
LABEL_47:
  v17 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_26:
    v18 = *((double *)this + 3);
    if (v18 == 0.0)
      v18 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_29;
LABEL_49:
    v19 = 0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ v15 ^ *(_QWORD *)&v16 ^ v17 ^ *(_QWORD *)&v18 ^ v19;
  }
LABEL_48:
  v18 = 0.0;
  if ((v1 & 0x40) == 0)
    goto LABEL_49;
LABEL_29:
  v19 = *((int *)this + 14);
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ v15 ^ *(_QWORD *)&v16 ^ v17 ^ *(_QWORD *)&v18 ^ v19;
}

void CMMsl::WalkingDetectionResult::~WalkingDetectionResult(CMMsl::WalkingDetectionResult *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::WalkingDetectionResult::WalkingDetectionResult(uint64_t this, const CMMsl::WalkingDetectionResult *a2)
{
  __int16 v2;
  __int16 v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  char v15;
  int v16;
  int v17;
  int v18;

  *(_QWORD *)this = off_100355308;
  *(_DWORD *)(this + 60) = 0;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 8) != 0)
  {
    v4 = *((_DWORD *)a2 + 6);
    v3 = 8;
    *(_WORD *)(this + 60) = 8;
    *(_DWORD *)(this + 24) = v4;
    v2 = *((_WORD *)a2 + 30);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 7);
    v3 |= 0x10u;
    *(_WORD *)(this + 60) = v3;
    *(_DWORD *)(this + 28) = v5;
    v2 = *((_WORD *)a2 + 30);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    v6 = *((_DWORD *)a2 + 8);
    v3 |= 0x20u;
    *(_WORD *)(this + 60) = v3;
    *(_DWORD *)(this + 32) = v6;
    v2 = *((_WORD *)a2 + 30);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0)
        goto LABEL_9;
      goto LABEL_22;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 36) = v7;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  v8 = *((_DWORD *)a2 + 12);
  v3 |= 0x200u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 48) = v8;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  v9 = *((_DWORD *)a2 + 11);
  v3 |= 0x100u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 44) = v9;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 0x4000) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  v10 = *((_DWORD *)a2 + 13);
  v3 |= 0x400u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 52) = v10;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x4000) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  v11 = *((_BYTE *)a2 + 59);
  v3 |= 0x4000u;
  *(_WORD *)(this + 60) = v3;
  *(_BYTE *)(this + 59) = v11;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_27;
  }
LABEL_26:
  v12 = *((_BYTE *)a2 + 58);
  v3 |= 0x2000u;
  *(_WORD *)(this + 60) = v3;
  *(_BYTE *)(this + 58) = v12;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x1000) == 0)
  {
LABEL_14:
    if ((v2 & 1) == 0)
      goto LABEL_15;
    goto LABEL_28;
  }
LABEL_27:
  v13 = *((_BYTE *)a2 + 57);
  v3 |= 0x1000u;
  *(_WORD *)(this + 60) = v3;
  *(_BYTE *)(this + 57) = v13;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 1) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_29;
  }
LABEL_28:
  v14 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 60) = v3;
  *(_QWORD *)(this + 8) = v14;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x800) == 0)
  {
LABEL_16:
    if ((v2 & 2) == 0)
      goto LABEL_17;
    goto LABEL_30;
  }
LABEL_29:
  v15 = *((_BYTE *)a2 + 56);
  v3 |= 0x800u;
  *(_WORD *)(this + 60) = v3;
  *(_BYTE *)(this + 56) = v15;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 2) == 0)
  {
LABEL_17:
    if ((v2 & 4) == 0)
      goto LABEL_18;
    goto LABEL_31;
  }
LABEL_30:
  v16 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 16) = v16;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 4) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0)
      return this;
LABEL_32:
    v18 = *((_DWORD *)a2 + 10);
    *(_WORD *)(this + 60) = v3 | 0x80;
    *(_DWORD *)(this + 40) = v18;
    return this;
  }
LABEL_31:
  v17 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 20) = v17;
  if ((*((_WORD *)a2 + 30) & 0x80) != 0)
    goto LABEL_32;
  return this;
}

CMMsl *CMMsl::WalkingDetectionResult::operator=(CMMsl *a1, const CMMsl::WalkingDetectionResult *a2)
{
  CMMsl::WalkingDetectionResult *v3;
  _BYTE v5[64];

  if (a1 != a2)
  {
    CMMsl::WalkingDetectionResult::WalkingDetectionResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::WalkingDetectionResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::WalkingDetectionResult *a2, CMMsl::WalkingDetectionResult *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  float result;

  v3 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  v4 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  v5 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v5;
  v6 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6;
  v7 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v7;
  v8 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v8;
  v9 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v9;
  v10 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v10;
  LOBYTE(v3) = *((_BYTE *)this + 59);
  *((_BYTE *)this + 59) = *((_BYTE *)a2 + 59);
  *((_BYTE *)a2 + 59) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 58);
  *((_BYTE *)this + 58) = *((_BYTE *)a2 + 58);
  *((_BYTE *)a2 + 58) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 57);
  *((_BYTE *)this + 57) = *((_BYTE *)a2 + 57);
  *((_BYTE *)a2 + 57) = v3;
  v11 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v11;
  LOBYTE(v11) = *((_BYTE *)this + 56);
  *((_BYTE *)this + 56) = *((_BYTE *)a2 + 56);
  *((_BYTE *)a2 + 56) = v11;
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  result = *((float *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((float *)a2 + 5) = result;
  LODWORD(v11) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v11;
  return result;
}

float CMMsl::WalkingDetectionResult::WalkingDetectionResult(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100355308;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_BYTE *)(a1 + 59) = *(_BYTE *)(a2 + 59);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

CMMsl *CMMsl::WalkingDetectionResult::operator=(CMMsl *this, uint64_t a2, CMMsl::WalkingDetectionResult *a3)
{
  uint64_t v4;
  int v5;
  _QWORD v7[2];
  __int128 v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;

  if (this != (CMMsl *)a2)
  {
    v14 = *(_DWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 60) = 0;
    v9 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 44);
    v12 = *(_DWORD *)(a2 + 52);
    v4 = *(_QWORD *)(a2 + 8);
    v7[0] = off_100355308;
    v7[1] = v4;
    v5 = *(_DWORD *)(a2 + 56);
    v8 = *(_OWORD *)(a2 + 16);
    LODWORD(v4) = *(_DWORD *)(a2 + 40);
    v13 = v5;
    v10 = v4;
    CMMsl::swap(this, (CMMsl::WalkingDetectionResult *)v7, a3);
    PB::Base::~Base((PB::Base *)v7);
  }
  return this;
}

uint64_t CMMsl::WalkingDetectionResult::formatText(CMMsl::WalkingDetectionResult *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 30);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "dataRate", *((float *)this + 4));
    v5 = *((_WORD *)this + 30);
    if ((v5 & 0x800) == 0)
    {
LABEL_3:
      if ((v5 & 0x1000) == 0)
        goto LABEL_4;
      goto LABEL_20;
    }
  }
  else if ((*((_WORD *)this + 30) & 0x800) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "isInterpolated", *((_BYTE *)this + 56));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x1000) == 0)
  {
LABEL_4:
    if ((v5 & 0x2000) == 0)
      goto LABEL_5;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "isMissingSamples", *((_BYTE *)this + 57));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x2000) == 0)
  {
LABEL_5:
    if ((v5 & 0x4000) == 0)
      goto LABEL_6;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "isWalkingFiltered", *((_BYTE *)this + 58));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x4000) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0)
      goto LABEL_7;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "isWalkingRaw", *((_BYTE *)this + 59));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "maxSampleDeltaInSecond", *((float *)this + 5));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "pedEnergyPlane", *((float *)this + 6));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "pedEnergyZ", *((float *)this + 7));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "pedEnergyZByPlane", *((float *)this + 8));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "pedEnergyZPeak", *((float *)this + 9));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x80) == 0)
  {
LABEL_12:
    if ((v5 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "reversedTimestampCounts", *((_DWORD *)this + 10));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x100) == 0)
  {
LABEL_13:
    if ((v5 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "thetaPitchFaceDeg", *((float *)this + 11));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x200) == 0)
  {
LABEL_14:
    if ((v5 & 0x400) == 0)
      goto LABEL_15;
LABEL_31:
    PB::TextFormatter::format(a2, "thetaYawFaceDeg", *((float *)this + 13));
    if ((*((_WORD *)this + 30) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_16;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "thetaRollFaceDeg", *((float *)this + 12));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x400) != 0)
    goto LABEL_31;
LABEL_15:
  if ((v5 & 1) != 0)
LABEL_16:
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WalkingDetectionResult::readFrom(CMMsl::WalkingDetectionResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  char v41;
  unsigned int v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 30) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_65;
              *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_96;
            case 2u:
              *((_WORD *)this + 30) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_65;
              *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_96;
            case 3u:
              *((_WORD *)this + 30) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_65;
              *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_96;
            case 4u:
              *((_WORD *)this + 30) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_65;
              *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_96;
            case 5u:
              *((_WORD *)this + 30) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_65;
              *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_96;
            case 6u:
              *((_WORD *)this + 30) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_65;
              *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_96;
            case 7u:
              *((_WORD *)this + 30) |= 0x400u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_65;
              *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_96;
            case 8u:
              *((_WORD *)this + 30) |= 0x4000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v22 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v22 = v21 != 0;
              }
              *((_BYTE *)this + 59) = v22;
              goto LABEL_107;
            case 9u:
              *((_WORD *)this + 30) |= 0x2000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v24 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v23 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v24 = v23 != 0;
              }
              *((_BYTE *)this + 58) = v24;
              goto LABEL_107;
            case 0xAu:
              *((_WORD *)this + 30) |= 0x1000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v26 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v25 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v26 = v25 != 0;
              }
              *((_BYTE *)this + 57) = v26;
              goto LABEL_107;
            case 0xBu:
              *((_WORD *)this + 30) |= 1u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v41 = 0;
                v42 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_101;
                  }
                  v43 = v27++;
                  v44 = *(_BYTE *)(v28 + v43);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v44 & 0x7F) << v41;
                  if ((v44 & 0x80) == 0)
                    break;
                  v41 += 7;
                  v14 = v42++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_100:
                    v2 = v43 + 1;
                    goto LABEL_101;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v31 = 0;
                goto LABEL_100;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_101;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_101:
              *((_QWORD *)this + 1) = v31;
              goto LABEL_107;
            case 0xCu:
              *((_WORD *)this + 30) |= 0x800u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v34 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v34 = v33 != 0;
              }
              *((_BYTE *)this + 56) = v34;
              goto LABEL_107;
            case 0xDu:
              *((_WORD *)this + 30) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_65;
              *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_96;
            case 0xEu:
              *((_WORD *)this + 30) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_96:
                v2 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_65:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_107;
            case 0xFu:
              *((_WORD *)this + 30) |= 0x80u;
              v35 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v36 = *(_QWORD *)a2;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                v45 = 0;
                v46 = 0;
                v39 = 0;
                if (v2 <= v35)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_106;
                  }
                  v47 = v35++;
                  v48 = *(_BYTE *)(v36 + v47);
                  *((_QWORD *)a2 + 1) = v35;
                  v39 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0)
                    break;
                  v45 += 7;
                  v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_105:
                    v2 = v47 + 1;
                    goto LABEL_106;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v39) = 0;
                goto LABEL_105;
              }
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v2 = v35 + 1;
                *((_QWORD *)a2 + 1) = v35 + 1;
                v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0)
                  goto LABEL_106;
                v37 += 7;
                v35 = v2;
                v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_106:
              *((_DWORD *)this + 10) = v39;
LABEL_107:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_107;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::WalkingDetectionResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 60);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 24), 1u);
    v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 2u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 3u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 4u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 5u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 6u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 0x4000) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 7u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x4000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 59), 8u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x1000) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 58), 9u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x1000) == 0)
  {
LABEL_11:
    if ((v4 & 1) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 57), 0xAu);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 1) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 8), 0xBu);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 2) == 0)
      goto LABEL_14;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 56), 0xCu);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 2) == 0)
  {
LABEL_14:
    if ((v4 & 4) == 0)
      goto LABEL_15;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 0xDu);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 0xFu);
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 0xEu);
  if ((*(_WORD *)(v3 + 60) & 0x80) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 0xFu);
  return this;
}

uint64_t CMMsl::WalkingDetectionResult::hash_value(CMMsl::WalkingDetectionResult *this)
{
  __int16 v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  float v25;

  v1 = *((_WORD *)this + 30);
  if ((v1 & 8) == 0)
  {
    v2 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_3;
LABEL_36:
    v4 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_6;
LABEL_37:
    v6 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_9;
LABEL_38:
    v8 = 0;
    if ((*((_WORD *)this + 30) & 0x200) != 0)
      goto LABEL_12;
LABEL_39:
    v10 = 0;
    if ((*((_WORD *)this + 30) & 0x100) != 0)
      goto LABEL_15;
LABEL_40:
    v12 = 0;
    if ((*((_WORD *)this + 30) & 0x400) != 0)
      goto LABEL_18;
LABEL_41:
    v14 = 0;
    if ((*((_WORD *)this + 30) & 0x4000) != 0)
      goto LABEL_21;
    goto LABEL_42;
  }
  v25 = *((float *)this + 6);
  v2 = LODWORD(v25);
  if (v25 == 0.0)
    v2 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_36;
LABEL_3:
  v3 = *((float *)this + 7);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_37;
LABEL_6:
  v5 = *((float *)this + 8);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_38;
LABEL_9:
  v7 = *((float *)this + 9);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((*((_WORD *)this + 30) & 0x200) == 0)
    goto LABEL_39;
LABEL_12:
  v9 = *((float *)this + 12);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((*((_WORD *)this + 30) & 0x100) == 0)
    goto LABEL_40;
LABEL_15:
  v11 = *((float *)this + 11);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((*((_WORD *)this + 30) & 0x400) == 0)
    goto LABEL_41;
LABEL_18:
  v13 = *((float *)this + 13);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((*((_WORD *)this + 30) & 0x4000) != 0)
  {
LABEL_21:
    v15 = *((unsigned __int8 *)this + 59);
    if ((*((_WORD *)this + 30) & 0x2000) != 0)
      goto LABEL_22;
    goto LABEL_43;
  }
LABEL_42:
  v15 = 0;
  if ((*((_WORD *)this + 30) & 0x2000) != 0)
  {
LABEL_22:
    v16 = *((unsigned __int8 *)this + 58);
    if ((*((_WORD *)this + 30) & 0x1000) != 0)
      goto LABEL_23;
    goto LABEL_44;
  }
LABEL_43:
  v16 = 0;
  if ((*((_WORD *)this + 30) & 0x1000) != 0)
  {
LABEL_23:
    v17 = *((unsigned __int8 *)this + 57);
    if ((v1 & 1) != 0)
      goto LABEL_24;
    goto LABEL_45;
  }
LABEL_44:
  v17 = 0;
  if ((v1 & 1) != 0)
  {
LABEL_24:
    v18 = *((_QWORD *)this + 1);
    if ((*((_WORD *)this + 30) & 0x800) != 0)
      goto LABEL_25;
    goto LABEL_46;
  }
LABEL_45:
  v18 = 0;
  if ((*((_WORD *)this + 30) & 0x800) != 0)
  {
LABEL_25:
    v19 = *((unsigned __int8 *)this + 56);
    if ((v1 & 2) != 0)
      goto LABEL_26;
LABEL_47:
    v21 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_29;
    goto LABEL_48;
  }
LABEL_46:
  v19 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_47;
LABEL_26:
  v20 = *((float *)this + 4);
  v21 = LODWORD(v20);
  if (v20 == 0.0)
    v21 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_29:
    v22 = *((float *)this + 5);
    v23 = LODWORD(v22);
    if (v22 == 0.0)
      v23 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_32;
LABEL_49:
    v24 = 0;
    return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v21 ^ v23 ^ v24;
  }
LABEL_48:
  v23 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_49;
LABEL_32:
  v24 = *((unsigned int *)this + 10);
  return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v21 ^ v23 ^ v24;
}

void CMMsl::WalkingSteadinessClassification::~WalkingSteadinessClassification(CMMsl::WalkingSteadinessClassification *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)this = off_100355340;
  v2 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  PB::Base::~Base(this);
}

{
  CMMsl::WalkingSteadinessClassification::~WalkingSteadinessClassification(this);
  operator delete();
}

uint64_t CMMsl::WalkingSteadinessClassification::WalkingSteadinessClassification(uint64_t this, const CMMsl::WalkingSteadinessClassification *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  int v7;
  char v8;
  char v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  char v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;

  *(_QWORD *)this = off_100355340;
  *(_QWORD *)(this + 64) = 0;
  *(_OWORD *)(this + 88) = 0u;
  *(_DWORD *)(this + 244) = 0;
  *(_OWORD *)(this + 104) = 0u;
  *(_OWORD *)(this + 120) = 0u;
  *(_OWORD *)(this + 136) = 0u;
  *(_OWORD *)(this + 152) = 0u;
  *(_QWORD *)(this + 168) = 0;
  v2 = *((_DWORD *)a2 + 61);
  if ((v2 & 0x100) != 0)
  {
    v4 = *((_QWORD *)a2 + 10);
    v3 = 256;
    *(_DWORD *)(this + 244) = 256;
    *(_QWORD *)(this + 80) = v4;
    v2 = *((_DWORD *)a2 + 61);
    if ((v2 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 9);
    v3 |= 0x80u;
    *(_DWORD *)(this + 244) = v3;
    *(_QWORD *)(this + 72) = v5;
    v2 = *((_DWORD *)a2 + 61);
  }
LABEL_6:
  if ((v2 & 0x10000) != 0)
  {
    v12 = *((_DWORD *)a2 + 55);
    v3 |= 0x10000u;
    *(_DWORD *)(this + 244) = v3;
    *(_DWORD *)(this + 220) = v12;
    v2 = *((_DWORD *)a2 + 61);
    if ((v2 & 0x8000) == 0)
    {
LABEL_8:
      if ((v2 & 0x40000) == 0)
        goto LABEL_9;
      goto LABEL_62;
    }
  }
  else if ((v2 & 0x8000) == 0)
  {
    goto LABEL_8;
  }
  v13 = *((_DWORD *)a2 + 54);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 244) = v3;
  *(_DWORD *)(this + 216) = v13;
  v2 = *((_DWORD *)a2 + 61);
  if ((v2 & 0x40000) == 0)
  {
LABEL_9:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_10;
    goto LABEL_63;
  }
LABEL_62:
  v14 = *((_DWORD *)a2 + 57);
  v3 |= 0x40000u;
  *(_DWORD *)(this + 244) = v3;
  *(_DWORD *)(this + 228) = v14;
  v2 = *((_DWORD *)a2 + 61);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_10:
    if ((v2 & 0x80000) == 0)
      goto LABEL_11;
    goto LABEL_64;
  }
LABEL_63:
  v15 = *((_BYTE *)a2 + 241);
  v3 |= 0x2000000u;
  *(_DWORD *)(this + 244) = v3;
  *(_BYTE *)(this + 241) = v15;
  v2 = *((_DWORD *)a2 + 61);
  if ((v2 & 0x80000) == 0)
  {
LABEL_11:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_12;
    goto LABEL_65;
  }
LABEL_64:
  v16 = *((_DWORD *)a2 + 58);
  v3 |= 0x80000u;
  *(_DWORD *)(this + 244) = v3;
  *(_DWORD *)(this + 232) = v16;
  v2 = *((_DWORD *)a2 + 61);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_66;
  }
LABEL_65:
  v17 = *((_BYTE *)a2 + 242);
  v3 |= 0x4000000u;
  *(_DWORD *)(this + 244) = v3;
  *(_BYTE *)(this + 242) = v17;
  v2 = *((_DWORD *)a2 + 61);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x400000) == 0)
      goto LABEL_15;
    goto LABEL_14;
  }
LABEL_66:
  v18 = *((_QWORD *)a2 + 22);
  v3 |= 0x200u;
  *(_DWORD *)(this + 244) = v3;
  *(_QWORD *)(this + 176) = v18;
  if ((*((_DWORD *)a2 + 61) & 0x400000) != 0)
  {
LABEL_14:
    v6 = *((_BYTE *)a2 + 238);
    *(_DWORD *)(this + 244) = v3 | 0x400000;
    *(_BYTE *)(this + 238) = v6;
  }
LABEL_15:
  if (*((_QWORD *)a2 + 8))
    operator new();
  v7 = *((_DWORD *)a2 + 61);
  if ((v7 & 0x800) != 0)
  {
    v19 = *((_QWORD *)a2 + 24);
    *(_DWORD *)(this + 244) |= 0x800u;
    *(_QWORD *)(this + 192) = v19;
    v7 = *((_DWORD *)a2 + 61);
    if ((v7 & 0x800000) == 0)
    {
LABEL_19:
      if ((v7 & 0x400) == 0)
        goto LABEL_20;
      goto LABEL_70;
    }
  }
  else if ((v7 & 0x800000) == 0)
  {
    goto LABEL_19;
  }
  v20 = *((_BYTE *)a2 + 239);
  *(_DWORD *)(this + 244) |= 0x800000u;
  *(_BYTE *)(this + 239) = v20;
  v7 = *((_DWORD *)a2 + 61);
  if ((v7 & 0x400) == 0)
  {
LABEL_20:
    if ((v7 & 0x200000) == 0)
      goto LABEL_22;
    goto LABEL_21;
  }
LABEL_70:
  v21 = *((_QWORD *)a2 + 23);
  *(_DWORD *)(this + 244) |= 0x400u;
  *(_QWORD *)(this + 184) = v21;
  if ((*((_DWORD *)a2 + 61) & 0x200000) != 0)
  {
LABEL_21:
    v8 = *((_BYTE *)a2 + 237);
    *(_DWORD *)(this + 244) |= 0x200000u;
    *(_BYTE *)(this + 237) = v8;
  }
LABEL_22:
  if (*((_QWORD *)a2 + 15))
    operator new();
  if (*((_QWORD *)a2 + 14))
    operator new();
  if (*((_QWORD *)a2 + 13))
    operator new();
  if (*((_QWORD *)a2 + 12))
    operator new();
  if (*((_QWORD *)a2 + 19))
    operator new();
  if (*((_QWORD *)a2 + 18))
    operator new();
  if (*((_QWORD *)a2 + 21))
    operator new();
  if (*((_QWORD *)a2 + 20))
    operator new();
  if ((*((_BYTE *)a2 + 246) & 0x10) != 0)
  {
    v9 = *((_BYTE *)a2 + 236);
    *(_DWORD *)(this + 244) |= 0x100000u;
    *(_BYTE *)(this + 236) = v9;
  }
  if (*((_QWORD *)a2 + 11))
    operator new();
  v10 = *((_DWORD *)a2 + 61);
  if ((v10 & 1) != 0)
  {
    v22 = *((_QWORD *)a2 + 1);
    *(_DWORD *)(this + 244) |= 1u;
    *(_QWORD *)(this + 8) = v22;
    v10 = *((_DWORD *)a2 + 61);
    if ((v10 & 8) == 0)
    {
LABEL_44:
      if ((v10 & 0x20000) == 0)
        goto LABEL_45;
      goto LABEL_74;
    }
  }
  else if ((v10 & 8) == 0)
  {
    goto LABEL_44;
  }
  v23 = *((_QWORD *)a2 + 4);
  *(_DWORD *)(this + 244) |= 8u;
  *(_QWORD *)(this + 32) = v23;
  v10 = *((_DWORD *)a2 + 61);
  if ((v10 & 0x20000) == 0)
  {
LABEL_45:
    if ((v10 & 0x1000000) == 0)
      goto LABEL_46;
    goto LABEL_75;
  }
LABEL_74:
  v24 = *((_DWORD *)a2 + 56);
  *(_DWORD *)(this + 244) |= 0x20000u;
  *(_DWORD *)(this + 224) = v24;
  v10 = *((_DWORD *)a2 + 61);
  if ((v10 & 0x1000000) == 0)
  {
LABEL_46:
    if ((v10 & 0x1000) == 0)
      goto LABEL_47;
    goto LABEL_76;
  }
LABEL_75:
  v25 = *((_BYTE *)a2 + 240);
  *(_DWORD *)(this + 244) |= 0x1000000u;
  *(_BYTE *)(this + 240) = v25;
  v10 = *((_DWORD *)a2 + 61);
  if ((v10 & 0x1000) == 0)
  {
LABEL_47:
    if ((v10 & 0x40) == 0)
      goto LABEL_48;
    goto LABEL_77;
  }
LABEL_76:
  v26 = *((_QWORD *)a2 + 25);
  *(_DWORD *)(this + 244) |= 0x1000u;
  *(_QWORD *)(this + 200) = v26;
  v10 = *((_DWORD *)a2 + 61);
  if ((v10 & 0x40) == 0)
  {
LABEL_48:
    if ((v10 & 2) == 0)
      goto LABEL_49;
    goto LABEL_78;
  }
LABEL_77:
  v27 = *((_QWORD *)a2 + 7);
  *(_DWORD *)(this + 244) |= 0x40u;
  *(_QWORD *)(this + 56) = v27;
  v10 = *((_DWORD *)a2 + 61);
  if ((v10 & 2) == 0)
  {
LABEL_49:
    if ((v10 & 0x10) == 0)
      goto LABEL_50;
    goto LABEL_79;
  }
LABEL_78:
  v28 = *((_QWORD *)a2 + 2);
  *(_DWORD *)(this + 244) |= 2u;
  *(_QWORD *)(this + 16) = v28;
  v10 = *((_DWORD *)a2 + 61);
  if ((v10 & 0x10) == 0)
  {
LABEL_50:
    if ((v10 & 0x4000) == 0)
      goto LABEL_51;
    goto LABEL_80;
  }
LABEL_79:
  v29 = *((_QWORD *)a2 + 5);
  *(_DWORD *)(this + 244) |= 0x10u;
  *(_QWORD *)(this + 40) = v29;
  v10 = *((_DWORD *)a2 + 61);
  if ((v10 & 0x4000) == 0)
  {
LABEL_51:
    if ((v10 & 0x2000) == 0)
      goto LABEL_52;
    goto LABEL_81;
  }
LABEL_80:
  v30 = *((_DWORD *)a2 + 53);
  *(_DWORD *)(this + 244) |= 0x4000u;
  *(_DWORD *)(this + 212) = v30;
  v10 = *((_DWORD *)a2 + 61);
  if ((v10 & 0x2000) == 0)
  {
LABEL_52:
    if ((v10 & 0x20) == 0)
      goto LABEL_53;
    goto LABEL_82;
  }
LABEL_81:
  v31 = *((_DWORD *)a2 + 52);
  *(_DWORD *)(this + 244) |= 0x2000u;
  *(_DWORD *)(this + 208) = v31;
  v10 = *((_DWORD *)a2 + 61);
  if ((v10 & 0x20) == 0)
  {
LABEL_53:
    if ((v10 & 4) == 0)
      goto LABEL_55;
    goto LABEL_54;
  }
LABEL_82:
  v32 = *((_QWORD *)a2 + 6);
  *(_DWORD *)(this + 244) |= 0x20u;
  *(_QWORD *)(this + 48) = v32;
  if ((*((_DWORD *)a2 + 61) & 4) != 0)
  {
LABEL_54:
    v11 = *((_QWORD *)a2 + 3);
    *(_DWORD *)(this + 244) |= 4u;
    *(_QWORD *)(this + 24) = v11;
  }
LABEL_55:
  if (*((_QWORD *)a2 + 17))
    operator new();
  if (*((_QWORD *)a2 + 16))
    operator new();
  return this;
}

CMMsl *CMMsl::WalkingSteadinessClassification::operator=(CMMsl *a1, const CMMsl::WalkingSteadinessClassification *a2)
{
  CMMsl::WalkingSteadinessClassification *v3;
  _BYTE v5[248];

  if (a1 != a2)
  {
    CMMsl::WalkingSteadinessClassification::WalkingSteadinessClassification((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::WalkingSteadinessClassification *)v5, v3);
    CMMsl::WalkingSteadinessClassification::~WalkingSteadinessClassification((CMMsl::WalkingSteadinessClassification *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::WalkingSteadinessClassification *a2, CMMsl::WalkingSteadinessClassification *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double result;
  uint64_t v29;
  uint64_t v30;

  v3 = *((_DWORD *)this + 61);
  *((_DWORD *)this + 61) = *((_DWORD *)a2 + 61);
  *((_DWORD *)a2 + 61) = v3;
  v4 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v4;
  v5 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v5;
  v6 = *((_DWORD *)this + 55);
  *((_DWORD *)this + 55) = *((_DWORD *)a2 + 55);
  *((_DWORD *)a2 + 55) = v6;
  v7 = *((_DWORD *)this + 54);
  *((_DWORD *)this + 54) = *((_DWORD *)a2 + 54);
  *((_DWORD *)a2 + 54) = v7;
  LODWORD(v5) = *((_DWORD *)this + 57);
  *((_DWORD *)this + 57) = *((_DWORD *)a2 + 57);
  *((_DWORD *)a2 + 57) = v5;
  LOBYTE(v7) = *((_BYTE *)this + 241);
  *((_BYTE *)this + 241) = *((_BYTE *)a2 + 241);
  *((_BYTE *)a2 + 241) = v7;
  LODWORD(v5) = *((_DWORD *)this + 58);
  *((_DWORD *)this + 58) = *((_DWORD *)a2 + 58);
  *((_DWORD *)a2 + 58) = v5;
  LOBYTE(v7) = *((_BYTE *)this + 242);
  *((_BYTE *)this + 242) = *((_BYTE *)a2 + 242);
  *((_BYTE *)a2 + 242) = v7;
  v8 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = *((_QWORD *)a2 + 22);
  *((_QWORD *)a2 + 22) = v8;
  LOBYTE(v7) = *((_BYTE *)this + 238);
  *((_BYTE *)this + 238) = *((_BYTE *)a2 + 238);
  *((_BYTE *)a2 + 238) = v7;
  v9 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v9;
  v10 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = *((_QWORD *)a2 + 24);
  *((_QWORD *)a2 + 24) = v10;
  LOBYTE(v9) = *((_BYTE *)this + 239);
  *((_BYTE *)this + 239) = *((_BYTE *)a2 + 239);
  *((_BYTE *)a2 + 239) = v9;
  v11 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = *((_QWORD *)a2 + 23);
  *((_QWORD *)a2 + 23) = v11;
  LOBYTE(v9) = *((_BYTE *)this + 237);
  *((_BYTE *)this + 237) = *((_BYTE *)a2 + 237);
  *((_BYTE *)a2 + 237) = v9;
  v12 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v12;
  v13 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v13;
  v14 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v14;
  v15 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v15;
  v16 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v16;
  v17 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v17;
  v18 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
  *((_QWORD *)a2 + 21) = v18;
  v19 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 20) = v19;
  LOBYTE(v19) = *((_BYTE *)this + 236);
  *((_BYTE *)this + 236) = *((_BYTE *)a2 + 236);
  *((_BYTE *)a2 + 236) = v19;
  v20 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v20;
  v21 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v21;
  v22 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v22;
  LODWORD(v22) = *((_DWORD *)this + 56);
  *((_DWORD *)this + 56) = *((_DWORD *)a2 + 56);
  *((_DWORD *)a2 + 56) = v22;
  LOBYTE(v20) = *((_BYTE *)this + 240);
  *((_BYTE *)this + 240) = *((_BYTE *)a2 + 240);
  *((_BYTE *)a2 + 240) = v20;
  v23 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = *((_QWORD *)a2 + 25);
  *((_QWORD *)a2 + 25) = v23;
  v24 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v24;
  v25 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v25;
  v26 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v26;
  LODWORD(v20) = *((_DWORD *)this + 53);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 53);
  *((_DWORD *)a2 + 53) = v20;
  LODWORD(v20) = *((_DWORD *)this + 52);
  *((_DWORD *)this + 52) = *((_DWORD *)a2 + 52);
  *((_DWORD *)a2 + 52) = v20;
  v27 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v27;
  result = *((double *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((double *)a2 + 3) = result;
  v29 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v29;
  v30 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v30;
  return result;
}

uint64_t CMMsl::WalkingSteadinessClassification::WalkingSteadinessClassification(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  *(_QWORD *)a1 = off_100355340;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
  *(_DWORD *)(a2 + 244) = 0;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
  *(_BYTE *)(a1 + 241) = *(_BYTE *)(a2 + 241);
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
  *(_BYTE *)(a1 + 242) = *(_BYTE *)(a2 + 242);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 238) = *(_BYTE *)(a2 + 238);
  v4 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  v5 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 239) = *(_BYTE *)(a2 + 239);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 237) = *(_BYTE *)(a2 + 237);
  v6 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 120) = 0;
  v7 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  v9 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v8;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = 0;
  v11 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v10;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = 0;
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v12;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 152) = 0;
  v15 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v14;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 144) = 0;
  v17 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v16;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 168) = 0;
  v19 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v18;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = 0;
  v21 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v20;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  *(_BYTE *)(a1 + 236) = *(_BYTE *)(a2 + 236);
  v22 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  v23 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v22;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v24 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = 0;
  v25 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v24;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = 0;
  v27 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v26;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  return a1;
}

CMMsl *CMMsl::WalkingSteadinessClassification::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::WalkingSteadinessClassification *v3;
  _BYTE v5[248];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::WalkingSteadinessClassification::WalkingSteadinessClassification((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::WalkingSteadinessClassification *)v5, v3);
    CMMsl::WalkingSteadinessClassification::~WalkingSteadinessClassification((CMMsl::WalkingSteadinessClassification *)v5);
  }
  return a1;
}

uint64_t CMMsl::WalkingSteadinessClassification::formatText(CMMsl::WalkingSteadinessClassification *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 61);
  if ((v5 & 0x100000) != 0)
  {
    PB::TextFormatter::format(a2, "appliedBoutMetricCorrections", *((_BYTE *)this + 236));
    v5 = *((_DWORD *)this + 61);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_58;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "dailyFlights30daysMax", *((double *)this + 1));
  v5 = *((_DWORD *)this + 61);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "dailyFlights30daysMean", *((double *)this + 2));
  v5 = *((_DWORD *)this + 61);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "dailySteps30DaysTotal", *((double *)this + 3));
  v5 = *((_DWORD *)this + 61);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "dailySteps30daysMax", *((double *)this + 4));
  v5 = *((_DWORD *)this + 61);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "dailySteps30daysMean", *((double *)this + 5));
  v5 = *((_DWORD *)this + 61);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "dailySteps7DaysTotal", *((double *)this + 6));
  v5 = *((_DWORD *)this + 61);
  if ((v5 & 0x40) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "dailySteps7daysMean", *((double *)this + 7));
  v5 = *((_DWORD *)this + 61);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000) == 0)
      goto LABEL_11;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "daysWithSteps30Days", *((_DWORD *)this + 52));
  v5 = *((_DWORD *)this + 61);
  if ((v5 & 0x4000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000) == 0)
      goto LABEL_13;
    goto LABEL_12;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "daysWithSteps7Days", *((_DWORD *)this + 53));
  if ((*((_DWORD *)this + 61) & 0x8000) != 0)
LABEL_12:
    PB::TextFormatter::format(a2, "errorStatus", *((_DWORD *)this + 54));
LABEL_13:
  v6 = *((_QWORD *)this + 8);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "eventResult");
  v7 = *((_DWORD *)this + 61);
  if ((v7 & 0x200000) != 0)
  {
    PB::TextFormatter::format(a2, "fusionSuccess", *((_BYTE *)this + 237));
    v7 = *((_DWORD *)this + 61);
    if ((v7 & 0x80) == 0)
    {
LABEL_17:
      if ((v7 & 0x100) == 0)
        goto LABEL_18;
      goto LABEL_69;
    }
  }
  else if ((v7 & 0x80) == 0)
  {
    goto LABEL_17;
  }
  PB::TextFormatter::format(a2, "hkEndTime", *((double *)this + 9));
  v7 = *((_DWORD *)this + 61);
  if ((v7 & 0x100) == 0)
  {
LABEL_18:
    if ((v7 & 0x400000) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "hkStartTime", *((double *)this + 10));
  if ((*((_DWORD *)this + 61) & 0x400000) != 0)
LABEL_19:
    PB::TextFormatter::format(a2, "isHistoricalCompute", *((_BYTE *)this + 238));
LABEL_20:
  v8 = *((_QWORD *)this + 11);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "modelBalanceFeatures");
  v9 = *((_QWORD *)this + 12);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, a2, "modelContinuousWalkingFeatures");
  v10 = *((_QWORD *)this + 13);
  if (v10)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v10 + 32))(v10, a2, "modelContinuousWalkingResult");
  v11 = *((_QWORD *)this + 14);
  if (v11)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v11 + 32))(v11, a2, "modelGaitBaselineFeatures");
  v12 = *((_QWORD *)this + 15);
  if (v12)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v12 + 32))(v12, a2, "modelGaitBaselineResult");
  v13 = *((_QWORD *)this + 16);
  if (v13)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v13 + 32))(v13, a2, "modelHarmonicFeatures");
  v14 = *((_QWORD *)this + 17);
  if (v14)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v14 + 32))(v14, a2, "modelHarmonicResult");
  v15 = *((_QWORD *)this + 18);
  if (v15)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v15 + 32))(v15, a2, "modelTemporalDispersionFeatures");
  v16 = *((_QWORD *)this + 19);
  if (v16)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v16 + 32))(v16, a2, "modelTemporalDispersionResult");
  v17 = *((_QWORD *)this + 20);
  if (v17)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v17 + 32))(v17, a2, "modelTemporalEntropyFeatures");
  v18 = *((_QWORD *)this + 21);
  if (v18)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v18 + 32))(v18, a2, "modelTemporalEntropyResult");
  v19 = *((_DWORD *)this + 61);
  if ((v19 & 0x200) != 0)
  {
    PB::TextFormatter::format(a2, "nextClassificationTime", *((double *)this + 22));
    v19 = *((_DWORD *)this + 61);
    if ((v19 & 0x400) == 0)
    {
LABEL_44:
      if ((v19 & 0x10000) == 0)
        goto LABEL_45;
      goto LABEL_73;
    }
  }
  else if ((v19 & 0x400) == 0)
  {
    goto LABEL_44;
  }
  PB::TextFormatter::format(a2, "rawSteadiness", *((double *)this + 23));
  v19 = *((_DWORD *)this + 61);
  if ((v19 & 0x10000) == 0)
  {
LABEL_45:
    if ((v19 & 0x800) == 0)
      goto LABEL_46;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "rejectionStatus", *((_DWORD *)this + 55));
  v19 = *((_DWORD *)this + 61);
  if ((v19 & 0x800) == 0)
  {
LABEL_46:
    if ((v19 & 0x800000) == 0)
      goto LABEL_47;
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(a2, "steadinessScore", *((double *)this + 24));
  v19 = *((_DWORD *)this + 61);
  if ((v19 & 0x800000) == 0)
  {
LABEL_47:
    if ((v19 & 0x1000) == 0)
      goto LABEL_48;
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(a2, "steadinessScoreIsValid", *((_BYTE *)this + 239));
  v19 = *((_DWORD *)this + 61);
  if ((v19 & 0x1000) == 0)
  {
LABEL_48:
    if ((v19 & 0x20000) == 0)
      goto LABEL_49;
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(a2, "unadjustedScore", *((double *)this + 25));
  v19 = *((_DWORD *)this + 61);
  if ((v19 & 0x20000) == 0)
  {
LABEL_49:
    if ((v19 & 0x40000) == 0)
      goto LABEL_50;
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(a2, "userAge", *((float *)this + 56));
  v19 = *((_DWORD *)this + 61);
  if ((v19 & 0x40000) == 0)
  {
LABEL_50:
    if ((v19 & 0x1000000) == 0)
      goto LABEL_51;
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(a2, "userHeight", *((float *)this + 57));
  v19 = *((_DWORD *)this + 61);
  if ((v19 & 0x1000000) == 0)
  {
LABEL_51:
    if ((v19 & 0x2000000) == 0)
      goto LABEL_52;
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(a2, "userIsAgeSet", *((_BYTE *)this + 240));
  v19 = *((_DWORD *)this + 61);
  if ((v19 & 0x2000000) == 0)
  {
LABEL_52:
    if ((v19 & 0x4000000) == 0)
      goto LABEL_53;
LABEL_81:
    PB::TextFormatter::format(a2, "userIsWeightSet", *((_BYTE *)this + 242));
    if ((*((_DWORD *)this + 61) & 0x80000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_54;
  }
LABEL_80:
  PB::TextFormatter::format(a2, "userIsHeightSet", *((_BYTE *)this + 241));
  v19 = *((_DWORD *)this + 61);
  if ((v19 & 0x4000000) != 0)
    goto LABEL_81;
LABEL_53:
  if ((v19 & 0x80000) != 0)
LABEL_54:
    PB::TextFormatter::format(a2, "userWeight", *((float *)this + 58));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WalkingSteadinessClassification::readFrom(CMMsl::WalkingSteadinessClassification *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  BOOL v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  BOOL v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  BOOL v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  BOOL v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  BOOL v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  int v74;
  BOOL v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char v91;
  unsigned int v92;
  uint64_t v93;
  unint64_t v94;
  char v95;
  unint64_t v96;
  unint64_t v97;
  char v98;
  unsigned int v99;
  unint64_t v100;
  char v101;
  char v102;
  unsigned int v103;
  unint64_t v104;
  char v105;
  char v106;
  unsigned int v107;
  unint64_t v108;
  char v109;
  char v110;
  unsigned int v111;
  unint64_t v112;
  char v113;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_DWORD *)this + 61) |= 0x100u;
          v20 = *((_QWORD *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_124;
          *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v20);
          goto LABEL_170;
        case 2u:
          *((_DWORD *)this + 61) |= 0x80u;
          v21 = *((_QWORD *)a2 + 1);
          if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_124;
          *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v21);
          goto LABEL_170;
        case 4u:
          *((_DWORD *)this + 61) |= 0x10000u;
          v23 = *((_QWORD *)a2 + 1);
          v24 = *((_QWORD *)a2 + 2);
          v25 = *(_QWORD *)a2;
          if (v23 <= 0xFFFFFFFFFFFFFFF5 && v23 + 10 <= v24)
          {
            v26 = 0;
            v27 = 0;
            v28 = 0;
            do
            {
              v29 = v23 + 1;
              *((_QWORD *)a2 + 1) = v23 + 1;
              v30 = *(_BYTE *)(v25 + v23);
              v28 |= (unint64_t)(v30 & 0x7F) << v26;
              if ((v30 & 0x80) == 0)
                goto LABEL_175;
              v26 += 7;
              v23 = v29;
              v14 = v27++ > 8;
            }
            while (!v14);
LABEL_133:
            LODWORD(v28) = 0;
            goto LABEL_175;
          }
          v98 = 0;
          v99 = 0;
          v28 = 0;
          if (v24 <= v23)
            v24 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v24 == v23)
            {
              LODWORD(v28) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v100 = v23 + 1;
              v101 = *(_BYTE *)(v25 + v23);
              *((_QWORD *)a2 + 1) = v100;
              v28 |= (unint64_t)(v101 & 0x7F) << v98;
              if (v101 < 0)
              {
                v98 += 7;
                v23 = v100;
                v14 = v99++ > 8;
                if (v14)
                  goto LABEL_133;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v28) = 0;
            }
            break;
          }
LABEL_175:
          *((_DWORD *)this + 55) = v28;
          goto LABEL_188;
        case 5u:
          *((_DWORD *)this + 61) |= 0x8000u;
          v31 = *((_QWORD *)a2 + 1);
          v32 = *((_QWORD *)a2 + 2);
          v33 = *(_QWORD *)a2;
          if (v31 <= 0xFFFFFFFFFFFFFFF5 && v31 + 10 <= v32)
          {
            v34 = 0;
            v35 = 0;
            v36 = 0;
            do
            {
              v37 = v31 + 1;
              *((_QWORD *)a2 + 1) = v31 + 1;
              v38 = *(_BYTE *)(v33 + v31);
              v36 |= (unint64_t)(v38 & 0x7F) << v34;
              if ((v38 & 0x80) == 0)
                goto LABEL_179;
              v34 += 7;
              v31 = v37;
              v14 = v35++ > 8;
            }
            while (!v14);
LABEL_140:
            LODWORD(v36) = 0;
            goto LABEL_179;
          }
          v102 = 0;
          v103 = 0;
          v36 = 0;
          if (v32 <= v31)
            v32 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v32 == v31)
            {
              LODWORD(v36) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v104 = v31 + 1;
              v105 = *(_BYTE *)(v33 + v31);
              *((_QWORD *)a2 + 1) = v104;
              v36 |= (unint64_t)(v105 & 0x7F) << v102;
              if (v105 < 0)
              {
                v102 += 7;
                v31 = v104;
                v14 = v103++ > 8;
                if (v14)
                  goto LABEL_140;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v36) = 0;
            }
            break;
          }
LABEL_179:
          *((_DWORD *)this + 54) = v36;
          goto LABEL_188;
        case 6u:
          *((_DWORD *)this + 61) |= 0x40000u;
          v39 = *((_QWORD *)a2 + 1);
          if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_124;
          *((_DWORD *)this + 57) = *(_DWORD *)(*(_QWORD *)a2 + v39);
          goto LABEL_90;
        case 7u:
          *((_DWORD *)this + 61) |= 0x2000000u;
          v40 = *((_QWORD *)a2 + 1);
          if (v40 >= *((_QWORD *)a2 + 2))
          {
            v43 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v41 = v40 + 1;
            v42 = *(unsigned __int8 *)(*(_QWORD *)a2 + v40);
            *((_QWORD *)a2 + 1) = v41;
            v43 = v42 != 0;
          }
          *((_BYTE *)this + 241) = v43;
          goto LABEL_188;
        case 8u:
          *((_DWORD *)this + 61) |= 0x80000u;
          v44 = *((_QWORD *)a2 + 1);
          if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_124;
          *((_DWORD *)this + 58) = *(_DWORD *)(*(_QWORD *)a2 + v44);
          goto LABEL_90;
        case 9u:
          *((_DWORD *)this + 61) |= 0x4000000u;
          v45 = *((_QWORD *)a2 + 1);
          if (v45 >= *((_QWORD *)a2 + 2))
          {
            v48 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v46 = v45 + 1;
            v47 = *(unsigned __int8 *)(*(_QWORD *)a2 + v45);
            *((_QWORD *)a2 + 1) = v46;
            v48 = v47 != 0;
          }
          *((_BYTE *)this + 242) = v48;
          goto LABEL_188;
        case 0xAu:
          *((_DWORD *)this + 61) |= 0x200u;
          v49 = *((_QWORD *)a2 + 1);
          if (v49 > 0xFFFFFFFFFFFFFFF7 || v49 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_124;
          *((_QWORD *)this + 22) = *(_QWORD *)(*(_QWORD *)a2 + v49);
          goto LABEL_170;
        case 0xBu:
          *((_DWORD *)this + 61) |= 0x400000u;
          v50 = *((_QWORD *)a2 + 1);
          if (v50 >= *((_QWORD *)a2 + 2))
          {
            v53 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v51 = v50 + 1;
            v52 = *(unsigned __int8 *)(*(_QWORD *)a2 + v50);
            *((_QWORD *)a2 + 1) = v51;
            v53 = v52 != 0;
          }
          *((_BYTE *)this + 238) = v53;
          goto LABEL_188;
        case 0xCu:
          operator new();
        case 0xDu:
          *((_DWORD *)this + 61) |= 0x800u;
          v54 = *((_QWORD *)a2 + 1);
          if (v54 > 0xFFFFFFFFFFFFFFF7 || v54 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_124;
          *((_QWORD *)this + 24) = *(_QWORD *)(*(_QWORD *)a2 + v54);
          goto LABEL_170;
        case 0xEu:
          *((_DWORD *)this + 61) |= 0x800000u;
          v55 = *((_QWORD *)a2 + 1);
          if (v55 >= *((_QWORD *)a2 + 2))
          {
            v58 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v56 = v55 + 1;
            v57 = *(unsigned __int8 *)(*(_QWORD *)a2 + v55);
            *((_QWORD *)a2 + 1) = v56;
            v58 = v57 != 0;
          }
          *((_BYTE *)this + 239) = v58;
          goto LABEL_188;
        case 0xFu:
          *((_DWORD *)this + 61) |= 0x400u;
          v59 = *((_QWORD *)a2 + 1);
          if (v59 > 0xFFFFFFFFFFFFFFF7 || v59 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_124;
          *((_QWORD *)this + 23) = *(_QWORD *)(*(_QWORD *)a2 + v59);
          goto LABEL_170;
        case 0x10u:
          *((_DWORD *)this + 61) |= 0x200000u;
          v60 = *((_QWORD *)a2 + 1);
          if (v60 >= *((_QWORD *)a2 + 2))
          {
            v63 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v61 = v60 + 1;
            v62 = *(unsigned __int8 *)(*(_QWORD *)a2 + v60);
            *((_QWORD *)a2 + 1) = v61;
            v63 = v62 != 0;
          }
          *((_BYTE *)this + 237) = v63;
          goto LABEL_188;
        case 0x11u:
          operator new();
        case 0x12u:
          operator new();
        case 0x13u:
          operator new();
        case 0x14u:
          operator new();
        case 0x15u:
          operator new();
        case 0x16u:
          operator new();
        case 0x17u:
          operator new();
        case 0x18u:
          operator new();
        case 0x19u:
          *((_DWORD *)this + 61) |= 0x100000u;
          v64 = *((_QWORD *)a2 + 1);
          if (v64 >= *((_QWORD *)a2 + 2))
          {
            v67 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v65 = v64 + 1;
            v66 = *(unsigned __int8 *)(*(_QWORD *)a2 + v64);
            *((_QWORD *)a2 + 1) = v65;
            v67 = v66 != 0;
          }
          *((_BYTE *)this + 236) = v67;
          goto LABEL_188;
        case 0x1Au:
          operator new();
        case 0x1Bu:
          *((_DWORD *)this + 61) |= 1u;
          v68 = *((_QWORD *)a2 + 1);
          if (v68 > 0xFFFFFFFFFFFFFFF7 || v68 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_124;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v68);
          goto LABEL_170;
        case 0x1Cu:
          *((_DWORD *)this + 61) |= 8u;
          v69 = *((_QWORD *)a2 + 1);
          if (v69 > 0xFFFFFFFFFFFFFFF7 || v69 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_124;
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v69);
          goto LABEL_170;
        case 0x1Du:
          *((_DWORD *)this + 61) |= 0x20000u;
          v70 = *((_QWORD *)a2 + 1);
          if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_124;
          *((_DWORD *)this + 56) = *(_DWORD *)(*(_QWORD *)a2 + v70);
LABEL_90:
          v71 = *((_QWORD *)a2 + 1) + 4;
          goto LABEL_171;
        case 0x1Eu:
          *((_DWORD *)this + 61) |= 0x1000000u;
          v72 = *((_QWORD *)a2 + 1);
          if (v72 >= *((_QWORD *)a2 + 2))
          {
            v75 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v73 = v72 + 1;
            v74 = *(unsigned __int8 *)(*(_QWORD *)a2 + v72);
            *((_QWORD *)a2 + 1) = v73;
            v75 = v74 != 0;
          }
          *((_BYTE *)this + 240) = v75;
          goto LABEL_188;
        case 0x1Fu:
          *((_DWORD *)this + 61) |= 0x1000u;
          v76 = *((_QWORD *)a2 + 1);
          if (v76 > 0xFFFFFFFFFFFFFFF7 || v76 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_124;
          *((_QWORD *)this + 25) = *(_QWORD *)(*(_QWORD *)a2 + v76);
          goto LABEL_170;
        case 0x20u:
          *((_DWORD *)this + 61) |= 0x40u;
          v77 = *((_QWORD *)a2 + 1);
          if (v77 > 0xFFFFFFFFFFFFFFF7 || v77 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_124;
          *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v77);
          goto LABEL_170;
        case 0x21u:
          *((_DWORD *)this + 61) |= 2u;
          v78 = *((_QWORD *)a2 + 1);
          if (v78 > 0xFFFFFFFFFFFFFFF7 || v78 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_124;
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v78);
          goto LABEL_170;
        case 0x22u:
          *((_DWORD *)this + 61) |= 0x10u;
          v79 = *((_QWORD *)a2 + 1);
          if (v79 > 0xFFFFFFFFFFFFFFF7 || v79 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_124;
          *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v79);
          goto LABEL_170;
        case 0x23u:
          *((_DWORD *)this + 61) |= 0x4000u;
          v80 = *((_QWORD *)a2 + 1);
          v81 = *((_QWORD *)a2 + 2);
          v82 = *(_QWORD *)a2;
          if (v80 <= 0xFFFFFFFFFFFFFFF5 && v80 + 10 <= v81)
          {
            v83 = 0;
            v84 = 0;
            v85 = 0;
            do
            {
              v86 = v80 + 1;
              *((_QWORD *)a2 + 1) = v80 + 1;
              v87 = *(_BYTE *)(v82 + v80);
              v85 |= (unint64_t)(v87 & 0x7F) << v83;
              if ((v87 & 0x80) == 0)
                goto LABEL_183;
              v83 += 7;
              v80 = v86;
              v14 = v84++ > 8;
            }
            while (!v14);
LABEL_161:
            LODWORD(v85) = 0;
            goto LABEL_183;
          }
          v106 = 0;
          v107 = 0;
          v85 = 0;
          if (v81 <= v80)
            v81 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v81 == v80)
            {
              LODWORD(v85) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v108 = v80 + 1;
              v109 = *(_BYTE *)(v82 + v80);
              *((_QWORD *)a2 + 1) = v108;
              v85 |= (unint64_t)(v109 & 0x7F) << v106;
              if (v109 < 0)
              {
                v106 += 7;
                v80 = v108;
                v14 = v107++ > 8;
                if (v14)
                  goto LABEL_161;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v85) = 0;
            }
            break;
          }
LABEL_183:
          *((_DWORD *)this + 53) = v85;
          goto LABEL_188;
        case 0x24u:
          *((_DWORD *)this + 61) |= 0x2000u;
          v88 = *((_QWORD *)a2 + 1);
          v89 = *((_QWORD *)a2 + 2);
          v90 = *(_QWORD *)a2;
          if (v88 <= 0xFFFFFFFFFFFFFFF5 && v88 + 10 <= v89)
          {
            v91 = 0;
            v92 = 0;
            v93 = 0;
            do
            {
              v94 = v88 + 1;
              *((_QWORD *)a2 + 1) = v88 + 1;
              v95 = *(_BYTE *)(v90 + v88);
              v93 |= (unint64_t)(v95 & 0x7F) << v91;
              if ((v95 & 0x80) == 0)
                goto LABEL_187;
              v91 += 7;
              v88 = v94;
              v14 = v92++ > 8;
            }
            while (!v14);
LABEL_168:
            LODWORD(v93) = 0;
            goto LABEL_187;
          }
          v110 = 0;
          v111 = 0;
          v93 = 0;
          if (v89 <= v88)
            v89 = *((_QWORD *)a2 + 1);
          break;
        case 0x25u:
          *((_DWORD *)this + 61) |= 0x20u;
          v96 = *((_QWORD *)a2 + 1);
          if (v96 > 0xFFFFFFFFFFFFFFF7 || v96 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_124;
          *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v96);
          goto LABEL_170;
        case 0x26u:
          *((_DWORD *)this + 61) |= 4u;
          v97 = *((_QWORD *)a2 + 1);
          if (v97 <= 0xFFFFFFFFFFFFFFF7 && v97 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v97);
LABEL_170:
            v71 = *((_QWORD *)a2 + 1) + 8;
LABEL_171:
            *((_QWORD *)a2 + 1) = v71;
          }
          else
          {
LABEL_124:
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_188;
        case 0x27u:
          operator new();
        case 0x28u:
          operator new();
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_188;
      }
      while (1)
      {
        if (v89 == v88)
        {
          LODWORD(v93) = 0;
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_187;
        }
        v112 = v88 + 1;
        v113 = *(_BYTE *)(v90 + v88);
        *((_QWORD *)a2 + 1) = v112;
        v93 |= (unint64_t)(v113 & 0x7F) << v110;
        if ((v113 & 0x80) == 0)
          break;
        v110 += 7;
        v88 = v112;
        v14 = v111++ > 8;
        if (v14)
          goto LABEL_168;
      }
      if (*((_BYTE *)a2 + 24))
        LODWORD(v93) = 0;
LABEL_187:
      *((_DWORD *)this + 52) = v93;
LABEL_188:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WalkingSteadinessClassification::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;
  const PB::Base *v5;
  int v6;
  const PB::Base *v7;
  const PB::Base *v8;
  const PB::Base *v9;
  const PB::Base *v10;
  const PB::Base *v11;
  const PB::Base *v12;
  const PB::Base *v13;
  const PB::Base *v14;
  const PB::Base *v15;
  int v16;
  const PB::Base *v17;
  const PB::Base *v18;

  v3 = this;
  v4 = *(_DWORD *)(this + 244);
  if ((v4 & 0x100) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 80), 1u);
    v4 = *(_DWORD *)(v3 + 244);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x10000) == 0)
        goto LABEL_4;
      goto LABEL_58;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 2u);
  v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x10000) == 0)
  {
LABEL_4:
    if ((v4 & 0x8000) == 0)
      goto LABEL_5;
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 220), 4u);
  v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x8000) == 0)
  {
LABEL_5:
    if ((v4 & 0x40000) == 0)
      goto LABEL_6;
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 216), 5u);
  v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x40000) == 0)
  {
LABEL_6:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_7;
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(float *)(v3 + 228), 6u);
  v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_7:
    if ((v4 & 0x80000) == 0)
      goto LABEL_8;
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 241), 7u);
  v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x80000) == 0)
  {
LABEL_8:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_9;
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::write(a2, *(float *)(v3 + 232), 8u);
  v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 242), 9u);
  v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x400000) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_64:
  this = PB::Writer::write(a2, *(double *)(v3 + 176), 0xAu);
  if ((*(_DWORD *)(v3 + 244) & 0x400000) != 0)
LABEL_11:
    this = PB::Writer::write(a2, *(_BYTE *)(v3 + 238), 0xBu);
LABEL_12:
  v5 = *(const PB::Base **)(v3 + 64);
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5, 0xCu);
  v6 = *(_DWORD *)(v3 + 244);
  if ((v6 & 0x800) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 192), 0xDu);
    v6 = *(_DWORD *)(v3 + 244);
    if ((v6 & 0x800000) == 0)
    {
LABEL_16:
      if ((v6 & 0x400) == 0)
        goto LABEL_17;
      goto LABEL_68;
    }
  }
  else if ((v6 & 0x800000) == 0)
  {
    goto LABEL_16;
  }
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 239), 0xEu);
  v6 = *(_DWORD *)(v3 + 244);
  if ((v6 & 0x400) == 0)
  {
LABEL_17:
    if ((v6 & 0x200000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_68:
  this = PB::Writer::write(a2, *(double *)(v3 + 184), 0xFu);
  if ((*(_DWORD *)(v3 + 244) & 0x200000) != 0)
LABEL_18:
    this = PB::Writer::write(a2, *(_BYTE *)(v3 + 237), 0x10u);
LABEL_19:
  v7 = *(const PB::Base **)(v3 + 120);
  if (v7)
    this = PB::Writer::writeSubmessage(a2, v7, 0x11u);
  v8 = *(const PB::Base **)(v3 + 112);
  if (v8)
    this = PB::Writer::writeSubmessage(a2, v8, 0x12u);
  v9 = *(const PB::Base **)(v3 + 104);
  if (v9)
    this = PB::Writer::writeSubmessage(a2, v9, 0x13u);
  v10 = *(const PB::Base **)(v3 + 96);
  if (v10)
    this = PB::Writer::writeSubmessage(a2, v10, 0x14u);
  v11 = *(const PB::Base **)(v3 + 152);
  if (v11)
    this = PB::Writer::writeSubmessage(a2, v11, 0x15u);
  v12 = *(const PB::Base **)(v3 + 144);
  if (v12)
    this = PB::Writer::writeSubmessage(a2, v12, 0x16u);
  v13 = *(const PB::Base **)(v3 + 168);
  if (v13)
    this = PB::Writer::writeSubmessage(a2, v13, 0x17u);
  v14 = *(const PB::Base **)(v3 + 160);
  if (v14)
    this = PB::Writer::writeSubmessage(a2, v14, 0x18u);
  if ((*(_BYTE *)(v3 + 246) & 0x10) != 0)
    this = PB::Writer::write(a2, *(_BYTE *)(v3 + 236), 0x19u);
  v15 = *(const PB::Base **)(v3 + 88);
  if (v15)
    this = PB::Writer::writeSubmessage(a2, v15, 0x1Au);
  v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 8), 0x1Bu);
    v16 = *(_DWORD *)(v3 + 244);
    if ((v16 & 8) == 0)
    {
LABEL_41:
      if ((v16 & 0x20000) == 0)
        goto LABEL_42;
      goto LABEL_72;
    }
  }
  else if ((v16 & 8) == 0)
  {
    goto LABEL_41;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 0x1Cu);
  v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x20000) == 0)
  {
LABEL_42:
    if ((v16 & 0x1000000) == 0)
      goto LABEL_43;
    goto LABEL_73;
  }
LABEL_72:
  this = PB::Writer::write(a2, *(float *)(v3 + 224), 0x1Du);
  v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x1000000) == 0)
  {
LABEL_43:
    if ((v16 & 0x1000) == 0)
      goto LABEL_44;
    goto LABEL_74;
  }
LABEL_73:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 240), 0x1Eu);
  v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x1000) == 0)
  {
LABEL_44:
    if ((v16 & 0x40) == 0)
      goto LABEL_45;
    goto LABEL_75;
  }
LABEL_74:
  this = PB::Writer::write(a2, *(double *)(v3 + 200), 0x1Fu);
  v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x40) == 0)
  {
LABEL_45:
    if ((v16 & 2) == 0)
      goto LABEL_46;
    goto LABEL_76;
  }
LABEL_75:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 0x20u);
  v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 2) == 0)
  {
LABEL_46:
    if ((v16 & 0x10) == 0)
      goto LABEL_47;
    goto LABEL_77;
  }
LABEL_76:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 0x21u);
  v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x10) == 0)
  {
LABEL_47:
    if ((v16 & 0x4000) == 0)
      goto LABEL_48;
    goto LABEL_78;
  }
LABEL_77:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 0x22u);
  v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x4000) == 0)
  {
LABEL_48:
    if ((v16 & 0x2000) == 0)
      goto LABEL_49;
    goto LABEL_79;
  }
LABEL_78:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 212), 0x23u);
  v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x2000) == 0)
  {
LABEL_49:
    if ((v16 & 0x20) == 0)
      goto LABEL_50;
    goto LABEL_80;
  }
LABEL_79:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 208), 0x24u);
  v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x20) == 0)
  {
LABEL_50:
    if ((v16 & 4) == 0)
      goto LABEL_52;
    goto LABEL_51;
  }
LABEL_80:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 0x25u);
  if ((*(_DWORD *)(v3 + 244) & 4) != 0)
LABEL_51:
    this = PB::Writer::write(a2, *(double *)(v3 + 24), 0x26u);
LABEL_52:
  v17 = *(const PB::Base **)(v3 + 136);
  if (v17)
    this = PB::Writer::writeSubmessage(a2, v17, 0x27u);
  v18 = *(const PB::Base **)(v3 + 128);
  if (v18)
    return PB::Writer::writeSubmessage(a2, v18, 0x28u);
  return this;
}

unint64_t CMMsl::WalkingSteadinessClassification::hash_value(CMMsl::WalkingSteadinessClassification *this)
{
  int v2;
  double v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  double v8;
  double v9;
  CMMsl::SteadinessEvent *v10;
  double v11;
  double v12;
  CMMsl::SteadinessModelResult *v13;
  uint64_t v14;
  CMMsl::SteadinessModelGaitBaselineFeatures *v15;
  uint64_t v16;
  CMMsl::SteadinessModelResult *v17;
  uint64_t v18;
  CMMsl::SteadinessModelContinuousWalkingFeatures *v19;
  uint64_t v20;
  CMMsl::SteadinessModelResult *v21;
  uint64_t v22;
  CMMsl::SteadinessModelTemporalDispersionFeatures *v23;
  uint64_t v24;
  CMMsl::SteadinessModelResult *v25;
  uint64_t v26;
  CMMsl::SteadinessModelTemporalEntropyFeatures *v27;
  CMMsl::SteadinessModelBalanceFeatures *v28;
  double v29;
  float v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  double v37;
  CMMsl::SteadinessModelBalanceFeatures *v38;
  uint64_t v39;
  CMMsl::SteadinessModelResult *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v44;
  uint64_t v45;
  double v46;
  double v47;
  double v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  double v68;
  CMMsl::SteadinessModelTemporalEntropyFeatures *v69;
  uint64_t v70;
  uint64_t v71;
  CMMsl::SteadinessEvent *v72;

  v2 = *((_DWORD *)this + 61);
  if ((v2 & 0x100) == 0)
  {
    v68 = 0.0;
    if ((v2 & 0x80) != 0)
      goto LABEL_3;
LABEL_23:
    v67 = 0.0;
    if ((v2 & 0x10000) != 0)
      goto LABEL_6;
    goto LABEL_24;
  }
  v9 = *((double *)this + 10);
  if (v9 == 0.0)
    v9 = 0.0;
  v68 = v9;
  if ((v2 & 0x80) == 0)
    goto LABEL_23;
LABEL_3:
  v3 = *((double *)this + 9);
  if (v3 == 0.0)
    v3 = 0.0;
  v67 = v3;
  if ((v2 & 0x10000) != 0)
  {
LABEL_6:
    v66 = *((unsigned int *)this + 55);
    if ((v2 & 0x8000) != 0)
      goto LABEL_7;
    goto LABEL_25;
  }
LABEL_24:
  v66 = 0;
  if ((v2 & 0x8000) != 0)
  {
LABEL_7:
    v65 = *((unsigned int *)this + 54);
    if ((v2 & 0x40000) != 0)
      goto LABEL_8;
LABEL_26:
    v64 = 0;
    if ((v2 & 0x2000000) != 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_25:
  v65 = 0;
  if ((v2 & 0x40000) == 0)
    goto LABEL_26;
LABEL_8:
  v4 = *((float *)this + 57);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  v64 = v5;
  if ((v2 & 0x2000000) != 0)
  {
LABEL_11:
    v63 = *((unsigned __int8 *)this + 241);
    if ((v2 & 0x80000) != 0)
      goto LABEL_12;
LABEL_28:
    v62 = 0;
    if ((v2 & 0x4000000) != 0)
      goto LABEL_15;
    goto LABEL_29;
  }
LABEL_27:
  v63 = 0;
  if ((v2 & 0x80000) == 0)
    goto LABEL_28;
LABEL_12:
  v6 = *((float *)this + 58);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  v62 = v7;
  if ((v2 & 0x4000000) != 0)
  {
LABEL_15:
    v61 = *((unsigned __int8 *)this + 242);
    if ((v2 & 0x200) != 0)
      goto LABEL_16;
    goto LABEL_30;
  }
LABEL_29:
  v61 = 0;
  if ((v2 & 0x200) != 0)
  {
LABEL_16:
    v8 = *((double *)this + 22);
    if (v8 == 0.0)
      v8 = 0.0;
    v60 = v8;
    if ((v2 & 0x400000) != 0)
      goto LABEL_19;
    goto LABEL_31;
  }
LABEL_30:
  v60 = 0.0;
  if ((v2 & 0x400000) != 0)
  {
LABEL_19:
    v59 = *((unsigned __int8 *)this + 238);
    goto LABEL_32;
  }
LABEL_31:
  v59 = 0;
LABEL_32:
  v10 = (CMMsl::SteadinessEvent *)*((_QWORD *)this + 8);
  if (v10)
    v10 = (CMMsl::SteadinessEvent *)CMMsl::SteadinessEvent::hash_value(v10);
  if ((v2 & 0x800) == 0)
  {
    v58 = 0.0;
    if ((v2 & 0x800000) != 0)
      goto LABEL_36;
LABEL_43:
    v57 = 0;
    if ((v2 & 0x400) != 0)
      goto LABEL_37;
LABEL_44:
    v56 = 0.0;
    goto LABEL_45;
  }
  v12 = *((double *)this + 24);
  if (v12 == 0.0)
    v12 = 0.0;
  v58 = v12;
  if ((v2 & 0x800000) == 0)
    goto LABEL_43;
LABEL_36:
  v57 = *((unsigned __int8 *)this + 239);
  if ((v2 & 0x400) == 0)
    goto LABEL_44;
LABEL_37:
  v11 = *((double *)this + 23);
  if (v11 == 0.0)
    v11 = 0.0;
  v56 = v11;
LABEL_45:
  v72 = v10;
  if ((v2 & 0x200000) != 0)
    v55 = *((unsigned __int8 *)this + 237);
  else
    v55 = 0;
  v13 = (CMMsl::SteadinessModelResult *)*((_QWORD *)this + 15);
  if (v13)
    v14 = CMMsl::SteadinessModelResult::hash_value(v13);
  else
    v14 = 0;
  v15 = (CMMsl::SteadinessModelGaitBaselineFeatures *)*((_QWORD *)this + 14);
  if (v15)
    v16 = CMMsl::SteadinessModelGaitBaselineFeatures::hash_value(v15);
  else
    v16 = 0;
  v17 = (CMMsl::SteadinessModelResult *)*((_QWORD *)this + 13);
  if (v17)
    v18 = CMMsl::SteadinessModelResult::hash_value(v17);
  else
    v18 = 0;
  v19 = (CMMsl::SteadinessModelContinuousWalkingFeatures *)*((_QWORD *)this + 12);
  if (v19)
    v20 = CMMsl::SteadinessModelContinuousWalkingFeatures::hash_value(v19);
  else
    v20 = 0;
  v21 = (CMMsl::SteadinessModelResult *)*((_QWORD *)this + 19);
  if (v21)
    v22 = CMMsl::SteadinessModelResult::hash_value(v21);
  else
    v22 = 0;
  v23 = (CMMsl::SteadinessModelTemporalDispersionFeatures *)*((_QWORD *)this + 18);
  if (v23)
    v24 = CMMsl::SteadinessModelTemporalDispersionFeatures::hash_value(v23);
  else
    v24 = 0;
  v25 = (CMMsl::SteadinessModelResult *)*((_QWORD *)this + 21);
  if (v25)
    v26 = CMMsl::SteadinessModelResult::hash_value(v25);
  else
    v26 = 0;
  v27 = (CMMsl::SteadinessModelTemporalEntropyFeatures *)*((_QWORD *)this + 20);
  if (v27)
    v27 = (CMMsl::SteadinessModelTemporalEntropyFeatures *)CMMsl::SteadinessModelTemporalEntropyFeatures::hash_value(v27);
  v69 = v27;
  if ((v2 & 0x100000) != 0)
    v54 = *((unsigned __int8 *)this + 236);
  else
    v54 = 0;
  v28 = (CMMsl::SteadinessModelBalanceFeatures *)*((_QWORD *)this + 11);
  if (v28)
    v28 = (CMMsl::SteadinessModelBalanceFeatures *)CMMsl::SteadinessModelBalanceFeatures::hash_value(v28);
  if ((v2 & 1) == 0)
  {
    v53 = 0.0;
    if ((v2 & 8) != 0)
      goto LABEL_78;
LABEL_94:
    v52 = 0.0;
    if ((v2 & 0x20000) != 0)
      goto LABEL_81;
LABEL_95:
    v51 = 0;
    if ((v2 & 0x1000000) != 0)
      goto LABEL_84;
    goto LABEL_96;
  }
  v34 = *((double *)this + 1);
  if (v34 == 0.0)
    v34 = 0.0;
  v53 = v34;
  if ((v2 & 8) == 0)
    goto LABEL_94;
LABEL_78:
  v29 = *((double *)this + 4);
  if (v29 == 0.0)
    v29 = 0.0;
  v52 = v29;
  if ((v2 & 0x20000) == 0)
    goto LABEL_95;
LABEL_81:
  v30 = *((float *)this + 56);
  v31 = LODWORD(v30);
  if (v30 == 0.0)
    v31 = 0;
  v51 = v31;
  if ((v2 & 0x1000000) != 0)
  {
LABEL_84:
    v50 = *((unsigned __int8 *)this + 240);
    if ((v2 & 0x1000) != 0)
      goto LABEL_85;
    goto LABEL_97;
  }
LABEL_96:
  v50 = 0;
  if ((v2 & 0x1000) != 0)
  {
LABEL_85:
    v32 = *((double *)this + 25);
    if (v32 == 0.0)
      v32 = 0.0;
    v49 = v32;
    if ((v2 & 0x40) != 0)
      goto LABEL_88;
LABEL_98:
    v48 = 0.0;
    goto LABEL_99;
  }
LABEL_97:
  v49 = 0.0;
  if ((v2 & 0x40) == 0)
    goto LABEL_98;
LABEL_88:
  v33 = *((double *)this + 7);
  if (v33 == 0.0)
    v33 = 0.0;
  v48 = v33;
LABEL_99:
  v71 = v16;
  if ((v2 & 2) != 0)
  {
    v35 = *((double *)this + 2);
    if (v35 == 0.0)
      v35 = 0.0;
    v47 = v35;
  }
  else
  {
    v47 = 0.0;
  }
  v70 = v14;
  if ((v2 & 0x10) != 0)
  {
    v37 = *((double *)this + 5);
    if (v37 == 0.0)
      v37 = 0.0;
    v46 = v37;
    if ((v2 & 0x4000) != 0)
    {
LABEL_106:
      v45 = *((int *)this + 53);
      if ((v2 & 0x2000) != 0)
        goto LABEL_107;
      goto LABEL_115;
    }
  }
  else
  {
    v46 = 0.0;
    if ((v2 & 0x4000) != 0)
      goto LABEL_106;
  }
  v45 = 0;
  if ((v2 & 0x2000) != 0)
  {
LABEL_107:
    v44 = *((int *)this + 52);
    if ((v2 & 0x20) != 0)
      goto LABEL_108;
    goto LABEL_116;
  }
LABEL_115:
  v44 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_108:
    if (*((double *)this + 6) == 0.0)
      v36 = 0;
    else
      v36 = *((_QWORD *)this + 6);
    goto LABEL_117;
  }
LABEL_116:
  v36 = 0;
LABEL_117:
  v38 = v28;
  if ((v2 & 4) != 0)
  {
    if (*((double *)this + 3) == 0.0)
      v39 = 0;
    else
      v39 = *((_QWORD *)this + 3);
  }
  else
  {
    v39 = 0;
  }
  v40 = (CMMsl::SteadinessModelResult *)*((_QWORD *)this + 17);
  if (v40)
    v41 = CMMsl::SteadinessModelResult::hash_value(v40);
  else
    v41 = 0;
  v42 = *((_QWORD *)this + 16);
  if (v42)
    v42 = CMMsl::SteadinessModelHarmonicFeatures::hash_value((CMMsl::SteadinessModelHarmonicFeatures *)v42);
  return *(_QWORD *)&v67 ^ *(_QWORD *)&v68 ^ v66 ^ v65 ^ v64 ^ v63 ^ v62 ^ v61 ^ *(_QWORD *)&v60 ^ v59 ^ (unint64_t)v72 ^ *(_QWORD *)&v58 ^ v57 ^ *(_QWORD *)&v56 ^ v55 ^ v70 ^ v71 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ (unint64_t)v69 ^ v54 ^ (unint64_t)v38 ^ *(_QWORD *)&v53 ^ *(_QWORD *)&v52 ^ v51 ^ v50 ^ *(_QWORD *)&v49 ^ *(_QWORD *)&v48 ^ *(_QWORD *)&v47 ^ *(_QWORD *)&v46 ^ v45 ^ v44 ^ v36 ^ v39 ^ v41 ^ v42;
}

uint64_t CMMsl::WalkingSteadinessClassification::makeEventResult(uint64_t this)
{
  if (!*(_QWORD *)(this + 64))
    operator new();
  return this;
}

uint64_t CMMsl::WalkingSteadinessClassification::makeModelGaitBaselineResult(uint64_t this)
{
  if (!*(_QWORD *)(this + 120))
    operator new();
  return this;
}

uint64_t CMMsl::WalkingSteadinessClassification::makeModelGaitBaselineFeatures(uint64_t this)
{
  if (!*(_QWORD *)(this + 112))
    operator new();
  return this;
}

uint64_t CMMsl::WalkingSteadinessClassification::makeModelContinuousWalkingResult(uint64_t this)
{
  if (!*(_QWORD *)(this + 104))
    operator new();
  return this;
}

uint64_t CMMsl::WalkingSteadinessClassification::makeModelContinuousWalkingFeatures(uint64_t this)
{
  if (!*(_QWORD *)(this + 96))
    operator new();
  return this;
}

uint64_t CMMsl::WalkingSteadinessClassification::makeModelTemporalDispersionResult(uint64_t this)
{
  if (!*(_QWORD *)(this + 152))
    operator new();
  return this;
}

uint64_t CMMsl::WalkingSteadinessClassification::makeModelTemporalDispersionFeatures(uint64_t this)
{
  if (!*(_QWORD *)(this + 144))
    operator new();
  return this;
}

uint64_t CMMsl::WalkingSteadinessClassification::makeModelTemporalEntropyResult(uint64_t this)
{
  if (!*(_QWORD *)(this + 168))
    operator new();
  return this;
}

uint64_t CMMsl::WalkingSteadinessClassification::makeModelTemporalEntropyFeatures(uint64_t this)
{
  if (!*(_QWORD *)(this + 160))
    operator new();
  return this;
}

uint64_t CMMsl::WalkingSteadinessClassification::makeModelBalanceFeatures(uint64_t this)
{
  if (!*(_QWORD *)(this + 88))
    operator new();
  return this;
}

uint64_t CMMsl::WalkingSteadinessClassification::makeModelHarmonicResult(uint64_t this)
{
  if (!*(_QWORD *)(this + 136))
    operator new();
  return this;
}

uint64_t CMMsl::WalkingSteadinessClassification::makeModelHarmonicFeatures(uint64_t this)
{
  if (!*(_QWORD *)(this + 128))
    operator new();
  return this;
}

void CMMsl::WatchActiveCalories::~WatchActiveCalories(CMMsl::WatchActiveCalories *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::WatchActiveCalories::WatchActiveCalories(CMMsl::WatchActiveCalories *this, const CMMsl::WatchActiveCalories *a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)this = off_100355378;
  *((_DWORD *)this + 7) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 4) != 0)
  {
    LODWORD(result) = *((_DWORD *)a2 + 6);
    v3 = 4;
    *((_BYTE *)this + 28) = 4;
    *((_DWORD *)this + 6) = LODWORD(result);
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 2) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_BYTE *)this + 28) = v3;
    *((double *)this + 2) = result;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    *((_BYTE *)this + 28) = v3 | 1;
    *((double *)this + 1) = result;
  }
  return result;
}

uint64_t CMMsl::WatchActiveCalories::operator=(uint64_t a1, uint64_t a2, float a3, double a4, double a5)
{
  char v6;
  char v7;
  int v8;
  int v9;
  __int128 v10;
  void (**v12)(CMMsl::WatchActiveCalories *__hidden);
  __int128 v13;
  int v14;
  int v15;

  if (a1 != a2)
  {
    v12 = off_100355378;
    v15 = 0;
    v6 = *(_BYTE *)(a2 + 28);
    if ((v6 & 4) != 0)
    {
      a3 = *(float *)(a2 + 24);
      v7 = 4;
      LOBYTE(v15) = 4;
      if ((v6 & 2) != 0)
      {
LABEL_4:
        a4 = *(double *)(a2 + 16);
        v7 |= 2u;
        LOBYTE(v15) = v7;
        if ((v6 & 1) != 0)
          goto LABEL_8;
        goto LABEL_9;
      }
    }
    else
    {
      v7 = 0;
      if ((*(_BYTE *)(a2 + 28) & 2) != 0)
        goto LABEL_4;
    }
    if ((v6 & 1) != 0)
    {
LABEL_8:
      a5 = *(double *)(a2 + 8);
      LOBYTE(v15) = v7 | 1;
    }
LABEL_9:
    v8 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v15;
    v15 = v8;
    v9 = *(_DWORD *)(a1 + 24);
    *(float *)(a1 + 24) = a3;
    v14 = v9;
    v10 = *(_OWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a5;
    *(double *)(a1 + 16) = a4;
    v13 = v10;
    PB::Base::~Base((PB::Base *)&v12);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::WatchActiveCalories *a2, CMMsl::WatchActiveCalories *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  double result;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::WatchActiveCalories::WatchActiveCalories(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100355378;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100355378;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::WatchActiveCalories::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  __int128 v6;
  __int128 v7;
  void (**v9)(CMMsl::WatchActiveCalories *__hidden);
  __int128 v10;
  int v11;
  int v12;

  if (a1 != a2)
  {
    v9 = off_100355378;
    v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    v4 = *(_DWORD *)(a2 + 24);
    v12 = *(_DWORD *)(a1 + 28);
    v5 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    v11 = v5;
    v6 = *(_OWORD *)(a1 + 8);
    v7 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 28) = v3;
    *(_OWORD *)(a1 + 8) = v7;
    v10 = v6;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::WatchActiveCalories::formatText(CMMsl::WatchActiveCalories *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 4) == 0)
  {
    if ((*((_BYTE *)this + 28) & 1) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(a2, "globalMachtime", *((double *)this + 1));
    if ((*((_BYTE *)this + 28) & 2) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_4;
  }
  PB::TextFormatter::format(a2, "calories_kCal", *((float *)this + 6));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 1) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 2) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "localMachtime", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WatchActiveCalories::readFrom(CMMsl::WatchActiveCalories *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
        break;
      if ((_DWORD)v20 == 2)
      {
        *((_BYTE *)this + 28) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_32;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_36:
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_37;
      }
      if ((_DWORD)v20 != 1)
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        goto LABEL_38;
      }
      *((_BYTE *)this + 28) |= 4u;
      v2 = *((_QWORD *)a2 + 1);
      if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
      {
LABEL_32:
        *((_BYTE *)a2 + 24) = 1;
        goto LABEL_38;
      }
      *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
      v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_37:
      *((_QWORD *)a2 + 1) = v2;
LABEL_38:
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    *((_BYTE *)this + 28) |= 1u;
    v2 = *((_QWORD *)a2 + 1);
    if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
      goto LABEL_32;
    *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
    goto LABEL_36;
  }
  return v4 == 0;
}

uint64_t CMMsl::WatchActiveCalories::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 24), 1u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        return this;
      return PB::Writer::write(a2, *(double *)(v3 + 8), 3u);
    }
  }
  else if ((*(_BYTE *)(this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
  if ((*(_BYTE *)(v3 + 28) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8), 3u);
  return this;
}

uint64_t CMMsl::WatchActiveCalories::hash_value(CMMsl::WatchActiveCalories *this)
{
  uint64_t v1;
  double v2;
  double v3;
  float v4;

  if ((*((_BYTE *)this + 28) & 4) != 0)
  {
    v4 = *((float *)this + 6);
    v1 = LODWORD(v4);
    if (v4 == 0.0)
      v1 = 0;
    if ((*((_BYTE *)this + 28) & 2) != 0)
    {
LABEL_3:
      v2 = *((double *)this + 2);
      if (v2 == 0.0)
        v2 = 0.0;
      if ((*((_BYTE *)this + 28) & 1) != 0)
        goto LABEL_6;
LABEL_13:
      v3 = 0.0;
      return *(_QWORD *)&v2 ^ v1 ^ *(_QWORD *)&v3;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 28) & 2) != 0)
      goto LABEL_3;
  }
  v2 = 0.0;
  if ((*((_BYTE *)this + 28) & 1) == 0)
    goto LABEL_13;
LABEL_6:
  v3 = *((double *)this + 1);
  if (v3 == 0.0)
    v3 = 0.0;
  return *(_QWORD *)&v2 ^ v1 ^ *(_QWORD *)&v3;
}

void CMMsl::WatchBasalCalories::~WatchBasalCalories(CMMsl::WatchBasalCalories *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::WatchBasalCalories::WatchBasalCalories(CMMsl::WatchBasalCalories *this, const CMMsl::WatchBasalCalories *a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)this = off_1003553B0;
  *((_DWORD *)this + 7) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 4) != 0)
  {
    LODWORD(result) = *((_DWORD *)a2 + 6);
    v3 = 4;
    *((_BYTE *)this + 28) = 4;
    *((_DWORD *)this + 6) = LODWORD(result);
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 2) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_BYTE *)this + 28) = v3;
    *((double *)this + 2) = result;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    *((_BYTE *)this + 28) = v3 | 1;
    *((double *)this + 1) = result;
  }
  return result;
}

uint64_t CMMsl::WatchBasalCalories::operator=(uint64_t a1, uint64_t a2, float a3, double a4, double a5)
{
  char v6;
  char v7;
  int v8;
  int v9;
  __int128 v10;
  void (**v12)(CMMsl::WatchBasalCalories *__hidden);
  __int128 v13;
  int v14;
  int v15;

  if (a1 != a2)
  {
    v12 = off_1003553B0;
    v15 = 0;
    v6 = *(_BYTE *)(a2 + 28);
    if ((v6 & 4) != 0)
    {
      a3 = *(float *)(a2 + 24);
      v7 = 4;
      LOBYTE(v15) = 4;
      if ((v6 & 2) != 0)
      {
LABEL_4:
        a4 = *(double *)(a2 + 16);
        v7 |= 2u;
        LOBYTE(v15) = v7;
        if ((v6 & 1) != 0)
          goto LABEL_8;
        goto LABEL_9;
      }
    }
    else
    {
      v7 = 0;
      if ((*(_BYTE *)(a2 + 28) & 2) != 0)
        goto LABEL_4;
    }
    if ((v6 & 1) != 0)
    {
LABEL_8:
      a5 = *(double *)(a2 + 8);
      LOBYTE(v15) = v7 | 1;
    }
LABEL_9:
    v8 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v15;
    v15 = v8;
    v9 = *(_DWORD *)(a1 + 24);
    *(float *)(a1 + 24) = a3;
    v14 = v9;
    v10 = *(_OWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a5;
    *(double *)(a1 + 16) = a4;
    v13 = v10;
    PB::Base::~Base((PB::Base *)&v12);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::WatchBasalCalories *a2, CMMsl::WatchBasalCalories *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  double result;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::WatchBasalCalories::WatchBasalCalories(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_1003553B0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_1003553B0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::WatchBasalCalories::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  __int128 v6;
  __int128 v7;
  void (**v9)(CMMsl::WatchBasalCalories *__hidden);
  __int128 v10;
  int v11;
  int v12;

  if (a1 != a2)
  {
    v9 = off_1003553B0;
    v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    v4 = *(_DWORD *)(a2 + 24);
    v12 = *(_DWORD *)(a1 + 28);
    v5 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    v11 = v5;
    v6 = *(_OWORD *)(a1 + 8);
    v7 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 28) = v3;
    *(_OWORD *)(a1 + 8) = v7;
    v10 = v6;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::WatchBasalCalories::formatText(CMMsl::WatchBasalCalories *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 4) == 0)
  {
    if ((*((_BYTE *)this + 28) & 1) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(a2, "globalMachtime", *((double *)this + 1));
    if ((*((_BYTE *)this + 28) & 2) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_4;
  }
  PB::TextFormatter::format(a2, "calories_kCal", *((float *)this + 6));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 1) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 2) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "localMachtime", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WatchBasalCalories::readFrom(CMMsl::WatchBasalCalories *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
        break;
      if ((_DWORD)v20 == 2)
      {
        *((_BYTE *)this + 28) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_32;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_36:
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_37;
      }
      if ((_DWORD)v20 != 1)
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        goto LABEL_38;
      }
      *((_BYTE *)this + 28) |= 4u;
      v2 = *((_QWORD *)a2 + 1);
      if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
      {
LABEL_32:
        *((_BYTE *)a2 + 24) = 1;
        goto LABEL_38;
      }
      *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
      v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_37:
      *((_QWORD *)a2 + 1) = v2;
LABEL_38:
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    *((_BYTE *)this + 28) |= 1u;
    v2 = *((_QWORD *)a2 + 1);
    if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
      goto LABEL_32;
    *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
    goto LABEL_36;
  }
  return v4 == 0;
}

uint64_t CMMsl::WatchBasalCalories::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 24), 1u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        return this;
      return PB::Writer::write(a2, *(double *)(v3 + 8), 3u);
    }
  }
  else if ((*(_BYTE *)(this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
  if ((*(_BYTE *)(v3 + 28) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8), 3u);
  return this;
}

uint64_t CMMsl::WatchBasalCalories::hash_value(CMMsl::WatchBasalCalories *this)
{
  uint64_t v1;
  double v2;
  double v3;
  float v4;

  if ((*((_BYTE *)this + 28) & 4) != 0)
  {
    v4 = *((float *)this + 6);
    v1 = LODWORD(v4);
    if (v4 == 0.0)
      v1 = 0;
    if ((*((_BYTE *)this + 28) & 2) != 0)
    {
LABEL_3:
      v2 = *((double *)this + 2);
      if (v2 == 0.0)
        v2 = 0.0;
      if ((*((_BYTE *)this + 28) & 1) != 0)
        goto LABEL_6;
LABEL_13:
      v3 = 0.0;
      return *(_QWORD *)&v2 ^ v1 ^ *(_QWORD *)&v3;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 28) & 2) != 0)
      goto LABEL_3;
  }
  v2 = 0.0;
  if ((*((_BYTE *)this + 28) & 1) == 0)
    goto LABEL_13;
LABEL_6:
  v3 = *((double *)this + 1);
  if (v3 == 0.0)
    v3 = 0.0;
  return *(_QWORD *)&v2 ^ v1 ^ *(_QWORD *)&v3;
}

void CMMsl::WatchEnclosureMaterial::~WatchEnclosureMaterial(CMMsl::WatchEnclosureMaterial *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::WatchEnclosureMaterial::WatchEnclosureMaterial(uint64_t this, const CMMsl::WatchEnclosureMaterial *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_1003553E8;
  *(_DWORD *)(this + 24) = 0;
  if ((*((_BYTE *)a2 + 24) & 2) != 0)
  {
    v3 = *((_QWORD *)a2 + 2);
    *(_BYTE *)(this + 24) = 2;
    *(_QWORD *)(this + 16) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 24) & 1) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*((_BYTE *)a2 + 24) & 1) != 0)
  {
LABEL_5:
    v4 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 24) = v2;
    *(_QWORD *)(this + 8) = v4;
  }
  return this;
}

uint64_t CMMsl::WatchEnclosureMaterial::operator=(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  int v12;

  if (a1 != a2)
  {
    v11[0] = off_1003553E8;
    v12 = 0;
    v5 = *(_BYTE *)(a2 + 24);
    if ((v5 & 2) != 0)
    {
      a3 = *(double *)(a2 + 16);
      LOBYTE(v12) = 2;
      v6 = 3;
      if ((v5 & 1) != 0)
      {
LABEL_6:
        v3 = *(_QWORD *)(a2 + 8);
        LOBYTE(v12) = v6;
      }
    }
    else
    {
      v6 = 1;
      if ((*(_BYTE *)(a2 + 24) & 1) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v12;
    v12 = v7;
    v8 = *(_QWORD *)(a1 + 16);
    *(double *)(a1 + 16) = a3;
    v11[2] = v8;
    v9 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v11[1] = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::WatchEnclosureMaterial *a2, CMMsl::WatchEnclosureMaterial *a3)
{
  int v3;
  double result;
  uint64_t v5;

  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  return result;
}

double CMMsl::WatchEnclosureMaterial::WatchEnclosureMaterial(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_1003553E8;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_1003553E8;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::WatchEnclosureMaterial::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v4 = *(_QWORD *)(a2 + 16);
    v5 = *(_QWORD *)(a2 + 8);
    v6 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v4;
    v10[2] = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v5;
    v10[0] = off_1003553E8;
    v10[1] = v8;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::WatchEnclosureMaterial::formatText(CMMsl::WatchEnclosureMaterial *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "enclosureMaterial", *((_QWORD *)this + 1));
    v5 = *((_BYTE *)this + 24);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WatchEnclosureMaterial::readFrom(CMMsl::WatchEnclosureMaterial *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 24) |= 1u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              v25 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_47;
            }
            v30 = v21++;
            v31 = *(_BYTE *)(v22 + v30);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              v25 = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v25 = 0;
LABEL_46:
          v2 = v30 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              v25 = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_QWORD *)this + 1) = v25;
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 24) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WatchEnclosureMaterial::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 24);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
    v4 = *(_BYTE *)(v3 + 24);
  }
  if ((v4 & 1) != 0)
    return PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 8), 2u);
  return this;
}

uint64_t CMMsl::WatchEnclosureMaterial::hash_value(CMMsl::WatchEnclosureMaterial *this)
{
  double v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 24) & 2) != 0)
  {
    v1 = *((double *)this + 2);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 24) & 1) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0;
    return v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 24) & 1) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((_QWORD *)this + 1);
  return v2 ^ *(_QWORD *)&v1;
}

void CMMsl::WatchHeartRateData::~WatchHeartRateData(CMMsl::WatchHeartRateData *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_100355420;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_100355420;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_100355420;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::WatchHeartRateData::WatchHeartRateData(uint64_t this, const CMMsl::WatchHeartRateData *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_100355420;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  if ((*((_BYTE *)a2 + 32) & 2) != 0)
  {
    v3 = *((_QWORD *)a2 + 2);
    *(_BYTE *)(this + 32) = 2;
    *(_QWORD *)(this + 16) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 32) & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*((_BYTE *)a2 + 32) & 1) != 0)
  {
LABEL_5:
    v4 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 32) = v2;
    *(_QWORD *)(this + 8) = v4;
  }
LABEL_6:
  if (*((_QWORD *)a2 + 3))
    operator new();
  return this;
}

uint64_t CMMsl::WatchHeartRateData::operator=(uint64_t a1, const CMMsl::WatchHeartRateData *a2)
{
  int v3;
  __int128 v4;
  uint64_t v5;
  void (**v7)(CMMsl::WatchHeartRateData *__hidden);
  __int128 v8;
  uint64_t v9;
  int v10;

  if ((const CMMsl::WatchHeartRateData *)a1 != a2)
  {
    CMMsl::WatchHeartRateData::WatchHeartRateData((uint64_t)&v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    v10 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    v7 = off_100355420;
    v9 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::WatchHeartRateData *a2, CMMsl::WatchHeartRateData *a3)
{
  int v3;
  uint64_t v4;
  double result;
  uint64_t v6;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  return result;
}

uint64_t CMMsl::WatchHeartRateData::WatchHeartRateData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_100355420;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::WatchHeartRateData::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  void (**v9)(CMMsl::WatchHeartRateData *__hidden);
  __int128 v10;
  uint64_t v11;
  int v12;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v4 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = 0;
    v12 = *(_DWORD *)(a1 + 32);
    v5 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    v10 = v6;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v4;
    v9 = off_100355420;
    v11 = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::WatchHeartRateData::formatText(CMMsl::WatchHeartRateData *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "globalMachtime", *((double *)this + 1));
    v5 = *((_BYTE *)this + 32);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "localMachtime", *((double *)this + 2));
  v6 = *((_QWORD *)this + 3);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WatchHeartRateData::readFrom(CMMsl::WatchHeartRateData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
        operator new();
      if ((_DWORD)v20 == 2)
      {
        *((_BYTE *)this + 32) |= 1u;
        v22 = *((_QWORD *)a2 + 1);
        if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_30;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v22);
      }
      else
      {
        if ((_DWORD)v20 != 1)
        {
          result = PB::Reader::skip(a2, v20, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_35;
        }
        *((_BYTE *)this + 32) |= 2u;
        v21 = *((_QWORD *)a2 + 1);
        if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((_QWORD *)a2 + 2))
        {
LABEL_30:
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_35;
        }
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v21);
      }
      *((_QWORD *)a2 + 1) += 8;
LABEL_35:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::WatchHeartRateData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  const PB::Base *v5;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
    v4 = *(_BYTE *)(v3 + 32);
  }
  if ((v4 & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(v3 + 8), 2u);
  v5 = *(const PB::Base **)(v3 + 24);
  if (v5)
    return PB::Writer::writeSubmessage(a2, v5, 3u);
  return this;
}

unint64_t CMMsl::WatchHeartRateData::hash_value(CMMsl::WatchHeartRateData *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  if ((*((_BYTE *)this + 32) & 2) != 0)
  {
    if (*((double *)this + 2) == 0.0)
      v1 = 0;
    else
      v1 = *((_QWORD *)this + 2);
    if ((*((_BYTE *)this + 32) & 1) != 0)
      goto LABEL_3;
LABEL_10:
    v2 = 0;
    goto LABEL_11;
  }
  v1 = 0;
  if ((*((_BYTE *)this + 32) & 1) == 0)
    goto LABEL_10;
LABEL_3:
  if (*((double *)this + 1) == 0.0)
    v2 = 0;
  else
    v2 = *((_QWORD *)this + 1);
LABEL_11:
  v3 = *((_QWORD *)this + 3);
  if (v3)
    v3 = CMMsl::OnsetHeartRateData::hash_value((CMMsl::OnsetHeartRateData *)v3);
  return v2 ^ v1 ^ v3;
}

uint64_t CMMsl::WatchHeartRateData::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 24))
    operator new();
  return this;
}

void CMMsl::WatchOnWristState::~WatchOnWristState(CMMsl::WatchOnWristState *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::WatchOnWristState::WatchOnWristState(uint64_t this, const CMMsl::WatchOnWristState *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;

  *(_QWORD *)this = off_100355458;
  *(_DWORD *)(this + 40) = 0;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 40) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 40) & 4) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *(_BYTE *)(this + 40) = v3;
    *(_DWORD *)(this + 24) = v5;
    v2 = *((_BYTE *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    v6 = *((_DWORD *)a2 + 8);
    v3 |= 0x10u;
    *(_BYTE *)(this + 40) = v3;
    *(_DWORD *)(this + 32) = v6;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_15;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *(_BYTE *)(this + 40) = v3;
  *(_DWORD *)(this + 28) = v7;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_16;
  }
LABEL_15:
  v8 = *((_BYTE *)a2 + 37);
  v3 |= 0x40u;
  *(_BYTE *)(this + 40) = v3;
  *(_BYTE *)(this + 37) = v8;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_17;
  }
LABEL_16:
  v9 = *((_BYTE *)a2 + 36);
  v3 |= 0x20u;
  *(_BYTE *)(this + 40) = v3;
  *(_BYTE *)(this + 36) = v9;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 2) == 0)
      return this;
LABEL_18:
    v11 = *((_QWORD *)a2 + 2);
    *(_BYTE *)(this + 40) = v3 | 2;
    *(_QWORD *)(this + 16) = v11;
    return this;
  }
LABEL_17:
  v10 = *((_BYTE *)a2 + 38);
  v3 |= 0x80u;
  *(_BYTE *)(this + 40) = v3;
  *(_BYTE *)(this + 38) = v10;
  if ((*((_BYTE *)a2 + 40) & 2) != 0)
    goto LABEL_18;
  return this;
}

uint64_t CMMsl::WatchOnWristState::operator=(uint64_t a1, const CMMsl::WatchOnWristState *a2)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v14;
  char v15;
  char v16;
  int v17;

  if ((const CMMsl::WatchOnWristState *)a1 != a2)
  {
    CMMsl::WatchOnWristState::WatchOnWristState((uint64_t)&v9, a2);
    v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v17;
    v17 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v10;
    v10 = v4;
    v5 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v13;
    v13 = v5;
    v6 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v12;
    v12 = v6;
    LOBYTE(v5) = *(_BYTE *)(a1 + 37);
    *(_BYTE *)(a1 + 37) = v15;
    v15 = v5;
    LOBYTE(v5) = *(_BYTE *)(a1 + 36);
    *(_BYTE *)(a1 + 36) = v14;
    v14 = v5;
    LOBYTE(v5) = *(_BYTE *)(a1 + 38);
    *(_BYTE *)(a1 + 38) = v16;
    v16 = v5;
    v7 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v11;
    v11 = v7;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::WatchOnWristState *a2, CMMsl::WatchOnWristState *a3)
{
  int v3;
  double result;
  int v5;
  int v6;
  int v7;
  uint64_t v8;

  v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v5 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  v6 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6;
  v7 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 37);
  *((_BYTE *)this + 37) = *((_BYTE *)a2 + 37);
  *((_BYTE *)a2 + 37) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 36);
  *((_BYTE *)this + 36) = *((_BYTE *)a2 + 36);
  *((_BYTE *)a2 + 36) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 38);
  *((_BYTE *)this + 38) = *((_BYTE *)a2 + 38);
  *((_BYTE *)a2 + 38) = v7;
  v8 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v8;
  return result;
}

double CMMsl::WatchOnWristState::WatchOnWristState(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100355458;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 37) = *(_BYTE *)(a2 + 37);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_BYTE *)(a1 + 38) = *(_BYTE *)(a2 + 38);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100355458;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 37) = *(_BYTE *)(a2 + 37);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_BYTE *)(a1 + 38) = *(_BYTE *)(a2 + 38);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::WatchOnWristState::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[4];
  int v16;
  char v17;
  char v18;
  char v19;
  int v20;

  if (a1 != a2)
  {
    v15[0] = off_100355458;
    v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a2 + 32);
    v6 = *(_BYTE *)(a2 + 37);
    v7 = *(_BYTE *)(a2 + 36);
    v8 = *(_BYTE *)(a2 + 38);
    v9 = *(_QWORD *)(a2 + 16);
    v20 = *(_DWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v15[1] = v10;
    v16 = *(_DWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 24);
    v12 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 40) = v3;
    *(_DWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 24) = v12;
    v15[3] = v11;
    LOBYTE(v3) = *(_BYTE *)(a1 + 37);
    *(_BYTE *)(a1 + 37) = v6;
    v18 = v3;
    LOBYTE(v3) = *(_BYTE *)(a1 + 36);
    *(_BYTE *)(a1 + 36) = v7;
    v17 = v3;
    LOBYTE(v3) = *(_BYTE *)(a1 + 38);
    *(_BYTE *)(a1 + 38) = v8;
    v19 = v3;
    v13 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v9;
    v15[2] = v13;
    PB::Base::~Base((PB::Base *)v15);
  }
  return a1;
}

uint64_t CMMsl::WatchOnWristState::formatText(CMMsl::WatchOnWristState *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "date", *((double *)this + 1));
    v5 = *((_BYTE *)this + 40);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((*((_BYTE *)this + 40) & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "isForcedOnWristEnabled", *((_BYTE *)this + 36));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "isOnCharger", *((_BYTE *)this + 37));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "isWristDetectionEnabled", *((_BYTE *)this + 38));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "onWrist", *((_DWORD *)this + 6));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0)
      goto LABEL_8;
LABEL_17:
    PB::TextFormatter::format(a2, "onWristSensor", *((_DWORD *)this + 8));
    if ((*((_BYTE *)this + 40) & 2) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_9;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "onWristConfidence", *((_DWORD *)this + 7));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 0x10) != 0)
    goto LABEL_17;
LABEL_8:
  if ((v5 & 2) != 0)
LABEL_9:
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WatchOnWristState::readFrom(CMMsl::WatchOnWristState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  int v39;
  BOOL v40;
  int v41;
  BOOL v42;
  int v43;
  BOOL v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 40) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_116;
            case 2u:
              *((_BYTE *)this + 40) |= 4u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_100;
                  }
                  v53 = v21++;
                  v54 = *(_BYTE *)(v22 + v53);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_99:
                    v2 = v53 + 1;
                    goto LABEL_100;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_99;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_100;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_100:
              *((_DWORD *)this + 6) = v25;
              goto LABEL_116;
            case 3u:
              *((_BYTE *)this + 40) |= 0x10u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v55 = 0;
                v56 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_105;
                  }
                  v57 = v27++;
                  v58 = *(_BYTE *)(v28 + v57);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0)
                    break;
                  v55 += 7;
                  v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_104:
                    v2 = v57 + 1;
                    goto LABEL_105;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_104;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_105;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_105:
              *((_DWORD *)this + 8) = v31;
              goto LABEL_116;
            case 4u:
              *((_BYTE *)this + 40) |= 8u;
              v33 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_110;
                  }
                  v61 = v33++;
                  v62 = *(_BYTE *)(v34 + v61);
                  *((_QWORD *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_109:
                    v2 = v61 + 1;
                    goto LABEL_110;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v37) = 0;
                goto LABEL_109;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)a2 + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_110;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_110:
              *((_DWORD *)this + 7) = v37;
              goto LABEL_116;
            case 5u:
              *((_BYTE *)this + 40) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v40 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v39 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v40 = v39 != 0;
              }
              *((_BYTE *)this + 37) = v40;
              goto LABEL_116;
            case 6u:
              *((_BYTE *)this + 40) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v42 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v41 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v42 = v41 != 0;
              }
              *((_BYTE *)this + 36) = v42;
              goto LABEL_116;
            case 7u:
              *((_BYTE *)this + 40) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v44 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v43 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v44 = v43 != 0;
              }
              *((_BYTE *)this + 38) = v44;
              goto LABEL_116;
            case 8u:
              *((_BYTE *)this + 40) |= 2u;
              v45 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v46 = *(_QWORD *)a2;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    v49 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_115;
                  }
                  v65 = v45++;
                  v66 = *(_BYTE *)(v46 + v65);
                  *((_QWORD *)a2 + 1) = v45;
                  v49 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    v49 = 0;
LABEL_114:
                    v2 = v65 + 1;
                    goto LABEL_115;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v49 = 0;
                goto LABEL_114;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)a2 + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_115;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              v49 = 0;
LABEL_115:
              *((_QWORD *)this + 2) = v49;
LABEL_116:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_116;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::WatchOnWristState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 40);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(this + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 3u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 4u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 37), 5u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 36), 6u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 16), 8u);
  }
LABEL_16:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 38), 7u);
  if ((*(_BYTE *)(v3 + 40) & 2) != 0)
    return PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 16), 8u);
  return this;
}

uint64_t CMMsl::WatchOnWristState::hash_value(CMMsl::WatchOnWristState *this)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((*((_BYTE *)this + 40) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 40) & 4) != 0)
    {
LABEL_3:
      v2 = *((unsigned int *)this + 6);
      if ((*((_BYTE *)this + 40) & 0x10) != 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 40) & 4) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 40) & 0x10) != 0)
  {
LABEL_4:
    v3 = *((unsigned int *)this + 8);
    if ((*((_BYTE *)this + 40) & 8) != 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  v3 = 0;
  if ((*((_BYTE *)this + 40) & 8) != 0)
  {
LABEL_5:
    v4 = *((unsigned int *)this + 7);
    if ((*((_BYTE *)this + 40) & 0x40) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  v4 = 0;
  if ((*((_BYTE *)this + 40) & 0x40) != 0)
  {
LABEL_6:
    v5 = *((unsigned __int8 *)this + 37);
    if ((*((_BYTE *)this + 40) & 0x20) != 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  v5 = 0;
  if ((*((_BYTE *)this + 40) & 0x20) != 0)
  {
LABEL_7:
    v6 = *((unsigned __int8 *)this + 36);
    if ((*((_BYTE *)this + 40) & 0x80) != 0)
      goto LABEL_8;
LABEL_18:
    v7 = 0;
    if ((*((_BYTE *)this + 40) & 2) != 0)
      goto LABEL_9;
LABEL_19:
    v8 = 0;
    return v2 ^ *(_QWORD *)&v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8;
  }
LABEL_17:
  v6 = 0;
  if ((*((_BYTE *)this + 40) & 0x80) == 0)
    goto LABEL_18;
LABEL_8:
  v7 = *((unsigned __int8 *)this + 38);
  if ((*((_BYTE *)this + 40) & 2) == 0)
    goto LABEL_19;
LABEL_9:
  v8 = *((_QWORD *)this + 2);
  return v2 ^ *(_QWORD *)&v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8;
}

void CMMsl::WatchOrientationSettings::~WatchOrientationSettings(CMMsl::WatchOrientationSettings *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::WatchOrientationSettings::WatchOrientationSettings(uint64_t this, const CMMsl::WatchOrientationSettings *a2)
{
  char v2;
  int v3;
  int v4;

  *(_QWORD *)this = off_100355490;
  *(_DWORD *)(this + 16) = 0;
  if ((*((_BYTE *)a2 + 16) & 2) != 0)
  {
    v3 = *((_DWORD *)a2 + 3);
    *(_BYTE *)(this + 16) = 2;
    *(_DWORD *)(this + 12) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 16) & 1) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 16) = v2;
    *(_DWORD *)(this + 8) = v4;
  }
  return this;
}

uint64_t CMMsl::WatchOrientationSettings::operator=(uint64_t a1, uint64_t a2)
{
  int v2;
  void (**v4)(CMMsl::WatchOrientationSettings *__hidden);
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  _QWORD v10[2];
  int v11;

  if (a1 != a2)
  {
    v4 = off_100355490;
    v10[0] = off_100355490;
    v11 = 0;
    v5 = *(_BYTE *)(a2 + 16);
    if ((v5 & 2) != 0)
    {
      LODWORD(v4) = *(_DWORD *)(a2 + 12);
      LOBYTE(v11) = 2;
      v6 = 3;
      if ((v5 & 1) != 0)
      {
LABEL_6:
        v2 = *(_DWORD *)(a2 + 8);
        LOBYTE(v11) = v6;
      }
    }
    else
    {
      v6 = 1;
      if ((*(_BYTE *)(a2 + 16) & 1) != 0)
        goto LABEL_6;
    }
    v7 = v11;
    v11 = *(_DWORD *)(a1 + 16);
    v8 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 12) = (_DWORD)v4;
    *(_DWORD *)(a1 + 16) = v7;
    *(_DWORD *)(a1 + 8) = v2;
    v10[1] = v8;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

{
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  int v8;

  if (a1 != a2)
  {
    v7[0] = off_100355490;
    v3 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    v8 = *(_DWORD *)(a1 + 16);
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 16) = v3;
    *(_QWORD *)(a1 + 8) = v5;
    v7[1] = v4;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

_DWORD *CMMsl::swap(_DWORD *this, CMMsl::WatchOrientationSettings *a2, CMMsl::WatchOrientationSettings *a3)
{
  int v3;
  int v4;
  int v5;

  v3 = this[4];
  this[4] = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  v4 = this[3];
  this[3] = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v4;
  v5 = this[2];
  this[2] = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v5;
  return this;
}

uint64_t CMMsl::WatchOrientationSettings::WatchOrientationSettings(uint64_t result, _DWORD *a2)
{
  *(_QWORD *)result = off_100355490;
  *(_DWORD *)(result + 16) = a2[4];
  a2[4] = 0;
  *(_DWORD *)(result + 12) = a2[3];
  *(_DWORD *)(result + 8) = a2[2];
  return result;
}

{
  *(_QWORD *)result = off_100355490;
  *(_DWORD *)(result + 16) = a2[4];
  a2[4] = 0;
  *(_DWORD *)(result + 12) = a2[3];
  *(_DWORD *)(result + 8) = a2[2];
  return result;
}

uint64_t CMMsl::WatchOrientationSettings::formatText(CMMsl::WatchOrientationSettings *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 16);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "crown", *((_DWORD *)this + 2));
    v5 = *((_BYTE *)this + 16);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "wrist", *((_DWORD *)this + 3));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WatchOrientationSettings::readFrom(CMMsl::WatchOrientationSettings *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t result;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)a2 + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 16) |= 1u;
        v27 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v28 = *(_QWORD *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v31 = 0;
          if (v2 <= v27)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_64;
            }
            v40 = v27++;
            v41 = *(_BYTE *)(v28 + v40);
            *((_QWORD *)a2 + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_63;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v31) = 0;
LABEL_63:
          v3 = v40 + 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v3 = v27 + 1;
            *((_QWORD *)a2 + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v3;
            v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_64:
        *((_DWORD *)this + 2) = v31;
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 16) |= 2u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v34 = 0;
          v35 = 0;
          v25 = 0;
          if (v2 <= v21)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_60;
            }
            v36 = v21++;
            v37 = *(_BYTE *)(v22 + v36);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0)
              break;
            v34 += 7;
            v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_59;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v25) = 0;
LABEL_59:
          v3 = v36 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v3 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v3;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_60:
        *((_DWORD *)this + 3) = v25;
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WatchOrientationSettings::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 16);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 12), 1u);
    v4 = *(_BYTE *)(v3 + 16);
  }
  if ((v4 & 1) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 8), 2u);
  return this;
}

uint64_t CMMsl::WatchOrientationSettings::hash_value(CMMsl::WatchOrientationSettings *this)
{
  uint64_t v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 16) & 2) != 0)
  {
    v1 = *((unsigned int *)this + 3);
    if ((*((_BYTE *)this + 16) & 1) != 0)
      goto LABEL_3;
LABEL_5:
    v2 = 0;
    return v2 ^ v1;
  }
  v1 = 0;
  if ((*((_BYTE *)this + 16) & 1) == 0)
    goto LABEL_5;
LABEL_3:
  v2 = *((unsigned int *)this + 2);
  return v2 ^ v1;
}

uint64_t CMMsl::WifiScanEntry::WifiScanEntry(uint64_t this)
{
  *(_QWORD *)this = off_1003554C8;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003554C8;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::WifiScanEntry::~WifiScanEntry(CMMsl::WifiScanEntry *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::WifiScanEntry::WifiScanEntry(uint64_t this, const CMMsl::WifiScanEntry *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  char v7;

  *(_QWORD *)this = off_1003554C8;
  *(_DWORD *)(this + 32) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 32) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *(_BYTE *)(this + 32) = v3;
    *(_DWORD *)(this + 24) = v5;
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 2) == 0)
  {
    if ((v2 & 8) == 0)
      return this;
LABEL_10:
    v7 = *((_BYTE *)a2 + 28);
    *(_BYTE *)(this + 32) = v3 | 8;
    *(_BYTE *)(this + 28) = v7;
    return this;
  }
  v6 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_BYTE *)(this + 32) = v3;
  *(_QWORD *)(this + 16) = v6;
  if ((*((_BYTE *)a2 + 32) & 8) != 0)
    goto LABEL_10;
  return this;
}

uint64_t CMMsl::WifiScanEntry::operator=(uint64_t a1, const CMMsl::WifiScanEntry *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[8];
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  int v12;

  if ((const CMMsl::WifiScanEntry *)a1 != a2)
  {
    CMMsl::WifiScanEntry::WifiScanEntry((uint64_t)v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v12;
    v12 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v8 = v4;
    LODWORD(v4) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    v10 = v4;
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v9;
    v9 = v5;
    LOBYTE(v4) = *(_BYTE *)(a1 + 28);
    *(_BYTE *)(a1 + 28) = v11;
    v11 = v4;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::WifiScanEntry *a2, CMMsl::WifiScanEntry *a3)
{
  int v3;
  uint64_t v4;
  double result;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  LOBYTE(v4) = *((_BYTE *)this + 28);
  *((_BYTE *)this + 28) = *((_BYTE *)a2 + 28);
  *((_BYTE *)a2 + 28) = v4;
  return result;
}

double CMMsl::WifiScanEntry::WifiScanEntry(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_1003554C8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_1003554C8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  return result;
}

uint64_t CMMsl::WifiScanEntry::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _QWORD v13[3];
  int v14;
  char v15;
  int v16;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a2 + 24);
    v6 = *(_QWORD *)(a2 + 16);
    v7 = *(_BYTE *)(a2 + 28);
    v8 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v3;
    v16 = v8;
    v9 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v13[0] = off_1003554C8;
    v13[1] = v9;
    v10 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v5;
    v14 = v10;
    v11 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v6;
    v13[2] = v11;
    LOBYTE(v10) = *(_BYTE *)(a1 + 28);
    *(_BYTE *)(a1 + 28) = v7;
    v15 = v10;
    PB::Base::~Base((PB::Base *)v13);
  }
  return a1;
}

uint64_t CMMsl::WifiScanEntry::formatText(CMMsl::WifiScanEntry *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "entryId", *((_QWORD *)this + 1));
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "rssi", *((_DWORD *)this + 6));
      if ((*((_BYTE *)this + 32) & 2) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "isMoving", *((_BYTE *)this + 28));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WifiScanEntry::readFrom(CMMsl::WifiScanEntry *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  char v35;
  unsigned int v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 32) |= 1u;
              v20 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v21 = *(_QWORD *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v35 = 0;
                v36 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_64;
                  }
                  v37 = v20++;
                  v38 = *(_BYTE *)(v21 + v37);
                  *((_QWORD *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v38 & 0x7F) << v35;
                  if ((v38 & 0x80) == 0)
                    break;
                  v35 += 7;
                  v14 = v36++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_63;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v24 = 0;
LABEL_63:
                v2 = v37 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)a2 + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_64;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_64:
              *((_QWORD *)this + 1) = v24;
              goto LABEL_70;
            case 2u:
              *((_BYTE *)this + 32) |= 4u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v39 = 0;
                v40 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_69;
                  }
                  v41 = v27++;
                  v42 = *(_BYTE *)(v28 + v41);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0)
                    break;
                  v39 += 7;
                  v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_68:
                    v2 = v41 + 1;
                    goto LABEL_69;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_68;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_69;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_69:
              *((_DWORD *)this + 6) = -(v31 & 1) ^ ((int)v31 >> 1);
LABEL_70:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 3u:
              *((_BYTE *)this + 32) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_70;
            case 4u:
              *((_BYTE *)this + 32) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v34 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v34 = v33 != 0;
              }
              *((_BYTE *)this + 28) = v34;
              goto LABEL_70;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_70;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::WifiScanEntry::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeSInt(a2, *(_DWORD *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 28), 4u);
  }
LABEL_8:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
  if ((*(_BYTE *)(v3 + 32) & 8) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 28), 4u);
  return this;
}

BOOL CMMsl::WifiScanEntry::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 8) == 0;
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
    return (*(_BYTE *)(a2 + 32) & 8) != 0 && *(unsigned __int8 *)(a1 + 28) == *(unsigned __int8 *)(a2 + 28);
  return v2;
}

uint64_t CMMsl::WifiScanEntry::hash_value(CMMsl::WifiScanEntry *this)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  uint64_t v4;

  if ((*((_BYTE *)this + 32) & 1) != 0)
  {
    v1 = *((_QWORD *)this + 1);
    if ((*((_BYTE *)this + 32) & 4) != 0)
    {
LABEL_3:
      v2 = *((int *)this + 6);
      if ((*((_BYTE *)this + 32) & 2) != 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 32) & 2) != 0)
  {
LABEL_4:
    v3 = *((double *)this + 2);
    if (v3 == 0.0)
      v3 = 0.0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
      goto LABEL_7;
LABEL_11:
    v4 = 0;
    return v2 ^ v1 ^ *(_QWORD *)&v3 ^ v4;
  }
LABEL_10:
  v3 = 0.0;
  if ((*((_BYTE *)this + 32) & 8) == 0)
    goto LABEL_11;
LABEL_7:
  v4 = *((unsigned __int8 *)this + 28);
  return v2 ^ v1 ^ *(_QWORD *)&v3 ^ v4;
}

void CMMsl::WifiScanResults::~WifiScanResults(CMMsl::WifiScanResults *this)
{
  void **v2;

  *(_QWORD *)this = off_100355500;
  v2 = (void **)((char *)this + 8);
  sub_1002394A8(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = off_100355500;
  v2 = (void **)((char *)this + 8);
  sub_1002394A8(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = off_100355500;
  v2 = (void **)((char *)this + 8);
  sub_1002394A8(&v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::WifiScanResults::WifiScanResults(_QWORD *this, const CMMsl::WifiScanResults *a2)
{
  this[1] = 0;
  *this = off_100355500;
  this[2] = 0;
  this[3] = 0;
  if (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2))
    sub_10022A510();
  return this;
}

void sub_10022A510()
{
  operator new();
}

void sub_10022A644(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::WifiScanResults::operator=(uint64_t a1, const CMMsl::WifiScanResults *a2)
{
  __int128 v3;
  uint64_t v4;
  void (**v6)(CMMsl::WifiScanResults *__hidden);
  __int128 v7;
  uint64_t v8;
  void **v9;

  if ((const CMMsl::WifiScanResults *)a1 != a2)
  {
    CMMsl::WifiScanResults::WifiScanResults(&v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v4;
    v6 = off_100355500;
    v9 = (void **)&v7;
    sub_1002394A8(&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

_QWORD *CMMsl::swap(_QWORD *this, CMMsl::WifiScanResults *a2, CMMsl::WifiScanResults *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  return this;
}

_QWORD *CMMsl::WifiScanResults::WifiScanResults(_QWORD *a1, uint64_t a2)
{
  _OWORD *v4;

  *a1 = off_100355500;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  sub_100239524(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *a1 = off_100355500;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  sub_100239524(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

uint64_t CMMsl::WifiScanResults::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  void (**v9)(CMMsl::WifiScanResults *__hidden);
  __int128 v10;
  uint64_t v11;
  void **v12;

  if (a1 != a2)
  {
    v9 = off_100355500;
    v10 = 0uLL;
    v11 = 0;
    sub_100239524(&v10);
    v4 = *(_QWORD *)(a2 + 24);
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    v10 = v6;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v4;
    v11 = v7;
    v12 = (void **)&v10;
    v9 = off_100355500;
    sub_1002394A8(&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::WifiScanResults::formatText(CMMsl::WifiScanResults *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "entries");
  }
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WifiScanResults::readFrom(CMMsl::WifiScanResults *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        sub_10022AA80();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_10022AA80()
{
  operator new();
}

void sub_10022ABB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::WifiScanResults::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base **v2;
  const PB::Base **i;
  const PB::Base *v5;

  v2 = *(const PB::Base ***)(this + 8);
  for (i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5, 1u))
    v5 = *v2++;
  return this;
}

BOOL sub_10022AC1C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;
  BOOL v8;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t **)a2;
  if (v3 - *a1 != *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
    return 0;
  if (v2 == v3)
    return 1;
  v5 = v2 + 8;
  do
  {
    v6 = *v4++;
    result = CMMsl::WifiScanEntry::operator==(*(_QWORD *)(v5 - 8), v6);
    v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t CMMsl::WifiScanResults::hash_value(CMMsl::WifiScanResults *this)
{
  CMMsl::WifiScanEntry **v1;
  CMMsl::WifiScanEntry **v2;
  uint64_t v3;
  CMMsl::WifiScanEntry *v4;

  v1 = (CMMsl::WifiScanEntry **)*((_QWORD *)this + 1);
  v2 = (CMMsl::WifiScanEntry **)*((_QWORD *)this + 2);
  if (v1 == v2)
    return 0;
  v3 = 0;
  do
  {
    v4 = *v1++;
    v3 ^= CMMsl::WifiScanEntry::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

void CMMsl::WorkoutActivity::~WorkoutActivity(CMMsl::WorkoutActivity *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::WorkoutActivity::WorkoutActivity(uint64_t this, const CMMsl::WorkoutActivity *a2)
{
  char v2;
  int v3;
  int v4;

  *(_QWORD *)this = off_100355538;
  *(_DWORD *)(this + 16) = 0;
  if ((*((_BYTE *)a2 + 16) & 2) != 0)
  {
    v3 = *((_DWORD *)a2 + 3);
    *(_BYTE *)(this + 16) = 2;
    *(_DWORD *)(this + 12) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 16) & 1) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 16) = v2;
    *(_DWORD *)(this + 8) = v4;
  }
  return this;
}

uint64_t CMMsl::WorkoutActivity::operator=(uint64_t a1, uint64_t a2)
{
  int v2;
  void (**v4)(CMMsl::WorkoutActivity *__hidden);
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  _QWORD v10[2];
  int v11;

  if (a1 != a2)
  {
    v4 = off_100355538;
    v10[0] = off_100355538;
    v11 = 0;
    v5 = *(_BYTE *)(a2 + 16);
    if ((v5 & 2) != 0)
    {
      LODWORD(v4) = *(_DWORD *)(a2 + 12);
      LOBYTE(v11) = 2;
      v6 = 3;
      if ((v5 & 1) != 0)
      {
LABEL_6:
        v2 = *(_DWORD *)(a2 + 8);
        LOBYTE(v11) = v6;
      }
    }
    else
    {
      v6 = 1;
      if ((*(_BYTE *)(a2 + 16) & 1) != 0)
        goto LABEL_6;
    }
    v7 = v11;
    v11 = *(_DWORD *)(a1 + 16);
    v8 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 12) = (_DWORD)v4;
    *(_DWORD *)(a1 + 16) = v7;
    *(_DWORD *)(a1 + 8) = v2;
    v10[1] = v8;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

{
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  int v8;

  if (a1 != a2)
  {
    v7[0] = off_100355538;
    v3 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    v8 = *(_DWORD *)(a1 + 16);
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 16) = v3;
    *(_QWORD *)(a1 + 8) = v5;
    v7[1] = v4;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

_DWORD *CMMsl::swap(_DWORD *this, CMMsl::WorkoutActivity *a2, CMMsl::WorkoutActivity *a3)
{
  int v3;
  int v4;
  int v5;

  v3 = this[4];
  this[4] = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  v4 = this[3];
  this[3] = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v4;
  v5 = this[2];
  this[2] = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v5;
  return this;
}

uint64_t CMMsl::WorkoutActivity::WorkoutActivity(uint64_t result, _DWORD *a2)
{
  *(_QWORD *)result = off_100355538;
  *(_DWORD *)(result + 16) = a2[4];
  a2[4] = 0;
  *(_DWORD *)(result + 12) = a2[3];
  *(_DWORD *)(result + 8) = a2[2];
  return result;
}

{
  *(_QWORD *)result = off_100355538;
  *(_DWORD *)(result + 16) = a2[4];
  a2[4] = 0;
  *(_DWORD *)(result + 12) = a2[3];
  *(_DWORD *)(result + 8) = a2[2];
  return result;
}

uint64_t CMMsl::WorkoutActivity::formatText(CMMsl::WorkoutActivity *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 16);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "activityType", *((_DWORD *)this + 2));
    v5 = *((_BYTE *)this + 16);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "motionNotification", *((_DWORD *)this + 3));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutActivity::readFrom(CMMsl::WorkoutActivity *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t result;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)a2 + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 16) |= 1u;
        v27 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v28 = *(_QWORD *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v31 = 0;
          if (v2 <= v27)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_64;
            }
            v40 = v27++;
            v41 = *(_BYTE *)(v28 + v40);
            *((_QWORD *)a2 + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_63;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v31) = 0;
LABEL_63:
          v3 = v40 + 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v3 = v27 + 1;
            *((_QWORD *)a2 + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v3;
            v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_64:
        *((_DWORD *)this + 2) = v31;
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 16) |= 2u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v34 = 0;
          v35 = 0;
          v25 = 0;
          if (v2 <= v21)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_60;
            }
            v36 = v21++;
            v37 = *(_BYTE *)(v22 + v36);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0)
              break;
            v34 += 7;
            v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_59;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v25) = 0;
LABEL_59:
          v3 = v36 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v3 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v3;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_60:
        *((_DWORD *)this + 3) = v25;
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutActivity::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 16);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 12), 1u);
    v4 = *(_BYTE *)(v3 + 16);
  }
  if ((v4 & 1) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 8), 2u);
  return this;
}

uint64_t CMMsl::WorkoutActivity::hash_value(CMMsl::WorkoutActivity *this)
{
  uint64_t v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 16) & 2) != 0)
  {
    v1 = *((unsigned int *)this + 3);
    if ((*((_BYTE *)this + 16) & 1) != 0)
      goto LABEL_3;
LABEL_5:
    v2 = 0;
    return v2 ^ v1;
  }
  v1 = 0;
  if ((*((_BYTE *)this + 16) & 1) == 0)
    goto LABEL_5;
LABEL_3:
  v2 = *((unsigned int *)this + 2);
  return v2 ^ v1;
}

void CMMsl::WorkoutEvent::~WorkoutEvent(CMMsl::WorkoutEvent *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::WorkoutEvent::WorkoutEvent(uint64_t this, const CMMsl::WorkoutEvent *a2)
{
  __int16 v2;
  __int16 v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;

  *(_QWORD *)this = off_100355570;
  *(_DWORD *)(this + 64) = 0;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x200) != 0)
  {
    v4 = *((_DWORD *)a2 + 15);
    v3 = 512;
    *(_WORD *)(this + 64) = 512;
    *(_DWORD *)(this + 60) = v4;
    v2 = *((_WORD *)a2 + 32);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 10);
    v3 |= 0x10u;
    *(_WORD *)(this + 64) = v3;
    *(_DWORD *)(this + 40) = v5;
    v2 = *((_WORD *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *(_WORD *)(this + 64) = v3;
    *(_QWORD *)(this + 16) = v6;
    v2 = *((_WORD *)a2 + 32);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        goto LABEL_9;
      goto LABEL_17;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 64) = v3;
  *(_QWORD *)(this + 32) = v7;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_18;
  }
LABEL_17:
  v8 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 64) = v3;
  *(_QWORD *)(this + 8) = v8;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_19;
  }
LABEL_18:
  v9 = *((_DWORD *)a2 + 13);
  v3 |= 0x80u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 52) = v9;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_20;
  }
LABEL_19:
  v10 = *((_DWORD *)a2 + 14);
  v3 |= 0x100u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 56) = v10;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 4) == 0)
      goto LABEL_13;
    goto LABEL_21;
  }
LABEL_20:
  v11 = *((_DWORD *)a2 + 12);
  v3 |= 0x40u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 48) = v11;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 4) == 0)
  {
LABEL_13:
    if ((v2 & 0x20) == 0)
      return this;
LABEL_22:
    v13 = *((_DWORD *)a2 + 11);
    *(_WORD *)(this + 64) = v3 | 0x20;
    *(_DWORD *)(this + 44) = v13;
    return this;
  }
LABEL_21:
  v12 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *(_WORD *)(this + 64) = v3;
  *(_QWORD *)(this + 24) = v12;
  if ((*((_WORD *)a2 + 32) & 0x20) != 0)
    goto LABEL_22;
  return this;
}

uint64_t CMMsl::WorkoutEvent::operator=(uint64_t a1, const CMMsl::WorkoutEvent *a2)
{
  int v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _BYTE v9[8];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;

  if ((const CMMsl::WorkoutEvent *)a1 != a2)
  {
    CMMsl::WorkoutEvent::WorkoutEvent((uint64_t)v9, a2);
    v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    v14 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v5 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v13;
    v13 = v5;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v10 = v4;
    v11 = v6;
    v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v7;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::WorkoutEvent *a2, CMMsl::WorkoutEvent *a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  double result;
  int v13;

  v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  v4 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  v5 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v7;
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  v9 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v9;
  v10 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v10;
  v11 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v11;
  result = *((double *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((double *)a2 + 3) = result;
  v13 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v13;
  return result;
}

double CMMsl::WorkoutEvent::WorkoutEvent(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100355570;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  return result;
}

uint64_t CMMsl::WorkoutEvent::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void (**v11)(CMMsl::WorkoutEvent *__hidden);
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int v16;

  if (a1 != a2)
  {
    v11 = off_100355570;
    v3 = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(a2 + 64) = 0;
    v16 = *(_DWORD *)(a1 + 64);
    v4 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a2 + 8);
    v15 = *(_QWORD *)(a1 + 56);
    v6 = *(_OWORD *)(a1 + 24);
    v7 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v5;
    *(_OWORD *)(a1 + 24) = v7;
    v12 = v4;
    v13 = v6;
    v8 = *(_OWORD *)(a1 + 40);
    v9 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_DWORD *)(a1 + 64) = v3;
    *(_OWORD *)(a1 + 40) = v9;
    v14 = v8;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

uint64_t CMMsl::WorkoutEvent::formatText(CMMsl::WorkoutEvent *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 32);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "endTime", *((double *)this + 1));
    v5 = *((_WORD *)this + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "eventTime", *((double *)this + 2));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "eventType", *((_DWORD *)this + 10));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "genericWorkoutLabel", *((_DWORD *)this + 11));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "poolLength", *((double *)this + 3));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 4));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "swimLocation", *((_DWORD *)this + 12));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
LABEL_21:
    PB::TextFormatter::format(a2, "workoutMode", *((_DWORD *)this + 14));
    if ((*((_WORD *)this + 32) & 0x200) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_11;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "workoutLocationType", *((_DWORD *)this + 13));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x100) != 0)
    goto LABEL_21;
LABEL_10:
  if ((v5 & 0x200) != 0)
LABEL_11:
    PB::TextFormatter::format(a2, "workoutType", *((_DWORD *)this + 15));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutEvent::readFrom(CMMsl::WorkoutEvent *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  unint64_t v67;
  char v68;
  char v69;
  unsigned int v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  unint64_t v75;
  char v76;
  char v77;
  unsigned int v78;
  unint64_t v79;
  char v80;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 32) |= 0x200u;
              v20 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v21 = *(_QWORD *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_126;
                  }
                  v59 = v20++;
                  v60 = *(_BYTE *)(v21 + v59);
                  *((_QWORD *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_125;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v24) = 0;
LABEL_125:
                v2 = v59 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)a2 + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_126;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_126:
              *((_DWORD *)this + 15) = v24;
              goto LABEL_152;
            case 2u:
              *((_WORD *)this + 32) |= 0x10u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v61 = 0;
                v62 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_131;
                  }
                  v63 = v27++;
                  v64 = *(_BYTE *)(v28 + v63);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0)
                    break;
                  v61 += 7;
                  v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_130:
                    v2 = v63 + 1;
                    goto LABEL_131;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_130;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_131;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_131:
              *((_DWORD *)this + 10) = v31;
              goto LABEL_152;
            case 3u:
              *((_WORD *)this + 32) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_70;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_121;
            case 4u:
              *((_WORD *)this + 32) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_70;
              *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_121;
            case 5u:
              *((_WORD *)this + 32) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_70;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_121;
            case 6u:
              *((_WORD *)this + 32) |= 0x80u;
              v33 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v65 = 0;
                v66 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_136;
                  }
                  v67 = v33++;
                  v68 = *(_BYTE *)(v34 + v67);
                  *((_QWORD *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0)
                    break;
                  v65 += 7;
                  v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_135:
                    v2 = v67 + 1;
                    goto LABEL_136;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v37) = 0;
                goto LABEL_135;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)a2 + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_136;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_136:
              *((_DWORD *)this + 13) = v37;
              goto LABEL_152;
            case 7u:
              *((_WORD *)this + 32) |= 0x100u;
              v39 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v40 = *(_QWORD *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v69 = 0;
                v70 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_141;
                  }
                  v71 = v39++;
                  v72 = *(_BYTE *)(v40 + v71);
                  *((_QWORD *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0)
                    break;
                  v69 += 7;
                  v14 = v70++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_140:
                    v2 = v71 + 1;
                    goto LABEL_141;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v43) = 0;
                goto LABEL_140;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)a2 + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_141;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_141:
              *((_DWORD *)this + 14) = v43;
              goto LABEL_152;
            case 8u:
              *((_WORD *)this + 32) |= 0x40u;
              v45 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v46 = *(_QWORD *)a2;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v73 = 0;
                v74 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_146;
                  }
                  v75 = v45++;
                  v76 = *(_BYTE *)(v46 + v75);
                  *((_QWORD *)a2 + 1) = v45;
                  v49 |= (unint64_t)(v76 & 0x7F) << v73;
                  if ((v76 & 0x80) == 0)
                    break;
                  v73 += 7;
                  v14 = v74++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_145:
                    v2 = v75 + 1;
                    goto LABEL_146;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v49) = 0;
                goto LABEL_145;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)a2 + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_146;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_146:
              *((_DWORD *)this + 12) = v49;
              goto LABEL_152;
            case 9u:
              *((_WORD *)this + 32) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_121:
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_70:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_152;
            case 0xAu:
              *((_WORD *)this + 32) |= 0x20u;
              v51 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v52 = *(_QWORD *)a2;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                v77 = 0;
                v78 = 0;
                v55 = 0;
                if (v2 <= v51)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_151;
                  }
                  v79 = v51++;
                  v80 = *(_BYTE *)(v52 + v79);
                  *((_QWORD *)a2 + 1) = v51;
                  v55 |= (unint64_t)(v80 & 0x7F) << v77;
                  if ((v80 & 0x80) == 0)
                    break;
                  v77 += 7;
                  v14 = v78++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_150:
                    v2 = v79 + 1;
                    goto LABEL_151;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v55) = 0;
                goto LABEL_150;
              }
              v53 = 0;
              v54 = 0;
              v55 = 0;
              do
              {
                v2 = v51 + 1;
                *((_QWORD *)a2 + 1) = v51 + 1;
                v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0)
                  goto LABEL_151;
                v53 += 7;
                v51 = v2;
                v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_151:
              *((_DWORD *)this + 11) = v55;
LABEL_152:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_152;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutEvent::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 64);
  if ((v4 & 0x200) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 60), 1u);
    v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 2u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 4u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 5u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 52), 6u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 56), 7u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 4) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 8u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 44), 0xAu);
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 9u);
  if ((*(_WORD *)(v3 + 64) & 0x20) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 44), 0xAu);
  return this;
}

uint64_t CMMsl::WorkoutEvent::hash_value(CMMsl::WorkoutEvent *this)
{
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;

  v1 = *((_WORD *)this + 32);
  if ((v1 & 0x200) != 0)
  {
    v2 = *((unsigned int *)this + 15);
    if ((v1 & 0x10) != 0)
    {
LABEL_3:
      v3 = *((unsigned int *)this + 10);
      if ((v1 & 2) != 0)
        goto LABEL_4;
LABEL_22:
      v4 = 0.0;
      if ((v1 & 8) != 0)
        goto LABEL_7;
LABEL_23:
      v5 = 0.0;
      if ((v1 & 1) != 0)
        goto LABEL_10;
LABEL_24:
      v6 = 0.0;
      if ((v1 & 0x80) != 0)
        goto LABEL_13;
      goto LABEL_25;
    }
  }
  else
  {
    v2 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_22;
LABEL_4:
  v4 = *((double *)this + 2);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_23;
LABEL_7:
  v5 = *((double *)this + 4);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_24;
LABEL_10:
  v6 = *((double *)this + 1);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 0x80) != 0)
  {
LABEL_13:
    v7 = *((unsigned int *)this + 13);
    if ((*((_WORD *)this + 32) & 0x100) != 0)
      goto LABEL_14;
    goto LABEL_26;
  }
LABEL_25:
  v7 = 0;
  if ((*((_WORD *)this + 32) & 0x100) != 0)
  {
LABEL_14:
    v8 = *((unsigned int *)this + 14);
    if ((v1 & 0x40) != 0)
      goto LABEL_15;
    goto LABEL_27;
  }
LABEL_26:
  v8 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_15:
    v9 = *((unsigned int *)this + 12);
    if ((v1 & 4) != 0)
      goto LABEL_16;
    goto LABEL_28;
  }
LABEL_27:
  v9 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_16:
    v10 = *((double *)this + 3);
    if (v10 == 0.0)
      v10 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_19;
LABEL_29:
    v11 = 0;
    return v3 ^ v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ v7 ^ v8 ^ v9 ^ *(_QWORD *)&v10 ^ v11;
  }
LABEL_28:
  v10 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_29;
LABEL_19:
  v11 = *((unsigned int *)this + 11);
  return v3 ^ v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ v7 ^ v8 ^ v9 ^ *(_QWORD *)&v10 ^ v11;
}

uint64_t CMMsl::WorkoutPriorInformation::WorkoutPriorInformation(uint64_t this)
{
  *(_QWORD *)this = off_1003555A8;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003555A8;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::WorkoutPriorInformation::~WorkoutPriorInformation(CMMsl::WorkoutPriorInformation *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::WorkoutPriorInformation::WorkoutPriorInformation(uint64_t this, const CMMsl::WorkoutPriorInformation *a2)
{
  char v2;
  char v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;

  *(_QWORD *)this = off_1003555A8;
  *(_DWORD *)(this + 32) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 0x10) != 0)
  {
    v4 = *((_DWORD *)a2 + 7);
    v3 = 16;
    *(_BYTE *)(this + 32) = 16;
    *(_DWORD *)(this + 28) = v4;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 8) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *(_BYTE *)(this + 32) = v3;
    *(_DWORD *)(this + 24) = v5;
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(_BYTE *)(this + 32) = v3;
    *(_DWORD *)(this + 20) = v6;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0)
        return this;
LABEL_12:
      v8 = *((_DWORD *)a2 + 4);
      *(_BYTE *)(this + 32) = v3 | 2;
      *(_DWORD *)(this + 16) = v8;
      return this;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_BYTE *)(this + 32) = v3;
  *(_QWORD *)(this + 8) = v7;
  if ((*((_BYTE *)a2 + 32) & 2) != 0)
    goto LABEL_12;
  return this;
}

uint64_t CMMsl::WorkoutPriorInformation::operator=(uint64_t a1, const CMMsl::WorkoutPriorInformation *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  _BYTE v7[8];
  uint64_t v8;
  __int128 v9;
  int v10;

  if ((const CMMsl::WorkoutPriorInformation *)a1 != a2)
  {
    CMMsl::WorkoutPriorInformation::WorkoutPriorInformation((uint64_t)v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v9;
    v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::WorkoutPriorInformation *a2, CMMsl::WorkoutPriorInformation *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  double result;
  int v8;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  v5 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  v6 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v6;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v8 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v8;
  return result;
}

double CMMsl::WorkoutPriorInformation::WorkoutPriorInformation(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_1003555A8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_1003555A8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::WorkoutPriorInformation::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _QWORD v9[2];
  __int128 v10;
  int v11;

  if (a1 != a2)
  {
    v9[0] = off_1003555A8;
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v11 = *(_DWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v9[1] = v5;
    v6 = *(_OWORD *)(a1 + 16);
    v7 = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 16) = v7;
    v10 = v6;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::WorkoutPriorInformation::formatText(CMMsl::WorkoutPriorInformation *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "genericWorkoutLabel", *((_DWORD *)this + 4));
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "poolLength", *((double *)this + 1));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "workoutLocationType", *((_DWORD *)this + 6));
    if ((*((_BYTE *)this + 32) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "swimLocation", *((_DWORD *)this + 5));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 8) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "workoutType", *((_DWORD *)this + 7));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutPriorInformation::readFrom(CMMsl::WorkoutPriorInformation *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 32) |= 0x10u;
              v20 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v21 = *(_QWORD *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v45 = 0;
                v46 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_88;
                  }
                  v47 = v20++;
                  v48 = *(_BYTE *)(v21 + v47);
                  *((_QWORD *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0)
                    break;
                  v45 += 7;
                  v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_87;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v24) = 0;
LABEL_87:
                v2 = v47 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)a2 + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_88;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_88:
              *((_DWORD *)this + 7) = v24;
              goto LABEL_104;
            case 2u:
              *((_BYTE *)this + 32) |= 8u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_93;
                  }
                  v51 = v27++;
                  v52 = *(_BYTE *)(v28 + v51);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_92:
                    v2 = v51 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_92;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_93;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_93:
              *((_DWORD *)this + 6) = v31;
              goto LABEL_104;
            case 3u:
              *((_BYTE *)this + 32) |= 4u;
              v33 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_98;
                  }
                  v55 = v33++;
                  v56 = *(_BYTE *)(v34 + v55);
                  *((_QWORD *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_97:
                    v2 = v55 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v37) = 0;
                goto LABEL_97;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)a2 + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_98;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_98:
              *((_DWORD *)this + 5) = v37;
              goto LABEL_104;
            case 4u:
              *((_BYTE *)this + 32) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_104;
            case 5u:
              *((_BYTE *)this + 32) |= 2u;
              v39 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v40 = *(_QWORD *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_103;
                  }
                  v59 = v39++;
                  v60 = *(_BYTE *)(v40 + v59);
                  *((_QWORD *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_102:
                    v2 = v59 + 1;
                    goto LABEL_103;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v43) = 0;
                goto LABEL_102;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)a2 + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_103;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_103:
              *((_DWORD *)this + 4) = v43;
LABEL_104:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_104;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutPriorInformation::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 28), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 3u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 5u);
  }
LABEL_10:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 4u);
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 5u);
  return this;
}

BOOL CMMsl::WorkoutPriorInformation::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 0x10) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 8) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 2) == 0;
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
    return (*(_BYTE *)(a2 + 32) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

uint64_t CMMsl::WorkoutPriorInformation::hash_value(CMMsl::WorkoutPriorInformation *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;

  if ((*((_BYTE *)this + 32) & 0x10) != 0)
  {
    v1 = *((unsigned int *)this + 7);
    if ((*((_BYTE *)this + 32) & 8) != 0)
    {
LABEL_3:
      v2 = *((unsigned int *)this + 6);
      if ((*((_BYTE *)this + 32) & 4) != 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 32) & 4) != 0)
  {
LABEL_4:
    v3 = *((unsigned int *)this + 5);
    if ((*((_BYTE *)this + 32) & 1) != 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  v3 = 0;
  if ((*((_BYTE *)this + 32) & 1) != 0)
  {
LABEL_5:
    v4 = *((double *)this + 1);
    if (v4 == 0.0)
      v4 = 0.0;
    if ((*((_BYTE *)this + 32) & 2) != 0)
      goto LABEL_8;
LABEL_13:
    v5 = 0;
    return v2 ^ v1 ^ v3 ^ *(_QWORD *)&v4 ^ v5;
  }
LABEL_12:
  v4 = 0.0;
  if ((*((_BYTE *)this + 32) & 2) == 0)
    goto LABEL_13;
LABEL_8:
  v5 = *((unsigned int *)this + 4);
  return v2 ^ v1 ^ v3 ^ *(_QWORD *)&v4 ^ v5;
}

void CMMsl::WorkoutRecorderALSData::~WorkoutRecorderALSData(CMMsl::WorkoutRecorderALSData *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1003555E0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1003555E0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1003555E0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::WorkoutRecorderALSData::WorkoutRecorderALSData(_QWORD *this, const CMMsl::WorkoutRecorderALSData *a2)
{
  *this = off_1003555E0;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::WorkoutRecorderALSData *CMMsl::WorkoutRecorderALSData::operator=(const CMMsl::WorkoutRecorderALSData *a1, const CMMsl::WorkoutRecorderALSData *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::WorkoutRecorderALSData *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderALSData::WorkoutRecorderALSData(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_1003555E0;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderALSData *a2, CMMsl::WorkoutRecorderALSData *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderALSData::WorkoutRecorderALSData(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003555E0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003555E0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::WorkoutRecorderALSData::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_1003555E0;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderALSData::formatText(CMMsl::WorkoutRecorderALSData *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutRecorderALSData::readFrom(CMMsl::WorkoutRecorderALSData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderALSData::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

uint64_t CMMsl::WorkoutRecorderALSData::hash_value(CMMsl::WorkoutRecorderALSData *this)
{
  uint64_t v1;
  float v2;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(float *)(v1 + 8);
  if (v2 == 0.0 || (*(_BYTE *)(v1 + 12) & 1) == 0)
    return 0;
  else
    return LODWORD(v2);
}

uint64_t CMMsl::WorkoutRecorderALSData::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

void CMMsl::WorkoutRecorderAccel::~WorkoutRecorderAccel(CMMsl::WorkoutRecorderAccel *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100355618;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100355618;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100355618;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::WorkoutRecorderAccel::WorkoutRecorderAccel(_QWORD *this, const CMMsl::WorkoutRecorderAccel *a2)
{
  *this = off_100355618;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::WorkoutRecorderAccel *CMMsl::WorkoutRecorderAccel::operator=(const CMMsl::WorkoutRecorderAccel *a1, const CMMsl::WorkoutRecorderAccel *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::WorkoutRecorderAccel *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderAccel::WorkoutRecorderAccel(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_100355618;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderAccel *a2, CMMsl::WorkoutRecorderAccel *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderAccel::WorkoutRecorderAccel(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100355618;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100355618;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::WorkoutRecorderAccel::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_100355618;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderAccel::formatText(CMMsl::WorkoutRecorderAccel *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutRecorderAccel::readFrom(CMMsl::WorkoutRecorderAccel *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderAccel::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

CMMsl::Accel *CMMsl::WorkoutRecorderAccel::hash_value(CMMsl::WorkoutRecorderAccel *this)
{
  CMMsl::Accel *result;

  result = (CMMsl::Accel *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::Accel *)CMMsl::Accel::hash_value(result);
  return result;
}

uint64_t CMMsl::WorkoutRecorderAccel::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

void CMMsl::WorkoutRecorderAccel800::~WorkoutRecorderAccel800(CMMsl::WorkoutRecorderAccel800 *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100355650;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100355650;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100355650;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::WorkoutRecorderAccel800::WorkoutRecorderAccel800(_QWORD *this, const CMMsl::WorkoutRecorderAccel800 *a2)
{
  *this = off_100355650;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::WorkoutRecorderAccel800 *CMMsl::WorkoutRecorderAccel800::operator=(const CMMsl::WorkoutRecorderAccel800 *a1, const CMMsl::WorkoutRecorderAccel800 *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::WorkoutRecorderAccel800 *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderAccel800::WorkoutRecorderAccel800(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_100355650;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderAccel800 *a2, CMMsl::WorkoutRecorderAccel800 *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderAccel800::WorkoutRecorderAccel800(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100355650;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100355650;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::WorkoutRecorderAccel800::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_100355650;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderAccel800::formatText(CMMsl::WorkoutRecorderAccel800 *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutRecorderAccel800::readFrom(CMMsl::WorkoutRecorderAccel800 *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderAccel800::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

CMMsl::Accel *CMMsl::WorkoutRecorderAccel800::hash_value(CMMsl::WorkoutRecorderAccel800 *this)
{
  CMMsl::Accel *result;

  result = (CMMsl::Accel *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::Accel *)CMMsl::Accel::hash_value(result);
  return result;
}

uint64_t CMMsl::WorkoutRecorderAccel800::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

void CMMsl::WorkoutRecorderAveragedALSData::~WorkoutRecorderAveragedALSData(CMMsl::WorkoutRecorderAveragedALSData *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100355688;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100355688;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100355688;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::WorkoutRecorderAveragedALSData::WorkoutRecorderAveragedALSData(_QWORD *this, const CMMsl::WorkoutRecorderAveragedALSData *a2)
{
  *this = off_100355688;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::WorkoutRecorderAveragedALSData *CMMsl::WorkoutRecorderAveragedALSData::operator=(const CMMsl::WorkoutRecorderAveragedALSData *a1, const CMMsl::WorkoutRecorderAveragedALSData *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::WorkoutRecorderAveragedALSData *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderAveragedALSData::WorkoutRecorderAveragedALSData(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_100355688;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderAveragedALSData *a2, CMMsl::WorkoutRecorderAveragedALSData *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderAveragedALSData::WorkoutRecorderAveragedALSData(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100355688;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100355688;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::WorkoutRecorderAveragedALSData::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_100355688;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderAveragedALSData::formatText(CMMsl::WorkoutRecorderAveragedALSData *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutRecorderAveragedALSData::readFrom(CMMsl::WorkoutRecorderAveragedALSData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderAveragedALSData::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

uint64_t CMMsl::WorkoutRecorderAveragedALSData::hash_value(CMMsl::WorkoutRecorderAveragedALSData *this)
{
  uint64_t v1;
  char v2;
  BOOL v3;
  uint64_t v4;
  int v5;
  float v6;
  BOOL v7;
  uint64_t v8;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_BYTE *)(v1 + 20);
  v3 = *(double *)(v1 + 8) == 0.0 || (v2 & 1) == 0;
  v4 = *(_QWORD *)(v1 + 8);
  if (v3)
    v4 = 0;
  v5 = v2 & 2;
  v6 = *(float *)(v1 + 16);
  v7 = v6 == 0.0 || v5 == 0;
  v8 = LODWORD(v6);
  if (v7)
    v8 = 0;
  return v8 ^ v4;
}

uint64_t CMMsl::WorkoutRecorderAveragedALSData::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

void CMMsl::WorkoutRecorderBodyMetrics::~WorkoutRecorderBodyMetrics(CMMsl::WorkoutRecorderBodyMetrics *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1003556C0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1003556C0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1003556C0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::WorkoutRecorderBodyMetrics::WorkoutRecorderBodyMetrics(_QWORD *this, const CMMsl::WorkoutRecorderBodyMetrics *a2)
{
  *this = off_1003556C0;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::WorkoutRecorderBodyMetrics *CMMsl::WorkoutRecorderBodyMetrics::operator=(const CMMsl::WorkoutRecorderBodyMetrics *a1, const CMMsl::WorkoutRecorderBodyMetrics *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::WorkoutRecorderBodyMetrics *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderBodyMetrics::WorkoutRecorderBodyMetrics(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_1003556C0;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderBodyMetrics *a2, CMMsl::WorkoutRecorderBodyMetrics *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderBodyMetrics::WorkoutRecorderBodyMetrics(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003556C0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003556C0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::WorkoutRecorderBodyMetrics::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_1003556C0;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderBodyMetrics::formatText(CMMsl::WorkoutRecorderBodyMetrics *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutRecorderBodyMetrics::readFrom(CMMsl::WorkoutRecorderBodyMetrics *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderBodyMetrics::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

CMMsl::BodyMetrics *CMMsl::WorkoutRecorderBodyMetrics::hash_value(CMMsl::WorkoutRecorderBodyMetrics *this)
{
  CMMsl::BodyMetrics *result;

  result = (CMMsl::BodyMetrics *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::BodyMetrics *)CMMsl::BodyMetrics::hash_value(result);
  return result;
}

uint64_t CMMsl::WorkoutRecorderBodyMetrics::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

void CMMsl::WorkoutRecorderCompassCalibration::~WorkoutRecorderCompassCalibration(CMMsl::WorkoutRecorderCompassCalibration *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1003556F8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1003556F8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1003556F8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::WorkoutRecorderCompassCalibration::WorkoutRecorderCompassCalibration(_QWORD *this, const CMMsl::WorkoutRecorderCompassCalibration *a2)
{
  *this = off_1003556F8;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::WorkoutRecorderCompassCalibration *CMMsl::WorkoutRecorderCompassCalibration::operator=(const CMMsl::WorkoutRecorderCompassCalibration *a1, const CMMsl::WorkoutRecorderCompassCalibration *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::WorkoutRecorderCompassCalibration *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderCompassCalibration::WorkoutRecorderCompassCalibration(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_1003556F8;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderCompassCalibration *a2, CMMsl::WorkoutRecorderCompassCalibration *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderCompassCalibration::WorkoutRecorderCompassCalibration(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003556F8;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003556F8;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::WorkoutRecorderCompassCalibration::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_1003556F8;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderCompassCalibration::formatText(CMMsl::WorkoutRecorderCompassCalibration *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutRecorderCompassCalibration::readFrom(CMMsl::WorkoutRecorderCompassCalibration *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderCompassCalibration::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

CMMsl::CompassCalibration *CMMsl::WorkoutRecorderCompassCalibration::hash_value(CMMsl::WorkoutRecorderCompassCalibration *this)
{
  CMMsl::CompassCalibration *result;

  result = (CMMsl::CompassCalibration *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::CompassCalibration *)CMMsl::CompassCalibration::hash_value(result);
  return result;
}

uint64_t CMMsl::WorkoutRecorderCompassCalibration::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

void CMMsl::WorkoutRecorderElevation::~WorkoutRecorderElevation(CMMsl::WorkoutRecorderElevation *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100355730;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100355730;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100355730;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::WorkoutRecorderElevation::WorkoutRecorderElevation(_QWORD *this, const CMMsl::WorkoutRecorderElevation *a2)
{
  *this = off_100355730;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::WorkoutRecorderElevation *CMMsl::WorkoutRecorderElevation::operator=(const CMMsl::WorkoutRecorderElevation *a1, const CMMsl::WorkoutRecorderElevation *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::WorkoutRecorderElevation *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderElevation::WorkoutRecorderElevation(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_100355730;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderElevation *a2, CMMsl::WorkoutRecorderElevation *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderElevation::WorkoutRecorderElevation(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100355730;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100355730;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::WorkoutRecorderElevation::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_100355730;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderElevation::formatText(CMMsl::WorkoutRecorderElevation *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutRecorderElevation::readFrom(CMMsl::WorkoutRecorderElevation *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderElevation::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

CMMsl::ElevationChange *CMMsl::WorkoutRecorderElevation::hash_value(CMMsl::WorkoutRecorderElevation *this)
{
  CMMsl::ElevationChange *result;

  result = (CMMsl::ElevationChange *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::ElevationChange *)CMMsl::ElevationChange::hash_value(result);
  return result;
}

uint64_t CMMsl::WorkoutRecorderElevation::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

void CMMsl::WorkoutRecorderFaceCovered::~WorkoutRecorderFaceCovered(CMMsl::WorkoutRecorderFaceCovered *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100355768;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100355768;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100355768;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::WorkoutRecorderFaceCovered::WorkoutRecorderFaceCovered(_QWORD *this, const CMMsl::WorkoutRecorderFaceCovered *a2)
{
  *this = off_100355768;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::WorkoutRecorderFaceCovered *CMMsl::WorkoutRecorderFaceCovered::operator=(const CMMsl::WorkoutRecorderFaceCovered *a1, const CMMsl::WorkoutRecorderFaceCovered *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::WorkoutRecorderFaceCovered *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderFaceCovered::WorkoutRecorderFaceCovered(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_100355768;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderFaceCovered *a2, CMMsl::WorkoutRecorderFaceCovered *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderFaceCovered::WorkoutRecorderFaceCovered(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100355768;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100355768;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::WorkoutRecorderFaceCovered::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_100355768;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderFaceCovered::formatText(CMMsl::WorkoutRecorderFaceCovered *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutRecorderFaceCovered::readFrom(CMMsl::WorkoutRecorderFaceCovered *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderFaceCovered::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

uint64_t CMMsl::WorkoutRecorderFaceCovered::hash_value(CMMsl::WorkoutRecorderFaceCovered *this)
{
  uint64_t v1;
  int v2;
  BOOL v3;
  uint64_t v4;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(unsigned __int8 *)(v1 + 20);
  v3 = *(double *)(v1 + 8) == 0.0 || (v2 & 1) == 0;
  v4 = *(_QWORD *)(v1 + 8);
  if (v3)
    v4 = 0;
  return v4 ^ (*(_BYTE *)(v1 + 16) & (v2 << 30 >> 31));
}

uint64_t CMMsl::WorkoutRecorderFaceCovered::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

void CMMsl::WorkoutRecorderFitnessMachineData::~WorkoutRecorderFitnessMachineData(CMMsl::WorkoutRecorderFitnessMachineData *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1003557A0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1003557A0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1003557A0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::WorkoutRecorderFitnessMachineData::WorkoutRecorderFitnessMachineData(_QWORD *this, const CMMsl::WorkoutRecorderFitnessMachineData *a2)
{
  *this = off_1003557A0;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::WorkoutRecorderFitnessMachineData *CMMsl::WorkoutRecorderFitnessMachineData::operator=(const CMMsl::WorkoutRecorderFitnessMachineData *a1, const CMMsl::WorkoutRecorderFitnessMachineData *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::WorkoutRecorderFitnessMachineData *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderFitnessMachineData::WorkoutRecorderFitnessMachineData(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_1003557A0;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderFitnessMachineData *a2, CMMsl::WorkoutRecorderFitnessMachineData *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderFitnessMachineData::WorkoutRecorderFitnessMachineData(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003557A0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003557A0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::WorkoutRecorderFitnessMachineData::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_1003557A0;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderFitnessMachineData::formatText(CMMsl::WorkoutRecorderFitnessMachineData *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutRecorderFitnessMachineData::readFrom(CMMsl::WorkoutRecorderFitnessMachineData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderFitnessMachineData::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

CMMsl::FitnessMachineData *CMMsl::WorkoutRecorderFitnessMachineData::hash_value(CMMsl::WorkoutRecorderFitnessMachineData *this)
{
  CMMsl::FitnessMachineData *result;

  result = (CMMsl::FitnessMachineData *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::FitnessMachineData *)CMMsl::FitnessMachineData::hash_value(result);
  return result;
}

uint64_t CMMsl::WorkoutRecorderFitnessMachineData::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

void CMMsl::WorkoutRecorderHealthKitInfo::~WorkoutRecorderHealthKitInfo(CMMsl::WorkoutRecorderHealthKitInfo *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::WorkoutRecorderHealthKitInfo::WorkoutRecorderHealthKitInfo(CMMsl::WorkoutRecorderHealthKitInfo *this, const CMMsl::WorkoutRecorderHealthKitInfo *a2)
{
  char v2;
  char v3;
  int v4;
  double result;

  *(_QWORD *)this = off_1003557D8;
  *((_DWORD *)this + 7) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 4) != 0)
  {
    v4 = *((_DWORD *)a2 + 6);
    v3 = 4;
    *((_BYTE *)this + 28) = 4;
    *((_DWORD *)this + 6) = v4;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 1) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 1);
    v3 |= 1u;
    *((_BYTE *)this + 28) = v3;
    *((double *)this + 1) = result;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *((double *)a2 + 2);
    *((_BYTE *)this + 28) = v3 | 2;
    *((double *)this + 2) = result;
  }
  return result;
}

uint64_t CMMsl::WorkoutRecorderHealthKitInfo::operator=(uint64_t a1, uint64_t a2, double a3, double a4)
{
  void (**v5)(CMMsl::WorkoutRecorderHealthKitInfo *__hidden);
  char v6;
  char v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  void (**v12)(CMMsl::WorkoutRecorderHealthKitInfo *__hidden);
  __int128 v13;
  uint64_t v14;

  if (a1 != a2)
  {
    v5 = off_1003557D8;
    v12 = off_1003557D8;
    HIDWORD(v14) = 0;
    v6 = *(_BYTE *)(a2 + 28);
    if ((v6 & 4) != 0)
    {
      LODWORD(v5) = *(_DWORD *)(a2 + 24);
      v7 = 4;
      BYTE4(v14) = 4;
      if ((v6 & 1) != 0)
      {
LABEL_4:
        a3 = *(double *)(a2 + 8);
        v7 |= 1u;
        BYTE4(v14) = v7;
        if ((v6 & 2) != 0)
          goto LABEL_8;
        goto LABEL_9;
      }
    }
    else
    {
      v7 = 0;
      if ((*(_BYTE *)(a2 + 28) & 1) != 0)
        goto LABEL_4;
    }
    if ((v6 & 2) != 0)
    {
LABEL_8:
      a4 = *(double *)(a2 + 16);
      BYTE4(v14) = v7 | 2;
    }
LABEL_9:
    v8 = HIDWORD(v14);
    v9 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = (_DWORD)v5;
    *(_DWORD *)(a1 + 28) = v8;
    v14 = v9;
    v10 = *(_OWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a3;
    *(double *)(a1 + 16) = a4;
    v13 = v10;
    PB::Base::~Base((PB::Base *)&v12);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::WorkoutRecorderHealthKitInfo *a2, CMMsl::WorkoutRecorderHealthKitInfo *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  double result;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::WorkoutRecorderHealthKitInfo::WorkoutRecorderHealthKitInfo(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_1003557D8;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_1003557D8;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::WorkoutRecorderHealthKitInfo::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  void (**v7)(CMMsl::WorkoutRecorderHealthKitInfo *__hidden);
  __int128 v8;
  uint64_t v9;

  if (a1 != a2)
  {
    v7 = off_1003557D8;
    v3 = *(_OWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 28) = 0;
    v9 = *(_QWORD *)(a1 + 24);
    v5 = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 24) = v4;
    *(_OWORD *)(a1 + 8) = v3;
    v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderHealthKitInfo::formatText(CMMsl::WorkoutRecorderHealthKitInfo *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 1) == 0)
  {
    if ((*((_BYTE *)this + 28) & 2) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(a2, "walkingHeartRateAverage", *((double *)this + 2));
    if ((*((_BYTE *)this + 28) & 4) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_4;
  }
  PB::TextFormatter::format(a2, "restingHeartRate", *((double *)this + 1));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 2) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "workoutActivityType", *((_DWORD *)this + 6));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutRecorderHealthKitInfo::readFrom(CMMsl::WorkoutRecorderHealthKitInfo *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int i;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  for (i = *((unsigned __int8 *)a2 + 24); v2 < v3 && i == 0; i = *((unsigned __int8 *)a2 + 24))
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          v11 = 0;
          goto LABEL_20;
        }
      }
      i = 1;
      *((_BYTE *)a2 + 24) = 1;
      return i == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      i = 0;
      return i == 0;
    }
    v20 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      *((_BYTE *)this + 28) |= 2u;
      v2 = *((_QWORD *)a2 + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
      {
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_47:
        v2 = *((_QWORD *)a2 + 1) + 8;
        *((_QWORD *)a2 + 1) = v2;
        goto LABEL_53;
      }
    }
    else
    {
      if ((_DWORD)v20 != 2)
      {
        if ((_DWORD)v20 == 1)
        {
          *((_BYTE *)this + 28) |= 4u;
          v21 = *((_QWORD *)a2 + 1);
          v2 = *((_QWORD *)a2 + 2);
          v22 = *(_QWORD *)a2;
          if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
          {
            v28 = 0;
            v29 = 0;
            v25 = 0;
            if (v2 <= v21)
              v2 = *((_QWORD *)a2 + 1);
            while (1)
            {
              if (v2 == v21)
              {
                LODWORD(v25) = 0;
                *((_BYTE *)a2 + 24) = 1;
                goto LABEL_52;
              }
              v30 = v21++;
              v31 = *(_BYTE *)(v22 + v30);
              *((_QWORD *)a2 + 1) = v21;
              v25 |= (unint64_t)(v31 & 0x7F) << v28;
              if ((v31 & 0x80) == 0)
                break;
              v28 += 7;
              v14 = v29++ > 8;
              if (v14)
              {
                LODWORD(v25) = 0;
                goto LABEL_51;
              }
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v25) = 0;
LABEL_51:
            v2 = v30 + 1;
          }
          else
          {
            v23 = 0;
            v24 = 0;
            v25 = 0;
            while (1)
            {
              v2 = v21 + 1;
              *((_QWORD *)a2 + 1) = v21 + 1;
              v26 = *(_BYTE *)(v22 + v21);
              v25 |= (unint64_t)(v26 & 0x7F) << v23;
              if ((v26 & 0x80) == 0)
                break;
              v23 += 7;
              v21 = v2;
              v14 = v24++ > 8;
              if (v14)
              {
                LODWORD(v25) = 0;
                break;
              }
            }
          }
LABEL_52:
          *((_DWORD *)this + 6) = v25;
        }
        else
        {
          result = PB::Reader::skip(a2, v20, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
        }
        goto LABEL_53;
      }
      *((_BYTE *)this + 28) |= 1u;
      v2 = *((_QWORD *)a2 + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
      {
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_47;
      }
    }
    *((_BYTE *)a2 + 24) = 1;
LABEL_53:
    v3 = *((_QWORD *)a2 + 2);
  }
  return i == 0;
}

uint64_t CMMsl::WorkoutRecorderHealthKitInfo::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 24), 1u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        return this;
      return PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
    }
  }
  else if ((*(_BYTE *)(this + 28) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 2u);
  if ((*(_BYTE *)(v3 + 28) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
  return this;
}

uint64_t CMMsl::WorkoutRecorderHealthKitInfo::hash_value(CMMsl::WorkoutRecorderHealthKitInfo *this)
{
  uint64_t v1;
  double v2;
  double v3;

  if ((*((_BYTE *)this + 28) & 4) != 0)
  {
    v1 = *((unsigned int *)this + 6);
    if ((*((_BYTE *)this + 28) & 1) != 0)
    {
LABEL_3:
      v2 = *((double *)this + 1);
      if (v2 == 0.0)
        v2 = 0.0;
      if ((*((_BYTE *)this + 28) & 2) != 0)
        goto LABEL_6;
LABEL_11:
      v3 = 0.0;
      return *(_QWORD *)&v2 ^ v1 ^ *(_QWORD *)&v3;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 28) & 1) != 0)
      goto LABEL_3;
  }
  v2 = 0.0;
  if ((*((_BYTE *)this + 28) & 2) == 0)
    goto LABEL_11;
LABEL_6:
  v3 = *((double *)this + 2);
  if (v3 == 0.0)
    v3 = 0.0;
  return *(_QWORD *)&v2 ^ v1 ^ *(_QWORD *)&v3;
}

void CMMsl::WorkoutRecorderHeartRate::~WorkoutRecorderHeartRate(CMMsl::WorkoutRecorderHeartRate *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100355810;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100355810;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100355810;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::WorkoutRecorderHeartRate::WorkoutRecorderHeartRate(_QWORD *this, const CMMsl::WorkoutRecorderHeartRate *a2)
{
  *this = off_100355810;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::WorkoutRecorderHeartRate *CMMsl::WorkoutRecorderHeartRate::operator=(const CMMsl::WorkoutRecorderHeartRate *a1, const CMMsl::WorkoutRecorderHeartRate *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::WorkoutRecorderHeartRate *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderHeartRate::WorkoutRecorderHeartRate(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_100355810;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderHeartRate *a2, CMMsl::WorkoutRecorderHeartRate *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderHeartRate::WorkoutRecorderHeartRate(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100355810;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100355810;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::WorkoutRecorderHeartRate::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_100355810;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderHeartRate::formatText(CMMsl::WorkoutRecorderHeartRate *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutRecorderHeartRate::readFrom(CMMsl::WorkoutRecorderHeartRate *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderHeartRate::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

CMMsl::OnsetHeartRateData *CMMsl::WorkoutRecorderHeartRate::hash_value(CMMsl::WorkoutRecorderHeartRate *this)
{
  CMMsl::OnsetHeartRateData *result;

  result = (CMMsl::OnsetHeartRateData *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::OnsetHeartRateData *)CMMsl::OnsetHeartRateData::hash_value(result);
  return result;
}

uint64_t CMMsl::WorkoutRecorderHeartRate::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

void CMMsl::WorkoutRecorderMagnetometer::~WorkoutRecorderMagnetometer(CMMsl::WorkoutRecorderMagnetometer *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100355848;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100355848;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100355848;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::WorkoutRecorderMagnetometer::WorkoutRecorderMagnetometer(_QWORD *this, const CMMsl::WorkoutRecorderMagnetometer *a2)
{
  *this = off_100355848;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::WorkoutRecorderMagnetometer *CMMsl::WorkoutRecorderMagnetometer::operator=(const CMMsl::WorkoutRecorderMagnetometer *a1, const CMMsl::WorkoutRecorderMagnetometer *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::WorkoutRecorderMagnetometer *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderMagnetometer::WorkoutRecorderMagnetometer(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_100355848;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderMagnetometer *a2, CMMsl::WorkoutRecorderMagnetometer *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderMagnetometer::WorkoutRecorderMagnetometer(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100355848;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100355848;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::WorkoutRecorderMagnetometer::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_100355848;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderMagnetometer::formatText(CMMsl::WorkoutRecorderMagnetometer *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutRecorderMagnetometer::readFrom(CMMsl::WorkoutRecorderMagnetometer *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderMagnetometer::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

CMMsl::Magnetometer *CMMsl::WorkoutRecorderMagnetometer::hash_value(CMMsl::WorkoutRecorderMagnetometer *this)
{
  CMMsl::Magnetometer *result;

  result = (CMMsl::Magnetometer *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::Magnetometer *)CMMsl::Magnetometer::hash_value(result);
  return result;
}

uint64_t CMMsl::WorkoutRecorderMagnetometer::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

void CMMsl::WorkoutRecorderOdometer::~WorkoutRecorderOdometer(CMMsl::WorkoutRecorderOdometer *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100355880;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100355880;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100355880;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::WorkoutRecorderOdometer::WorkoutRecorderOdometer(_QWORD *this, const CMMsl::WorkoutRecorderOdometer *a2)
{
  *this = off_100355880;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::WorkoutRecorderOdometer *CMMsl::WorkoutRecorderOdometer::operator=(const CMMsl::WorkoutRecorderOdometer *a1, const CMMsl::WorkoutRecorderOdometer *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::WorkoutRecorderOdometer *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderOdometer::WorkoutRecorderOdometer(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_100355880;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderOdometer *a2, CMMsl::WorkoutRecorderOdometer *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderOdometer::WorkoutRecorderOdometer(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100355880;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100355880;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::WorkoutRecorderOdometer::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_100355880;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderOdometer::formatText(CMMsl::WorkoutRecorderOdometer *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutRecorderOdometer::readFrom(CMMsl::WorkoutRecorderOdometer *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderOdometer::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

CMMsl::OdometerWithAltitude *CMMsl::WorkoutRecorderOdometer::hash_value(CMMsl::WorkoutRecorderOdometer *this)
{
  CMMsl::OdometerWithAltitude *result;

  result = (CMMsl::OdometerWithAltitude *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::OdometerWithAltitude *)CMMsl::OdometerWithAltitude::hash_value(result);
  return result;
}

uint64_t CMMsl::WorkoutRecorderOdometer::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

void CMMsl::WorkoutRecorderPressure::~WorkoutRecorderPressure(CMMsl::WorkoutRecorderPressure *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1003558B8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1003558B8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1003558B8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::WorkoutRecorderPressure::WorkoutRecorderPressure(_QWORD *this, const CMMsl::WorkoutRecorderPressure *a2)
{
  *this = off_1003558B8;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::WorkoutRecorderPressure *CMMsl::WorkoutRecorderPressure::operator=(const CMMsl::WorkoutRecorderPressure *a1, const CMMsl::WorkoutRecorderPressure *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::WorkoutRecorderPressure *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderPressure::WorkoutRecorderPressure(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_1003558B8;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderPressure *a2, CMMsl::WorkoutRecorderPressure *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderPressure::WorkoutRecorderPressure(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003558B8;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003558B8;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::WorkoutRecorderPressure::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_1003558B8;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderPressure::formatText(CMMsl::WorkoutRecorderPressure *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutRecorderPressure::readFrom(CMMsl::WorkoutRecorderPressure *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderPressure::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

CMMsl::Pressure *CMMsl::WorkoutRecorderPressure::hash_value(CMMsl::WorkoutRecorderPressure *this)
{
  CMMsl::Pressure *result;

  result = (CMMsl::Pressure *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::Pressure *)CMMsl::Pressure::hash_value(result);
  return result;
}

uint64_t CMMsl::WorkoutRecorderPressure::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

void CMMsl::WorkoutRecorderRotationRate::~WorkoutRecorderRotationRate(CMMsl::WorkoutRecorderRotationRate *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1003558F0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1003558F0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1003558F0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::WorkoutRecorderRotationRate::WorkoutRecorderRotationRate(_QWORD *this, const CMMsl::WorkoutRecorderRotationRate *a2)
{
  *this = off_1003558F0;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::WorkoutRecorderRotationRate *CMMsl::WorkoutRecorderRotationRate::operator=(const CMMsl::WorkoutRecorderRotationRate *a1, const CMMsl::WorkoutRecorderRotationRate *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::WorkoutRecorderRotationRate *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderRotationRate::WorkoutRecorderRotationRate(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_1003558F0;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderRotationRate *a2, CMMsl::WorkoutRecorderRotationRate *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderRotationRate::WorkoutRecorderRotationRate(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003558F0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003558F0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::WorkoutRecorderRotationRate::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_1003558F0;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderRotationRate::formatText(CMMsl::WorkoutRecorderRotationRate *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutRecorderRotationRate::readFrom(CMMsl::WorkoutRecorderRotationRate *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderRotationRate::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

CMMsl::RotationRate *CMMsl::WorkoutRecorderRotationRate::hash_value(CMMsl::WorkoutRecorderRotationRate *this)
{
  CMMsl::RotationRate *result;

  result = (CMMsl::RotationRate *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::RotationRate *)CMMsl::RotationRate::hash_value(result);
  return result;
}

uint64_t CMMsl::WorkoutRecorderRotationRate::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

void CMMsl::WorkoutRecorderWatchOnWristStatus::~WorkoutRecorderWatchOnWristStatus(CMMsl::WorkoutRecorderWatchOnWristStatus *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100355928;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100355928;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100355928;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::WorkoutRecorderWatchOnWristStatus::WorkoutRecorderWatchOnWristStatus(_QWORD *this, const CMMsl::WorkoutRecorderWatchOnWristStatus *a2)
{
  *this = off_100355928;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::WorkoutRecorderWatchOnWristStatus *CMMsl::WorkoutRecorderWatchOnWristStatus::operator=(const CMMsl::WorkoutRecorderWatchOnWristStatus *a1, const CMMsl::WorkoutRecorderWatchOnWristStatus *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::WorkoutRecorderWatchOnWristStatus *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderWatchOnWristStatus::WorkoutRecorderWatchOnWristStatus(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_100355928;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderWatchOnWristStatus *a2, CMMsl::WorkoutRecorderWatchOnWristStatus *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderWatchOnWristStatus::WorkoutRecorderWatchOnWristStatus(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100355928;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100355928;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::WorkoutRecorderWatchOnWristStatus::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_100355928;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderWatchOnWristStatus::formatText(CMMsl::WorkoutRecorderWatchOnWristStatus *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutRecorderWatchOnWristStatus::readFrom(CMMsl::WorkoutRecorderWatchOnWristStatus *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderWatchOnWristStatus::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

CMMsl::WatchOnWristState *CMMsl::WorkoutRecorderWatchOnWristStatus::hash_value(CMMsl::WorkoutRecorderWatchOnWristStatus *this)
{
  CMMsl::WatchOnWristState *result;

  result = (CMMsl::WatchOnWristState *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::WatchOnWristState *)CMMsl::WatchOnWristState::hash_value(result);
  return result;
}

uint64_t CMMsl::WorkoutRecorderWatchOnWristStatus::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

void CMMsl::WorkoutRecorderWatchOrientationSettings::~WorkoutRecorderWatchOrientationSettings(CMMsl::WorkoutRecorderWatchOrientationSettings *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100355960;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100355960;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100355960;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::WorkoutRecorderWatchOrientationSettings::WorkoutRecorderWatchOrientationSettings(_QWORD *this, const CMMsl::WorkoutRecorderWatchOrientationSettings *a2)
{
  *this = off_100355960;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::WorkoutRecorderWatchOrientationSettings *CMMsl::WorkoutRecorderWatchOrientationSettings::operator=(const CMMsl::WorkoutRecorderWatchOrientationSettings *a1, const CMMsl::WorkoutRecorderWatchOrientationSettings *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::WorkoutRecorderWatchOrientationSettings *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderWatchOrientationSettings::WorkoutRecorderWatchOrientationSettings(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_100355960;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderWatchOrientationSettings *a2, CMMsl::WorkoutRecorderWatchOrientationSettings *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderWatchOrientationSettings::WorkoutRecorderWatchOrientationSettings(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100355960;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100355960;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::WorkoutRecorderWatchOrientationSettings::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_100355960;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderWatchOrientationSettings::formatText(CMMsl::WorkoutRecorderWatchOrientationSettings *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutRecorderWatchOrientationSettings::readFrom(CMMsl::WorkoutRecorderWatchOrientationSettings *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderWatchOrientationSettings::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

uint64_t CMMsl::WorkoutRecorderWatchOrientationSettings::hash_value(CMMsl::WorkoutRecorderWatchOrientationSettings *this)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_BYTE *)(v1 + 16);
  v5 = v1 + 8;
  v3 = *(unsigned int *)(v1 + 8);
  v4 = *(unsigned int *)(v5 + 4);
  if ((v2 & 2) == 0)
    v4 = 0;
  if ((v2 & 1) == 0)
    v3 = 0;
  return v3 ^ v4;
}

uint64_t CMMsl::WorkoutRecorderWatchOrientationSettings::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

void CMMsl::WorkoutRecorderWifiScanResults::~WorkoutRecorderWifiScanResults(CMMsl::WorkoutRecorderWifiScanResults *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100355998;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100355998;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100355998;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::WorkoutRecorderWifiScanResults::WorkoutRecorderWifiScanResults(_QWORD *this, const CMMsl::WorkoutRecorderWifiScanResults *a2)
{
  *this = off_100355998;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::WorkoutRecorderWifiScanResults *CMMsl::WorkoutRecorderWifiScanResults::operator=(const CMMsl::WorkoutRecorderWifiScanResults *a1, const CMMsl::WorkoutRecorderWifiScanResults *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::WorkoutRecorderWifiScanResults *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderWifiScanResults::WorkoutRecorderWifiScanResults(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_100355998;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderWifiScanResults *a2, CMMsl::WorkoutRecorderWifiScanResults *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderWifiScanResults::WorkoutRecorderWifiScanResults(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100355998;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100355998;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::WorkoutRecorderWifiScanResults::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_100355998;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderWifiScanResults::formatText(CMMsl::WorkoutRecorderWifiScanResults *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutRecorderWifiScanResults::readFrom(CMMsl::WorkoutRecorderWifiScanResults *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderWifiScanResults::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

uint64_t CMMsl::WorkoutRecorderWifiScanResults::hash_value(CMMsl::WorkoutRecorderWifiScanResults *this)
{
  char v2;

  return sub_100135B70((uint64_t)&v2, (uint64_t *)this + 1);
}

uint64_t CMMsl::WorkoutRecorderWifiScanResults::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

void CMMsl::WorkoutRecorderWorkoutEvent::~WorkoutRecorderWorkoutEvent(CMMsl::WorkoutRecorderWorkoutEvent *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1003559D0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1003559D0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1003559D0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::WorkoutRecorderWorkoutEvent::WorkoutRecorderWorkoutEvent(_QWORD *this, const CMMsl::WorkoutRecorderWorkoutEvent *a2)
{
  *this = off_1003559D0;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::WorkoutRecorderWorkoutEvent *CMMsl::WorkoutRecorderWorkoutEvent::operator=(const CMMsl::WorkoutRecorderWorkoutEvent *a1, const CMMsl::WorkoutRecorderWorkoutEvent *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::WorkoutRecorderWorkoutEvent *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderWorkoutEvent::WorkoutRecorderWorkoutEvent(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_1003559D0;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderWorkoutEvent *a2, CMMsl::WorkoutRecorderWorkoutEvent *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderWorkoutEvent::WorkoutRecorderWorkoutEvent(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003559D0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003559D0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::WorkoutRecorderWorkoutEvent::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_1003559D0;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderWorkoutEvent::formatText(CMMsl::WorkoutRecorderWorkoutEvent *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutRecorderWorkoutEvent::readFrom(CMMsl::WorkoutRecorderWorkoutEvent *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderWorkoutEvent::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

CMMsl::WorkoutEvent *CMMsl::WorkoutRecorderWorkoutEvent::hash_value(CMMsl::WorkoutRecorderWorkoutEvent *this)
{
  CMMsl::WorkoutEvent *result;

  result = (CMMsl::WorkoutEvent *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::WorkoutEvent *)CMMsl::WorkoutEvent::hash_value(result);
  return result;
}

uint64_t CMMsl::WorkoutRecorderWorkoutEvent::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

void CMMsl::WorkoutRecorderWorkoutSessionPriors::~WorkoutRecorderWorkoutSessionPriors(CMMsl::WorkoutRecorderWorkoutSessionPriors *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100355A08;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100355A08;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100355A08;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::WorkoutRecorderWorkoutSessionPriors::WorkoutRecorderWorkoutSessionPriors(_QWORD *this, const CMMsl::WorkoutRecorderWorkoutSessionPriors *a2)
{
  *this = off_100355A08;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::WorkoutRecorderWorkoutSessionPriors *CMMsl::WorkoutRecorderWorkoutSessionPriors::operator=(const CMMsl::WorkoutRecorderWorkoutSessionPriors *a1, const CMMsl::WorkoutRecorderWorkoutSessionPriors *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::WorkoutRecorderWorkoutSessionPriors *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::WorkoutRecorderWorkoutSessionPriors::WorkoutRecorderWorkoutSessionPriors(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_100355A08;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::WorkoutRecorderWorkoutSessionPriors *a2, CMMsl::WorkoutRecorderWorkoutSessionPriors *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderWorkoutSessionPriors::WorkoutRecorderWorkoutSessionPriors(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100355A08;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100355A08;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::WorkoutRecorderWorkoutSessionPriors::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_100355A08;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::WorkoutRecorderWorkoutSessionPriors::formatText(CMMsl::WorkoutRecorderWorkoutSessionPriors *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutRecorderWorkoutSessionPriors::readFrom(CMMsl::WorkoutRecorderWorkoutSessionPriors *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::WorkoutRecorderWorkoutSessionPriors::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

uint64_t CMMsl::WorkoutRecorderWorkoutSessionPriors::hash_value(CMMsl::WorkoutRecorderWorkoutSessionPriors *this)
{
  char v2;

  return sub_100135D20((uint64_t)&v2, (uint64_t *)this + 1);
}

uint64_t CMMsl::WorkoutRecorderWorkoutSessionPriors::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

void CMMsl::WorkoutSessionPriors::~WorkoutSessionPriors(CMMsl::WorkoutSessionPriors *this)
{
  void **v2;

  *(_QWORD *)this = off_100355A40;
  v2 = (void **)((char *)this + 8);
  sub_1002394A8(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = off_100355A40;
  v2 = (void **)((char *)this + 8);
  sub_1002394A8(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = off_100355A40;
  v2 = (void **)((char *)this + 8);
  sub_1002394A8(&v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::WorkoutSessionPriors::WorkoutSessionPriors(_QWORD *this, const CMMsl::WorkoutSessionPriors *a2)
{
  this[1] = 0;
  *this = off_100355A40;
  this[2] = 0;
  this[3] = 0;
  if (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2))
    sub_1002340F0();
  return this;
}

void sub_1002340F0()
{
  operator new();
}

void sub_100234224(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::WorkoutSessionPriors::operator=(uint64_t a1, const CMMsl::WorkoutSessionPriors *a2)
{
  __int128 v3;
  uint64_t v4;
  void (**v6)(CMMsl::WorkoutSessionPriors *__hidden);
  __int128 v7;
  uint64_t v8;
  void **v9;

  if ((const CMMsl::WorkoutSessionPriors *)a1 != a2)
  {
    CMMsl::WorkoutSessionPriors::WorkoutSessionPriors(&v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v4;
    v6 = off_100355A40;
    v9 = (void **)&v7;
    sub_1002394A8(&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

_QWORD *CMMsl::swap(_QWORD *this, CMMsl::WorkoutSessionPriors *a2, CMMsl::WorkoutSessionPriors *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  return this;
}

_QWORD *CMMsl::WorkoutSessionPriors::WorkoutSessionPriors(_QWORD *a1, uint64_t a2)
{
  _OWORD *v4;

  *a1 = off_100355A40;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  sub_100239524(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *a1 = off_100355A40;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  sub_100239524(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

uint64_t CMMsl::WorkoutSessionPriors::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  void (**v9)(CMMsl::WorkoutSessionPriors *__hidden);
  __int128 v10;
  uint64_t v11;
  void **v12;

  if (a1 != a2)
  {
    v9 = off_100355A40;
    v10 = 0uLL;
    v11 = 0;
    sub_100239524(&v10);
    v4 = *(_QWORD *)(a2 + 24);
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    v10 = v6;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v4;
    v11 = v7;
    v12 = (void **)&v10;
    v9 = off_100355A40;
    sub_1002394A8(&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::WorkoutSessionPriors::formatText(CMMsl::WorkoutSessionPriors *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "workoutPriors");
  }
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::WorkoutSessionPriors::readFrom(CMMsl::WorkoutSessionPriors *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 2)
        sub_100234660();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_100234660()
{
  operator new();
}

void sub_100234798(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::WorkoutSessionPriors::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base **v2;
  const PB::Base **i;
  const PB::Base *v5;

  v2 = *(const PB::Base ***)(this + 8);
  for (i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5, 2u))
    v5 = *v2++;
  return this;
}

BOOL sub_1002347FC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;
  BOOL v8;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t **)a2;
  if (v3 - *a1 != *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
    return 0;
  if (v2 == v3)
    return 1;
  v5 = v2 + 8;
  do
  {
    v6 = *v4++;
    result = CMMsl::WorkoutPriorInformation::operator==(*(_QWORD *)(v5 - 8), v6);
    v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t CMMsl::WorkoutSessionPriors::hash_value(CMMsl::WorkoutSessionPriors *this)
{
  CMMsl::WorkoutPriorInformation **v1;
  CMMsl::WorkoutPriorInformation **v2;
  uint64_t v3;
  CMMsl::WorkoutPriorInformation *v4;

  v1 = (CMMsl::WorkoutPriorInformation **)*((_QWORD *)this + 1);
  v2 = (CMMsl::WorkoutPriorInformation **)*((_QWORD *)this + 2);
  if (v1 == v2)
    return 0;
  v3 = 0;
  do
  {
    v4 = *v1++;
    v3 ^= CMMsl::WorkoutPriorInformation::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

void CMMsl::ZeroVelocityCorrection::~ZeroVelocityCorrection(CMMsl::ZeroVelocityCorrection *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100355A78;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100355A78;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100355A78;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::ZeroVelocityCorrection::ZeroVelocityCorrection(_QWORD *this, const CMMsl::ZeroVelocityCorrection *a2)
{
  *this = off_100355A78;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::ZeroVelocityCorrection *CMMsl::ZeroVelocityCorrection::operator=(const CMMsl::ZeroVelocityCorrection *a1, const CMMsl::ZeroVelocityCorrection *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::ZeroVelocityCorrection *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::ZeroVelocityCorrection::ZeroVelocityCorrection(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_100355A78;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::ZeroVelocityCorrection *a2, CMMsl::ZeroVelocityCorrection *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::ZeroVelocityCorrection::ZeroVelocityCorrection(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100355A78;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100355A78;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::ZeroVelocityCorrection::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_100355A78;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::ZeroVelocityCorrection::formatText(CMMsl::ZeroVelocityCorrection *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "correction");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ZeroVelocityCorrection::readFrom(CMMsl::ZeroVelocityCorrection *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::ZeroVelocityCorrection::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

CMMsl::DeviceMotionCorrection *CMMsl::ZeroVelocityCorrection::hash_value(CMMsl::ZeroVelocityCorrection *this)
{
  CMMsl::DeviceMotionCorrection *result;

  result = (CMMsl::DeviceMotionCorrection *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::DeviceMotionCorrection *)CMMsl::DeviceMotionCorrection::hash_value(result);
  return result;
}

uint64_t CMMsl::ZeroVelocityCorrection::makeCorrection(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

CMMsl::Writer *CMMsl::Writer::Writer(CMMsl::Writer *this)
{
  NSObject *v2;
  NSObject *v3;
  _QWORD handler[5];

  *(_QWORD *)this = 0;
  v2 = dispatch_queue_create("CMMsl.Writer", 0);
  *((_QWORD *)this + 1) = v2;
  v3 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v2);
  *((_QWORD *)this + 2) = v3;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 300;
  *((_DWORD *)this + 10) = -1;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_100234FAC;
  handler[3] = &unk_100355AA0;
  handler[4] = this;
  dispatch_source_set_event_handler(v3, handler);
  dispatch_source_set_timer(*((dispatch_source_t *)this + 2), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL);
  dispatch_resume(*((dispatch_object_t *)this + 2));
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  deflateInit_((z_streamp)((char *)this + 80), -1, "1.2.12", 112);
  return this;
}

void sub_100234F88(_Unwind_Exception *a1)
{
  id *v1;

  _Unwind_Resume(a1);
}

void sub_100234FAC(uint64_t a1)
{
  CMMsl::Writer::closeSensRecord(*(CMMsl::Writer **)(a1 + 32));
}

void CMMsl::Writer::closeSensRecord(CMMsl::Writer *this)
{
  char *v1;
  z_stream *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  const void *v8;
  NSObject *v9;
  NSObject *v10;
  _QWORD destructor[5];

  v1 = (char *)this + 56;
  if (*((_QWORD *)this + 7))
  {
    v3 = (z_stream *)((char *)this + 80);
    while (1)
    {
      v4 = deflate(v3, 4);
      if (v4)
        break;
      CMMsl::Writer::growZlibStream((void **)this);
    }
    if (v4 == 1)
    {
      v5 = *((_QWORD *)this + 15);
      v6 = v5 + 28;
      v7 = (v5 + 35) & 0xFFFFFFFFFFFFFFF8;
      *(_DWORD *)(*((_QWORD *)this + 7) + 12) = v5 + 12;
      if (v5 + 28 < v7)
      {
        do
          *(_BYTE *)(*(_QWORD *)v1 + v6++) = 0;
        while (v7 != v6);
      }
      v8 = (const void *)*((_QWORD *)this + 7);
      if (*(_QWORD *)this)
      {
        (*(void (**)(_QWORD, const void *, size_t))(**(_QWORD **)this + 24))(*(_QWORD *)this, v8, v7);
        free(*(void **)v1);
      }
      else
      {
        v9 = *((_QWORD *)this + 1);
        destructor[0] = _NSConcreteStackBlock;
        destructor[1] = 3221225472;
        destructor[2] = sub_100235990;
        destructor[3] = &unk_100355AA0;
        destructor[4] = v8;
        v10 = dispatch_data_create(v8, v7, v9, destructor);
        dispatch_io_write(*((dispatch_io_t *)this + 3), *((_QWORD *)this + 6), v10, *((dispatch_queue_t *)this + 1), &stru_100355B70);

      }
      *((_QWORD *)this + 6) += v7;
      *((_QWORD *)v1 + 1) = 0;
      *((_QWORD *)v1 + 2) = 0;
      *(_QWORD *)v1 = 0;
      deflateReset(v3);
      dispatch_source_set_timer(*((dispatch_source_t *)this + 2), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, (unint64_t)(1000000000 * *((_QWORD *)this + 4)) >> 1);
    }
    else
    {
      fprintf(__stderrp, "zstream status? Msl %d\n", v4);
    }
  }
}

void CMMsl::Writer::setFlushTimeoutSeconds(CMMsl::Writer *this, uint64_t a2)
{
  NSObject *v2;
  _QWORD v3[6];

  v2 = *((_QWORD *)this + 1);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1002351A4;
  v3[3] = &unk_100355AC0;
  v3[4] = this;
  v3[5] = a2;
  dispatch_sync(v2, v3);
}

uint64_t sub_1002351A4(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (*(_DWORD *)(v1 + 40) != -1)
    sub_100239758();
  *(_QWORD *)(v1 + 32) = *(_QWORD *)(result + 40);
  return result;
}

void CMMsl::Writer::~Writer(CMMsl::Writer *this)
{
  int v2;

  if (!*((_QWORD *)this + 3))
  {
    v2 = *((_DWORD *)this + 10);
    if ((v2 & 0x80000000) == 0)
      close(v2);
  }
  free(*((void **)this + 7));
  deflateEnd((z_streamp)((char *)this + 80));

}

uint64_t CMMsl::Writer::open(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v3;
  uint64_t v4;
  _QWORD v6[7];
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  v3 = *(NSObject **)(a1 + 8);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1002352CC;
  v6[3] = &unk_100355B08;
  v6[5] = a1;
  v6[6] = a2;
  v7 = a3;
  v6[4] = &v8;
  dispatch_sync(v3, v6);
  v4 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_1002352CC(uint64_t a1)
{
  uint64_t v2;
  int v3;
  off_t v4;
  off_t v5;
  unint64_t v6;
  FILE *v7;
  const char *v8;
  size_t v9;
  dispatch_fd_t v10;
  NSObject *v11;
  dispatch_io_t v12;
  void *v13;
  FILE *v14;
  const char *v15;
  size_t v16;
  _QWORD cleanup_handler[4];
  dispatch_fd_t v18;
  uint64_t __buf;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = open_dprotected_np(*(const char **)(a1 + 48), 16777730, *(_DWORD *)(a1 + 56), 0, 438);
  *(_DWORD *)(v2 + 40) = v3;
  if (v3 < 0)
  {
    v7 = __stderrp;
    v8 = "Cannot open Msl file\n";
    v9 = 21;
LABEL_11:
    fwrite(v8, v9, 1uLL, v7);
    return;
  }
  v4 = lseek(v3, 0, 2);
  if (v4 < 0)
  {
    v7 = __stderrp;
    v8 = "Cannot seek to end of Msl file\n";
    v9 = 31;
    goto LABEL_11;
  }
  v5 = v4;
  if (lseek(*(_DWORD *)(v2 + 40), 0, 0) < 0)
  {
    v7 = __stderrp;
    v8 = "Cannot seek to start of Msl file\n";
    v9 = 33;
    goto LABEL_11;
  }
  if (v5)
  {
    __buf = 0;
    if (pread(*(_DWORD *)(v2 + 40), &__buf, 8uLL, 0) != 8)
    {
      v14 = __stderrp;
      v15 = "Short signature in Msl file\n";
      v16 = 28;
      goto LABEL_18;
    }
    if (__buf != 0xE020C5BE006C536DLL)
    {
      v14 = __stderrp;
      v15 = "Bad signature in Msl file\n";
      v16 = 26;
      goto LABEL_18;
    }
    v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v6 = 8;
    pwrite(*(_DWORD *)(v2 + 40), &unk_1002E91A8, 8uLL, 0);
  }
  *(_QWORD *)(v2 + 48) = v6;
  v10 = *(_DWORD *)(v2 + 40);
  v11 = *(NSObject **)(v2 + 8);
  cleanup_handler[0] = _NSConcreteStackBlock;
  cleanup_handler[1] = 3221225472;
  cleanup_handler[2] = sub_1002354E0;
  cleanup_handler[3] = &unk_100355AE0;
  v18 = v10;
  v12 = dispatch_io_create(1uLL, v10, v11, cleanup_handler);
  v13 = *(void **)(v2 + 24);
  *(_QWORD *)(v2 + 24) = v12;

  if (*(_QWORD *)(v2 + 24))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    return;
  }
  v14 = __stderrp;
  v15 = "Cannot create dispatch_io for Msl file\n";
  v16 = 39;
LABEL_18:
  fwrite(v15, v16, 1uLL, v14);
}

uint64_t sub_1002354E0(uint64_t a1)
{
  return close(*(_DWORD *)(a1 + 32));
}

uint64_t CMMsl::Writer::open(_QWORD *a1, uint64_t a2, char a3)
{
  *a1 = a2;
  if ((a3 & 1) == 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a2 + 24))(a2, &unk_1002E91A8, 8);
    a1[6] = 8;
  }
  return 1;
}

void CMMsl::Writer::writeItem(CMMsl::Writer *this, const CMMsl::Item *a2)
{
  NSObject *v2;
  _QWORD v3[6];

  v2 = *((_QWORD *)this + 1);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100235590;
  v3[3] = &unk_100355AC0;
  v3[4] = this;
  v3[5] = a2;
  dispatch_sync(v2, v3);
}

void sub_100235590(uint64_t a1)
{
  CMMsl::Writer *v2;
  uint64_t v3;
  unsigned __int8 v4[4];
  uint64_t v5;
  const unsigned __int8 *v6;

  v2 = *(CMMsl::Writer **)(a1 + 32);
  PB::Writer::Writer((PB::Writer *)&v5);
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), &v5);
  v3 = *((_QWORD *)v2 + 7);
  if (!v3)
  {
    CMMsl::Writer::openSensRecord(v2);
    v3 = *((_QWORD *)v2 + 7);
  }
  ++*(_DWORD *)(v3 + 16);
  *(_DWORD *)v4 = v5 - (_DWORD)v6;
  CMMsl::Writer::pumpZlib((void **)v2, v4, 4);
  CMMsl::Writer::pumpZlib((void **)v2, v6, v5 - (_DWORD)v6);
  if (!*((_QWORD *)v2 + 9))
    CMMsl::Writer::closeSensRecord(v2);
  PB::Writer::~Writer((PB::Writer *)&v5);
}

void sub_10023563C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PB::Writer::~Writer((PB::Writer *)va);
  _Unwind_Resume(a1);
}

void CMMsl::Writer::openSensRecord(CMMsl::Writer *this)
{
  uint64_t v2;
  int tv_sec;
  unint64_t v4;
  NSObject *v5;
  dispatch_time_t v6;
  timeval v7;

  *((_QWORD *)this + 7) = malloc_type_malloc(0x8000uLL, 0x4A3B362DuLL);
  *((_OWORD *)this + 4) = xmmword_1002ECB10;
  gettimeofday(&v7, 0);
  v2 = *((_QWORD *)this + 7);
  *(_QWORD *)v2 = 0x5979AAB3D5E07959;
  *(_QWORD *)(v2 + 8) = 1936614771;
  tv_sec = v7.tv_sec;
  *(_DWORD *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 20) = tv_sec;
  *(_DWORD *)(v2 + 24) = 1000 * v7.tv_usec;
  *((_QWORD *)this + 13) = v2 + 28;
  *((_DWORD *)this + 28) = *((_DWORD *)this + 16) - 28;
  v4 = 1000000000 * *((_QWORD *)this + 4);
  v5 = *((_QWORD *)this + 2);
  v6 = dispatch_time(0, v4);
  dispatch_source_set_timer(v5, v6, 0xFFFFFFFFFFFFFFFFLL, v4 >> 1);
}

void **CMMsl::Writer::pumpZlib(void **this, const unsigned __int8 *a2, int a3)
{
  z_stream *v3;
  uint64_t v4;

  this[10] = (void *)a2;
  v3 = (z_stream *)(this + 10);
  *((_DWORD *)this + 22) = a3;
  if (a3)
  {
    v4 = (uint64_t)this;
    do
    {
      this = (void **)deflate(v3, 0);
      if (!(_DWORD)this && !*(_DWORD *)(v4 + 112))
        this = CMMsl::Writer::growZlibStream((void **)v4);
    }
    while (*(_DWORD *)(v4 + 88));
  }
  return this;
}

void CMMsl::Writer::flush(CMMsl::Writer *this)
{
  NSObject *v1;
  _QWORD block[5];

  v1 = *((_QWORD *)this + 1);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002357D0;
  block[3] = &unk_100355AA0;
  block[4] = this;
  dispatch_sync(v1, block);
}

void sub_1002357D0(uint64_t a1)
{
  CMMsl::Writer::closeSensRecord(*(CMMsl::Writer **)(a1 + 32));
}

void CMMsl::Writer::sync(CMMsl::Writer *this)
{
  dispatch_semaphore_t v2;
  NSObject *v3;
  NSObject *v4;
  _QWORD block[4];
  dispatch_semaphore_t v6;
  CMMsl::Writer *v7;

  v2 = dispatch_semaphore_create(0);
  v3 = *((_QWORD *)this + 1);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100235858;
  block[3] = &unk_100355B30;
  v6 = v2;
  v7 = this;
  v4 = v2;
  dispatch_sync(v3, block);

}

void sub_100235858(uint64_t a1)
{
  CMMsl::Writer *v2;
  NSObject *v3;
  _QWORD v4[4];
  id v5;
  CMMsl::Writer *v6;

  v2 = *(CMMsl::Writer **)(a1 + 40);
  CMMsl::Writer::closeSensRecord(v2);
  v3 = *((_QWORD *)v2 + 3);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1002358F0;
  v4[3] = &unk_100355B30;
  v6 = v2;
  v5 = *(id *)(a1 + 32);
  dispatch_io_barrier(v3, v4);
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL);

}

intptr_t sub_1002358F0(uint64_t a1)
{
  fsync(*(_DWORD *)(*(_QWORD *)(a1 + 40) + 40));
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void **CMMsl::Writer::growZlibStream(void **this)
{
  void **v1;
  char *v2;
  void *v3;
  char *v4;

  v1 = this;
  v3 = this[8];
  v2 = (char *)this[9];
  if (v2)
  {
    *((_DWORD *)this + 28) += (_DWORD)v2;
    this[8] = &v2[(_QWORD)v3];
    this[9] = 0;
  }
  else
  {
    this[8] = (void *)(2 * (_QWORD)v3);
    this = (void **)malloc_type_realloc(this[7], 2 * (_QWORD)v3, 0x59C50B5uLL);
    v1[7] = this;
    v4 = (char *)v1[15];
    v1[13] = &v4[(_QWORD)this + 28];
    *((_DWORD *)v1 + 28) = *((_DWORD *)v1 + 16) - (_DWORD)v4;
  }
  return this;
}

void sub_100235990(uint64_t a1)
{
  free(*(void **)(a1 + 32));
}

void sub_100235998(id a1, BOOL a2, OS_dispatch_data *a3, int a4)
{
  FILE *v4;
  char *v5;

  if (a4 || !a2)
  {
    v4 = __stderrp;
    v5 = strerror(a4);
    fprintf(v4, "Msl dispatch io write error %s\n", v5);
  }
}

uint64_t CMMsl::Writer::totalSizeApproximatelyWritten(CMMsl::Writer *this)
{
  return *((_QWORD *)this + 15) + *((_QWORD *)this + 6);
}

void sub_100235E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  sub_100235F48((uint64_t)&a17);

  _Unwind_Resume(a1);
}

void sub_100235EEC(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t sub_100235F48(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_10023611C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1002366E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1002368E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  CMMsl::Item::~Item((CMMsl::Item *)va);

  _Unwind_Resume(a1);
}

void sub_100236A7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  CMMsl::Item::~Item((CMMsl::Item *)va);

  _Unwind_Resume(a1);
}

void sub_100236CF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  CMMsl::Item::~Item((CMMsl::Item *)va);

  _Unwind_Resume(a1);
}

void sub_100236F28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  CMMsl::Item::~Item((CMMsl::Item *)va);

  _Unwind_Resume(a1);
}

void sub_1002370CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  CMMsl::Item::~Item((CMMsl::Item *)va);

  _Unwind_Resume(a1);
}

void sub_100237478(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002375EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  CMMsl::Item::~Item((CMMsl::Item *)va);

  _Unwind_Resume(a1);
}

void sub_100237734(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  CMMsl::Item::~Item((CMMsl::Item *)va);

  _Unwind_Resume(a1);
}

void sub_1002378B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  CMMsl::Item::~Item((CMMsl::Item *)va);

  _Unwind_Resume(a1);
}

void sub_100237A5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  CMMsl::Item::~Item((CMMsl::Item *)va);

  _Unwind_Resume(a1);
}

void sub_100237BF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  CMMsl::Item::~Item((CMMsl::Item *)va);

  _Unwind_Resume(a1);
}

void sub_100237FA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  CMMsl::Item::~Item((CMMsl::Item *)va);

  _Unwind_Resume(a1);
}

void sub_100238120(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  CMMsl::Item::~Item((CMMsl::Item *)va);

  _Unwind_Resume(a1);
}

void sub_1002386C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  CMMsl::Item::~Item((CMMsl::Item *)va);

  _Unwind_Resume(a1);
}

void sub_100238A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  CMMsl::Item::~Item((CMMsl::Item *)&a9);

  _Unwind_Resume(a1);
}

void sub_100238BCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  CMMsl::Item::~Item((CMMsl::Item *)va);

  _Unwind_Resume(a1);
}

void sub_100238D14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  CMMsl::Item::~Item((CMMsl::Item *)va);

  _Unwind_Resume(a1);
}

void sub_100238EF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  CMMsl::Item::~Item((CMMsl::Item *)va);

  _Unwind_Resume(a1);
}

void sub_100238F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10023924C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

char *sub_100239350(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      sub_10000D5F8();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_10000F450(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

__n128 sub_100239458(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void sub_1002394A8(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_100239524(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v1)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v1);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_100239594(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "MSLDataRecording");
  v2 = (void *)qword_1003873F8;
  qword_1003873F8 = (uint64_t)v1;

}

void ***sub_1002395C4(void ***result, void **a2)
{
  void **v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    free(*v2);
    operator delete();
  }
  return result;
}

uint64_t sub_100239610(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_100239670@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0xD8uLL);
  result = sub_1002396B8(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1002396A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002396B8(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_100358818;
  a1[1] = 0;
  CMMsl::Writer::Writer((CMMsl::Writer *)(a1 + 3));
  return a1;
}

void sub_1002396F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100239704(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100358818;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100239718(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100358818;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_10023974C(uint64_t a1)
{
  CMMsl::Writer::~Writer((CMMsl::Writer *)(a1 + 24));
}

void sub_100239758()
{
  __assert_rtn("setFlushTimeoutSeconds_block_invoke", "MSLWriter.cpp", 56, "(fFd == -1) && (\"Writer::setFlushTimeout() must be called before ::open().\")");
}

id KappaCompanion::serializeDeviceInfo(KappaCompanion *this, const CompanionDeviceInfo *a2)
{
  NSObject *v3;
  int v4;
  char *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  void *v19;
  uint64_t v21;
  uint64_t v22;
  uint8_t buf[4];
  int v24;
  _BYTE v25[12];
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;

  if (qword_100387380 != -1)
    dispatch_once(&qword_100387380, &stru_100358858);
  v3 = qword_100387388;
  if (os_log_type_enabled((os_log_t)qword_100387388, OS_LOG_TYPE_DEBUG))
  {
    v4 = *(_DWORD *)this;
    if (*((char *)this + 31) >= 0)
      v5 = (char *)this + 8;
    else
      v5 = (char *)*((_QWORD *)this + 1);
    v6 = *((_DWORD *)this + 8);
    v7 = *((_DWORD *)this + 9);
    v8 = *((_DWORD *)this + 10);
    v9 = *((_DWORD *)this + 11);
    v10 = *((_DWORD *)this + 12);
    v11 = *((_DWORD *)this + 13);
    v12 = *((_DWORD *)this + 14);
    *(_DWORD *)buf = 67176707;
    v24 = v4;
    *(_WORD *)v25 = 2081;
    *(_QWORD *)&v25[2] = v5;
    *(_WORD *)&v25[10] = 1025;
    v26 = v6;
    LOWORD(v27) = 1025;
    *(_DWORD *)((char *)&v27 + 2) = v8;
    HIWORD(v27) = 1025;
    v28 = v7;
    LOWORD(v29) = 1025;
    *(_DWORD *)((char *)&v29 + 2) = v9;
    HIWORD(v29) = 1025;
    v30 = v10;
    v31 = 1025;
    v32 = v11;
    v33 = 1025;
    v34 = v12;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "sending kappa device info %{private}d %{private}s %{private}d %{private}d %{private}d %{private}d %{private}d %{private}d %{private}d", buf, 0x3Cu);
  }
  PB::Writer::Writer((PB::Writer *)&v21);
  KappaCompanionDeviceInfo::KappaCompanionDeviceInfo((KappaCompanionDeviceInfo *)buf);
  v13 = *(_DWORD *)this;
  LOBYTE(v31) = v31 | 1;
  *(_DWORD *)&v25[8] = v13;
  sub_100026138((uint64_t)buf);
  std::string::operator=(*(std::string **)v25, (const std::string *)((char *)this + 8));
  v14 = *((_DWORD *)this + 9);
  v15 = *((_DWORD *)this + 10);
  v16 = *((_DWORD *)this + 11);
  HIDWORD(v27) = *((_DWORD *)this + 8);
  v28 = v15;
  HIDWORD(v29) = v14;
  v30 = v16;
  v17 = *((_DWORD *)this + 12);
  LODWORD(v29) = *((_DWORD *)this + 13);
  v18 = *((_DWORD *)this + 14);
  LOBYTE(v31) = v31 | 0xFE;
  v26 = v18;
  LODWORD(v27) = v17;
  KappaCompanionDeviceInfo::writeTo((uint64_t)buf, (PB::Writer *)&v21);
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v22, v21 - v22));
  KappaCompanionDeviceInfo::~KappaCompanionDeviceInfo((KappaCompanionDeviceInfo *)buf);
  PB::Writer::~Writer((PB::Writer *)&v21);
  return v19;
}

void sub_100239954(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  KappaCompanionDeviceInfo::~KappaCompanionDeviceInfo((KappaCompanionDeviceInfo *)va1);
  PB::Writer::~Writer((PB::Writer *)va);
  _Unwind_Resume(a1);
}

void KappaCompanion::deserializeDeviceInfo(KappaCompanion *this, const NSData *a2)
{
  KappaCompanion *v2;
  char v3;
  int v4;
  int v5;
  NSObject *v6;
  void **v7;
  int v8;
  void *__p[2];
  __int128 v10;
  __int128 v11;
  int v12;
  _BYTE v13[8];
  std::string *__str;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  char v23;
  uint8_t v24[32];
  uint8_t buf[4];
  int v26;
  __int16 v27;
  void **v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;

  v2 = objc_retainAutorelease(this);
  PB::Reader::Reader((PB::Reader *)v24, (const unsigned __int8 *)-[KappaCompanion bytes](v2, "bytes"), (unint64_t)-[KappaCompanion length](v2, "length"));
  KappaCompanionDeviceInfo::KappaCompanionDeviceInfo((KappaCompanionDeviceInfo *)v13);
  v8 = 0;
  *(_OWORD *)__p = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0;
  KappaCompanionDeviceInfo::readFrom((KappaCompanionDeviceInfo *)v13, (PB::Reader *)v24);
  v3 = v23;
  if ((v23 & 1) != 0)
    v8 = v15;
  if (__str)
  {
    std::string::operator=((std::string *)__p, __str);
    v3 = v23;
  }
  v4 = v18;
  v5 = v21;
  if ((v3 & 8) == 0)
    v4 = -1;
  if ((v3 & 0x40) == 0)
    v5 = -1;
  *((_QWORD *)&v10 + 1) = __PAIR64__(v5, v4);
  if ((v3 & 0x10) != 0)
  {
    LODWORD(v11) = v19;
    if ((v3 & 0x80) == 0)
    {
LABEL_11:
      if ((v3 & 4) == 0)
        goto LABEL_12;
      goto LABEL_25;
    }
  }
  else if ((v3 & 0x80) == 0)
  {
    goto LABEL_11;
  }
  DWORD1(v11) = v22;
  if ((v3 & 4) == 0)
  {
LABEL_12:
    if ((v3 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  DWORD2(v11) = v17;
  if ((v3 & 0x20) == 0)
  {
LABEL_13:
    if ((v3 & 2) == 0)
      goto LABEL_15;
    goto LABEL_14;
  }
LABEL_26:
  HIDWORD(v11) = v20;
  if ((v3 & 2) == 0)
  {
LABEL_15:
    if (qword_100387380 != -1)
      dispatch_once(&qword_100387380, &stru_100358858);
    v6 = qword_100387388;
    if (os_log_type_enabled((os_log_t)qword_100387388, OS_LOG_TYPE_DEBUG))
    {
      if ((SBYTE7(v10) & 0x80u) == 0)
        v7 = __p;
      else
        v7 = (void **)__p[0];
      *(_DWORD *)buf = 67176707;
      v26 = v8;
      v27 = 2081;
      v28 = v7;
      v29 = 1025;
      v30 = DWORD2(v10);
      v31 = 1025;
      v32 = v11;
      v33 = 1025;
      v34 = HIDWORD(v10);
      v35 = 1025;
      v36 = DWORD1(v11);
      v37 = 1025;
      v38 = DWORD2(v11);
      v39 = 1025;
      v40 = HIDWORD(v11);
      v41 = 1025;
      v42 = v12;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "receiving kappa device info %{private}d %{private}s %{private}d %{private}d %{private}d %{private}d %{private}d %{private}d %{private}d", buf, 0x3Cu);
    }
    operator new();
  }
LABEL_14:
  v12 = v16;
  goto LABEL_15;
}

void sub_100239C3C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  operator delete();
}

id KappaCompanion::serializeTrigger(float16x4_t *this, const CompanionTrigger *a2)
{
  NSObject *v3;
  int v4;
  int v5;
  int v6;
  __int32 v7;
  float16x4_t v8;
  double v9;
  double v10;
  __int32 v11;
  int v12;
  int v13;
  int v14;
  int v15;
  float16x4_t v16;
  int v27;
  int v28;
  int v29;
  float16x4_t v30;
  double v31;
  double v32;
  __int32 v33;
  unsigned int v34;
  __int32 v35;
  __int32 v36;
  int v37;
  int v38;
  float16x4_t v39;
  int v42;
  __int32 v43;
  float16x4_t v44;
  void *v45;
  uint64_t v47;
  uint64_t v48;
  unint64_t __src;
  int v50;
  int v51;
  uint8_t buf[4];
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  __int32 v59;
  __int16 v60;
  _BYTE v61[20];
  double v62;
  float16x4_t v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  float16x4_t v68;
  _BYTE v69[12];
  unint64_t v70;
  _BYTE v71[10];
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;
  __int16 v78;
  float16x4_t v79;
  __int16 v80;
  double v81;
  __int16 v82;
  double v83;

  if (qword_100387380 != -1)
    dispatch_once(&qword_100387380, &stru_100358858);
  v3 = qword_100387388;
  if (os_log_type_enabled((os_log_t)qword_100387388, OS_LOG_TYPE_DEBUG))
  {
    v4 = this[1].u8[0];
    v5 = this[1].u8[1];
    v6 = this[1].u16[1];
    v7 = this[1].i32[1];
    v8 = this[2];
    v9 = *(float *)this[3].i32;
    v10 = *(float *)&this[3].i32[1];
    v11 = this[4].i8[0];
    v12 = this[4].i8[1];
    v13 = this[4].i8[2];
    v14 = this[4].i8[3];
    v15 = this[4].i8[4];
    v16 = this[5];
    _H2 = this[6].i16[0];
    __asm { FCVT            D2, H2 }
    _H3 = this[6].i16[1];
    __asm { FCVT            D3, H3 }
    _H4 = this[6].i16[2];
    __asm { FCVT            D4, H4 }
    v27 = this[6].u8[6];
    v28 = this[6].u8[7];
    v29 = this[7].u16[0];
    v30 = this[8];
    v31 = *(float *)&this[11].i32[1];
    v32 = *(float *)this[12].i32;
    *(_DWORD *)buf = 67180033;
    v53 = v4;
    v54 = 1025;
    v55 = v5;
    v56 = 1025;
    v57 = v6;
    v58 = 1025;
    v59 = v7;
    v60 = 2049;
    *(float16x4_t *)v61 = v8;
    *(_WORD *)&v61[8] = 2049;
    *(double *)&v61[10] = v9;
    *(_WORD *)&v61[18] = 2049;
    v62 = v10;
    v63.i16[0] = 1025;
    *(__int32 *)((char *)v63.i32 + 2) = v11;
    v63.i16[3] = 1025;
    v64 = v12;
    LOWORD(v65) = 1025;
    *(_DWORD *)((char *)&v65 + 2) = v13;
    HIWORD(v65) = 1025;
    v66 = v14;
    LOWORD(v67) = 1025;
    *(_DWORD *)((char *)&v67 + 2) = v15;
    HIWORD(v67) = 2049;
    v68 = v16;
    *(_WORD *)v69 = 2049;
    *(_QWORD *)&v69[2] = _D2;
    *(_WORD *)&v69[10] = 2049;
    v70 = _D3;
    *(_WORD *)v71 = 2049;
    *(_QWORD *)&v71[2] = _D4;
    v72 = 1025;
    v73 = v27;
    v74 = 1025;
    v75 = v28;
    v76 = 1025;
    v77 = v29;
    v78 = 2049;
    v79 = v30;
    v80 = 2049;
    v81 = v31;
    v82 = 2049;
    v83 = v32;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "sending kappa trigger info %{private}d %{private}d %{private}d %{private}d %{private}llu %{private}f %{private}f %{private}d %{private}d %{private}d %{private}d %{private}d %{private}llu %{private}f %{private}f %{private}f %{private}d %{private}d%{private}d %{private}llu%{private}f %{private}f", buf, 0xAEu);
  }
  PB::Writer::Writer((PB::Writer *)&v47);
  KappaTriggerSample::KappaTriggerSample((KappaTriggerSample *)buf);
  v62 = *(double *)this;
  v33 = this[3].i32[1];
  HIDWORD(v65) = this[3].i32[0];
  v34 = this[1].u8[1];
  v35 = this[1].u16[1];
  *(_DWORD *)&v69[4] = this[1].u8[0];
  v68.i32[0] = v35;
  v36 = this[1].i32[1];
  v63 = this[2];
  HIDWORD(v67) = v33;
  *(_DWORD *)&v69[8] = this[4].i8[0];
  v70 = __PAIR64__(v36, v34);
  LODWORD(v67) = this[4].i8[1];
  v37 = this[4].i8[2];
  *(_QWORD *)v71 = __PAIR64__(*(unsigned int *)&v71[4], this[4].i8[3]) | 0x3E77E00000000;
  v38 = this[4].i8[4];
  v64 = v37;
  LODWORD(v65) = v38;
  v39 = this[5];
  __src = vcvtq_f32_f16(this[6]).u64[0];
  _H0 = this[6].i16[2];
  __asm { FCVT            S0, H0 }
  *(float16x4_t *)&v61[12] = v39;
  v50 = _S0;
  sub_100020CE4((char *)&v54, (char *)&__src, (uint64_t)&v51, 3uLL);
  v42 = this[6].u8[6];
  v43 = this[7].u16[0];
  v66 = this[6].u8[7];
  v68.i32[1] = v43;
  *(_DWORD *)v69 = v42;
  v44 = this[8];
  *(_DWORD *)&v71[4] |= 0x1881u;
  *(float16x4_t *)&v61[4] = v44;
  KappaTriggerSample::writeTo((uint64_t)buf, (PB::Writer *)&v47);
  v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v48, v47 - v48));
  KappaTriggerSample::~KappaTriggerSample((KappaTriggerSample *)buf);
  PB::Writer::~Writer((PB::Writer *)&v47);
  return v45;
}

void sub_100239FA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  KappaTriggerSample::~KappaTriggerSample((KappaTriggerSample *)va1);
  PB::Writer::~Writer((PB::Writer *)va);
  _Unwind_Resume(a1);
}

void KappaCompanion::deserializeTrigger(KappaCompanion *this, const NSData *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  float v8;
  float v9;
  int v10;
  uint64_t v11;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  NSObject *v44;
  int v45;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  KappaCompanion *v60;
  int v61;
  unsigned __int8 v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  void *__p;
  uint64_t v74;
  uint64_t v75;
  int v76;
  __int16 v77;
  _BYTE v78[8];
  const void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned __int8 v84;
  unsigned __int8 v85;
  float v86;
  unsigned __int8 v87;
  unsigned __int8 v88;
  float v89;
  unsigned __int16 v90;
  unsigned __int16 v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  int v96;
  unsigned __int8 v97;
  int v98;
  uint8_t v99[32];
  uint8_t buf[4];
  int v101;
  __int16 v102;
  int v103;
  __int16 v104;
  int v105;
  __int16 v106;
  int v107;
  __int16 v108;
  uint64_t v109;
  __int16 v110;
  double v111;
  __int16 v112;
  double v113;
  __int16 v114;
  int v115;
  __int16 v116;
  int v117;
  __int16 v118;
  int v119;
  __int16 v120;
  int v121;
  __int16 v122;
  int v123;
  __int16 v124;
  uint64_t v125;
  __int16 v126;
  uint64_t v127;
  __int16 v128;
  uint64_t v129;
  __int16 v130;
  uint64_t v131;
  __int16 v132;
  int v133;
  __int16 v134;
  int v135;
  __int16 v136;
  int v137;
  __int16 v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;

  v60 = objc_retainAutorelease(this);
  PB::Reader::Reader((PB::Reader *)v99, (const unsigned __int8 *)-[KappaCompanion bytes](v60, "bytes"), (unint64_t)-[KappaCompanion length](v60, "length"));
  KappaTriggerSample::KappaTriggerSample((KappaTriggerSample *)v78);
  v76 = 0;
  v77 = 0;
  v140 = 0u;
  v141 = 0u;
  v142 = 0u;
  KappaTriggerSample::readFrom((KappaTriggerSample *)v78, (PB::Reader *)v99);
  v2 = v98;
  v3 = v93;
  v4 = v95;
  v5 = v90;
  v6 = v96;
  if ((v98 & 8) != 0)
    v7 = v83;
  else
    v7 = 0;
  if ((v98 & 0x40) != 0)
    v8 = v86;
  else
    v8 = 0.0;
  if ((v98 & 0x200) != 0)
    v9 = v89;
  else
    v9 = 0.0;
  v10 = v94;
  v71 = v88;
  v65 = v97;
  v67 = v84;
  v63 = v85;
  if ((v98 & 2) != 0)
    v11 = v82;
  else
    v11 = 0;
  __p = 0;
  v74 = 0;
  v75 = 0;
  sub_100026198(&__p, v79, v80, (v80 - (uint64_t)v79) >> 2);
  v54 = v10;
  v55 = v5;
  v61 = v4;
  v69 = v3;
  v56 = v6;
  v58 = v11;
  v59 = v7;
  _H11 = 0;
  _H12 = 0;
  _H13 = 0;
  if (v74 - (_QWORD)__p == 12)
  {
    _S0 = *(_DWORD *)__p;
    _S1 = *((_DWORD *)__p + 1);
    __asm
    {
      FCVT            H11, S0
      FCVT            H12, S1
    }
    _S0 = *((_DWORD *)__p + 2);
    __asm { FCVT            H13, S0 }
  }
  v22 = v2 << 18;
  v23 = v2 << 16;
  v24 = v2 << 21;
  v25 = v2 << 17;
  v26 = v2 << 23;
  v27 = v2 << 27;
  v28 = v2 << 14;
  v29 = v2 << 26;
  v30 = v2 << 15;
  v31 = v98 << 19;
  v32 = v92;
  v33 = v87;
  v34 = v91;
  v35 = v98 << 24;
  v36 = v98 << 20;
  if ((v98 & 1) != 0)
    v37 = v81;
  else
    v37 = 0;
  v57 = v37;
  if (qword_100387380 != -1)
  {
    v52 = v25;
    v53 = v30;
    v50 = v27;
    v51 = v26;
    v49 = v28;
    dispatch_once(&qword_100387380, &stru_100358858);
    v28 = v49;
    v27 = v50;
    v26 = v51;
    v25 = v52;
    v30 = v53;
  }
  v38 = v69 & (v22 >> 31);
  v39 = v61 & (v23 >> 31);
  v40 = v55 & (v24 >> 31);
  v41 = v54 & (v25 >> 31);
  v68 = v67 & (v27 >> 31);
  v70 = v71 & (v26 >> 31);
  v66 = v65 & (v28 >> 31);
  v62 = v39;
  v64 = v63 & (v29 >> 31);
  v42 = v32 & (v31 >> 31);
  v43 = v33 & (v35 >> 31);
  v72 = v34 & (v36 >> 31);
  v44 = qword_100387388;
  v45 = v56 & (v30 >> 31);
  if (os_log_type_enabled((os_log_t)qword_100387388, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67179521;
    v101 = v38;
    v102 = 1025;
    v103 = v62;
    v104 = 1025;
    v105 = (unsigned __int16)v40;
    __asm
    {
      FCVT            D2, H11
      FCVT            D3, H12
    }
    v106 = 1025;
    __asm { FCVT            D4, H13 }
    v107 = v45;
    v108 = 2049;
    v109 = v59;
    v110 = 2049;
    v111 = v8;
    v112 = 2049;
    v113 = v9;
    v114 = 1025;
    v115 = (char)v41;
    v116 = 1025;
    v117 = (char)v70;
    v118 = 1025;
    v119 = (char)v68;
    v120 = 1025;
    v121 = (char)v66;
    v122 = 1025;
    v123 = (char)v64;
    v124 = 2049;
    v125 = v58;
    v126 = 2049;
    v127 = _D2;
    v128 = 2049;
    v129 = _D3;
    v130 = 2049;
    v131 = _D4;
    v132 = 1025;
    v133 = v42;
    v134 = 1025;
    v135 = v43;
    v136 = 1025;
    v137 = (unsigned __int16)v72;
    v138 = 2049;
    v139 = v57;
    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "receiving kappa trigger info %{private}d %{private}d %{private}d %{private}d %{private}llu %{private}f %{private}f %{private}d %{private}d %{private}d %{private}d %{private}d %{private}llu %{private}f %{private}f %{private}f %{private}d %{private}d%{private}d %{private}llu", buf, 0x9Au);
  }
  operator new();
}

void sub_10023A498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (__p)
    operator delete(__p);
  KappaTriggerSample::~KappaTriggerSample((KappaTriggerSample *)&a27);

  _Unwind_Resume(a1);
}

id KappaCompanion::serializeCompanionUUID(const std::string *this, const CompanionUUID *a2)
{
  NSObject *v3;
  const std::string *v4;
  void *v5;
  uint64_t v7;
  std::string *v8;
  __int128 buf;

  if (qword_100387380 != -1)
    dispatch_once(&qword_100387380, &stru_100358858);
  v3 = qword_100387388;
  if (os_log_type_enabled((os_log_t)qword_100387388, OS_LOG_TYPE_DEBUG))
  {
    if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v4 = this;
    else
      v4 = (const std::string *)this->__r_.__value_.__r.__words[0];
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "sending kappa companion uuid %{public}s", (uint8_t *)&buf, 0xCu);
  }
  PB::Writer::Writer((PB::Writer *)&buf);
  KappaCompanionUUID::KappaCompanionUUID((KappaCompanionUUID *)&v7);
  sub_100026138((uint64_t)&v7);
  std::string::operator=(v8, this);
  KappaCompanionUUID::writeTo((uint64_t)&v7, (PB::Writer *)&buf);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", *((_QWORD *)&buf + 1), (_QWORD)buf - *((_QWORD *)&buf + 1)));
  KappaCompanionUUID::~KappaCompanionUUID((KappaCompanionUUID *)&v7);
  PB::Writer::~Writer((PB::Writer *)&buf);
  return v5;
}

void sub_10023A614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  KappaCompanionUUID::~KappaCompanionUUID((KappaCompanionUUID *)&a9);
  PB::Writer::~Writer((PB::Writer *)&a11);
  _Unwind_Resume(a1);
}

void KappaCompanion::deserializeCompanionUUID(KappaCompanion *this, const NSData *a2)
{
  KappaCompanion *v2;
  NSObject *v3;
  std::string *v4;
  std::string v5;
  _BYTE v6[8];
  std::string *__str;
  uint8_t v8[32];
  uint8_t buf[4];
  std::string *v10;

  v2 = objc_retainAutorelease(this);
  PB::Reader::Reader((PB::Reader *)v8, (const unsigned __int8 *)-[KappaCompanion bytes](v2, "bytes"), (unint64_t)-[KappaCompanion length](v2, "length"));
  KappaCompanionUUID::KappaCompanionUUID((KappaCompanionUUID *)v6);
  memset(&v5, 0, sizeof(v5));
  KappaCompanionUUID::readFrom((KappaCompanionUUID *)v6, (PB::Reader *)v8);
  if (__str)
    std::string::operator=(&v5, __str);
  if (qword_100387380 != -1)
    dispatch_once(&qword_100387380, &stru_100358858);
  v3 = qword_100387388;
  if (os_log_type_enabled((os_log_t)qword_100387388, OS_LOG_TYPE_DEBUG))
  {
    v4 = &v5;
    if ((v5.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v4 = (std::string *)v5.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136446210;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "receiving kappa companion uuid %{public}s", buf, 0xCu);
  }
  operator new();
}

void sub_10023A7DC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  operator delete();
}

void sub_10023A834(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "Companion");
  v2 = (void *)qword_100387388;
  qword_100387388 = (uint64_t)v1;

}

double CLKappaFeaturesAlgTriggerClustersResult::log(CLKappaFeaturesAlgTriggerClustersResult *this)
{
  NSObject *v2;
  double result;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  double v16;
  int v17;
  double v18;
  int v19;
  uint64_t v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  double v44;
  __int16 v45;
  int v46;
  __int16 v47;
  double v48;

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100359430);
  v2 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *((_QWORD *)this + 4);
    v5 = *((unsigned __int8 *)this + 40);
    v6 = *((unsigned __int8 *)this + 41);
    v7 = *((unsigned __int8 *)this + 42);
    v8 = *((_QWORD *)this + 6);
    v9 = *((_QWORD *)this + 7);
    v10 = *((_QWORD *)this + 8);
    v11 = *((_QWORD *)this + 9);
    v12 = *((_QWORD *)this + 10);
    v13 = *((_QWORD *)this + 11);
    v14 = *((_DWORD *)this + 24);
    v15 = *((unsigned __int8 *)this + 104);
    v16 = *((float *)this + 4);
    v17 = *((_DWORD *)this + 5);
    v18 = *((float *)this + 6);
    v19 = 134352640;
    v20 = v4;
    v21 = 1026;
    v22 = v5;
    v23 = 1026;
    v24 = v6;
    v25 = 1026;
    v26 = v7;
    v27 = 2050;
    v28 = v8;
    v29 = 2050;
    v30 = v9;
    v31 = 2050;
    v32 = v10;
    v33 = 2050;
    v34 = v11;
    v35 = 2050;
    v36 = v12;
    v37 = 2050;
    v38 = v13;
    v39 = 1026;
    v40 = v14;
    v41 = 1026;
    v42 = v15;
    v43 = 2048;
    v44 = v16;
    v45 = 1026;
    v46 = v17;
    v47 = 2050;
    v48 = v18;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[TC] summary,A,%{public}llu,B,%{public}d,C,%{public}d,D,%{public}d,E,%{public}llu,debug-1,%{public}llu,debug-2,%{public}llu,debug-3,%{public}llu,debug-4,%{public}llu,debug-5,%{public}llu,debug-6,%{public}d,debug-7,%{public}u,config-1,%f,config-2,%{public}d,config-3,%{public}f", (uint8_t *)&v19, 0x80u);
  }
  return result;
}

void CLKappaFeaturesAlgTriggerClusters::CLKappaFeaturesAlgTriggerClusters(CLKappaFeaturesAlgTriggerClusters *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  __int128 v22;

  CLKappaAlgBlock::CLKappaAlgBlock(this, a2 + 1);
  v4 = *a2;
  *(_QWORD *)v5 = *a2;
  *(_QWORD *)(v5 + *(_QWORD *)(v4 - 152)) = a2[6];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 160)) = a2[7];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 168)) = a2[8];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 176)) = a2[9];
  *(_OWORD *)(v5 + 32) = 0u;
  v6 = v5 + 32;
  *(_QWORD *)(v5 + 136) = 0;
  *(_WORD *)(v5 + 144) = 0;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_WORD *)(v5 + 128) = 0;
  v7 = (char *)operator new(0x88uLL);
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = off_100359460;
  *((_OWORD *)v7 + 2) = 0u;
  *((_OWORD *)v7 + 3) = 0u;
  *((_OWORD *)v7 + 4) = 0u;
  *((_OWORD *)v7 + 5) = 0u;
  *((_OWORD *)v7 + 6) = 0u;
  *((_OWORD *)v7 + 7) = 0u;
  *((_QWORD *)v7 + 16) = 0;
  *((_QWORD *)v7 + 3) = &off_10034D078;
  *((_QWORD *)v7 + 5) = 0x841F00000;
  *((_DWORD *)v7 + 12) = 1192009472;
  *((_QWORD *)v7 + 7) = 0;
  *(_DWORD *)(v7 + 63) = 0;
  *(_OWORD *)(v7 + 72) = 0u;
  *(_OWORD *)(v7 + 88) = 0u;
  *(_OWORD *)(v7 + 104) = 0u;
  *(_OWORD *)(v7 + 113) = 0u;
  *(_QWORD *)&v22 = v7 + 24;
  *((_QWORD *)&v22 + 1) = v7;
  sub_1000081AC((uint64_t)this + 8, &v22);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v20 = *((_QWORD *)this + 1);
  v21 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  sub_10023AC44((uint64_t)&v20, &v22);
  sub_1000081AC(v6, &v22);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v21;
  if (v21)
  {
    v18 = (unint64_t *)&v21->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  (*(void (**)(CLKappaFeaturesAlgTriggerClusters *))(*(_QWORD *)this + 304))(this);
}

void sub_10023AC0C(_Unwind_Exception *a1)
{
  CLKappaAlgBlock *v1;
  uint64_t *v2;
  uint64_t v3;

  sub_10000F218((_QWORD *)v1 + 8);
  sub_10000A718((uint64_t)v1 + 48);
  sub_10000A718(v3);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, v2);
  _Unwind_Resume(a1);
}

void *sub_10023AC44@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = *(void **)a1;
  if (result
  {
    v5 = *(_QWORD *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void CLKappaFeaturesAlgTriggerClusters::CLKappaFeaturesAlgTriggerClusters(CLKappaFeaturesAlgTriggerClusters *this)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;

  *(_QWORD *)this = off_100345D50;
  *((_QWORD *)this + 19) = off_100345DF8;
  *((_QWORD *)this + 20) = off_100345EC0;
  *((_QWORD *)this + 21) = off_100345F68;
  CLKappaAlgBlock::CLKappaAlgBlock(this, (uint64_t *)off_100358E28);
  *(_QWORD *)v2 = off_100358928;
  *(_QWORD *)(v2 + 152) = off_100358BC8;
  *(_QWORD *)(v2 + 160) = off_100358D00;
  *(_QWORD *)(v2 + 168) = off_100358DD8;
  *(_OWORD *)(v2 + 32) = 0u;
  v3 = v2 + 32;
  *(_QWORD *)(v2 + 136) = 0;
  *(_WORD *)(v2 + 144) = 0;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_WORD *)(v2 + 128) = 0;
  v4 = (char *)operator new(0x88uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = off_100359460;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((_OWORD *)v4 + 7) = 0u;
  *((_QWORD *)v4 + 16) = 0;
  *((_QWORD *)v4 + 3) = &off_10034D078;
  *((_QWORD *)v4 + 5) = 0x841F00000;
  *((_DWORD *)v4 + 12) = 1192009472;
  *((_QWORD *)v4 + 7) = 0;
  *(_DWORD *)(v4 + 63) = 0;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 113) = 0u;
  *(_QWORD *)&v19 = v4 + 24;
  *((_QWORD *)&v19 + 1) = v4;
  sub_1000081AC((uint64_t)this + 8, &v19);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v17 = *((_QWORD *)this + 1);
  v18 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_10023AC44((uint64_t)&v17, &v19);
  sub_1000081AC(v3, &v19);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v18;
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  (*(void (**)(CLKappaFeaturesAlgTriggerClusters *))(*(_QWORD *)this + 304))(this);
}

void sub_10023AEE4(_Unwind_Exception *a1)
{
  CLKappaAlgBlock *v1;
  uint64_t v2;

  sub_10000F218((_QWORD *)v1 + 8);
  sub_10000A718((uint64_t)v1 + 48);
  sub_10000A718(v2);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_100358E28);
  _Unwind_Resume(a1);
}

void CLKappaFeaturesAlgTriggerClusters::resetConfiguration(CLKappaFeaturesAlgTriggerClusters *this)
{
  void *v2;
  double v3;
  double v4;
  double v5;
  int v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  float v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  int v16;
  id v17;
  uint64_t v18;
  int v19;

  v17 = (id)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration configBaseKey:forFeatureMode:](CSPersistentConfiguration, "configBaseKey:forFeatureMode:", "FeaturesAlgTriggerClustersConfig", *((unsigned __int8 *)this + 24)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v3) = 1163984896;
  LODWORD(v4) = 5.0;
  LODWORD(v5) = 30.0;
  objc_msgSend(v2, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 0, v17, v4, v3, v5);
  LODWORD(v18) = v6;

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v8) = 1120403456;
  LODWORD(v9) = 2.0;
  LODWORD(v10) = 8.0;
  objc_msgSend(v7, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 1, v17, v9, v8, v10);
  HIDWORD(v18) = (int)v11;

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v13) = 1192009728;
  LODWORD(v14) = 1192009472;
  LODWORD(v15) = 15.0;
  objc_msgSend(v12, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 2, v17, v15, v13, v14);
  v19 = v16;

  CLKappaFeaturesAlgTriggerClusters::setConfig((uint64_t)this, &v18);
}

void sub_10023B020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

double CLKappaFeaturesAlgTriggerClusters::setConfig(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  double result;
  uint64_t v7;
  double v8;
  int v9;
  double v10;
  int v11;
  double v12;
  __int16 v13;
  int v14;
  __int16 v15;
  double v16;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *a2;
  *(_DWORD *)(v3 + 24) = *((_DWORD *)a2 + 2);
  *(_QWORD *)(v3 + 16) = v4;
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100359430);
  v5 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(float *)(v7 + 16);
    v9 = *(_DWORD *)(v7 + 20);
    v10 = *(float *)(v7 + 24);
    v11 = 134218496;
    v12 = v8;
    v13 = 1024;
    v14 = v9;
    v15 = 2048;
    v16 = v10;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[TC] config, %f, %d, %f", (uint8_t *)&v11, 0x1Cu);
  }
  return result;
}

uint64_t CLKappaFeaturesAlgTriggerClusters::reset(CLKappaFeaturesAlgTriggerClusters *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _OWORD v5[3];

  (*(void (**)(_QWORD))(**((_QWORD **)this + 4) + 24))(*((_QWORD *)this + 4));
  v2 = *((_QWORD *)this + 4);
  *(_DWORD *)(v2 + 39) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  v3 = *((_QWORD *)this + 4);
  *(_BYTE *)(v3 + 104) = 0;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  memset(v5, 0, sizeof(v5));
  sub_10023BC20((_QWORD *)this + 8, (uint64_t)v5);
  result = sub_10000F218(v5);
  *((_QWORD *)this + 15) = 0;
  *((_WORD *)this + 64) = 0;
  *((_WORD *)this + 72) = 0;
  return result;
}

void CLKappaFeaturesAlgTriggerClusters::epochFinalize(int64x2_t *this, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  unint64_t i;
  void *v22;
  uint64_t v23;
  int v24;
  void *v25;
  BOOL v26;
  void *v27;
  _BOOL4 v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  NSObject *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  _BYTE buf[22];
  __int16 v54;
  double v55;

  v4 = this[2].i64[0];
  *(_DWORD *)(v4 + 39) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  v5 = this[2].i64[0];
  *(_BYTE *)(v5 + 104) = 0;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  v6 = this[2].i64[0];
  *(_DWORD *)(v6 + 100) = 0;
  *(_QWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 32) = a2;
  v7 = this[6].i64[1];
  if (v7)
  {
    v8 = this[4].i64[1];
    v9 = this[6].u64[0];
    *(_QWORD *)(v6 + 72) = *(_QWORD *)(*(_QWORD *)(v8 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v9 & 0x1FF));
    v10 = *(_QWORD *)(*(_QWORD *)(v8 + (((v7 + v9 - 1) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v7 + v9 - 1) & 0x1FF));
  }
  else
  {
    v10 = 0;
    *(_QWORD *)(v6 + 72) = 0;
  }
  *(_QWORD *)(v6 + 80) = v10;
  *(_DWORD *)(v6 + 96) = v7;
  *(_BYTE *)(v6 + 42) = this[9].i8[1];
  v11 = this[7].u64[1];
  this[7].i64[1] = a2;
  v12 = *(id *)(this[3].i64[0] + 96);
  if (!objc_msgSend(v12, "count"))
    goto LABEL_32;
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "firstObject"));
  *(_QWORD *)(this[2].i64[0] + 56) = *((_QWORD *)objc_msgSend(v13, "c_struct") + 1);

  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "lastObject"));
  *(_QWORD *)(this[2].i64[0] + 64) = *((_QWORD *)objc_msgSend(v14, "c_struct") + 1);

  *(_DWORD *)(this[2].i64[0] + 100) = objc_msgSend(v12, "count");
  if (!this[9].i8[0])
  {
    this[9].i8[0] = 1;
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "firstObject"));
    this[8].i16[0] = *((_WORD *)objc_msgSend(v15, "c_struct") + 1);

    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "firstObject"));
    this[7].i64[0] = *((_QWORD *)objc_msgSend(v16, "c_struct") + 1);

    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100359430);
    v17 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
    {
      v19 = this[8].u16[0];
      v20 = this[7].i64[0];
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v19;
      *(_WORD *)&buf[8] = 2048;
      *(_QWORD *)&buf[10] = v20;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "[TC] setting armedDuration:%hu firstSessionTriggerTs:%llu", buf, 0x12u);
    }
    LOWORD(v18) = this[8].i16[0];
    this[8].i64[1] = (unint64_t)(float)((float)this[7].u64[0]
                                             + (float)((float)(*(float *)(this[2].i64[0] + 24) - (float)v18) * 1000000.0));
  }
  for (i = 0; (unint64_t)objc_msgSend(v12, "count") > i; ++i)
  {
    *(_QWORD *)buf = 0;
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectAtIndexedSubscript:", i));
    v23 = *((_QWORD *)objc_msgSend(v22, "c_struct") + 1);

    *(_QWORD *)buf = v23;
    v24 = this[1].u8[8];
    if (v24 == 2)
    {
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectAtIndexedSubscript:", i));
      v28 = (*((_BYTE *)objc_msgSend(v27, "c_struct") + 46) & 4) == 0;

      if (!v28)
        continue;
    }
    else
    {
      if (v24 != 1)
        continue;
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectAtIndexedSubscript:", i));
      v26 = (*((_BYTE *)objc_msgSend(v25, "c_struct") + 1) & 4) == 0;

      if (!v26)
        continue;
    }
    if (*(_QWORD *)buf >= v11 && *(_QWORD *)buf < a2)
    {
      sub_10000C694((int64x2_t *)this[4].i64, buf);
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectAtIndexedSubscript:", i));
      this[9].i8[1] |= *((_BYTE *)objc_msgSend(v29, "c_struct") + 28) == 1;

      v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectAtIndexedSubscript:", i));
      *(_BYTE *)(this[2].i64[0] + 104) = *((_BYTE *)objc_msgSend(v30, "c_struct") + 28);

      v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectAtIndexedSubscript:", i));
      *(_QWORD *)(this[2].i64[0] + 88) = *((unsigned __int16 *)objc_msgSend(v31, "c_struct") + 1);

    }
  }
  v32 = this[6].i64[1];
  if (v32)
  {
    v33 = *(_QWORD *)(*(_QWORD *)(this[4].i64[1]
                                + (((unint64_t)(v32 + this[6].i64[0] - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                    + 8 * ((v32 + this[6].i64[0] - 1) & 0x1FF));
    while (1)
    {
      v34 = this[6].u64[1];
      if (!v34)
        break;
      v35 = this[4].i64[1];
      v36 = this[6].u64[0];
      v37 = *(_QWORD *)(*(_QWORD *)(v35 + ((v36 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v36 & 0x1FF));
      v38 = this[2].i64[0];
      if ((float)((float)v33 + (float)(*(float *)(v38 + 16) * -1000000.0)) <= (float)v37)
      {
        *(_QWORD *)(v38 + 72) = v37;
        *(_QWORD *)(v38 + 80) = *(_QWORD *)(*(_QWORD *)(v35 + (((v34 + v36 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                          + 8 * ((v34 + v36 - 1) & 0x1FF));
        *(_DWORD *)(v38 + 96) = v34;
        if (v34 > *(int *)(v38 + 20))
        {
          if (qword_100387310 != -1)
            dispatch_once(&qword_100387310, &stru_100359430);
          v43 = qword_100387318;
          if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
          {
            v44 = this[6].i64[1];
            *(_DWORD *)buf = 134217984;
            *(_QWORD *)&buf[4] = v44;
            _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "[TC] found cluster - clusterSize:%lu", buf, 0xCu);
          }
          *(_BYTE *)(this[2].i64[0] + 40) = 1;
          if (qword_100387310 != -1)
            dispatch_once(&qword_100387310, &stru_100359430);
          v45 = qword_100387318;
          if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
          {
            v46 = this[8].i64[1];
            *(_DWORD *)buf = 134217984;
            *(_QWORD *)&buf[4] = v46;
            _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "[TC] cluster must be before ts:%llu", buf, 0xCu);
          }
          v47 = this[8].u64[1];
          if (v33 <= v47)
          {
            v48 = this[2].i64[0];
            *(_BYTE *)(v48 + 41) = 1;
            *(_QWORD *)(v48 + 48) = v47;
          }
          if (qword_100387310 != -1)
            dispatch_once(&qword_100387310, &stru_100359430);
          v49 = qword_100387318;
          if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
          {
            v50 = this[2].i64[0];
            v51 = *(unsigned __int8 *)(v50 + 41);
            v52 = *(_QWORD *)(v50 + 48);
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)&buf[4] = v51;
            *(_WORD *)&buf[8] = 2048;
            *(_QWORD *)&buf[10] = v52;
            _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "[TC] isClusterInBeginningOfDrive:%d fArmedDurationThresholdTimestamp:%llu", buf, 0x12u);
          }
        }
        goto LABEL_32;
      }
      if (qword_100387310 != -1)
        dispatch_once(&qword_100387310, &stru_100359430);
      v39 = qword_100387318;
      if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
      {
        v40 = *(_QWORD *)(*(_QWORD *)(this[4].i64[1] + (((unint64_t)this[6].i64[0] >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * (this[6].i64[0] & 0x1FF));
        v41 = *(float *)(this[2].i64[0] + 16);
        *(_DWORD *)buf = 134218496;
        *(_QWORD *)&buf[4] = v40;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v33 - v40;
        v54 = 2048;
        v55 = v41;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "[TC] removing trigger ts from cluster:%llu, timeFromFirstTrigger:%llu, windowDuration:%f", buf, 0x20u);
      }
      this[6] = vaddq_s64(this[6], (int64x2_t)xmmword_1002E56B0);
      sub_100010A8C((uint64_t)this[4].i64, 1);
    }
  }
  v42 = this[2].i64[0];
  *(_DWORD *)(v42 + 96) = 0;
  *(_QWORD *)(v42 + 72) = 0;
  *(_QWORD *)(v42 + 80) = 0;
LABEL_32:

}

void sub_10023B8FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void `virtual thunk to'CLKappaFeaturesAlgTriggerClusters::epochFinalize(CLKappaFeaturesAlgTriggerClusters *this, unint64_t a2)
{
  CLKappaFeaturesAlgTriggerClusters::epochFinalize((int64x2_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)), a2);
}

uint64_t CLKappaFeaturesAlgTriggerClusters::epochReset(CLKappaFeaturesAlgTriggerClusters *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 24))(*((_QWORD *)this + 4));
}

uint64_t `virtual thunk to'CLKappaFeaturesAlgTriggerClusters::epochReset(CLKappaFeaturesAlgTriggerClusters *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 56) + 32);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
}

void sub_10023B9C0(CLKappaAlgBlock *a1)
{
  *(_QWORD *)a1 = off_100358928;
  *((_QWORD *)a1 + 19) = off_100358BC8;
  *((_QWORD *)a1 + 20) = off_100358D00;
  *((_QWORD *)a1 + 21) = off_100358DD8;
  sub_10000F218((_QWORD *)a1 + 8);
  sub_10000A718((uint64_t)a1 + 48);
  sub_10000A718((uint64_t)a1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(a1, (uint64_t *)off_100358E28);
}

void sub_10023BA20(CLKappaAlgBlock *a1)
{
  *(_QWORD *)a1 = off_100358928;
  *((_QWORD *)a1 + 19) = off_100358BC8;
  *((_QWORD *)a1 + 20) = off_100358D00;
  *((_QWORD *)a1 + 21) = off_100358DD8;
  sub_10000F218((_QWORD *)a1 + 8);
  sub_10000A718((uint64_t)a1 + 48);
  sub_10000A718((uint64_t)a1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(a1, (uint64_t *)off_100358E28);
  operator delete();
}

_QWORD *sub_10023BA98(uint64_t a1, uint64_t *a2)
{
  return sub_10000A6A0((_QWORD *)(a1 + 48), a2);
}

void sub_10023BAA0(_QWORD *a1)
{
  CLKappaAlgBlock *v1;

  v1 = (CLKappaAlgBlock *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  *(_QWORD *)v1 = off_100358928;
  *((_QWORD *)v1 + 19) = off_100358BC8;
  *((_QWORD *)v1 + 20) = off_100358D00;
  *((_QWORD *)v1 + 21) = off_100358DD8;
  sub_10000F218((_QWORD *)v1 + 8);
  sub_10000A718((uint64_t)v1 + 48);
  sub_10000A718((uint64_t)v1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_100358E28);
}

void sub_10023BB08(_QWORD *a1)
{
  CLKappaAlgBlock *v1;

  v1 = (CLKappaAlgBlock *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  *(_QWORD *)v1 = off_100358928;
  *((_QWORD *)v1 + 19) = off_100358BC8;
  *((_QWORD *)v1 + 20) = off_100358D00;
  *((_QWORD *)v1 + 21) = off_100358DD8;
  sub_10000F218((_QWORD *)v1 + 8);
  sub_10000A718((uint64_t)v1 + 48);
  sub_10000A718((uint64_t)v1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_100358E28);
  operator delete();
}

_QWORD *sub_10023BB84(_QWORD *a1, uint64_t *a2)
{
  return sub_10000A6A0((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32) + 48), a2);
}

void sub_10023BB98(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "Alg");
  v2 = (void *)qword_100387318;
  qword_100387318 = (uint64_t)v1;

}

void sub_10023BBC8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100359460;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10023BBDC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100359460;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10023BC10(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_10023BC20(_QWORD *a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = (void **)a1[1];
  v5 = a1[2];
  a1[5] = 0;
  v6 = v5 - (_QWORD)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      v7 = a1[2];
      v4 = (void **)(a1[1] + 8);
      a1[1] = v4;
      v6 = v7 - (_QWORD)v4;
    }
    while (v6 > 0x10);
  }
  if (v6 >> 3 == 1)
  {
    v8 = 256;
    goto LABEL_7;
  }
  if (v6 >> 3 == 2)
  {
    v8 = 512;
LABEL_7:
    a1[4] = v8;
  }
  sub_10023BCC0(a1);
  result = sub_10023BE5C((uint64_t)a1, a2);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10023BCC0(_QWORD *a1)
{
  uint64_t i;
  uint64_t v3;

  if (a1[5])
  {
    sub_100010A8C((uint64_t)a1, 0);
    sub_10023BD30(a1, 0);
  }
  else
  {
    v3 = a1[1];
    for (i = a1[2]; i != v3; a1[2] = i)
    {
      operator delete(*(void **)(i - 8));
      v3 = a1[1];
      i = a1[2] - 8;
    }
    a1[4] = 0;
  }
  sub_10023BD9C((uint64_t)a1);
}

uint64_t sub_10023BD30(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = ((v2 - v3) << 6) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200)
    a2 = 1;
  if (v5 < 0x400)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void sub_10023BD9C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  v3 = *(_QWORD *)(a1 + 24);
  v2 = a1 + 24;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = (v5 - v4) >> 3;
  if (v6 < (v3 - *(_QWORD *)a1) >> 3)
  {
    if (v5 == v4)
    {
      v10 = 0;
      v7 = 0;
    }
    else
    {
      v7 = (char *)sub_10000D60C(v2, v6);
      v8 = *(_QWORD *)(a1 + 8);
      v5 = *(_QWORD *)(a1 + 16);
      v10 = &v7[8 * v9];
      v11 = v5 - v8;
      if (v5 != v8)
      {
        v12 = 0;
        v13 = 8 * (v11 >> 3);
        do
        {
          *(_QWORD *)&v7[v12] = *(_QWORD *)(v8 + v12);
          v12 += 8;
        }
        while (v13 != v12);
        v5 = *(_QWORD *)(a1 + 8);
        v14 = *(_QWORD *)(a1 + 16);
        goto LABEL_9;
      }
    }
    v14 = v5;
LABEL_9:
    v15 = v14 - v5;
    v16 = *(void **)a1;
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v7[v15];
    *(_QWORD *)(a1 + 24) = v10;
    if (v16)
      operator delete(v16);
  }
}

uint64_t sub_10023BE5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 != v5)
    *(_QWORD *)(a1 + 16) = v4 + ((v5 - v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  sub_10023BD9C(a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return a1;
}

uint64_t CLKappaFeaturesAlgShortAudioResult::reset(uint64_t this)
{
  *(_BYTE *)(this + 8) = 0;
  *(_DWORD *)(this + 12) = 0;
  *(_DWORD *)(this + 20) = -1;
  return this;
}

uint64_t CLKappaFeaturesAlgShortAudio::reset(CLKappaFeaturesAlgShortAudio *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 24))(*((_QWORD *)this + 4));
}

void CLKappaFeaturesAlgShortAudio::CLKappaFeaturesAlgShortAudio(CLKappaFeaturesAlgShortAudio *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  __int128 v22;

  CLKappaAlgBlock::CLKappaAlgBlock(this, a2 + 1);
  v4 = *a2;
  *(_QWORD *)v5 = *a2;
  *(_QWORD *)(v5 + *(_QWORD *)(v4 - 152)) = a2[6];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 160)) = a2[7];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 168)) = a2[8];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 176)) = a2[9];
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  v6 = v5 + 32;
  v7 = operator new(0x38uLL);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = off_10035A068;
  v7[4] = 0;
  v7[5] = 0;
  v7[3] = &off_10034CEF8;
  v7[6] = 0;
  *((_DWORD *)v7 + 11) = -1;
  *(_QWORD *)&v22 = v7 + 3;
  *((_QWORD *)&v22 + 1) = v7;
  sub_1000081AC((uint64_t)this + 8, &v22);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v20 = *((_QWORD *)this + 1);
  v21 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  sub_10023C0F4((uint64_t)&v20, &v22);
  sub_1000081AC(v6, &v22);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v21;
  if (v21)
  {
    v18 = (unint64_t *)&v21->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  (*(void (**)(CLKappaFeaturesAlgShortAudio *))(*(_QWORD *)this + 304))(this);
}

void sub_10023C0C8(_Unwind_Exception *a1)
{
  CLKappaAlgBlock *v1;
  uint64_t *v2;
  uint64_t v3;

  sub_10000A718((uint64_t)v1 + 48);
  sub_10000A718(v3);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, v2);
  _Unwind_Resume(a1);
}

void *sub_10023C0F4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = *(void **)a1;
  if (result
  {
    v5 = *(_QWORD *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void CLKappaFeaturesAlgShortAudio::CLKappaFeaturesAlgShortAudio(CLKappaFeaturesAlgShortAudio *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;

  *(_QWORD *)this = off_100345D50;
  *((_QWORD *)this + 8) = off_100345DF8;
  *((_QWORD *)this + 9) = off_100345EC0;
  *((_QWORD *)this + 10) = off_100345F68;
  CLKappaAlgBlock::CLKappaAlgBlock(this, (uint64_t *)off_100359A50);
  *(_QWORD *)v2 = off_100359550;
  *(_QWORD *)(v2 + 64) = off_1003597F0;
  *(_QWORD *)(v2 + 72) = off_100359928;
  *(_QWORD *)(v2 + 80) = off_100359A00;
  *(_OWORD *)(v2 + 32) = 0u;
  v3 = v2 + 32;
  *(_OWORD *)(v2 + 48) = 0u;
  v4 = operator new(0x38uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = off_10035A068;
  v4[4] = 0;
  v4[5] = 0;
  v4[3] = &off_10034CEF8;
  v4[6] = 0;
  *((_DWORD *)v4 + 11) = -1;
  *(_QWORD *)&v19 = v4 + 3;
  *((_QWORD *)&v19 + 1) = v4;
  sub_1000081AC((uint64_t)this + 8, &v19);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v17 = *((_QWORD *)this + 1);
  v18 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_10023C0F4((uint64_t)&v17, &v19);
  sub_1000081AC(v3, &v19);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v18;
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  (*(void (**)(CLKappaFeaturesAlgShortAudio *))(*(_QWORD *)this + 304))(this);
}

void sub_10023C348(_Unwind_Exception *a1)
{
  CLKappaAlgBlock *v1;
  uint64_t v2;

  sub_10000A718((uint64_t)v1 + 48);
  sub_10000A718(v2);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_100359A50);
  _Unwind_Resume(a1);
}

uint64_t CLKappaFeaturesAlgShortAudio::setConfig(uint64_t result, _BYTE *a2)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 16) = *a2;
  return result;
}

void CLKappaFeaturesAlgShortAudio::epochFinalize(CLKappaFeaturesAlgShortAudio *this)
{
  void *v2;
  unsigned int v3;

  *(_DWORD *)(*((_QWORD *)this + 4) + 20) = -1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSPlatformInfo sharedInstance](CSPlatformInfo, "sharedInstance"));
  v3 = objc_msgSend(v2, "isMDevice");

  if (v3)
    CLKappaFeaturesAlgShortAudio::extractFeaturesFromTrustedStream(this);
  else
    CLKappaFeaturesAlgShortAudio::computeFeaturesFromSPL(this);
}

void sub_10023C3F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CLKappaFeaturesAlgShortAudio::extractFeaturesFromTrustedStream(CLKappaFeaturesAlgShortAudio *this)
{
  void *v2;
  id v3;

  v3 = *(id *)(*((_QWORD *)this + 6) + 88);
  if (objc_msgSend(v3, "count"))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "lastObject"));
    *(_DWORD *)(*((_QWORD *)this + 4) + 20) = *((_DWORD *)objc_msgSend(v2, "c_struct") + 47);

  }
}

void sub_10023C468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void CLKappaFeaturesAlgShortAudio::computeFeaturesFromSPL(CLKappaFeaturesAlgShortAudio *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  void *v5;
  float v6;
  id v7;

  v7 = *(id *)(*((_QWORD *)this + 6) + 80);
  v2 = objc_msgSend(v7, "count");
  if (v2)
  {
    v3 = 0;
    v4 = -1;
    do
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectAtIndex:", v3));
      v6 = *((float *)objc_msgSend(v5, "c_struct") + 2);
      if ((LODWORD(v6) & 0x7FFFFFFFu) >= 0x7F800000)
        v6 = 0.0;
      if (v6 < 0.0)
        v6 = 0.0;
      if (v6 > 1.0)
        v6 = 1.0;
      if (v6 > 0.5)
        ++v4;

      ++v3;
    }
    while (v2 != v3);
    *(_DWORD *)(*((_QWORD *)this + 4) + 20) = v4;
  }

}

void sub_10023C564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void `virtual thunk to'CLKappaFeaturesAlgShortAudio::epochFinalize(CLKappaFeaturesAlgShortAudio *this)
{
  CLKappaFeaturesAlgShortAudio::epochFinalize((CLKappaFeaturesAlgShortAudio *)((char *)this
                                                                             + *(_QWORD *)(*(_QWORD *)this - 48)));
}

uint64_t CLKappaFeaturesAlgShortAudio::epochReset(CLKappaFeaturesAlgShortAudio *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 24))(*((_QWORD *)this + 4));
}

uint64_t `virtual thunk to'CLKappaFeaturesAlgShortAudio::epochReset(CLKappaFeaturesAlgShortAudio *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 56) + 32);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
}

void sub_10023C5C4(CLKappaAlgBlock *a1)
{
  *(_QWORD *)a1 = off_100359550;
  *((_QWORD *)a1 + 8) = off_1003597F0;
  *((_QWORD *)a1 + 9) = off_100359928;
  *((_QWORD *)a1 + 10) = off_100359A00;
  sub_10000A718((uint64_t)a1 + 48);
  sub_10000A718((uint64_t)a1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(a1, (uint64_t *)off_100359A50);
}

void sub_10023C61C(CLKappaAlgBlock *a1)
{
  *(_QWORD *)a1 = off_100359550;
  *((_QWORD *)a1 + 8) = off_1003597F0;
  *((_QWORD *)a1 + 9) = off_100359928;
  *((_QWORD *)a1 + 10) = off_100359A00;
  sub_10000A718((uint64_t)a1 + 48);
  sub_10000A718((uint64_t)a1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(a1, (uint64_t *)off_100359A50);
  operator delete();
}

_QWORD *sub_10023C688(uint64_t a1, uint64_t *a2)
{
  return sub_10000A6A0((_QWORD *)(a1 + 48), a2);
}

void sub_10023C690(_QWORD *a1)
{
  CLKappaAlgBlock *v1;

  v1 = (CLKappaAlgBlock *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  *(_QWORD *)v1 = off_100359550;
  *((_QWORD *)v1 + 8) = off_1003597F0;
  *((_QWORD *)v1 + 9) = off_100359928;
  *((_QWORD *)v1 + 10) = off_100359A00;
  sub_10000A718((uint64_t)v1 + 48);
  sub_10000A718((uint64_t)v1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_100359A50);
}

void sub_10023C6F0(_QWORD *a1)
{
  CLKappaAlgBlock *v1;

  v1 = (CLKappaAlgBlock *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  *(_QWORD *)v1 = off_100359550;
  *((_QWORD *)v1 + 8) = off_1003597F0;
  *((_QWORD *)v1 + 9) = off_100359928;
  *((_QWORD *)v1 + 10) = off_100359A00;
  sub_10000A718((uint64_t)v1 + 48);
  sub_10000A718((uint64_t)v1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_100359A50);
  operator delete();
}

_QWORD *sub_10023C764(_QWORD *a1, uint64_t *a2)
{
  return sub_10000A6A0((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32) + 48), a2);
}

void sub_10023C778(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10035A068;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10023C78C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10035A068;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10023C7C0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t CLKappaEstimatesAlgHighSpeedCrashResult::reset(uint64_t this)
{
  *(_BYTE *)(this + 8) = 0;
  *(_DWORD *)(this + 12) = 0;
  *(_BYTE *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_BYTE *)(this + 48) = 0;
  *(_QWORD *)(this + 52) = 0;
  *(_QWORD *)(this + 68) = 0;
  *(_QWORD *)(this + 60) = 0;
  *(_BYTE *)(this + 76) = 0;
  return this;
}

void CLKappaEstimatesAlgHighSpeedCrashResult::log(CLKappaEstimatesAlgHighSpeedCrashResult *this)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  double v5;
  double v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  __int16 v21;
  int v22;
  __int16 v23;
  double v24;
  __int16 v25;
  double v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10035AC60);
  v2 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_QWORD *)this + 5);
    v4 = *((unsigned __int8 *)this + 32);
    v5 = *((float *)this + 4);
    v6 = *((float *)this + 5);
    v7 = *((_DWORD *)this + 6);
    v8 = *((unsigned __int8 *)this + 48);
    v9 = *((_DWORD *)this + 13);
    v10 = *((_DWORD *)this + 14);
    v11 = *((_DWORD *)this + 15);
    v12 = *((_DWORD *)this + 16);
    v13 = *((_DWORD *)this + 17);
    v14 = *((unsigned __int8 *)this + 72);
    v15 = *((unsigned __int8 *)this + 73);
    v16 = *((unsigned __int8 *)this + 74);
    v17 = *((unsigned __int8 *)this + 75);
    v18 = *((unsigned __int8 *)this + 76);
    v19 = 134352896;
    v20 = v3;
    v21 = 1026;
    v22 = v4;
    v23 = 2050;
    v24 = v5;
    v25 = 2050;
    v26 = v6;
    v27 = 1026;
    v28 = v7;
    v29 = 1026;
    v30 = v8;
    v31 = 1026;
    v32 = v9;
    v33 = 1026;
    v34 = v10;
    v35 = 1026;
    v36 = v11;
    v37 = 1026;
    v38 = v12;
    v39 = 1026;
    v40 = v13;
    v41 = 1026;
    v42 = v14;
    v43 = 1026;
    v44 = v15;
    v45 = 1026;
    v46 = v16;
    v47 = 1026;
    v48 = v17;
    v49 = 1026;
    v50 = v18;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[HSC] summary,A,%{public}llu,B,%{public}d,config-1,%{public}f,config-2,%{public}f,config-3,%{public}u,debug-1,%{public}d,debug-2a,%{public}d,debug-2b,%{public}d,debug-2c,%{public}d,debug-2d,%{public}d,debug-2e,%{public}d,debug-3a,%{public}d,debug-3b,%{public}d,debug-3c,%{public}d,debug-3d,%{public}d,debug-3e,%{public}d\n", (uint8_t *)&v19, 0x6Eu);
  }
}

void CLKappaEstimatesAlgHighSpeedCrash::CLKappaEstimatesAlgHighSpeedCrash(CLKappaEstimatesAlgHighSpeedCrash *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  __int128 v22;

  CLKappaAlgBlock::CLKappaAlgBlock(this, a2 + 1);
  v4 = *a2;
  *(_QWORD *)v5 = *a2;
  *(_QWORD *)(v5 + *(_QWORD *)(v4 - 152)) = a2[6];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 160)) = a2[7];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 168)) = a2[8];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 176)) = a2[9];
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  v6 = v5 + 32;
  *(_QWORD *)(v5 + 46) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  *(_WORD *)(v5 + 80) = 0;
  v7 = operator new(0x68uLL);
  v7[2] = 0;
  *v7 = off_10035AC90;
  v7[1] = 0;
  *((_OWORD *)v7 + 2) = 0u;
  *((_OWORD *)v7 + 3) = 0u;
  v7[12] = 0;
  *((_OWORD *)v7 + 4) = 0u;
  *((_OWORD *)v7 + 5) = 0u;
  v7[3] = &off_10034D2B8;
  v7[5] = 0x41700000C1C80000;
  *((_DWORD *)v7 + 12) = 9;
  *(_QWORD *)((char *)v7 + 84) = 0;
  *(_QWORD *)((char *)v7 + 92) = 0;
  *((_BYTE *)v7 + 100) = 0;
  *(_QWORD *)((char *)v7 + 76) = 0;
  *(_QWORD *)&v22 = v7 + 3;
  *((_QWORD *)&v22 + 1) = v7;
  sub_1000081AC((uint64_t)this + 8, &v22);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v20 = *((_QWORD *)this + 1);
  v21 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  sub_10023CBA8((uint64_t)&v20, &v22);
  sub_1000081AC(v6, &v22);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v21;
  if (v21)
  {
    v18 = (unint64_t *)&v21->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  (*(void (**)(CLKappaEstimatesAlgHighSpeedCrash *))(*(_QWORD *)this + 304))(this);
}

void sub_10023CB84(_Unwind_Exception *a1)
{
  CLKappaAlgBlock *v1;
  uint64_t *v2;
  uint64_t v3;

  sub_10000A718(v3);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, v2);
  _Unwind_Resume(a1);
}

void *sub_10023CBA8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = *(void **)a1;
  if (result
  {
    v5 = *(_QWORD *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void CLKappaEstimatesAlgHighSpeedCrash::CLKappaEstimatesAlgHighSpeedCrash(CLKappaEstimatesAlgHighSpeedCrash *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;

  *(_QWORD *)this = off_100345D50;
  *((_QWORD *)this + 11) = off_100345DF8;
  *((_QWORD *)this + 12) = off_100345EC0;
  *((_QWORD *)this + 13) = off_100345F68;
  CLKappaAlgBlock::CLKappaAlgBlock(this, (uint64_t *)off_10035A658);
  *(_QWORD *)v2 = off_10035A158;
  *(_QWORD *)(v2 + 88) = off_10035A3F8;
  *(_QWORD *)(v2 + 96) = off_10035A530;
  *(_QWORD *)(v2 + 104) = off_10035A608;
  *(_QWORD *)(v2 + 32) = 0;
  v3 = v2 + 32;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 46) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_WORD *)(v2 + 80) = 0;
  v4 = operator new(0x68uLL);
  v4[2] = 0;
  *v4 = off_10035AC90;
  v4[1] = 0;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  v4[12] = 0;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  v4[3] = &off_10034D2B8;
  v4[5] = 0x41700000C1C80000;
  *((_DWORD *)v4 + 12) = 9;
  *(_QWORD *)((char *)v4 + 84) = 0;
  *(_QWORD *)((char *)v4 + 92) = 0;
  *((_BYTE *)v4 + 100) = 0;
  *(_QWORD *)((char *)v4 + 76) = 0;
  *(_QWORD *)&v19 = v4 + 3;
  *((_QWORD *)&v19 + 1) = v4;
  sub_1000081AC((uint64_t)this + 8, &v19);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v17 = *((_QWORD *)this + 1);
  v18 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_10023CBA8((uint64_t)&v17, &v19);
  sub_1000081AC(v3, &v19);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v18;
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  (*(void (**)(CLKappaEstimatesAlgHighSpeedCrash *))(*(_QWORD *)this + 304))(this);
}

void sub_10023CE30(_Unwind_Exception *a1)
{
  CLKappaAlgBlock *v1;
  uint64_t v2;

  sub_10000A718(v2);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10035A658);
  _Unwind_Resume(a1);
}

void CLKappaEstimatesAlgHighSpeedCrash::resetConfiguration(CLKappaEstimatesAlgHighSpeedCrash *this)
{
  void *v2;
  double v3;
  double v4;
  double v5;
  int v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  int v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  float v16;
  id v17;
  uint64_t v18;
  unsigned int v19;

  v17 = (id)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration configBaseKey:forFeatureMode:](CSPersistentConfiguration, "configBaseKey:forFeatureMode:", "EstimatesAlgHighSpeedCrashConfig", *((unsigned __int8 *)this + 24)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v3) = -30.0;
  LODWORD(v4) = -5.0;
  LODWORD(v5) = -25.0;
  objc_msgSend(v2, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 0, v17, v3, v4, v5);
  LODWORD(v18) = v6;

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v8) = 5.0;
  LODWORD(v9) = 30.0;
  LODWORD(v10) = 15.0;
  objc_msgSend(v7, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 1, v17, v8, v9, v10);
  HIDWORD(v18) = v11;

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v13) = 2.0;
  LODWORD(v14) = 15.0;
  LODWORD(v15) = 9.0;
  objc_msgSend(v12, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 2, v17, v13, v14, v15);
  v19 = v16;

  CLKappaEstimatesAlgHighSpeedCrash::setConfig((uint64_t)this, &v18);
}

void sub_10023CF48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

double CLKappaEstimatesAlgHighSpeedCrash::setConfig(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  double result;
  uint64_t v7;
  double v8;
  double v9;
  int v10;
  double v11;
  __int16 v12;
  double v13;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *a2;
  *(_DWORD *)(v3 + 24) = *((_DWORD *)a2 + 2);
  *(_QWORD *)(v3 + 16) = v4;
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10035AC60);
  v5 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(float *)(v7 + 16);
    v9 = *(float *)(v7 + 20);
    v10 = 134218240;
    v11 = v8;
    v12 = 2048;
    v13 = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[HSC] config, %f, %f", (uint8_t *)&v10, 0x16u);
  }
  return result;
}

uint64_t CLKappaEstimatesAlgHighSpeedCrash::reset(CLKappaEstimatesAlgHighSpeedCrash *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 24))(*((_QWORD *)this + 4));
  *((_WORD *)this + 26) = 0;
  *((_DWORD *)this + 12) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  return result;
}

uint64_t CLKappaEstimatesAlgHighSpeedCrash::resetCounters(uint64_t this)
{
  *(_WORD *)(this + 52) = 0;
  *(_DWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 64) = 0;
  *(_DWORD *)(this + 72) = 0;
  return this;
}

void CLKappaEstimatesAlgHighSpeedCrash::epochFinalize(CLKappaEstimatesAlgHighSpeedCrash *this, uint64_t a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  BOOL v18;
  char *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  NSObject *v29;
  char *v30;
  char v31;
  uint64_t v32;
  int v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10035AC60);
  v4 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
  {
    v5 = *((unsigned __int8 *)this + 81);
    v6 = *((unsigned __int8 *)this + 76);
    v7 = *((unsigned __int8 *)this + 77);
    v8 = *((unsigned __int8 *)this + 78);
    v9 = *((unsigned __int8 *)this + 79);
    v10 = *((unsigned __int8 *)this + 80);
    v11 = *((unsigned __int8 *)this + 49);
    v12 = *((unsigned __int8 *)this + 50);
    v13 = *((unsigned __int8 *)this + 51);
    v14 = *((unsigned __int8 *)this + 52);
    v15 = *((unsigned __int8 *)this + 53);
    v33 = 67111680;
    v34 = v5;
    v35 = 1024;
    v36 = v6;
    v37 = 1024;
    v38 = v7;
    v39 = 1024;
    v40 = v8;
    v41 = 1024;
    v42 = v9;
    v43 = 1024;
    v44 = v10;
    v45 = 1024;
    v46 = v11;
    v47 = 1024;
    v48 = v12;
    v49 = 1024;
    v50 = v13;
    v51 = 1024;
    v52 = v14;
    v53 = 1024;
    v54 = v15;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[HSC] force %d %d %d %d %d %d is %d %d %d %d %d", (uint8_t *)&v33, 0x44u);
  }
  if (*((_BYTE *)this + 49))
  {
    v16 = *(_DWORD *)(*((_QWORD *)this + 4) + 24);
  }
  else
  {
    v17 = *((_DWORD *)this + 14);
    v18 = v17 != 0;
    v16 = v17 - 1;
    if (!v18)
      v16 = 0;
  }
  *((_DWORD *)this + 14) = v16;
  v19 = (char *)this + 56;
  if (*((_BYTE *)this + 50))
  {
    v20 = *(_DWORD *)(*((_QWORD *)this + 4) + 24);
  }
  else
  {
    v21 = *((_DWORD *)this + 15);
    v18 = v21 != 0;
    v20 = v21 - 1;
    if (!v18)
      v20 = 0;
  }
  *((_DWORD *)this + 15) = v20;
  if (*((_BYTE *)this + 51))
  {
    v22 = *(_DWORD *)(*((_QWORD *)this + 4) + 24);
  }
  else
  {
    v23 = *((_DWORD *)this + 16);
    v18 = v23 != 0;
    v22 = v23 - 1;
    if (!v18)
      v22 = 0;
  }
  *((_DWORD *)this + 16) = v22;
  if (*((_BYTE *)this + 52))
  {
    v24 = *(_DWORD *)(*((_QWORD *)this + 4) + 24);
  }
  else
  {
    v25 = *((_DWORD *)this + 17);
    v18 = v25 != 0;
    v24 = v25 - 1;
    if (!v18)
      v24 = 0;
  }
  *((_DWORD *)this + 17) = v24;
  if (*((_BYTE *)this + 53))
  {
    v26 = *(_DWORD *)(*((_QWORD *)this + 4) + 24);
  }
  else
  {
    v27 = *((_DWORD *)this + 18);
    v18 = v27 != 0;
    v26 = v27 - 1;
    if (!v18)
      v26 = 0;
  }
  *((_DWORD *)this + 18) = v26;
  v28 = *((unsigned __int8 *)this + 81);
  if (*((_BYTE *)this + 81))
    *((_BYTE *)this + 81) = 0;
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10035AC60);
  v29 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEFAULT))
  {
    v33 = 67240192;
    v34 = v28;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "[HSC] decision %{public}d", (uint8_t *)&v33, 8u);
  }
  v31 = *((_BYTE *)this + 48);
  v30 = (char *)this + 48;
  v32 = *((_QWORD *)v30 - 2);
  *(_QWORD *)(v32 + 40) = a2;
  *(_BYTE *)(v32 + 32) = v28;
  *(_BYTE *)(v32 + 48) = v31;
  *(_OWORD *)(v32 + 52) = *(_OWORD *)(v30 + 8);
  *(_DWORD *)(v32 + 68) = *((_DWORD *)v30 + 6);
  *(_DWORD *)(v32 + 72) = *(_DWORD *)(v30 + 1);
  *(_BYTE *)(v32 + 76) = v30[5];
  if (v28)
  {
    *((_WORD *)v30 + 2) = 0;
    *(_DWORD *)v30 = 0;
    *(_QWORD *)v19 = 0;
    *((_QWORD *)v19 + 1) = 0;
    *((_DWORD *)v19 + 4) = 0;
  }
}

void `virtual thunk to'CLKappaEstimatesAlgHighSpeedCrash::epochFinalize(CLKappaEstimatesAlgHighSpeedCrash *this, uint64_t a2)
{
  CLKappaEstimatesAlgHighSpeedCrash::epochFinalize((CLKappaEstimatesAlgHighSpeedCrash *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)), a2);
}

void CLKappaEstimatesAlgHighSpeedCrash::feedFeatures(uint64_t a1, _BYTE *a2)
{
  NSObject *v3;
  uint8_t v4[16];

  if (*(_BYTE *)(a1 + 76))
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_10035AC60);
    v3 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[HSC] forcing pu", v4, 2u);
    }
    *(_BYTE *)(a1 + 49) = 1;
    *(_BYTE *)(a1 + 76) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 49) = *a2;
  }
}

void `virtual thunk to'CLKappaEstimatesAlgHighSpeedCrash::feedFeatures(_QWORD *a1, _BYTE *a2)
{
  CLKappaEstimatesAlgHighSpeedCrash::feedFeatures((uint64_t)a1 + *(_QWORD *)(*a1 - 32), a2);
}

void CLKappaEstimatesAlgHighSpeedCrash::feedFeatures(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint8_t v4[16];

  if (*(_BYTE *)(a1 + 78))
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_10035AC60);
    v3 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[HSC] forcing ba", v4, 2u);
    }
    *(_BYTE *)(a1 + 51) = 1;
    *(_BYTE *)(a1 + 78) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 51) = *(_BYTE *)(a2 + 52) != 0;
  }
}

{
  NSObject *v3;
  uint8_t v4[16];

  if (*(_BYTE *)(a1 + 77))
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_10035AC60);
    v3 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[HSC] forcing ff", v4, 2u);
    }
    *(_BYTE *)(a1 + 50) = 1;
    *(_BYTE *)(a1 + 77) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 44);
  }
}

{
  NSObject *v3;
  uint8_t v4[16];

  if (*(_BYTE *)(a1 + 80))
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_10035AC60);
    v3 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[HSC] forcing gp", v4, 2u);
    }
    *(_BYTE *)(a1 + 53) = 1;
    *(_BYTE *)(a1 + 80) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 53) = *(_BYTE *)(a2 + 8);
  }
}

void `virtual thunk to'CLKappaEstimatesAlgHighSpeedCrash::feedFeatures(_QWORD *a1, uint64_t a2)
{
  CLKappaEstimatesAlgHighSpeedCrash::feedFeatures((uint64_t)a1 + *(_QWORD *)(*a1 - 56), a2);
}

{
  CLKappaEstimatesAlgHighSpeedCrash::feedFeatures((_BYTE *)a1 + *(_QWORD *)(*a1 - 80), a2);
}

{
  CLKappaEstimatesAlgHighSpeedCrash::feedFeatures((uint64_t)a1 + *(_QWORD *)(*a1 - 104), a2);
}

{
  CLKappaEstimatesAlgHighSpeedCrash::feedFeatures((uint64_t)a1 + *(_QWORD *)(*a1 - 64), a2);
}

void CLKappaEstimatesAlgHighSpeedCrash::feedFeatures(_BYTE *a1, uint64_t a2)
{
  NSObject *v4;
  uint8_t v5[16];

  if (a1[79])
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_10035AC60);
    v4 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[HSC] forcing au", v5, 2u);
    }
    a1[52] = 1;
    a1[79] = 0;
  }
  else
  {
    a1[52] = *(_BYTE *)(a2 + 29);
  }
  a1[48] = *(float *)(a2 + 8) > 0.0;
}

uint64_t CLKappaEstimatesAlgHighSpeedCrash::epochReset(uint64_t this)
{
  uint64_t v1;

  if (!*(_BYTE *)(this + 76))
    *(_BYTE *)(this + 49) = 0;
  if (!*(_BYTE *)(this + 77))
    *(_BYTE *)(this + 50) = 0;
  if (!*(_BYTE *)(this + 78))
    *(_BYTE *)(this + 51) = 0;
  if (!*(_BYTE *)(this + 79))
    *(_BYTE *)(this + 52) = 0;
  if (!*(_BYTE *)(this + 80))
    *(_BYTE *)(this + 53) = 0;
  *(_BYTE *)(this + 48) = 0;
  v1 = *(_QWORD *)(this + 32);
  *(_BYTE *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = 0;
  *(_BYTE *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 52) = 0;
  *(_QWORD *)(v1 + 68) = 0;
  *(_QWORD *)(v1 + 60) = 0;
  *(_BYTE *)(v1 + 76) = 0;
  return this;
}

uint64_t `virtual thunk to'CLKappaEstimatesAlgHighSpeedCrash::epochReset(CLKappaEstimatesAlgHighSpeedCrash *this)
{
  return CLKappaEstimatesAlgHighSpeedCrash::epochReset((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 56));
}

void sub_10023D800(CLKappaAlgBlock *a1)
{
  *(_QWORD *)a1 = off_10035A158;
  *((_QWORD *)a1 + 11) = off_10035A3F8;
  *((_QWORD *)a1 + 12) = off_10035A530;
  *((_QWORD *)a1 + 13) = off_10035A608;
  sub_10000A718((uint64_t)a1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(a1, (uint64_t *)off_10035A658);
}

void sub_10023D850(CLKappaAlgBlock *a1)
{
  *(_QWORD *)a1 = off_10035A158;
  *((_QWORD *)a1 + 11) = off_10035A3F8;
  *((_QWORD *)a1 + 12) = off_10035A530;
  *((_QWORD *)a1 + 13) = off_10035A608;
  sub_10000A718((uint64_t)a1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(a1, (uint64_t *)off_10035A658);
  operator delete();
}

void sub_10023D8DC(_QWORD *a1)
{
  CLKappaAlgBlock *v1;

  v1 = (CLKappaAlgBlock *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  *(_QWORD *)v1 = off_10035A158;
  *((_QWORD *)v1 + 11) = off_10035A3F8;
  *((_QWORD *)v1 + 12) = off_10035A530;
  *((_QWORD *)v1 + 13) = off_10035A608;
  sub_10000A718((uint64_t)v1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10035A658);
}

void sub_10023D934(_QWORD *a1)
{
  CLKappaAlgBlock *v1;

  v1 = (CLKappaAlgBlock *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  *(_QWORD *)v1 = off_10035A158;
  *((_QWORD *)v1 + 11) = off_10035A3F8;
  *((_QWORD *)v1 + 12) = off_10035A530;
  *((_QWORD *)v1 + 13) = off_10035A608;
  sub_10000A718((uint64_t)v1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10035A658);
  operator delete();
}

void sub_10023D9C4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "Alg");
  v2 = (void *)qword_100387318;
  qword_100387318 = (uint64_t)v1;

}

void sub_10023D9F4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10035AC90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10023DA08(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10035AC90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10023DA3C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double CLKappaFeaturesAlgLocalAudioResult::log(CLKappaFeaturesAlgLocalAudioResult *this)
{
  NSObject *v2;
  double result;
  int v4;
  double v5;
  double v6;
  double v7;
  double v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  int v24;
  int v25;
  double v26;
  int v27;
  double v28;
  double v29;
  double v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  int v42;
  int v43;
  _DWORD v44[2];
  __int16 v45;
  double v46;
  __int16 v47;
  double v48;
  __int16 v49;
  double v50;
  __int16 v51;
  double v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  __int16 v59;
  int v60;
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  double v72;
  __int16 v73;
  double v74;
  __int16 v75;
  double v76;
  __int16 v77;
  double v78;
  __int16 v79;
  double v80;
  __int16 v81;
  double v82;
  __int16 v83;
  int v84;
  __int16 v85;
  int v86;
  __int16 v87;
  double v88;
  __int16 v89;
  int v90;
  __int16 v91;
  double v92;
  __int16 v93;
  double v94;
  __int16 v95;
  double v96;
  __int16 v97;
  int v98;
  __int16 v99;
  int v100;
  __int16 v101;
  int v102;
  __int16 v103;
  int v104;
  __int16 v105;
  int v106;
  __int16 v107;
  double v108;
  __int16 v109;
  double v110;
  __int16 v111;
  double v112;
  __int16 v113;
  double v114;
  __int16 v115;
  double v116;
  __int16 v117;
  double v118;
  __int16 v119;
  int v120;
  __int16 v121;
  int v122;

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10035B888);
  v2 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *((unsigned __int8 *)this + 101);
    v5 = *((float *)this + 20);
    v6 = *((float *)this + 21);
    v7 = *((float *)this + 22);
    v8 = *((float *)this + 23);
    v9 = *((unsigned __int8 *)this + 96);
    v10 = *((unsigned __int8 *)this + 97);
    v11 = *((unsigned __int8 *)this + 98);
    v12 = *((unsigned __int8 *)this + 99);
    v13 = *((unsigned __int8 *)this + 100);
    v14 = *((unsigned __int8 *)this + 168);
    v15 = *((_DWORD *)this + 43);
    v17 = *((_QWORD *)this + 22);
    v16 = *((_QWORD *)this + 23);
    v18 = *((float *)this + 52);
    v19 = *((float *)this + 56);
    v20 = *((float *)this + 4);
    v21 = *((float *)this + 5);
    v22 = *((float *)this + 6);
    v23 = *((float *)this + 7);
    v25 = *((_DWORD *)this + 8);
    v24 = *((_DWORD *)this + 9);
    v26 = *((float *)this + 16);
    v27 = *((unsigned __int8 *)this + 121);
    v28 = *((float *)this + 26);
    v29 = *((float *)this + 27);
    v30 = *((float *)this + 28);
    v31 = *((unsigned __int8 *)this + 116);
    v32 = *((unsigned __int8 *)this + 117);
    v33 = *((unsigned __int8 *)this + 118);
    v34 = *((unsigned __int8 *)this + 119);
    v35 = *((unsigned __int8 *)this + 120);
    v36 = *((float *)this + 60);
    v37 = *((float *)this + 64);
    v38 = *((float *)this + 10);
    v39 = *((float *)this + 11);
    v40 = *((float *)this + 12);
    v41 = *((float *)this + 13);
    v43 = *((_DWORD *)this + 14);
    v42 = *((_DWORD *)this + 15);
    v44[0] = 67250176;
    v44[1] = v4;
    v45 = 2050;
    v46 = v5;
    v47 = 2050;
    v48 = v6;
    v49 = 2050;
    v50 = v7;
    v51 = 2050;
    v52 = v8;
    v53 = 1026;
    v54 = v9;
    v55 = 1026;
    v56 = v10;
    v57 = 1026;
    v58 = v11;
    v59 = 1026;
    v60 = v12;
    v61 = 1026;
    v62 = v13;
    v63 = 1026;
    v64 = v14;
    v65 = 1026;
    v66 = v15;
    v67 = 2050;
    v68 = v17;
    v69 = 2050;
    v70 = v16;
    v71 = 2050;
    v72 = v18;
    v73 = 2050;
    v74 = v19;
    v75 = 2050;
    v76 = v20;
    v77 = 2050;
    v78 = v21;
    v79 = 2050;
    v80 = v22;
    v81 = 2050;
    v82 = v23;
    v83 = 1026;
    v84 = v25;
    v85 = 1026;
    v86 = v24;
    v87 = 2050;
    v88 = v26;
    v89 = 1026;
    v90 = v27;
    v91 = 2050;
    v92 = v28;
    v93 = 2050;
    v94 = v29;
    v95 = 2050;
    v96 = v30;
    v97 = 1026;
    v98 = v31;
    v99 = 1026;
    v100 = v32;
    v101 = 1026;
    v102 = v33;
    v103 = 1026;
    v104 = v34;
    v105 = 1026;
    v106 = v35;
    v107 = 2050;
    v108 = v36;
    v109 = 2050;
    v110 = v37;
    v111 = 2050;
    v112 = v38;
    v113 = 2050;
    v114 = v39;
    v115 = 2050;
    v116 = v40;
    v117 = 2050;
    v118 = v41;
    v119 = 1026;
    v120 = v43;
    v121 = 1026;
    v122 = v42;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[LA] summary,%{public}d,A,%{public}f,B,%{public}f,C,%{public}f,D,%{public}f,E,%{public}d,F,%{public}d,G,%{public}d,H,%{public}d,I,%{public}d,debug-1,%{public}d,debug-2,%{public}d,debug-3,%{public}llu,debug-4,%{public}llu,debug-5,%{public}f,debug-6,%{public}f,config-1,%{public}f,config-2,%{public}f,config-3,%{public}f,config-4,%{public}f,config-5,%{public}d,config-6,%{public}d,config-7,%{public}f,J,%{public}d,K,%{public}f,L,%{public}f,M,%{public}f,N,%{public}d,O,%{public}d,P,%{public}d,Q,%{public}d,R,%{public}d,debug-7,%{public}f,debug-8,%{public}f,config-8,%{public}f,config-9,%{public}f,config-10,%{public}f,config-11,%{public}f,config-12,%{public}d,config-13,%{public}d", (uint8_t *)v44, 0x14Au);
  }
  return result;
}

void CLKappaFeaturesAlgLocalAudio::CLKappaFeaturesAlgLocalAudio(CLKappaFeaturesAlgLocalAudio *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  __int128 v22;

  CLKappaAlgBlock::CLKappaAlgBlock(this, a2 + 1);
  v4 = *a2;
  *(_QWORD *)v5 = *a2;
  *(_QWORD *)(v5 + *(_QWORD *)(v4 - 152)) = a2[6];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 160)) = a2[7];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 168)) = a2[8];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 176)) = a2[9];
  *(_OWORD *)(v5 + 32) = 0u;
  v6 = v5 + 32;
  *(_QWORD *)(v5 + 352) = 0;
  *(_OWORD *)(v5 + 320) = 0u;
  *(_OWORD *)(v5 + 336) = 0u;
  *(_OWORD *)(v5 + 288) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_OWORD *)(v5 + 272) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  v7 = operator new(0x128uLL);
  v7[2] = 0;
  *v7 = off_10035B8B8;
  v7[1] = 0;
  sub_10023FBA4((uint64_t)(v7 + 3));
  *(_QWORD *)&v22 = v7 + 3;
  *((_QWORD *)&v22 + 1) = v7;
  sub_1000081AC((uint64_t)this + 8, &v22);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v20 = *((_QWORD *)this + 1);
  v21 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  sub_10023E020((uint64_t)&v20, &v22);
  sub_1000081AC(v6, &v22);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v21;
  if (v21)
  {
    v18 = (unint64_t *)&v21->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  (*(void (**)(CLKappaFeaturesAlgLocalAudio *))(*(_QWORD *)this + 304))(this);
}

void sub_10023DF30(_Unwind_Exception *a1)
{
  CLKappaAlgBlock *v1;
  uint64_t *v2;
  uint64_t v3;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  v5 = (void *)*((_QWORD *)v1 + 41);
  if (v5)
  {
    *((_QWORD *)v1 + 42) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)v1 + 38);
  if (v6)
  {
    *((_QWORD *)v1 + 39) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)v1 + 35);
  if (v7)
  {
    *((_QWORD *)v1 + 36) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)v1 + 32);
  if (v8)
  {
    *((_QWORD *)v1 + 33) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)v1 + 29);
  if (v9)
  {
    *((_QWORD *)v1 + 30) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)v1 + 26);
  if (v10)
  {
    *((_QWORD *)v1 + 27) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)v1 + 23);
  if (v11)
  {
    *((_QWORD *)v1 + 24) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)v1 + 20);
  if (v12)
  {
    *((_QWORD *)v1 + 21) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)v1 + 17);
  if (v13)
  {
    *((_QWORD *)v1 + 18) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)v1 + 14);
  if (v14)
  {
    *((_QWORD *)v1 + 15) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)v1 + 11);
  if (v15)
  {
    *((_QWORD *)v1 + 12) = v15;
    operator delete(v15);
  }
  v16 = (void *)*((_QWORD *)v1 + 8);
  if (v16)
  {
    *((_QWORD *)v1 + 9) = v16;
    operator delete(v16);
  }
  sub_10000A718((uint64_t)v1 + 48);
  sub_10000A718(v3);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, v2);
  _Unwind_Resume(a1);
}

void *sub_10023E020@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = *(void **)a1;
  if (result
  {
    v5 = *(_QWORD *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void CLKappaFeaturesAlgLocalAudio::CLKappaFeaturesAlgLocalAudio(CLKappaFeaturesAlgLocalAudio *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;

  *(_QWORD *)this = off_100345D50;
  *((_QWORD *)this + 45) = off_100345DF8;
  *((_QWORD *)this + 46) = off_100345EC0;
  *((_QWORD *)this + 47) = off_100345F68;
  CLKappaAlgBlock::CLKappaAlgBlock(this, (uint64_t *)off_10035B280);
  *(_QWORD *)v2 = off_10035AD80;
  *(_QWORD *)(v2 + 368) = off_10035B158;
  *(_QWORD *)(v2 + 376) = off_10035B230;
  *(_OWORD *)(v2 + 32) = 0u;
  v3 = v2 + 32;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 272) = 0u;
  *(_OWORD *)(v2 + 288) = 0u;
  *(_OWORD *)(v2 + 304) = 0u;
  *(_OWORD *)(v2 + 320) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_QWORD *)(v2 + 352) = 0;
  *(_QWORD *)(v2 + 360) = off_10035B020;
  v4 = operator new(0x128uLL);
  v4[2] = 0;
  *v4 = off_10035B8B8;
  v4[1] = 0;
  sub_10023FBA4((uint64_t)(v4 + 3));
  *(_QWORD *)&v19 = v4 + 3;
  *((_QWORD *)&v19 + 1) = v4;
  sub_1000081AC((uint64_t)this + 8, &v19);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v17 = *((_QWORD *)this + 1);
  v18 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_10023E020((uint64_t)&v17, &v19);
  sub_1000081AC(v3, &v19);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v18;
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  (*(void (**)(CLKappaFeaturesAlgLocalAudio *))(*(_QWORD *)this + 304))(this);
}

void sub_10023E284(_Unwind_Exception *a1)
{
  CLKappaAlgBlock *v1;
  uint64_t v2;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v4 = (void *)*((_QWORD *)v1 + 41);
  if (v4)
  {
    *((_QWORD *)v1 + 42) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)v1 + 38);
  if (v5)
  {
    *((_QWORD *)v1 + 39) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)v1 + 35);
  if (v6)
  {
    *((_QWORD *)v1 + 36) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)v1 + 32);
  if (v7)
  {
    *((_QWORD *)v1 + 33) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)v1 + 29);
  if (v8)
  {
    *((_QWORD *)v1 + 30) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)v1 + 26);
  if (v9)
  {
    *((_QWORD *)v1 + 27) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)v1 + 23);
  if (v10)
  {
    *((_QWORD *)v1 + 24) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)v1 + 20);
  if (v11)
  {
    *((_QWORD *)v1 + 21) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)v1 + 17);
  if (v12)
  {
    *((_QWORD *)v1 + 18) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)v1 + 14);
  if (v13)
  {
    *((_QWORD *)v1 + 15) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)v1 + 11);
  if (v14)
  {
    *((_QWORD *)v1 + 12) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)v1 + 8);
  if (v15)
  {
    *((_QWORD *)v1 + 9) = v15;
    operator delete(v15);
  }
  sub_10000A718((uint64_t)v1 + 48);
  sub_10000A718(v2);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10035B280);
  _Unwind_Resume(a1);
}

void CLKappaFeaturesAlgLocalAudio::resetConfiguration(CLKappaFeaturesAlgLocalAudio *this)
{
  void *v2;
  double v3;
  double v4;
  double v5;
  int v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  int v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  int v16;
  void *v17;
  double v18;
  double v19;
  double v20;
  int v21;
  void *v22;
  void *v23;
  void *v24;
  double v25;
  double v26;
  double v27;
  int v28;
  void *v29;
  double v30;
  double v31;
  double v32;
  int v33;
  void *v34;
  double v35;
  double v36;
  double v37;
  int v38;
  void *v39;
  double v40;
  double v41;
  double v42;
  int v43;
  void *v44;
  double v45;
  double v46;
  double v47;
  int v48;
  void *v49;
  double v50;
  double v51;
  float v52;
  void *v53;
  double v54;
  double v55;
  float v56;
  id v57;
  __int128 v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;

  v57 = (id)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration configBaseKey:forFeatureMode:](CSPersistentConfiguration, "configBaseKey:forFeatureMode:", "FeaturesAlgLAConfig", *((unsigned __int8 *)this + 24)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v3) = *(_DWORD *)"ff&?33s?";
  LODWORD(v4) = 10.0;
  LODWORD(v5) = 1028443341;
  objc_msgSend(v2, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 0, v57, v5, v4, v3);
  LODWORD(v58) = v6;

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v8) = 1140457472;
  LODWORD(v9) = 1112014848;
  LODWORD(v10) = 10.0;
  objc_msgSend(v7, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 1, v57, v10, v8, v9);
  DWORD1(v58) = v11;

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v13) = 1120403456;
  LODWORD(v14) = 1.0;
  LODWORD(v15) = 17.0;
  objc_msgSend(v12, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 2, v57, v14, v13, v15);
  DWORD2(v58) = v16;

  v17 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v18) = 1140457472;
  LODWORD(v19) = 1120403456;
  LODWORD(v20) = 10.0;
  objc_msgSend(v17, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 3, v57, v20, v18, v19);
  HIDWORD(v58) = v21;

  v22 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  v59 = objc_msgSend(v22, "algorithmIntegerNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 4, v57, 3, 128, 21);

  v23 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  v60 = objc_msgSend(v23, "algorithmIntegerNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 5, v57, 3, 2048, 501);

  v24 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v25) = *(_DWORD *)"33s?";
  LODWORD(v26) = 2.0;
  LODWORD(v27) = 1028443341;
  objc_msgSend(v24, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 6, v57, v27, v26, v25);
  v67 = v28;

  v29 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v30) = 10.0;
  LODWORD(v31) = 0.75;
  LODWORD(v32) = 1028443341;
  objc_msgSend(v29, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 7, v57, v32, v30, v31);
  v61 = v33;

  v34 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v35) = 1140457472;
  LODWORD(v36) = 1124204544;
  LODWORD(v37) = 10.0;
  objc_msgSend(v34, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 8, v57, v37, v35, v36);
  v62 = v38;

  v39 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v40) = 1120403456;
  LODWORD(v41) = 1109393408;
  LODWORD(v42) = 1.0;
  objc_msgSend(v39, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 9, v57, v42, v40, v41);
  v63 = v43;

  v44 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v45) = 1140457472;
  LODWORD(v46) = 1137180672;
  LODWORD(v47) = 10.0;
  objc_msgSend(v44, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 10, v57, v47, v45, v46);
  v64 = v48;

  v49 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v50) = 3.0;
  LODWORD(v51) = 21.0;
  objc_msgSend(v49, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 11, v57, v50, 5.62950094e14, v51);
  v65 = (int)v52;

  v53 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v54) = *(_DWORD *)"";
  LODWORD(v55) = 3.0;
  objc_msgSend(v53, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 12, v57, v55, 2.41785226e24, v54);
  v66 = (int)v56;

  CLKappaFeaturesAlgLocalAudio::setConfig((uint64_t)this, &v58);
}

void sub_10023E6D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

double CLKappaFeaturesAlgLocalAudio::setConfig(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  NSObject *v7;
  double result;
  double v9;
  double v10;
  double v11;
  double v12;
  int v13;
  int v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  int v20;
  int v21;
  int v22;
  double v23;
  __int16 v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  double v39;
  __int16 v40;
  double v41;
  __int16 v42;
  double v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  *(_DWORD *)(v3 + 64) = *((_DWORD *)a2 + 12);
  *(_OWORD *)(v3 + 32) = v5;
  *(_OWORD *)(v3 + 48) = v6;
  *(_OWORD *)(v3 + 16) = v4;
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10035B888);
  v7 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v9 = *(float *)a2;
    v10 = *((float *)a2 + 1);
    v11 = *((float *)a2 + 2);
    v12 = *((float *)a2 + 3);
    v13 = *((_DWORD *)a2 + 4);
    v14 = *((_DWORD *)a2 + 5);
    v15 = *((float *)a2 + 12);
    v16 = *((float *)a2 + 6);
    v17 = *((float *)a2 + 7);
    v18 = *((float *)a2 + 8);
    v19 = *((float *)a2 + 9);
    v20 = *((_DWORD *)a2 + 10);
    v21 = *((_DWORD *)a2 + 11);
    v22 = 134221056;
    v23 = v9;
    v24 = 2048;
    v25 = v10;
    v26 = 2048;
    v27 = v11;
    v28 = 2048;
    v29 = v12;
    v30 = 1024;
    v31 = v13;
    v32 = 1024;
    v33 = v14;
    v34 = 2048;
    v35 = v15;
    v36 = 2048;
    v37 = v16;
    v38 = 2048;
    v39 = v17;
    v40 = 2048;
    v41 = v18;
    v42 = 2048;
    v43 = v19;
    v44 = 1024;
    v45 = v20;
    v46 = 1024;
    v47 = v21;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "[LA] config, %f, %f, %f, %f, %d, %d, %f, %f, %f, %f, %f, %d, %d\n", (uint8_t *)&v22, 0x74u);
  }
  return result;
}

double CLKappaFeaturesAlgLocalAudio::reset(CLKappaFeaturesAlgLocalAudio *this)
{
  uint64_t v2;
  double result;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 4) + 24))(*((_QWORD *)this + 4));
  v2 = *((_QWORD *)this + 4);
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 94) = 0;
  *(_QWORD *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  *(_QWORD *)(v2 + 112) = 0;
  *(_WORD *)(v2 + 120) = 0;
  result = 0.0;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_QWORD *)(v2 + 160) = 0;
  *((_QWORD *)this + 44) = 0;
  return result;
}

void CLKappaFeaturesAlgLocalAudio::epochFinalize(CLKappaFeaturesAlgLocalAudio *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  unsigned int v8;
  id v9;

  v3 = *((_QWORD *)this + 4);
  *(_QWORD *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 94) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  *(_QWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 112) = 0;
  *(_WORD *)(v3 + 120) = 0;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_QWORD *)(v3 + 160) = 0;
  v4 = *((_QWORD *)this + 44);
  v5 = *((_QWORD *)this + 4);
  *(_BYTE *)(v5 + 168) = 0;
  *(_DWORD *)(v5 + 172) = 0;
  *(_QWORD *)(v5 + 176) = a2;
  *(_QWORD *)(v5 + 184) = v4;
  *(_QWORD *)(v5 + 216) = 0;
  *(_DWORD *)(v5 + 224) = 0;
  *(_QWORD *)(v5 + 232) = 0;
  *(_DWORD *)(v5 + 240) = 0;
  *(_QWORD *)(v5 + 248) = 0;
  *(_DWORD *)(v5 + 256) = 0;
  *(_QWORD *)(v5 + 264) = 0;
  *(_QWORD *)(v5 + 192) = 0;
  *(_QWORD *)(v5 + 200) = 0;
  *(_DWORD *)(v5 + 208) = 0;
  v9 = *(id *)(*((_QWORD *)this + 6) + 96);
  if (!*((_QWORD *)this + 44) && objc_msgSend(v9, "count"))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectAtIndex:", 0));
    *((_QWORD *)this + 44) = objc_msgSend(v6, "timestamp");

  }
  *(_QWORD *)(*((_QWORD *)this + 4) + 184) = *((_QWORD *)this + 44);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[CSPlatformInfo sharedInstance](CSPlatformInfo, "sharedInstance"));
  v8 = objc_msgSend(v7, "isMDevice");

  if (v8)
    CLKappaFeaturesAlgLocalAudio::extractFeaturesFromTrustedStream(this);
  else
    CLKappaFeaturesAlgLocalAudio::computeFeaturesFromSPL(this);

}

void sub_10023EA18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void CLKappaFeaturesAlgLocalAudio::extractFeaturesFromTrustedStream(CLKappaFeaturesAlgLocalAudio *this)
{
  void *v2;
  char *v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  id v8;

  v8 = *(id *)(*((_QWORD *)this + 6) + 88);
  if (objc_msgSend(v8, "count"))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "lastObject"));
    v3 = (char *)objc_msgSend(v2, "c_struct");
    v4 = *((_QWORD *)this + 4);
    v5 = *((_DWORD *)v3 + 2);
    *(_DWORD *)(v4 + 80) = *((_DWORD *)v3 + 46);
    *(_DWORD *)(v4 + 84) = v5;
    v6 = *((_DWORD *)v3 + 14);
    *(_DWORD *)(v4 + 88) = *((_DWORD *)v3 + 8);
    *(_DWORD *)(v4 + 92) = v6;
    *(_BYTE *)(v4 + 101) = v3[80];
    v7 = *((_DWORD *)v3 + 28);
    *(_DWORD *)(v4 + 104) = *((_DWORD *)v3 + 22);
    *(_DWORD *)(v4 + 108) = v7;
    *(_DWORD *)(v4 + 112) = *((_DWORD *)v3 + 34);
    *(_BYTE *)(v4 + 121) = v3[160];
    *(_BYTE *)(v4 + 168) = 1;
    *(_DWORD *)(v4 + 172) = *((_DWORD *)v3 + 48);
    *(_OWORD *)(v4 + 192) = *(_OWORD *)(v3 + 200);
    *(_DWORD *)(v4 + 208) = *((_DWORD *)v3 + 6);
    *(_QWORD *)(v4 + 216) = *((_QWORD *)v3 + 2);
    *(_DWORD *)(v4 + 224) = *((_DWORD *)v3 + 12);
    *(_QWORD *)(v4 + 232) = *((_QWORD *)v3 + 5);
    *(_DWORD *)(v4 + 240) = *((_DWORD *)v3 + 26);
    *(_QWORD *)(v4 + 248) = *((_QWORD *)v3 + 12);
    *(_DWORD *)(v4 + 256) = *((_DWORD *)v3 + 32);
    *(_QWORD *)(v4 + 264) = *((_QWORD *)v3 + 15);

  }
}

void sub_10023EB2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void CLKappaFeaturesAlgLocalAudio::computeFeaturesFromSPL(CLKappaFeaturesAlgLocalAudio *this)
{
  CLKappaFeaturesAlgLocalAudio *v1;
  id v2;
  uint64_t v3;
  float v4;
  int v5;
  int v6;
  float v7;
  float v8;
  float v9;
  float v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  id v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  signed int v22;
  void *v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  float v29;
  uint64_t v30;
  float *v31;
  int v32;
  uint64_t v33;
  int v34;
  float v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  signed int v42;
  void *v43;
  float v44;
  float v45;
  uint64_t v46;
  void *v47;
  float v48;
  uint64_t v49;
  float *v50;
  int v51;
  uint64_t v52;
  int v53;
  float v54;
  uint64_t v55;
  float **v56;
  _QWORD *v57;
  float **v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  void *v62;
  float v63;
  float *v64;
  float v65;
  float v66;
  uint64_t v67;
  float *v68;
  int v69;
  uint64_t v70;
  int v71;
  float v72;
  uint64_t v73;
  uint64_t v74;
  float *v75;
  int v76;
  uint64_t v77;
  int v78;
  float v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  id v83;
  id v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  void *v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  _QWORD *v96;
  float *v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  float v101;
  float v102;
  uint64_t v103;
  float *v104;
  int v105;
  float v106;
  uint64_t v107;
  int v108;
  float v109;
  uint64_t v110;
  uint64_t v111;
  float *v112;
  int v113;
  float v114;
  uint64_t v115;
  int v116;
  float v117;
  uint64_t v118;
  char v119;
  char v120;
  char v121;
  char v122;
  char v123;
  float *v124;
  float *v125;
  float *v126;
  uint64_t v127;
  float v128;
  float v129;
  float v130;
  BOOL v131;
  float v132;
  BOOL v133;
  char v134;
  char v135;
  char v136;
  char v137;
  char v138;
  char v139;
  BOOL v140;
  float *v141;
  float *v142;
  float v143;
  float v144;
  float v145;
  BOOL v146;
  float v147;
  BOOL v148;
  char v149;
  char v150;
  uint64_t v151;
  BOOL v152;
  void *v153;
  void *v154;
  id v155;
  uint64_t v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float **v165;
  float **v166;
  CLKappaFeaturesAlgLocalAudio *v167;
  float v168;
  float v169;
  float v170;
  int v171;
  _QWORD *v172;
  id v173;
  float v174;
  int v175;
  int v176;
  _QWORD *v177;
  _QWORD *v178;
  float v179;
  _QWORD *v180;
  float **v181;
  float **v182;
  int v183;
  id v184;

  v1 = this;
  v2 = *(id *)(*((_QWORD *)this + 6) + 80);
  v3 = *((_QWORD *)v1 + 4);
  v174 = *(float *)(v3 + 64);
  v4 = *(float *)(v3 + 16);
  v163 = *(float *)(v3 + 24);
  v164 = *(float *)(v3 + 20);
  v162 = *(float *)(v3 + 28);
  v5 = *(_DWORD *)(v3 + 32);
  v6 = *(_DWORD *)(v3 + 36);
  v7 = *(float *)(v3 + 40);
  v8 = *(float *)(v3 + 44);
  v9 = *(float *)(v3 + 48);
  v10 = *(float *)(v3 + 52);
  v12 = *(_DWORD *)(v3 + 56);
  v11 = *(_DWORD *)(v3 + 60);
  if (v5 >= 0)
    v13 = v5;
  else
    v13 = v5 + 1;
  if (v6 >= 0)
    v14 = v6;
  else
    v14 = v6 + 1;
  if (v12 >= 0)
    v15 = v12;
  else
    v15 = v12 + 1;
  if (v11 >= 0)
    v16 = v11;
  else
    v16 = v11 + 1;
  v184 = v2;
  v17 = objc_msgSend(v2, "count");
  *(_DWORD *)(*((_QWORD *)v1 + 4) + 172) = (_DWORD)v17;
  if ((_DWORD)v17)
  {
    v177 = (_QWORD *)((char *)v1 + 64);
    sub_10023F800((uint64_t)v1 + 64, (int)v17);
    v180 = (_QWORD *)((char *)v1 + 88);
    sub_10023F800((uint64_t)v1 + 88, (int)v17);
    v182 = (float **)((char *)v1 + 112);
    sub_10023F800((uint64_t)v1 + 112, (int)v17);
    v167 = v1;
    v183 = v14 >> 1;
    if ((int)v17 >= 1)
    {
      v171 = v16;
      v175 = v15;
      v18 = 0;
      v19 = v13 >> 1;
      v20 = -(v13 >> 1);
      do
      {
        v21 = v18 + 1;
        if (v19 + (int)v18 + 1 >= (int)v17)
          v22 = (int)v17;
        else
          v22 = v19 + v18 + 1;
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v184, "objectAtIndex:", ((_DWORD)v18 - v19) & ~(((int)v18 - v19) >> 31)));
        v24 = *((float *)objc_msgSend(v23, "c_struct") + 2);
        if ((LODWORD(v24) & 0x7FFFFFFFu) >= 0x7F800000)
          v24 = 0.0;
        if (v24 < 0.0)
          v24 = 0.0;
        if (v24 <= 1.0)
          v25 = v24;
        else
          v25 = 1.0;
        if (((v18 - v19) & ~(((int)v18 - v19) >> 31)) >= v22)
        {
          v28 = v23;
        }
        else
        {
          v26 = v22;
          v27 = v20 & ~(v20 >> 31);
          do
          {
            v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v184, "objectAtIndex:", v27));

            v29 = *((float *)objc_msgSend(v28, "c_struct") + 2);
            if ((LODWORD(v29) & 0x7FFFFFFFu) >= 0x7F800000)
              v29 = 0.0;
            if (v29 < 0.0)
              v29 = 0.0;
            if (v29 > 1.0)
              v29 = 1.0;
            if (v25 < v29)
              v25 = v29;
            ++v27;
            v23 = v28;
          }
          while (v27 < v26);
        }
        *(float *)(*v177 + 4 * v18) = v25;
        *(float *)(*v180 + 4 * v18) = v25 * v25;

        ++v20;
        ++v18;
      }
      while (v21 != v17);
      v30 = 0;
      v31 = *v182;
      v32 = -v183;
      v1 = v167;
      v15 = v175;
      v16 = v171;
      do
      {
        v33 = v30 + 1;
        v34 = v183 + v30 + 1;
        if (v34 >= (int)v17)
          v34 = (int)v17;
        v35 = 0.0;
        if (((v30 - v183) & ~(((int)v30 - v183) >> 31)) < v34)
        {
          v36 = v32 & ~(v32 >> 31);
          do
            v35 = v35 + *(float *)(*v180 + 4 * v36++);
          while (v36 < v34);
        }
        v31[v30] = v35;
        ++v32;
        ++v30;
      }
      while (v33 != v17);
    }
    v172 = (_QWORD *)((char *)v1 + 232);
    v37 = (int)v17;
    sub_10023F800((uint64_t)v1 + 232, (int)v17);
    v178 = (_QWORD *)((char *)v1 + 256);
    sub_10023F800((uint64_t)v1 + 256, (int)v17);
    v181 = (float **)((char *)v1 + 280);
    sub_10023F800((uint64_t)v1 + 280, (int)v17);
    v176 = v16 >> 1;
    if ((int)v17 >= 1)
    {
      v38 = 0;
      v39 = v15 >> 1;
      v40 = -(v15 >> 1);
      do
      {
        v41 = v38 + 1;
        if (v39 + (int)v38 + 1 >= (int)v17)
          v42 = (int)v17;
        else
          v42 = v39 + v38 + 1;
        v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v184, "objectAtIndex:", ((_DWORD)v38 - v39) & ~(((int)v38 - v39) >> 31)));
        v44 = *((float *)objc_msgSend(v43, "c_struct") + 2);
        if ((LODWORD(v44) & 0x7FFFFFFFu) >= 0x7F800000)
          v44 = 0.0;
        if (v44 < 0.0)
          v44 = 0.0;
        if (v44 <= 1.0)
          v45 = v44;
        else
          v45 = 1.0;
        if (((v38 - v39) & ~(((int)v38 - v39) >> 31)) >= v42)
        {
          v47 = v43;
        }
        else
        {
          v46 = v40 & ~(v40 >> 31);
          do
          {
            v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v184, "objectAtIndex:", v46));

            v48 = *((float *)objc_msgSend(v47, "c_struct") + 2);
            if ((LODWORD(v48) & 0x7FFFFFFFu) >= 0x7F800000)
              v48 = 0.0;
            if (v48 < 0.0)
              v48 = 0.0;
            if (v48 > 1.0)
              v48 = 1.0;
            if (v45 < v48)
              v45 = v48;
            ++v46;
            v43 = v47;
          }
          while (v46 < v42);
        }
        *(float *)(*v172 + 4 * v38) = v45;
        *(float *)(*v178 + 4 * v38) = v45 * v45;

        ++v40;
        ++v38;
      }
      while (v41 != v17);
      v49 = 0;
      v50 = *v181;
      v51 = -v176;
      v37 = (int)v17;
      v1 = v167;
      do
      {
        v52 = v49 + 1;
        v53 = v176 + v49 + 1;
        if (v53 >= (int)v17)
          v53 = (int)v17;
        v54 = 0.0;
        if (((v49 - v176) & ~(((int)v49 - v176) >> 31)) < v53)
        {
          v55 = v51 & ~(v51 >> 31);
          do
            v54 = v54 + *(float *)(*v178 + 4 * v55++);
          while (v55 < v53);
        }
        v50[v49] = v54;
        ++v51;
        ++v49;
      }
      while (v52 != v17);
    }
    v56 = (float **)((char *)v1 + 160);
    sub_10023F800((uint64_t)v1 + 160, v37);
    v57 = (_QWORD *)((char *)v1 + 136);
    sub_10023F800((uint64_t)v1 + 136, v37);
    v58 = (float **)((char *)v1 + 304);
    sub_10023F800((uint64_t)v1 + 304, v37);
    **((_DWORD **)v1 + 17) = 0;
    if ((int)v17 > 1)
    {
      v59 = 1;
      do
      {
        v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v184, "objectAtIndex:", v59));
        v61 = v59 - 1;
        v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v184, "objectAtIndex:", v59 - 1));
        v63 = *((float *)objc_msgSend(v60, "c_struct") + 2);
        v64 = (float *)objc_msgSend(v62, "c_struct");
        if ((LODWORD(v63) & 0x7FFFFFFFu) >= 0x7F800000)
          v65 = 0.0;
        else
          v65 = v63;
        if (v65 < 0.0)
          v65 = 0.0;
        if (v65 > 1.0)
          v65 = 1.0;
        v66 = v64[2];
        if ((LODWORD(v66) & 0x7FFFFFFFu) >= 0x7F800000)
          v66 = 0.0;
        if (v66 < 0.0)
          v66 = 0.0;
        if (v66 > 1.0)
          v66 = 1.0;
        *(float *)(*v57 + 4 * v59) = vabds_f32(v65, v66);

        ++v59;
      }
      while (v61 + 2 != v17);
    }
    v160 = v8;
    v161 = v7;
    v158 = v10;
    v159 = v9;
    v157 = v4;
    if ((int)v17 < 1)
    {
      v84 = 0;
      v83 = 0;
      v82 = 0;
      v173 = 0;
      v168 = 0.0;
      v169 = 0.0;
      v179 = 0.0;
      v89 = 0.0;
      v88 = 0.0;
      v170 = 0.0;
      v87 = 0.0;
      v86 = 0.0;
      v85 = 0.0;
    }
    else
    {
      v67 = 0;
      v68 = *v56;
      v69 = -v183;
      do
      {
        v70 = v67 + 1;
        v71 = v183 + v67 + 1;
        if (v71 >= (int)v17)
          v71 = (int)v17;
        v72 = 0.0;
        if (((v67 - v183) & ~(((int)v67 - v183) >> 31)) < v71)
        {
          v73 = v69 & ~(v69 >> 31);
          do
            v72 = v72 + *(float *)(*v57 + 4 * v73++);
          while (v73 < v71);
        }
        v68[v67] = v72;
        ++v69;
        ++v67;
      }
      while (v70 != v17);
      v74 = 0;
      v75 = *v58;
      v76 = -v176;
      do
      {
        v77 = v74 + 1;
        v78 = v176 + v74 + 1;
        if (v78 >= (int)v17)
          v78 = (int)v17;
        v79 = 0.0;
        if (((v74 - v176) & ~(((int)v74 - v176) >> 31)) < v78)
        {
          v80 = v76 & ~(v76 >> 31);
          do
            v79 = v79 + *(float *)(*v57 + 4 * v80++);
          while (v80 < v78);
        }
        v75[v74] = v79;
        ++v76;
        ++v74;
      }
      while (v77 != v17);
      v81 = 0;
      v173 = 0;
      v82 = 0;
      v83 = 0;
      v84 = 0;
      v85 = 0.0;
      v86 = 0.0;
      v87 = 0.0;
      v169 = 0.0;
      v170 = 0.0;
      v168 = 0.0;
      v88 = 0.0;
      v89 = 0.0;
      v179 = 0.0;
      do
      {
        v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v184, "objectAtIndex:", v81));
        v91 = *((float *)objc_msgSend(v90, "c_struct") + 2);
        if ((LODWORD(v91) & 0x7FFFFFFFu) >= 0x7F800000)
          v91 = 0.0;
        if (v91 < 0.0)
          v91 = 0.0;
        if (v91 > 1.0)
          v91 = 1.0;
        if (v91 > v85)
          v85 = v91;
        v92 = (*v182)[v81];
        if (v92 > v86)
        {
          v179 = (*v56)[v81];
          v84 = objc_msgSend(v90, "timestamp");
          v86 = v92;
        }
        v93 = (*v181)[v81];
        if (v93 > v89)
        {
          v170 = (*v58)[v81];
          v173 = objc_msgSend(v90, "timestamp");
          v89 = v93;
        }
        v94 = (*v56)[v81];
        if (v94 > v87)
        {
          v169 = (*v182)[v81];
          v82 = objc_msgSend(v90, "timestamp");
          v87 = v94;
        }
        v95 = (*v58)[v81];
        if (v95 > v88)
        {
          v168 = (*v181)[v81];
          v83 = objc_msgSend(v90, "timestamp");
          v88 = v95;
        }

        ++v81;
      }
      while (v17 != v81);
    }
    v96 = (_QWORD *)((char *)v167 + 184);
    sub_10023F800((uint64_t)v167 + 184, (int)v17);
    v166 = (float **)((char *)v167 + 208);
    sub_10023F800((uint64_t)v167 + 208, (int)v17);
    v165 = (float **)((char *)v167 + 328);
    sub_10023F800((uint64_t)v167 + 328, (int)v17);
    if ((int)v17 < 1)
    {
      v140 = 0;
      v119 = 0;
      v120 = 0;
      v121 = 0;
      v122 = 0;
      v123 = 0;
      v139 = 0;
      v138 = 0;
      LOBYTE(v127) = 0;
      v137 = 0;
      v136 = 0;
      v106 = 0.0;
      v114 = 0.0;
    }
    else
    {
      v98 = 0;
      v99 = v17;
      do
      {
        v100 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v184, "objectAtIndex:", v98));
        v101 = *((float *)objc_msgSend(v100, "c_struct") + 2);
        if ((LODWORD(v101) & 0x7FFFFFFFu) >= 0x7F800000)
          v101 = 0.0;
        if (v101 < 0.0)
          v101 = 0.0;
        if (v101 > 1.0)
          v101 = 1.0;
        if (v101 <= v174)
          v102 = 0.0;
        else
          v102 = 1.0;
        *(float *)(*v96 + 4 * v98) = v102;

        ++v98;
      }
      while (v17 != v98);
      v103 = 0;
      v104 = *v166;
      v105 = -v183;
      v106 = 0.0;
      do
      {
        v107 = v103 + 1;
        v108 = v183 + v103 + 1;
        if (v108 >= (int)v17)
          v108 = (int)v17;
        v109 = 0.0;
        if (((v103 - v183) & ~(((int)v103 - v183) >> 31)) < v108)
        {
          v110 = v105 & ~(v105 >> 31);
          do
            v109 = v109 + *(float *)(*v96 + 4 * v110++);
          while (v110 < v108);
        }
        v104[v103] = v109;
        if (v109 > v106)
          v106 = v109;
        ++v105;
        ++v103;
      }
      while (v107 != v17);
      v111 = 0;
      v112 = *v165;
      v113 = -v176;
      v114 = 0.0;
      do
      {
        v115 = v111 + 1;
        v116 = v176 + v111 + 1;
        if (v116 >= (int)v17)
          v116 = (int)v17;
        v117 = 0.0;
        if (((v111 - v176) & ~(((int)v111 - v176) >> 31)) < v116)
        {
          v118 = v113 & ~(v113 >> 31);
          do
            v117 = v117 + *(float *)(*v96 + 4 * v118++);
          while (v118 < v116);
        }
        v112[v111] = v117;
        if (v117 > v114)
          v114 = v117;
        ++v113;
        ++v111;
      }
      while (v115 != v17);
      v119 = 0;
      v120 = 0;
      v121 = 0;
      v122 = 0;
      v123 = 0;
      v124 = *v182;
      v125 = *v56;
      v126 = *v166;
      v127 = v17;
      do
      {
        v128 = *v124++;
        v129 = v128;
        v130 = *v125++;
        v131 = v130 > v163;
        v132 = *v126++;
        v133 = v132 > v162;
        v134 = v132 > v162 || v131;
        v120 |= v129 > v164;
        v121 |= v131;
        v123 |= v133;
        v122 |= v134;
        if (v129 > v164)
          v135 = v134;
        else
          v135 = 0;
        v119 |= v135;
        --v127;
      }
      while (v127);
      v136 = 0;
      v137 = 0;
      v138 = 0;
      v139 = 0;
      v140 = v119 != 0;
      if (v85 <= v157)
        v140 = 0;
      v141 = *v181;
      v142 = *v58;
      v97 = *v165;
      do
      {
        v143 = *v141++;
        v144 = v143;
        v145 = *v142++;
        v146 = v145 > v159;
        v147 = *v97++;
        v148 = v147 > v158;
        v149 = v147 > v158 || v146;
        v138 |= v144 > v160;
        LOBYTE(v127) = v127 | v146;
        v137 |= v148;
        v136 |= v149;
        if (v144 > v160)
          v150 = v149;
        else
          v150 = 0;
        v139 |= v150;
        --v99;
      }
      while (v99);
    }
    v151 = *((_QWORD *)v167 + 4);
    v152 = v139 != 0;
    if (v85 <= v161)
      v152 = 0;
    *(float *)(v151 + 80) = v85;
    *(float *)(v151 + 84) = v86;
    *(float *)(v151 + 88) = v87;
    *(float *)(v151 + 92) = v106;
    *(_BYTE *)(v151 + 96) = v120;
    *(_BYTE *)(v151 + 97) = v121;
    *(_BYTE *)(v151 + 98) = v123;
    *(_BYTE *)(v151 + 99) = v122;
    *(_BYTE *)(v151 + 100) = v119;
    *(_BYTE *)(v151 + 101) = v140;
    *(float *)(v151 + 104) = v89;
    *(float *)(v151 + 108) = v88;
    *(float *)(v151 + 112) = v114;
    *(_BYTE *)(v151 + 116) = v138;
    *(_BYTE *)(v151 + 117) = v127;
    *(_BYTE *)(v151 + 118) = v137;
    *(_BYTE *)(v151 + 119) = v136;
    *(_BYTE *)(v151 + 120) = v139;
    *(_BYTE *)(v151 + 121) = v152;
    v153 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v184, "objectAtIndex:", 0, v97));
    v154 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v184, "objectAtIndex:", (((_QWORD)v17 << 32)
                                                                                         - 0x100000000) >> 32));
    *(_BYTE *)(*((_QWORD *)v167 + 4) + 168) = 1;
    *(_QWORD *)(*((_QWORD *)v167 + 4) + 192) = objc_msgSend(v153, "timestamp");
    v155 = objc_msgSend(v154, "timestamp");
    v156 = *((_QWORD *)v167 + 4);
    *(_QWORD *)(v156 + 200) = v155;
    *(float *)(v156 + 208) = v179;
    *(_QWORD *)(v156 + 216) = v84;
    *(float *)(v156 + 224) = v169;
    *(_QWORD *)(v156 + 232) = v82;
    *(float *)(v156 + 240) = v170;
    *(_QWORD *)(v156 + 248) = v173;
    *(float *)(v156 + 256) = v168;
    *(_QWORD *)(v156 + 264) = v83;

  }
}

void sub_10023F74C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27)
{
  void *v27;

  _Unwind_Resume(a1);
}

void `virtual thunk to'CLKappaFeaturesAlgLocalAudio::epochFinalize(CLKappaFeaturesAlgLocalAudio *this, uint64_t a2)
{
  CLKappaFeaturesAlgLocalAudio::epochFinalize((CLKappaFeaturesAlgLocalAudio *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)), a2);
}

void sub_10023F800(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    sub_10023F908((char **)a1, a2 - v2);
  }
}

void sub_10023F830(CLKappaAlgBlock *a1)
{
}

void sub_10023F83C(CLKappaAlgBlock *a1)
{
  operator delete();
}

_QWORD *sub_10023F86C(uint64_t a1, uint64_t *a2)
{
  return sub_10000A6A0((_QWORD *)(a1 + 48), a2);
}

void sub_10023F874(_QWORD *a1)
{
}

void sub_10023F88C(_QWORD *a1)
{
  operator delete();
}

_QWORD *sub_10023F8C4(_QWORD *a1, uint64_t *a2)
{
  return sub_10000A6A0((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32) + 48), a2);
}

void sub_10023F8D8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "Alg");
  v2 = (void *)qword_100387318;
  qword_100387318 = (uint64_t)v1;

}

void sub_10023F908(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 2);
    if (v10 >> 62)
      sub_10000D5F8();
    v11 = v9 >> 2;
    v12 = v5 - v8;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)sub_100020E2C(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void sub_10023FA10(CLKappaAlgBlock *a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v4 - 152)) = a2[6];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 160)) = a2[7];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 168)) = a2[8];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 176)) = a2[9];
  v5 = (void *)*((_QWORD *)a1 + 41);
  if (v5)
  {
    *((_QWORD *)a1 + 42) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)a1 + 38);
  if (v6)
  {
    *((_QWORD *)a1 + 39) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)a1 + 35);
  if (v7)
  {
    *((_QWORD *)a1 + 36) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)a1 + 32);
  if (v8)
  {
    *((_QWORD *)a1 + 33) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)a1 + 29);
  if (v9)
  {
    *((_QWORD *)a1 + 30) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)a1 + 26);
  if (v10)
  {
    *((_QWORD *)a1 + 27) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)a1 + 23);
  if (v11)
  {
    *((_QWORD *)a1 + 24) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)a1 + 20);
  if (v12)
  {
    *((_QWORD *)a1 + 21) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)a1 + 17);
  if (v13)
  {
    *((_QWORD *)a1 + 18) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)a1 + 14);
  if (v14)
  {
    *((_QWORD *)a1 + 15) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)a1 + 11);
  if (v15)
  {
    *((_QWORD *)a1 + 12) = v15;
    operator delete(v15);
  }
  v16 = (void *)*((_QWORD *)a1 + 8);
  if (v16)
  {
    *((_QWORD *)a1 + 9) = v16;
    operator delete(v16);
  }
  sub_10000A718((uint64_t)a1 + 48);
  sub_10000A718((uint64_t)a1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(a1, a2 + 1);
}

void sub_10023FB4C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10035B8B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10023FB60(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10035B8B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10023FB94(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double sub_10023FBA4(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)a1 = &off_10034CDD8;
  *(_OWORD *)(a1 + 16) = xmmword_1002ECD70;
  *(_QWORD *)(a1 + 32) = 0x1F500000015;
  *(_OWORD *)(a1 + 40) = xmmword_1002ECD60;
  *(_QWORD *)(a1 + 56) = 0x7D100000015;
  *(_DWORD *)(a1 + 64) = 1064514355;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_WORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 94) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 204) = 0;
  *(_OWORD *)(a1 + 188) = 0u;
  *(_OWORD *)(a1 + 172) = 0u;
  return result;
}

void CLKappaDeescalatorMovingGps::CLKappaDeescalatorMovingGps(CLKappaDeescalatorMovingGps *this)
{
  char *v2;

  *(_QWORD *)this = off_100347FF0;
  *((_BYTE *)this + 8) = 0;
  *((_BYTE *)this + 16) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 32) = 1;
  *((_DWORD *)this + 9) = 0;
  *((_BYTE *)this + 40) = 0;
  v2 = (char *)sub_100007088((_QWORD *)this + 6, "none");
  *(_QWORD *)this = &off_10035B908;
  *((_WORD *)this + 36) = 0;
  *((_DWORD *)this + 19) = 0;
  *((_BYTE *)this + 80) = 0;
  *((_DWORD *)this + 21) = 0;
  *((_BYTE *)this + 88) = 0;
  if (*((char *)this + 71) < 0)
  {
    *((_QWORD *)this + 7) = 7;
    v2 = (char *)*((_QWORD *)this + 6);
  }
  else
  {
    *((_BYTE *)this + 71) = 7;
  }
  strcpy(v2, "de-MGPS");
}

id CLKappaDeescalatorMovingGps::setupForceControls(CLKappaDeescalatorMovingGps *this)
{
  id result;

  *((_BYTE *)this + 40) = CLKappaDeescalator::shouldForceNoop(this, "ForceMovingGps");
  *((_DWORD *)this + 9) = CLKappaDeescalator::shouldForceDeescalate(this, "ForceMovingGps");
  result = CLKappaDeescalator::shouldForceEscalateGPS(this);
  *((_BYTE *)this + 88) = (_BYTE)result;
  return result;
}

uint64_t CLKappaDeescalatorMovingGps::assertReady(CLKappaDeescalatorMovingGps *this, uint64_t a2, const char *a3)
{
  return CLKappaDeescalator::raiseUnless(*((unsigned __int8 *)this + 73), (BOOL)"[SC] Moving Gps missing count threshold", a3);
}

uint64_t CLKappaDeescalatorMovingGps::setConfig(uint64_t result, unsigned __int8 *a2)
{
  *(_WORD *)(result + 72) = *a2 | 0x100;
  return result;
}

uint64_t CLKappaDeescalatorMovingGps::updateCountTotal(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 76);
  if (!*(_BYTE *)(this + 80))
    v1 += *(_DWORD *)(this + 84);
  *(_DWORD *)(this + 84) = v1;
  return this;
}

uint64_t CLKappaDeescalatorMovingGps::updateWithFeatures(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(result + 80) = *(_BYTE *)(a2 + 25);
  *(_DWORD *)(result + 76) = *(_DWORD *)(a2 + 20);
  return result;
}

uint64_t CLKappaDeescalatorMovingGps::onEvaluateBetweenMinAndMaxHoldDuration(CLKappaDeescalatorMovingGps *this)
{
  unsigned int v2;

  if (*((_BYTE *)this + 88))
    return 0;
  v2 = *((unsigned __int8 *)this + 73);
  if (*((_BYTE *)this + 73))
    v2 = *((unsigned __int8 *)this + 72);
  return 4 * (*((_DWORD *)this + 21) >= v2);
}

uint64_t CLKappaDeescalatorMovingGps::onPreviousEpochMadeDecision(uint64_t this)
{
  *(_BYTE *)(this + 80) = 0;
  *(_DWORD *)(this + 84) = 0;
  return this;
}

uint64_t CLKappaDeescalatorMovingGps::onEarlyCrashDetected(uint64_t this)
{
  *(_DWORD *)(this + 84) = 0;
  return this;
}

void sub_10023FE04(void **a1)
{
  CLKappaDeescalator::~CLKappaDeescalator(a1);
  operator delete();
}

void MartyCompanionUUID::MartyCompanionUUID(MartyCompanionUUID *this)
{
  *(_QWORD *)this = off_10035B9A0;
  *((_QWORD *)this + 1) = 0;
}

{
  *(_QWORD *)this = off_10035B9A0;
  *((_QWORD *)this + 1) = 0;
}

void MartyCompanionUUID::~MartyCompanionUUID(MartyCompanionUUID *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_10035B9A0;
  v4 = *((_QWORD *)this + 1);
  v2 = (_QWORD *)((char *)this + 8);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_100011294((uint64_t)v2, v3);
  PB::Base::~Base(this);
}

{
  MartyCompanionUUID::~MartyCompanionUUID(this);
  operator delete();
}

void MartyCompanionUUID::MartyCompanionUUID(MartyCompanionUUID *this, const MartyCompanionUUID *a2)
{
  *(_QWORD *)this = off_10035B9A0;
  *((_QWORD *)this + 1) = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
}

const MartyCompanionUUID *MartyCompanionUUID::operator=(const MartyCompanionUUID *a1, const MartyCompanionUUID *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    MartyCompanionUUID::MartyCompanionUUID((MartyCompanionUUID *)&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v6 = v3;
    MartyCompanionUUID::~MartyCompanionUUID((MartyCompanionUUID *)&v5);
  }
  return a1;
}

uint64_t swap(uint64_t result, MartyCompanionUUID *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)(result + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v2;
  return result;
}

_QWORD *MartyCompanionUUID::MartyCompanionUUID(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = off_10035B9A0;
  a1[1] = 0;
  v3 = a1 + 1;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *v3;
  *v3 = v4;
  if (v5)
    sub_100011294((uint64_t)v3, v5);
  return a1;
}

{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = off_10035B9A0;
  a1[1] = 0;
  v3 = a1 + 1;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *v3;
  *v3 = v4;
  if (v5)
    sub_100011294((uint64_t)v3, v5);
  return a1;
}

uint64_t MartyCompanionUUID::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_10035B9A0;
    v6[1] = v4;
    MartyCompanionUUID::~MartyCompanionUUID((MartyCompanionUUID *)v6);
  }
  return a1;
}

uint64_t MartyCompanionUUID::formatText(MartyCompanionUUID *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format(a2, "uuid");
  return PB::TextFormatter::endObject(a2);
}

uint64_t MartyCompanionUUID::readFrom(MartyCompanionUUID *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t MartyCompanionUUID::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 8);
  if (v2)
    return PB::Writer::write(a2, v2, 1);
  return this;
}

uint64_t MartyCompanionUUID::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 **v3;
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;

  v2 = *(unsigned __int8 **)(a1 + 8);
  v3 = *(unsigned __int8 ***)(a2 + 8);
  result = v3 == 0;
  if (!v2)
    return result;
  if (!v3)
    return 0;
  v5 = v2[23];
  if ((v5 & 0x80u) == 0)
    v6 = (unsigned __int8 *)v2[23];
  else
    v6 = (unsigned __int8 *)*((_QWORD *)v2 + 1);
  v7 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  v8 = (char)v7;
  if ((char)v7 < 0)
    v7 = v3[1];
  if (v6 != v7)
    return 0;
  if (v8 >= 0)
    v9 = *(unsigned __int8 **)(a2 + 8);
  else
    v9 = *v3;
  if ((v5 & 0x80) != 0)
    return !memcmp(*(const void **)v2, v9, *((_QWORD *)v2 + 1));
  if (!v2[23])
    return 1;
  v10 = v5 - 1;
  do
  {
    v12 = *v2++;
    v11 = v12;
    v14 = *v9++;
    v13 = v14;
    v16 = v10-- != 0;
    result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

unint64_t MartyCompanionUUID::hash_value(MartyCompanionUUID *this)
{
  uint64_t v1;
  char v3;

  v1 = *((_QWORD *)this + 1);
  if (v1)
    return sub_1000112DC((uint64_t)&v3, v1);
  else
    return 0;
}

double CMOQuaternion::operator*@<D0>(uint64_t a1@<X0>, float *a2@<X1>, float32x4_t *a3@<X8>, float32x4_t a4@<Q0>)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float32_t v9;
  float32_t v10;
  float32_t v11;
  float v12;
  double result;

  v4 = *(float *)(a1 + 8);
  a4.i32[0] = *(_DWORD *)(a1 + 12);
  v5 = a2[1];
  v6 = *(float *)(a1 + 4);
  v7 = a2[2];
  v8 = a2[3];
  v9 = (float)((float)((float)(v4 * v5) + (float)(a4.f32[0] * *a2)) - (float)(v6 * v7)) + (float)(*(float *)a1 * v8);
  v10 = (float)((float)((float)(a4.f32[0] * v5) - (float)(v4 * *a2)) + (float)(*(float *)a1 * v7)) + (float)(v6 * v8);
  v11 = (float)((float)((float)(v6 * *a2) - (float)(*(float *)a1 * v5)) + (float)(a4.f32[0] * v7)) + (float)(v4 * v8);
  v12 = (float)((float)-(float)(v6 * v5) - (float)(*(float *)a1 * *a2)) - (float)(v4 * v7);
  a3->f32[0] = v9;
  a3->f32[1] = v10;
  a4.f32[0] = v12 + (float)(a4.f32[0] * v8);
  a3->f32[2] = v11;
  a3->i32[3] = a4.i32[0];
  *(_QWORD *)&result = CMOQuaternion::normalize(a3, a4).u64[0];
  return result;
}

BOOL CMOQuaternion::operator==(float *a1, float *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

double CMOQuaternion::conj@<D0>(float32x2_t *this@<X0>, float32x4_t *a2@<X8>, float32x4_t a3@<Q0>)
{
  __int32 v3;
  double result;

  v3 = this[1].i32[1];
  a3.f32[0] = -this[1].f32[0];
  *(float32x2_t *)a2->f32 = vneg_f32(*this);
  a2->i32[2] = a3.i32[0];
  a2->i32[3] = v3;
  *(_QWORD *)&result = CMOQuaternion::normalize(a2, a3).u64[0];
  return result;
}

double CMOQuaternion::negate@<D0>(float32x4_t *this@<X0>, float32x4_t *a2@<X8>)
{
  float32x4_t v2;
  double result;

  v2 = vnegq_f32(*this);
  *a2 = v2;
  *(_QWORD *)&result = CMOQuaternion::normalize(a2, v2).u64[0];
  return result;
}

float32x4_t CMOQuaternion::forceScalarPositive@<Q0>(float32x4_t *this@<X0>, float32x4_t *a2@<X8>)
{
  float32x4_t v2;
  float32x4_t result;

  if (this->f32[3] >= 0.0)
  {
    result = *this;
    *a2 = *this;
  }
  else
  {
    v2 = vnegq_f32(*this);
    *a2 = v2;
    result.i64[0] = CMOQuaternion::normalize(a2, v2).u64[0];
  }
  return result;
}

double CMOQuaternion::deltaTo@<D0>(float32x2_t *this@<X0>, const CMOQuaternion *a2@<X1>, float32x4_t *a3@<X8>, float32x4_t a4@<Q0>)
{
  __int32 v6;
  float32x4_t v7;
  double result;
  float32x4_t v9;
  float32x4_t v10;

  v6 = this[1].i32[1];
  a4.f32[0] = -this[1].f32[0];
  *(float32x2_t *)v9.f32 = vneg_f32(*this);
  v9.i64[1] = __PAIR64__(v6, a4.u32[0]);
  v7 = CMOQuaternion::normalize(&v9, a4);
  CMOQuaternion::operator*((uint64_t)a2, v9.f32, &v10, v7);
  *(_QWORD *)&result = CMOQuaternion::forceScalarPositive(&v10, a3).u64[0];
  return result;
}

float CMOQuaternion::roll(CMOQuaternion *this)
{
  float v1;
  float v2;

  v1 = *((float *)this + 1);
  v2 = (float)(*(float *)this * *((float *)this + 2)) - (float)(*((float *)this + 3) * v1);
  return -atan2f(v2 + v2, (float)((float)((float)(v1 * v1) + (float)(*(float *)this * *(float *)this)) * -2.0) + 1.0);
}

float CMOQuaternion::pitch(CMOQuaternion *this)
{
  return asinf((float)((float)(*(float *)this * *((float *)this + 3)) + (float)(*((float *)this + 1) * *((float *)this + 2)))+ (float)((float)(*(float *)this * *((float *)this + 3)) + (float)(*((float *)this + 1) * *((float *)this + 2))));
}

float CMOQuaternion::yaw(CMOQuaternion *this)
{
  float v1;
  float v2;

  v1 = *((float *)this + 2);
  v2 = (float)(*(float *)this * *((float *)this + 1)) - (float)(*((float *)this + 3) * v1);
  return -atan2f(v2 + v2, (float)((float)((float)(v1 * v1) + (float)(*(float *)this * *(float *)this)) * -2.0) + 1.0);
}

float CMOQuaternion::gravity(CMOQuaternion *this)
{
  uint64_t v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  _DWORD v10[3];

  v1 = 0;
  v2 = *((float *)this + 2);
  v3 = *((float *)this + 3);
  v4 = *((float *)this + 1);
  v5 = (float)((float)(v3 * v4) - (float)(*(float *)this * v2))
     + (float)((float)(v3 * v4) - (float)(*(float *)this * v2));
  v6 = (float)-(float)(v3 * *(float *)this) - (float)(v4 * v2);
  v7 = (float)((float)((float)(v4 * v4) + (float)(*(float *)this * *(float *)this)) * 2.0) + -1.0;
  *(float *)v10 = v5;
  *(float *)&v10[1] = v6 + v6;
  *(float *)&v10[2] = v7;
  v8 = 0.0;
  do
  {
    v8 = v8 + (float)(*(float *)&v10[v1] * *(float *)&v10[v1]);
    ++v1;
  }
  while (v1 != 3);
  return v5 / sqrtf(v8);
}

float CMOQuaternion::north(CMOQuaternion *this)
{
  uint64_t v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v10[3];

  v1 = 0;
  v2 = *((float *)this + 1);
  v4 = *((float *)this + 2);
  v3 = *((float *)this + 3);
  v5 = (float)((float)((float)(*(float *)this * *(float *)this) + (float)(v3 * v3)) * 2.0) + -1.0;
  v6 = (float)((float)(*(float *)this * v2) - (float)(v3 * v4))
     + (float)((float)(*(float *)this * v2) - (float)(v3 * v4));
  v7 = (float)((float)(v3 * v2) + (float)(*(float *)this * v4))
     + (float)((float)(v3 * v2) + (float)(*(float *)this * v4));
  v10[0] = v5;
  v10[1] = v6;
  v10[2] = v7;
  v8 = 0.0;
  do
  {
    v8 = v8 + (float)(v10[v1] * v10[v1]);
    ++v1;
  }
  while (v1 != 3);
  return v5 / sqrtf(v8);
}

void CMOQuaternion::rotateVectorInPlace(CMOQuaternion *a1, uint64_t a2)
{
  int v3;
  int v4;
  float v5[9];

  CMOQuaternion::rotationMatrixShared(a1, 1.0, v5);
  *(float *)a2 = sub_1002406D0((uint64_t)v5, (float *)a2);
  *(_DWORD *)(a2 + 4) = v3;
  *(_DWORD *)(a2 + 8) = v4;
}

float sub_1002406D0(uint64_t a1, float *a2)
{
  unint64_t i;
  float v5;
  unint64_t j;
  float v7;
  float v8;
  float *v9;
  float v11;

  for (i = 0; i != 3; ++i)
  {
    v5 = sub_100241734(a1, i, 0) * *a2;
    *(float *)sub_10001EB24((uint64_t)&v11, i) = v5;
    for (j = 1; j != 3; ++j)
    {
      v7 = sub_100241734(a1, i, j);
      v8 = sub_100020B64((uint64_t)a2, j);
      v9 = (float *)sub_10001EB24((uint64_t)&v11, i);
      *v9 = *v9 + (float)(v7 * v8);
    }
  }
  return v11;
}

float CMOQuaternion::rotationMatrix@<S0>(CMOQuaternion *this@<X0>, float *a2@<X8>)
{
  return CMOQuaternion::rotationMatrixShared(this, 1.0, a2);
}

float CMOQuaternion::rotateVector(CMOQuaternion *a1, float a2, float a3, float a4)
{
  float v5[3];
  float v6[9];

  v5[0] = a2;
  v5[1] = a3;
  v5[2] = a4;
  CMOQuaternion::rotationMatrixShared(a1, 1.0, v6);
  return sub_1002406D0((uint64_t)v6, v5);
}

void CMOQuaternion::rotateFrameInPlace(CMOQuaternion *a1, uint64_t a2)
{
  int v3;
  int v4;
  float v5[9];

  CMOQuaternion::rotationMatrixShared(a1, -1.0, v5);
  *(float *)a2 = sub_1002406D0((uint64_t)v5, (float *)a2);
  *(_DWORD *)(a2 + 4) = v3;
  *(_DWORD *)(a2 + 8) = v4;
}

float CMOQuaternion::rotationMatrixTranspose@<S0>(CMOQuaternion *this@<X0>, float *a2@<X8>)
{
  return CMOQuaternion::rotationMatrixShared(this, -1.0, a2);
}

float CMOQuaternion::rotateFrame(CMOQuaternion *a1, float a2, float a3, float a4)
{
  float v5[3];
  float v6[9];

  v5[0] = a2;
  v5[1] = a3;
  v5[2] = a4;
  CMOQuaternion::rotationMatrixShared(a1, -1.0, v6);
  return sub_1002406D0((uint64_t)v6, v5);
}

double CMOQuaternion::angleAxis(float32x4_t *a1, float *a2)
{
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float32x4_t v9;
  double result;

  v4 = 0;
  v5 = 0.0;
  do
  {
    v5 = v5 + (float)(a2[v4] * a2[v4]);
    ++v4;
  }
  while (v4 != 3);
  v6 = sqrtf(v5);
  v7 = 0.5;
  v8 = v6 * 0.5;
  if ((float)(v6 * 0.5) > 0.0)
    v7 = (float)(sinf(v6 * 0.5) / v8) * 0.5;
  a1->f32[0] = v7 * *a2;
  a1->f32[1] = v7 * a2[1];
  a1->f32[2] = v7 * a2[2];
  v9.f32[0] = cosf(v8);
  a1->i32[3] = v9.i32[0];
  *(_QWORD *)&result = CMOQuaternion::normalize(a1, v9).u64[0];
  return result;
}

float32x4_t CMOQuaternion::normalize(float32x4_t *this, float32x4_t result)
{
  float v2;

  result.f32[0] = sqrtf((float)((float)((float)(this->f32[1] * this->f32[1]) + (float)(this->f32[0] * this->f32[0]))+ (float)(this->f32[2] * this->f32[2]))+ (float)(this->f32[3] * this->f32[3]));
  v2 = result.f32[0] + -1.0;
  if ((float)(result.f32[0] + -1.0) <= 0.0)
    v2 = -(float)(result.f32[0] + -1.0);
  if (v2 >= 0.00000011921)
  {
    if (result.f32[0] == 0.0)
    {
      this->i64[0] = 0;
      this->i64[1] = 0x3F80000000000000;
    }
    else
    {
      result = vdivq_f32(*this, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)result.f32, 0));
      *this = result;
    }
  }
  return result;
}

float CMOQuaternion::angleAxis(float32x4_t *this)
{
  uint64_t v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float32x4_t v7;
  float32x4_t v8;

  v8 = *this;
  CMOQuaternion::forceScalarPositive(&v8, &v7);
  v1 = 0;
  v8 = v7;
  v2 = v7.f32[0];
  v3 = 0.0;
  do
  {
    v3 = v3 + (float)(v7.f32[v1] * v7.f32[v1]);
    ++v1;
  }
  while (v1 != 3);
  v4 = sqrtf(v3);
  if (v4 >= 0.00000011921)
  {
    v5 = atan2f(v4, v8.f32[3]);
    return v2 * (float)((float)(v5 + v5) / v4);
  }
  return v2;
}

BOOL CMOQuaternion::northAndGravity(float *a1, float32x4_t *a2, uint64_t a3, float a4, float a5, float a6, float a7, float a8, float a9, double a10, double a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, float a18)
{
  unsigned __int8 v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  _BOOL8 v24;
  uint64_t v26;
  float v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  CFAbsoluteTime Current;
  uint64_t v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  uint64_t v51;
  float v52;
  float v53;
  float v54;
  float v55;
  uint64_t v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  unint64_t i;
  uint64_t v67;
  float v68;
  unint64_t v69;
  float v70;
  unint64_t j;
  uint64_t v72;
  unint64_t v73;
  float32x4_t v74;
  uint64_t v75;
  float v76;
  uint64_t v77;
  float v78;
  unint64_t v79;
  uint64_t v80;
  float v81;
  float v82;
  float v83;
  unint64_t v84;
  float v85;
  unint64_t k;
  unint64_t v87;
  float v88;
  float v89;
  float *v90;
  float *v91;
  float *v92;
  CFAbsoluteTime v93;
  __int128 v94;
  __int128 v95;
  int v96;
  __int128 v97;
  __int128 v98;
  int v99;
  __int128 v100;
  __int128 v101;
  int v102;
  __int128 v103;
  __int128 v104;
  int v105;
  __int128 v106;
  __int128 v107;
  int v108;
  int v109;
  float v110;
  float v111;
  float v112;
  int v113;
  uint64_t v114;
  float v115;
  int v116;
  int v117;
  float v118;
  float v119;
  float v120;
  int v121;
  float v122;
  float v123;
  float v124;
  int v125;
  _BYTE v126[36];
  __int128 v127;
  __int128 v128;
  int v129;
  __int128 v130;
  __int128 v131;
  int v132;
  __int128 v133;
  __int128 v134;
  int v135;
  _OWORD v136[2];
  int v137;
  _OWORD v138[2];
  int v139;
  __int128 v140;
  __int128 v141;
  int v142;
  float v143[3];
  uint64_t v144;
  float v145;
  float v146;
  float v147;
  float v148;
  uint64_t v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  _BYTE v157[32];
  int v158;
  _BYTE buf[32];
  int v160;

  v154 = a4;
  v155 = a5;
  v156 = a6;
  v151 = a7;
  v152 = a8;
  v153 = a9;
  v149 = a17;
  v150 = a18;
  v19 = atomic_load((unsigned __int8 *)&qword_100389350);
  if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_100389350))
  {
    dword_100389348 = 1043452116;
    __cxa_guard_release(&qword_100389350);
  }
  v20 = 0;
  v21 = 0.0;
  do
  {
    v21 = v21 + (float)(*(float *)((char *)&v154 + v20) * *(float *)((char *)&v154 + v20));
    v20 += 4;
  }
  while (v20 != 12);
  if (sqrtf(v21) == 0.0)
    return 0;
  v22 = 0;
  v23 = 0.0;
  do
  {
    v23 = v23 + (float)(*(float *)((char *)&v151 + v22) * *(float *)((char *)&v151 + v22));
    v22 += 4;
  }
  while (v22 != 12);
  if (sqrtf(v23) == 0.0)
    return 0;
  v26 = 0;
  *(float *)buf = v154;
  *(float *)&buf[4] = v155;
  *(float *)&buf[8] = v156;
  v27 = 0.0;
  do
  {
    v27 = v27 + (float)(*(float *)&buf[v26] * *(float *)&buf[v26]);
    v26 += 4;
  }
  while (v26 != 12);
  v28 = 0;
  v29 = sqrtf(v27);
  v30 = v154 / v29;
  v31 = v155 / v29;
  v32 = v156 / v29;
  v154 = v30;
  v155 = v31;
  v156 = v32;
  *(float *)buf = v151;
  *(float *)&buf[4] = v152;
  *(float *)&buf[8] = v153;
  v33 = 0.0;
  do
  {
    v33 = v33 + (float)(*(float *)&buf[v28] * *(float *)&buf[v28]);
    v28 += 4;
  }
  while (v28 != 12);
  v34 = 0;
  v35 = sqrtf(v33);
  v36 = v151 / v35;
  v37 = v152 / v35;
  v38 = v153 / v35;
  v151 = v36;
  v152 = v37;
  v153 = v38;
  v39 = (float)(v31 * v38) - (float)(v32 * v37);
  v40 = (float)(v32 * v36) - (float)(v30 * v38);
  v41 = (float)(v30 * v37) - (float)(v31 * v36);
  v146 = v39;
  v147 = v40;
  v148 = v41;
  v42 = 0.0;
  do
  {
    v42 = v42 + (float)(*(float *)((char *)&v146 + v34) * *(float *)((char *)&v146 + v34));
    v34 += 4;
  }
  while (v34 != 12);
  v43 = sqrtf(v42);
  if (v43 < *(float *)&dword_100389348)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
    {
      Current = CFAbsoluteTimeGetCurrent();
      *(_DWORD *)buf = 134218498;
      *(CFAbsoluteTime *)&buf[4] = Current;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "static BOOL CMOQuaternion::northAndGravity(CMVector<float, 3>, CMVector<float, 3>, CMVector<"
                            "float, 3>, const float *, CMOQuaternion &, CMMatrix<float, 3> &)";
      *(_WORD *)&buf[22] = 2048;
      *(double *)&buf[24] = v43;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "STATUS,Generic,Time,%.3f,Function,\"%s\",n and g are too close %f\n", buf, 0x20u);
    }
    return 0;
  }
  v45 = 0;
  v46 = v39 / v43;
  v47 = v40 / v43;
  v146 = v39 / v43;
  v147 = v40 / v43;
  v48 = v41 / v43;
  v148 = v41 / v43;
  v49 = v150;
  *(_QWORD *)buf = v149;
  *(float *)&buf[8] = v150;
  v50 = 0.0;
  do
  {
    v50 = v50 + (float)(*(float *)&buf[v45] * *(float *)&buf[v45]);
    v45 += 4;
  }
  while (v45 != 12);
  v51 = 0;
  v52 = sqrtf(v50);
  v53 = *((float *)&v149 + 1) / v52;
  *(float *)&v149 = *(float *)&v149 / v52;
  *((float *)&v149 + 1) = v53;
  v150 = v150 / v52;
  v144 = 0;
  v145 = -1.0;
  v54 = (float)((float)(v49 / v52) * -0.0) - v53;
  v55 = 0.0;
  *(float *)buf = v54;
  *(float *)&buf[4] = *(float *)&v149 + (float)(v150 * 0.0);
  *(float *)&buf[8] = (float)(v53 * -0.0) + (float)(*(float *)&v149 * 0.0);
  do
  {
    v55 = v55 + (float)(*(float *)&buf[v51] * *(float *)&buf[v51]);
    v51 += 4;
  }
  while (v51 != 12);
  v56 = 0;
  v57 = sqrtf(v55);
  v143[0] = v54 / v57;
  v143[1] = (float)(*(float *)&v149 + (float)(v150 * 0.0)) / v57;
  v143[2] = (float)((float)(v53 * -0.0) + (float)(*(float *)&v149 * 0.0)) / v57;
  v58 = (float)(v37 * v48) - (float)(v38 * v47);
  v59 = (float)(v38 * v46) - (float)(v36 * v48);
  v60 = (float)(v36 * v47) - (float)(v37 * v46);
  *(float *)buf = v58;
  *(float *)&buf[4] = v59;
  *(float *)&buf[8] = v60;
  v61 = 0.0;
  do
  {
    v61 = v61 + (float)(*(float *)&buf[v56] * *(float *)&buf[v56]);
    v56 += 4;
  }
  while (v56 != 12);
  v62 = sqrtf(v61);
  v154 = v58 / v62;
  v155 = v59 / v62;
  v156 = v60 / v62;
  sub_100241348((uint64_t)&v154, (uint64_t)&v149, (uint64_t)buf);
  sub_100241348((uint64_t)&v151, (uint64_t)&v144, (uint64_t)&v140);
  sub_100241348((uint64_t)&v146, (uint64_t)v143, (uint64_t)v138);
  v63 = *a1;
  v64 = (float)((float)(a1[1] * a1[1]) + (float)(v63 * v63)) + (float)((float)(v63 + v63) * a1[1]);
  if (v64 == 0.0)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100241D14();
    __assert_rtn("northAndGravity", "CMOQuaternion.cpp", 214, "false");
  }
  v136[0] = v138[0];
  v136[1] = v138[1];
  v137 = v139;
  v127 = *(_OWORD *)buf;
  v128 = *(_OWORD *)&buf[16];
  v129 = v160;
  v117 = 0;
  v65 = sqrtf(v64);
  v118 = v156;
  v119 = -v155;
  v120 = -v156;
  v121 = 0;
  v122 = v154;
  v123 = v155;
  v124 = -v154;
  v125 = 0;
  sub_1002413D8((uint64_t)&v117, (uint64_t)v138, (uint64_t)v126);
  v109 = 0;
  v110 = v150;
  v111 = -*((float *)&v149 + 1);
  v112 = -v150;
  v113 = 0;
  v114 = v149;
  v115 = -*(float *)&v149;
  v116 = 0;
  sub_1002413D8((uint64_t)v126, (uint64_t)&v109, (uint64_t)v157);
  for (i = 0; i != 9; ++i)
    *((float *)&v127 + i) = *((float *)&v127 + i) - sub_100241CA0((uint64_t)v157, i);
  v67 = 0;
  v68 = 1.0 / v65;
  v130 = v127;
  v131 = v128;
  v132 = v129;
  do
  {
    *(float *)((char *)&v130 + v67) = (float)(v63 * v68) * *(float *)((char *)&v130 + v67);
    v67 += 4;
  }
  while (v67 != 36);
  v69 = 0;
  v133 = v130;
  v134 = v131;
  v135 = v132;
  do
  {
    *((float *)v136 + v69) = sub_100241CA0((uint64_t)&v133, v69) + *((float *)v136 + v69);
    ++v69;
  }
  while (v69 != 9);
  v70 = a1[1];
  v103 = v140;
  v104 = v141;
  v105 = v142;
  v117 = 0;
  v118 = v153;
  v119 = -v152;
  v120 = -v153;
  v121 = 0;
  v122 = v151;
  v123 = v152;
  v124 = -v151;
  v125 = 0;
  sub_1002413D8((uint64_t)&v117, (uint64_t)v138, (uint64_t)v126);
  v109 = 0;
  v110 = v145;
  v111 = -*((float *)&v144 + 1);
  v112 = -v145;
  v113 = 0;
  v114 = v144;
  v115 = -*(float *)&v144;
  v116 = 0;
  sub_1002413D8((uint64_t)v126, (uint64_t)&v109, (uint64_t)v157);
  for (j = 0; j != 9; ++j)
    *((float *)&v103 + j) = *((float *)&v103 + j) - sub_100241CA0((uint64_t)v157, j);
  v72 = 0;
  v106 = v103;
  v107 = v104;
  v108 = v105;
  do
  {
    *(float *)((char *)&v106 + v72) = (float)(v68 * v70) * *(float *)((char *)&v106 + v72);
    v72 += 4;
  }
  while (v72 != 36);
  v73 = 0;
  v133 = v106;
  v134 = v107;
  v135 = v108;
  do
  {
    v74.f32[0] = sub_100241CA0((uint64_t)&v133, v73) + *((float *)v136 + v73);
    *((_DWORD *)v136 + v73++) = v74.i32[0];
  }
  while (v73 != 9);
  CMOQuaternion::rotationMatrix(a2, (float *)v136, v74);
  v75 = 0;
  v76 = *a1;
  v97 = *(_OWORD *)buf;
  v98 = *(_OWORD *)&buf[16];
  v99 = v160;
  do
  {
    *(float *)((char *)&v97 + v75) = v76 * *(float *)((char *)&v97 + v75);
    v75 += 4;
  }
  while (v75 != 36);
  v77 = 0;
  v102 = v99;
  v100 = v97;
  v101 = v98;
  v78 = a1[1];
  v96 = v142;
  v94 = v140;
  v95 = v141;
  do
  {
    *(float *)((char *)&v94 + v77) = v78 * *(float *)((char *)&v94 + v77);
    v77 += 4;
  }
  while (v77 != 36);
  v79 = 0;
  *(_OWORD *)v157 = v94;
  *(_OWORD *)&v157[16] = v95;
  v158 = v96;
  do
  {
    *((float *)&v100 + v79) = sub_100241CA0((uint64_t)v157, v79) + *((float *)&v100 + v79);
    ++v79;
  }
  while (v79 != 9);
  v80 = 0;
  v133 = v100;
  v134 = v101;
  v135 = v102;
  v81 = 0.0;
  do
  {
    v81 = v81 + (float)(*(float *)((char *)&v133 + v80) * *(float *)((char *)&v133 + v80));
    v80 += 4;
  }
  while (v80 != 36);
  v82 = sqrtf(v81);
  v83 = (float)(v64 - (float)(v82 * v82)) * 0.5;
  v24 = v83 != 0.0;
  if (v83 == 0.0)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
    {
      v93 = CFAbsoluteTimeGetCurrent();
      *(_DWORD *)v157 = 134218242;
      *(CFAbsoluteTime *)&v157[4] = v93;
      *(_WORD *)&v157[12] = 2080;
      *(_QWORD *)&v157[14] = "static BOOL CMOQuaternion::northAndGravity(CMVector<float, 3>, CMVector<float, 3>, CMVector"
                             "<float, 3>, const float *, CMOQuaternion &, CMMatrix<float, 3> &)";
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "STATUS,Generic,Time,%.3f,Function,\"%s\",kappa zero!\n", v157, 0x16u);
    }
  }
  else
  {
    v84 = 0;
    v85 = v68 * (float)(1.0 / v83);
    do
    {
      for (k = 0; k != 3; ++k)
      {
        v87 = 0;
        *(_DWORD *)sub_100241680(a3, v84, k) = 0;
        do
        {
          v88 = sub_100241734((uint64_t)&v133, v84, v87);
          v89 = sub_100241734((uint64_t)&v133, k, v87);
          v90 = (float *)sub_100241680(a3, v84, k);
          *v90 = *v90 + (float)(v88 * v89);
          ++v87;
        }
        while (v87 != 3);
        v91 = (float *)sub_100241680(a3, v84, k);
        *v91 = v85 * *v91;
      }
      v92 = (float *)sub_100241680(a3, v84, v84);
      *v92 = v68 + *v92;
      ++v84;
    }
    while (v84 != 3);
  }
  return v24;
}

float *sub_100241348@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t i;
  unint64_t j;
  float v8;
  float v9;
  float *result;

  for (i = 0; i != 3; ++i)
  {
    for (j = 0; j != 3; ++j)
    {
      v8 = sub_100020B64(a1, i);
      v9 = v8 * sub_100020B64(a2, j);
      result = (float *)sub_100241680(a3, i, j);
      *result = v9;
    }
  }
  return result;
}

float *sub_1002413D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t i;
  unint64_t j;
  float v8;
  float v9;
  unint64_t k;
  float v11;
  float v12;
  float *result;

  for (i = 0; i != 3; ++i)
  {
    for (j = 0; j != 3; ++j)
    {
      v8 = sub_100241734(a1, i, 0);
      v9 = v8 * sub_100241734(a2, 0, j);
      *(float *)sub_100241680(a3, i, j) = v9;
      for (k = 1; k != 3; ++k)
      {
        v11 = sub_100241734(a1, i, k);
        v12 = sub_100241734(a2, k, j);
        result = (float *)sub_100241680(a3, i, j);
        *result = *result + (float)(v11 * v12);
      }
    }
  }
  return result;
}

double CMOQuaternion::rotationMatrix(float32x4_t *a1, float *a2, float32x4_t a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  BOOL v8;
  BOOL v9;
  float v10;
  float v11;
  double result;
  float v13;
  float v14;
  float v15;
  float v16;

  v3 = *a2;
  v4 = a2[4];
  v5 = a2[8];
  v6 = (float)(*a2 + v4) + v5;
  if (v6 <= 0.0)
  {
    if (v3 > v4)
    {
      v8 = v3 == v5;
      v9 = v3 < v5;
    }
    else
    {
      v8 = 1;
      v9 = 0;
    }
    if (v9 || v8)
    {
      if (v4 <= v5)
      {
        v15 = (float)((float)((float)-v3 - v4) + v5) + 1.0;
        v16 = 0.5 / sqrtf(v15);
        a1->f32[2] = v15 * v16;
        a1->f32[3] = v16 * (float)(a2[3] - a2[1]);
        a1->f32[0] = v16 * (float)(a2[2] + a2[6]);
        a3.f32[0] = v16 * (float)(a2[7] + a2[5]);
        a1->i32[1] = a3.i32[0];
      }
      else
      {
        v10 = (float)((float)(v4 - v3) - v5) + 1.0;
        v11 = 0.5 / sqrtf(v10);
        a1->f32[1] = v10 * v11;
        a1->f32[0] = v11 * (float)(a2[3] + a2[1]);
        a1->f32[3] = v11 * (float)(a2[2] - a2[6]);
        a3.f32[0] = v11 * (float)(a2[7] + a2[5]);
        a1->i32[2] = a3.i32[0];
      }
    }
    else
    {
      v13 = (float)((float)(v3 - v4) - v5) + 1.0;
      v14 = 0.5 / sqrtf(v13);
      a1->f32[0] = v13 * v14;
      a1->f32[1] = v14 * (float)(a2[3] + a2[1]);
      a1->f32[2] = v14 * (float)(a2[2] + a2[6]);
      a3.f32[0] = v14 * (float)(a2[7] - a2[5]);
      a1->i32[3] = a3.i32[0];
    }
  }
  else
  {
    v7 = 0.5 / sqrtf(v6 + 1.0);
    a1->f32[3] = (float)(v6 + 1.0) * v7;
    a1->f32[2] = v7 * (float)(a2[3] - a2[1]);
    a1->f32[1] = v7 * (float)(a2[2] - a2[6]);
    a3.f32[0] = v7 * (float)(a2[7] - a2[5]);
    a1->i32[0] = a3.i32[0];
  }
  *(_QWORD *)&result = CMOQuaternion::normalize(a1, a3).u64[0];
  return result;
}

uint64_t sub_100241680(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a2 >= 3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100241D90();
    __assert_rtn("operator()", "CMMatrix.h", 77, "false");
  }
  if (a3 >= 3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100241E0C();
    __assert_rtn("operator()", "CMMatrix.h", 78, "false");
  }
  return a1 + 4 * (3 * a3 + a2);
}

float sub_100241734(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a2 >= 3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100241E88();
    __assert_rtn("operator()", "CMMatrix.h", 70, "false");
  }
  if (a3 >= 3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100241F04();
    __assert_rtn("operator()", "CMMatrix.h", 71, "false");
  }
  return *(float *)(a1 + 4 * (3 * a3 + a2));
}

float CMOQuaternion::rotationMatrixShared@<S0>(CMOQuaternion *this@<X0>, float a2@<S0>, float *a3@<X8>)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float result;

  v4 = *((float *)this + 2);
  v3 = *((float *)this + 3);
  v5 = v3 + v3;
  v6 = *(float *)this;
  v7 = *((float *)this + 1);
  v8 = v7 + v7;
  v9 = v3 * (float)(v3 + v3);
  v10 = (float)((float)(v7 + v7) * v7) + -1.0;
  v11 = (float)((float)(v4 + v4) * v4) + -1.0;
  v12 = (float)(v6 + v6) * v7;
  v13 = (float)(v6 + v6) * v4;
  v14 = v3 * (float)(v6 + v6);
  v15 = v8 * v4;
  v16 = v3 * v8;
  v17 = v5 * v4;
  v18 = v9 + (float)((float)((float)(v6 + v6) * v6) + -1.0);
  v19 = v12 - (float)(v17 * a2);
  v20 = v13 + (float)(v16 * a2);
  v21 = v12 + (float)(v17 * a2);
  v22 = v9 + v10;
  v23 = v15 - (float)(v14 * a2);
  v24 = v13 - (float)(v16 * a2);
  result = v15 + (float)(v14 * a2);
  *a3 = v18;
  a3[1] = v19;
  a3[2] = v20;
  a3[3] = v21;
  a3[4] = v22;
  a3[5] = v23;
  a3[6] = v24;
  a3[7] = result;
  a3[8] = v9 + v11;
  return result;
}

BOOL CMOQuaternion::inverted(CMOQuaternion *this)
{
  float v1;
  float v2;
  float v3;

  v1 = CMOQuaternion::gravity(this);
  return v3 > sqrtf((float)(v2 * v2) + (float)(v1 * v1));
}

void CMOQuaternion::headingReference(CMOQuaternion *this)
{
  unsigned __int8 v1;
  float v2;
  float v3;
  float v4;
  float v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  int v17;
  CMOQuaternion *v18;
  float32x4_t v19;
  _DWORD v20[3];
  uint64_t v21;
  int v22;
  float v23[9];

  v1 = atomic_load((unsigned __int8 *)&qword_100389360);
  if ((v1 & 1) == 0)
  {
    v18 = this;
    v17 = __cxa_guard_acquire(&qword_100389360);
    this = v18;
    if (v17)
    {
      dword_100389358 = 1043452116;
      __cxa_guard_release(&qword_100389360);
      this = v18;
    }
  }
  v3 = CMOQuaternion::gravity(this);
  v5 = v4;
  v6 = 0;
  v7 = sqrtf((float)(v4 * v4) + (float)(v3 * v3));
  v8 = 1.0;
  if (v2 <= v7)
    v8 = -1.0;
  v21 = 0x3F80000000000000;
  v22 = 0;
  v9 = v2 * v8;
  v10 = (float)(v2 * -0.0) + (float)(v5 * v8);
  v11 = -(float)(v3 * v8);
  v12 = 0.0;
  v13 = v11 + (float)(v2 * 0.0);
  v14 = (float)(v5 * -0.0) + (float)(v3 * 0.0);
  *(float *)v20 = v10;
  *(float *)&v20[1] = v13;
  *(float *)&v20[2] = v14;
  do
  {
    v12 = v12 + (float)(*(float *)&v20[v6] * *(float *)&v20[v6]);
    ++v6;
  }
  while (v6 != 3);
  v15 = sqrtf(v12);
  if (v15 > *(float *)&dword_100389358)
  {
    v16 = (float)-atan2f(v7, v9) / v15;
    v23[0] = v10 * v16;
    v23[1] = v16 * v13;
    v23[2] = v16 * v14;
    CMOQuaternion::angleAxis(&v19, v23);
    CMOQuaternion::rotationMatrixShared((CMOQuaternion *)&v19, -1.0, v23);
    sub_1002406D0((uint64_t)v23, (float *)&v21);
  }
}

float CMOQuaternion::heading(CMOQuaternion *this)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float result;

  CMOQuaternion::headingReference(this);
  v5 = CMOQuaternion::rotateFrame(this, v2, v3, v4);
  for (result = atan2f(-v6, v5) * 57.2957795; result < 0.0; result = result + 360.0)
    ;
  for (; result >= 360.0; result = result + -360.0)
    ;
  return result;
}

float *CMMath::wrap(float *this, float *a2)
{
  float v2;

  v2 = *this;
  if (*this < 0.0)
  {
    do
      v2 = v2 + 360.0;
    while (v2 < 0.0);
    *this = v2;
  }
  if (v2 >= 360.0)
  {
    do
      v2 = v2 + -360.0;
    while (v2 >= 360.0);
    *this = v2;
  }
  return this;
}

double CMOQuaternion::slerp@<D0>(float32x4_t *this@<X0>, float32x4_t *a2@<X1>, float a3@<S0>, float32x4_t *a4@<X8>)
{
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float32x4_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float32_t v23;
  float32x4_t v24;
  uint64_t v26;
  float v27;
  float32x4_t v28;
  float32x4_t v29;

  if (a3 < 0.0 || a3 > 1.0)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100241F80();
    __assert_rtn("slerp", "CMOQuaternion.cpp", 381, "false");
  }
  v29 = *this;
  CMOQuaternion::normalize(&v29, v29);
  v28 = *a2;
  CMOQuaternion::normalize(&v28, v28);
  v10 = v28.i64[0];
  v11 = v29.f32[2];
  v12 = v28.i64[1];
  v13 = fmaxf(fminf((float)((float)((float)(v29.f32[1] * v28.f32[1]) + (float)(v29.f32[0] * v28.f32[0]))+ (float)(v29.f32[2] * v28.f32[2]))+ (float)(v29.f32[3] * v28.f32[3]), 1.0), -1.0);
  v14 = -v13;
  if (v13 > 0.0)
    v14 = v13;
  v15 = v14 + -1.0;
  if ((float)(v14 + -1.0) <= 0.0)
    v15 = -v15;
  if (v15 >= 0.00000011921)
  {
    v26 = v29.i64[0];
    v27 = v29.f32[3];
    v17 = acosf(v13);
    v18 = sinf(v17);
    v19 = sinf((float)(1.0 - a3) * v17);
    v20 = v17 * a3;
    v21 = v19 / v18;
    v22 = sinf(v20) / v18;
    v23 = (float)(*(float *)&v12 * v22) + (float)(v21 * v11);
    a4->f32[0] = (float)(*(float *)&v10 * v22) + (float)(v21 * *(float *)&v26);
    a4->f32[1] = (float)(*((float *)&v10 + 1) * v22) + (float)(v21 * *((float *)&v26 + 1));
    v24.f32[0] = (float)(*((float *)&v12 + 1) * v22) + (float)(v21 * v27);
    a4->f32[2] = v23;
    a4->i32[3] = v24.i32[0];
    v16.i64[0] = CMOQuaternion::normalize(a4, v24).u64[0];
  }
  else
  {
    v16 = *this;
    *a4 = *this;
  }
  return *(double *)v16.i64;
}

float sub_100241CA0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 9)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100241FFC();
    __assert_rtn("operator[]", "CMMatrix.h", 84, "false");
  }
  return *(float *)(a1 + 4 * a2);
}

void sub_100241D04(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_100241D14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  CFAbsoluteTimeGetCurrent();
  sub_10002126C();
  sub_100241D04((void *)&_mh_execute_header, &_os_log_default, v0, "ERROR,Die,Time,%.3f,Function,\"%s\",invalid weights\n", v1, v2, v3, v4, v5);
}

void sub_100241D90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000212B0(__stack_chk_guard);
  sub_10002126C();
  sub_100021280();
  sub_1000212A0((void *)&_mh_execute_header, &_os_log_default, v0, "ERROR,Die,Time,%.3f,Function,\"%s\",invalid row %zu > %zu\n", v1, v2, v3, v4, v5);
  sub_1000212B8();
}

void sub_100241E0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000212B0(__stack_chk_guard);
  sub_10002126C();
  sub_100021280();
  sub_1000212A0((void *)&_mh_execute_header, &_os_log_default, v0, "ERROR,Die,Time,%.3f,Function,\"%s\",invalid col %zu > %zu\n", v1, v2, v3, v4, v5);
  sub_1000212B8();
}

void sub_100241E88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000212B0(__stack_chk_guard);
  sub_10002126C();
  sub_100021280();
  sub_1000212A0((void *)&_mh_execute_header, &_os_log_default, v0, "ERROR,Die,Time,%.3f,Function,\"%s\",invalid row %zu > %zu\n", v1, v2, v3, v4, v5);
  sub_1000212B8();
}

void sub_100241F04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000212B0(__stack_chk_guard);
  sub_10002126C();
  sub_100021280();
  sub_1000212A0((void *)&_mh_execute_header, &_os_log_default, v0, "ERROR,Die,Time,%.3f,Function,\"%s\",invalid col %zu > %zu\n", v1, v2, v3, v4, v5);
  sub_1000212B8();
}

void sub_100241F80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  CFAbsoluteTimeGetCurrent();
  sub_10002126C();
  sub_100241D04((void *)&_mh_execute_header, &_os_log_default, v0, "ERROR,Die,Time,%.3f,Function,\"%s\",Invalid time t for slerp\n", v1, v2, v3, v4, v5);
}

void sub_100241FFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1000212B0(__stack_chk_guard);
  sub_10002126C();
  sub_1000212A0((void *)&_mh_execute_header, &_os_log_default, v0, "ERROR,Die,Time,%.3f,Function,\"%s\",invalid element %zu >= %zu\n", v1, v2, v3, v4, v5);
  sub_1000212B8();
}

void CLKappaDeescalatorSteps::CLKappaDeescalatorSteps(CLKappaDeescalatorSteps *this)
{
  char *v2;

  *(_QWORD *)this = off_100347FF0;
  *((_BYTE *)this + 8) = 0;
  *((_BYTE *)this + 16) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 32) = 1;
  *((_DWORD *)this + 9) = 0;
  *((_BYTE *)this + 40) = 0;
  v2 = (char *)sub_100007088((_QWORD *)this + 6, "none");
  *(_QWORD *)this = off_10035B9F0;
  *((_BYTE *)this + 72) = 0;
  *((_BYTE *)this + 76) = 0;
  *((_BYTE *)this + 80) = 0;
  *((_BYTE *)this + 84) = 0;
  *((_BYTE *)this + 88) = 0;
  *((_BYTE *)this + 92) = 0;
  *((_BYTE *)this + 96) = 0;
  *((_BYTE *)this + 100) = 0;
  *((_QWORD *)this + 13) = 0xC00000000;
  *((_QWORD *)this + 326) = 0x1100000000;
  *((_QWORD *)this + 330) = 0xB00000000;
  *((_BYTE *)this + 3088) = 0;
  *((_BYTE *)this + 3128) = 0;
  *((_QWORD *)this + 392) = 0;
  *(_QWORD *)((char *)this + 3141) = 0;
  if (*((char *)this + 71) < 0)
  {
    *((_QWORD *)this + 7) = 8;
    v2 = (char *)*((_QWORD *)this + 6);
  }
  else
  {
    *((_BYTE *)this + 71) = 8;
  }
  strcpy(v2, "de-Steps");
}

unint64_t CLKappaDeescalatorSteps::setupForceControls(CLKappaDeescalatorSteps *this)
{
  unint64_t result;

  *((_BYTE *)this + 40) = CLKappaDeescalator::shouldForceNoop(this, "ForceSteps");
  result = CLKappaDeescalator::shouldForceDeescalate(this, "ForceSteps");
  *((_DWORD *)this + 9) = result;
  return result;
}

uint64_t CLKappaDeescalatorSteps::assertReady(CLKappaDeescalatorSteps *this, uint64_t a2, const char *a3)
{
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;

  CLKappaDeescalator::assertCrashTimestamp(this, a2, a3);
  CLKappaDeescalator::raiseUnless(*((unsigned __int8 *)this + 76), (BOOL)"[SC] steps missing fStepsCadenceThreshold", v4);
  CLKappaDeescalator::raiseUnless(*((unsigned __int8 *)this + 84), (BOOL)"[SC] steps missing fStepsPerMinuteThreshold", v5);
  CLKappaDeescalator::raiseUnless(*((unsigned __int8 *)this + 92), (BOOL)"[SC] steps missing fStepsCountThreshold", v6);
  return CLKappaDeescalator::raiseUnless(*((unsigned __int8 *)this + 100), (BOOL)"[SC] steps missing fStepsSecondOpportunityLookbackLength", v7);
}

double CLKappaDeescalatorSteps::prepareForNextEpoch(CLKappaDeescalatorSteps *this)
{
  double result;

  result = 0.0;
  *((_QWORD *)this + 392) = 0;
  *((_DWORD *)this + 786) = 0;
  return result;
}

float CLKappaDeescalatorSteps::setConfig(uint64_t a1, uint64_t a2)
{
  float result;

  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(a1 + 76) = 1;
  result = *(float *)a2;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 84) = 1;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 92) = 1;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 12);
  *(_BYTE *)(a1 + 100) = 1;
  return result;
}

unsigned __int16 *CLKappaDeescalatorSteps::updateWithBaroFeatures(uint64_t a1, _OWORD *a2)
{
  return sub_1000318EC((unsigned __int16 *)(a1 + 104), a2);
}

uint64_t CLKappaDeescalatorSteps::updateWithHighSpeedCrash(uint64_t this, char a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(unsigned __int16 *)(this + 2610);
  v3 = *(unsigned int *)(this + 2612);
  v4 = *(unsigned __int16 *)(this + 2608);
  if (v4 + v2 >= v3)
    v5 = *(unsigned int *)(this + 2612);
  else
    v5 = 0;
  *(_BYTE *)(this + 2608 + v4 + v2 - v5 + 8) = a2;
  if (v3 <= v2)
  {
    if (v4 + 1 < v3)
      LOWORD(v3) = 0;
    *(_WORD *)(this + 2608) = v4 + 1 - v3;
  }
  else
  {
    *(_WORD *)(this + 2610) = v2 + 1;
  }
  return this;
}

unsigned __int16 *CLKappaDeescalatorSteps::updateWithStepsFeatures(unsigned __int16 *result, uint64_t a2)
{
  unsigned __int16 *v3;
  int v4;
  uint64_t v5;
  __int128 v6;

  v3 = result;
  if (*(_BYTE *)(a2 + 8))
    result = sub_100242328(result + 1320, (__int128 *)a2);
  v4 = *((unsigned __int8 *)v3 + 3128);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v3 + 193) = *(_OWORD *)a2;
  *((_OWORD *)v3 + 194) = v6;
  *((_QWORD *)v3 + 390) = v5;
  if (!v4)
    *((_BYTE *)v3 + 3128) = 1;
  return result;
}

unsigned __int16 *sub_100242328(unsigned __int16 *result, __int128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned __int16 *v4;
  __int128 v5;
  __int128 v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;

  v2 = *((unsigned int *)result + 1);
  v3 = *result + (unint64_t)result[1];
  if (v3 < v2)
    v2 = 0;
  v4 = &result[20 * (v3 - v2)];
  v6 = *a2;
  v5 = a2[1];
  *((_QWORD *)v4 + 5) = *((_QWORD *)a2 + 4);
  *(_OWORD *)(v4 + 4) = v6;
  *(_OWORD *)(v4 + 12) = v5;
  v7 = result[1];
  v8 = *((unsigned int *)result + 1);
  if (v8 <= v7)
  {
    v9 = *result + 1;
    if (v9 < v8)
      LOWORD(v8) = 0;
    *result = v9 - v8;
  }
  else
  {
    result[1] = v7 + 1;
  }
  return result;
}

uint64_t CLKappaDeescalatorSteps::getAirbagDetectedStats(unsigned __int16 *a1)
{
  unint64_t v2;
  char v3;

  if (!a1[1])
    return 0;
  v2 = 0;
  v3 = 0;
  do
  {
    if (*(_BYTE *)(sub_100031C10(a1, v2) + 52))
      v3 = 1;
    ++v2;
  }
  while (v2 < a1[1]);
  return v3 & 1;
}

float CLKappaDeescalatorSteps::getStepsStats(unsigned __int16 *a1, unint64_t a2, float a3)
{
  uint64_t v3;
  float v4;
  int v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  float v18;
  float v19;
  uint64_t v20;
  NSObject *v21;
  uint8_t v23[16];

  v3 = a1[1];
  v4 = 0.0;
  if (a1[1])
  {
    if (*(_QWORD *)sub_100242604(a1, 0) <= a2)
    {
      v8 = v3 - 1;
      v9 = 1;
      while (v3 != v9)
      {
        v10 = (unint64_t *)sub_100242604(a1, v9++);
        if (*v10 > a2)
        {
          v8 = v9 - 2;
          break;
        }
      }
    }
    else
    {
      v8 = -1;
    }
    if (v8 < 0)
    {
      if (qword_100387310 != -1)
        dispatch_once(&qword_100387310, &stru_10035BA78);
      v21 = qword_100387318;
      if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "Something is funny with steps history", v23, 2u);
      }
    }
    else
    {
      v11 = 0;
      v12 = v8 - 3;
      v13 = (v8 + 6);
      v14 = v8 - 2;
      v15 = (v8 + 3);
      v16 = v14;
      v17 = v12;
      v18 = 0.0;
      v19 = 0.0;
      v4 = 0.0;
      if (v3 <= 1)
        v3 = 1;
      else
        v3 = v3;
      do
      {
        if ((uint64_t)v11 >= v17 && v11 <= v13)
        {
          if ((uint64_t)v11 <= v16 || v11 >= v15)
          {
            v20 = sub_100242604(a1, v11);
            if (v4 < *(float *)(v20 + 20))
              v4 = *(float *)(v20 + 20);
            if (*(float *)(sub_100242604(a1, v11) + 20) > a3 && !*(_BYTE *)(sub_100242604(a1, v11) + 24))
              v19 = v19 + *(float *)(sub_100242604(a1, v11) + 16);
          }
          v18 = v18 + 2.56;
        }
        ++v11;
      }
      while (v3 != v11);
    }
  }
  return v4;
}

uint64_t sub_100242604(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  CFAbsoluteTime Current;
  int v8;
  int v9;
  CFAbsoluteTime v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  unint64_t v14;
  __int16 v15;
  int v16;

  v4 = *((unsigned int *)a1 + 1);
  if (v4 <= a2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      Current = CFAbsoluteTimeGetCurrent();
      v8 = *((_DWORD *)a1 + 1);
      v9 = 134218754;
      v10 = Current;
      v11 = 2080;
      v12 = "const T &CMQueue<CLKappaFeaturesAlgStepsOutput>::operator[](const size_t) const [T = CLKappaFeaturesAlgStepsOutput]";
      v13 = 2048;
      v14 = a2;
      v15 = 1024;
      v16 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "ERROR,Die,Time,%.3f,Function,\"%s\",i,%zu,capacity,%u\n", (uint8_t *)&v9, 0x26u);
    }
    __assert_rtn("operator[]", "CMQueue.h", 244, "false");
  }
  v5 = *a1 + a2;
  if (v5 < v4)
    v4 = 0;
  return (uint64_t)&a1[20 * (v5 - v4) + 4];
}

uint64_t CLKappaDeescalatorSteps::getStepsCountStats(unsigned __int16 *a1, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;

  v2 = a1[1];
  if (!a1[1])
    return 0;
  v3 = ((_DWORD)v2 - a2) & ~(((int)v2 - a2) >> 31);
  if (v3 >= v2)
    return 0;
  LODWORD(v5) = 0;
  do
    v5 = (float)(*(float *)(sub_100242604(a1, v3++) + 16) + (float)v5);
  while (v2 != v3);
  return v5;
}

uint64_t CLKappaDeescalatorSteps::onEvaluateAtMinHoldDuration(CLKappaDeescalatorSteps *this)
{
  float v2;
  float v3;
  unsigned __int16 *v4;
  unint64_t *v5;
  float StepsStats;
  float v7;
  float v8;
  char HighSpeedDetectedStats;
  char AirbagDetectedStats;
  uint64_t result;
  BOOL v12;

  v2 = 0.0;
  v3 = 0.0;
  if (*((_BYTE *)this + 76))
    v3 = *((float *)this + 18);
  if (*((_BYTE *)this + 84))
    v2 = *((float *)this + 20);
  v4 = (unsigned __int16 *)((char *)this + 2640);
  v5 = (unint64_t *)((char *)this + 8);
  if (!*((_BYTE *)this + 16))
    v5 = (unint64_t *)&unk_1002ECEA0;
  StepsStats = CLKappaDeescalatorSteps::getStepsStats(v4, *v5, v3);
  v8 = v7;
  HighSpeedDetectedStats = CLKappaDeescalator::getHighSpeedDetectedStats((unsigned __int16 *)this + 1304);
  AirbagDetectedStats = CLKappaDeescalatorSteps::getAirbagDetectedStats((unsigned __int16 *)this + 52);
  result = 0;
  *((float *)this + 784) = StepsStats;
  *((float *)this + 785) = v8;
  v12 = v8 <= v2 || StepsStats <= v3;
  if (!v12 && (HighSpeedDetectedStats & 1) == 0 && (AirbagDetectedStats & 1) == 0)
  {
    *((_BYTE *)this + 3148) = 1;
    return 4;
  }
  return result;
}

uint64_t CLKappaDeescalatorSteps::onEvaluateAtSecondDeescalationOpportunity(CLKappaDeescalatorSteps *this)
{
  unsigned int v2;
  int v3;
  unsigned int StepsCountStats;

  if (*((_BYTE *)this + 92))
    v2 = *((_DWORD *)this + 22);
  else
    v2 = 0;
  if (*((_BYTE *)this + 100))
    v3 = *((_DWORD *)this + 24);
  else
    v3 = 0;
  StepsCountStats = CLKappaDeescalatorSteps::getStepsCountStats((unsigned __int16 *)this + 1320, v3);
  *((_DWORD *)this + 786) = StepsCountStats;
  if (StepsCountStats <= v2)
    return 1;
  *((_BYTE *)this + 3148) = 2;
  return 4;
}

_DWORD *CLKappaDeescalatorSteps::onPreviousEpochMadeDecision(_DWORD *this)
{
  this[26] = 0;
  this[652] = 0;
  this[660] = 0;
  return this;
}

void sub_1002428DC(void **this)
{
  *this = off_10035B9F0;
  CLKappaDeescalator::~CLKappaDeescalator(this);
}

void sub_1002428EC(void **a1)
{
  *a1 = off_10035B9F0;
  CLKappaDeescalator::~CLKappaDeescalator(a1);
  operator delete();
}

void sub_10024291C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "Alg");
  v2 = (void *)qword_100387318;
  qword_100387318 = (uint64_t)v1;

}

unint64_t CLKappaDeescalatorMAP::setupForceControls(CLKappaDeescalatorMAP *this)
{
  unint64_t result;

  *((_BYTE *)this + 40) = CLKappaDeescalator::shouldForceNoop(this, "ForceMAP");
  result = CLKappaDeescalator::shouldForceDeescalate(this, "ForceMAP");
  *((_DWORD *)this + 9) = result;
  return result;
}

void CLKappaDeescalatorMAP::resetConfiguration(CLKappaDeescalatorMAP *this)
{
  void *v2;
  id v3;
  unsigned __int8 v4;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration configBaseKey:forFeatureMode:](CSPersistentConfiguration, "configBaseKey:forFeatureMode:", "DeescalatorMAPConfig", *((unsigned __int8 *)this + 32)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  v4 = objc_msgSend(v2, "algorithmBoolNumber:inArrayForKey:defaultValue:", 0, v3, 1);

  CLKappaDeescalatorMAP::setConfig((uint64_t)this, &v4);
}

void sub_100242A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

void CLKappaDeescalatorMAP::setConfig(uint64_t a1, _BYTE *a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];

  *(_BYTE *)(a1 + 234) = *a2;
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10035BB30);
  v3 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
  {
    v4 = *a2;
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[MAP] config-1,%d", (uint8_t *)v5, 8u);
  }
}

void CLKappaDeescalatorMAP::CLKappaDeescalatorMAP(CLKappaDeescalatorMAP *this)
{
  char *v2;

  *(_QWORD *)this = off_100347FF0;
  *((_BYTE *)this + 8) = 0;
  *((_BYTE *)this + 16) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 32) = 1;
  *((_DWORD *)this + 9) = 0;
  *((_BYTE *)this + 40) = 0;
  v2 = (char *)sub_100007088((_QWORD *)this + 6, "none");
  *(_QWORD *)this = off_10035BAA8;
  *((_QWORD *)this + 9) = 0xB00000000;
  *((_QWORD *)this + 12) = 0xB00000000;
  *((_QWORD *)this + 24) = 0xB00000000;
  *((_WORD *)this + 106) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_WORD *)this + 116) = 0;
  *((_BYTE *)this + 234) = 1;
  if (*((char *)this + 71) < 0)
  {
    *((_QWORD *)this + 7) = 6;
    v2 = (char *)*((_QWORD *)this + 6);
  }
  else
  {
    *((_BYTE *)this + 71) = 6;
  }
  strcpy(v2, "de-MAP");
}

uint64_t CLKappaDeescalatorMAP::prepareForNextEpoch(uint64_t this)
{
  *(_QWORD *)(this + 216) = 0;
  *(_QWORD *)(this + 224) = 0;
  return this;
}

unsigned __int16 *CLKappaDeescalatorMAP::updateWithIsMAP(uint64_t a1, uint64_t a2)
{
  sub_100242C04((unsigned __int16 *)(a1 + 72), (_BYTE *)a2);
  *(_BYTE *)(a1 + 212) = *(_BYTE *)a2;
  return sub_100242C58((unsigned __int16 *)(a1 + 96), (_QWORD *)(a2 + 8));
}

unsigned __int16 *sub_100242C04(unsigned __int16 *result, _BYTE *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = result[1];
  v3 = *((unsigned int *)result + 1);
  v4 = *result;
  if (v4 + v2 >= v3)
    v5 = *((unsigned int *)result + 1);
  else
    v5 = 0;
  *((_BYTE *)result + v4 + v2 - v5 + 8) = *a2;
  if (v3 <= v2)
  {
    if (v4 + 1 < v3)
      LOWORD(v3) = 0;
    *result = v4 + 1 - v3;
  }
  else
  {
    result[1] = v2 + 1;
  }
  return result;
}

unsigned __int16 *sub_100242C58(unsigned __int16 *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = result[1];
  v3 = *((unsigned int *)result + 1);
  v4 = *result;
  if (v4 + v2 >= v3)
    v5 = *((unsigned int *)result + 1);
  else
    v5 = 0;
  *(_QWORD *)&result[4 * (v4 + v2 - v5) + 4] = *a2;
  if (v3 <= v2)
  {
    if (v4 + 1 < v3)
      LOWORD(v3) = 0;
    *result = v4 + 1 - v3;
  }
  else
  {
    result[1] = v2 + 1;
  }
  return result;
}

unsigned __int16 *CLKappaDeescalatorMAP::updateWithFreeFall(uint64_t a1, uint64_t a2)
{
  unsigned __int16 *result;

  result = sub_100242C04((unsigned __int16 *)(a1 + 192), (_BYTE *)(a2 + 44));
  *(_BYTE *)(a1 + 213) = *(_BYTE *)(a2 + 44);
  return result;
}

uint64_t CLKappaDeescalatorMAP::onEvaluateAtMinHoldDuration(CLKappaDeescalatorMAP *this)
{
  unint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unint64_t v7;

  if (!*((_BYTE *)this + 234))
    return 1;
  v2 = (unint64_t *)((char *)this + 8);
  if (!*((_BYTE *)this + 16))
    v2 = (unint64_t *)&unk_1002ECEE0;
  v3 = 1;
  if (*((_WORD *)this + 37))
  {
    v4 = 0;
    v5 = 0;
    v6 = *v2;
    v7 = *v2 + 8100000;
    do
    {
      if (*(_QWORD *)sub_100242EC4((unsigned __int16 *)this + 48, v4) + 5000000 >= v6
        && *(_QWORD *)sub_100242EC4((unsigned __int16 *)this + 48, v4) <= v7)
      {
        if (!*((_BYTE *)this + 232))
        {
          *((_QWORD *)this + 27) = *(_QWORD *)sub_100242EC4((unsigned __int16 *)this + 48, v4);
          *((_BYTE *)this + 232) = 1;
        }
        *((_QWORD *)this + 28) = *(_QWORD *)sub_100242EC4((unsigned __int16 *)this + 48, v4);
        if (v5)
        {
          v5 = 1;
        }
        else if (*(_BYTE *)sub_100027E40((unsigned __int16 *)this + 36, v4))
        {
          v5 = *(_BYTE *)sub_100027E40((unsigned __int16 *)this + 96, v4) == 0;
        }
        else
        {
          v5 = 0;
        }
      }
      ++v4;
    }
    while (v4 < *((unsigned __int16 *)this + 37));
    if (v5)
      return 4;
    else
      return 1;
  }
  return v3;
}

uint64_t CLKappaDeescalatorMAP::onPreviousEpochMadeDecision(uint64_t this)
{
  *(_DWORD *)(this + 72) = 0;
  *(_DWORD *)(this + 192) = 0;
  *(_QWORD *)(this + 216) = 0;
  *(_QWORD *)(this + 224) = 0;
  *(_BYTE *)(this + 232) = 0;
  return this;
}

void sub_100242E54(void **this)
{
  *this = off_10035BAA8;
  CLKappaDeescalator::~CLKappaDeescalator(this);
}

void sub_100242E64(void **a1)
{
  *a1 = off_10035BAA8;
  CLKappaDeescalator::~CLKappaDeescalator(a1);
  operator delete();
}

void sub_100242E94(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "Alg");
  v2 = (void *)qword_100387318;
  qword_100387318 = (uint64_t)v1;

}

uint64_t sub_100242EC4(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  CFAbsoluteTime Current;
  int v8;
  int v9;
  CFAbsoluteTime v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  unint64_t v14;
  __int16 v15;
  int v16;

  v4 = *((unsigned int *)a1 + 1);
  if (v4 <= a2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      Current = CFAbsoluteTimeGetCurrent();
      v8 = *((_DWORD *)a1 + 1);
      v9 = 134218754;
      v10 = Current;
      v11 = 2080;
      v12 = "const T &CMQueue<unsigned long long>::operator[](const size_t) const [T = unsigned long long]";
      v13 = 2048;
      v14 = a2;
      v15 = 1024;
      v16 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "ERROR,Die,Time,%.3f,Function,\"%s\",i,%zu,capacity,%u\n", (uint8_t *)&v9, 0x26u);
    }
    __assert_rtn("operator[]", "CMQueue.h", 244, "false");
  }
  v5 = *a1 + a2;
  if (v5 < v4)
    v4 = 0;
  return (uint64_t)&a1[4 * (v5 - v4) + 4];
}

void sub_100243028(id a1)
{
  NSObject *v1;
  CSMapDataQuality *v2;
  void *v3;
  CSMapDataQuality *v4;
  void *v5;
  uint8_t v6[16];

  if (qword_100387470 != -1)
    dispatch_once(&qword_100387470, &stru_10035BB70);
  v1 = qword_100387478;
  if (os_log_type_enabled((os_log_t)qword_100387478, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "creating CSMapDataQuality shared instance", v6, 2u);
  }
  v2 = [CSMapDataQuality alloc];
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration"));
  v4 = -[CSMapDataQuality initWithGEOCountryConfiguration:](v2, "initWithGEOCountryConfiguration:", v3);
  v5 = (void *)qword_100389368;
  qword_100389368 = (uint64_t)v4;

}

void sub_100243378(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "MapDataQuality");
  v2 = (void *)qword_100387478;
  qword_100387478 = (uint64_t)v1;

}

float CLSafetyAlgorithmsMath::computeSigmoidalThreshold(float *a1, float a2)
{
  float v3;
  BOOL v4;
  float v5;

  v3 = (float)(a2 - *a1) / a1[1];
  v4 = v3 < -20.0 || v3 > 20.0;
  if (v4)
  {
    v4 = v3 <= 20.0;
    v5 = 1.0;
    if (!v4)
      v5 = 0.0;
  }
  else
  {
    v5 = 1.0 / (float)(expf(v3) + 1.0);
  }
  return a1[2] + (float)((float)(a1[3] - a1[2]) * v5);
}

uint64_t CLKappaFeaturesAlgLackOfMotionResult::reset(uint64_t this)
{
  *(_BYTE *)(this + 8) = 0;
  *(_DWORD *)(this + 12) = 0;
  *(_DWORD *)(this + 60) = 0;
  *(_DWORD *)(this + 64) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_WORD *)(this + 56) = 0;
  *(_QWORD *)(this + 72) = 0;
  *(_QWORD *)(this + 80) = 0;
  *(_QWORD *)(this + 85) = 0;
  return this;
}

void CLKappaFeaturesAlgLackOfMotionResult::log(CLKappaFeaturesAlgLackOfMotionResult *this)
{
  CLKappaFeaturesAlgLackOfMotionResult::logInternal(this, 1);
}

void CLKappaFeaturesAlgLackOfMotionResult::logInternal(CLKappaFeaturesAlgLackOfMotionResult *this, int a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  float v18;
  int v19;
  int v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  double v37;
  __int16 v38;
  double v39;
  __int16 v40;
  double v41;
  __int16 v42;
  double v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  double v49;
  __int16 v50;
  double v51;
  __int16 v52;
  double v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;

  if (a2)
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_10035C748);
    v3 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *((_QWORD *)this + 4);
      v5 = *((_QWORD *)this + 5);
      v6 = *((_DWORD *)this + 12);
      v7 = *((_DWORD *)this + 13);
      v8 = *((unsigned __int8 *)this + 56);
      v9 = *((unsigned __int8 *)this + 57);
      v10 = *((_DWORD *)this + 15);
      v11 = *((_DWORD *)this + 16);
      v12 = *((float *)this + 4);
      v13 = *((float *)this + 5);
      v14 = *((float *)this + 6);
      v16 = *((_QWORD *)this + 9);
      v15 = *((_QWORD *)this + 10);
      v17 = *((float *)this + 7);
      v18 = *((float *)this + 22);
      v19 = *((unsigned __int8 *)this + 92);
      v20 = 134353664;
      v21 = v4;
      v22 = 2050;
      v23 = v5;
      v24 = 1026;
      v25 = v6;
      v26 = 1026;
      v27 = v7;
      v28 = 1026;
      v29 = v8;
      v30 = 1026;
      v31 = v9;
      v32 = 1026;
      v33 = v10;
      v34 = 1026;
      v35 = v11;
      v36 = 2050;
      v37 = v12;
      v38 = 2050;
      v39 = v13;
      v40 = 2050;
      v41 = v14;
      v42 = 2050;
      v43 = v17;
      v44 = 2050;
      v45 = v16;
      v46 = 2050;
      v47 = v15;
      v48 = 2050;
      v49 = (double)v15 * 0.000001;
      v50 = 2050;
      v51 = v18;
      v52 = 2050;
      v53 = (float)(v18 / 0.44704);
      v54 = 1026;
      v55 = v19;
      v56 = 1026;
      v57 = 1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[LOM] summary,A,%{public}llu,B,%{public}llu,C,%{public}i,D,%{public}i,E,%{public}d,F,%{public}d,G,%{public}d,H,%{public}d,config-1,%{public}f,config-2,%{public}f,config-3,%{public}f,config-4,%{public}f,debug-1,%{public}llu,debug-2,%{public}llu,debug-3,%{public}f,debug-4,%{public}f,debug-5,%{public}f,debug-6,%{public}d,debug-7,%{public}d\n", (uint8_t *)&v20, 0xA0u);
    }
  }
}

void CLKappaFeaturesAlgLackOfMotion::CLKappaFeaturesAlgLackOfMotion(CLKappaFeaturesAlgLackOfMotion *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  __int128 v22;

  CLKappaAlgBlock::CLKappaAlgBlock(this, a2 + 1);
  v4 = *a2;
  *(_QWORD *)v5 = *a2;
  *(_QWORD *)(v5 + *(_QWORD *)(v4 - 152)) = a2[6];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 160)) = a2[7];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 168)) = a2[8];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 176)) = a2[9];
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  v6 = v5 + 32;
  *(_QWORD *)(v5 + 64) = 0xA00000000;
  *(_QWORD *)(v5 + 112) = 0xA00000000;
  *(_QWORD *)(v5 + 136) = 0;
  *(_WORD *)(v5 + 144) = 0;
  *(_DWORD *)(v5 + 148) = 0;
  *(_DWORD *)(v5 + 152) = 0;
  *(_QWORD *)(v5 + 160) = 0;
  *(_QWORD *)(v5 + 168) = 0;
  v7 = (char *)operator new(0x78uLL);
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = off_10035C778;
  *((_QWORD *)v7 + 1) = 0;
  *((_OWORD *)v7 + 2) = 0u;
  *((_OWORD *)v7 + 3) = 0u;
  *((_OWORD *)v7 + 4) = 0u;
  *((_OWORD *)v7 + 5) = 0u;
  *((_OWORD *)v7 + 6) = 0u;
  *((_QWORD *)v7 + 13) = 0;
  *((_QWORD *)v7 + 14) = 0;
  *((_QWORD *)v7 + 3) = &off_10034CD78;
  *(_OWORD *)(v7 + 40) = xmmword_1002ECF10;
  *((_QWORD *)v7 + 7) = 0;
  *((_QWORD *)v7 + 8) = 0;
  *((_QWORD *)v7 + 9) = 0;
  *((_WORD *)v7 + 40) = 0;
  *(_QWORD *)(v7 + 109) = 0;
  *((_QWORD *)v7 + 12) = 0;
  *(_QWORD *)&v22 = v7 + 24;
  *((_QWORD *)&v22 + 1) = v7;
  sub_1000081AC((uint64_t)this + 8, &v22);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v20 = *((_QWORD *)this + 1);
  v21 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  sub_100243850((uint64_t)&v20, &v22);
  sub_1000081AC(v6, &v22);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v21;
  if (v21)
  {
    v18 = (unint64_t *)&v21->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  (*(void (**)(CLKappaFeaturesAlgLackOfMotion *))(*(_QWORD *)this + 304))(this);
}

void sub_100243824(_Unwind_Exception *a1)
{
  CLKappaAlgBlock *v1;
  uint64_t *v2;
  uint64_t v3;

  sub_10000A718((uint64_t)v1 + 48);
  sub_10000A718(v3);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, v2);
  _Unwind_Resume(a1);
}

void *sub_100243850@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = *(void **)a1;
  if (result
  {
    v5 = *(_QWORD *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void CLKappaFeaturesAlgLackOfMotion::CLKappaFeaturesAlgLackOfMotion(CLKappaFeaturesAlgLackOfMotion *this)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;

  *(_QWORD *)this = off_100345D50;
  *((_QWORD *)this + 22) = off_100345DF8;
  *((_QWORD *)this + 23) = off_100345EC0;
  *((_QWORD *)this + 24) = off_100345F68;
  CLKappaAlgBlock::CLKappaAlgBlock(this, (uint64_t *)off_10035C140);
  *(_QWORD *)v2 = off_10035BC40;
  *(_QWORD *)(v2 + 176) = off_10035BEE0;
  *(_QWORD *)(v2 + 184) = off_10035C018;
  *(_OWORD *)(v2 + 32) = 0u;
  v3 = v2 + 32;
  *(_QWORD *)(v2 + 192) = off_10035C0F0;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_QWORD *)(v2 + 64) = 0xA00000000;
  *(_QWORD *)(v2 + 112) = 0xA00000000;
  *(_QWORD *)(v2 + 136) = 0;
  *(_WORD *)(v2 + 144) = 0;
  *(_DWORD *)(v2 + 148) = 0;
  *(_DWORD *)(v2 + 152) = 0;
  *(_QWORD *)(v2 + 160) = 0;
  *(_QWORD *)(v2 + 168) = 0;
  v4 = (char *)operator new(0x78uLL);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = off_10035C778;
  *((_QWORD *)v4 + 1) = 0;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((_QWORD *)v4 + 13) = 0;
  *((_QWORD *)v4 + 14) = 0;
  *((_QWORD *)v4 + 3) = &off_10034CD78;
  *(_OWORD *)(v4 + 40) = xmmword_1002ECF10;
  *((_QWORD *)v4 + 7) = 0;
  *((_QWORD *)v4 + 8) = 0;
  *((_QWORD *)v4 + 9) = 0;
  *((_WORD *)v4 + 40) = 0;
  *(_QWORD *)(v4 + 109) = 0;
  *((_QWORD *)v4 + 12) = 0;
  *(_QWORD *)&v19 = v4 + 24;
  *((_QWORD *)&v19 + 1) = v4;
  sub_1000081AC((uint64_t)this + 8, &v19);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v17 = *((_QWORD *)this + 1);
  v18 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_100243850((uint64_t)&v17, &v19);
  sub_1000081AC(v3, &v19);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v18;
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  (*(void (**)(CLKappaFeaturesAlgLackOfMotion *))(*(_QWORD *)this + 304))(this);
}

void sub_100243AEC(_Unwind_Exception *a1)
{
  CLKappaAlgBlock *v1;
  uint64_t v2;

  sub_10000A718((uint64_t)v1 + 48);
  sub_10000A718(v2);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10035C140);
  _Unwind_Resume(a1);
}

void CLKappaFeaturesAlgLackOfMotion::resetConfiguration(CLKappaFeaturesAlgLackOfMotion *this)
{
  void *v2;
  double v3;
  double v4;
  double v5;
  int v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  int v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  int v16;
  void *v17;
  double v18;
  double v19;
  double v20;
  int v21;
  id v22;
  __int128 v23;

  v22 = (id)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration configBaseKey:forFeatureMode:](CSPersistentConfiguration, "configBaseKey:forFeatureMode:", "FeaturesAlgLOMConfig", *((unsigned __int8 *)this + 24)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v3) = 1106925439;
  LODWORD(v4) = 1091505517;
  LODWORD(v5) = 1074728301;
  objc_msgSend(v2, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 0, v22, v5, v3, v4);
  LODWORD(v23) = v6;

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v8) = 1027021677;
  LODWORD(v9) = 1087804452;
  LODWORD(v10) = 1074728301;
  objc_msgSend(v7, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 1, v22, v8, v9, v10);
  DWORD1(v23) = v11;

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v13) = 1138722042;
  LODWORD(v14) = 1076603318;
  LODWORD(v15) = 1074728301;
  objc_msgSend(v12, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 2, v22, v15, v13, v14);
  DWORD2(v23) = v16;

  v17 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v18) = 1027021677;
  LODWORD(v19) = 1087804452;
  LODWORD(v20) = 1074728301;
  objc_msgSend(v17, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 3, v22, v18, v19, v20);
  HIDWORD(v23) = v21;

  CLKappaFeaturesAlgLackOfMotion::setConfig((uint64_t)this, &v23);
}

void sub_100243C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

double CLKappaFeaturesAlgLackOfMotion::setConfig(uint64_t a1, _OWORD *a2)
{
  NSObject *v3;
  double result;
  float *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  int v10;
  double v11;
  __int16 v12;
  double v13;
  __int16 v14;
  double v15;
  __int16 v16;
  double v17;

  *(_OWORD *)(*(_QWORD *)(a1 + 32) + 16) = *a2;
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10035C748);
  v3 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(float **)(a1 + 32);
    v6 = v5[4];
    v7 = v5[5];
    v8 = v5[6];
    v9 = v5[7];
    v10 = 134218752;
    v11 = v6;
    v12 = 2048;
    v13 = v7;
    v14 = 2048;
    v15 = v8;
    v16 = 2048;
    v17 = v9;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[LOM] config, ,%f, %f, %f, %f", (uint8_t *)&v10, 0x2Au);
  }
  return result;
}

uint64_t CLKappaFeaturesAlgLackOfMotion::resetCounters(uint64_t this)
{
  *(_WORD *)(this + 144) = 0;
  *(_DWORD *)(this + 148) = 0;
  *(_DWORD *)(this + 152) = 0;
  return this;
}

uint64_t CLKappaFeaturesAlgLackOfMotion::reset(CLKappaFeaturesAlgLackOfMotion *this)
{
  uint64_t result;
  uint64_t v3;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 24))(*((_QWORD *)this + 4));
  *((_WORD *)this + 72) = 0;
  *((_DWORD *)this + 37) = 0;
  *((_DWORD *)this + 38) = 0;
  v3 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 20) = v3;
  *((_QWORD *)this + 21) = v3;
  return result;
}

void CLKappaFeaturesAlgLackOfMotion::epochFinalize(CLKappaFeaturesAlgLackOfMotion *this, unint64_t a2)
{
  CLKappaFeaturesAlgLackOfMotion::fillGapsAsRequiredUpToTimestamp(this, a2);
  *(_QWORD *)(*((_QWORD *)this + 4) + 32) = a2;
}

void CLKappaFeaturesAlgLackOfMotion::fillGapsAsRequiredUpToTimestamp(CLKappaFeaturesAlgLackOfMotion *this, unint64_t a2)
{
  int v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  _BYTE v8[12];
  __int16 v9;
  unint64_t v10;
  __int16 v11;
  uint64_t v12;

  if (*((_QWORD *)this + 20) == *((_QWORD *)this + 17))
    *((_QWORD *)this + 20) = a2;
  v4 = 1001;
  while (1)
  {
    v5 = *((_QWORD *)this + 20);
    if (v5 + 1500000 >= a2)
      break;
    *(_QWORD *)v8 = v5 + 1000000;
    *(_DWORD *)&v8[8] = 2143289344;
    LOBYTE(v9) = 0;
    CLKappaFeaturesAlgLackOfMotion::processGPS((uint64_t)this, (float *)v8);
    if (!--v4)
    {
      if (qword_100387310 != -1)
        dispatch_once(&qword_100387310, &stru_10035C748);
      v6 = qword_100387318;
      if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_FAULT))
      {
        v7 = *((_QWORD *)this + 20);
        *(_DWORD *)v8 = 134218496;
        *(_QWORD *)&v8[4] = v7;
        v9 = 2048;
        v10 = a2;
        v11 = 2048;
        v12 = 1000000;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "[LOM] Something is funny with GPS stream, fLastGPSTimestamp:%llu, nextTimestamp:%llu, deltaTime:%llu", v8, 0x20u);
      }
      return;
    }
  }
}

void `virtual thunk to'CLKappaFeaturesAlgLackOfMotion::epochFinalize(CLKappaFeaturesAlgLackOfMotion *this, unint64_t a2)
{
  CLKappaFeaturesAlgLackOfMotion *v3;

  v3 = (CLKappaFeaturesAlgLackOfMotion *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  CLKappaFeaturesAlgLackOfMotion::fillGapsAsRequiredUpToTimestamp(v3, a2);
  *(_QWORD *)(*((_QWORD *)v3 + 4) + 32) = a2;
}

uint64_t CLKappaFeaturesAlgLackOfMotion::epochReset(uint64_t this)
{
  *(_WORD *)(this + 144) = 0;
  *(_DWORD *)(this + 148) = 0;
  *(_DWORD *)(this + 152) = 0;
  return this;
}

_QWORD *`virtual thunk to'CLKappaFeaturesAlgLackOfMotion::epochReset(_QWORD *this)
{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*this - 56);
  *((_WORD *)v1 + 72) = 0;
  *((_DWORD *)v1 + 37) = 0;
  *((_DWORD *)v1 + 38) = 0;
  return this;
}

double CLKappaFeaturesAlgLackOfMotion::feedGPS(CLKappaFeaturesAlgLackOfMotion *this, const CSSPUGps_Struct *a2)
{
  unint64_t timestamp;
  double result;
  NSObject *v6;
  double v7;
  double v8;
  _BYTE v9[12];
  __int16 v10;
  double v11;

  timestamp = a2->timestamp;
  if (timestamp <= *((_QWORD *)this + 20))
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_10035C748);
    v6 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_FAULT))
    {
      v7 = (double)a2->timestamp * 0.000001;
      v8 = (double)*((unint64_t *)this + 20) * 0.000001;
      *(_DWORD *)v9 = 134218240;
      *(double *)&v9[4] = v7;
      v10 = 2048;
      v11 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "[LOM] Dropped GPS sample because we already move forward further than that sample (Sample timestamp:%lf)(Current timestamp:%lf)", v9, 0x16u);
    }
  }
  else
  {
    CLKappaFeaturesAlgLackOfMotion::fillGapsAsRequiredUpToTimestamp(this, timestamp);
    *(_QWORD *)v9 = a2->timestamp;
    *(float *)&v9[8] = a2->speedMS;
    LOBYTE(v10) = 1;
    *(float *)&result = CLKappaFeaturesAlgLackOfMotion::processGPS((uint64_t)this, (float *)v9);
  }
  return result;
}

float CLKappaFeaturesAlgLackOfMotion::processGPS(uint64_t a1, float *a2)
{
  float v4;
  BOOL v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _WORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  float result;

  v4 = a2[2];
  v6 = v4 >= 0.0 && *((_BYTE *)a2 + 12) != 0;
  v8 = (unsigned __int16 *)(a1 + 64);
  v7 = *(unsigned __int16 *)(a1 + 64);
  v9 = *(unsigned __int16 *)(a1 + 66);
  v10 = *(unsigned int *)(a1 + 68);
  if (v7 + v9 >= v10)
    v11 = *(unsigned int *)(a1 + 68);
  else
    v11 = 0;
  *(float *)&v8[2 * (v7 + v9 - v11) + 4] = v4;
  if (v10 <= v9)
  {
    v12 = v7 + 1;
    if (v12 < v10)
      LOWORD(v10) = 0;
    *v8 = v12 - v10;
  }
  else
  {
    LOWORD(v9) = v9 + 1;
    *(_WORD *)(a1 + 66) = v9;
  }
  v14 = (_WORD *)(a1 + 112);
  v13 = *(unsigned __int16 *)(a1 + 112);
  v15 = *(unsigned __int16 *)(a1 + 114);
  v16 = *(unsigned int *)(a1 + 116);
  if (v13 + v15 >= v16)
    v17 = *(unsigned int *)(a1 + 116);
  else
    v17 = 0;
  *((_BYTE *)v14 + v13 + v15 - v17 + 8) = v6;
  if (v16 <= v15)
  {
    v18 = v13 + 1;
    if (v18 < v16)
      LOWORD(v16) = 0;
    *v14 = v18 - v16;
  }
  else
  {
    *(_WORD *)(a1 + 114) = v15 + 1;
  }
  if ((_WORD)v9)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      if (!*(_BYTE *)sub_100027E40((unsigned __int16 *)(a1 + 112), v19)
        || *(float *)sub_1000361EC(v8, v19) <= *(float *)(*(_QWORD *)(a1 + 32) + 28))
      {
        ++v20;
      }
      ++v19;
    }
    while ((unsigned __int16)v9 != v19);
  }
  else
  {
    v20 = 0;
  }
  v21 = *(_QWORD *)(a1 + 32);
  if (v6)
  {
    if (v4 >= *(float *)(v21 + 24))
    {
      v22 = *(_DWORD *)(a1 + 152) + 1;
      *(_DWORD *)(a1 + 152) = v22;
    }
    else
    {
      v22 = 0;
      *(_BYTE *)(a1 + 145) = 1;
      *(_DWORD *)(a1 + 152) = 0;
    }
    if (v4 <= *(float *)(v21 + 28))
    {
      v23 = *(_DWORD *)(a1 + 148) + 1;
      *(_DWORD *)(a1 + 148) = v23;
    }
    else
    {
      v23 = 0;
      *(_BYTE *)(a1 + 144) = 1;
      *(_DWORD *)(a1 + 148) = 0;
    }
  }
  else
  {
    v23 = *(_DWORD *)(a1 + 148);
    v22 = *(_DWORD *)(a1 + 152);
  }
  *(_QWORD *)(v21 + 40) = *(_QWORD *)(a1 + 168);
  *(_WORD *)(v21 + 56) = *(_WORD *)(a1 + 144);
  *(_DWORD *)(v21 + 48) = v23;
  *(_DWORD *)(v21 + 52) = v22;
  *(_DWORD *)(v21 + 60) = (unsigned __int16)v9;
  *(_DWORD *)(v21 + 64) = v20;
  v24 = *(_QWORD *)a2;
  *(_QWORD *)(v21 + 72) = *(_QWORD *)a2;
  result = a2[2];
  *(float *)(v21 + 88) = result;
  *(_BYTE *)(v21 + 92) = *((_BYTE *)a2 + 12);
  *(_QWORD *)(a1 + 160) = v24;
  return result;
}

double `virtual thunk to'CLKappaFeaturesAlgLackOfMotion::feedGPS(CLKappaFeaturesAlgLackOfMotion *this, const CSSPUGps_Struct *a2)
{
  return CLKappaFeaturesAlgLackOfMotion::feedGPS((CLKappaFeaturesAlgLackOfMotion *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 96)), a2);
}

void CLKappaFeaturesAlgLackOfMotion::feedFastAccel(CLKappaFeaturesAlgLackOfMotion *this, const CSSPUTriad_Struct *a2)
{
  CLKappaFeaturesAlgLackOfMotion::fillGapsAsRequiredUpToTimestamp(this, a2->timestamp);
}

void `virtual thunk to'CLKappaFeaturesAlgLackOfMotion::feedFastAccel(CLKappaFeaturesAlgLackOfMotion *this, const CSSPUTriad_Struct *a2)
{
  CLKappaFeaturesAlgLackOfMotion::fillGapsAsRequiredUpToTimestamp((CLKappaFeaturesAlgLackOfMotion *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 32)), a2->timestamp);
}

uint64_t CLKappaFeaturesAlgLackOfMotion::feedTrigger(uint64_t this, const TriggerSample *a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(this + 24);
  if (v2 == 2)
  {
    if ((a2[1].rmsSN & 0x100000) != 0)
      return this;
    goto LABEL_6;
  }
  if (v2 != 1 || (a2->path & 0x10) == 0)
LABEL_6:
    *(_QWORD *)(this + 168) = a2->timestamp;
  return this;
}

_QWORD *`virtual thunk to'CLKappaFeaturesAlgLackOfMotion::feedTrigger(_QWORD *this, const TriggerSample *a2)
{
  char *v2;
  int v3;

  v2 = (char *)this + *(_QWORD *)(*this - 88);
  v3 = v2[24];
  if (v3 == 2)
  {
    if ((a2[1].rmsSN & 0x100000) != 0)
      return this;
    goto LABEL_6;
  }
  if (v3 != 1 || (a2->path & 0x10) == 0)
LABEL_6:
    *((_QWORD *)v2 + 21) = a2->timestamp;
  return this;
}

void sub_1002443AC(CLKappaAlgBlock *a1)
{
  *(_QWORD *)a1 = off_10035BC40;
  *((_QWORD *)a1 + 22) = off_10035BEE0;
  *((_QWORD *)a1 + 23) = off_10035C018;
  *((_QWORD *)a1 + 24) = off_10035C0F0;
  sub_10000A718((uint64_t)a1 + 48);
  sub_10000A718((uint64_t)a1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(a1, (uint64_t *)off_10035C140);
}

void sub_100244404(CLKappaAlgBlock *a1)
{
  *(_QWORD *)a1 = off_10035BC40;
  *((_QWORD *)a1 + 22) = off_10035BEE0;
  *((_QWORD *)a1 + 23) = off_10035C018;
  *((_QWORD *)a1 + 24) = off_10035C0F0;
  sub_10000A718((uint64_t)a1 + 48);
  sub_10000A718((uint64_t)a1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(a1, (uint64_t *)off_10035C140);
  operator delete();
}

void sub_100244474(_QWORD *a1)
{
  CLKappaAlgBlock *v1;

  v1 = (CLKappaAlgBlock *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  *(_QWORD *)v1 = off_10035BC40;
  *((_QWORD *)v1 + 22) = off_10035BEE0;
  *((_QWORD *)v1 + 23) = off_10035C018;
  *((_QWORD *)v1 + 24) = off_10035C0F0;
  sub_10000A718((uint64_t)v1 + 48);
  sub_10000A718((uint64_t)v1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10035C140);
}

void sub_1002444D4(_QWORD *a1)
{
  CLKappaAlgBlock *v1;

  v1 = (CLKappaAlgBlock *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  *(_QWORD *)v1 = off_10035BC40;
  *((_QWORD *)v1 + 22) = off_10035BEE0;
  *((_QWORD *)v1 + 23) = off_10035C018;
  *((_QWORD *)v1 + 24) = off_10035C0F0;
  sub_10000A718((uint64_t)v1 + 48);
  sub_10000A718((uint64_t)v1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10035C140);
  operator delete();
}

void sub_100244548(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "Alg");
  v2 = (void *)qword_100387318;
  qword_100387318 = (uint64_t)v1;

}

void sub_100244578(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10035C778;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10024458C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10035C778;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1002445C0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_100244760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  id *v26;
  id *v27;

  objc_destroyWeak(v27);
  objc_destroyWeak(v26);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1002447D8(uint64_t a1, uint64_t *a2)
{
  id WeakRetained;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  v5 = (std::__shared_weak_count *)a2[1];
  v11 = *a2;
  v12 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  objc_msgSend(WeakRetained, "defaultMessageHandler:", &v11);
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

}

void sub_100244870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_10000A718((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_100244888(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "interruptionHandler");

}

void sub_1002448BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100244A04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100244CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_10000A718((uint64_t)&a9);
  sub_10000A718((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_100244F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_10000A718((uint64_t)&a9);
  sub_10000A718((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_1002451C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_10000A718((uint64_t)&a10);
  sub_10000A718((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_10024541C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_10000A718((uint64_t)&a10);
  sub_10000A718((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_100245670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_10000A718((uint64_t)&a10);
  sub_10000A718((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_100245918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_10000A718((uint64_t)&a9);
  sub_10000A718((uint64_t)&a11);

  _Unwind_Resume(a1);
}

void sub_100245C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_10000A718((uint64_t)&a9);
  sub_10000A718((uint64_t)&a11);

  _Unwind_Resume(a1);
}

void sub_100245C74(id a1, shared_ptr<CLConnectionMessage> a2)
{
  CLConnectionMessage **ptr;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSSet *v7;
  NSSet *v8;
  uint64_t DictionaryOfClasses;
  void *v10;
  NSObject *v11;
  uint8_t v12[16];
  uint8_t buf[16];

  ptr = (CLConnectionMessage **)a2.__ptr_;
  if (qword_100387390 != -1)
    dispatch_once(&qword_100387390, &stru_10035C8A0);
  v3 = qword_100387398;
  if (os_log_type_enabled((os_log_t)qword_100387398, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "response", buf, 2u);
  }
  v4 = objc_opt_class(NSArray);
  v5 = objc_opt_class(NSNumber);
  v6 = objc_opt_class(NSString);
  v7 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, v5, v6, objc_opt_class(NSDictionary), 0);
  v8 = (NSSet *)objc_claimAutoreleasedReturnValue(v7);
  if (!*ptr
    || (DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*ptr, v8),
        (v10 = (void *)objc_claimAutoreleasedReturnValue(DictionaryOfClasses)) == 0))
  {
    if (qword_100387390 != -1)
      dispatch_once(&qword_100387390, &stru_10035C8A0);
    v11 = qword_100387398;
    if (os_log_type_enabled((os_log_t)qword_100387398, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "response is nil", v12, 2u);
    }
    v10 = 0;
  }

}

void sub_100245E00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100246070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_10000A718((uint64_t)&a9);
  sub_10000A718((uint64_t)&a11);

  _Unwind_Resume(a1);
}

void sub_100246330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_10000A718((uint64_t)&a9);
  sub_10000A718((uint64_t)&a11);

  _Unwind_Resume(a1);
}

void sub_10024639C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "CSConnection");
  v2 = (void *)qword_100387398;
  qword_100387398 = (uint64_t)v1;

}

_QWORD *sub_1002463CC@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_10024642C(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_100246418(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10024642C(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10035C8D0;
  CLConnectionMessage::CLConnectionMessage(a1 + 3, a2, *a3);
  return a1;
}

void sub_100246468(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10024647C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10035C8D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100246490(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10035C8D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_1002464C4(uint64_t a1)
{
  CLConnectionMessage::~CLConnectionMessage((CLConnectionMessage *)(a1 + 24));
}

_QWORD *sub_1002464D0@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x70uLL);
  result = sub_100246528(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100246514(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100246528(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_10035C8D0;
  a1[1] = 0;
  CLConnectionMessage::CLConnectionMessage(a1 + 3);
  return a1;
}

void sub_100246560(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100246574@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_1002465D4(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1002465C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002465D4(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10035C8D0;
  CLConnectionMessage::CLConnectionMessage(a1 + 3, a2, *a3);
  return a1;
}

void sub_100246610(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void CLKappaDeescalatorQuiescence::CLKappaDeescalatorQuiescence(CLKappaDeescalatorQuiescence *this)
{
  char *v2;

  *(_QWORD *)this = off_100347FF0;
  *((_BYTE *)this + 8) = 0;
  *((_BYTE *)this + 16) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 32) = 1;
  *((_DWORD *)this + 9) = 0;
  *((_BYTE *)this + 40) = 0;
  v2 = (char *)sub_100007088((_QWORD *)this + 6, "none");
  *(_QWORD *)this = off_10035C920;
  *((_BYTE *)this + 72) = 0;
  *((_BYTE *)this + 76) = 0;
  *((_BYTE *)this + 80) = 0;
  *((_BYTE *)this + 84) = 0;
  *((_QWORD *)this + 11) = 0x800000000;
  *((_QWORD *)this + 16) = 0x800000000;
  *((_DWORD *)this + 42) = 2143289344;
  *(_QWORD *)((char *)this + 180) = 0;
  *(_QWORD *)((char *)this + 172) = 0;
  *((_DWORD *)this + 47) = 0;
  if (*((char *)this + 71) < 0)
  {
    *((_QWORD *)this + 7) = 6;
    v2 = (char *)*((_QWORD *)this + 6);
  }
  else
  {
    *((_BYTE *)this + 71) = 6;
  }
  strcpy(v2, "de-Qui");
}

unint64_t CLKappaDeescalatorQuiescence::setupForceControls(CLKappaDeescalatorQuiescence *this)
{
  unint64_t result;

  *((_BYTE *)this + 40) = CLKappaDeescalator::shouldForceNoop(this, "ForceQuiescence");
  result = CLKappaDeescalator::shouldForceDeescalate(this, "ForceQuiescence");
  *((_DWORD *)this + 9) = result;
  return result;
}

uint64_t CLKappaDeescalatorQuiescence::assertReady(CLKappaDeescalatorQuiescence *this, uint64_t a2, const char *a3)
{
  const char *v4;
  const char *v5;

  CLKappaDeescalator::raiseUnless(*((unsigned __int8 *)this + 76), (BOOL)"[SC] quiescence missing pulse threshold", a3);
  CLKappaDeescalator::raiseUnless(*((unsigned __int8 *)this + 84), (BOOL)"[SC] quiescence missing spin threshold", v4);
  return CLKappaDeescalator::raiseUnless(*((unsigned __int16 *)this + 45) == *((unsigned __int16 *)this + 65), (BOOL)"[SC] buffer size mismatch", v5);
}

uint64_t CLKappaDeescalatorQuiescence::prepareForNextEpoch(uint64_t this)
{
  *(_DWORD *)(this + 172) = 0;
  *(_DWORD *)(this + 180) = 0;
  return this;
}

float CLKappaDeescalatorQuiescence::setConfig(uint64_t a1, uint64_t a2)
{
  float result;

  *(_DWORD *)(a1 + 80) = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 84) = 1;
  result = *(float *)(a2 + 4);
  *(float *)(a1 + 72) = result;
  *(_BYTE *)(a1 + 76) = 1;
  return result;
}

float CLKappaDeescalatorQuiescence::updateWithPulseFeatures(uint64_t a1, uint64_t a2)
{
  float result;

  sub_10003606C((unsigned __int16 *)(a1 + 88), (_DWORD *)(a2 + 16));
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 176) = result;
  *(_DWORD *)(a1 + 184) = *(unsigned __int16 *)(a1 + 90);
  return result;
}

float CLKappaDeescalatorQuiescence::updateWithSpinFeatures(uint64_t a1, uint64_t a2)
{
  float result;

  sub_10003606C((unsigned __int16 *)(a1 + 128), (_DWORD *)(a2 + 12));
  result = *(float *)(a2 + 12);
  *(float *)(a1 + 168) = result;
  *(_DWORD *)(a1 + 188) = *(unsigned __int16 *)(a1 + 130);
  return result;
}

float CLKappaDeescalatorQuiescence::getRobustHarmonicMean(unsigned __int16 *a1)
{
  unint64_t v2;
  float v3;
  float v4;
  unint64_t v5;

  if (!a1[1])
    return 0.0;
  v2 = 0;
  v3 = 0.0;
  v4 = 0.0;
  while ((*(_DWORD *)sub_1000361EC(a1, v2) & 0x7FFFFFFFu) <= 0x7F7FFFFF && *(float *)sub_1000361EC(a1, v2) > 0.000001)
  {
    v4 = v4 + (float)(1.0 / *(float *)sub_1000361EC(a1, v2++));
    v5 = a1[1];
    if (v2 >= v5)
      return (float)v5 / v4;
  }
  return v3;
}

uint64_t CLKappaDeescalatorQuiescence::onEvaluateAtMinHoldDuration(CLKappaDeescalatorQuiescence *this)
{
  float RobustHarmonicMean;
  float v3;
  float v4;

  *((float *)this + 45) = CLKappaDeescalatorQuiescence::getRobustHarmonicMean((unsigned __int16 *)this + 44);
  RobustHarmonicMean = CLKappaDeescalatorQuiescence::getRobustHarmonicMean((unsigned __int16 *)this + 64);
  *((float *)this + 43) = RobustHarmonicMean;
  v3 = 0.0;
  v4 = 0.0;
  if (*((_BYTE *)this + 84))
    v4 = *((float *)this + 20);
  if (*((_BYTE *)this + 76))
    v3 = *((float *)this + 18);
  if (RobustHarmonicMean < v4 && *((float *)this + 45) < v3)
    return 1;
  else
    return 4;
}

uint64_t CLKappaDeescalatorQuiescence::onPreviousEpochMadeDecision(uint64_t this)
{
  *(_DWORD *)(this + 88) = 0;
  *(_DWORD *)(this + 128) = 0;
  *(_QWORD *)(this + 184) = 0;
  return this;
}

void sub_100246978(void **this)
{
  *this = off_10035C920;
  CLKappaDeescalator::~CLKappaDeescalator(this);
}

void sub_100246988(void **a1)
{
  *a1 = off_10035C920;
  CLKappaDeescalator::~CLKappaDeescalator(a1);
  operator delete();
}

void CSKappaEpochBuffer::CSKappaEpochBuffer(CSKappaEpochBuffer *this, uint64_t a2, uint64_t a3)
{
  void **v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  void *v32;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  *((_QWORD *)this + 2) = -1;
  *(_OWORD *)((char *)this + 24) = 0u;
  v4 = (void **)((char *)this + 24);
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  v5 = objc_alloc_init((Class)NSMutableArray);
  v6 = *v4;
  *v4 = v5;

  v7 = objc_alloc_init((Class)NSMutableArray);
  v8 = (void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v7;

  v9 = objc_alloc_init((Class)NSMutableArray);
  v10 = (void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v9;

  v11 = objc_alloc_init((Class)NSMutableArray);
  v12 = (void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = v11;

  v13 = objc_alloc_init((Class)NSMutableArray);
  v14 = (void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = v13;

  v15 = objc_alloc_init((Class)NSMutableArray);
  v16 = (void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v15;

  v17 = objc_alloc_init((Class)NSMutableArray);
  v18 = (void *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = v17;

  v19 = objc_alloc_init((Class)NSMutableArray);
  v20 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = v19;

  v21 = objc_alloc_init((Class)NSMutableArray);
  v22 = (void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = v21;

  v23 = objc_alloc_init((Class)NSMutableArray);
  v24 = (void *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = v23;

  v25 = objc_alloc_init((Class)NSMutableArray);
  v26 = (void *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = v25;

  v27 = objc_alloc_init((Class)NSMutableArray);
  v28 = (void *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = v27;

  v29 = objc_alloc_init((Class)NSMutableArray);
  v30 = (void *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = v29;

  v31 = objc_alloc_init((Class)NSMutableArray);
  v32 = (void *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = v31;

}

void sub_100246B2C(_Unwind_Exception *a1)
{
  id *v1;

  _Unwind_Resume(a1);
}

id CSKappaEpochBuffer::feedFastAccel(id *this, const CSSPUAccel800 *a2)
{
  return objc_msgSend(this[3], "addObject:", a2);
}

id CSKappaEpochBuffer::feedHgAccel(id *this, const CSSPUHgAccel *a2)
{
  return objc_msgSend(this[4], "addObject:", a2);
}

id CSKappaEpochBuffer::feedAccel(id *this, const CSSPUAccel *a2)
{
  return objc_msgSend(this[5], "addObject:", a2);
}

id CSKappaEpochBuffer::feedPressure(id *this, const CSSPUPressure *a2)
{
  return objc_msgSend(this[8], "addObject:", a2);
}

id CSKappaEpochBuffer::feedDM(id *this, const CSSPUDM *a2)
{
  return objc_msgSend(this[9], "addObject:", a2);
}

id CSKappaEpochBuffer::feedAudioRms(id *this, const CSSPUSpl *a2)
{
  return objc_msgSend(this[10], "addObject:", a2);
}

id CSKappaEpochBuffer::feedTrustedAudioResult(id *this, const CSSPUTrustedAudioResult *a2)
{
  return objc_msgSend(this[11], "addObject:", a2);
}

id CSKappaEpochBuffer::feedTrigger(id *this, const CSSPUKappaTrigger *a2)
{
  return objc_msgSend(this[12], "addObject:", a2);
}

id CSKappaEpochBuffer::feedGPS(id *this, const CSSPUGps *a2)
{
  return objc_msgSend(this[6], "addObject:", a2);
}

id CSKappaEpochBuffer::feedSteps(id *this, const CSSPUSteps *a2)
{
  return objc_msgSend(this[7], "addObject:", a2);
}

id CSKappaEpochBuffer::feedRoads(id *this, const CSSPURoadInfo *a2)
{
  return objc_msgSend(this[13], "addObject:", a2);
}

id CSKappaEpochBuffer::feedHertzSample(id *this, const CSSPUHertzSample *a2)
{
  return objc_msgSend(this[14], "addObject:", a2);
}

id CSKappaEpochBuffer::feedCompanionStatus(id *this, const CSCompanionStatus *a2)
{
  return objc_msgSend(this[15], "addObject:", a2);
}

id CSKappaEpochBuffer::feedRemoteSample(id *this, const CSRemoteSample *a2)
{
  return objc_msgSend(this[16], "addObject:", a2);
}

id CSKappaEpochBuffer::reset(id *this)
{
  id result;

  objc_msgSend(this[3], "removeAllObjects");
  objc_msgSend(this[4], "removeAllObjects");
  objc_msgSend(this[5], "removeAllObjects");
  objc_msgSend(this[6], "removeAllObjects");
  objc_msgSend(this[7], "removeAllObjects");
  objc_msgSend(this[8], "removeAllObjects");
  objc_msgSend(this[9], "removeAllObjects");
  objc_msgSend(this[10], "removeAllObjects");
  objc_msgSend(this[11], "removeAllObjects");
  objc_msgSend(this[12], "removeAllObjects");
  objc_msgSend(this[13], "removeAllObjects");
  objc_msgSend(this[14], "removeAllObjects");
  objc_msgSend(this[15], "removeAllObjects");
  result = objc_msgSend(this[16], "removeAllObjects");
  this[2] = (id)-1;
  return result;
}

void CSKappaEpochBuffer::advanceStream(CSKappaEpochBuffer *this, NSMutableArray *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  NSMutableArray *v8;

  v8 = a2;
  if (-[NSMutableArray count](v8, "count"))
  {
    v4 = *((_QWORD *)this + 1);
    v3 = *((_QWORD *)this + 2);
    v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray objectAtIndexedSubscript:](v8, "objectAtIndexedSubscript:", 0));
    v6 = v4 * v3;
    while ((unint64_t)objc_msgSend(v5, "timestamp") < v6)
    {
      -[NSMutableArray removeObjectAtIndex:](v8, "removeObjectAtIndex:", 0);
      if (!-[NSMutableArray count](v8, "count"))
        break;
      v7 = objc_claimAutoreleasedReturnValue(-[NSMutableArray objectAtIndexedSubscript:](v8, "objectAtIndexedSubscript:", 0));

      v5 = (void *)v7;
    }

  }
}

void sub_100246D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void CSKappaEpochBuffer::advanceEpoch(CSKappaEpochBuffer *this)
{
  NSMutableArray *v2;

  v2 = (NSMutableArray *)*((_QWORD *)this + 3);
  ++*((_QWORD *)this + 2);
  CSKappaEpochBuffer::advanceStream(this, v2);
  CSKappaEpochBuffer::advanceStream(this, *((NSMutableArray **)this + 4));
  CSKappaEpochBuffer::advanceStream(this, *((NSMutableArray **)this + 5));
  CSKappaEpochBuffer::advanceStream(this, *((NSMutableArray **)this + 6));
  CSKappaEpochBuffer::advanceStream(this, *((NSMutableArray **)this + 7));
  CSKappaEpochBuffer::advanceStream(this, *((NSMutableArray **)this + 8));
  CSKappaEpochBuffer::advanceStream(this, *((NSMutableArray **)this + 9));
  CSKappaEpochBuffer::advanceStream(this, *((NSMutableArray **)this + 10));
  CSKappaEpochBuffer::advanceStream(this, *((NSMutableArray **)this + 11));
  CSKappaEpochBuffer::advanceStream(this, *((NSMutableArray **)this + 12));
  CSKappaEpochBuffer::advanceStream(this, *((NSMutableArray **)this + 13));
  CSKappaEpochBuffer::advanceStream(this, *((NSMutableArray **)this + 14));
  CSKappaEpochBuffer::advanceStream(this, *((NSMutableArray **)this + 15));
  CSKappaEpochBuffer::advanceStream(this, *((NSMutableArray **)this + 16));
}

void CSKappaEpochBuffer::dumpStreamStats(CSKappaEpochBuffer *this, NSMutableArray *a2)
{
  NSMutableArray *v2;
  void *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  id v7;
  id v8;
  _BYTE *v9;
  int v10;
  id v11;
  __int16 v12;
  id v13;
  __int16 v14;
  double v15;

  v2 = a2;
  if (-[NSMutableArray count](v2, "count"))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray objectAtIndex:](v2, "objectAtIndex:", 0));
    if (-[NSMutableArray count](v2, "count") == (id)1)
    {
      if (qword_100387370 != -1)
        dispatch_once(&qword_100387370, &stru_10035C9A8);
      v4 = (id)qword_100387378;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        v10 = 134217984;
        v11 = objc_msgSend(v3, "timestamp");
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%llu", (uint8_t *)&v10, 0xCu);
      }
    }
    else
    {
      v4 = objc_claimAutoreleasedReturnValue(-[NSMutableArray objectAtIndex:](v2, "objectAtIndex:", (char *)-[NSMutableArray count](v2, "count") - 1));
      if (qword_100387370 != -1)
        dispatch_once(&qword_100387370, &stru_10035C9A8);
      v6 = (id)qword_100387378;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        v7 = objc_msgSend(v3, "timestamp");
        v8 = -[NSObject timestamp](v4, "timestamp");
        v9 = -[NSObject timestamp](v4, "timestamp");
        v10 = 134218496;
        v11 = v7;
        v12 = 2048;
        v13 = v8;
        v14 = 2048;
        v15 = (double)(unint64_t)(v9 - (_BYTE *)objc_msgSend(v3, "timestamp")) * 0.000001;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%llu %llu %f", (uint8_t *)&v10, 0x20u);
      }

    }
  }
  else
  {
    if (qword_100387370 != -1)
      dispatch_once(&qword_100387370, &stru_10035C9A8);
    v5 = qword_100387378;
    if (os_log_type_enabled((os_log_t)qword_100387378, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v10) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "insufficient info", (uint8_t *)&v10, 2u);
    }
  }

}

void sub_1002470F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void CSKappaEpochBuffer::dumpStats(CSKappaEpochBuffer *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  void *v18;
  id v19;
  id v20;
  char *v21;
  char *v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  void *v32;
  id v33;
  id v34;
  char *v35;
  char *v36;
  int64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  void *v46;
  id v47;
  id v48;
  char *v49;
  char *v50;
  int64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  void *v60;
  id v61;
  id v62;
  char *v63;
  char *v64;
  int64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  void *v74;
  id v75;
  id v76;
  char *v77;
  char *v78;
  int64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  void *v88;
  id v89;
  id v90;
  char *v91;
  char *v92;
  int64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  void *v102;
  id v103;
  id v104;
  char *v105;
  char *v106;
  int64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  void *v116;
  id v117;
  id v118;
  char *v119;
  char *v120;
  int64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  char *v129;
  void *v130;
  id v131;
  id v132;
  char *v133;
  char *v134;
  int64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  void *v144;
  id v145;
  id v146;
  char *v147;
  char *v148;
  int64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  char *v153;
  char *v154;
  char *v155;
  char *v156;
  char *v157;
  void *v158;
  id v159;
  id v160;
  char *v161;
  char *v162;
  int64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  char *v167;
  char *v168;
  char *v169;
  char *v170;
  char *v171;
  void *v172;
  id v173;
  id v174;
  char *v175;
  char *v176;
  int64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  char *v181;
  char *v182;
  char *v183;
  char *v184;
  char *v185;
  void *v186;
  id v187;
  id v188;
  char *v189;
  char *v190;
  int64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  char *v195;
  char *v196;
  char *v197;
  char *v198;
  char *v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  NSObject *v204;
  uint64_t **v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  NSObject *v210;
  uint64_t **v211;
  _QWORD *v212;
  uint64_t v213;
  int v214;
  uint64_t *v215[3];
  void *__p;
  char *v217;
  unint64_t v218;
  int *v219;
  _BYTE buf[38];
  uint64_t v221[3];
  int v222;
  uint64_t v223[3];
  int v224;
  uint64_t v225[3];
  int v226;
  uint64_t v227[3];
  int v228;
  uint64_t v229[3];
  int v230;
  uint64_t v231[3];
  int v232;
  uint64_t v233[3];
  int v234;
  uint64_t v235[3];
  int v236;
  uint64_t v237[3];
  int v238;
  uint64_t v239[3];
  int v240;
  uint64_t v241[3];
  int v242;
  uint64_t v243[3];
  int v244;
  uint64_t v245[3];

  if (qword_100387370 != -1)
    dispatch_once(&qword_100387370, &stru_10035C9A8);
  v2 = (id)qword_100387378;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v3 = *((_QWORD *)this + 2);
    v4 = *((_QWORD *)this + 1) * v3;
    v5 = *(_QWORD *)this + v4 - 1;
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)&buf[4] = v3;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v4;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&buf[24] = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "epoch buffer stats: current: %llu,  min ts: %llu, max ts: %llu", buf, 0x20u);
  }

  __p = 0;
  v217 = 0;
  v218 = 0;
  if (objc_msgSend(*((id *)this + 3), "count"))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)this + 3), "objectAtIndex:", 0));
    v7 = objc_msgSend(v6, "timestamp");
    v8 = (v217 - (_BYTE *)__p) >> 4;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60)
      sub_10000D5F8();
    v10 = v218 - (_QWORD)__p;
    if ((uint64_t)(v218 - (_QWORD)__p) >> 3 > v9)
      v9 = v10 >> 3;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)sub_10003C6C8((uint64_t)&v218, v11);
    else
      v12 = 0;
    v13 = &v12[16 * v8];
    v14 = &v12[16 * v11];
    *(_QWORD *)v13 = v7;
    v13[8] = 2;
    v15 = v13 + 16;
    v17 = (char *)__p;
    v16 = v217;
    if (v217 != __p)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v16 - 1);
        v13 -= 16;
        v16 -= 16;
      }
      while (v16 != v17);
      v16 = (char *)__p;
    }
    __p = v13;
    v217 = v15;
    v218 = (unint64_t)v14;
    if (v16)
      operator delete(v16);
    v217 = v15;

  }
  if (objc_msgSend(*((id *)this + 4), "count"))
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)this + 4), "objectAtIndex:", 0));
    v19 = objc_msgSend(v18, "timestamp");
    v20 = v19;
    v21 = v217;
    if ((unint64_t)v217 >= v218)
    {
      v23 = (v217 - (_BYTE *)__p) >> 4;
      v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 60)
        sub_10000D5F8();
      v25 = v218 - (_QWORD)__p;
      if ((uint64_t)(v218 - (_QWORD)__p) >> 3 > v24)
        v24 = v25 >> 3;
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
        v26 = 0xFFFFFFFFFFFFFFFLL;
      else
        v26 = v24;
      if (v26)
        v27 = (char *)sub_10003C6C8((uint64_t)&v218, v26);
      else
        v27 = 0;
      v28 = &v27[16 * v23];
      v29 = &v27[16 * v26];
      *(_QWORD *)v28 = v20;
      v28[8] = 3;
      v22 = v28 + 16;
      v31 = (char *)__p;
      v30 = v217;
      if (v217 != __p)
      {
        do
        {
          *((_OWORD *)v28 - 1) = *((_OWORD *)v30 - 1);
          v28 -= 16;
          v30 -= 16;
        }
        while (v30 != v31);
        v30 = (char *)__p;
      }
      __p = v28;
      v217 = v22;
      v218 = (unint64_t)v29;
      if (v30)
        operator delete(v30);
    }
    else
    {
      *(_QWORD *)v217 = v19;
      v21[8] = 3;
      v22 = v21 + 16;
    }
    v217 = v22;

  }
  if (objc_msgSend(*((id *)this + 5), "count"))
  {
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)this + 5), "objectAtIndex:", 0));
    v33 = objc_msgSend(v32, "timestamp");
    v34 = v33;
    v35 = v217;
    if ((unint64_t)v217 >= v218)
    {
      v37 = (v217 - (_BYTE *)__p) >> 4;
      v38 = v37 + 1;
      if ((unint64_t)(v37 + 1) >> 60)
        sub_10000D5F8();
      v39 = v218 - (_QWORD)__p;
      if ((uint64_t)(v218 - (_QWORD)__p) >> 3 > v38)
        v38 = v39 >> 3;
      if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0)
        v40 = 0xFFFFFFFFFFFFFFFLL;
      else
        v40 = v38;
      if (v40)
        v41 = (char *)sub_10003C6C8((uint64_t)&v218, v40);
      else
        v41 = 0;
      v42 = &v41[16 * v37];
      v43 = &v41[16 * v40];
      *(_QWORD *)v42 = v34;
      v42[8] = 1;
      v36 = v42 + 16;
      v45 = (char *)__p;
      v44 = v217;
      if (v217 != __p)
      {
        do
        {
          *((_OWORD *)v42 - 1) = *((_OWORD *)v44 - 1);
          v42 -= 16;
          v44 -= 16;
        }
        while (v44 != v45);
        v44 = (char *)__p;
      }
      __p = v42;
      v217 = v36;
      v218 = (unint64_t)v43;
      if (v44)
        operator delete(v44);
    }
    else
    {
      *(_QWORD *)v217 = v33;
      v35[8] = 1;
      v36 = v35 + 16;
    }
    v217 = v36;

  }
  if (objc_msgSend(*((id *)this + 6), "count"))
  {
    v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)this + 6), "objectAtIndex:", 0));
    v47 = objc_msgSend(v46, "timestamp");
    v48 = v47;
    v49 = v217;
    if ((unint64_t)v217 >= v218)
    {
      v51 = (v217 - (_BYTE *)__p) >> 4;
      v52 = v51 + 1;
      if ((unint64_t)(v51 + 1) >> 60)
        sub_10000D5F8();
      v53 = v218 - (_QWORD)__p;
      if ((uint64_t)(v218 - (_QWORD)__p) >> 3 > v52)
        v52 = v53 >> 3;
      if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF0)
        v54 = 0xFFFFFFFFFFFFFFFLL;
      else
        v54 = v52;
      if (v54)
        v55 = (char *)sub_10003C6C8((uint64_t)&v218, v54);
      else
        v55 = 0;
      v56 = &v55[16 * v51];
      v57 = &v55[16 * v54];
      *(_QWORD *)v56 = v48;
      v56[8] = 4;
      v50 = v56 + 16;
      v59 = (char *)__p;
      v58 = v217;
      if (v217 != __p)
      {
        do
        {
          *((_OWORD *)v56 - 1) = *((_OWORD *)v58 - 1);
          v56 -= 16;
          v58 -= 16;
        }
        while (v58 != v59);
        v58 = (char *)__p;
      }
      __p = v56;
      v217 = v50;
      v218 = (unint64_t)v57;
      if (v58)
        operator delete(v58);
    }
    else
    {
      *(_QWORD *)v217 = v47;
      v49[8] = 4;
      v50 = v49 + 16;
    }
    v217 = v50;

  }
  if (objc_msgSend(*((id *)this + 7), "count"))
  {
    v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)this + 7), "objectAtIndex:", 0));
    v61 = objc_msgSend(v60, "timestamp");
    v62 = v61;
    v63 = v217;
    if ((unint64_t)v217 >= v218)
    {
      v65 = (v217 - (_BYTE *)__p) >> 4;
      v66 = v65 + 1;
      if ((unint64_t)(v65 + 1) >> 60)
        sub_10000D5F8();
      v67 = v218 - (_QWORD)__p;
      if ((uint64_t)(v218 - (_QWORD)__p) >> 3 > v66)
        v66 = v67 >> 3;
      if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF0)
        v68 = 0xFFFFFFFFFFFFFFFLL;
      else
        v68 = v66;
      if (v68)
        v69 = (char *)sub_10003C6C8((uint64_t)&v218, v68);
      else
        v69 = 0;
      v70 = &v69[16 * v65];
      v71 = &v69[16 * v68];
      *(_QWORD *)v70 = v62;
      v70[8] = 5;
      v64 = v70 + 16;
      v73 = (char *)__p;
      v72 = v217;
      if (v217 != __p)
      {
        do
        {
          *((_OWORD *)v70 - 1) = *((_OWORD *)v72 - 1);
          v70 -= 16;
          v72 -= 16;
        }
        while (v72 != v73);
        v72 = (char *)__p;
      }
      __p = v70;
      v217 = v64;
      v218 = (unint64_t)v71;
      if (v72)
        operator delete(v72);
    }
    else
    {
      *(_QWORD *)v217 = v61;
      v63[8] = 5;
      v64 = v63 + 16;
    }
    v217 = v64;

  }
  if (objc_msgSend(*((id *)this + 8), "count"))
  {
    v74 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)this + 8), "objectAtIndex:", 0));
    v75 = objc_msgSend(v74, "timestamp");
    v76 = v75;
    v77 = v217;
    if ((unint64_t)v217 >= v218)
    {
      v79 = (v217 - (_BYTE *)__p) >> 4;
      v80 = v79 + 1;
      if ((unint64_t)(v79 + 1) >> 60)
        sub_10000D5F8();
      v81 = v218 - (_QWORD)__p;
      if ((uint64_t)(v218 - (_QWORD)__p) >> 3 > v80)
        v80 = v81 >> 3;
      if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF0)
        v82 = 0xFFFFFFFFFFFFFFFLL;
      else
        v82 = v80;
      if (v82)
        v83 = (char *)sub_10003C6C8((uint64_t)&v218, v82);
      else
        v83 = 0;
      v84 = &v83[16 * v79];
      v85 = &v83[16 * v82];
      *(_QWORD *)v84 = v76;
      v84[8] = 7;
      v78 = v84 + 16;
      v87 = (char *)__p;
      v86 = v217;
      if (v217 != __p)
      {
        do
        {
          *((_OWORD *)v84 - 1) = *((_OWORD *)v86 - 1);
          v84 -= 16;
          v86 -= 16;
        }
        while (v86 != v87);
        v86 = (char *)__p;
      }
      __p = v84;
      v217 = v78;
      v218 = (unint64_t)v85;
      if (v86)
        operator delete(v86);
    }
    else
    {
      *(_QWORD *)v217 = v75;
      v77[8] = 7;
      v78 = v77 + 16;
    }
    v217 = v78;

  }
  if (objc_msgSend(*((id *)this + 9), "count"))
  {
    v88 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)this + 9), "objectAtIndex:", 0));
    v89 = objc_msgSend(v88, "timestamp");
    v90 = v89;
    v91 = v217;
    if ((unint64_t)v217 >= v218)
    {
      v93 = (v217 - (_BYTE *)__p) >> 4;
      v94 = v93 + 1;
      if ((unint64_t)(v93 + 1) >> 60)
        sub_10000D5F8();
      v95 = v218 - (_QWORD)__p;
      if ((uint64_t)(v218 - (_QWORD)__p) >> 3 > v94)
        v94 = v95 >> 3;
      if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFF0)
        v96 = 0xFFFFFFFFFFFFFFFLL;
      else
        v96 = v94;
      if (v96)
        v97 = (char *)sub_10003C6C8((uint64_t)&v218, v96);
      else
        v97 = 0;
      v98 = &v97[16 * v93];
      v99 = &v97[16 * v96];
      *(_QWORD *)v98 = v90;
      v98[8] = 0;
      v92 = v98 + 16;
      v101 = (char *)__p;
      v100 = v217;
      if (v217 != __p)
      {
        do
        {
          *((_OWORD *)v98 - 1) = *((_OWORD *)v100 - 1);
          v98 -= 16;
          v100 -= 16;
        }
        while (v100 != v101);
        v100 = (char *)__p;
      }
      __p = v98;
      v217 = v92;
      v218 = (unint64_t)v99;
      if (v100)
        operator delete(v100);
    }
    else
    {
      *(_QWORD *)v217 = v89;
      v91[8] = 0;
      v92 = v91 + 16;
    }
    v217 = v92;

  }
  if (objc_msgSend(*((id *)this + 10), "count"))
  {
    v102 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)this + 10), "objectAtIndex:", 0));
    v103 = objc_msgSend(v102, "timestamp");
    v104 = v103;
    v105 = v217;
    if ((unint64_t)v217 >= v218)
    {
      v107 = (v217 - (_BYTE *)__p) >> 4;
      v108 = v107 + 1;
      if ((unint64_t)(v107 + 1) >> 60)
        sub_10000D5F8();
      v109 = v218 - (_QWORD)__p;
      if ((uint64_t)(v218 - (_QWORD)__p) >> 3 > v108)
        v108 = v109 >> 3;
      if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF0)
        v110 = 0xFFFFFFFFFFFFFFFLL;
      else
        v110 = v108;
      if (v110)
        v111 = (char *)sub_10003C6C8((uint64_t)&v218, v110);
      else
        v111 = 0;
      v112 = &v111[16 * v107];
      v113 = &v111[16 * v110];
      *(_QWORD *)v112 = v104;
      v112[8] = 8;
      v106 = v112 + 16;
      v115 = (char *)__p;
      v114 = v217;
      if (v217 != __p)
      {
        do
        {
          *((_OWORD *)v112 - 1) = *((_OWORD *)v114 - 1);
          v112 -= 16;
          v114 -= 16;
        }
        while (v114 != v115);
        v114 = (char *)__p;
      }
      __p = v112;
      v217 = v106;
      v218 = (unint64_t)v113;
      if (v114)
        operator delete(v114);
    }
    else
    {
      *(_QWORD *)v217 = v103;
      v105[8] = 8;
      v106 = v105 + 16;
    }
    v217 = v106;

  }
  if (objc_msgSend(*((id *)this + 11), "count"))
  {
    v116 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)this + 11), "objectAtIndex:", 0));
    v117 = objc_msgSend(v116, "timestamp");
    v118 = v117;
    v119 = v217;
    if ((unint64_t)v217 >= v218)
    {
      v121 = (v217 - (_BYTE *)__p) >> 4;
      v122 = v121 + 1;
      if ((unint64_t)(v121 + 1) >> 60)
        sub_10000D5F8();
      v123 = v218 - (_QWORD)__p;
      if ((uint64_t)(v218 - (_QWORD)__p) >> 3 > v122)
        v122 = v123 >> 3;
      if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFF0)
        v124 = 0xFFFFFFFFFFFFFFFLL;
      else
        v124 = v122;
      if (v124)
        v125 = (char *)sub_10003C6C8((uint64_t)&v218, v124);
      else
        v125 = 0;
      v126 = &v125[16 * v121];
      v127 = &v125[16 * v124];
      *(_QWORD *)v126 = v118;
      v126[8] = 8;
      v120 = v126 + 16;
      v129 = (char *)__p;
      v128 = v217;
      if (v217 != __p)
      {
        do
        {
          *((_OWORD *)v126 - 1) = *((_OWORD *)v128 - 1);
          v126 -= 16;
          v128 -= 16;
        }
        while (v128 != v129);
        v128 = (char *)__p;
      }
      __p = v126;
      v217 = v120;
      v218 = (unint64_t)v127;
      if (v128)
        operator delete(v128);
    }
    else
    {
      *(_QWORD *)v217 = v117;
      v119[8] = 8;
      v120 = v119 + 16;
    }
    v217 = v120;

  }
  if (objc_msgSend(*((id *)this + 12), "count"))
  {
    v130 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)this + 12), "objectAtIndex:", 0));
    v131 = objc_msgSend(v130, "timestamp");
    v132 = v131;
    v133 = v217;
    if ((unint64_t)v217 >= v218)
    {
      v135 = (v217 - (_BYTE *)__p) >> 4;
      v136 = v135 + 1;
      if ((unint64_t)(v135 + 1) >> 60)
        sub_10000D5F8();
      v137 = v218 - (_QWORD)__p;
      if ((uint64_t)(v218 - (_QWORD)__p) >> 3 > v136)
        v136 = v137 >> 3;
      if ((unint64_t)v137 >= 0x7FFFFFFFFFFFFFF0)
        v138 = 0xFFFFFFFFFFFFFFFLL;
      else
        v138 = v136;
      if (v138)
        v139 = (char *)sub_10003C6C8((uint64_t)&v218, v138);
      else
        v139 = 0;
      v140 = &v139[16 * v135];
      v141 = &v139[16 * v138];
      *(_QWORD *)v140 = v132;
      v140[8] = 6;
      v134 = v140 + 16;
      v143 = (char *)__p;
      v142 = v217;
      if (v217 != __p)
      {
        do
        {
          *((_OWORD *)v140 - 1) = *((_OWORD *)v142 - 1);
          v140 -= 16;
          v142 -= 16;
        }
        while (v142 != v143);
        v142 = (char *)__p;
      }
      __p = v140;
      v217 = v134;
      v218 = (unint64_t)v141;
      if (v142)
        operator delete(v142);
    }
    else
    {
      *(_QWORD *)v217 = v131;
      v133[8] = 6;
      v134 = v133 + 16;
    }
    v217 = v134;

  }
  if (objc_msgSend(*((id *)this + 13), "count"))
  {
    v144 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)this + 13), "objectAtIndex:", 0));
    v145 = objc_msgSend(v144, "timestamp");
    v146 = v145;
    v147 = v217;
    if ((unint64_t)v217 >= v218)
    {
      v149 = (v217 - (_BYTE *)__p) >> 4;
      v150 = v149 + 1;
      if ((unint64_t)(v149 + 1) >> 60)
        sub_10000D5F8();
      v151 = v218 - (_QWORD)__p;
      if ((uint64_t)(v218 - (_QWORD)__p) >> 3 > v150)
        v150 = v151 >> 3;
      if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFF0)
        v152 = 0xFFFFFFFFFFFFFFFLL;
      else
        v152 = v150;
      if (v152)
        v153 = (char *)sub_10003C6C8((uint64_t)&v218, v152);
      else
        v153 = 0;
      v154 = &v153[16 * v149];
      v155 = &v153[16 * v152];
      *(_QWORD *)v154 = v146;
      v154[8] = 10;
      v148 = v154 + 16;
      v157 = (char *)__p;
      v156 = v217;
      if (v217 != __p)
      {
        do
        {
          *((_OWORD *)v154 - 1) = *((_OWORD *)v156 - 1);
          v154 -= 16;
          v156 -= 16;
        }
        while (v156 != v157);
        v156 = (char *)__p;
      }
      __p = v154;
      v217 = v148;
      v218 = (unint64_t)v155;
      if (v156)
        operator delete(v156);
    }
    else
    {
      *(_QWORD *)v217 = v145;
      v147[8] = 10;
      v148 = v147 + 16;
    }
    v217 = v148;

  }
  if (objc_msgSend(*((id *)this + 14), "count"))
  {
    v158 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)this + 14), "objectAtIndex:", 0));
    v159 = objc_msgSend(v158, "timestamp");
    v160 = v159;
    v161 = v217;
    if ((unint64_t)v217 >= v218)
    {
      v163 = (v217 - (_BYTE *)__p) >> 4;
      v164 = v163 + 1;
      if ((unint64_t)(v163 + 1) >> 60)
        sub_10000D5F8();
      v165 = v218 - (_QWORD)__p;
      if ((uint64_t)(v218 - (_QWORD)__p) >> 3 > v164)
        v164 = v165 >> 3;
      if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFF0)
        v166 = 0xFFFFFFFFFFFFFFFLL;
      else
        v166 = v164;
      if (v166)
        v167 = (char *)sub_10003C6C8((uint64_t)&v218, v166);
      else
        v167 = 0;
      v168 = &v167[16 * v163];
      v169 = &v167[16 * v166];
      *(_QWORD *)v168 = v160;
      v168[8] = 11;
      v162 = v168 + 16;
      v171 = (char *)__p;
      v170 = v217;
      if (v217 != __p)
      {
        do
        {
          *((_OWORD *)v168 - 1) = *((_OWORD *)v170 - 1);
          v168 -= 16;
          v170 -= 16;
        }
        while (v170 != v171);
        v170 = (char *)__p;
      }
      __p = v168;
      v217 = v162;
      v218 = (unint64_t)v169;
      if (v170)
        operator delete(v170);
    }
    else
    {
      *(_QWORD *)v217 = v159;
      v161[8] = 11;
      v162 = v161 + 16;
    }
    v217 = v162;

  }
  if (objc_msgSend(*((id *)this + 15), "count"))
  {
    v172 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)this + 15), "objectAtIndex:", 0));
    v173 = objc_msgSend(v172, "timestamp");
    v174 = v173;
    v175 = v217;
    if ((unint64_t)v217 >= v218)
    {
      v177 = (v217 - (_BYTE *)__p) >> 4;
      v178 = v177 + 1;
      if ((unint64_t)(v177 + 1) >> 60)
        sub_10000D5F8();
      v179 = v218 - (_QWORD)__p;
      if ((uint64_t)(v218 - (_QWORD)__p) >> 3 > v178)
        v178 = v179 >> 3;
      if ((unint64_t)v179 >= 0x7FFFFFFFFFFFFFF0)
        v180 = 0xFFFFFFFFFFFFFFFLL;
      else
        v180 = v178;
      if (v180)
        v181 = (char *)sub_10003C6C8((uint64_t)&v218, v180);
      else
        v181 = 0;
      v182 = &v181[16 * v177];
      v183 = &v181[16 * v180];
      *(_QWORD *)v182 = v174;
      v182[8] = 12;
      v176 = v182 + 16;
      v185 = (char *)__p;
      v184 = v217;
      if (v217 != __p)
      {
        do
        {
          *((_OWORD *)v182 - 1) = *((_OWORD *)v184 - 1);
          v182 -= 16;
          v184 -= 16;
        }
        while (v184 != v185);
        v184 = (char *)__p;
      }
      __p = v182;
      v217 = v176;
      v218 = (unint64_t)v183;
      if (v184)
        operator delete(v184);
    }
    else
    {
      *(_QWORD *)v217 = v173;
      v175[8] = 12;
      v176 = v175 + 16;
    }
    v217 = v176;

  }
  if (objc_msgSend(*((id *)this + 16), "count"))
  {
    v186 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)this + 16), "objectAtIndex:", 0));
    v187 = objc_msgSend(v186, "timestamp");
    v188 = v187;
    v189 = v217;
    if ((unint64_t)v217 >= v218)
    {
      v191 = (v217 - (_BYTE *)__p) >> 4;
      v192 = v191 + 1;
      if ((unint64_t)(v191 + 1) >> 60)
        sub_10000D5F8();
      v193 = v218 - (_QWORD)__p;
      if ((uint64_t)(v218 - (_QWORD)__p) >> 3 > v192)
        v192 = v193 >> 3;
      if ((unint64_t)v193 >= 0x7FFFFFFFFFFFFFF0)
        v194 = 0xFFFFFFFFFFFFFFFLL;
      else
        v194 = v192;
      if (v194)
        v195 = (char *)sub_10003C6C8((uint64_t)&v218, v194);
      else
        v195 = 0;
      v196 = &v195[16 * v191];
      v197 = &v195[16 * v194];
      *(_QWORD *)v196 = v188;
      v196[8] = 13;
      v190 = v196 + 16;
      v199 = (char *)__p;
      v198 = v217;
      if (v217 != __p)
      {
        do
        {
          *((_OWORD *)v196 - 1) = *((_OWORD *)v198 - 1);
          v196 -= 16;
          v198 -= 16;
        }
        while (v198 != v199);
        v198 = (char *)__p;
      }
      __p = v196;
      v217 = v190;
      v218 = (unint64_t)v197;
      if (v198)
        operator delete(v198);
    }
    else
    {
      *(_QWORD *)v217 = v187;
      v189[8] = 13;
      v190 = v189 + 16;
    }
    v217 = v190;

  }
  *(_DWORD *)buf = 2;
  sub_100007088(&buf[8], "accel800");
  *(_DWORD *)&buf[32] = 3;
  sub_100007088(v221, "hgacc");
  v222 = 1;
  sub_100007088(v223, "accel");
  v224 = 0;
  sub_100007088(v225, "dm");
  v226 = 4;
  sub_100007088(v227, "gps");
  v228 = 5;
  sub_100007088(v229, "steps");
  v230 = 6;
  sub_100007088(v231, "trigger");
  v232 = 7;
  sub_100007088(v233, "pressure");
  v234 = 8;
  sub_100007088(v235, "audio");
  v236 = 9;
  sub_100007088(v237, "trustedaudioresult");
  v238 = 10;
  sub_100007088(v239, "roads");
  v240 = 11;
  sub_100007088(v241, "hertz");
  v242 = 12;
  sub_100007088(v243, "companionstatus");
  v244 = 13;
  sub_100007088(v245, "remotesample");
  sub_100249AA0((uint64_t)v215, (int *)buf, 14);
  v200 = 448;
  do
  {
    if ((char)buf[v200 - 1] < 0)
      operator delete(*(void **)((char *)&v218 + v200));
    v200 -= 32;
  }
  while (v200);
  v201 = 126 - 2 * __clz((v217 - (_BYTE *)__p) >> 4);
  *(_QWORD *)buf = sub_10024865C;
  if (v217 == __p)
    v202 = 0;
  else
    v202 = v201;
  sub_100248B2C((char *)__p, v217, (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))buf, v202, 1);
  v203 = *(_QWORD *)__p;
  if (qword_100387370 != -1)
    dispatch_once(&qword_100387370, &stru_10035C9A8);
  v204 = (id)qword_100387378;
  if (os_log_type_enabled(v204, OS_LOG_TYPE_DEBUG))
  {
    v214 = *((unsigned __int8 *)__p + 8);
    v219 = &v214;
    v205 = sub_100249E88(v215, &v214, (uint64_t)&std::piecewise_construct, &v219);
    v206 = v205 + 5;
    if (*((char *)v205 + 63) < 0)
      v206 = (_QWORD *)*v206;
    v207 = *(_QWORD *)__p;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v206;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v207;
    _os_log_impl((void *)&_mh_execute_header, v204, OS_LOG_TYPE_DEBUG, "0 %s %llu\n", buf, 0x16u);
  }

  if ((unint64_t)(v217 - (_BYTE *)__p) >= 0x11)
  {
    v208 = 0;
    v209 = 1;
    do
    {
      if (qword_100387370 != -1)
        dispatch_once(&qword_100387370, &stru_10035C9A8);
      v210 = (id)qword_100387378;
      if (os_log_type_enabled(v210, OS_LOG_TYPE_DEBUG))
      {
        v214 = *((unsigned __int8 *)__p + v208 + 24);
        v219 = &v214;
        v211 = sub_100249E88(v215, &v214, (uint64_t)&std::piecewise_construct, &v219);
        v212 = v211 + 5;
        if (*((char *)v211 + 63) < 0)
          v212 = (_QWORD *)*v212;
        v213 = *(_QWORD *)((char *)__p + v208 + 16);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v209;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = v212;
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)&buf[20] = v213;
        *(_WORD *)&buf[28] = 2048;
        *(double *)&buf[30] = (float)((float)(unint64_t)(v213 - v203) / 1000000.0);
        _os_log_impl((void *)&_mh_execute_header, v210, OS_LOG_TYPE_DEBUG, "%d %s %llu %f\n", buf, 0x26u);
      }

      ++v209;
      v208 += 16;
    }
    while (v209 < (v217 - (_BYTE *)__p) >> 4);
  }
  sub_100249E38((uint64_t)v215, (char *)v215[1]);
  if (__p)
  {
    v217 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1002484A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char *a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  void *v21;

  sub_100249E38((uint64_t)&a13, a14);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL sub_10024865C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return a1 < a3;
}

double CSKappaEpochBufferIterator::CSKappaEpochBufferIterator(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  double result;

  v2 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  *(_QWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  double result;

  v2 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  *(_QWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

id CSKappaEpochBufferIterator::getNextSample(CSKappaEpochBufferIterator *this)
{
  void *v2;
  int v3;
  void *v4;
  int *v5;
  int *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  id *v10;
  int *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  int *v28;
  int *v30;
  int *v31;
  int *v32;
  int *v33;
  int *v34;
  int *v35;
  int *v36;
  int *v37;
  int *v38;
  int *v39;
  int *v40;
  int *v41;

  v2 = 0;
  v3 = 0;
  v4 = 0;
  v40 = (int *)((char *)this + 64);
  v41 = (int *)((char *)this + 68);
  v38 = (int *)((char *)this + 56);
  v39 = (int *)((char *)this + 60);
  v36 = (int *)((char *)this + 44);
  v37 = (int *)((char *)this + 48);
  v34 = (int *)((char *)this + 52);
  v35 = (int *)((char *)this + 36);
  v32 = (int *)((char *)this + 28);
  v33 = (int *)((char *)this + 32);
  v30 = (int *)((char *)this + 20);
  v31 = (int *)((char *)this + 40);
  v5 = (int *)((char *)this + 24);
  v6 = (int *)((char *)this + 16);
  v7 = -1;
  v8 = -1;
  do
  {
    switch(v3)
    {
      case 0:
        v9 = *((int *)this + 10);
        if ((unint64_t)objc_msgSend(*(id *)(*(_QWORD *)this + 72), "count") > v9)
        {
          v10 = (id *)(*(_QWORD *)this + 72);
          v11 = v31;
          goto LABEL_31;
        }
        break;
      case 1:
        v12 = *((int *)this + 6);
        if ((unint64_t)objc_msgSend(*(id *)(*(_QWORD *)this + 40), "count") > v12)
        {
          v10 = (id *)(*(_QWORD *)this + 40);
          v11 = v5;
          goto LABEL_31;
        }
        break;
      case 2:
        v13 = *((int *)this + 4);
        if ((unint64_t)objc_msgSend(*(id *)(*(_QWORD *)this + 24), "count") > v13)
        {
          v10 = (id *)(*(_QWORD *)this + 24);
          v11 = v6;
          goto LABEL_31;
        }
        break;
      case 3:
        v14 = *((int *)this + 5);
        if ((unint64_t)objc_msgSend(*(id *)(*(_QWORD *)this + 32), "count") > v14)
        {
          v10 = (id *)(*(_QWORD *)this + 32);
          v11 = v30;
          goto LABEL_31;
        }
        break;
      case 4:
        v15 = *((int *)this + 7);
        if ((unint64_t)objc_msgSend(*(id *)(*(_QWORD *)this + 48), "count") > v15)
        {
          v10 = (id *)(*(_QWORD *)this + 48);
          v11 = v32;
          goto LABEL_31;
        }
        break;
      case 5:
        v16 = *((int *)this + 8);
        if ((unint64_t)objc_msgSend(*(id *)(*(_QWORD *)this + 56), "count") > v16)
        {
          v10 = (id *)(*(_QWORD *)this + 56);
          v11 = v33;
          goto LABEL_31;
        }
        break;
      case 6:
        v17 = *((int *)this + 13);
        if ((unint64_t)objc_msgSend(*(id *)(*(_QWORD *)this + 96), "count") > v17)
        {
          v10 = (id *)(*(_QWORD *)this + 96);
          v11 = v34;
          goto LABEL_31;
        }
        break;
      case 7:
        v18 = *((int *)this + 9);
        if ((unint64_t)objc_msgSend(*(id *)(*(_QWORD *)this + 64), "count") > v18)
        {
          v10 = (id *)(*(_QWORD *)this + 64);
          v11 = v35;
          goto LABEL_31;
        }
        break;
      case 8:
        v19 = *((int *)this + 11);
        if ((unint64_t)objc_msgSend(*(id *)(*(_QWORD *)this + 80), "count") > v19)
        {
          v10 = (id *)(*(_QWORD *)this + 80);
          v11 = v36;
          goto LABEL_31;
        }
        break;
      case 9:
        v20 = *((int *)this + 12);
        if ((unint64_t)objc_msgSend(*(id *)(*(_QWORD *)this + 88), "count") > v20)
        {
          v10 = (id *)(*(_QWORD *)this + 88);
          v11 = v37;
          goto LABEL_31;
        }
        break;
      case 10:
        v21 = *((int *)this + 14);
        if ((unint64_t)objc_msgSend(*(id *)(*(_QWORD *)this + 104), "count") > v21)
        {
          v10 = (id *)(*(_QWORD *)this + 104);
          v11 = v38;
          goto LABEL_31;
        }
        break;
      case 11:
        v22 = *((int *)this + 15);
        if ((unint64_t)objc_msgSend(*(id *)(*(_QWORD *)this + 112), "count") > v22)
        {
          v10 = (id *)(*(_QWORD *)this + 112);
          v11 = v39;
          goto LABEL_31;
        }
        break;
      case 12:
        v23 = *((int *)this + 16);
        if ((unint64_t)objc_msgSend(*(id *)(*(_QWORD *)this + 120), "count") > v23)
        {
          v10 = (id *)(*(_QWORD *)this + 120);
          v11 = v40;
          goto LABEL_31;
        }
        break;
      case 13:
        v24 = *((int *)this + 17);
        if ((unint64_t)objc_msgSend(*(id *)(*(_QWORD *)this + 128), "count") > v24)
        {
          v10 = (id *)(*(_QWORD *)this + 128);
          v11 = v41;
LABEL_31:
          v25 = objc_claimAutoreleasedReturnValue(objc_msgSend(*v10, "objectAtIndexedSubscript:", *v11, v30));

          v2 = (void *)v25;
        }
        break;
      default:
        break;
    }
    if (v2 && (unint64_t)objc_msgSend(v2, "timestamp") < v7)
    {
      v7 = (unint64_t)objc_msgSend(v2, "timestamp");
      v26 = v2;

      v4 = v26;
      v8 = v3;
    }
    ++v3;
  }
  while (v3 != 14);
  v27 = 0;
  switch(v8)
  {
    case -1:
      goto LABEL_53;
    case 0:
      v28 = v31;
      goto LABEL_51;
    case 1:
      ++*v5;
      break;
    case 2:
      ++*v6;
      break;
    case 3:
      v28 = v30;
      goto LABEL_51;
    case 4:
      v28 = v32;
      goto LABEL_51;
    case 5:
      v28 = v33;
      goto LABEL_51;
    case 6:
      v28 = v34;
      goto LABEL_51;
    case 7:
      v28 = v35;
      goto LABEL_51;
    case 8:
      v28 = v36;
      goto LABEL_51;
    case 9:
      v28 = v37;
      goto LABEL_51;
    case 10:
      v28 = v38;
      goto LABEL_51;
    case 11:
      v28 = v39;
      goto LABEL_51;
    case 12:
      v28 = v40;
      goto LABEL_51;
    case 13:
      v28 = v41;
LABEL_51:
      ++*v28;
      break;
    default:
      break;
  }
  v27 = v4;
LABEL_53:

  return v27;
}

void sub_100248AE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100248AFC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "Epoch");
  v2 = (void *)qword_100387378;
  qword_100387378 = (uint64_t)v1;

}

void sub_100248B2C(char *a1, char *a2, uint64_t (**a3)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4, char a5)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  __int128 v23;

LABEL_1:
  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = a2 - v9;
    v13 = (a2 - v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v19 = *((_QWORD *)a2 - 2);
        v20 = *((_QWORD *)a2 - 1);
        v21 = a2 - 16;
        if ((*a3)(v19, v20, *(_QWORD *)v9, *((_QWORD *)v9 + 1)))
        {
          v23 = *(_OWORD *)v9;
          *(_OWORD *)v9 = *(_OWORD *)v21;
          *(_OWORD *)v21 = v23;
        }
        return;
      case 3uLL:
        sub_100248FF8(v9, (_QWORD *)v9 + 2, (_QWORD *)a2 - 2, a3);
        return;
      case 4uLL:
        sub_100249510(v9, (_QWORD *)v9 + 2, (_QWORD *)v9 + 4, (_QWORD *)a2 - 2, a3);
        return;
      case 5uLL:
        sub_1002495C8(v9, (_QWORD *)v9 + 2, (_QWORD *)v9 + 4, (_QWORD *)v9 + 6, (_QWORD *)a2 - 2, a3);
        return;
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            sub_100248E80((uint64_t)v9, a2, a3);
          else
            sub_100248F50((uint64_t)v9, a2, a3);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[16 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            sub_100248FF8(&v9[16 * (v13 >> 1)], v9, (_QWORD *)a2 - 2, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            sub_100248FF8(v9, &v9[16 * (v13 >> 1)], (_QWORD *)a2 - 2, a3);
            sub_100248FF8((_QWORD *)v9 + 2, (_QWORD *)v15 - 2, (_QWORD *)a2 - 4, a3);
            sub_100248FF8((_QWORD *)v9 + 4, &v9[16 * v14 + 16], (_QWORD *)a2 - 6, a3);
            sub_100248FF8((_QWORD *)v15 - 2, v15, &v9[16 * v14 + 16], a3);
            v22 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *(_OWORD *)v15 = v22;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (((*a3)(*((_QWORD *)v9 - 2), *((_QWORD *)v9 - 1), *(_QWORD *)v9, *((_QWORD *)v9 + 1)) & 1) == 0)
          {
            v9 = (char *)sub_1002490F4(v9, a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v16 = (char *)sub_100249228((uint64_t *)v9, (uint64_t *)a2, a3);
          if ((v17 & 1) == 0)
            goto LABEL_14;
          v18 = sub_100249358(v9, v16, a3);
          v9 = v16 + 16;
          if (!sub_100249358(v16 + 16, a2, a3))
          {
            v10 = v11 + 1;
            if (v18)
              continue;
LABEL_14:
            sub_100248B2C(a1, v16, a3, -v11, a5 & 1);
            v9 = v16 + 16;
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v16;
          if (v18)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          sub_1002496A8(v9, a2, a2, a3);
        return;
    }
  }
}

uint64_t sub_100248E80(uint64_t result, _QWORD *a2, uint64_t (**a3)(uint64_t, uint64_t, _QWORD, _QWORD))
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  if ((_QWORD *)result != a2)
  {
    v4 = (_QWORD *)result;
    v5 = (_QWORD *)(result + 16);
    if ((_QWORD *)(result + 16) != a2)
    {
      v7 = 0;
      v8 = (_QWORD *)result;
      do
      {
        v9 = v5;
        result = (*a3)(v8[2], v8[3], *v8, v8[1]);
        if ((_DWORD)result)
        {
          v10 = *v9;
          v11 = v8[3];
          v12 = v7;
          while (1)
          {
            *(_OWORD *)((char *)v4 + v12 + 16) = *(_OWORD *)((char *)v4 + v12);
            if (!v12)
              break;
            result = (*a3)(v10, v11, *(_QWORD *)((char *)v4 + v12 - 16), *(_QWORD *)((char *)v4 + v12 - 8));
            v12 -= 16;
            if ((result & 1) == 0)
            {
              v13 = (_QWORD *)((char *)v4 + v12 + 16);
              goto LABEL_10;
            }
          }
          v13 = v4;
LABEL_10:
          *v13 = v10;
          v13[1] = v11;
        }
        v5 = v9 + 2;
        v7 += 16;
        v8 = v9;
      }
      while (v9 + 2 != a2);
    }
  }
  return result;
}

uint64_t sub_100248F50(uint64_t result, _QWORD *a2, uint64_t (**a3)(uint64_t, uint64_t, _QWORD, _QWORD))
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _QWORD *v11;

  if ((_QWORD *)result != a2)
  {
    v4 = (_QWORD *)result;
    v5 = (_QWORD *)(result + 16);
    if ((_QWORD *)(result + 16) != a2)
    {
      do
      {
        v7 = v5;
        result = (*a3)(v4[2], v4[3], *v4, v4[1]);
        if ((_DWORD)result)
        {
          v8 = *v7;
          v9 = v4[3];
          v10 = v7;
          do
          {
            v11 = v10 - 1;
            *v10 = *(v10 - 1);
            result = (*a3)(v8, v9, *((_QWORD *)v10 - 4), *((_QWORD *)v10 - 3));
            v10 = v11;
          }
          while ((result & 1) != 0);
          *v11 = v8;
          v11[1] = v9;
        }
        v5 = v7 + 2;
        v4 = v7;
      }
      while (v7 + 2 != a2);
    }
  }
  return result;
}

uint64_t sub_100248FF8(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t (**a4)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  char v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v8 = (*a4)(*a2, a2[1], *a1, a1[1]);
  result = (*a4)(*a3, a3[1], *a2, a2[1]);
  if ((v8 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    v11 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v11;
    if (!(*a4)(*a2, a2[1], *a1, a1[1]))
      return 1;
    v12 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v12;
    return 2;
  }
  if (!(_DWORD)result)
  {
    v13 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v13;
    if (!(*a4)(*a3, a3[1], *a2, a2[1]))
      return 1;
    v14 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v14;
    return 2;
  }
  v10 = *(_OWORD *)a1;
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(_OWORD *)a3 = v10;
  return 1;
}

_QWORD *sub_1002490F4(_QWORD *a1, _OWORD *a2, uint64_t (**a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  _OWORD *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;

  v4 = a2;
  v6 = *a1;
  v7 = a1[1];
  if (((*a3)(*a1, v7, *((_QWORD *)a2 - 2), *((_QWORD *)a2 - 1)) & 1) != 0)
  {
    v8 = a1;
    do
    {
      v9 = v8[2];
      v10 = v8[3];
      v8 += 2;
    }
    while (((*a3)(v6, v7, v9, v10) & 1) == 0);
  }
  else
  {
    v11 = a1 + 2;
    do
    {
      v8 = v11;
      if (v11 >= (_QWORD *)v4)
        break;
      v12 = (*a3)(v6, v7, *v11, v11[1]);
      v11 = v8 + 2;
    }
    while (!v12);
  }
  if (v8 < (_QWORD *)v4)
  {
    do
    {
      v13 = *((_QWORD *)v4 - 2);
      v14 = *((_QWORD *)v4-- - 1);
    }
    while (((*a3)(v6, v7, v13, v14) & 1) != 0);
  }
  while (v8 < (_QWORD *)v4)
  {
    v20 = *(_OWORD *)v8;
    *(_OWORD *)v8 = *v4;
    *v4 = v20;
    do
    {
      v15 = v8[2];
      v16 = v8[3];
      v8 += 2;
    }
    while (!(*a3)(v6, v7, v15, v16));
    do
    {
      v17 = *((_QWORD *)v4 - 2);
      v18 = *((_QWORD *)v4-- - 1);
    }
    while (((*a3)(v6, v7, v17, v18) & 1) != 0);
  }
  if (v8 - 2 != a1)
    *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
  *(v8 - 2) = v6;
  *(v8 - 1) = v7;
  return v8;
}

uint64_t *sub_100249228(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *result;

  v6 = 0;
  v7 = *a1;
  v8 = a1[1];
  do
  {
    v9 = (*a3)(a1[v6 + 2], a1[v6 + 3], v7, v8);
    v6 += 2;
  }
  while ((v9 & 1) != 0);
  v10 = &a1[v6];
  if (v6 == 2)
  {
    do
    {
      if (v10 >= a2)
        break;
      v13 = *(a2 - 2);
      v14 = *(a2 - 1);
      a2 -= 2;
    }
    while (((*a3)(v13, v14, v7, v8) & 1) == 0);
  }
  else
  {
    do
    {
      v11 = *(a2 - 2);
      v12 = *(a2 - 1);
      a2 -= 2;
    }
    while (!(*a3)(v11, v12, v7, v8));
  }
  v15 = &a1[v6];
  if (v10 < a2)
  {
    v16 = a2;
    do
    {
      v17 = *(_OWORD *)v15;
      *(_OWORD *)v15 = *(_OWORD *)v16;
      *(_OWORD *)v16 = v17;
      do
      {
        v18 = v15[2];
        v19 = v15[3];
        v15 += 2;
      }
      while (((*a3)(v18, v19, v7, v8) & 1) != 0);
      do
      {
        v20 = *(v16 - 2);
        v21 = *(v16 - 1);
        v16 -= 2;
      }
      while (!(*a3)(v20, v21, v7, v8));
    }
    while (v15 < v16);
  }
  result = v15 - 2;
  if (v15 - 2 != a1)
    *(_OWORD *)a1 = *(_OWORD *)result;
  *(v15 - 2) = v7;
  *(v15 - 1) = v8;
  return result;
}

BOOL sub_100249358(char *a1, char *a2, uint64_t (**a3)(uint64_t, uint64_t, _QWORD, _QWORD))
{
  uint64_t v6;
  _BOOL8 result;
  char *v8;
  __int128 v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;

  v6 = (a2 - a1) >> 4;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 16;
      if ((*a3)(*((_QWORD *)a2 - 2), *((_QWORD *)a2 - 1), *(_QWORD *)a1, *((_QWORD *)a1 + 1)))
      {
        v9 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(_OWORD *)v8 = v9;
      }
      return 1;
    case 3:
      sub_100248FF8(a1, (_QWORD *)a1 + 2, (_QWORD *)a2 - 2, a3);
      return 1;
    case 4:
      sub_100249510(a1, (_QWORD *)a1 + 2, (_QWORD *)a1 + 4, (_QWORD *)a2 - 2, a3);
      return 1;
    case 5:
      sub_1002495C8(a1, (_QWORD *)a1 + 2, (_QWORD *)a1 + 4, (_QWORD *)a1 + 6, (_QWORD *)a2 - 2, a3);
      return 1;
    default:
      v10 = a1 + 32;
      sub_100248FF8(a1, (_QWORD *)a1 + 2, (_QWORD *)a1 + 4, a3);
      v11 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(*(_QWORD *)v11, *((_QWORD *)v11 + 1), *(_QWORD *)v10, *((_QWORD *)v10 + 1)))
    {
      v14 = *(_QWORD *)v11;
      v15 = *((_QWORD *)v11 + 1);
      v16 = v12;
      while (1)
      {
        v17 = &a1[v16];
        *(_OWORD *)&a1[v16 + 48] = *(_OWORD *)&a1[v16 + 32];
        if (v16 == -32)
          break;
        v16 -= 16;
        if (((*a3)(v14, v15, *((_QWORD *)v17 + 2), *((_QWORD *)v17 + 3)) & 1) == 0)
        {
          v18 = &a1[v16 + 48];
          goto LABEL_12;
        }
      }
      v18 = a1;
LABEL_12:
      *(_QWORD *)v18 = v14;
      *((_QWORD *)v18 + 1) = v15;
      if (++v13 == 8)
        return v11 + 16 == a2;
    }
    v10 = v11;
    v12 += 16;
    v11 += 16;
    if (v11 == a2)
      return 1;
  }
}

__n128 sub_100249510(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t (**a5)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  __n128 result;
  __int128 v11;
  __int128 v12;

  sub_100248FF8(a1, a2, a3, a5);
  if ((*a5)(*a4, a4[1], *a3, a3[1]))
  {
    v11 = *(_OWORD *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)a4 = v11;
    if ((*a5)(*a3, a3[1], *a2, a2[1]))
    {
      v12 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v12;
      if ((*a5)(*a2, a2[1], *a1, a1[1]))
      {
        result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 sub_1002495C8(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, uint64_t (**a6)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  __n128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v12 = sub_100249510(a1, a2, a3, a4, a6);
  if (((unsigned int (*)(_QWORD, _QWORD, _QWORD, _QWORD, __n128))*a6)(*a5, a5[1], *a4, a4[1], v12))
  {
    v14 = *(_OWORD *)a4;
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)a5 = v14;
    if ((*a6)(*a4, a4[1], *a3, a3[1]))
    {
      v15 = *(_OWORD *)a3;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)a4 = v15;
      if ((*a6)(*a3, a3[1], *a2, a2[1]))
      {
        v16 = *(_OWORD *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)a3 = v16;
        if ((*a6)(*a2, a2[1], *a1, a1[1]))
        {
          result = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

char *sub_1002496A8(char *a1, char *a2, char *a3, uint64_t (**a4)(_QWORD, _QWORD, uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v21;

  if (a1 != a2)
  {
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[16 * v10];
      do
      {
        sub_100249810((uint64_t)a1, (unsigned int (**)(_QWORD, _QWORD, _QWORD, _QWORD))a4, v9, v12);
        v12 -= 16;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if ((*a4)(*(_QWORD *)v14, *((_QWORD *)v14 + 1), *(_QWORD *)a1, *((_QWORD *)a1 + 1)))
        {
          v15 = *(_OWORD *)v14;
          *(_OWORD *)v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          sub_100249810((uint64_t)a1, (unsigned int (**)(_QWORD, _QWORD, _QWORD, _QWORD))a4, v9, a1);
        }
        v14 += 16;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v16 = (unint64_t)v8 >> 4;
      v17 = a2 - 16;
      do
      {
        v21 = *(_OWORD *)a1;
        v18 = (char *)sub_10024994C(a1, (unsigned int (**)(_QWORD, _QWORD, _QWORD, _QWORD))a4, v16);
        if (v17 == v18)
        {
          *(_OWORD *)v18 = v21;
        }
        else
        {
          *(_OWORD *)v18 = *(_OWORD *)v17;
          *(_OWORD *)v17 = v21;
          sub_1002499FC((uint64_t)a1, (uint64_t)(v18 + 16), a4, (v18 + 16 - a1) >> 4);
        }
        v17 -= 16;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_100249810(uint64_t result, unsigned int (**a2)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int64_t v17;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v17 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 4)
    {
      v9 = ((uint64_t)a4 - result) >> 3;
      v10 = v9 + 1;
      v11 = (_QWORD *)(result + 16 * (v9 + 1));
      v12 = v9 + 2;
      if (v9 + 2 < a3 && (*a2)(*v11, v11[1], v11[2], v11[3]))
      {
        v11 += 2;
        v10 = v12;
      }
      result = ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))*a2)(*v11, v11[1], *v5, v5[1]);
      if ((result & 1) == 0)
      {
        v13 = *v5;
        v14 = v5[1];
        do
        {
          v15 = v11;
          *(_OWORD *)v5 = *(_OWORD *)v11;
          if (v17 < v10)
            break;
          v16 = (2 * v10) | 1;
          v11 = (_QWORD *)(v6 + 16 * v16);
          if (2 * v10 + 2 < a3)
          {
            if ((*a2)(*v11, v11[1], v11[2], v11[3]))
            {
              v11 += 2;
              v16 = 2 * v10 + 2;
            }
          }
          result = ((uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))*a2)(*v11, v11[1], v13, v14);
          v5 = v15;
          v10 = v16;
        }
        while (!(_DWORD)result);
        *v15 = v13;
        v15[1] = v14;
      }
    }
  }
  return result;
}

_OWORD *sub_10024994C(_OWORD *a1, unsigned int (**a2)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = &a1[v6 + 1];
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3
      && (*a2)(*(_QWORD *)&a1[v6 + 1], *((_QWORD *)&a1[v6 + 1] + 1), *(_QWORD *)&a1[v6 + 2], *((_QWORD *)&a1[v6 + 2] + 1)))
    {
      ++v9;
      v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t sub_1002499FC(uint64_t result, uint64_t a2, uint64_t (**a3)(_QWORD, _QWORD, uint64_t, uint64_t), uint64_t a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v7 = result;
    v8 = v4 >> 1;
    v9 = (_QWORD *)(result + 16 * (v4 >> 1));
    v10 = (_OWORD *)(a2 - 16);
    result = (*a3)(*v9, v9[1], *(_QWORD *)(a2 - 16), *(_QWORD *)(a2 - 8));
    if ((_DWORD)result)
    {
      v11 = *(_QWORD *)(a2 - 16);
      v12 = *(_QWORD *)(a2 - 8);
      do
      {
        v13 = v9;
        *v10 = *(_OWORD *)v9;
        if (!v8)
          break;
        v8 = (v8 - 1) >> 1;
        v9 = (_QWORD *)(v7 + 16 * v8);
        result = (*a3)(*v9, v9[1], v11, v12);
        v10 = v13;
      }
      while ((result & 1) != 0);
      *v13 = v11;
      v13[1] = v12;
    }
  }
  return result;
}

uint64_t sub_100249AA0(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      sub_100249B1C((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 8;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_100249B04(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100249E38(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100249B1C(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = (uint64_t **)sub_100249B9C(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    sub_100249D44((uint64_t)a1, a4, (uint64_t)&v8);
    sub_10004EE78(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *sub_100249B9C(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

_QWORD *sub_100249D44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _DWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x40uLL);
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 16) = 0;
  v6[8] = *(_DWORD *)a2;
  result = v6 + 10;
  if (*(char *)(a2 + 31) < 0)
  {
    result = sub_100011208(result, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)(a2 + 8);
    result[2] = *(_QWORD *)(a2 + 24);
  }
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100249DD0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_100249DEC(v3, v2);
  _Unwind_Resume(a1);
}

void sub_100249DEC(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 63) < 0)
      operator delete(__p[5]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void sub_100249E38(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_100249E38(a1, *(_QWORD *)a2);
    sub_100249E38(a1, *((_QWORD *)a2 + 1));
    if (a2[63] < 0)
      operator delete(*((void **)a2 + 5));
    operator delete(a2);
  }
}

uint64_t **sub_100249E88(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 5) = 0;
    sub_10004EE78(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void CLKappaFeaturesAlgRemoteAudioResult::reset(CLKappaFeaturesAlgRemoteAudioResult *this)
{
  void *v1;

  *((_BYTE *)this + 8) = 0;
  *((_DWORD *)this + 3) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  *(_QWORD *)((char *)this + 54) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_WORD *)this + 40) = 0;
  v1 = (void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;

}

void CLKappaFeaturesAlgRemoteAudioResult::log(CLKappaFeaturesAlgRemoteAudioResult *this)
{
  NSObject *v2;
  int v3;
  int v4;
  double v5;
  int v6;
  double v7;
  double v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  uint8_t buf[4];
  _BYTE v23[10];
  _BYTE v24[10];
  double v25;
  _BYTE v26[10];
  _BYTE v27[10];
  uint64_t v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  double v39;
  __int16 v40;
  double v41;
  __int16 v42;
  double v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10035D5C0);
  v2 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((unsigned __int8 *)this + 61);
    v4 = *((unsigned __int8 *)this + 81);
    v5 = *((float *)this + 10);
    v6 = *((_DWORD *)this + 4);
    v7 = *((float *)this + 5);
    v8 = *((float *)this + 6);
    v9 = *((_QWORD *)this + 4);
    *(_DWORD *)buf = 67241728;
    *(_DWORD *)v23 = v3;
    *(_WORD *)&v23[4] = 1026;
    *(_DWORD *)&v23[6] = v4;
    *(_WORD *)v24 = 2050;
    *(double *)&v24[2] = v5;
    LOWORD(v25) = 1026;
    *(_DWORD *)((char *)&v25 + 2) = v6;
    HIWORD(v25) = 2050;
    *(double *)v26 = v7;
    *(_WORD *)&v26[8] = 2050;
    *(double *)v27 = v8;
    *(_WORD *)&v27[8] = 2050;
    v28 = v9;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[RA] AlgBlock summary,A,%{public}d,B,%{public}d,C,%{public}f,config-1,%{public}d,config-2,%{public}f,config-3,%{public}f,debug-1,%{public}llu", buf, 0x3Cu);
  }
  if (objc_msgSend(*((id *)this + 11), "count"))
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v17 = 0;
    memset(v18, 0, 14);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)this + 11), "objectAtIndexedSubscript:", 0));
    objc_msgSend(v10, "getBytes:length:", &v16, 96);

    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_10035D5C0);
    v11 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134222848;
      *(_QWORD *)v23 = v16;
      *(_WORD *)&v23[8] = 2048;
      *(double *)v24 = *(float *)&v17;
      *(_WORD *)&v24[8] = 2048;
      v25 = *((float *)&v17 + 1);
      *(_WORD *)v26 = 2048;
      *(double *)&v26[2] = *(float *)v18;
      *(_WORD *)v27 = 2048;
      *(double *)&v27[2] = *((float *)v18 + 1);
      LOWORD(v28) = 1024;
      *(_DWORD *)((char *)&v28 + 2) = LOBYTE(v18[1]);
      HIWORD(v28) = 1024;
      v29 = BYTE1(v18[1]);
      v30 = 1024;
      v31 = BYTE2(v18[1]);
      v32 = 1024;
      v33 = BYTE3(v18[1]);
      v34 = 1024;
      v35 = BYTE4(v18[1]);
      v36 = 1024;
      v37 = BYTE4(v18[1]);
      v38 = 2048;
      v39 = *(float *)&v19;
      v40 = 2048;
      v41 = *((float *)&v19 + 1);
      v42 = 2048;
      v43 = *(float *)&v20;
      v44 = 1024;
      v45 = BYTE4(v20);
      v46 = 1024;
      v47 = BYTE5(v20);
      v48 = 1024;
      v49 = BYTE6(v20);
      v50 = 1024;
      v51 = HIBYTE(v20);
      v52 = 1024;
      v53 = v21;
      v54 = 1024;
      v55 = v21;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "[RemoteAudioBuffer0] AlgBlock summary,A,%llu,B,%f,C,%f,D,%f,E,%f,F,%d,G,%d,H,%d,I,%d,J,%d,K,%d,L,%f,M,%f,N,%f,O,%d,P,%d,Q,%d,R,%d,S,%d,T,%d", buf, 0x9Au);
    }
  }
  if ((unint64_t)objc_msgSend(*((id *)this + 11), "count") >= 2)
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v17 = 0;
    memset(v18, 0, 14);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)this + 11), "objectAtIndexedSubscript:", 1));
    objc_msgSend(v12, "getBytes:length:", &v16, 96);

    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_10035D5C0);
    v13 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134222848;
      *(_QWORD *)v23 = v16;
      *(_WORD *)&v23[8] = 2048;
      *(double *)v24 = *(float *)&v17;
      *(_WORD *)&v24[8] = 2048;
      v25 = *((float *)&v17 + 1);
      *(_WORD *)v26 = 2048;
      *(double *)&v26[2] = *(float *)v18;
      *(_WORD *)v27 = 2048;
      *(double *)&v27[2] = *((float *)v18 + 1);
      LOWORD(v28) = 1024;
      *(_DWORD *)((char *)&v28 + 2) = LOBYTE(v18[1]);
      HIWORD(v28) = 1024;
      v29 = BYTE1(v18[1]);
      v30 = 1024;
      v31 = BYTE2(v18[1]);
      v32 = 1024;
      v33 = BYTE3(v18[1]);
      v34 = 1024;
      v35 = BYTE4(v18[1]);
      v36 = 1024;
      v37 = BYTE4(v18[1]);
      v38 = 2048;
      v39 = *(float *)&v19;
      v40 = 2048;
      v41 = *((float *)&v19 + 1);
      v42 = 2048;
      v43 = *(float *)&v20;
      v44 = 1024;
      v45 = BYTE4(v20);
      v46 = 1024;
      v47 = BYTE5(v20);
      v48 = 1024;
      v49 = BYTE6(v20);
      v50 = 1024;
      v51 = HIBYTE(v20);
      v52 = 1024;
      v53 = v21;
      v54 = 1024;
      v55 = v21;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "[RemoteAudioBuffer1] AlgBlock summary,A,%llu,B,%f,C,%f,D,%f,E,%f,F,%d,G,%d,H,%d,I,%d,J,%d,K,%d,L,%f,M,%f,N,%f,O,%d,P,%d,Q,%d,R,%d,S,%d,T,%d", buf, 0x9Au);
    }
  }
  if ((unint64_t)objc_msgSend(*((id *)this + 11), "count") >= 3)
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v17 = 0;
    memset(v18, 0, 14);
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)this + 11), "objectAtIndexedSubscript:", 2));
    objc_msgSend(v14, "getBytes:length:", &v16, 96);

    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_10035D5C0);
    v15 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134222848;
      *(_QWORD *)v23 = v16;
      *(_WORD *)&v23[8] = 2048;
      *(double *)v24 = *(float *)&v17;
      *(_WORD *)&v24[8] = 2048;
      v25 = *((float *)&v17 + 1);
      *(_WORD *)v26 = 2048;
      *(double *)&v26[2] = *(float *)v18;
      *(_WORD *)v27 = 2048;
      *(double *)&v27[2] = *((float *)v18 + 1);
      LOWORD(v28) = 1024;
      *(_DWORD *)((char *)&v28 + 2) = LOBYTE(v18[1]);
      HIWORD(v28) = 1024;
      v29 = BYTE1(v18[1]);
      v30 = 1024;
      v31 = BYTE2(v18[1]);
      v32 = 1024;
      v33 = BYTE3(v18[1]);
      v34 = 1024;
      v35 = BYTE4(v18[1]);
      v36 = 1024;
      v37 = BYTE4(v18[1]);
      v38 = 2048;
      v39 = *(float *)&v19;
      v40 = 2048;
      v41 = *((float *)&v19 + 1);
      v42 = 2048;
      v43 = *(float *)&v20;
      v44 = 1024;
      v45 = BYTE4(v20);
      v46 = 1024;
      v47 = BYTE5(v20);
      v48 = 1024;
      v49 = BYTE6(v20);
      v50 = 1024;
      v51 = HIBYTE(v20);
      v52 = 1024;
      v53 = v21;
      v54 = 1024;
      v55 = v21;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "[RemoteAudioBuffer2] AlgBlock summary,A,%llu,B,%f,C,%f,D,%f,E,%f,F,%d,G,%d,H,%d,I,%d,J,%d,K,%d,L,%f,M,%f,N,%f,O,%d,P,%d,Q,%d,R,%d,S,%d,T,%d", buf, 0x9Au);
    }
  }
}

void sub_10024A59C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CLKappaFeaturesAlgRemoteAudio::CLKappaFeaturesAlgRemoteAudio(CLKappaFeaturesAlgRemoteAudio *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  __int128 v26;

  CLKappaAlgBlock::CLKappaAlgBlock(this, a2 + 1);
  v4 = *a2;
  *(_QWORD *)v5 = *a2;
  *(_QWORD *)(v5 + *(_QWORD *)(v4 - 152)) = a2[6];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 160)) = a2[7];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 168)) = a2[8];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 176)) = a2[9];
  *(_OWORD *)(v5 + 32) = 0u;
  v6 = v5 + 32;
  *(_BYTE *)(v5 + 72) = 0;
  *(_BYTE *)(v5 + 80) = 0;
  *(_BYTE *)(v5 + 88) = 0;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_BYTE *)(v5 + 64) = 0;
  v7 = operator new(0x78uLL);
  v7[2] = 0;
  *v7 = off_10035D5F0;
  v7[1] = 0;
  *((_OWORD *)v7 + 5) = 0u;
  *((_OWORD *)v7 + 6) = 0u;
  *((_OWORD *)v7 + 3) = 0u;
  *((_OWORD *)v7 + 4) = 0u;
  *((_OWORD *)v7 + 2) = 0u;
  v7[3] = off_10034CE98;
  v7[11] = 0;
  v7[12] = 0;
  *((_WORD *)v7 + 52) = 0;
  v7[8] = 0;
  v7[9] = 0;
  *(_QWORD *)((char *)v7 + 78) = 0;
  v7[14] = 0;
  *(_QWORD *)&v26 = v7 + 3;
  *((_QWORD *)&v26 + 1) = v7;
  sub_1000081AC((uint64_t)this + 8, &v26);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v24 = *((_QWORD *)this + 1);
  v25 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  sub_10024A838((uint64_t)&v24, &v26);
  sub_1000081AC(v6, &v26);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v25;
  if (v25)
  {
    v18 = (unint64_t *)&v25->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = objc_alloc((Class)NSMutableArray);
  v21 = objc_msgSend(v20, "initWithCapacity:", 20, v24);
  v22 = *((_QWORD *)this + 4);
  v23 = *(void **)(v22 + 88);
  *(_QWORD *)(v22 + 88) = v21;

  if (*((_BYTE *)this + 72))
    *((_BYTE *)this + 72) = 0;
  if (*((_BYTE *)this + 88))
    *((_BYTE *)this + 88) = 0;
  (*(void (**)(CLKappaFeaturesAlgRemoteAudio *))(*(_QWORD *)this + 304))(this);
}

void sub_10024A80C(_Unwind_Exception *a1)
{
  CLKappaAlgBlock *v1;
  uint64_t *v2;
  uint64_t v3;

  sub_10000A718((uint64_t)v1 + 48);
  sub_10000A718(v3);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, v2);
  _Unwind_Resume(a1);
}

void *sub_10024A838@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = *(void **)a1;
  if (result
  {
    v5 = *(_QWORD *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void CLKappaFeaturesAlgRemoteAudio::CLKappaFeaturesAlgRemoteAudio(CLKappaFeaturesAlgRemoteAudio *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  __int128 v23;

  *(_QWORD *)this = off_100345D50;
  *((_QWORD *)this + 12) = off_100345DF8;
  *((_QWORD *)this + 13) = off_100345EC0;
  *((_QWORD *)this + 14) = off_100345F68;
  CLKappaAlgBlock::CLKappaAlgBlock(this, (uint64_t *)off_10035CF78);
  *(_QWORD *)v2 = off_10035CA78;
  *(_QWORD *)(v2 + 96) = off_10035CD18;
  *(_QWORD *)(v2 + 104) = off_10035CE50;
  *(_OWORD *)(v2 + 32) = 0u;
  v3 = v2 + 32;
  *(_QWORD *)(v2 + 112) = off_10035CF28;
  *(_BYTE *)(v2 + 72) = 0;
  *(_BYTE *)(v2 + 80) = 0;
  *(_BYTE *)(v2 + 88) = 0;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_BYTE *)(v2 + 64) = 0;
  v4 = operator new(0x78uLL);
  v4[2] = 0;
  *v4 = off_10035D5F0;
  v4[1] = 0;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 2) = 0u;
  v4[3] = off_10034CE98;
  v4[11] = 0;
  v4[12] = 0;
  *((_WORD *)v4 + 52) = 0;
  v4[8] = 0;
  v4[9] = 0;
  *(_QWORD *)((char *)v4 + 78) = 0;
  v4[14] = 0;
  *(_QWORD *)&v23 = v4 + 3;
  *((_QWORD *)&v23 + 1) = v4;
  sub_1000081AC((uint64_t)this + 8, &v23);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v21 = *((_QWORD *)this + 1);
  v22 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_10024A838((uint64_t)&v21, &v23);
  sub_1000081AC(v3, &v23);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = objc_alloc((Class)NSMutableArray);
  v18 = objc_msgSend(v17, "initWithCapacity:", 20, v21);
  v19 = *((_QWORD *)this + 4);
  v20 = *(void **)(v19 + 88);
  *(_QWORD *)(v19 + 88) = v18;

  if (*((_BYTE *)this + 72))
    *((_BYTE *)this + 72) = 0;
  if (*((_BYTE *)this + 88))
    *((_BYTE *)this + 88) = 0;
  (*(void (**)(CLKappaFeaturesAlgRemoteAudio *))(*(_QWORD *)this + 304))(this);
}

void sub_10024AAF0(_Unwind_Exception *a1)
{
  CLKappaAlgBlock *v1;
  uint64_t v2;

  sub_10000A718((uint64_t)v1 + 48);
  sub_10000A718(v2);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10035CF78);
  _Unwind_Resume(a1);
}

uint64_t CLKappaFeaturesAlgRemoteAudio::reset(CLKappaFeaturesAlgRemoteAudio *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 24))(*((_QWORD *)this + 4));
}

id CLKappaFeaturesAlgRemoteAudio::resetAudioOutputBuffer(CLKappaFeaturesAlgRemoteAudio *this)
{
  return objc_msgSend(*(id *)(*((_QWORD *)this + 4) + 88), "removeAllObjects");
}

void CLKappaFeaturesAlgRemoteAudio::resetConfiguration(CLKappaFeaturesAlgRemoteAudio *this)
{
  void *v2;
  double v3;
  double v4;
  double v5;
  float v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  int v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  int v16;
  id v17;

  v17 = (id)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration configBaseKey:forFeatureMode:](CSPersistentConfiguration, "configBaseKey:forFeatureMode:", "FeaturesAlgRAConfig", *((unsigned __int8 *)this + 24)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v3) = 0;
  LODWORD(v4) = 0;
  LODWORD(v5) = 0;
  objc_msgSend(v2, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 0, v17, v3, v4, v5);
  *(_DWORD *)(*((_QWORD *)this + 4) + 16) = (int)v6;

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v8) = 0;
  LODWORD(v9) = 0;
  LODWORD(v10) = 0;
  objc_msgSend(v7, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 1, v17, v8, v9, v10);
  *(_DWORD *)(*((_QWORD *)this + 4) + 20) = v11;

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v13) = 0;
  LODWORD(v14) = 0;
  LODWORD(v15) = 0;
  objc_msgSend(v12, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 2, v17, v13, v14, v15);
  *(_DWORD *)(*((_QWORD *)this + 4) + 24) = v16;

}

void sub_10024AC2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

double CLKappaFeaturesAlgRemoteAudio::setConfig(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  double result;
  int v7;
  double v8;
  double v9;
  _DWORD v10[2];
  __int16 v11;
  double v12;
  __int16 v13;
  double v14;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *a2;
  *(_DWORD *)(v3 + 24) = *((_DWORD *)a2 + 2);
  *(_QWORD *)(v3 + 16) = v4;
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10035D5C0);
  v5 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(_DWORD *)a2;
    v8 = *((float *)a2 + 1);
    v9 = *((float *)a2 + 2);
    v10[0] = 67109632;
    v10[1] = v7;
    v11 = 2048;
    v12 = v8;
    v13 = 2048;
    v14 = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[RA] config-1,%d,config-2,%f,config-3,%f", (uint8_t *)v10, 0x1Cu);
  }
  return result;
}

void CLKappaFeaturesAlgRemoteAudio::epochFinalize(CLKappaFeaturesAlgRemoteAudio *this, uint64_t a2)
{
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  float v8;
  float v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  BOOL v16;
  BOOL v17;
  uint64_t v18;
  float v19;
  void *i;
  void *v21;
  NSObject *v22;
  const char *v23;
  uint64_t v24;
  uint8_t buf[8];
  uint64_t v26;
  _BYTE v27[14];
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];

  v4 = *((_QWORD *)this + 4);
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 32) = a2;
  *(_QWORD *)(v4 + 54) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = 0;
  *(_WORD *)(v4 + 80) = 0;
  v5 = *(id *)(v4 + 88);
  v6 = v5;
  if (*((_BYTE *)this + 88))
  {
    if (*((_BYTE *)this + 72))
    {
      v7 = *((_QWORD *)this + 4);
      v9 = *(float *)(v7 + 20);
      v8 = *(float *)(v7 + 24);
      CLKappaFeaturesAlgRemoteAudio::logAudioBufferPhoneAOPTimes(v5, CFSTR("before filtering"));
      if (!*((_BYTE *)this + 72) || !*((_BYTE *)this + 88))
        sub_100049F7C();
      v10 = CLKappaFeaturesAlgRemoteAudio::filterOldRemoteAudioElements(v6, *((_QWORD *)this + 8), *((_QWORD *)this + 10), a2, v9);
      v11 = (void *)objc_claimAutoreleasedReturnValue(v10);

      CLKappaFeaturesAlgRemoteAudio::logAudioBufferPhoneAOPTimes(v11, CFSTR("after filtering old"));
      if (!*((_BYTE *)this + 72) || !*((_BYTE *)this + 88))
        sub_100049F7C();
      v12 = CLKappaFeaturesAlgRemoteAudio::filterFutureRemoteAudioElements(v11, *((_QWORD *)this + 8), *((_QWORD *)this + 10), a2, v8);
      v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      CLKappaFeaturesAlgRemoteAudio::logAudioBufferPhoneAOPTimes(v13, CFSTR("to use this epoch"));
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v14 = v13;
      v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
      if (v15)
      {
        v16 = 0;
        v17 = 0;
        v18 = *(_QWORD *)v32;
        v19 = 0.0;
        do
        {
          for (i = 0; i != v15; i = (char *)i + 1)
          {
            if (*(_QWORD *)v32 != v18)
              objc_enumerationMutation(v14);
            v21 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)i);
            v28 = 0;
            v29 = 0;
            v30 = 0;
            v26 = 0;
            memset(v27, 0, sizeof(v27));
            objc_msgSend(v21, "getBytes:length:", buf, 96);
            v16 = (v27[13] | v16) != 0;
            v17 = (HIBYTE(v30) | v17) != 0;
            if (*(float *)&v26 >= v19)
              v19 = *(float *)&v26;
          }
          v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
        }
        while (v15);
      }
      else
      {
        v16 = 0;
        v17 = 0;
        v19 = 0.0;
      }

      v24 = *((_QWORD *)this + 4);
      *(float *)(v24 + 40) = v19;
      *(_BYTE *)(v24 + 61) = v16;
      *(_BYTE *)(v24 + 81) = v17;
      objc_storeStrong((id *)(v24 + 88), v11);

      v6 = v11;
      goto LABEL_29;
    }
    if (objc_msgSend(v5, "count"))
    {
      if (qword_100387310 != -1)
        dispatch_once(&qword_100387310, &stru_10035D5C0);
      v22 = qword_100387318;
      if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        v23 = "[RA] non-empty buffer but no first trigger timestamp";
        goto LABEL_26;
      }
    }
  }
  else
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_10035D5C0);
    v22 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      v23 = "[RA] trigger time not set before epochFinalize";
LABEL_26:
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, v23, buf, 2u);
    }
  }
LABEL_29:

}

void sub_10024B0A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CLKappaFeaturesAlgRemoteAudio::logAudioBufferPhoneAOPTimes(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 buf;
  _QWORD v19[4];
  __int16 v20;
  _BYTE v21[128];

  v3 = a1;
  v4 = a2;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v5 = v3;
  v13 = v4;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v21, 16);
  v7 = v4;
  if (v6)
  {
    v8 = *(_QWORD *)v15;
    v7 = v4;
    do
    {
      v9 = 0;
      v10 = v7;
      do
      {
        if (*(_QWORD *)v15 != v8)
          objc_enumerationMutation(v5);
        v11 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)v9);
        v19[2] = 0;
        v19[3] = 0;
        v20 = 0;
        *((_QWORD *)&buf + 1) = 0;
        v19[0] = 0;
        *(_QWORD *)((char *)v19 + 6) = 0;
        objc_msgSend(v11, "getBytes:length:", &buf, 96);
        v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@, %llu"), v10, (_QWORD)buf));

        v9 = (char *)v9 + 1;
        v10 = v7;
      }
      while (v6 != v9);
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v21, 16);
    }
    while (v6);
  }

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10035D5C0);
  v12 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v7;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "%@", (uint8_t *)&buf, 0xCu);
  }

}

void sub_10024B2EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

id CLKappaFeaturesAlgRemoteAudio::filterOldRemoteAudioElements(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v15;
  id v16;
  uint64_t v17[2];
  _QWORD v18[4];
  __int16 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];

  v15 = a1;
  v16 = objc_alloc_init((Class)NSMutableArray);
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v9 = v15;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v20, v24, 16, v15);
  if (v10)
  {
    v11 = *(_QWORD *)v21;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v21 != v11)
          objc_enumerationMutation(v9);
        v13 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v12);
        v18[2] = 0;
        v18[3] = 0;
        v19 = 0;
        v17[1] = 0;
        v18[0] = 0;
        *(_QWORD *)((char *)v18 + 6) = 0;
        objc_msgSend(v13, "getBytes:length:", v17, 96);
        if (CLKappaFeaturesAlgRemoteAudio::computeAOPTimeDelta(v17, a2, a3, a4) >= a5)
          objc_msgSend(v16, "addObject:", v13);
        v12 = (char *)v12 + 1;
      }
      while (v10 != v12);
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    }
    while (v10);
  }

  return v16;
}

void sub_10024B4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id CLKappaFeaturesAlgRemoteAudio::filterFutureRemoteAudioElements(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v15;
  id v16;
  uint64_t v17[2];
  _QWORD v18[4];
  __int16 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];

  v15 = a1;
  v16 = objc_alloc_init((Class)NSMutableArray);
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v9 = v15;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v20, v24, 16, v15);
  if (v10)
  {
    v11 = *(_QWORD *)v21;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v21 != v11)
          objc_enumerationMutation(v9);
        v13 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v12);
        v18[2] = 0;
        v18[3] = 0;
        v19 = 0;
        v17[1] = 0;
        v18[0] = 0;
        *(_QWORD *)((char *)v18 + 6) = 0;
        objc_msgSend(v13, "getBytes:length:", v17, 96);
        if (CLKappaFeaturesAlgRemoteAudio::computeAOPTimeDelta(v17, a2, a3, a4) <= a5)
          objc_msgSend(v16, "addObject:", v13);
        v12 = (char *)v12 + 1;
      }
      while (v10 != v12);
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    }
    while (v10);
  }

  return v16;
}

void sub_10024B668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void `virtual thunk to'CLKappaFeaturesAlgRemoteAudio::epochFinalize(CLKappaFeaturesAlgRemoteAudio *this, uint64_t a2)
{
  CLKappaFeaturesAlgRemoteAudio::epochFinalize((CLKappaFeaturesAlgRemoteAudio *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)), a2);
}

float CLKappaFeaturesAlgRemoteAudio::computeAOPTimeDelta(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  float v9;
  NSObject *v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  double v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;

  v7 = a2 - a3;
  v8 = *a1 - (a2 - a3);
  v9 = (float)(v8 - a4);
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10035D5C0);
  v10 = qword_100387318;
  v11 = v9 / 1000000.0;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v12 = a1[11];
    v13 = *a1;
    v15 = 134219520;
    v16 = a3;
    v17 = 2048;
    v18 = v12;
    v19 = 2048;
    v20 = v7;
    v21 = 2048;
    v22 = v8;
    v23 = 2048;
    v24 = v11;
    v25 = 2048;
    v26 = v13;
    v27 = 2048;
    v28 = a4;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[RA] trigger %llu companion trigger %llu delta-aop %llu remote-adj %llu deltaTime %f remote aop epoch %llu our ts %llu", (uint8_t *)&v15, 0x48u);
  }
  return v11;
}

id CLKappaFeaturesAlgRemoteAudio::sortedRemoteAudio(void *a1)
{
  void *v1;
  id v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "sortedArrayUsingComparator:", &stru_10035CFE0));
  v2 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithArray:", v1);

  return v2;
}

void sub_10024B84C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

int64_t sub_10024B85C(id a1, id a2, id a3)
{
  id v4;
  id v5;
  uint64_t v6;
  int64_t v7;
  _QWORD v9[2];
  _QWORD v10[4];
  __int16 v11;
  _QWORD v12[2];
  _QWORD v13[4];
  __int16 v14;

  v4 = a2;
  v5 = a3;
  v13[2] = 0;
  v13[3] = 0;
  v14 = 0;
  v12[1] = 0;
  v13[0] = 0;
  *(_QWORD *)((char *)v13 + 6) = 0;
  v10[2] = 0;
  v10[3] = 0;
  v11 = 0;
  v9[1] = 0;
  v10[0] = 0;
  *(_QWORD *)((char *)v10 + 6) = 0;
  objc_msgSend(v4, "getBytes:length:", v12, 96);
  objc_msgSend(v5, "getBytes:length:", v9, 96);
  if (v12[0] >= v9[0])
    v6 = 0;
  else
    v6 = -1;
  if (v12[0] > v9[0])
    v7 = 1;
  else
    v7 = v6;

  return v7;
}

void sub_10024B8F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void CLKappaFeaturesAlgRemoteAudio::logAudioInput(float *a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  double v17;
  double v18;
  double v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  id v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  double v34;
  __int16 v35;
  double v36;
  __int16 v37;
  double v38;
  __int16 v39;
  double v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  __int16 v51;
  double v52;
  __int16 v53;
  double v54;
  __int16 v55;
  double v56;
  __int16 v57;
  int v58;
  __int16 v59;
  int v60;
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;

  v3 = a2;
  if (v3)
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_10035D5C0);
    v4 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
    {
      v5 = *(_QWORD *)a1;
      v7 = *((_QWORD *)a1 + 10);
      v6 = *((_QWORD *)a1 + 11);
      v8 = a1[2];
      v9 = a1[3];
      v10 = a1[4];
      v11 = a1[5];
      v12 = *((unsigned __int8 *)a1 + 24);
      v13 = *((unsigned __int8 *)a1 + 25);
      v14 = *((unsigned __int8 *)a1 + 26);
      v15 = *((unsigned __int8 *)a1 + 27);
      v16 = *((unsigned __int8 *)a1 + 29);
      v17 = a1[8];
      v18 = a1[9];
      v19 = a1[10];
      v20 = *((unsigned __int8 *)a1 + 44);
      v21 = *((unsigned __int8 *)a1 + 45);
      v22 = *((unsigned __int8 *)a1 + 46);
      v23 = *((unsigned __int8 *)a1 + 47);
      v24 = *((unsigned __int8 *)a1 + 49);
      v25 = 138417410;
      v26 = v3;
      v27 = 2048;
      v28 = v5;
      v29 = 2048;
      v30 = v6;
      v31 = 2048;
      v32 = v7;
      v33 = 2048;
      v34 = v8;
      v35 = 2048;
      v36 = v9;
      v37 = 2048;
      v38 = v10;
      v39 = 2048;
      v40 = v11;
      v41 = 1024;
      v42 = v12;
      v43 = 1024;
      v44 = v13;
      v45 = 1024;
      v46 = v14;
      v47 = 1024;
      v48 = v15;
      v49 = 1024;
      v50 = v16;
      v51 = 2048;
      v52 = v17;
      v53 = 2048;
      v54 = v18;
      v55 = 2048;
      v56 = v19;
      v57 = 1024;
      v58 = v20;
      v59 = 1024;
      v60 = v21;
      v61 = 1024;
      v62 = v22;
      v63 = 1024;
      v64 = v23;
      v65 = 1024;
      v66 = v24;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%@ audio result %llu %llu %llu %f %f %f %f %d %d %d %d %d %f %f %f %d %d %d %d %d", (uint8_t *)&v25, 0xACu);
    }
  }

}

uint64_t CLKappaFeaturesAlgRemoteAudio::getDelayBufferSize(CLKappaFeaturesAlgRemoteAudio *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 4) + 16);
}

void CLKappaFeaturesAlgRemoteAudio::feedRemoteAudio(uint64_t a1, uint64_t a2)
{
  double Current;
  NSObject *v5;
  double v6;
  id v7;
  void *v8;
  NSObject *v9;
  id v10;
  void *v11;
  NSObject *v12;
  uint64_t v13;
  unint64_t i;
  void *v15;
  NSObject *v16;
  uint64_t v17;
  void *v18;
  uint8_t v19[4];
  int v20;
  __int16 v21;
  uint64_t v22;
  __int128 buf;
  _QWORD v24[4];
  __int16 v25;

  Current = CFAbsoluteTimeGetCurrent();
  if (Current - *(double *)(a2 + 64) <= 60.0)
  {
    CLKappaFeaturesAlgRemoteAudio::logAudioInput((float *)a2, CFSTR("feed [RA]"));
    v7 = *(id *)(*(_QWORD *)(a1 + 32) + 88);
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", a2, 96));
    objc_msgSend(v7, "addObject:", v8);

    if ((unint64_t)objc_msgSend(v7, "count") >= 0x15)
    {
      if (qword_100387310 != -1)
        dispatch_once(&qword_100387310, &stru_10035D5C0);
      v9 = qword_100387318;
      if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_FAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "[RA] maximum buffer size reached!", (uint8_t *)&buf, 2u);
      }
    }
    v10 = CLKappaFeaturesAlgRemoteAudio::sortedRemoteAudio(v7);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);

    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 88);
    *(_BYTE *)(a1 + 72) = 1;
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_10035D5C0);
    v12 = (id)qword_100387318;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      if (!*(_BYTE *)(a1 + 72))
        sub_100049F7C();
      v13 = *(_QWORD *)(a1 + 64);
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "[RA] firstPhoneTriggerAOPTime %llu", (uint8_t *)&buf, 0xCu);
    }

    for (i = 0; (unint64_t)objc_msgSend(v11, "count") > i; ++i)
    {
      v24[2] = 0;
      v24[3] = 0;
      v25 = 0;
      *((_QWORD *)&buf + 1) = 0;
      v24[0] = 0;
      *(_QWORD *)((char *)v24 + 6) = 0;
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectAtIndexedSubscript:", i));
      objc_msgSend(v15, "getBytes:length:", &buf, 96);
      if (qword_100387310 != -1)
        dispatch_once(&qword_100387310, &stru_10035D5C0);
      v16 = qword_100387318;
      if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v19 = 67109376;
        v20 = i;
        v21 = 2048;
        v22 = buf;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "i %d ts %llu", v19, 0x12u);
      }

    }
    v17 = *(_QWORD *)(a1 + 32);
    v18 = *(void **)(v17 + 88);
    *(_QWORD *)(v17 + 88) = v11;

  }
  else
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_10035D5C0);
    v5 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEFAULT))
    {
      v6 = Current - *(double *)(a2 + 64);
      LODWORD(buf) = 134349056;
      *(double *)((char *)&buf + 4) = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[RA] refusing to feed audio sample with age %{public}f", (uint8_t *)&buf, 0xCu);
    }
  }
}

void sub_10024BE9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void CLKappaFeaturesAlgRemoteAudio::setFirstWatchAOPTriggerTimestamp(CLKappaFeaturesAlgRemoteAudio *this, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  *((_QWORD *)this + 10) = a2;
  *((_BYTE *)this + 88) = 1;
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10035D5C0);
  v3 = (id)qword_100387318;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    if (!*((_BYTE *)this + 88))
      sub_100049F7C();
    v4 = *((_QWORD *)this + 10);
    v5 = 134217984;
    v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[RA] fFirstWatchTriggerAOPTime %llu", (uint8_t *)&v5, 0xCu);
  }

}

void sub_10024BFD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10024BFEC(CLKappaAlgBlock *a1)
{
  *(_QWORD *)a1 = off_10035CA78;
  *((_QWORD *)a1 + 12) = off_10035CD18;
  *((_QWORD *)a1 + 13) = off_10035CE50;
  *((_QWORD *)a1 + 14) = off_10035CF28;
  sub_10000A718((uint64_t)a1 + 48);
  sub_10000A718((uint64_t)a1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(a1, (uint64_t *)off_10035CF78);
}

void sub_10024C044(CLKappaAlgBlock *a1)
{
  *(_QWORD *)a1 = off_10035CA78;
  *((_QWORD *)a1 + 12) = off_10035CD18;
  *((_QWORD *)a1 + 13) = off_10035CE50;
  *((_QWORD *)a1 + 14) = off_10035CF28;
  sub_10000A718((uint64_t)a1 + 48);
  sub_10000A718((uint64_t)a1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(a1, (uint64_t *)off_10035CF78);
  operator delete();
}

_QWORD *sub_10024C0B4(uint64_t a1, uint64_t *a2)
{
  return sub_10000A6A0((_QWORD *)(a1 + 48), a2);
}

void sub_10024C0BC(_QWORD *a1)
{
  CLKappaAlgBlock *v1;

  v1 = (CLKappaAlgBlock *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  *(_QWORD *)v1 = off_10035CA78;
  *((_QWORD *)v1 + 12) = off_10035CD18;
  *((_QWORD *)v1 + 13) = off_10035CE50;
  *((_QWORD *)v1 + 14) = off_10035CF28;
  sub_10000A718((uint64_t)v1 + 48);
  sub_10000A718((uint64_t)v1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10035CF78);
}

void sub_10024C11C(_QWORD *a1)
{
  CLKappaAlgBlock *v1;

  v1 = (CLKappaAlgBlock *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  *(_QWORD *)v1 = off_10035CA78;
  *((_QWORD *)v1 + 12) = off_10035CD18;
  *((_QWORD *)v1 + 13) = off_10035CE50;
  *((_QWORD *)v1 + 14) = off_10035CF28;
  sub_10000A718((uint64_t)v1 + 48);
  sub_10000A718((uint64_t)v1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10035CF78);
  operator delete();
}

_QWORD *sub_10024C190(_QWORD *a1, uint64_t *a2)
{
  return sub_10000A6A0((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32) + 48), a2);
}

void sub_10024C1A4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "Alg");
  v2 = (void *)qword_100387318;
  qword_100387318 = (uint64_t)v1;

}

void sub_10024C1D4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10035D5F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10024C1E8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10035D5F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10024C21C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void CLKappaDeescalatorSkiLift::CLKappaDeescalatorSkiLift(CLKappaDeescalatorSkiLift *this)
{
  char *v2;

  *(_QWORD *)this = off_100347FF0;
  *((_BYTE *)this + 8) = 0;
  *((_BYTE *)this + 16) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 32) = 1;
  *((_DWORD *)this + 9) = 0;
  *((_BYTE *)this + 40) = 0;
  v2 = (char *)sub_100007088((_QWORD *)this + 6, "none");
  *(_QWORD *)this = &off_10035D640;
  *((_QWORD *)this + 9) = 0;
  if (*((char *)this + 71) < 0)
  {
    *((_QWORD *)this + 7) = 10;
    v2 = (char *)*((_QWORD *)this + 6);
  }
  else
  {
    *((_BYTE *)this + 71) = 10;
  }
  strcpy(v2, "de-SkiLift");
}

unint64_t CLKappaDeescalatorSkiLift::setupForceControls(CLKappaDeescalatorSkiLift *this)
{
  unint64_t result;

  *((_BYTE *)this + 40) = CLKappaDeescalator::shouldForceNoop(this, "ForceSkiLift");
  result = CLKappaDeescalator::shouldForceDeescalate(this, "ForceSkiLift");
  *((_DWORD *)this + 9) = result;
  return result;
}

void CLKappaDeescalatorSkiLift::updateWithTrigger(CLKappaDeescalatorSkiLift *this, const TriggerSample *a2)
{
  NSObject *v4;
  int path;
  int v6;
  NSObject *v7;
  int v8;
  NSObject *v9;
  int v10;
  int v11;
  int v12;
  __int16 v13;
  int v14;

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10035D6C8);
  v4 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    path = a2->path;
    v6 = BYTE2(a2[1].rmsSN);
    v11 = 67109376;
    v12 = path;
    v13 = 1024;
    v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "SkiLift feedTrigger path %u martyPath %u", (uint8_t *)&v11, 0xEu);
  }
  if (*((_BYTE *)this + 32) == 1 && (a2->path & 0x20) != 0)
  {
    ++*((_DWORD *)this + 18);
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_10035D6C8);
    v7 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
    {
      v8 = *((_DWORD *)this + 18);
      v11 = 67109120;
      v12 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "SkiLift feedTrigger found ski lift trigger, count:%d", (uint8_t *)&v11, 8u);
    }
  }
  if (a2->btHint == 1)
  {
    ++*((_DWORD *)this + 19);
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_10035D6C8);
    v9 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
    {
      v10 = *((_DWORD *)this + 19);
      v11 = 67109120;
      v12 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "SkiLift feedTrigger found true btHint in trigger, count:%d", (uint8_t *)&v11, 8u);
    }
  }
}

uint64_t CLKappaDeescalatorSkiLift::onEvaluateBetweenMinAndMaxHoldDuration(CLKappaDeescalatorSkiLift *this)
{
  NSObject *v3;
  uint64_t *v4;
  uint64_t v5;
  _BOOL4 v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  _BOOL4 v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;

  if (*((_DWORD *)this + 19) || !*((_DWORD *)this + 18))
    return 0;
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10035D6C8);
  v3 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v4 = (uint64_t *)((char *)this + 8);
    if (!*((_BYTE *)this + 16))
      v4 = (uint64_t *)&unk_1002ED148;
    v5 = *v4;
    v6 = *((_DWORD *)this + 7) != 0;
    v7 = *((_DWORD *)this + 18);
    v8 = *((_DWORD *)this + 19);
    v9 = 134218752;
    v10 = v5;
    v11 = 1024;
    v12 = v6;
    v13 = 1024;
    v14 = v7;
    v15 = 1024;
    v16 = v8;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[SC] SkiLift deescalated, crashTimestamp:%llu, numDeescalationSkiLift:%d, numTriggersWithRecentSkiLiftDetected:%d, numTriggersWithTrueBtHint:%d", (uint8_t *)&v9, 0x1Eu);
  }
  return 4;
}

uint64_t CLKappaDeescalatorSkiLift::onEvaluateAtBoundary(CLKappaDeescalatorSkiLift *this)
{
  NSObject *v3;
  uint64_t *v4;
  uint64_t v5;
  _BOOL4 v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  _BOOL4 v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;

  if (*((_DWORD *)this + 19) || !*((_DWORD *)this + 18))
    return 0;
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10035D6C8);
  v3 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v4 = (uint64_t *)((char *)this + 8);
    if (!*((_BYTE *)this + 16))
      v4 = (uint64_t *)&unk_1002ED148;
    v5 = *v4;
    v6 = *((_DWORD *)this + 7) != 0;
    v7 = *((_DWORD *)this + 18);
    v8 = *((_DWORD *)this + 19);
    v9 = 134218752;
    v10 = v5;
    v11 = 1024;
    v12 = v6;
    v13 = 1024;
    v14 = v7;
    v15 = 1024;
    v16 = v8;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[SC] SkiLift deescalated at boundary, crashTimestamp:%llu, numDeescalationSkiLift:%d, numTriggersWithRecentSkiLiftDetected:%d, numTriggersWithTrueBtHint:%d", (uint8_t *)&v9, 0x1Eu);
  }
  return 4;
}

void sub_10024C780(void **a1)
{
  CLKappaDeescalator::~CLKappaDeescalator(a1);
  operator delete();
}

void sub_10024C7A4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "Alg");
  v2 = (void *)qword_100387318;
  qword_100387318 = (uint64_t)v1;

}

void CLKappaDeescalatorSkiing::CLKappaDeescalatorSkiing(CLKappaDeescalatorSkiing *this)
{
  char *v2;

  *(_QWORD *)this = off_100347FF0;
  *((_BYTE *)this + 8) = 0;
  *((_BYTE *)this + 16) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 32) = 1;
  *((_DWORD *)this + 9) = 0;
  *((_BYTE *)this + 40) = 0;
  v2 = (char *)sub_100007088((_QWORD *)this + 6, "none");
  *(_QWORD *)this = off_10035D6F8;
  *((_BYTE *)this + 80) = 0;
  *((_DWORD *)this + 18) = 0;
  *((_BYTE *)this + 76) = 0;
  *(_QWORD *)((char *)this + 84) = 0xA00000000;
  *((_QWORD *)this + 13) = 0xA00000000;
  *((_WORD *)this + 76) = 0;
  if (*((char *)this + 71) < 0)
  {
    *((_QWORD *)this + 7) = 6;
    v2 = (char *)*((_QWORD *)this + 6);
  }
  else
  {
    *((_BYTE *)this + 71) = 6;
  }
  strcpy(v2, "de-Ski");
}

unint64_t CLKappaDeescalatorSkiing::setupForceControls(CLKappaDeescalatorSkiing *this)
{
  unint64_t result;

  *((_BYTE *)this + 40) = CLKappaDeescalator::shouldForceNoop(this, "ForceSkiing");
  result = CLKappaDeescalator::shouldForceDeescalate(this, "ForceSkiing");
  *((_DWORD *)this + 9) = result;
  return result;
}

uint64_t CLKappaDeescalatorSkiing::assertReady(CLKappaDeescalatorSkiing *this, uint64_t a2, const char *a3)
{
  const char *v4;
  const char *v5;

  CLKappaDeescalator::raiseUnless(*((unsigned __int8 *)this + 73), (BOOL)"[SC] skiing missing audio threshold", a3);
  CLKappaDeescalator::raiseUnless(*((unsigned __int8 *)this + 75), (BOOL)"[SC] skiing missing baro threshold", v4);
  return CLKappaDeescalator::raiseUnless(*((unsigned __int8 *)this + 80), (BOOL)"[SC] skiing missing pressure change threshold", v5);
}

uint64_t CLKappaDeescalatorSkiing::prepareForNextEpoch(uint64_t this)
{
  *(_WORD *)(this + 152) = 0;
  return this;
}

float CLKappaDeescalatorSkiing::setConfig(uint64_t a1, float *a2)
{
  float result;

  *(_WORD *)(a1 + 72) = *(unsigned __int8 *)a2 | 0x100;
  *(_WORD *)(a1 + 74) = *((unsigned __int8 *)a2 + 1) | 0x100;
  result = a2[1];
  *(float *)(a1 + 76) = result;
  *(_BYTE *)(a1 + 80) = 1;
  return result;
}

uint64_t CLKappaDeescalatorSkiing::updateWithAudioTPQ(uint64_t this, char a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = *(unsigned __int16 *)(this + 84);
  v3 = *(unsigned __int16 *)(this + 86);
  v4 = *(unsigned int *)(this + 88);
  if (v2 + v3 >= v4)
    v5 = *(unsigned int *)(this + 88);
  else
    v5 = 0;
  *(_BYTE *)(this + 84 + v2 + v3 - v5 + 8) = a2;
  if (v4 <= v3)
  {
    v6 = v2 + 1;
    if (v6 < v4)
      LOWORD(v4) = 0;
    *(_WORD *)(this + 84) = v6 - v4;
  }
  else
  {
    *(_WORD *)(this + 86) = v3 + 1;
  }
  return this;
}

uint64_t CLKappaDeescalatorSkiing::updateWithPressureMedian(uint64_t this, float a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = *(unsigned __int16 *)(this + 104);
  v3 = *(unsigned __int16 *)(this + 106);
  v4 = *(unsigned int *)(this + 108);
  if (v2 + v3 >= v4)
    v5 = *(unsigned int *)(this + 108);
  else
    v5 = 0;
  *(float *)(this + 104 + 4 * (v2 + v3 - v5) + 8) = a2;
  if (v4 <= v3)
  {
    v6 = v2 + 1;
    if (v6 < v4)
      LOWORD(v4) = 0;
    *(_WORD *)(this + 104) = v6 - v4;
  }
  else
  {
    *(_WORD *)(this + 106) = v3 + 1;
  }
  return this;
}

uint64_t CLKappaDeescalatorSkiing::getNumAudioSkiing(unsigned __int16 *a1)
{
  unint64_t v2;
  unsigned __int8 v3;

  if (a1[1])
  {
    v2 = 0;
    v3 = 0;
    do
      v3 += *(_BYTE *)sub_100027E40(a1, v2++);
    while (v2 < a1[1]);
  }
  else
  {
    return 0;
  }
  return v3;
}

uint64_t CLKappaDeescalatorSkiing::getNumBaroIncreasesSkiing(unsigned __int16 *a1, float a2)
{
  unsigned __int8 v2;
  unint64_t v5;
  unint64_t v6;
  float v7;

  if (a1[1] == 1)
  {
    return 0;
  }
  else
  {
    v5 = 0;
    v2 = 0;
    do
    {
      v6 = v5 + 1;
      v7 = *(float *)sub_1000361EC(a1, v5 + 1);
      if ((float)(v7 - *(float *)sub_1000361EC(a1, v5)) > a2)
        ++v2;
      ++v5;
    }
    while ((unint64_t)a1[1] - 1 > v6);
  }
  return v2;
}

uint64_t CLKappaDeescalatorSkiing::onEvaluateBetweenMinAndMaxHoldDuration(CLKappaDeescalatorSkiing *this)
{
  unsigned int v2;
  unsigned int v3;
  float v4;
  unsigned int NumBaroIncreasesSkiing;

  *((_BYTE *)this + 152) = CLKappaDeescalatorSkiing::getNumAudioSkiing((unsigned __int16 *)this + 42);
  if (*((_BYTE *)this + 73))
    v2 = *((unsigned __int8 *)this + 72);
  else
    v2 = 0;
  if (*((_BYTE *)this + 75))
    v3 = *((unsigned __int8 *)this + 74);
  else
    v3 = 0;
  if (*((_BYTE *)this + 80))
    v4 = *((float *)this + 19);
  else
    v4 = 0.0;
  NumBaroIncreasesSkiing = CLKappaDeescalatorSkiing::getNumBaroIncreasesSkiing((unsigned __int16 *)this + 52, v4);
  *((_BYTE *)this + 153) = NumBaroIncreasesSkiing;
  if (NumBaroIncreasesSkiing >= v3 && *((unsigned __int8 *)this + 152) >= v2)
    return 4;
  else
    return 0;
}

uint64_t CLKappaDeescalatorSkiing::onPreviousEpochMadeDecision(uint64_t this)
{
  *(_DWORD *)(this + 84) = 0;
  *(_DWORD *)(this + 104) = 0;
  return this;
}

void sub_10024CB90(void **this)
{
  *this = off_10035D6F8;
  CLKappaDeescalator::~CLKappaDeescalator(this);
}

void sub_10024CBA0(void **a1)
{
  *a1 = off_10035D6F8;
  CLKappaDeescalator::~CLKappaDeescalator(a1);
  operator delete();
}

double CLKappaEstimatesAlgRolloverCrashResult::reset(CLKappaEstimatesAlgRolloverCrashResult *this)
{
  double result;

  *((_BYTE *)this + 8) = 0;
  *((_DWORD *)this + 3) = 0;
  *((_WORD *)this + 136) = 0;
  *((_QWORD *)this + 35) = 0;
  result = 0.0;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *(_OWORD *)((char *)this + 348) = 0u;
  return result;
}

void CLKappaEstimatesAlgRolloverCrashResult::log(CLKappaEstimatesAlgRolloverCrashResult *this)
{
  NSObject *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  __int16 v73;
  int v74;
  __int16 v75;
  double v76;
  __int16 v77;
  double v78;
  __int16 v79;
  int v80;
  __int16 v81;
  int v82;
  __int16 v83;
  double v84;
  __int16 v85;
  double v86;
  __int16 v87;
  int v88;
  __int16 v89;
  int v90;
  __int16 v91;
  double v92;
  __int16 v93;
  double v94;
  __int16 v95;
  double v96;
  __int16 v97;
  int v98;
  __int16 v99;
  int v100;
  __int16 v101;
  int v102;
  __int16 v103;
  int v104;
  __int16 v105;
  double v106;
  __int16 v107;
  int v108;
  __int16 v109;
  int v110;
  __int16 v111;
  double v112;
  __int16 v113;
  double v114;
  __int16 v115;
  double v116;
  __int16 v117;
  double v118;
  __int16 v119;
  double v120;
  __int16 v121;
  double v122;
  __int16 v123;
  double v124;
  __int16 v125;
  double v126;
  __int16 v127;
  double v128;
  __int16 v129;
  double v130;
  __int16 v131;
  double v132;
  __int16 v133;
  double v134;
  __int16 v135;
  double v136;
  __int16 v137;
  double v138;
  __int16 v139;
  double v140;
  __int16 v141;
  double v142;
  __int16 v143;
  double v144;
  __int16 v145;
  double v146;
  __int16 v147;
  double v148;
  __int16 v149;
  double v150;
  __int16 v151;
  double v152;
  __int16 v153;
  double v154;
  __int16 v155;
  double v156;
  __int16 v157;
  double v158;
  __int16 v159;
  double v160;
  __int16 v161;
  double v162;
  __int16 v163;
  double v164;
  __int16 v165;
  double v166;
  __int16 v167;
  double v168;
  __int16 v169;
  double v170;
  __int16 v171;
  double v172;
  __int16 v173;
  double v174;
  __int16 v175;
  double v176;
  __int16 v177;
  double v178;
  __int16 v179;
  double v180;
  __int16 v181;
  double v182;
  __int16 v183;
  double v184;
  __int16 v185;
  double v186;
  __int16 v187;
  double v188;
  __int16 v189;
  double v190;
  __int16 v191;
  double v192;
  __int16 v193;
  double v194;
  __int16 v195;
  double v196;
  __int16 v197;
  double v198;
  __int16 v199;
  double v200;
  __int16 v201;
  double v202;
  __int16 v203;
  double v204;
  __int16 v205;
  double v206;
  __int16 v207;
  double v208;
  __int16 v209;
  double v210;
  __int16 v211;
  double v212;
  __int16 v213;
  double v214;
  __int16 v215;
  double v216;
  __int16 v217;
  double v218;
  __int16 v219;
  double v220;
  __int16 v221;
  double v222;
  __int16 v223;
  double v224;
  __int16 v225;
  double v226;
  __int16 v227;
  double v228;
  __int16 v229;
  double v230;
  __int16 v231;
  double v232;
  __int16 v233;
  double v234;
  __int16 v235;
  double v236;

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10035E338);
  v2 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((float *)this + 72);
    v4 = *((float *)this + 73);
    v5 = *((float *)this + 75);
    v6 = *((float *)this + 76);
    v7 = *((float *)this + 80);
    v8 = *((float *)this + 81);
    v71 = 134370048;
    v9 = *((float *)this + 82);
    v76 = v3;
    v10 = *((float *)this + 90);
    v78 = v4;
    v84 = v5;
    v11 = *((float *)this + 4);
    v12 = *((float *)this + 5);
    v86 = v6;
    v92 = v7;
    v13 = *((float *)this + 6);
    v14 = *((float *)this + 7);
    v94 = v8;
    v96 = v9;
    LODWORD(v8) = *((_DWORD *)this + 9);
    v15 = *((float *)this + 8);
    v106 = v10;
    v112 = v11;
    v16 = *((float *)this + 12);
    v17 = *((float *)this + 13);
    v114 = v12;
    v116 = v13;
    v18 = *((float *)this + 14);
    v19 = *((float *)this + 15);
    v118 = v14;
    v120 = v15;
    LODWORD(v13) = *((_DWORD *)this + 17);
    v20 = *((float *)this + 16);
    v122 = v16;
    v124 = v17;
    v21 = *((float *)this + 30);
    v22 = *((float *)this + 31);
    v126 = v18;
    v128 = v19;
    v23 = *((float *)this + 32);
    v24 = *((float *)this + 33);
    v130 = v20;
    v132 = v21;
    v25 = *((float *)this + 34);
    v26 = *((float *)this + 35);
    v134 = v22;
    v136 = v23;
    v27 = *((float *)this + 36);
    v28 = *((float *)this + 37);
    v138 = v24;
    v140 = v25;
    v29 = *((float *)this + 38);
    v30 = *((float *)this + 39);
    v142 = v26;
    v144 = v27;
    v31 = *((float *)this + 40);
    v32 = *((float *)this + 41);
    v146 = v28;
    v148 = v29;
    v33 = *((float *)this + 28);
    v34 = *((float *)this + 29);
    v150 = v30;
    v152 = v31;
    v35 = *((float *)this + 20);
    v36 = *((float *)this + 21);
    v154 = v32;
    v156 = v33;
    v37 = *((float *)this + 22);
    v38 = *((float *)this + 23);
    v158 = v34;
    v160 = v35;
    LODWORD(v33) = *((_DWORD *)this + 25);
    v39 = *((float *)this + 24);
    v162 = v36;
    v164 = v37;
    v40 = *((float *)this + 42);
    v41 = *((float *)this + 43);
    v166 = v38;
    v168 = v39;
    v42 = *((float *)this + 44);
    v43 = *((float *)this + 45);
    v170 = v40;
    v172 = v41;
    v44 = *((float *)this + 46);
    v45 = *((float *)this + 47);
    v174 = v42;
    v176 = v43;
    v46 = *((float *)this + 48);
    v47 = *((float *)this + 49);
    v178 = v44;
    v180 = v45;
    LODWORD(v45) = *((_DWORD *)this + 52);
    v48 = *((float *)this + 53);
    v182 = v46;
    v184 = v47;
    v49 = *((float *)this + 54);
    v50 = *((float *)this + 55);
    v186 = v48;
    v188 = v49;
    v51 = *((float *)this + 56);
    v52 = *((float *)this + 57);
    v190 = v50;
    v192 = v51;
    v53 = *((float *)this + 58);
    v54 = *((float *)this + 59);
    v194 = v52;
    v196 = v53;
    LODWORD(v52) = *((_DWORD *)this + 61);
    v55 = *((float *)this + 60);
    v198 = v54;
    v56 = *((float *)this + 64);
    v200 = v55;
    v57 = *((float *)this + 65);
    v202 = v56;
    v58 = *((float *)this + 66);
    v204 = v57;
    v206 = v58;
    LODWORD(v58) = *((_DWORD *)this + 11);
    v59 = *((float *)this + 10);
    v208 = *(float *)&v8;
    v210 = v59;
    LODWORD(v59) = *((_DWORD *)this + 51);
    v212 = *((float *)this + 50);
    v214 = *(float *)&v59;
    v216 = *(float *)&v13;
    LODWORD(v13) = *((_DWORD *)this + 19);
    v218 = *((float *)this + 18);
    v220 = *(float *)&v52;
    LODWORD(v59) = *((_DWORD *)this + 63);
    v222 = *((float *)this + 62);
    v224 = *(float *)&v33;
    LODWORD(v33) = *((_DWORD *)this + 27);
    v226 = *((float *)this + 26);
    v228 = *(float *)&v58;
    v230 = *(float *)&v45;
    v232 = *(float *)&v13;
    v234 = *(float *)&v59;
    v236 = *(float *)&v33;
    v60 = *((unsigned __int8 *)this + 272);
    v61 = *((unsigned __int8 *)this + 296);
    v62 = *((unsigned __int8 *)this + 297);
    v63 = *((unsigned __int8 *)this + 308);
    v64 = *((_DWORD *)this + 78);
    v65 = *((unsigned __int8 *)this + 344);
    v66 = *((unsigned __int8 *)this + 345);
    v67 = *((unsigned __int8 *)this + 346);
    v68 = *((unsigned __int8 *)this + 273);
    v69 = *((_DWORD *)this + 87);
    v70 = *((unsigned __int8 *)this + 352);
    v72 = *((_QWORD *)this + 35);
    v73 = 1026;
    v74 = v60;
    v75 = 2050;
    v77 = 2050;
    v79 = 1026;
    v80 = v61;
    v81 = 1026;
    v82 = v62;
    v83 = 2050;
    v85 = 2050;
    v87 = 1026;
    v88 = v63;
    v89 = 1026;
    v90 = v64;
    v91 = 2050;
    v93 = 2050;
    v95 = 2050;
    v97 = 1026;
    v98 = v65;
    v99 = 1026;
    v100 = v66;
    v101 = 1026;
    v102 = v67;
    v103 = 1026;
    v104 = v68;
    v105 = 2050;
    v107 = 1026;
    v108 = v69;
    v109 = 1026;
    v110 = v70;
    v111 = 2050;
    v113 = 2050;
    v115 = 2050;
    v117 = 2050;
    v119 = 2050;
    v121 = 2050;
    v123 = 2050;
    v125 = 2050;
    v127 = 2050;
    v129 = 2050;
    v131 = 2050;
    v133 = 2050;
    v135 = 2050;
    v137 = 2050;
    v139 = 2050;
    v141 = 2050;
    v143 = 2050;
    v145 = 2050;
    v147 = 2050;
    v149 = 2050;
    v151 = 2050;
    v153 = 2050;
    v155 = 2050;
    v157 = 2050;
    v159 = 2050;
    v161 = 2050;
    v163 = 2050;
    v165 = 2050;
    v167 = 2050;
    v169 = 2050;
    v171 = 2050;
    v173 = 2050;
    v175 = 2050;
    v177 = 2050;
    v179 = 2050;
    v181 = 2050;
    v183 = 2050;
    v185 = 2050;
    v187 = 2050;
    v189 = 2050;
    v191 = 2050;
    v193 = 2050;
    v195 = 2050;
    v197 = 2050;
    v199 = 2050;
    v201 = 2050;
    v203 = 2050;
    v205 = 2050;
    v207 = 2050;
    v209 = 2050;
    v211 = 2050;
    v213 = 2050;
    v215 = 2050;
    v217 = 2050;
    v219 = 2050;
    v221 = 2050;
    v223 = 2050;
    v225 = 2050;
    v227 = 2050;
    v229 = 2050;
    v231 = 2050;
    v233 = 2050;
    v235 = 2050;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[RC] AlgBlock summary,A,%{public}llu,B,%{public}d,C,%{public}f,D,%{public}f,E,%{public}d,F,%{public}d,G,%{public}f,H,%{public}f,I,%{public}d,J,%{public}d,K,%{public}f,L,%{public}f,M,%{public}f,N,%{public}d,O,%{public}d,P,%{public}d,Q,%{public}d,R,%{public}f,S,%{public}d,T,%{public}d,config-1,%{public}f,config-2,%{public}f,config-3,%{public}f,config-4,%{public}f,config-5,%{public}f,config-6,%{public}f,config-7,%{public}f,config-8,%{public}f,config-9,%{public}f,config-10,%{public}f,config-11,%{public}f,config-12,%{public}f,config-13,%{public}f,config-14,%{public}f,config-15,%{public}f,config-16,%{public}f,config-17,%{public}f,config-18,%{public}f,config-19,%{public}f,config-20,%{public}f,config-21,%{public}f,config-22,%{public}f,config-23,%{public}f,config-24,%{public}f,config-25,%{public}f,config-26,%{public}f,config-27,%{public}f,config-28,%{public}f,config-29,%{public}f,config-30,%{public}f,config-31,%{public}f,config-32,%{public}f,config-33,%{public}f,config-34,%{public}f,config-35,%{public}f,config-36,%{public}f,config-37,%{public}f,config-38,%{public}f,config-39,%{public}f,config-40,%{public}f,config-41,%{public}f,config-42,%{public}f,config-43,%{public}f,config-44,%{public}f,config-45,%{public}f,config-46,%{public}f,config-47,%{public}f,config-48,%{public}f,config-49,%{public}f,config-50,%{public}f,config-51,%{public}f,config-52,%{public}f,config-53,%{public}f,config-54,%{public}f,config-55,%{public}f,config-56,%{public}f,config-57,%{public}f,config-58,%{public}f,config-59,%{public}f,config-60,%{public}f,config-61,%{public}f,config-62,%{public}f,config-63,%{public}f\n", (uint8_t *)&v71, 0x314u);
  }
}

void CLKappaEstimatesAlgRolloverCrash::CLKappaEstimatesAlgRolloverCrash(CLKappaEstimatesAlgRolloverCrash *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  __int128 v23;

  CLKappaAlgBlock::CLKappaAlgBlock(this, a2 + 1);
  v4 = *a2;
  *(_QWORD *)v5 = *a2;
  *(_QWORD *)(v5 + *(_QWORD *)(v4 - 152)) = a2[6];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 160)) = a2[7];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 168)) = a2[8];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 176)) = a2[9];
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  v6 = v5 + 32;
  *(_QWORD *)(v5 + 48) = 0x80000000800000;
  *(_DWORD *)(v5 + 56) = 0;
  *(_QWORD *)&v7 = 0x80000000800000;
  *((_QWORD *)&v7 + 1) = 0x80000000800000;
  *(_OWORD *)(v5 + 60) = v7;
  *(_DWORD *)(v5 + 76) = 0x800000;
  *(_WORD *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 84) = 0x800000;
  *(_BYTE *)(v5 + 88) = 0;
  *(_QWORD *)(v5 + 92) = 0xFFFFFFFF00800000;
  *(_BYTE *)(v5 + 100) = 0;
  *(_QWORD *)(v5 + 104) = 0;
  *(_DWORD *)(v5 + 112) = -1;
  v8 = operator new(0x188uLL);
  v8[2] = 0;
  *v8 = off_10035E368;
  v8[1] = 0;
  sub_10024F7A8((uint64_t)(v8 + 3));
  *(_QWORD *)&v23 = v8 + 3;
  *((_QWORD *)&v23 + 1) = v8;
  sub_1000081AC((uint64_t)this + 8, &v23);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v21 = *((_QWORD *)this + 1);
  v22 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  sub_10024D3B8((uint64_t)&v21, &v23);
  sub_1000081AC(v6, &v23);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v22;
  if (v22)
  {
    v19 = (unint64_t *)&v22->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  (*(void (**)(CLKappaEstimatesAlgRolloverCrash *))(*(_QWORD *)this + 304))(this);
}

void sub_10024D394(_Unwind_Exception *a1)
{
  CLKappaAlgBlock *v1;
  uint64_t *v2;
  uint64_t v3;

  sub_10000A718(v3);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, v2);
  _Unwind_Resume(a1);
}

void *sub_10024D3B8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = *(void **)a1;
  if (result
  {
    v5 = *(_QWORD *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void CLKappaEstimatesAlgRolloverCrash::CLKappaEstimatesAlgRolloverCrash(CLKappaEstimatesAlgRolloverCrash *this)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  __int128 v20;

  *(_QWORD *)this = off_100345D50;
  *((_QWORD *)this + 15) = off_100345DF8;
  *((_QWORD *)this + 16) = off_100345EC0;
  *((_QWORD *)this + 17) = off_100345F68;
  CLKappaAlgBlock::CLKappaAlgBlock(this, (uint64_t *)off_10035DD30);
  *(_QWORD *)v2 = off_10035D830;
  *(_QWORD *)(v2 + 120) = off_10035DAD0;
  *(_QWORD *)(v2 + 128) = off_10035DC08;
  *(_QWORD *)(v2 + 32) = 0;
  v3 = v2 + 32;
  *(_QWORD *)(v2 + 136) = off_10035DCE0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = 0x80000000800000;
  *(_DWORD *)(v2 + 56) = 0;
  *(_QWORD *)&v4 = 0x80000000800000;
  *((_QWORD *)&v4 + 1) = 0x80000000800000;
  *(_OWORD *)(v2 + 60) = v4;
  *(_DWORD *)(v2 + 76) = 0x800000;
  *(_WORD *)(v2 + 80) = 0;
  *(_DWORD *)(v2 + 84) = 0x800000;
  *(_BYTE *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 92) = 0xFFFFFFFF00800000;
  *(_BYTE *)(v2 + 100) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  *(_DWORD *)(v2 + 112) = -1;
  v5 = operator new(0x188uLL);
  v5[2] = 0;
  *v5 = off_10035E368;
  v5[1] = 0;
  sub_10024F7A8((uint64_t)(v5 + 3));
  *(_QWORD *)&v20 = v5 + 3;
  *((_QWORD *)&v20 + 1) = v5;
  sub_1000081AC((uint64_t)this + 8, &v20);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v18 = *((_QWORD *)this + 1);
  v19 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  sub_10024D3B8((uint64_t)&v18, &v20);
  sub_1000081AC(v3, &v20);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v19;
  if (v19)
  {
    v16 = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  (*(void (**)(CLKappaEstimatesAlgRolloverCrash *))(*(_QWORD *)this + 304))(this);
}

void sub_10024D638(_Unwind_Exception *a1)
{
  CLKappaAlgBlock *v1;
  uint64_t v2;

  sub_10000A718(v2);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10035DD30);
  _Unwind_Resume(a1);
}

void CLKappaEstimatesAlgRolloverCrash::resetConfiguration(CLKappaEstimatesAlgRolloverCrash *this)
{
  void *v2;
  double v3;
  double v4;
  double v5;
  int v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  int v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  int v16;
  void *v17;
  double v18;
  double v19;
  double v20;
  int v21;
  void *v22;
  double v23;
  double v24;
  double v25;
  int v26;
  void *v27;
  double v28;
  double v29;
  double v30;
  int v31;
  void *v32;
  double v33;
  double v34;
  double v35;
  int v36;
  void *v37;
  double v38;
  double v39;
  double v40;
  int v41;
  void *v42;
  double v43;
  double v44;
  double v45;
  int v46;
  void *v47;
  double v48;
  double v49;
  double v50;
  int v51;
  void *v52;
  double v53;
  double v54;
  double v55;
  int v56;
  void *v57;
  double v58;
  double v59;
  double v60;
  int v61;
  void *v62;
  double v63;
  double v64;
  double v65;
  int v66;
  void *v67;
  double v68;
  double v69;
  double v70;
  int v71;
  void *v72;
  double v73;
  double v74;
  double v75;
  int v76;
  void *v77;
  double v78;
  double v79;
  double v80;
  void *v81;
  double v82;
  double v83;
  double v84;
  int v85;
  void *v86;
  double v87;
  double v88;
  double v89;
  int v90;
  void *v91;
  double v92;
  double v93;
  double v94;
  int v95;
  void *v96;
  double v97;
  double v98;
  double v99;
  int v100;
  void *v101;
  double v102;
  double v103;
  double v104;
  int v105;
  void *v106;
  double v107;
  double v108;
  double v109;
  int v110;
  void *v111;
  double v112;
  double v113;
  double v114;
  int v115;
  void *v116;
  double v117;
  double v118;
  double v119;
  int v120;
  void *v121;
  double v122;
  double v123;
  double v124;
  int v125;
  void *v126;
  double v127;
  double v128;
  double v129;
  int v130;
  void *v131;
  double v132;
  double v133;
  double v134;
  int v135;
  void *v136;
  double v137;
  double v138;
  double v139;
  int v140;
  void *v141;
  double v142;
  double v143;
  double v144;
  int v145;
  void *v146;
  double v147;
  double v148;
  double v149;
  int v150;
  void *v151;
  double v152;
  double v153;
  double v154;
  int v155;
  void *v156;
  double v157;
  double v158;
  double v159;
  int v160;
  void *v161;
  double v162;
  double v163;
  double v164;
  int v165;
  void *v166;
  double v167;
  double v168;
  double v169;
  int v170;
  void *v171;
  double v172;
  double v173;
  double v174;
  int v175;
  void *v176;
  double v177;
  double v178;
  double v179;
  int v180;
  void *v181;
  double v182;
  double v183;
  double v184;
  int v185;
  void *v186;
  double v187;
  double v188;
  double v189;
  int v190;
  void *v191;
  double v192;
  double v193;
  double v194;
  int v195;
  void *v196;
  double v197;
  double v198;
  double v199;
  int v200;
  void *v201;
  double v202;
  double v203;
  double v204;
  int v205;
  void *v206;
  double v207;
  double v208;
  double v209;
  int v210;
  void *v211;
  double v212;
  double v213;
  double v214;
  int v215;
  void *v216;
  double v217;
  double v218;
  double v219;
  int v220;
  void *v221;
  double v222;
  double v223;
  double v224;
  int v225;
  void *v226;
  double v227;
  double v228;
  double v229;
  int v230;
  void *v231;
  double v232;
  double v233;
  double v234;
  int v235;
  void *v236;
  double v237;
  double v238;
  double v239;
  int v240;
  void *v241;
  double v242;
  double v243;
  double v244;
  int v245;
  void *v246;
  double v247;
  double v248;
  double v249;
  int v250;
  void *v251;
  double v252;
  double v253;
  double v254;
  int v255;
  void *v256;
  double v257;
  double v258;
  double v259;
  int v260;
  void *v261;
  double v262;
  double v263;
  double v264;
  void *v265;
  double v266;
  double v267;
  double v268;
  void *v269;
  double v270;
  double v271;
  double v272;
  void *v273;
  double v274;
  double v275;
  double v276;
  int v277;
  void *v278;
  double v279;
  double v280;
  double v281;
  void *v282;
  double v283;
  double v284;
  double v285;
  int v286;
  id v287;
  __int128 v288;
  int v289;
  int v290;
  int v291;
  int v292;
  int v293;
  int v294;
  int v295;
  int v296;
  __int128 v297;
  int v298;
  int v299;
  int v300;
  int v301;
  __int128 v302;
  int v303;
  int v304;
  int v305;
  int v306;
  int v307;
  int v308;
  int v309;
  int v310;
  int v311;
  int v312;
  int v313;
  int v314;
  int v315;
  int v316;
  int v317;
  int v318;
  int v319;
  int v320;
  int v321;
  int v322;
  int v323;
  int v324;
  int v325;
  int v326;
  int v327;
  int v328;
  int v329;
  int v330;
  int v331;
  int v332;
  int v333;
  int v334;
  __int128 v335;
  int v336;
  int v337;
  int v338;

  v287 = (id)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration configBaseKey:forFeatureMode:](CSPersistentConfiguration, "configBaseKey:forFeatureMode:", "FeaturesAlgRolloverCrashConfig", *((unsigned __int8 *)this + 24)));
  v292 = 1176255488;
  v297 = xmmword_1002ED1B0;
  v302 = xmmword_1002ED1D0;
  v327 = 1176255488;
  v335 = xmmword_1002ED260;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v3) = 0.5;
  LODWORD(v4) = 3.0;
  LODWORD(v5) = 1193033728;
  objc_msgSend(v2, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 0, v287, v3, v5, v4);
  LODWORD(v288) = v6;

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v8) = 1091829760;
  LODWORD(v9) = 0.5;
  LODWORD(v10) = 1193033728;
  objc_msgSend(v7, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 1, v287, v9, v10, v8);
  DWORD1(v288) = v11;

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v13) = 1120403456;
  LODWORD(v14) = 1145569280;
  LODWORD(v15) = 1128792064;
  objc_msgSend(v12, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 3, v287, v13, v14, v15);
  HIDWORD(v288) = v16;

  v17 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v18) = 1120403456;
  LODWORD(v19) = 10.0;
  LODWORD(v20) = 15.0;
  objc_msgSend(v17, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 2, v287, v19, v18, v20);
  DWORD2(v288) = v21;

  v22 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v23) = 1008981770;
  LODWORD(v24) = 1045220557;
  LODWORD(v25) = 1022739087;
  objc_msgSend(v22, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 4, v287, v23, v24, v25);
  v289 = v26;

  v27 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v28) = 0.5;
  LODWORD(v29) = 3.0;
  LODWORD(v30) = 1193033728;
  objc_msgSend(v27, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 5, v287, v28, v30, v29);
  v293 = v31;

  v32 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v33) = 2139095039;
  LODWORD(v34) = 0.5;
  LODWORD(v35) = 2139095039;
  objc_msgSend(v32, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 6, v287, v34, v33, v35);
  v294 = v36;

  v37 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v38) = 1120403456;
  LODWORD(v39) = 1145569280;
  LODWORD(v40) = 1133903872;
  objc_msgSend(v37, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 8, v287, v38, v39, v40);
  v296 = v41;

  v42 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v43) = 1120403456;
  LODWORD(v44) = 10.0;
  LODWORD(v45) = 15.0;
  objc_msgSend(v42, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 7, v287, v44, v43, v45);
  v295 = v46;

  v47 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v48) = 1008981770;
  LODWORD(v49) = 1045220557;
  LODWORD(v50) = 1022739087;
  objc_msgSend(v47, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 9, v287, v48, v49, v50);
  LODWORD(v297) = v51;

  v52 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v53) = 1120403456;
  LODWORD(v54) = 0;
  LODWORD(v55) = 8.0;
  objc_msgSend(v52, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 22, v287, v54, v53, v55);
  v303 = v56;

  v57 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v58) = 1145569280;
  LODWORD(v59) = 1125515264;
  LODWORD(v60) = 0;
  objc_msgSend(v57, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 23, v287, v60, v58, v59);
  v304 = v61;

  v62 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v63) = 2139095039;
  LODWORD(v64) = 0.5;
  LODWORD(v65) = 3.0;
  objc_msgSend(v62, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 24, v287, v64, v63, v65);
  v298 = v66;

  v67 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v68) = 2139095039;
  LODWORD(v69) = 10.0;
  LODWORD(v70) = 2139095039;
  objc_msgSend(v67, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 25, v287, v69, v68, v70);
  v299 = v71;

  v72 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v73) = 1120403456;
  LODWORD(v74) = 1145569280;
  LODWORD(v75) = 1133903872;
  objc_msgSend(v72, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 27, v287, v73, v74, v75);
  v301 = v76;

  v77 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v78) = 1120403456;
  LODWORD(v79) = 10.0;
  LODWORD(v80) = 15.0;
  objc_msgSend(v77, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 26, v287, v79, v78, v80);

  v81 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v82) = 1008981770;
  LODWORD(v83) = 1045220557;
  LODWORD(v84) = 1022739087;
  objc_msgSend(v81, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 28, v287, v82, v83, v84);
  LODWORD(v302) = v85;

  v86 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v87) = 1120403456;
  LODWORD(v88) = 1093533696;
  LODWORD(v89) = 0;
  objc_msgSend(v86, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 10, v287, v89, v87, v88);
  v305 = v90;

  v91 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v92) = 0;
  LODWORD(v93) = 20.0;
  LODWORD(v94) = 0.40625;
  objc_msgSend(v91, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 11, v287, v92, v93, v94);
  v306 = v95;

  v96 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v97) = 1165623296;
  LODWORD(v98) = 1123680256;
  LODWORD(v99) = 0;
  objc_msgSend(v96, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 12, v287, v99, v97, v98);
  v307 = v100;

  v101 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v102) = 1165623296;
  LODWORD(v103) = 1134723072;
  LODWORD(v104) = 0;
  objc_msgSend(v101, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 13, v287, v104, v102, v103);
  v308 = v105;

  v106 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v107) = 1120403456;
  LODWORD(v108) = 1093533696;
  LODWORD(v109) = 0;
  objc_msgSend(v106, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 14, v287, v109, v107, v108);
  v309 = v110;

  v111 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v112) = 0;
  LODWORD(v113) = 20.0;
  LODWORD(v114) = 0.40625;
  objc_msgSend(v111, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 15, v287, v112, v113, v114);
  v310 = v115;

  v116 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v117) = 1165623296;
  LODWORD(v118) = 1109393408;
  LODWORD(v119) = 0;
  objc_msgSend(v116, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 16, v287, v119, v117, v118);
  v311 = v120;

  v121 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v122) = 1165623296;
  LODWORD(v123) = 1120403456;
  LODWORD(v124) = 0;
  objc_msgSend(v121, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 17, v287, v124, v122, v123);
  v312 = v125;

  v126 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v127) = 1120403456;
  LODWORD(v128) = 1093533696;
  LODWORD(v129) = 0;
  objc_msgSend(v126, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 18, v287, v129, v127, v128);
  v313 = v130;

  v131 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v132) = 0;
  LODWORD(v133) = 20.0;
  LODWORD(v134) = 0.40625;
  objc_msgSend(v131, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 19, v287, v132, v133, v134);
  v314 = v135;

  v136 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v137) = 1061997773;
  LODWORD(v138) = 0;
  LODWORD(v139) = 2.0;
  objc_msgSend(v136, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 20, v287, v138, v139, v137);
  v315 = v140;

  v141 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v142) = 1063675494;
  LODWORD(v143) = 0;
  LODWORD(v144) = 2.0;
  objc_msgSend(v141, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 21, v287, v143, v144, v142);
  v316 = v145;

  v146 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v147) = 0.5;
  LODWORD(v148) = 3.0;
  LODWORD(v149) = 1193033728;
  objc_msgSend(v146, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 29, v287, v147, v149, v148);
  v317 = v150;

  v151 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v152) = 1091829760;
  LODWORD(v153) = 0.5;
  LODWORD(v154) = 1193033728;
  objc_msgSend(v151, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 30, v287, v153, v154, v152);
  v318 = v155;

  v156 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v157) = 1120403456;
  LODWORD(v158) = 1112014848;
  LODWORD(v159) = 10.0;
  objc_msgSend(v156, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 31, v287, v159, v157, v158);
  v319 = v160;

  v161 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v162) = 1120403456;
  LODWORD(v163) = 1145569280;
  LODWORD(v164) = 1133903872;
  objc_msgSend(v161, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 32, v287, v162, v163, v164);
  v320 = v165;

  v166 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v167) = 1008981770;
  LODWORD(v168) = 1045220557;
  LODWORD(v169) = 1034147594;
  objc_msgSend(v166, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 33, v287, v167, v168, v169);
  v321 = v170;

  v171 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v172) = 1120403456;
  LODWORD(v173) = 1148846080;
  LODWORD(v174) = 1203982336;
  objc_msgSend(v171, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 34, v287, v172, v174, v173);
  v322 = v175;

  v176 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v177) = 0.5;
  LODWORD(v178) = 3.0;
  LODWORD(v179) = 1193033728;
  objc_msgSend(v176, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 37, v287, v177, v179, v178);
  v328 = v180;

  v181 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v182) = 2139095039;
  LODWORD(v183) = 0.5;
  LODWORD(v184) = 2139095039;
  objc_msgSend(v181, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 38, v287, v183, v182, v184);
  v329 = v185;

  v186 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v187) = 1120403456;
  LODWORD(v188) = 1112014848;
  LODWORD(v189) = 10.0;
  objc_msgSend(v186, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 39, v287, v189, v187, v188);
  v330 = v190;

  v191 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v192) = 1120403456;
  LODWORD(v193) = 1145569280;
  LODWORD(v194) = 1133903872;
  objc_msgSend(v191, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 40, v287, v192, v193, v194);
  v331 = v195;

  v196 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v197) = 1008981770;
  LODWORD(v198) = 1045220557;
  LODWORD(v199) = 1034147594;
  objc_msgSend(v196, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 41, v287, v197, v198, v199);
  v332 = v200;

  v201 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v202) = 1120403456;
  LODWORD(v203) = 1148846080;
  LODWORD(v204) = 1203982336;
  objc_msgSend(v201, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 42, v287, v202, v204, v203);
  v333 = v205;

  v206 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v207) = 1120403456;
  LODWORD(v208) = 0;
  LODWORD(v209) = 8.0;
  objc_msgSend(v206, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 35, v287, v208, v207, v209);
  v323 = v210;

  v211 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v212) = 1120403456;
  LODWORD(v213) = 0;
  LODWORD(v214) = 8.0;
  objc_msgSend(v211, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 43, v287, v213, v212, v214);
  v334 = v215;

  v216 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v217) = 1145569280;
  LODWORD(v218) = 1125515264;
  LODWORD(v219) = 0;
  objc_msgSend(v216, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 36, v287, v219, v217, v218);
  v324 = v220;

  v221 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v222) = 1145569280;
  LODWORD(v223) = 1125515264;
  LODWORD(v224) = 0;
  objc_msgSend(v221, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 44, v287, v224, v222, v223);
  LODWORD(v335) = v225;

  v226 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v227) = 1148846080;
  LODWORD(v228) = 1123024896;
  LODWORD(v229) = -1138501878;
  objc_msgSend(v226, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 45, v287, v229, v227, v228);
  v336 = v230;

  v231 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v232) = 1148846080;
  LODWORD(v233) = 1138819072;
  LODWORD(v234) = -1138501878;
  objc_msgSend(v231, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 46, v287, v234, v232, v233);
  v337 = v235;

  v236 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v237) = 1120403456;
  LODWORD(v238) = 7.0;
  LODWORD(v239) = -1138501878;
  objc_msgSend(v236, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 47, v287, v239, v237, v238);
  v338 = v240;

  v241 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v242) = 5.0;
  LODWORD(v243) = 1176256512;
  LODWORD(v244) = 1176255488;
  objc_msgSend(v241, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 48, v287, v242, v243, v244);
  v290 = v245;

  v246 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v247) = 1112014848;
  LODWORD(v248) = 0;
  LODWORD(v249) = 1176256512;
  objc_msgSend(v246, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 49, v287, v248, v249, v247);
  v291 = v250;

  v251 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v252) = 1108082688;
  LODWORD(v253) = 5.0;
  LODWORD(v254) = 1176256512;
  objc_msgSend(v251, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 50, v287, v253, v254, v252);
  v325 = v255;

  v256 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v257) = 1112014848;
  LODWORD(v258) = 0;
  LODWORD(v259) = 1176256512;
  objc_msgSend(v256, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 51, v287, v258, v259, v257);
  v326 = v260;

  v261 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v262) = 5.0;
  LODWORD(v263) = 1176256512;
  LODWORD(v264) = 1176255488;
  objc_msgSend(v261, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 52, v287, v262, v263, v264);

  v265 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v266) = 1112014848;
  LODWORD(v267) = 0;
  LODWORD(v268) = 1176256512;
  objc_msgSend(v265, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 53, v287, v267, v268, v266);

  v269 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v270) = 1108082688;
  LODWORD(v271) = 5.0;
  LODWORD(v272) = 1176256512;
  objc_msgSend(v269, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 54, v287, v271, v272, v270);

  v273 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v274) = 1112014848;
  LODWORD(v275) = 0;
  LODWORD(v276) = 1176256512;
  objc_msgSend(v273, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 55, v287, v275, v276, v274);
  DWORD2(v297) = v277;

  v278 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v279) = 5.0;
  LODWORD(v280) = 1176256512;
  LODWORD(v281) = 1176255488;
  objc_msgSend(v278, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 56, v287, v279, v280, v281);

  v282 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v283) = 0;
  LODWORD(v284) = 1176256512;
  LODWORD(v285) = 1176255488;
  objc_msgSend(v282, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 57, v287, v283, v284, v285);
  v300 = v286;

  CLKappaEstimatesAlgRolloverCrash::setConfig((uint64_t)this, &v288);
}

void sub_10024E3A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

double CLKappaEstimatesAlgRolloverCrash::setConfig(uint64_t a1, __int128 *a2)
{
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  NSObject *v16;
  float *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  NSObject *v23;
  float *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  NSObject *v30;
  float *v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  NSObject *v46;
  float *v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  NSObject *v53;
  float *v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  NSObject *v63;
  float *v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  NSObject *v73;
  float *v74;
  double v75;
  double v76;
  double v77;
  NSObject *v78;
  double result;
  float *v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  int v96;
  double v97;
  __int16 v98;
  double v99;
  __int16 v100;
  double v101;
  __int16 v102;
  double v103;
  __int16 v104;
  double v105;
  __int16 v106;
  double v107;
  __int16 v108;
  double v109;
  __int16 v110;
  double v111;
  __int16 v112;
  double v113;
  __int16 v114;
  double v115;
  __int16 v116;
  double v117;
  __int16 v118;
  double v119;
  __int16 v120;
  double v121;
  __int16 v122;
  double v123;
  __int16 v124;
  double v125;

  v3 = *(_OWORD **)(a1 + 32);
  v4 = *a2;
  v5 = a2[1];
  v6 = a2[3];
  v3[3] = a2[2];
  v3[4] = v6;
  v3[1] = v4;
  v3[2] = v5;
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[7];
  v3[7] = a2[6];
  v3[8] = v9;
  v3[5] = v7;
  v3[6] = v8;
  v10 = a2[8];
  v11 = a2[9];
  v12 = a2[11];
  v3[11] = a2[10];
  v3[12] = v12;
  v3[9] = v10;
  v3[10] = v11;
  v13 = a2[12];
  v14 = a2[13];
  v15 = a2[14];
  *(_OWORD *)((char *)v3 + 252) = *(__int128 *)((char *)a2 + 236);
  v3[14] = v14;
  v3[15] = v15;
  v3[13] = v13;
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10035E338);
  v16 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v17 = *(float **)(a1 + 32);
    v18 = v17[4];
    v19 = v17[5];
    v20 = v17[7];
    v21 = v17[6];
    v22 = v17[8];
    v96 = 134219008;
    v97 = v18;
    v98 = 2048;
    v99 = v19;
    v100 = 2048;
    v101 = v20;
    v102 = 2048;
    v103 = v21;
    v104 = 2048;
    v105 = v22;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "[RC] config-1,%f,config-2,%f,config-3,%f,config-4,%f,config-5,%f", (uint8_t *)&v96, 0x34u);
  }
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10035E338);
  v23 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v24 = *(float **)(a1 + 32);
    v25 = v24[12];
    v26 = v24[13];
    v27 = v24[15];
    v28 = v24[14];
    v29 = v24[16];
    v96 = 134219008;
    v97 = v25;
    v98 = 2048;
    v99 = v26;
    v100 = 2048;
    v101 = v27;
    v102 = 2048;
    v103 = v28;
    v104 = 2048;
    v105 = v29;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "[RC] config-6,%f,config-7,%f,config-8,%f,config-9,%f,config-10,%f", (uint8_t *)&v96, 0x34u);
  }
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10035E338);
  v30 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v31 = *(float **)(a1 + 32);
    v32 = v31[30];
    v33 = v31[31];
    v34 = v31[32];
    v35 = v31[33];
    v36 = v31[34];
    v37 = v31[35];
    v38 = v31[36];
    v39 = v31[37];
    v40 = v31[38];
    v41 = v31[39];
    v42 = v31[40];
    v43 = v31[41];
    v44 = v31[28];
    v45 = v31[29];
    v96 = 134221312;
    v97 = v32;
    v98 = 2048;
    v99 = v33;
    v100 = 2048;
    v101 = v34;
    v102 = 2048;
    v103 = v35;
    v104 = 2048;
    v105 = v36;
    v106 = 2048;
    v107 = v37;
    v108 = 2048;
    v109 = v38;
    v110 = 2048;
    v111 = v39;
    v112 = 2048;
    v113 = v40;
    v114 = 2048;
    v115 = v41;
    v116 = 2048;
    v117 = v42;
    v118 = 2048;
    v119 = v43;
    v120 = 2048;
    v121 = v44;
    v122 = 2048;
    v123 = v45;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "[RC] config-11,%f,config-12,%f,config-13,%f,config-14,%f,config-15,%f,config-16,%f,config-17,%f,config-18,%f,config-19,%f,config-20,%f,config-21,%f,config-22,%f,config-23,%f,config-24,%f", (uint8_t *)&v96, 0x8Eu);
  }
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10035E338);
  v46 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v47 = *(float **)(a1 + 32);
    v48 = v47[20];
    v49 = v47[21];
    v50 = v47[23];
    v51 = v47[22];
    v52 = v47[24];
    v96 = 134219008;
    v97 = v48;
    v98 = 2048;
    v99 = v49;
    v100 = 2048;
    v101 = v50;
    v102 = 2048;
    v103 = v51;
    v104 = 2048;
    v105 = v52;
    _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "[RC] config-25,%f,config-26,%f,config-27,%f,config-28,%f,config-29,%f", (uint8_t *)&v96, 0x34u);
  }
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10035E338);
  v53 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v54 = *(float **)(a1 + 32);
    v55 = v54[42];
    v56 = v54[43];
    v57 = v54[44];
    v58 = v54[45];
    v59 = v54[46];
    v60 = v54[47];
    v61 = v54[48];
    v62 = v54[49];
    v96 = 134219776;
    v97 = v55;
    v98 = 2048;
    v99 = v56;
    v100 = 2048;
    v101 = v57;
    v102 = 2048;
    v103 = v58;
    v104 = 2048;
    v105 = v59;
    v106 = 2048;
    v107 = v60;
    v108 = 2048;
    v109 = v61;
    v110 = 2048;
    v111 = v62;
    _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "[RC] config-30,%f,config-31,%f,config-32,%f,config-33,%f,config-34,%f,config-35,%f,config-36,%f,config-37,%f", (uint8_t *)&v96, 0x52u);
  }
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10035E338);
  v63 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v64 = *(float **)(a1 + 32);
    v65 = v64[53];
    v66 = v64[54];
    v67 = v64[55];
    v68 = v64[56];
    v69 = v64[57];
    v70 = v64[58];
    v71 = v64[59];
    v72 = v64[60];
    v96 = 134219776;
    v97 = v65;
    v98 = 2048;
    v99 = v66;
    v100 = 2048;
    v101 = v67;
    v102 = 2048;
    v103 = v68;
    v104 = 2048;
    v105 = v69;
    v106 = 2048;
    v107 = v70;
    v108 = 2048;
    v109 = v71;
    v110 = 2048;
    v111 = v72;
    _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "[RC] config-38,%f,config-39,%f,config-40,%f,config-41,%f,config-42,%f,config-43,%f,config-44,%f,config-45,%f", (uint8_t *)&v96, 0x52u);
  }
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10035E338);
  v73 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v74 = *(float **)(a1 + 32);
    v75 = v74[64];
    v76 = v74[65];
    v77 = v74[66];
    v96 = 134218496;
    v97 = v75;
    v98 = 2048;
    v99 = v76;
    v100 = 2048;
    v101 = v77;
    _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEBUG, "[RC] config-46,%f,config-47,%f,config-48,%f", (uint8_t *)&v96, 0x20u);
  }
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10035E338);
  v78 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v80 = *(float **)(a1 + 32);
    v81 = v80[9];
    v82 = v80[10];
    v83 = v80[50];
    v84 = v80[51];
    v85 = v80[17];
    v86 = v80[18];
    v87 = v80[61];
    v88 = v80[62];
    v89 = v80[25];
    v90 = v80[26];
    v91 = v80[11];
    v92 = v80[52];
    v93 = v80[19];
    v94 = v80[63];
    v95 = v80[27];
    v96 = 134221568;
    v97 = v81;
    v98 = 2048;
    v99 = v82;
    v100 = 2048;
    v101 = v83;
    v102 = 2048;
    v103 = v84;
    v104 = 2048;
    v105 = v85;
    v106 = 2048;
    v107 = v86;
    v108 = 2048;
    v109 = v87;
    v110 = 2048;
    v111 = v88;
    v112 = 2048;
    v113 = v89;
    v114 = 2048;
    v115 = v90;
    v116 = 2048;
    v117 = v91;
    v118 = 2048;
    v119 = v92;
    v120 = 2048;
    v121 = v93;
    v122 = 2048;
    v123 = v94;
    v124 = 2048;
    v125 = v95;
    _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEBUG, "[RC] config-49,%f,config-50,%f,config-51,%f,config-52,%f,config-53,%f,,config-54,%f,config-55,%f,config-56,%f,config-57,%f,config-58,%f,config-59,%f,config-60,%f,config-61,%f,config-62,%f,config-63,%f", (uint8_t *)&v96, 0x98u);
  }
  return result;
}

uint64_t CLKappaEstimatesAlgRolloverCrash::reset(CLKappaEstimatesAlgRolloverCrash *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 24))(*((_QWORD *)this + 4));
}

uint64_t CLKappaEstimatesAlgRolloverCrash::lowSensitivityDetector(CLKappaEstimatesAlgRolloverCrash *this, int a2)
{
  float *v2;
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  float *v16;
  float *v17;
  float *v18;
  float *v19;
  float *v20;
  float *v21;
  float *v22;
  float *v23;
  float *v24;
  float v25;
  float v26;
  float v27;
  int v28;
  _BOOL4 v29;
  float v30;
  int v31;
  _BOOL4 v32;
  int v33;
  unsigned int v34;
  float v35;

  v2 = (float *)*((_QWORD *)this + 4);
  v3 = v2 + 53;
  v4 = v2 + 54;
  v5 = v2 + 55;
  v6 = v2 + 56;
  v7 = v2 + 57;
  v8 = v2 + 58;
  v9 = v2 + 59;
  v10 = v2 + 61;
  v11 = v2 + 62;
  v12 = v2 + 63;
  v13 = v2 + 42;
  v14 = v2 + 43;
  v15 = v2 + 44;
  v16 = v2 + 45;
  v17 = v2 + 46;
  v18 = v2 + 47;
  v19 = v2 + 48;
  v20 = v2 + 51;
  v21 = v2 + 52;
  if (a2)
  {
    v10 = v2 + 50;
    v22 = v2 + 49;
  }
  else
  {
    v22 = v2 + 60;
  }
  if (a2)
  {
    v9 = v19;
    v8 = v18;
    v7 = v17;
    v6 = v16;
    v5 = v15;
    v4 = v14;
    v23 = v13;
  }
  else
  {
    v23 = v3;
  }
  if (a2)
  {
    v11 = v20;
    v24 = v21;
  }
  else
  {
    v24 = v12;
  }
  v25 = *v11;
  v26 = *((float *)this + 13);
  v27 = *((float *)this + 15);
  if (v26 >= *v6 && v27 >= *v5)
  {
    v29 = 1;
  }
  else
  {
    v28 = *((unsigned __int8 *)this + 100);
    if (!*((_BYTE *)this + 100))
      goto LABEL_20;
    v29 = v27 >= *v10 && *((float *)this + 26) >= v25;
  }
  v28 = (a2 ^ 1) & v29;
  if (((a2 ^ 1) & 1) == 0 && v29)
    v28 = *((_BYTE *)this + 59) != 0;
LABEL_20:
  if (*((float *)this + 16) < *v7)
    v28 = 0;
  v30 = *((float *)this + 12);
  if (v30 >= *v23)
  {
    if (v30 >= *v4)
      v31 = 2;
    else
      v31 = 1;
  }
  else
  {
    v31 = 0;
  }
  if (*((_BYTE *)this + 80) && *((float *)this + 21) >= *v8)
  {
    v35 = *v22;
    v32 = v26 >= *v22;
    if (v27 < *v9)
      v32 = 0;
    if (v26 < v35 || v27 < *v24)
    {
      v34 = 0;
    }
    else
    {
      v34 = *((unsigned __int8 *)this + 100);
      if (*((_BYTE *)this + 100))
        v34 = *((float *)this + 26) >= v25;
    }
    v33 = 1;
  }
  else
  {
    v32 = 0;
    v33 = 0;
    v34 = 0;
  }
  if (v31 == 2)
    return v28 | v32 | v34;
  if (v31 == 1)
    return v28 & v33;
  return 0;
}

void CLKappaEstimatesAlgRolloverCrash::epochFinalize(CLKappaEstimatesAlgRolloverCrash *this, uint64_t a2)
{
  NSObject *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  NSObject *v14;
  float v15;
  float v16;
  float v17;
  _BOOL4 v18;
  float v20;
  _BOOL4 v21;
  BOOL v22;
  _BOOL4 v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  _BOOL4 v30;
  int v31;
  float *v32;
  _BOOL4 v33;
  int v34;
  int v35;
  int v36;
  float v37;
  int v38;
  NSObject *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  NSObject *v47;
  uint64_t v48;
  int v49;
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;

  if (*((_BYTE *)this + 57))
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_10035E338);
    v4 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v49) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[RC] using audio thresholds", (uint8_t *)&v49, 2u);
    }
    v5 = (float *)*((_QWORD *)this + 4);
    v6 = v5 + 4;
    v7 = v5 + 5;
    v8 = v5 + 6;
    v9 = v5 + 7;
    v10 = v5 + 8;
    v11 = v5 + 9;
    v12 = v5 + 10;
    v13 = v5 + 11;
  }
  else
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_10035E338);
    v14 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v49) = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "[RC] without audio thresholds", (uint8_t *)&v49, 2u);
    }
    v5 = (float *)*((_QWORD *)this + 4);
    v6 = v5 + 12;
    v7 = v5 + 13;
    v8 = v5 + 14;
    v9 = v5 + 15;
    v10 = v5 + 16;
    v11 = v5 + 17;
    v12 = v5 + 18;
    v13 = v5 + 19;
  }
  v15 = *v12;
  v16 = *((float *)this + 13);
  v17 = *((float *)this + 15);
  v18 = v17 >= *v11;
  if (v16 < *v9 || v17 < *v8)
  {
    if (!*((_BYTE *)this + 100) || *((float *)this + 26) < v15)
      v18 = 0;
  }
  else
  {
    v18 = 1;
  }
  if (!*((_BYTE *)this + 80))
  {
    v21 = 0;
LABEL_31:
    v23 = 0;
    goto LABEL_32;
  }
  v20 = v5[29];
  v21 = v16 >= v20 && v17 >= v5[28];
  v22 = v17 < *v13 || v16 < v20;
  if (v22 || !*((_BYTE *)this + 100))
    goto LABEL_31;
  v23 = *((float *)this + 26) >= v15;
LABEL_32:
  v24 = *v6;
  v25 = *v7;
  v26 = *v10;
  v27 = CLSafetyAlgorithmsMath::computeSigmoidalThreshold(v5 + 30, *((float *)this + 12));
  v28 = CLSafetyAlgorithmsMath::computeSigmoidalThreshold((float *)(*((_QWORD *)this + 4) + 136), *((float *)this + 12));
  v29 = CLSafetyAlgorithmsMath::computeSigmoidalThreshold((float *)(*((_QWORD *)this + 4) + 152), *((float *)this + 12));
  v30 = *((float *)this + 17) >= v27 && *((float *)this + 18) >= v28 && *((float *)this + 19) >= v29;
  *((_BYTE *)this + 58) = v30;
  if (!*((_BYTE *)this + 56))
    v30 = 0;
  v31 = *((_DWORD *)this + 24);
  v33 = 0;
  if (v31 != -1)
  {
    v32 = (float *)*((_QWORD *)this + 4);
    if (v32[64] > (float)v31 && *((float *)this + 21) < v32[65] && *((float *)this + 23) < v32[66])
      v33 = 1;
  }
  v34 = v30 && !v33;
  *((_BYTE *)this + 59) = v34;
  if (!*((_BYTE *)this + 57))
    v34 = 1;
  v35 = v18 & v34;
  if (*((float *)this + 16) >= v26)
    v36 = v35;
  else
    v36 = 0;
  v37 = *((float *)this + 12);
  if (v37 >= v24)
  {
    if (v37 >= v25)
      v38 = 2;
    else
      v38 = 1;
  }
  else
  {
    v38 = 0;
  }
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10035E338);
  v39 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
  {
    v40 = *((unsigned __int8 *)this + 108);
    v41 = *((unsigned __int8 *)this + 111);
    v42 = *((unsigned __int8 *)this + 109);
    v43 = *((_DWORD *)this + 28);
    v49 = 67109888;
    v50 = v40;
    v51 = 1024;
    v52 = v41;
    v53 = 1024;
    v54 = v42;
    v55 = 1024;
    v56 = v43;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "[RC] force %d %d %d re %d", (uint8_t *)&v49, 0x1Au);
  }
  if (*((_BYTE *)this + 111))
  {
    *((_BYTE *)this + 111) = 0;
    v36 = 1;
  }
  v44 = *((_DWORD *)this + 28);
  if (v44 != -1)
  {
    *((_DWORD *)this + 28) = -1;
    v38 = v44;
  }
  if (v38 == 2)
  {
    v45 = v36 | v21 | v23;
  }
  else if (v38 == 1)
  {
    if (*((_BYTE *)this + 80))
      v45 = v36;
    else
      v45 = 0;
  }
  else
  {
    v45 = 0;
  }
  v46 = CLKappaEstimatesAlgRolloverCrash::lowSensitivityDetector(this, *((unsigned __int8 *)this + 57));
  if (*((_BYTE *)this + 108))
  {
    *((_BYTE *)this + 108) = 0;
    v45 = 1;
  }
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10035E338);
  v47 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEFAULT))
  {
    v49 = 67240704;
    v50 = v45;
    v51 = 1026;
    v52 = v38;
    v53 = 1026;
    v54 = v46;
    _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "[RC] de %{public}d re %{public}d low %{public}d", (uint8_t *)&v49, 0x14u);
  }
  v48 = *((_QWORD *)this + 4);
  *(_BYTE *)(v48 + 272) = v45;
  *(_QWORD *)(v48 + 280) = a2;
  *(_BYTE *)(v48 + 273) = v46;
  *(_QWORD *)(v48 + 288) = *((_QWORD *)this + 6);
  *(_WORD *)(v48 + 296) = *((_WORD *)this + 28);
  *(_QWORD *)(v48 + 300) = *(_QWORD *)((char *)this + 60);
  *(_BYTE *)(v48 + 308) = *((_BYTE *)this + 80);
  *(_DWORD *)(v48 + 312) = v38;
  *(_BYTE *)(v48 + 316) = 0;
  *(_QWORD *)(v48 + 320) = *(_QWORD *)((char *)this + 68);
  *(_DWORD *)(v48 + 328) = *((_DWORD *)this + 19);
  *(float *)(v48 + 332) = v27;
  *(float *)(v48 + 336) = v28;
  *(float *)(v48 + 340) = v29;
  *(_BYTE *)(v48 + 344) = *((_BYTE *)this + 58);
  *(_BYTE *)(v48 + 345) = *((_BYTE *)this + 59);
  *(_BYTE *)(v48 + 346) = *((_BYTE *)this + 81);
  *(_DWORD *)(v48 + 348) = *((_DWORD *)this + 24);
  *(_BYTE *)(v48 + 352) = v33;
  *(_DWORD *)(v48 + 356) = *((_DWORD *)this + 21);
  *(_DWORD *)(v48 + 360) = *((_DWORD *)this + 23);
}

void `virtual thunk to'CLKappaEstimatesAlgRolloverCrash::epochFinalize(CLKappaEstimatesAlgRolloverCrash *this, uint64_t a2)
{
  CLKappaEstimatesAlgRolloverCrash::epochFinalize((CLKappaEstimatesAlgRolloverCrash *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)), a2);
}

float CLKappaEstimatesAlgRolloverCrash::feedFeatures(uint64_t a1, uint64_t a2)
{
  float result;

  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 88);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 92) = result;
  return result;
}

{
  BOOL v2;
  float result;

  if (*(_BYTE *)(a1 + 109))
  {
    *(_BYTE *)(a1 + 109) = 0;
    v2 = 1;
  }
  else
  {
    v2 = *(_BYTE *)(a2 + 52) != 0;
  }
  *(_BYTE *)(a1 + 80) = v2;
  result = *(float *)(a2 + 32);
  *(float *)(a1 + 84) = result;
  return result;
}

{
  float result;
  int v3;

  result = *(float *)(a2 + 20);
  v3 = *(_DWORD *)(a2 + 28);
  *(float *)(a1 + 60) = result;
  *(_DWORD *)(a1 + 64) = v3;
  return result;
}

{
  float result;

  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 12);
  *(_BYTE *)(a1 + 100) = *(_BYTE *)(a2 + 16);
  result = *(float *)(a2 + 40);
  *(float *)(a1 + 104) = result;
  return result;
}

float `virtual thunk to'CLKappaEstimatesAlgRolloverCrash::feedFeatures(_QWORD *a1, uint64_t a2)
{
  char *v2;
  float result;

  v2 = (char *)a1 + *(_QWORD *)(*a1 - 32);
  *((_DWORD *)v2 + 12) = *(_DWORD *)(a2 + 88);
  result = *(float *)(a2 + 16);
  *((float *)v2 + 23) = result;
  return result;
}

{
  float *v2;
  BOOL v3;
  float result;

  v2 = (float *)((char *)a1 + *(_QWORD *)(*a1 - 56));
  if (*((_BYTE *)v2 + 109))
  {
    *((_BYTE *)v2 + 109) = 0;
    v3 = 1;
  }
  else
  {
    v3 = *(_BYTE *)(a2 + 52) != 0;
  }
  *((_BYTE *)v2 + 80) = v3;
  result = *(float *)(a2 + 32);
  v2[21] = result;
  return result;
}

{
  float *v2;
  float result;
  int v4;

  v2 = (float *)((char *)a1 + *(_QWORD *)(*a1 - 104));
  result = *(float *)(a2 + 20);
  v4 = *(_DWORD *)(a2 + 28);
  v2[15] = result;
  *((_DWORD *)v2 + 16) = v4;
  return result;
}

{
  char *v2;
  float result;

  v2 = (char *)a1 + *(_QWORD *)(*a1 - 88);
  *((_DWORD *)v2 + 13) = *(_DWORD *)(a2 + 12);
  v2[100] = *(_BYTE *)(a2 + 16);
  result = *(float *)(a2 + 40);
  *((float *)v2 + 26) = result;
  return result;
}

uint64_t CLKappaEstimatesAlgRolloverCrash::feedFeatures(uint64_t result, uint64_t a2)
{
  float v2;

  *(_BYTE *)(result + 56) = *(_BYTE *)(a2 + 49);
  v2 = *(float *)(a2 + 8);
  *(_BYTE *)(result + 57) = v2 > 0.0;
  *(_QWORD *)(result + 68) = *(_QWORD *)(a2 + 32);
  *(float *)(result + 76) = v2;
  return result;
}

_QWORD *`virtual thunk to'CLKappaEstimatesAlgRolloverCrash::feedFeatures(_QWORD *result, uint64_t a2)
{
  char *v2;
  float v3;

  v2 = (char *)result + *(_QWORD *)(*result - 80);
  v2[56] = *(_BYTE *)(a2 + 49);
  v3 = *(float *)(a2 + 8);
  v2[57] = v3 > 0.0;
  *(_QWORD *)(v2 + 68) = *(_QWORD *)(a2 + 32);
  *((float *)v2 + 19) = v3;
  return result;
}

uint64_t CLKappaEstimatesAlgRolloverCrash::feedFeatures(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 96) = *a2;
  return result;
}

_QWORD *`virtual thunk to'CLKappaEstimatesAlgRolloverCrash::feedFeatures(_QWORD *result, _DWORD *a2)
{
  *(_DWORD *)((char *)result + *(_QWORD *)(*result - 136) + 96) = *a2;
  return result;
}

void sub_10024F564(CLKappaAlgBlock *a1)
{
  *(_QWORD *)a1 = off_10035D830;
  *((_QWORD *)a1 + 15) = off_10035DAD0;
  *((_QWORD *)a1 + 16) = off_10035DC08;
  *((_QWORD *)a1 + 17) = off_10035DCE0;
  sub_10000A718((uint64_t)a1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(a1, (uint64_t *)off_10035DD30);
}

void sub_10024F5B4(CLKappaAlgBlock *a1)
{
  *(_QWORD *)a1 = off_10035D830;
  *((_QWORD *)a1 + 15) = off_10035DAD0;
  *((_QWORD *)a1 + 16) = off_10035DC08;
  *((_QWORD *)a1 + 17) = off_10035DCE0;
  sub_10000A718((uint64_t)a1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(a1, (uint64_t *)off_10035DD30);
  operator delete();
}

void sub_10024F63C(_QWORD *a1)
{
  CLKappaAlgBlock *v1;

  v1 = (CLKappaAlgBlock *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  *(_QWORD *)v1 = off_10035D830;
  *((_QWORD *)v1 + 15) = off_10035DAD0;
  *((_QWORD *)v1 + 16) = off_10035DC08;
  *((_QWORD *)v1 + 17) = off_10035DCE0;
  sub_10000A718((uint64_t)v1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10035DD30);
}

void sub_10024F694(_QWORD *a1)
{
  CLKappaAlgBlock *v1;

  v1 = (CLKappaAlgBlock *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  *(_QWORD *)v1 = off_10035D830;
  *((_QWORD *)v1 + 15) = off_10035DAD0;
  *((_QWORD *)v1 + 16) = off_10035DC08;
  *((_QWORD *)v1 + 17) = off_10035DCE0;
  sub_10000A718((uint64_t)v1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10035DD30);
  operator delete();
}

void sub_10024F720(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "Alg");
  v2 = (void *)qword_100387318;
  qword_100387318 = (uint64_t)v1;

}

void sub_10024F750(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10035E368;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10024F764(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10035E368;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10024F798(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double sub_10024F7A8(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_QWORD *)a1 = &off_10034D258;
  *(_OWORD *)(a1 + 16) = xmmword_1002ED1A0;
  *(_OWORD *)(a1 + 32) = xmmword_1002ED1B0;
  *(_OWORD *)(a1 + 48) = xmmword_1002ED1C0;
  *(_OWORD *)(a1 + 64) = xmmword_1002ED1B0;
  *(_OWORD *)(a1 + 80) = xmmword_1002ED1C0;
  *(_OWORD *)(a1 + 96) = xmmword_1002ED1D0;
  *(_OWORD *)(a1 + 112) = xmmword_1002ED1E0;
  *(_OWORD *)(a1 + 128) = xmmword_1002ED1F0;
  *(_OWORD *)(a1 + 144) = xmmword_1002ED200;
  *(_OWORD *)(a1 + 160) = xmmword_1002ED210;
  *(_OWORD *)(a1 + 176) = xmmword_1002ED220;
  *(_OWORD *)(a1 + 192) = xmmword_1002ED230;
  *(_OWORD *)(a1 + 208) = xmmword_1002ED240;
  *(_OWORD *)(a1 + 224) = xmmword_1002ED250;
  *(_OWORD *)(a1 + 240) = xmmword_1002ED260;
  result = 9.79983509e18;
  *(_QWORD *)(a1 + 256) = 0x43E1000042F00000;
  *(_DWORD *)(a1 + 264) = 1088421888;
  return result;
}

void CLKappaDeescalatorUsha::CLKappaDeescalatorUsha(CLKappaDeescalatorUsha *this)
{
  char *v2;

  *(_QWORD *)this = off_100347FF0;
  *((_BYTE *)this + 8) = 0;
  *((_BYTE *)this + 16) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 32) = 1;
  *((_DWORD *)this + 9) = 0;
  *((_BYTE *)this + 40) = 0;
  v2 = (char *)sub_100007088((_QWORD *)this + 6, "none");
  *(_QWORD *)this = off_10035E3B8;
  *((_BYTE *)this + 72) = 0;
  *((_BYTE *)this + 76) = 0;
  *((_BYTE *)this + 80) = 0;
  *((_BYTE *)this + 84) = 0;
  *((_DWORD *)this + 24) = 11;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 14) = 0xB00000000;
  *(_QWORD *)((char *)this + 164) = 0xB00000000;
  *((_DWORD *)this + 54) = 0;
  *((_BYTE *)this + 220) = 0;
  *((_QWORD *)this + 28) = 0;
  if (*((char *)this + 71) < 0)
  {
    *((_QWORD *)this + 7) = 7;
    v2 = (char *)*((_QWORD *)this + 6);
  }
  else
  {
    *((_BYTE *)this + 71) = 7;
  }
  strcpy(v2, "de-Usha");
}

unint64_t CLKappaDeescalatorUsha::setupForceControls(CLKappaDeescalatorUsha *this)
{
  unint64_t result;

  *((_BYTE *)this + 40) = CLKappaDeescalator::shouldForceNoop(this, "ForceUsha");
  result = CLKappaDeescalator::shouldForceDeescalate(this, "ForceUsha");
  *((_DWORD *)this + 9) = result;
  return result;
}

uint64_t CLKappaDeescalatorUsha::assertReady(CLKappaDeescalatorUsha *this, uint64_t a2, const char *a3)
{
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;

  CLKappaDeescalator::raiseUnless(*((unsigned __int8 *)this + 76), (BOOL)"[SC] spin missing fUshaCumulativeRotationThreshold threshold", a3);
  CLKappaDeescalator::raiseUnless(*((unsigned __int8 *)this + 84), (BOOL)"[SC] peak pressure missing in fUshaPeakPressureThreshold", v4);
  CLKappaDeescalator::raiseUnless(*((unsigned __int8 *)this + 89), (BOOL)"[SC] number of usha FP epoch threshold missing in fNumUshaFPEpochThreshold", v5);
  CLKappaDeescalator::raiseUnless(*((unsigned __int8 *)this + 91), (BOOL)"[SC] number of usha CP epoch threshold missing in fNumUshaCPEpochThreshold", v6);
  CLKappaDeescalator::raiseUnless(*((unsigned __int16 *)this + 47) == *((unsigned __int16 *)this + 57), (BOOL)"[SC] buffer size mismatch", v7);
  return CLKappaDeescalator::raiseUnless(*((unsigned __int16 *)this + 47) == *((unsigned __int16 *)this + 83), (BOOL)"[SC] buffer size mismatch", v8);
}

uint64_t CLKappaDeescalatorUsha::prepareForNextEpoch(uint64_t this)
{
  *(_QWORD *)(this + 224) = 0;
  return this;
}

float CLKappaDeescalatorUsha::setConfig(uint64_t a1, uint64_t a2)
{
  float result;

  *(_DWORD *)(a1 + 72) = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 76) = 1;
  result = *(float *)(a2 + 4);
  *(float *)(a1 + 80) = result;
  *(_BYTE *)(a1 + 84) = 1;
  *(_WORD *)(a1 + 88) = *(unsigned __int8 *)(a2 + 8) | 0x100;
  *(_WORD *)(a1 + 90) = *(unsigned __int8 *)(a2 + 9) | 0x100;
  return result;
}

unsigned __int16 *CLKappaDeescalatorUsha::updateWithIsAudioRollover(uint64_t a1, uint64_t a2)
{
  unsigned __int16 *result;

  result = sub_100242C04((unsigned __int16 *)(a1 + 92), (_BYTE *)(a2 + 49));
  *(_BYTE *)(a1 + 220) = *(_BYTE *)(a2 + 49);
  return result;
}

unsigned __int16 *CLKappaDeescalatorUsha::updateWithCumulativeRotation(uint64_t a1, uint64_t a2)
{
  return sub_10003606C((unsigned __int16 *)(a1 + 112), (_DWORD *)(a2 + 12));
}

float CLKappaDeescalatorUsha::updateWithPeakPressure(uint64_t a1, uint64_t a2)
{
  float result;

  sub_10003606C((unsigned __int16 *)(a1 + 164), (_DWORD *)(a2 + 32));
  result = *(float *)(a2 + 32);
  *(float *)(a1 + 216) = result;
  return result;
}

uint64_t CLKappaDeescalatorUsha::getNumUshaFPEpoch(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  unint64_t v6;
  uint64_t v7;
  float *v8;
  int v9;
  float v10;
  float v11;
  int v12;
  BOOL v13;
  int v14;

  if (!a2[1])
    return 0;
  v6 = 0;
  LODWORD(v7) = 0;
  do
  {
    v8 = (float *)sub_1000361EC(a3, v6);
    v9 = *(unsigned __int8 *)(a1 + 76);
    v10 = *v8;
    v11 = *(float *)(a1 + 72);
    v12 = *(unsigned __int8 *)sub_100027E40(a2, v6);
    if (v9)
      v13 = v12 == 0;
    else
      v13 = 1;
    v14 = !v13;
    if (v10 > v11)
      v14 = 0;
    v7 = (v7 + v14);
    ++v6;
  }
  while (v6 < a2[1]);
  return v7;
}

uint64_t CLKappaDeescalatorUsha::getNumUshaCPEpoch(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  unint64_t v8;
  uint64_t v9;
  float *v10;
  int v11;
  float v12;
  float v13;
  float *v14;
  int v15;
  float v16;
  float v17;
  _BYTE *v18;
  _BOOL4 v21;

  if (!a2[1])
    return 0;
  v8 = 0;
  LODWORD(v9) = 0;
  do
  {
    v10 = (float *)sub_1000361EC(a3, v8);
    v11 = *(unsigned __int8 *)(a1 + 76);
    v12 = *v10;
    v13 = *(float *)(a1 + 72);
    v14 = (float *)sub_1000361EC(a4, v8);
    v15 = *(unsigned __int8 *)(a1 + 84);
    v16 = *v14;
    v17 = *(float *)(a1 + 80);
    v18 = (_BYTE *)sub_100027E40(a2, v8);
    v21 = v12 > v13 || v11 == 0 || v15 == 0;
    if (v16 > v17)
      v21 = 1;
    if (!*v18)
      v21 = 0;
    v9 = (v9 + v21);
    ++v8;
  }
  while (v8 < a2[1]);
  return v9;
}

uint64_t CLKappaDeescalatorUsha::onEvaluateAtMinHoldDuration(CLKappaDeescalatorUsha *this)
{
  unsigned __int16 *v2;
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  int NumUshaCPEpoch;
  float v6;
  float v7;

  v2 = (unsigned __int16 *)((char *)this + 92);
  v3 = (unsigned __int16 *)((char *)this + 112);
  v4 = (unsigned __int16 *)((char *)this + 164);
  *((_DWORD *)this + 56) = CLKappaDeescalatorUsha::getNumUshaFPEpoch((uint64_t)this, (unsigned __int16 *)this + 46, (unsigned __int16 *)this + 56);
  NumUshaCPEpoch = CLKappaDeescalatorUsha::getNumUshaCPEpoch((uint64_t)this, v2, v3, v4);
  *((_DWORD *)this + 57) = NumUshaCPEpoch;
  v6 = 0.0;
  v7 = 0.0;
  if (*((_BYTE *)this + 89))
  {
    LOBYTE(v7) = *((_BYTE *)this + 88);
    v7 = (float)LODWORD(v7);
  }
  if (*((_BYTE *)this + 91))
  {
    LOBYTE(v6) = *((_BYTE *)this + 90);
    v6 = (float)LODWORD(v6);
  }
  if (v6 <= (float)NumUshaCPEpoch || v7 > (float)*((int *)this + 56))
    return 1;
  else
    return 4;
}

_DWORD *CLKappaDeescalatorUsha::onPreviousEpochMadeDecision(_DWORD *this)
{
  this[23] = 0;
  this[28] = 0;
  this[41] = 0;
  return this;
}

void sub_10024FD54(void **this)
{
  *this = off_10035E3B8;
  CLKappaDeescalator::~CLKappaDeescalator(this);
}

void sub_10024FD64(void **a1)
{
  *a1 = off_10035E3B8;
  CLKappaDeescalator::~CLKappaDeescalator(a1);
  operator delete();
}

void sub_10024FDEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10024FE5C(id a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CSAnomalyEventServiceSilo"));
  v2 = (void *)qword_100389378;
  qword_100389378 = (uint64_t)v1;

}

void sub_100250080(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002501A0(_Unwind_Exception *a1)
{
  void *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak((id *)(v3 - 40));

  _Unwind_Resume(a1);
}

void sub_1002501C4(uint64_t a1, void *a2)
{
  id v3;
  id *WeakRetained;
  char *v5;
  NSObject *v6;
  const char *v7;
  NSObject *v8;
  uint64_t uint64;
  NSObject *v10;
  xpc_object_t reply;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v3 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_error)
  {
    v5 = xpc_copy_description(v3);
    if (qword_100387460 != -1)
      dispatch_once(&qword_100387460, &stru_10035E490);
    v6 = qword_100387468;
    if (!os_log_type_enabled((os_log_t)qword_100387468, OS_LOG_TYPE_DEBUG))
      goto LABEL_12;
    v13 = 136315138;
    v14 = (uint64_t)v5;
    v7 = "Connection received error: %s";
    goto LABEL_11;
  }
  if (xpc_get_type(v3) != (xpc_type_t)&_xpc_type_dictionary)
  {
    v5 = xpc_copy_description(v3);
    if (qword_100387460 != -1)
      dispatch_once(&qword_100387460, &stru_10035E490);
    v6 = qword_100387468;
    if (!os_log_type_enabled((os_log_t)qword_100387468, OS_LOG_TYPE_DEBUG))
      goto LABEL_12;
    v13 = 136315138;
    v14 = (uint64_t)v5;
    v7 = "Connection received object: %s";
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, v7, (uint8_t *)&v13, 0xCu);
LABEL_12:
    free(v5);
    goto LABEL_22;
  }
  if (qword_100387460 != -1)
    dispatch_once(&qword_100387460, &stru_10035E490);
  v8 = qword_100387468;
  if (os_log_type_enabled((os_log_t)qword_100387468, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v13) = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "received xpc trigger connection", (uint8_t *)&v13, 2u);
  }
  uint64 = xpc_dictionary_get_uint64(v3, "seq");
  if (qword_100387460 != -1)
    dispatch_once(&qword_100387460, &stru_10035E490);
  v10 = qword_100387468;
  if (os_log_type_enabled((os_log_t)qword_100387468, OS_LOG_TYPE_DEBUG))
  {
    v13 = 134217984;
    v14 = uint64;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Connection received seq: %llu", (uint8_t *)&v13, 0xCu);
  }
  reply = xpc_dictionary_create_reply(v3);
  v12 = dword_100389388++;
  xpc_dictionary_set_uint64(reply, "seq", v12);
  objc_msgSend(WeakRetained[17], "addObject:", reply);

LABEL_22:
}

void sub_100250494(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10025066C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100250694(uint64_t a1, void *a2)
{
  id v3;
  id *WeakRetained;
  NSObject *v5;
  char *v6;
  NSObject *v7;
  int v8;
  char *v9;

  v3 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (qword_100387460 != -1)
    dispatch_once(&qword_100387460, &stru_10035E490);
  v5 = qword_100387468;
  if (os_log_type_enabled((os_log_t)qword_100387468, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v8) = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "received xpc trigger event", (uint8_t *)&v8, 2u);
  }
  objc_msgSend(WeakRetained[13], "createPowerAssertion:", CFSTR("AOP Trigger"));
  ++*((_DWORD *)WeakRetained + 24);
  if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_connection)
  {
    objc_msgSend(WeakRetained[18], "addObject:", v3);
    objc_msgSend(WeakRetained, "handleConnection:", v3);
  }
  else
  {
    v6 = xpc_copy_description(v3);
    if (qword_100387460 != -1)
      dispatch_once(&qword_100387460, &stru_10035E490);
    v7 = qword_100387468;
    if (os_log_type_enabled((os_log_t)qword_100387468, OS_LOG_TYPE_DEBUG))
    {
      v8 = 136315138;
      v9 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "received object: %s", (uint8_t *)&v8, 0xCu);
    }
    free(v6);
  }

}

void sub_100250860(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100250D84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100250DC0()
{
  void *v0;

  operator delete();
}

id sub_100250DEC()
{
  if (qword_1003872F0 != -1)
    dispatch_once(&qword_1003872F0, &stru_10035E4B0);
  return (id)qword_1003872F8;
}

void sub_100250F20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100250F8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002510FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1002513C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100251E7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_100252100(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100252390(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10025263C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100252B9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_100253220(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100253470(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100253B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  if (a9)
    operator delete();

  _Unwind_Resume(a1);
}

void sub_100253E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_100254144(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100254440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002545F4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "XPC");
  v2 = (void *)qword_100387468;
  qword_100387468 = (uint64_t)v1;

}

void sub_100254624(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "AnomalyEvent");
  v2 = (void *)qword_1003872F8;
  qword_1003872F8 = (uint64_t)v1;

}

uint64_t sub_100254654()
{
  void *v0;
  id v1;
  NSObject *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  id v9;
  NSObject *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  id v16;
  NSObject *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint8_t v29;

  v1 = sub_100250DEC();
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (sub_100028938(v2))
  {
    sub_10000A8E8();
    sub_100028924((void *)&_mh_execute_header, v3, v4, "{\"msg%{public}.0s\":\"UUID cannot be nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, v6, v7, v8, v25, v26, v27, v28, v29);
  }

  v9 = sub_100250DEC();
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (sub_100028950(v10))
  {
    sub_10000A8E8();
    sub_1000288F0((void *)&_mh_execute_header, v11, v12, v13, "UUID cannot be nil", "{\"msg%{public}.0s\":\"UUID cannot be nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v25, v26, v27, v28, v29);
  }

  v16 = sub_100250DEC();
  v17 = objc_claimAutoreleasedReturnValue(v16);
  if (sub_100028944(v17))
  {
    sub_10000A8E8();
    sub_100028910((void *)&_mh_execute_header, v18, v19, "{\"msg%{public}.0s\":\"UUID cannot be nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v20, v21, v22, v23, v25, v26, v27, v28, v29);
  }

  result = abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreSafety/SafetyAlgorithms/CSAnomalyEventService.mm", 268, "-[CSAnomalyEventService startRecordingWithTTRManagedMsl:andPreempt:]");
  __break(1u);
  return result;
}

uint64_t sub_100254778()
{
  void *v0;
  id v1;
  NSObject *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  id v9;
  NSObject *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  id v16;
  NSObject *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t v30;

  v1 = sub_100250DEC();
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (sub_100028938(v2))
  {
    sub_10000A8E8();
    sub_100028924((void *)&_mh_execute_header, v3, v4, "{\"msg%{public}.0s\":\"invalid mode\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, v6, v7, v8, v26, v27, v28, v29, v30);
  }

  v9 = sub_100250DEC();
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (sub_100028950(v10))
  {
    sub_10000A8E8();
    sub_1000288F0((void *)&_mh_execute_header, v11, v12, v13, "invalid mode", "{\"msg%{public}.0s\":\"invalid mode\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v26, v27, v28, v29, v30);
  }

  v16 = sub_100250DEC();
  v17 = objc_claimAutoreleasedReturnValue(v16);
  if (sub_100028944(v17))
  {
    sub_10000A8E8();
    sub_100028910((void *)&_mh_execute_header, v18, v19, "{\"msg%{public}.0s\":\"invalid mode\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v20, v21, v22, v23, v26, v27, v28, v29, v30);
  }

  v24 = abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreSafety/SafetyAlgorithms/CSAnomalyEventService.mm", 737, "-[CSAnomalyEventService setForcedCompanionTrigger:]");
  return sub_100254894(v24);
}

uint64_t sub_100254894()
{
  void *v0;
  id v1;
  NSObject *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  id v9;
  NSObject *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  id v16;
  NSObject *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t v30;

  v1 = sub_100250DEC();
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (sub_100028938(v2))
  {
    sub_10000A8E8();
    sub_100028924((void *)&_mh_execute_header, v3, v4, "{\"msg%{public}.0s\":\"invalid mode\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, v6, v7, v8, v26, v27, v28, v29, v30);
  }

  v9 = sub_100250DEC();
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (sub_100028950(v10))
  {
    sub_10000A8E8();
    sub_1000288F0((void *)&_mh_execute_header, v11, v12, v13, "invalid mode", "{\"msg%{public}.0s\":\"invalid mode\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v26, v27, v28, v29, v30);
  }

  v16 = sub_100250DEC();
  v17 = objc_claimAutoreleasedReturnValue(v16);
  if (sub_100028944(v17))
  {
    sub_10000A8E8();
    sub_100028910((void *)&_mh_execute_header, v18, v19, "{\"msg%{public}.0s\":\"invalid mode\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v20, v21, v22, v23, v26, v27, v28, v29, v30);
  }

  v24 = abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreSafety/SafetyAlgorithms/CSAnomalyEventService.mm", 724, "-[CSAnomalyEventService setForcedCompanionTrigger:]");
  return sub_1002549B0(v24);
}

uint64_t sub_1002549B0()
{
  void *v0;
  id v1;
  NSObject *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  id v9;
  NSObject *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  id v16;
  NSObject *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  CSAOPSvc::Idle *v24;
  unint64_t v25;
  const void *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint8_t v32;

  v1 = sub_100250DEC();
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (sub_100028938(v2))
  {
    sub_10000A8E8();
    sub_100028924((void *)&_mh_execute_header, v3, v4, "{\"msg%{public}.0s\":\"No _aop to tell about companion\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, v6, v7, v8, v28, v29, v30, v31, v32);
  }

  v9 = sub_100250DEC();
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (sub_100028950(v10))
  {
    sub_10000A8E8();
    sub_1000288F0((void *)&_mh_execute_header, v11, v12, v13, "No _aop to tell about companion", "{\"msg%{public}.0s\":\"No _aop to tell about companion\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v28, v29, v30, v31, v32);
  }

  v16 = sub_100250DEC();
  v17 = objc_claimAutoreleasedReturnValue(v16);
  if (sub_100028944(v17))
  {
    sub_10000A8E8();
    sub_100028910((void *)&_mh_execute_header, v18, v19, "{\"msg%{public}.0s\":\"No _aop to tell about companion\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v20, v21, v22, v23, v28, v29, v30, v31, v32);
  }

  v24 = (CSAOPSvc::Idle *)abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreSafety/SafetyAlgorithms/CSAnomalyEventService.mm", 830, "-[CSAnomalyEventService onCompanionConnectionStatusUpdate:cftime:sputime:]");
  return CSAOPSvc::Idle::trigger(v24, v25, v26);
}

CSAOPSvc::Idle *CSAOPSvc::Idle::trigger(CSAOPSvc::Idle *this, uint64_t a2, const void *a3)
{
  CSAOPSvc::Idle *v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  __int16 v9;
  uint8_t v10[16];
  uint8_t buf[2];

  if (a2 != 1)
    return 0;
  v3 = this;
  if ((*((_BYTE *)objc_msgSend(*(id *)(*((_QWORD *)this + 6) + 40), "c_struct", a3) + 1) & 0x10) == 0)
  {
    if (!*((_BYTE *)objc_msgSend(*(id *)(*((_QWORD *)v3 + 6) + 40), "c_struct") + 1)
      && (*((_BYTE *)objc_msgSend(*(id *)(*((_QWORD *)v3 + 6) + 40), "c_struct") + 46) & 0x10) != 0)
    {
      if ((*((_BYTE *)objc_msgSend(*(id *)(*((_QWORD *)v3 + 6) + 40), "c_struct") + 93) & 2) == 0)
      {
        if (qword_100387320 != -1)
          dispatch_once(&qword_100387320, &stru_10035E6F0);
        v4 = qword_100387328;
        if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_DEBUG))
        {
          v9 = 0;
          v5 = "Ignoring post riding marty trigger";
          v6 = (uint8_t *)&v9;
LABEL_15:
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, v5, v6, 2u);
          return v3;
        }
        return v3;
      }
      if (qword_100387320 != -1)
        dispatch_once(&qword_100387320, &stru_10035E6F0);
      v7 = qword_100387328;
      if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Letting post riding marty trigger since it is remotely armed", v10, 2u);
      }
    }
    objc_msgSend(*(id *)(*((_QWORD *)v3 + 6) + 1072), "addObject:", *(_QWORD *)(*((_QWORD *)v3 + 6) + 40));
    return (CSAOPSvc::Idle *)(*((_QWORD *)v3 + 6) + 120);
  }
  if (qword_100387320 != -1)
    dispatch_once(&qword_100387320, &stru_10035E6F0);
  v4 = qword_100387328;
  if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    v5 = "ignore post driving kappa trigger";
    v6 = buf;
    goto LABEL_15;
  }
  return v3;
}

id sub_100254C90()
{
  if (qword_100387320 != -1)
    dispatch_once(&qword_100387320, &stru_10035E6F0);
  return (id)qword_100387328;
}

void CSAOPSvc::Idle::action(CSAOPSvc::Idle *this, uint64_t a2, const void *a3)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  double v8;
  uint64_t v9;
  int v10;
  _BOOL4 v11;
  _BOOL4 v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  char v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  int v21;
  _BYTE v22[10];
  __int16 v23;
  int v24;

  if (a2 == 1)
  {
    if (qword_100387320 != -1)
      dispatch_once(&qword_100387320, &stru_10035E6F0);
    v4 = qword_100387328;
    if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_DEBUG))
    {
      v5 = *(_QWORD *)(*((_QWORD *)this + 6) + 40);
      v21 = 138412290;
      *(_QWORD *)v22 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "triggered data %@", (uint8_t *)&v21, 0xCu);
    }
    v6 = *((_QWORD *)this + 6);
    v7 = *(void **)(v6 + 1016);
    *(_QWORD *)(v6 + 1016) = 0;

    v8 = CSAOPSvc::resetTriggerSessionStats(*((CSAOPSvc **)this + 6));
    v9 = *((_QWORD *)this + 6);
    *(_BYTE *)(v9 + 1058) = 0;
    v10 = *((unsigned __int8 *)objc_msgSend(*(id *)(v9 + 40), "c_struct", v8) + 1);
    if (*((_BYTE *)objc_msgSend(*(id *)(*((_QWORD *)this + 6) + 40), "c_struct") + 1))
      v11 = (*((_BYTE *)objc_msgSend(*(id *)(*((_QWORD *)this + 6) + 40), "c_struct") + 1) & 0x10) == 0;
    else
      v11 = 0;
    if (*((_BYTE *)objc_msgSend(*(id *)(*((_QWORD *)this + 6) + 40), "c_struct") + 46))
      v12 = (*((_BYTE *)objc_msgSend(*(id *)(*((_QWORD *)this + 6) + 40), "c_struct") + 46) & 0x10) == 0;
    else
      v12 = 0;
    if (!*((_BYTE *)objc_msgSend(*(id *)(*((_QWORD *)this + 6) + 40), "c_struct") + 1)
      && (*((_BYTE *)objc_msgSend(*(id *)(*((_QWORD *)this + 6) + 40), "c_struct") + 46) & 0x10) != 0)
    {
      v13 = (*((unsigned __int8 *)objc_msgSend(*(id *)(*((_QWORD *)this + 6) + 40), "c_struct") + 93) >> 1) & 1;
    }
    else
    {
      v13 = 0;
    }
    v14 = *((unsigned __int8 *)objc_msgSend(*(id *)(*((_QWORD *)this + 6) + 40), "c_struct") + 46);
    v15 = *((unsigned __int8 *)objc_msgSend(*(id *)(*((_QWORD *)this + 6) + 40), "c_struct") + 64);
    if (v10 | v14)
      v16 = 1;
    else
      v16 = v15 == 0;
    v17 = !v16;
    *(_BYTE *)(*((_QWORD *)this + 6) + 1040) = v17;
    if (qword_100387320 != -1)
      dispatch_once(&qword_100387320, &stru_10035E6F0);
    v18 = qword_100387328;
    if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_DEBUG))
    {
      v21 = 67109632;
      *(_DWORD *)v22 = v11;
      *(_WORD *)&v22[4] = 1024;
      *(_DWORD *)&v22[6] = v12;
      v23 = 1024;
      v24 = v15;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "isKappaNotPostDriving %d isMartyNotPostRiding %d isIgneous %d", (uint8_t *)&v21, 0x14u);
    }
    if (v11 || v12 || v15)
      goto LABEL_32;
    if (v13)
    {
      if (qword_100387320 != -1)
        dispatch_once(&qword_100387320, &stru_10035E6F0);
      v19 = qword_100387328;
      if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v21) = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "Letting post riding marty action since it is remotely armed", (uint8_t *)&v21, 2u);
      }
LABEL_32:
      objc_msgSend(*(id *)(*((_QWORD *)this + 6) + 16), "triggered:", *(_QWORD *)(*((_QWORD *)this + 6) + 40));
      return;
    }
    if (qword_100387320 != -1)
      dispatch_once(&qword_100387320, &stru_10035E6F0);
    v20 = qword_100387328;
    if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v21) = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "ignoring post driving kappa trigger in action", (uint8_t *)&v21, 2u);
    }
  }
}

double CSAOPSvc::resetTriggerSessionStats(CSAOPSvc *this)
{
  NSObject *v2;
  double result;
  uint8_t v8[16];

  if (qword_100387320 != -1)
    dispatch_once(&qword_100387320, &stru_10035E6F0);
  v2 = qword_100387328;
  if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "trigger session stats (reset)", v8, 2u);
  }
  *((_QWORD *)this + 115) = 0xFFFFFFFF00000000;
  *((_DWORD *)this + 232) = 0;
  *((_BYTE *)this + 932) = 0;
  *((_QWORD *)this + 118) = 0;
  *((_QWORD *)this + 117) = 0;
  *((_QWORD *)this + 119) = 0xBF80000000000000;
  __asm { FMOV            V0.2S, #-1.0 }
  *((double *)this + 120) = result;
  *((_QWORD *)this + 121) = 0xBFF0000000000000;
  *((_DWORD *)this + 244) = -1;
  *((_BYTE *)this + 980) = 0;
  *((double *)this + 123) = result;
  *((_DWORD *)this + 248) = -1082130432;
  *((_WORD *)this + 498) = 0;
  *((_BYTE *)this + 998) = 0;
  return result;
}

CSAOPSvc::Reading *CSAOPSvc::Reading::Reading(CSAOPSvc::Reading *this, CSAOPSvc *a2, CLSilo *a3)
{
  CLSilo *v5;
  CLSilo *v6;
  id v7;
  _QWORD v9[5];

  v5 = a3;
  CSHSM::State::State(this, "reading");
  *(_QWORD *)this = &off_10035E4E0;
  *((_QWORD *)this + 6) = a2;
  v6 = v5;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 7) = v6;
  v7 = -[CLSilo newTimer](v6, "newTimer");
  *((_QWORD *)this + 13) = v7;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10025521C;
  v9[3] = &unk_100355AA0;
  v9[4] = this;
  objc_msgSend(v7, "setHandler:", v9);

  return this;
}

void sub_1002551BC(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void *v4;

  *(_QWORD *)v2 = &off_1003659C8;
  v4 = *(void **)(v2 + 16);
  if (v4)
  {
    *(_QWORD *)(v2 + 24) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(a1);
}

void sub_10025521C(uint64_t a1)
{
  CSHSM::signal(*(CSHSM **)(*(_QWORD *)(a1 + 32) + 48), 2, 0);
}

uint64_t CSAOPSvc::Reading::getMaxCollectionTimeInSecondsConfig(CSAOPSvc::Reading *this)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectForKey:", CFSTR("CSCollectionTimeInSeconds")));
  if (v2)
  {
    v3 = (uint64_t)objc_msgSend(v1, "integerForKey:", CFSTR("CSCollectionTimeInSeconds"));
    if (v3 >= 600)
      v4 = 600;
    else
      v4 = v3;
  }
  else
  {
    v4 = 85;
  }

  return v4;
}

void sub_1002552B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void CSAOPSvc::Reading::entry(CSAOPSvc::Reading *this, unint64_t a2, const void *a3)
{
  NSObject *v4;
  _BOOL8 v5;
  int MaxCollectionTimeInSecondsConfig;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  unsigned int v15;
  NSObject *v16;
  int v17;
  NSObject *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  _QWORD v39[5];
  _QWORD v40[5];
  uint8_t buf[4];
  uint64_t v42;

  *((_WORD *)this + 40) = 0;
  *(_QWORD *)((char *)this + 84) = 0x25800000000;
  if (qword_100387320 != -1)
    dispatch_once(&qword_100387320, &stru_10035E6F0);
  v4 = qword_100387328;
  v5 = os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_DEBUG);
  if (v5)
  {
    *(_DWORD *)buf = 134217984;
    v42 = 660000000;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "kExpirationDuration %llu", buf, 0xCu);
  }
  MaxCollectionTimeInSecondsConfig = CSAOPSvc::Reading::getMaxCollectionTimeInSecondsConfig((CSAOPSvc::Reading *)v5);
  if (qword_100387320 != -1)
    dispatch_once(&qword_100387320, &stru_10035E6F0);
  v7 = qword_100387328;
  if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v42) = MaxCollectionTimeInSecondsConfig;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "configuring collection to be %d seconds", buf, 8u);
  }
  *((_DWORD *)this + 23) = MaxCollectionTimeInSecondsConfig;
  v8 = objc_claimAutoreleasedReturnValue(+[CSPower sharedInstance](CSPower, "sharedInstance"));
  v9 = *((_QWORD *)this + 6);
  v10 = *(void **)(v9 + 1048);
  *(_QWORD *)(v9 + 1048) = v8;

  objc_msgSend(*(id *)(*((_QWORD *)this + 6) + 1048), "createPowerAssertion:", CFSTR("AOP Trigger"));
  objc_msgSend(*(id *)(*((_QWORD *)this + 6) + 1048), "powerlogActivity:state:", 5, CFAbsoluteTimeGetCurrent());
  if (qword_100387320 != -1)
    dispatch_once(&qword_100387320, &stru_10035E6F0);
  v11 = qword_100387328;
  if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_DEBUG))
  {
    v12 = *(_QWORD *)(*((_QWORD *)this + 6) + 32);
    *(_DWORD *)buf = 134217984;
    v42 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "opening fastpaths device %p", buf, 0xCu);
  }
  CSAOPSvc::openFastpaths(*((_QWORD **)this + 6), *(void **)(*((_QWORD *)this + 6) + 32));
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[CSPermissions sharedInstance](CSPermissions, "sharedInstance"));
  *((_BYTE *)this + 96) = objc_msgSend(v13, "isAuthorizedToCollectData");

  v14 = (void *)objc_claimAutoreleasedReturnValue(+[CSPlatformInfo sharedInstance](CSPlatformInfo, "sharedInstance"));
  v15 = objc_msgSend(v14, "isInternalInstall");

  if (v15)
    *((_BYTE *)this + 96) = (*((unsigned __int8 *)this + 96) | *((unsigned __int8 *)objc_msgSend(*(id *)(*((_QWORD *)this + 6)+ 40), "c_struct")+ 46)) != 0;
  if (qword_100387320 != -1)
    dispatch_once(&qword_100387320, &stru_10035E6F0);
  v16 = qword_100387328;
  if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_DEBUG))
  {
    v17 = *((unsigned __int8 *)this + 96);
    *(_DWORD *)buf = 67109120;
    LODWORD(v42) = v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "_authorizedToCollectData %d", buf, 8u);
  }
  CSAOPSvc::resetFastpaths(*((CSAOPSvc **)this + 6));
  objc_msgSend(*(id *)(*((_QWORD *)this + 6) + 1080), "reset");
  if (qword_100387320 != -1)
    dispatch_once(&qword_100387320, &stru_10035E6F0);
  v18 = qword_100387328;
  if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Scheduling fastpath periodic check", buf, 2u);
  }
  objc_msgSend(*((id *)this + 13), "setNextFireDelay:interval:", 0.0, 1.0);
  v19 = objc_alloc((Class)BMBiomeScheduler);
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)this + 7), "queue"));
  v21 = objc_msgSend(v19, "initWithIdentifier:targetQueue:waking:", CFSTR("com.apple.anomalydetectiond.AppLaunch"), v20, 0);

  v22 = (void *)objc_claimAutoreleasedReturnValue(+[BMStreams appLaunch](BMStreams, "appLaunch"));
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "publisher"));
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "subscribeOn:", v21));
  v40[0] = _NSConcreteStackBlock;
  v40[1] = 3221225472;
  v40[2] = sub_10025640C;
  v40[3] = &unk_10035E558;
  v40[4] = this;
  v25 = objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "sinkWithCompletion:receiveInput:", &stru_10035E538, v40));
  v26 = (void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v25;

  v27 = objc_alloc((Class)BMBiomeScheduler);
  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)this + 7), "queue"));
  v29 = objc_msgSend(v27, "initWithIdentifier:targetQueue:waking:", CFSTR("com.apple.anomalydetectiond.Unlock"), v28, 0);

  v30 = BiomeLibrary();
  v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
  v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "Device"));
  v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "ScreenLocked"));
  v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "DSLPublisher"));
  v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "filterWithKeyPath:value:", CFSTR("eventBody.starting"), &__kCFBooleanFalse));
  v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "subscribeOn:", v29));
  v39[0] = _NSConcreteStackBlock;
  v39[1] = 3221225472;
  v39[2] = sub_100256610;
  v39[3] = &unk_10035E558;
  v39[4] = this;
  v37 = objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "sinkWithCompletion:receiveInput:", &stru_10035E578, v39));
  v38 = (void *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = v37;

}

void sub_10025583C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void CSAOPSvc::openFastpaths(_QWORD *a1, void *a2)
{
  id v3;
  NSObject *v4;
  kern_return_t ParentEntry;
  NSObject *v6;
  const char *v7;
  kern_return_t ChildIterator;
  io_object_t v9;
  CFStringRef v10;
  kern_return_t ChildEntry;
  NSObject *v12;
  CFStringRef v13;
  kern_return_t Name;
  uint64_t v15;
  uint8_t *v16;
  NSObject *v17;
  os_log_type_t v18;
  const char *v19;
  uint32_t v20;
  uint64_t v21;
  int v22;
  size_t v23;
  _BYTE *v24;
  BOOL v25;
  int v26;
  CSFastpathGlue *v27;
  int v28;
  size_t v29;
  _BYTE *v30;
  BOOL v31;
  int v32;
  size_t v33;
  _BYTE *v34;
  BOOL v35;
  int v36;
  size_t v37;
  _BYTE *v38;
  BOOL v39;
  BOOL v40;
  BOOL v41;
  BOOL v42;
  BOOL v43;
  BOOL v44;
  BOOL v45;
  BOOL v46;
  BOOL v47;
  BOOL v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  id v52;
  NSObject *v53;
  io_registry_entry_t child;
  io_registry_entry_t parent[2];
  _BYTE __p[18];
  unsigned __int8 v57;
  uint8_t buf[16];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;

  v3 = a2;
  if (qword_100387320 != -1)
    dispatch_once(&qword_100387320, &stru_10035E6F0);
  *(_QWORD *)parent = 0;
  v4 = qword_100387328;
  if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "opening fastpaths", buf, 2u);
  }
  ParentEntry = IORegistryEntryGetParentEntry((io_registry_entry_t)objc_msgSend(v3, "service"), "IOService", &parent[1]);
  if (ParentEntry)
  {
    if (qword_100387320 != -1)
      dispatch_once(&qword_100387320, &stru_10035E6F0);
    v6 = qword_100387328;
    if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = ParentEntry;
      v7 = "IORegistryEntryGetParentEntry failed 0x%0x";
LABEL_15:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, v7, buf, 8u);
      goto LABEL_16;
    }
    goto LABEL_16;
  }
  ChildIterator = IORegistryEntryGetChildIterator(parent[1], "IOService", parent);
  if (!ChildIterator)
  {
    v9 = IOIteratorNext(parent[0]);
    if (!v9)
      goto LABEL_16;
    while (1)
    {
      v10 = IOObjectCopyClass(v9);
      if (CFEqual(CFSTR("AppleSPUFastpathInterface"), v10))
      {
        CFRelease(v10);
        child = 0;
        ChildEntry = IORegistryEntryGetChildEntry(v9, "IOService", &child);
        if (!ChildEntry)
        {
          v13 = IOObjectCopyClass(child);
          if (!CFEqual(v13, CFSTR("AppleSPUFastpathDriver")))
          {
            if (qword_100387320 != -1)
              dispatch_once(&qword_100387320, &stru_10035E6F0);
            v21 = qword_100387328;
            if (!os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_FAULT))
              goto LABEL_134;
            *(_WORD *)buf = 0;
            v16 = buf;
            v17 = v21;
            v18 = OS_LOG_TYPE_FAULT;
            v19 = "unexpected child class";
            v20 = 2;
            goto LABEL_133;
          }
          v64 = 0u;
          v65 = 0u;
          v62 = 0u;
          v63 = 0u;
          v60 = 0u;
          v61 = 0u;
          *(_OWORD *)buf = 0u;
          v59 = 0u;
          Name = IORegistryEntryGetName(child, (char *)buf);
          if (Name)
          {
            if (qword_100387320 != -1)
              dispatch_once(&qword_100387320, &stru_10035E6F0);
            v15 = qword_100387328;
            if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)__p = 67109120;
              *(_DWORD *)&__p[4] = Name;
              v16 = __p;
              v17 = v15;
              v18 = OS_LOG_TYPE_FAULT;
              v19 = "IORegistryEntryGetName failed 0x%0x";
              v20 = 8;
              goto LABEL_133;
            }
LABEL_134:
            if (v13)
              CFRelease(v13);
            IOObjectRelease(child);
            goto LABEL_137;
          }
          sub_100007088(__p, "Acc800Fp");
          v22 = (char)v57;
          if ((v57 & 0x80u) == 0)
            v23 = v57;
          else
            v23 = *(_QWORD *)&__p[8];
          if (v23 == strlen((const char *)buf))
          {
            if ((v57 & 0x80u) == 0)
              v24 = __p;
            else
              v24 = *(_BYTE **)__p;
            v25 = memcmp(v24, buf, v23) == 0;
            if (v22 < 0)
LABEL_45:
              operator delete(*(void **)__p);
          }
          else
          {
            v25 = 0;
            if ((char)v57 < 0)
              goto LABEL_45;
          }
          if (v25)
          {
            v26 = 0;
            v27 = (CSFastpathGlue *)(a1 + 37);
LABEL_123:
            if (*((_QWORD *)v27 + 2))
            {
              if (qword_100387320 != -1)
                dispatch_once(&qword_100387320, &stru_10035E6F0);
              v49 = qword_100387328;
              if (!os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_INFO))
                goto LABEL_134;
              *(_DWORD *)__p = 136315138;
              *(_QWORD *)&__p[4] = buf;
              v16 = __p;
              v17 = v49;
              v18 = OS_LOG_TYPE_INFO;
              v19 = "Fastpath %s already opened.";
              v20 = 12;
            }
            else
            {
              v50 = CSFastpathGlue::open(v27, v26, child);
              if (!v50)
                goto LABEL_134;
              if (qword_100387320 != -1)
                dispatch_once(&qword_100387320, &stru_10035E6F0);
              v51 = qword_100387328;
              if (!os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_ERROR))
                goto LABEL_134;
              *(_DWORD *)__p = 136315394;
              *(_QWORD *)&__p[4] = buf;
              *(_WORD *)&__p[12] = 1024;
              *(_DWORD *)&__p[14] = v50;
              v16 = __p;
              v17 = v51;
              v18 = OS_LOG_TYPE_ERROR;
              v19 = "Failed to open %s, error 0x%x";
              v20 = 18;
            }
LABEL_133:
            _os_log_impl((void *)&_mh_execute_header, v17, v18, v19, v16, v20);
            goto LABEL_134;
          }
          sub_100007088(__p, "Acc100Fp");
          v28 = (char)v57;
          if ((v57 & 0x80u) == 0)
            v29 = v57;
          else
            v29 = *(_QWORD *)&__p[8];
          if (v29 == strlen((const char *)buf))
          {
            if ((v57 & 0x80u) == 0)
              v30 = __p;
            else
              v30 = *(_BYTE **)__p;
            v31 = memcmp(v30, buf, v29) == 0;
            if (v28 < 0)
LABEL_58:
              operator delete(*(void **)__p);
          }
          else
          {
            v31 = 0;
            if ((char)v57 < 0)
              goto LABEL_58;
          }
          if (v31)
          {
            v26 = 7;
            v27 = (CSFastpathGlue *)(a1 + 79);
          }
          else
          {
            sub_100007088(__p, "HgAccFp");
            v32 = (char)v57;
            if ((v57 & 0x80u) == 0)
              v33 = v57;
            else
              v33 = *(_QWORD *)&__p[8];
            if (v33 == strlen((const char *)buf))
            {
              if ((v57 & 0x80u) == 0)
                v34 = __p;
              else
                v34 = *(_BYTE **)__p;
              v35 = memcmp(v34, buf, v33) == 0;
            }
            else
            {
              v35 = 0;
            }
            if (v32 < 0)
              operator delete(*(void **)__p);
            if (v35)
            {
              v26 = 5;
              v27 = (CSFastpathGlue *)(a1 + 67);
            }
            else
            {
              sub_100007088(__p, "DmFp");
              v36 = (char)v57;
              if ((v57 & 0x80u) == 0)
                v37 = v57;
              else
                v37 = *(_QWORD *)&__p[8];
              if (v37 == strlen((const char *)buf))
              {
                if ((v57 & 0x80u) == 0)
                  v38 = __p;
                else
                  v38 = *(_BYTE **)__p;
                v39 = memcmp(v38, buf, v37) == 0;
              }
              else
              {
                v39 = 0;
              }
              if (v36 < 0)
                operator delete(*(void **)__p);
              if (v39)
              {
                v26 = 1;
                v27 = (CSFastpathGlue *)(a1 + 43);
              }
              else
              {
                sub_100007088(__p, "PressureFp");
                v40 = sub_10025B1C8((const void **)__p, (char *)buf);
                if ((char)v57 < 0)
                  operator delete(*(void **)__p);
                if (v40)
                {
                  v26 = 2;
                  v27 = (CSFastpathGlue *)(a1 + 49);
                }
                else
                {
                  sub_100007088(__p, "GpsFp");
                  v41 = sub_10025B1C8((const void **)__p, (char *)buf);
                  if ((char)v57 < 0)
                    operator delete(*(void **)__p);
                  if (v41)
                  {
                    v26 = 3;
                    v27 = (CSFastpathGlue *)(a1 + 55);
                  }
                  else
                  {
                    sub_100007088(__p, "RmsFp");
                    v42 = sub_10025B1C8((const void **)__p, (char *)buf);
                    if ((char)v57 < 0)
                      operator delete(*(void **)__p);
                    if (v42)
                    {
                      v26 = 4;
                      v27 = (CSFastpathGlue *)(a1 + 61);
                    }
                    else
                    {
                      sub_100007088(__p, "StepsFp");
                      v43 = sub_10025B1C8((const void **)__p, (char *)buf);
                      if ((char)v57 < 0)
                        operator delete(*(void **)__p);
                      if (v43)
                      {
                        v26 = 6;
                        v27 = (CSFastpathGlue *)(a1 + 73);
                      }
                      else
                      {
                        sub_100007088(__p, "RoadsFp");
                        v44 = sub_10025B1C8((const void **)__p, (char *)buf);
                        if ((char)v57 < 0)
                          operator delete(*(void **)__p);
                        if (v44)
                        {
                          v26 = 8;
                          v27 = (CSFastpathGlue *)(a1 + 85);
                        }
                        else
                        {
                          sub_100007088(__p, "AudioFp");
                          v45 = sub_10025B1C8((const void **)__p, (char *)buf);
                          if ((char)v57 < 0)
                            operator delete(*(void **)__p);
                          if (v45)
                          {
                            v26 = 9;
                            v27 = (CSFastpathGlue *)(a1 + 91);
                          }
                          else
                          {
                            sub_100007088(__p, "ActivityFp");
                            v46 = sub_10025B1C8((const void **)__p, (char *)buf);
                            if ((char)v57 < 0)
                              operator delete(*(void **)__p);
                            if (v46)
                            {
                              v26 = 10;
                              v27 = (CSFastpathGlue *)(a1 + 97);
                            }
                            else
                            {
                              sub_100007088(__p, "HertzFp");
                              v47 = sub_10025B1C8((const void **)__p, (char *)buf);
                              if ((char)v57 < 0)
                                operator delete(*(void **)__p);
                              if (v47)
                              {
                                v26 = 11;
                                v27 = (CSFastpathGlue *)(a1 + 103);
                              }
                              else
                              {
                                sub_100007088(__p, "MagFp");
                                v48 = sub_10025B1C8((const void **)__p, (char *)buf);
                                if ((char)v57 < 0)
                                  operator delete(*(void **)__p);
                                if (!v48)
                                {
                                  v52 = sub_100254C90();
                                  v53 = objc_claimAutoreleasedReturnValue(v52);
                                  if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
                                  {
                                    *(_DWORD *)__p = 136315138;
                                    *(_QWORD *)&__p[4] = buf;
                                    _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, "Unexpected AppleSPUFastpathDriver %s", __p, 0xCu);
                                  }

                                  goto LABEL_134;
                                }
                                v26 = 12;
                                v27 = (CSFastpathGlue *)(a1 + 109);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          goto LABEL_123;
        }
        if (qword_100387320 != -1)
          dispatch_once(&qword_100387320, &stru_10035E6F0);
        v12 = qword_100387328;
        if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = ChildEntry;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "IORegistryEntryGetChildEntry failed for AppleSPUFastpathInterface 0x%0x", buf, 8u);
        }
      }
      else
      {
        CFRelease(v10);
      }
LABEL_137:
      if (!IOObjectRelease(v9))
      {
        v9 = IOIteratorNext(parent[0]);
        if (!v9)
          goto LABEL_16;
      }
    }
  }
  if (qword_100387320 != -1)
    dispatch_once(&qword_100387320, &stru_10035E6F0);
  v6 = qword_100387328;
  if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = ChildIterator;
    v7 = "IORegistryEntryGetChildIterator failed 0x%0x";
    goto LABEL_15;
  }
LABEL_16:

}

void sub_1002562E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CSAOPSvc::resetFastpaths(CSAOPSvc *this)
{
  NSObject *v2;
  uint64_t v3;
  char *v4;
  uint8_t v5[16];

  if (qword_100387320 != -1)
    dispatch_once(&qword_100387320, &stru_10035E6F0);
  v2 = qword_100387328;
  if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "reset fastpaths", v5, 2u);
  }
  v3 = 0;
  v4 = (char *)this + 296;
  do
  {
    if (v3 != 240)
      CSFastpathGlue::reset((uint64_t)&v4[v3]);
    v3 += 48;
  }
  while (v3 != 624);
}

id CSAOPSvc::resetAPEventsBuffer(id *this)
{
  return objc_msgSend(this[135], "reset");
}

void sub_10025640C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  unint64_t v5;
  double v6;
  double v7;
  double v8;
  NSObject *v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  unsigned int v14;
  uint64_t v15;
  const char *v16;
  int v17;
  id v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  unint64_t v24;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 1008);
  objc_msgSend(v3, "timestamp");
  v7 = v6;
  v8 = *(double *)(*(_QWORD *)(v4 + 48) + 1064);
  if (qword_100387320 != -1)
    dispatch_once(&qword_100387320, &stru_10035E6F0);
  v9 = (id)qword_100387328;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "eventBody"));
    v11 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "bundleID")));
    v12 = objc_msgSend(v11, "UTF8String");
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "eventBody"));
    v14 = objc_msgSend(v13, "isStarting");
    objc_msgSend(v3, "timestamp");
    v16 = "closed";
    v17 = 136315906;
    v18 = v12;
    if (v14)
      v16 = "launched";
    v19 = 2082;
    v20 = v16;
    v21 = 2050;
    v22 = v15;
    v23 = 2050;
    v24 = (unint64_t)((double)v5 + (v7 - v8) * 1000000.0);
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "App %s %{public}s at %{public}.1f = %{public}llu", (uint8_t *)&v17, 0x2Au);

  }
}

void sub_1002565C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100256610(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  unint64_t v5;
  double v6;
  double v7;
  double v8;
  NSObject *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 1008);
  objc_msgSend(v3, "timestamp");
  v7 = v6;
  v8 = *(double *)(*(_QWORD *)(v4 + 48) + 1064);
  if (qword_100387320 != -1)
    dispatch_once(&qword_100387320, &stru_10035E6F0);
  v9 = (id)qword_100387328;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    objc_msgSend(v3, "timestamp");
    v11 = 134349312;
    v12 = v10;
    v13 = 2050;
    v14 = (unint64_t)((double)v5 + (v7 - v8) * 1000000.0);
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Screen unlock at %{public}.1f = %{public}llu", (uint8_t *)&v11, 0x16u);
  }

}

void sub_100256740(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CSAOPSvc::Reading::exit(CSAOPSvc::Reading *this, unint64_t a2, const void *a3)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  uint8_t v10[16];

  v4 = (void *)*((_QWORD *)this + 8);
  if (v4)
  {
    objc_msgSend(v4, "cancel", a3);
    v5 = (void *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = 0;

  }
  v6 = (void *)*((_QWORD *)this + 9);
  if (v6)
  {
    objc_msgSend(v6, "cancel", a3);
    v7 = (void *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;

  }
  objc_msgSend(*((id *)this + 13), "setNextFireDelay:interval:", a3, 1.79769313e308, 1.79769313e308);
  if (qword_100387300 != -1)
    dispatch_once(&qword_100387300, &stru_10035E710);
  v8 = qword_100387308;
  if (os_log_type_enabled((os_log_t)qword_100387308, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Notifying streaming timeout", v10, 2u);
  }
  return objc_msgSend(*(id *)(*((_QWORD *)this + 6) + 1072), "removeAllObjects");
}

void CSAOPSvc::restartSessionInternal(id *this)
{
  NSObject *v2;
  id v3;
  uint8_t v4[16];

  if (CSHSM::isIn((CSHSM *)this, (CSHSM::State *)(this + 15)))
  {
    if (qword_100387320 == -1)
      goto LABEL_3;
  }
  else
  {
    sub_10025CD78();
  }
  dispatch_once(&qword_100387320, &stru_10035E6F0);
LABEL_3:
  v2 = qword_100387328;
  if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "forcefully restarting the session; any recordings will be discarded",
      v4,
      2u);
  }
  *((_DWORD *)this + 51) = 0;
  objc_msgSend(this[127], "stopAndKeep:", 0);
  v3 = this[127];
  this[127] = 0;

  CSAOPSvc::resetFastpaths((CSAOPSvc *)this);
  objc_msgSend(this[135], "reset");
  *((_BYTE *)this + 200) = 0;
  objc_msgSend(this[134], "removeAllObjects");
  objc_msgSend(this[134], "addObject:", this[5]);
  *((_BYTE *)this + 1058) = 0;
  objc_storeStrong(this + 127, this[128]);
}

void CSAOPSvc::restartSession(CSAOPSvc *this, CSMSLDataRecording *a2)
{
  *((_BYTE *)this + 1058) = 1;
  objc_storeStrong((id *)this + 128, a2);
}

id CSAOPSvc::forceStopCollection(CSAOPSvc *this)
{
  NSObject *v2;
  void *v3;
  uint8_t v5[16];

  if (qword_100387320 != -1)
    dispatch_once(&qword_100387320, &stru_10035E6F0);
  v2 = qword_100387328;
  if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "forcefully stopping the collection", v5, 2u);
  }
  *((_DWORD *)this + 53) = 0;
  objc_msgSend(*((id *)this + 127), "stopAndKeep:", 0);
  v3 = (void *)*((_QWORD *)this + 127);
  *((_QWORD *)this + 127) = 0;

  return objc_msgSend(*((id *)this + 2), "abortSession");
}

CSAOPSvc::Reading *CSAOPSvc::Reading::trigger(CSAOPSvc::Reading *this, uint64_t a2, const void *a3)
{
  void **p_vtable;
  CSAOPSvc::Reading *v4;
  uint64_t v5;
  NSObject *v6;
  id v7;
  int v8;
  unsigned __int8 *v12;
  int v18;
  NSObject *v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  NSObject *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  NSObject *v31;
  int v33;
  _BYTE v34[10];
  _BYTE v35[6];
  _BYTE v36[6];
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  int v43;

  v4 = this;
  if (a2 == 3)
  {
    if (qword_100387320 != -1)
      dispatch_once(&qword_100387320, &stru_10035E6F0);
    v31 = qword_100387328;
    if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v33) = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "aop timeout command", (uint8_t *)&v33, 2u);
    }
    *((_WORD *)v4 + 40) = 257;
    return (CSAOPSvc::Reading *)(*((_QWORD *)v4 + 6) + 232);
  }
  if (a2 == 2)
  {
    v23 = *((_QWORD *)this + 6);
    if (*(_BYTE *)(v23 + 1058))
      CSAOPSvc::restartSessionInternal((id *)v23);
    v24 = *((_DWORD *)v4 + 21) + 1;
    *((_DWORD *)v4 + 21) = v24;
    if (v24 >= *((_DWORD *)v4 + 23) || !*((_BYTE *)v4 + 96))
      *((_BYTE *)v4 + 81) = 1;
    if (qword_100387320 != -1)
      dispatch_once(&qword_100387320, &stru_10035E6F0);
    v25 = qword_100387328;
    if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_DEBUG))
    {
      v26 = *((_DWORD *)v4 + 21);
      v27 = *((_DWORD *)v4 + 22);
      v28 = *((_DWORD *)v4 + 23);
      v29 = *((unsigned __int8 *)v4 + 80);
      v30 = *((unsigned __int8 *)v4 + 81);
      v33 = 67110144;
      *(_DWORD *)v34 = v26;
      *(_WORD *)&v34[4] = 1024;
      *(_DWORD *)&v34[6] = v27;
      *(_WORD *)v35 = 1024;
      *(_DWORD *)&v35[2] = v28;
      *(_WORD *)v36 = 1024;
      *(_DWORD *)&v36[2] = v29;
      LOWORD(v37) = 1024;
      *(_DWORD *)((char *)&v37 + 2) = v30;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "_Nsec %d _NsecToRead %d _NsecToCollect %d _doneRunningAlgs %d _doneCollecting %d", (uint8_t *)&v33, 0x20u);
    }
    if (*((_DWORD *)v4 + 21) < *((_DWORD *)v4 + 22) && (!*((_BYTE *)v4 + 81) || !*((_BYTE *)v4 + 80)))
    {
      CSAOPSvc::readFastpaths(*((CSAOPSvc **)v4 + 6));
      CSAOPSvc::readAPEventsBuffer(*((id **)v4 + 6));
      CSAOPSvc::dispatchSamples(*((id **)v4 + 6), *((_BYTE *)v4 + 81) == 0);
      return v4;
    }
    return (CSAOPSvc::Reading *)(*((_QWORD *)v4 + 6) + 232);
  }
  if (a2 != 1)
    return 0;
  v5 = *((_QWORD *)this + 6);
  if (!*(_QWORD *)(v5 + 40))
  {
    sub_10025CEBC();
    __break(1u);
    goto LABEL_37;
  }
  objc_msgSend(*(id *)(v5 + 1072), "addObject:");
  p_vtable = &OBJC_METACLASS___CSHSMObjc.vtable;
  if (qword_100387320 != -1)
LABEL_37:
    dispatch_once(&qword_100387320, &stru_10035E6F0);
  v6 = (id)qword_100387328;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = objc_msgSend(*(id *)(*((_QWORD *)v4 + 6) + 40), "timestamp");
    v8 = *((unsigned __int8 *)objc_msgSend(*(id *)(*((_QWORD *)v4 + 6) + 40), "c_struct") + 1);
    _H8 = *((_WORD *)objc_msgSend(*(id *)(*((_QWORD *)v4 + 6) + 40), "c_struct") + 49);
    _H9 = *((_WORD *)objc_msgSend(*(id *)(*((_QWORD *)v4 + 6) + 40), "c_struct") + 50);
    _H10 = *((_WORD *)objc_msgSend(*(id *)(*((_QWORD *)v4 + 6) + 40), "c_struct") + 51);
    v12 = (unsigned __int8 *)objc_msgSend(*(id *)(*((_QWORD *)v4 + 6) + 40), "c_struct");
    __asm { FCVT            D0, H8 }
    v18 = v12[104];
    __asm
    {
      FCVT            D1, H9
      FCVT            D3, H10
    }
    v33 = 134350592;
    *(_QWORD *)v34 = v7;
    *(_WORD *)&v34[8] = 1026;
    *(_DWORD *)v35 = v8;
    *(_WORD *)&v35[4] = 1026;
    *(_DWORD *)v36 = 112;
    *(_WORD *)&v36[4] = 2050;
    v37 = _D0;
    v38 = 2050;
    v39 = _D1;
    v40 = 2050;
    v41 = _D3;
    v42 = 1026;
    v43 = v18;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "trigger %{public}llu path %{public}d size %{public}d metrics %{public}f,%{public}f,%{public}f,%{public}d", (uint8_t *)&v33, 0x3Cu);
  }

  if ((*((_BYTE *)objc_msgSend(*(id *)(*((_QWORD *)v4 + 6) + 40), "c_struct") + 1) & 0x10) == 0
    && (*((_BYTE *)objc_msgSend(*(id *)(*((_QWORD *)v4 + 6) + 40), "c_struct") + 46) & 0x10) == 0)
  {
    *((_DWORD *)v4 + 22) = *((_DWORD *)v4 + 21) + 600;
    if (p_vtable[100] != (void *)-1)
      dispatch_once(&qword_100387320, &stru_10035E6F0);
    v21 = qword_100387328;
    if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_INFO))
    {
      v22 = *((_DWORD *)v4 + 22);
      v33 = 67109120;
      *(_DWORD *)v34 = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "Extend reading to %u sec", (uint8_t *)&v33, 8u);
    }
    *((_BYTE *)v4 + 80) = 0;
    objc_msgSend(*(id *)(*((_QWORD *)v4 + 6) + 16), "triggered:", *(_QWORD *)(*((_QWORD *)v4 + 6) + 40));
  }
  return v4;
}

void sub_100256E24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CSAOPSvc::readFastpaths(CSAOPSvc *this)
{
  CSAOPSvc *v1;
  unsigned int v2;
  NSObject *v3;
  uint64_t v4;
  _QWORD *v5;
  CSSPUAccel800 *v6;
  double v7;
  double v8;
  double v9;
  CSSPUAccel800 *v10;
  unsigned int v11;
  NSObject *v12;
  uint64_t v13;
  _QWORD *v14;
  CSSPUAccel *v15;
  double v16;
  double v17;
  double v18;
  CSSPUAccel *v19;
  unsigned int v20;
  NSObject *v21;
  uint64_t v22;
  _QWORD *v23;
  CSSPUHgAccel *v24;
  double v25;
  double v26;
  double v27;
  CSSPUHgAccel *v28;
  void *v29;
  unsigned int v30;
  unsigned int v31;
  NSObject *v32;
  uint64_t v33;
  float *v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  CSSPUSpl *v38;
  double v39;
  CSSPUSpl *v40;
  unsigned int v41;
  NSObject *v42;
  uint64_t v43;
  _WORD *v44;
  CSSPUPressure *v45;
  double v46;
  double v47;
  CSSPUPressure *v48;
  uint64_t i;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  _WORD *v53;
  NSObject *v54;
  uint64_t v55;
  double v56;
  CSSPUGps *v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  CSSPUGps *v65;
  unsigned int v66;
  NSObject *v67;
  uint64_t v68;
  _WORD *v69;
  CSSPUSteps *v70;
  double v71;
  CSSPUSteps *v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  void **p_vtable;
  void **v77;
  void *v78;
  NSObject *v79;
  uint64_t v80;
  NSObject *v81;
  CSSPURoadInfo *v82;
  uint64_t v83;
  float v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  id v88;
  char *v89;
  CSAOPSvc *v90;
  uint64_t v91;
  void **v92;
  void **v93;
  char *v94;
  size_t v95;
  char *v96;
  id v97;
  double v98;
  NSObject *v99;
  void *v100;
  unsigned int v101;
  uint64_t j;
  _WORD *v103;
  unsigned int v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  CSSPUTrustedAudioResult *v108;
  uint64_t v109;
  uint64_t v110;
  double v111;
  NSObject *v112;
  uint64_t v113;
  int v114;
  NSObject *v115;
  int v116;
  double v117;
  NSObject *v118;
  uint64_t v119;
  void *v120;
  double v121;
  void *v122;
  double v123;
  void *v124;
  double v125;
  void *v126;
  double v127;
  void *v128;
  double v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  CSSPUActivityPhone *v143;
  double v144;
  double v145;
  double v146;
  double v147;
  CSSPUActivityPhone *v148;
  uint64_t k;
  _WORD *v150;
  unsigned int v151;
  NSObject *v152;
  uint64_t v153;
  _WORD *v154;
  CSSPUHertzSample *v155;
  uint64_t v156;
  void *v157;
  uint64_t v158;
  NSObject *v159;
  _QWORD v160[5];
  _QWORD v161[5];
  _QWORD v162[3];
  _QWORD v163[3];
  uint8_t buf[4];
  _BYTE v165[36];
  _BYTE v166[6];
  char *v167;
  __int16 v168;
  uint64_t v169;
  _WORD v170[12];
  int v171;
  uint64_t v172;
  __int128 v173;
  _DWORD v174[8];
  uint64_t v175;
  _BYTE v176[59832];

  v1 = this;
  if (*((_QWORD *)this + 39))
  {
    v2 = CSFastpathGlue::read((CSAOPSvc *)((char *)this + 296), (unsigned __int8 *)v170, 2400);
    if (v2)
    {
      if (qword_100387320 != -1)
        dispatch_once(&qword_100387320, &stru_10035E6F0);
      v3 = (id)qword_100387328;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)v165 = v2;
        *(_WORD *)&v165[4] = 2048;
        *(_QWORD *)&v165[6] = *(_QWORD *)&v170[6];
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "%u acc800 %llu", buf, 0x12u);
      }

      v4 = v2;
      v5 = &v170[6];
      do
      {
        if (*v5 >= (unint64_t)(*((_QWORD *)v1 + 126) - 3000000))
        {
          v6 = [CSSPUAccel800 alloc];
          LODWORD(v7) = *((_DWORD *)v5 - 3);
          LODWORD(v8) = *((_DWORD *)v5 - 2);
          LODWORD(v9) = *((_DWORD *)v5 - 1);
          v10 = -[CSSPUAccel800 initWithTimestamp:x:y:z:](v6, "initWithTimestamp:x:y:z:", *v5, v7, v8, v9);
          objc_msgSend(*((id *)v1 + 134), "addObject:", v10);

        }
        v5 = (_QWORD *)((char *)v5 + 20);
        --v4;
      }
      while (v4);
    }
  }
  if (*((_QWORD *)v1 + 81))
  {
    v11 = CSFastpathGlue::read((CSAOPSvc *)((char *)v1 + 632), (unsigned __int8 *)v170, 3000);
    if (v11)
    {
      if (qword_100387320 != -1)
        dispatch_once(&qword_100387320, &stru_10035E6F0);
      v12 = (id)qword_100387328;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)v165 = v11;
        *(_WORD *)&v165[4] = 2048;
        *(_QWORD *)&v165[6] = *(_QWORD *)&v170[6];
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "%u acc100 %llu", buf, 0x12u);
      }

      v13 = v11;
      v14 = &v170[6];
      do
      {
        if (*v14 >= (unint64_t)(*((_QWORD *)v1 + 126) - 30000000))
        {
          v15 = [CSSPUAccel alloc];
          LODWORD(v16) = *((_DWORD *)v14 - 3);
          LODWORD(v17) = *((_DWORD *)v14 - 2);
          LODWORD(v18) = *((_DWORD *)v14 - 1);
          v19 = -[CSSPUTriad initWithTimestamp:x:y:z:](v15, "initWithTimestamp:x:y:z:", *v14, v16, v17, v18);
          objc_msgSend(*((id *)v1 + 134), "addObject:", v19);

        }
        v14 = (_QWORD *)((char *)v14 + 20);
        --v13;
      }
      while (v13);
    }
  }
  if (*((_QWORD *)v1 + 69))
  {
    v20 = CSFastpathGlue::read((CSAOPSvc *)((char *)v1 + 536), (unsigned __int8 *)v170, 800);
    if (v20)
    {
      if (qword_100387320 != -1)
        dispatch_once(&qword_100387320, &stru_10035E6F0);
      v21 = (id)qword_100387328;
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)v165 = v20;
        *(_WORD *)&v165[4] = 2048;
        *(_QWORD *)&v165[6] = *(_QWORD *)&v170[3];
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "%u hgacc %llu", buf, 0x12u);
      }

      v22 = v20;
      v23 = &v170[3];
      do
      {
        if (*v23 >= (unint64_t)(*((_QWORD *)v1 + 126) - 3000000))
        {
          v24 = [CSSPUHgAccel alloc];
          *(float *)&v25 = (float)*((__int16 *)v23 - 3) * 0.03125;
          *(float *)&v26 = (float)*((__int16 *)v23 - 2) * 0.03125;
          *(float *)&v27 = (float)*((__int16 *)v23 - 1) * 0.03125;
          v28 = -[CSSPUHgAccel initWithTimestamp:x:y:z:](v24, "initWithTimestamp:x:y:z:", *v23, v25, v26, v27);
          objc_msgSend(*((id *)v1 + 134), "addObject:", v28);

        }
        v23 = (_QWORD *)((char *)v23 + 14);
        --v22;
      }
      while (v22);
    }
  }
  v29 = (void *)objc_claimAutoreleasedReturnValue(+[CSPlatformInfo sharedInstance](CSPlatformInfo, "sharedInstance"));
  v30 = objc_msgSend(v29, "isExtendedPretriggerMagDevice");

  if (v30 && *((_QWORD *)v1 + 111))
    operator new[]();
  if (*((_QWORD *)v1 + 45))
    operator new[]();
  if (*((_QWORD *)v1 + 63))
  {
    v31 = CSFastpathGlue::read((CSAOPSvc *)((char *)v1 + 488), (unsigned __int8 *)v170, 3000);
    if (v31)
    {
      if (qword_100387320 != -1)
        dispatch_once(&qword_100387320, &stru_10035E6F0);
      v32 = (id)qword_100387328;
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)v165 = v31;
        *(_WORD *)&v165[4] = 1024;
        *(_DWORD *)&v165[6] = *(_DWORD *)&v170[4];
        *(_WORD *)&v165[10] = 2048;
        *(double *)&v165[12] = *(float *)&v170[6];
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "%u SPL, sn = 0x%08x, %g", buf, 0x18u);
      }

      v33 = v31;
      v34 = (float *)&v170[6];
      do
      {
        v35 = *((_DWORD *)v34 - 1);
        if (*((_BYTE *)v1 + 1000) == v35 >> 28)
        {
          v36 = *((_QWORD *)v1 + 126);
          v37 = v36 + 1000 * ((v35 & 0xFFFFFFF) - (uint64_t)*((int *)v1 + 251));
          if (v37 >= v36 - 3000000)
          {
            v38 = [CSSPUSpl alloc];
            *(float *)&v39 = sqrtf(*v34);
            v40 = -[CSSPUSpl initWithTimestamp:rms:](v38, "initWithTimestamp:rms:", v37, v39);
            objc_msgSend(*((id *)v1 + 134), "addObject:", v40);

          }
        }
        v34 += 4;
        --v33;
      }
      while (v33);
    }
  }
  if (*((_QWORD *)v1 + 51))
  {
    v41 = CSFastpathGlue::read((CSAOPSvc *)((char *)v1 + 392), (unsigned __int8 *)v170, 360);
    if (v41)
    {
      if (qword_100387320 != -1)
        dispatch_once(&qword_100387320, &stru_10035E6F0);
      v42 = (id)qword_100387328;
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)v165 = v41;
        *(_WORD *)&v165[4] = 2048;
        *(_QWORD *)&v165[6] = *(_QWORD *)v170;
        *(_WORD *)&v165[14] = 2048;
        *(double *)&v165[16] = *(float *)&v170[4];
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "%u pressure, batch[0] = %llu %f", buf, 0x1Cu);
      }

      v43 = v41;
      v44 = v170;
      do
      {
        if (*(_QWORD *)v44 >= (unint64_t)(*((_QWORD *)v1 + 126) - 3000000))
        {
          v45 = [CSSPUPressure alloc];
          LODWORD(v46) = *((_DWORD *)v44 + 2);
          LODWORD(v47) = *((_DWORD *)v44 + 3);
          v48 = -[CSSPUPressure initWithTimestamp:pressure:temperature:](v45, "initWithTimestamp:pressure:temperature:", *(_QWORD *)v44, v46, v47);
          objc_msgSend(*((id *)v1 + 134), "addObject:", v48);

        }
        v44 += 8;
        --v43;
      }
      while (v43);
    }
  }
  if (*((_QWORD *)v1 + 57))
  {
    for (i = 12; i != 972; i += 32)
      *(_QWORD *)&v170[i] = -1;
    v50 = CSFastpathGlue::read((CSAOPSvc *)((char *)v1 + 440), (unsigned __int8 *)v170, 30);
    if (v50)
    {
      v51 = 0;
      v52 = (unint64_t)v50 << 6;
      do
      {
        v53 = &v170[v51 / 2];
        if (*(_QWORD *)&v174[v51 / 4 - 4] >= (unint64_t)(*((_QWORD *)v1 + 126) - 30000000))
        {
          if (qword_100387320 != -1)
            dispatch_once(&qword_100387320, &stru_10035E6F0);
          v54 = (id)qword_100387328;
          if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
          {
            v55 = *((_QWORD *)v53 + 5);
            v56 = *(float *)v53;
            *(_DWORD *)buf = 134218240;
            *(_QWORD *)v165 = v55;
            *(_WORD *)&v165[8] = 2048;
            *(double *)&v165[10] = v56;
            _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "GPS, %llu %f...", buf, 0x16u);
          }

          v57 = [CSSPUGps alloc];
          LODWORD(v58) = *(_DWORD *)&v170[v51 / 2];
          LODWORD(v59) = *(_DWORD *)&v170[v51 / 2 + 2];
          LODWORD(v60) = *(_DWORD *)&v170[v51 / 2 + 4];
          LODWORD(v61) = *(_DWORD *)&v170[v51 / 2 + 6];
          LODWORD(v62) = *(_DWORD *)&v170[v51 / 2 + 8];
          LODWORD(v63) = *(_DWORD *)&v170[v51 / 2 + 10];
          LODWORD(v64) = v174[v51 / 4 - 2];
          LODWORD(v156) = v174[v51 / 4];
          v65 = -[CSSPUGps initWithTimestamp:doubleTS:speedMS:speedAccuracyMS:courseDeg:courseAccuracyDeg:latitude:longitude:wayForm:roadClass:signalEnvironment:horizontalAccuracy:demNumContiguousFlatPoints:demConfidence:type:](v57, "initWithTimestamp:doubleTS:speedMS:speedAccuracyMS:courseDeg:courseAccuracyDeg:latitude:longitude:wayForm:roadClass:signalEnvironment:horizontalAccuracy:demNumContiguousFlatPoints:demConfidence:type:", (double)*((unint64_t *)v53 + 5), v58, v59, v60, v61, v62, v63, v64, v156);
          objc_msgSend(*((id *)v1 + 134), "addObject:", v65);

        }
        v51 += 64;
      }
      while (v52 != v51);
    }
  }
  if (*((_QWORD *)v1 + 75))
  {
    v66 = CSFastpathGlue::read((CSAOPSvc *)((char *)v1 + 584), (unsigned __int8 *)v170, 4);
    if (v66)
    {
      if (qword_100387320 != -1)
        dispatch_once(&qword_100387320, &stru_10035E6F0);
      v67 = (id)qword_100387328;
      if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67110400;
        *(_DWORD *)v165 = v66;
        *(_WORD *)&v165[4] = 2048;
        *(_QWORD *)&v165[6] = *(_QWORD *)v170;
        *(_WORD *)&v165[14] = 1024;
        *(_DWORD *)&v165[16] = *(_DWORD *)&v170[4];
        *(_WORD *)&v165[20] = 1024;
        *(_DWORD *)&v165[22] = *(_DWORD *)&v170[6];
        *(_WORD *)&v165[26] = 2048;
        *(double *)&v165[28] = *(float *)&v170[8];
        *(_WORD *)v166 = 1024;
        *(_DWORD *)&v166[2] = LOBYTE(v170[10]);
        _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "%u steps, batch[0] = %llu %i %i %f %d", buf, 0x2Eu);
      }

      v68 = v66;
      v69 = v170;
      do
      {
        if (*(_QWORD *)v69 >= (unint64_t)(*((_QWORD *)v1 + 126) - 12800000))
        {
          v70 = [CSSPUSteps alloc];
          LODWORD(v71) = *((_DWORD *)v69 + 4);
          v72 = -[CSSPUSteps initWithTimestamp:stepCount:deltaSteps:currentCadence:pedometerArmConstrainedState:](v70, "initWithTimestamp:stepCount:deltaSteps:currentCadence:pedometerArmConstrainedState:", *(_QWORD *)v69, *((unsigned int *)v69 + 2), *((unsigned int *)v69 + 3), *((unsigned __int8 *)v69 + 20), v71);
          objc_msgSend(*((id *)v1 + 134), "addObject:", v72);

        }
        v69 += 12;
        --v68;
      }
      while (v68);
    }
  }
  if (*((_QWORD *)v1 + 87))
  {
    v73 = CSFastpathGlue::read((CSAOPSvc *)((char *)v1 + 680), (unsigned __int8 *)v170, 1);
    if (v73)
    {
      v74 = 0;
      v75 = 96 * v73;
      p_vtable = &OBJC_METACLASS___CSHSMObjc.vtable;
      v77 = &OBJC_METACLASS___CSHSMObjc.vtable;
      do
      {
        v78 = p_vtable[100];
        if (*(_QWORD *)v170 >= (unint64_t)(*((_QWORD *)v1 + 126) - 3000000))
        {
          if (v78 != (void *)-1)
            dispatch_once(&qword_100387320, &stru_10035E6F0);
          v81 = v77[101];
          if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134218240;
            *(_QWORD *)v165 = *(_QWORD *)v170;
            *(_WORD *)&v165[8] = 2048;
            *(double *)&v165[10] = *(float *)&v170[4];
            _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEBUG, "Roads, %llu %f...", buf, 0x16u);
          }

          v82 = [CSSPURoadInfo alloc];
          v83 = *(_QWORD *)v170;
          v84 = *(float *)&v170[4];
          v85 = LOBYTE(v170[6]);
          v86 = *(_DWORD *)&v170[8];
          v87 = v170[10];
          v88 = objc_alloc((Class)NSString);
          v89 = (char *)v170 + v74;
          v158 = v74;
          v90 = v1;
          v91 = v75;
          v92 = v77;
          v93 = p_vtable;
          v94 = v89 + 22;
          v95 = strnlen(v89 + 22, 0x40uLL);
          v96 = v94;
          p_vtable = v93;
          v77 = v92;
          v75 = v91;
          v1 = v90;
          v74 = v158;
          v97 = objc_msgSend(v88, "initWithBytes:length:encoding:", v96, v95, 1);
          LODWORD(v98) = v86;
          v79 = -[CSSPURoadInfo initWithTimestamp:distanceToNearestRoad:roadClass:horizontalAccuracy:numRoadFeaturesEvaluated:GEOHandlerErrorDomain:GEOHandlerErrorCode:](v82, "initWithTimestamp:distanceToNearestRoad:roadClass:horizontalAccuracy:numRoadFeaturesEvaluated:GEOHandlerErrorDomain:GEOHandlerErrorCode:", v83, v85, v87, v97, v175, v84, v98);

          if (p_vtable[100] != (void *)-1)
            dispatch_once(&qword_100387320, &stru_10035E6F0);
          v99 = v77[101];
          if (os_log_type_enabled(v99, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 134219522;
            *(_QWORD *)v165 = *(_QWORD *)v170;
            *(_WORD *)&v165[8] = 2048;
            *(double *)&v165[10] = *(float *)&v170[4];
            *(_WORD *)&v165[18] = 1024;
            *(_DWORD *)&v165[20] = LOBYTE(v170[6]);
            *(_WORD *)&v165[24] = 2048;
            *(double *)&v165[26] = *(float *)&v170[8];
            *(_WORD *)&v165[34] = 1024;
            *(_DWORD *)v166 = v170[10];
            *(_WORD *)&v166[4] = 2080;
            v167 = (char *)&v170[11] + v158;
            v168 = 2048;
            v169 = v175;
            _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_INFO, "road info %llu %f %d %f %d %s %ld", buf, 0x40u);
          }

          objc_msgSend(*((id *)v1 + 134), "addObject:", v79);
        }
        else
        {
          if (v78 != (void *)-1)
            dispatch_once(&qword_100387320, &stru_10035E6F0);
          v79 = v77[101];
          if (os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG))
          {
            v80 = *((_QWORD *)v1 + 126);
            *(_DWORD *)buf = 134218496;
            *(_QWORD *)v165 = *(_QWORD *)v170;
            *(_WORD *)&v165[8] = 2048;
            *(_QWORD *)&v165[10] = v80;
            *(_WORD *)&v165[18] = 2048;
            *(double *)&v165[20] = (double)(unint64_t)(v80 - *(_QWORD *)v170 - 3000000) / 1000000.0;
            _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "DROPPED Roads: %llu < %llu by %f seconds", buf, 0x20u);
          }
        }

        v74 += 96;
      }
      while (v75 != v74);
    }
  }
  v100 = (void *)objc_claimAutoreleasedReturnValue(+[CSPlatformInfo sharedInstance](CSPlatformInfo, "sharedInstance"));
  v101 = objc_msgSend(v100, "isMDevice");

  if (v101)
  {
    if (*((_QWORD *)v1 + 93))
    {
      for (j = 0; j != 216; j += 108)
      {
        v103 = &v170[j];
        *(_QWORD *)v103 = 0;
        *((_DWORD *)v103 + 2) = 0;
        *((_DWORD *)v103 + 22) = 0;
        *((_DWORD *)v103 + 44) = 0;
        *((_QWORD *)v103 + 21) = 0;
        *((_QWORD *)v103 + 2) = 0;
        *((_QWORD *)v103 + 3) = 0;
        *((_DWORD *)v103 + 8) = 0;
        *((_QWORD *)v103 + 5) = 0;
        *((_QWORD *)v103 + 6) = 0;
        *((_DWORD *)v103 + 14) = 0;
        *((_QWORD *)v103 + 8) = 0;
        *((_QWORD *)v103 + 9) = 0;
        *((_BYTE *)v103 + 80) = 0;
        *((_QWORD *)v103 + 12) = 0;
        *((_QWORD *)v103 + 13) = 0;
        *((_DWORD *)v103 + 28) = 0;
        *((_DWORD *)v103 + 34) = 0;
        *((_QWORD *)v103 + 15) = 0;
        *((_QWORD *)v103 + 16) = 0;
        *((_QWORD *)v103 + 18) = 0;
        *((_QWORD *)v103 + 19) = 0;
        *((_BYTE *)v103 + 160) = 0;
        *((_QWORD *)v103 + 24) = 0;
        *((_QWORD *)v103 + 25) = 0;
        *((_DWORD *)v103 + 52) = 0;
        *((_QWORD *)v103 + 23) = 0;
      }
      v104 = CSFastpathGlue::read((CSAOPSvc *)((char *)v1 + 728), (unsigned __int8 *)v170, 2);
      if (v104)
      {
        v105 = 0;
        v106 = 216 * v104;
        do
        {
          v107 = (uint64_t *)&v170[v105 / 2];
          if (*(_QWORD *)&v170[v105 / 2] >= (unint64_t)(*((_QWORD *)v1 + 126) - 3000000))
          {
            if (qword_100387320 != -1)
              dispatch_once(&qword_100387320, &stru_10035E6F0);
            v112 = (id)qword_100387328;
            if (os_log_type_enabled(v112, OS_LOG_TYPE_DEBUG))
            {
              v113 = *(_QWORD *)&v170[v105 / 2];
              v114 = *(_DWORD *)&v176[v105];
              *(_DWORD *)buf = 134218240;
              *(_QWORD *)v165 = v113;
              *(_WORD *)&v165[8] = 1024;
              *(_DWORD *)&v165[10] = v114;
              _os_log_impl((void *)&_mh_execute_header, v112, OS_LOG_TYPE_DEBUG, "AudioResult, %llu %d...", buf, 0x12u);
            }

            v108 = -[CSSPUTrustedAudioResult initWithSPUPacketStruct:]([CSSPUTrustedAudioResult alloc], "initWithSPUPacketStruct:", &v170[v105 / 2]);
            objc_msgSend(*((id *)v1 + 134), "addObject:", v108);
          }
          else
          {
            if (qword_100387320 != -1)
              dispatch_once(&qword_100387320, &stru_10035E6F0);
            v108 = (CSSPUTrustedAudioResult *)(id)qword_100387328;
            if (os_log_type_enabled(&v108->super, OS_LOG_TYPE_DEBUG))
            {
              v109 = *v107;
              v110 = *((_QWORD *)v1 + 126);
              v111 = (double)(unint64_t)(v110 - *v107 - 3000000);
              *(_DWORD *)buf = 134218496;
              *(_QWORD *)v165 = v109;
              *(_WORD *)&v165[8] = 2048;
              *(_QWORD *)&v165[10] = v110;
              *(_WORD *)&v165[18] = 2048;
              *(double *)&v165[20] = v111 / 1000000.0;
              _os_log_impl((void *)&_mh_execute_header, &v108->super, OS_LOG_TYPE_DEBUG, "DROPPED AudioResult: %llu < %llu by %f seconds", buf, 0x20u);
            }
          }

          v105 += 216;
        }
        while (v106 != v105);
      }
    }
    else
    {
      if (qword_100387320 != -1)
        dispatch_once(&qword_100387320, &stru_10035E6F0);
      v115 = (id)qword_100387328;
      if (os_log_type_enabled(v115, OS_LOG_TYPE_DEBUG))
      {
        v170[0] = 0;
        _os_log_impl((void *)&_mh_execute_header, v115, OS_LOG_TYPE_DEBUG, "AudioResult glue invalid", (uint8_t *)v170, 2u);
      }

    }
  }
  if (*((_QWORD *)v1 + 99))
  {
    v171 = 0;
    v172 = 0;
    *(_QWORD *)v170 = 0;
    *(_QWORD *)&v170[4] = 0;
    *(_QWORD *)((char *)&v170[6] + 1) = 0;
    v173 = 0u;
    memset(v174, 0, 28);
    v116 = CSFastpathGlue::read((CSAOPSvc *)((char *)v1 + 776), (unsigned __int8 *)v170, 1);
    if (v116)
    {
      HIDWORD(v117) = 0;
      do
      {
        if (*(_QWORD *)v170 >= (unint64_t)(*((_QWORD *)v1 + 126) - 3000000))
        {
          LODWORD(v117) = *(_DWORD *)&v170[4];
          v120 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v117));
          v163[0] = v120;
          LODWORD(v121) = *(_DWORD *)&v170[6];
          v122 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v121));
          v163[1] = v122;
          LODWORD(v123) = *(_DWORD *)&v170[8];
          v124 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v123));
          v163[2] = v124;
          v159 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v163, 3));

          LODWORD(v125) = v171;
          v126 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v125));
          v162[0] = v126;
          LODWORD(v127) = v172;
          v128 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v127));
          v162[1] = v128;
          LODWORD(v129) = HIDWORD(v172);
          v130 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v129));
          v162[2] = v130;
          v157 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v162, 3));

          v131 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD4(v173)));
          v161[0] = v131;
          v132 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD5(v173)));
          v161[1] = v132;
          v133 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD6(v173)));
          v161[2] = v133;
          v134 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", HIWORD(v173)));
          v161[3] = v134;
          v135 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", LOWORD(v174[0])));
          v161[4] = v135;
          v136 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v161, 5));

          v137 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", HIWORD(v174[0])));
          v160[0] = v137;
          v138 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", LOWORD(v174[1])));
          v160[1] = v138;
          v139 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", HIWORD(v174[1])));
          v160[2] = v139;
          v140 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", LOWORD(v174[2])));
          v160[3] = v140;
          v141 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", HIWORD(v174[2])));
          v160[4] = v141;
          v142 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v160, 5));

          v143 = [CSSPUActivityPhone alloc];
          LODWORD(v144) = v174[3];
          LODWORD(v145) = v174[4];
          LODWORD(v146) = v174[5];
          LODWORD(v147) = v174[6];
          v148 = -[CSSPUActivityPhone initWithTimestamp:armTimeImuConfidences:armTimeActivityHints:windowAfterArmImuConfidences:triggerTimeLastHighImuDrivingConfidenceTimestamp:sessionSwivelAngleDegHistogram:sessionTiltAngleDegHistogram:sessionImuHintPercentage:sessionBtHintPercentage:sessionGpsHintPercentage:sessionWifiHintPercentage:](v143, "initWithTimestamp:armTimeImuConfidences:armTimeActivityHints:windowAfterArmImuConfidences:triggerTimeLastHighImuDrivingConfidenceTimestamp:sessionSwivelAngleDegHistogram:sessionTiltAngleDegHistogram:sessionImuHintPercentage:sessionBtHintPercentage:sessionGpsHintPercentage:sessionWifiHintPercentage:", *(_QWORD *)v170, v159, LOBYTE(v170[10]), v157, (_QWORD)v173, v136, v144, v145, v146, v147, v142);
          objc_msgSend(*((id *)v1 + 134), "addObject:", v148);

        }
        else
        {
          if (qword_100387320 != -1)
            dispatch_once(&qword_100387320, &stru_10035E6F0);
          v118 = (id)qword_100387328;
          v159 = v118;
          if (os_log_type_enabled(v118, OS_LOG_TYPE_DEBUG))
          {
            v119 = *((_QWORD *)v1 + 126);
            *(_DWORD *)buf = 134218496;
            *(_QWORD *)v165 = *(_QWORD *)v170;
            *(_WORD *)&v165[8] = 2048;
            *(_QWORD *)&v165[10] = v119;
            *(_WORD *)&v165[18] = 2048;
            *(double *)&v165[20] = (double)(unint64_t)(v119 - *(_QWORD *)v170 - 3000000) / 1000000.0;
            _os_log_impl((void *)&_mh_execute_header, v118, OS_LOG_TYPE_DEBUG, "DROPPED Activity: %llu < %llu by %f seconds", buf, 0x20u);
          }
        }

        --v116;
      }
      while (v116);
    }
  }
  if (*((_QWORD *)v1 + 105))
  {
    for (k = 0; k != 240; k += 8)
    {
      v150 = &v170[k];
      *(_QWORD *)v150 = 0;
      v150[4] = 0;
      *((_BYTE *)v150 + 10) = 0;
    }
    v151 = CSFastpathGlue::read((CSAOPSvc *)((char *)v1 + 824), (unsigned __int8 *)v170, 30);
    if (v151)
    {
      if (qword_100387320 != -1)
        dispatch_once(&qword_100387320, &stru_10035E6F0);
      v152 = (id)qword_100387328;
      if (os_log_type_enabled(v152, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)v165 = v151;
        *(_WORD *)&v165[4] = 2048;
        *(_QWORD *)&v165[6] = *(_QWORD *)v170;
        _os_log_impl((void *)&_mh_execute_header, v152, OS_LOG_TYPE_DEBUG, "%u HzSamples %llu", buf, 0x12u);
      }

      v153 = v151;
      v154 = v170;
      do
      {
        if (*(_QWORD *)v154 >= (unint64_t)(*((_QWORD *)v1 + 126) - 30000000))
        {
          v155 = -[CSSPUHertzSample initWithTimestamp:dramDurationMs:vehicularFlags:]([CSSPUHertzSample alloc], "initWithTimestamp:dramDurationMs:vehicularFlags:", *(_QWORD *)v154, (unsigned __int16)v154[4], *((unsigned __int8 *)v154 + 10));
          objc_msgSend(*((id *)v1 + 134), "addObject:", v155);

        }
        v154 += 8;
        --v153;
      }
      while (v153);
    }
  }
}

void sub_100258410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,char *a52)
{
  char *v52;
  char *v54;
  uint64_t v55;

  v54 = a52;
  if (a52 == v52)
  {
    v55 = 4;
    v54 = &a49;
  }
  else
  {
    if (!a52)
      goto LABEL_6;
    v55 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v54 + 8 * v55))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void CSAOPSvc::readAPEventsBuffer(id *this)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(this[135], "readSamples"));
  objc_msgSend(this[134], "addObjectsFromArray:");

}

void sub_100258658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void CSAOPSvc::dispatchSamples(id *this, int a2)
{
  void *v4;
  char *v5;
  void *v6;
  void *v7;
  NSMutableArray *v8;

  if ((unint64_t)objc_msgSend(this[134], "count") >= 0xC8)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(this[134], "sortedArrayUsingComparator:", &stru_10035E640));
    v8 = (NSMutableArray *)objc_msgSend(v4, "mutableCopy");

    objc_msgSend(this[134], "removeAllObjects");
    v5 = CSAOPSvc::recordStreams(this, v8, a2);
    v6 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray subarrayWithRange:](v8, "subarrayWithRange:", v5, (_BYTE *)-[NSMutableArray count](v8, "count") - v5));
    objc_msgSend(this[134], "addObjectsFromArray:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableIndexSet indexSet](NSMutableIndexSet, "indexSet"));
    objc_msgSend(v7, "addIndexesInRange:", v5, (_BYTE *)-[NSMutableArray count](v8, "count") - v5);
    -[NSMutableArray removeObjectsAtIndexes:](v8, "removeObjectsAtIndexes:", v7);
    if (!*((_BYTE *)this + 200))
      objc_msgSend(this[2], "feedSortedSamples:", v8);

  }
}

void sub_100258784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

CSAOPSvc::Done *CSAOPSvc::Done::Done(CSAOPSvc::Done *this, id *a2)
{
  CSHSM::State *v4;
  id v5;
  _QWORD v7[5];

  v4 = CSHSM::State::State(this, "done");
  *(_QWORD *)v4 = &off_10035E5A8;
  *((_QWORD *)v4 + 6) = a2;
  v5 = objc_msgSend(a2[6], "newTimer");
  *((_QWORD *)this + 7) = v5;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100258890;
  v7[3] = &unk_100355AA0;
  v7[4] = this;
  objc_msgSend(v5, "setHandler:", v7);
  return this;
}

void sub_100258854(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  *(_QWORD *)v1 = &off_1003659C8;
  v3 = *(void **)(v1 + 16);
  if (v3)
  {
    *(_QWORD *)(v1 + 24) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

void sub_100258890(uint64_t a1)
{
  CSHSM::signal(*(CSHSM **)(*(_QWORD *)(a1 + 32) + 48), 4, 0);
}

id CSAOPSvc::Done::entry(CSAOPSvc::Done *this, unint64_t a2, const void *a3)
{
  NSObject *v4;
  uint64_t v5;
  void *v6;
  uint8_t v8[16];

  if (qword_100387320 != -1)
    dispatch_once(&qword_100387320, &stru_10035E6F0);
  v4 = qword_100387328;
  if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "enter the done state", v8, 2u);
  }
  CSAOPSvc::updateMetadataAtEnd(*((CSAOPSvc **)this + 6));
  objc_msgSend(*(id *)(*((_QWORD *)this + 6) + 1072), "removeAllObjects");
  v5 = *((_QWORD *)this + 6);
  *(_BYTE *)(v5 + 1056) = 0;
  v6 = *(void **)(v5 + 1016);
  *(_QWORD *)(v5 + 1016) = 0;

  CSAOPSvc::stopAOPReading(*((CSAOPSvc **)this + 6));
  CSAOPSvc::closeFastpaths(*((CSAOPSvc **)this + 6));
  objc_msgSend(*((id *)this + 7), "setNextFireDelay:interval:", 1.0, 1.79769313e308);
  objc_msgSend(*(id *)(*((_QWORD *)this + 6) + 1048), "releasePowerAssertion");
  objc_msgSend(*(id *)(*((_QWORD *)this + 6) + 1048), "powerlogActivity:state:", 5, CFAbsoluteTimeGetCurrent());
  return objc_msgSend(*(id *)(*((_QWORD *)this + 6) + 16), "replyToXPCMessage");
}

void CSAOPSvc::updateMetadataAtEnd(CSAOPSvc *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  double v16;
  int v17;
  int v18;
  int v19;
  double v20;
  double v21;
  double v22;
  void *v23;
  void *v24;
  double v25;
  void *v26;
  double v27;
  void *v28;
  double v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  void *v60;
  unsigned int v61;
  void *v62;
  void *v63;
  _QWORD v64[28];
  _QWORD v65[28];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSPlatformInfo sharedInstance](CSPlatformInfo, "sharedInstance"));
  v63 = v2;
  if ((objc_msgSend(v2, "isKappaDetectionDevice") & 1) != 0)
    v3 = 1;
  else
    v3 = objc_msgSend(v2, "isKappaLoggingDevice") - 1;
  v4 = *((unsigned int *)this + 230);
  v5 = *((_DWORD *)this + 231);
  v6 = *((_BYTE *)this + 928);
  v7 = *((unsigned __int8 *)this + 929);
  v8 = *((unsigned __int8 *)this + 930);
  v9 = *((unsigned __int8 *)this + 931);
  v10 = *((unsigned __int8 *)this + 932);
  v11 = *((_QWORD *)this + 118);
  v12 = *((unsigned __int16 *)this + 476);
  v61 = *((unsigned __int16 *)this + 477);
  v13 = *((_DWORD *)this + 239);
  v14 = *((_DWORD *)this + 240);
  v15 = *((_DWORD *)this + 241);
  v16 = *((double *)this + 121);
  v58 = *((_DWORD *)this + 244);
  v59 = *((unsigned __int8 *)this + 980);
  v17 = *((_DWORD *)this + 246);
  v18 = *((_DWORD *)this + 247);
  v19 = *((_DWORD *)this + 248);
  v55 = *((unsigned __int8 *)this + 997);
  v56 = *((unsigned __int8 *)this + 996);
  v54 = *((unsigned __int8 *)this + 998);
  if (v5 >= 1000)
    v5 = 1000;
  v57 = v5;
  v53 = (void *)*((_QWORD *)this + 127);
  v64[0] = CFSTR("hasGPS");
  v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v4));
  v65[0] = v51;
  v64[1] = CFSTR("recordingUUID");
  v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)this + 129), "UUIDString"));
  v65[1] = v52;
  v64[2] = CFSTR("systemReleaseType");
  v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(v63, "getSystemReleaseType")));
  v65[2] = v50;
  v64[3] = CFSTR("HW");
  v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "getSystemModel"));
  v65[3] = v49;
  v64[4] = CFSTR("osVersionBuild");
  v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "getSystemVersionDescription"));
  v65[4] = v48;
  v64[5] = CFSTR("kappaDeviceType");
  v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v3));
  v65[5] = v47;
  v64[6] = CFSTR("martyDeviceType");
  v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
  v65[6] = v46;
  v64[7] = CFSTR("hasAudio");
  v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v6 & 1));
  v65[7] = v45;
  v64[8] = CFSTR("trigger");
  v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v11));
  v65[8] = v44;
  v64[9] = CFSTR("kappaTriggerPathBitmap");
  v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v7));
  v65[9] = v43;
  v64[10] = CFSTR("martyTriggerPathBitmap");
  v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v8));
  v65[10] = v42;
  v64[11] = CFSTR("btHint");
  v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v9));
  v65[11] = v41;
  v64[12] = CFSTR("gpsHint");
  v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v10));
  v65[12] = v40;
  v64[13] = CFSTR("kappaArmedSeconds");
  v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v12));
  v65[13] = v39;
  v64[14] = CFSTR("martyArmedSeconds");
  v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v61));
  v65[14] = v62;
  v64[15] = CFSTR("enableMode");
  v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v59));
  v65[15] = v60;
  v64[16] = CFSTR("IMU0");
  LODWORD(v20) = v13;
  v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v20));
  v65[16] = v38;
  v64[17] = CFSTR("IMU1");
  LODWORD(v21) = v14;
  v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v21));
  v65[17] = v37;
  v64[18] = CFSTR("IMU2");
  LODWORD(v22) = v15;
  v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v22));
  v65[18] = v36;
  v64[19] = CFSTR("deltaMaxIMUToTriggerTime");
  v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v16));
  v65[19] = v35;
  v64[20] = CFSTR("deltaMaxIMUToTriggerTimeIMU");
  v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v58));
  v65[20] = v23;
  v64[21] = CFSTR("distToRoad");
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v57));
  v65[21] = v24;
  v64[22] = CFSTR("maxAudioMeanTenMinPreFirstTrigger");
  LODWORD(v25) = v17;
  v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v25));
  v65[22] = v26;
  v64[23] = CFSTR("lastCompletedAudio15sWindowMeanFirstTrigger");
  LODWORD(v27) = v18;
  v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v27));
  v65[23] = v28;
  v64[24] = CFSTR("currentAudioWindowMeanFirstTrigger");
  LODWORD(v29) = v19;
  v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v29));
  v65[24] = v30;
  v64[25] = CFSTR("numAudioMaxEnvelopesFirstTrigger");
  v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v56));
  v65[25] = v31;
  v64[26] = CFSTR("locallyArmed");
  v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v55));
  v65[26] = v32;
  v64[27] = CFSTR("overrideMode");
  v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v54));
  v65[27] = v33;
  v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v65, v64, 28));
  objc_msgSend(v53, "updateMetadata:", v34);

}

void sub_100258FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,void *a33,void *a34)
{
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;

  _Unwind_Resume(a1);
}

void CSAOPSvc::stopAOPReading(CSAOPSvc *this)
{
  NSObject *v2;
  unsigned __int8 v3;
  uint8_t buf[16];

  if (qword_100387300 != -1)
    dispatch_once(&qword_100387300, &stru_10035E710);
  v2 = qword_100387308;
  if (os_log_type_enabled((os_log_t)qword_100387308, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "stopping the aop streaming", buf, 2u);
  }
  v3 = 5;
  CSAOPSvc::sendCommand(this, &v3, 1u);
}

uint64_t CSAOPSvc::closeFastpaths(CSAOPSvc *this)
{
  NSObject *v2;
  uint64_t i;
  uint64_t result;
  uint8_t v5[16];

  if (qword_100387320 != -1)
    dispatch_once(&qword_100387320, &stru_10035E6F0);
  v2 = qword_100387328;
  if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "closing fastpaths", v5, 2u);
  }
  for (i = 296; i != 920; i += 48)
    result = CSFastpathGlue::close((CSAOPSvc *)((char *)this + i));
  return result;
}

uint64_t CSAOPSvc::Done::trigger(CSAOPSvc::Done *this, uint64_t a2, const void *a3)
{
  if (a2 != 4)
    return 0;
  objc_msgSend(*(id *)(*((_QWORD *)this + 6) + 16), "finishSession", a3);
  return *((_QWORD *)this + 6) + 64;
}

void CSAOPSvc::CSAOPSvc(CSAOPSvc *this, CSAnomalyEventService *a2, CLSilo *a3)
{
  CSAnomalyEventService *v5;
  CLSilo *v6;
  id v7;
  CSAnomalyEventService *v8;
  uint64_t v9;
  uint64_t v10;
  CLSilo *v11;
  uint64_t i;
  NSObject *v13;
  uint8_t v14[16];

  v5 = a2;
  v6 = a3;
  if (qword_100387320 != -1)
    dispatch_once(&qword_100387320, &stru_10035E6F0);
  v7 = (id)qword_100387328;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = v7;
  v8 = v5;
  *((_QWORD *)this + 2) = v8;
  v10 = objc_opt_new(HIDManager, v9);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = v10;
  v11 = v6;
  *((_QWORD *)this + 6) = v11;
  *((_QWORD *)this + 7) = 0;
  CSHSM::State::State((CSAOPSvc *)((char *)this + 64), "idle");
  *((_QWORD *)this + 8) = &off_10035E670;
  *((_QWORD *)this + 14) = this;
  CSAOPSvc::Reading::Reading((CSAOPSvc *)((char *)this + 120), this, v11);
  CSAOPSvc::Done::Done((CSAOPSvc *)((char *)this + 232), (id *)this);
  for (i = 328; i != 952; i += 48)
    *(_QWORD *)((char *)this + i) = 0;
  *((_QWORD *)this + 131) = 0;
  *((_BYTE *)this + 1056) = 0;
  *((_QWORD *)this + 127) = 0;
  *((_QWORD *)this + 129) = 0;
  *((_QWORD *)this + 128) = 0;
  *((_BYTE *)this + 1040) = 0;
  *((_QWORD *)this + 134) = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  *((_QWORD *)this + 135) = objc_alloc_init(CSAPEventsBuffer);
  bzero((char *)this + 296, 0x270uLL);
  if (qword_100387320 != -1)
    dispatch_once(&qword_100387320, &stru_10035E6F0);
  v13 = qword_100387328;
  if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "init", v14, 2u);
  }

}

void sub_100259504(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v7;

  sub_1002595D0(v5);
  sub_100259618(v4);
  *(_QWORD *)(v1 + 64) = &off_1003659C8;
  v7 = *(void **)(v1 + 80);
  if (v7)
  {
    *(_QWORD *)(v1 + 88) = v7;
    operator delete(v7);
  }

  _Unwind_Resume(a1);
}

void sub_1002595C8()
{
  JUMPOUT(0x1002595A8);
}

uint64_t sub_1002595D0(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_1003659C8;
  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_100259618(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_1003659C8;
  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v2);
  }
  return a1;
}

_QWORD *sub_100259678(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1003659C8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void CSAOPSvc::sendCommand(CSAOPSvc *this, const unsigned __int8 *a2, unsigned int a3)
{
  void *v4;
  unsigned __int8 v5;
  id v6;
  NSObject *v7;
  int v8;
  id v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  id v13;

  v4 = (void *)*((_QWORD *)this + 4);
  v9 = 0;
  v5 = objc_msgSend(v4, "setReport:reportLength:withIdentifier:forType:error:", a2, a3, 0, 1, &v9);
  v6 = v9;
  if ((v5 & 1) == 0)
  {
    if (qword_100387320 != -1)
      dispatch_once(&qword_100387320, &stru_10035E6F0);
    v7 = qword_100387328;
    if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_FAULT))
    {
      v8 = *a2;
      *(_DWORD *)buf = 67109378;
      v11 = v8;
      v12 = 2112;
      v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "cmd(%u) HIDDevice setReport failed %@", buf, 0x12u);
    }
  }

}

uint64_t CSAOPSvc::stopDetection(uint64_t this)
{
  *(_BYTE *)(this + 200) = 1;
  return this;
}

uint64_t CSAOPSvc::stopCollection(uint64_t this)
{
  *(_BYTE *)(this + 201) = 1;
  return this;
}

void CSAOPSvc::suppressTriggers(CSAOPSvc *this, int a2)
{
  NSObject *v4;
  _DWORD v5[2];

  if (qword_100387320 != -1)
    dispatch_once(&qword_100387320, &stru_10035E6F0);
  v4 = qword_100387328;
  if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "suppressing triggers %d", (uint8_t *)v5, 8u);
  }
  *((_BYTE *)this + 1057) = a2;
}

id CSAOPSvc::reset(id *this)
{
  NSObject *v2;
  id result;
  uint8_t v4[16];

  if (qword_100387300 != -1)
    dispatch_once(&qword_100387300, &stru_10035E710);
  v2 = qword_100387308;
  if (os_log_type_enabled((os_log_t)qword_100387308, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "go back to idle state", v4, 2u);
  }
  CSHSM::signal((CSHSM *)this, 4, 0);
  result = objc_msgSend(this[134], "removeAllObjects");
  *((_BYTE *)this + 1056) = 0;
  *((_BYTE *)this + 1040) = 0;
  return result;
}

id CSAOPSvc::getArmedState(id *this, CSArmedSeconds *a2)
{
  CSArmedSeconds *v3;
  id v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  id v10;
  uint64_t v11;
  uint8_t buf[4];
  id v13;
  uint8_t v14[16];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v3 = a2;
  if (v3)
  {
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    *(_OWORD *)v14 = 0u;
    v15 = 0u;
    v14[0] = 4;
    v10 = 0;
    v11 = 128;
    v4 = objc_msgSend(this[4], "getReport:reportLength:withIdentifier:forType:error:", v14, &v11, 4, 1, &v10);
    v5 = v10;
    if ((v4 & 1) != 0)
    {
      if (qword_100387320 != -1)
        dispatch_once(&qword_100387320, &stru_10035E6F0);
      v6 = qword_100387328;
      if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v13) = v15;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "armed seconds %d", buf, 8u);
      }
      -[CSArmedSeconds setArmedSeconds:](v3, "setArmedSeconds:", v15);
      -[CSArmedSeconds setIsArmed:](v3, "setIsArmed:", BYTE4(v15));
    }
    else
    {
      if (qword_100387320 != -1)
        dispatch_once(&qword_100387320, &stru_10035E6F0);
      v8 = qword_100387328;
      if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 138412290;
        v13 = v5;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "getReport failed %@", buf, 0xCu);
      }
    }

  }
  else
  {
    if (qword_100387320 != -1)
      dispatch_once(&qword_100387320, &stru_10035E6F0);
    v7 = qword_100387328;
    if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "query nil", v14, 2u);
    }
    v4 = 0;
  }

  return v4;
}

void sub_100259BA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CSAOPSvc::getArmedClients(id *this, CSArmedClients *a2)
{
  CSArmedClients *v3;
  id v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  id v10;
  uint64_t v11;
  uint8_t buf[4];
  _BYTE v13[10];
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  uint8_t v18[16];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v3 = a2;
  if (v3)
  {
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    *(_OWORD *)v18 = 0u;
    v19 = 0u;
    v18[0] = 5;
    v10 = 0;
    v11 = 128;
    v4 = objc_msgSend(this[4], "getReport:reportLength:withIdentifier:forType:error:", v18, &v11, 5, 1, &v10);
    v5 = v10;
    if ((v4 & 1) != 0)
    {
      -[CSArmedClients setKappaArmedSeconds:](v3, "setKappaArmedSeconds:", v19);
      if (qword_100387320 != -1)
        dispatch_once(&qword_100387320, &stru_10035E6F0);
      v6 = qword_100387328;
      if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109888;
        *(_DWORD *)v13 = v19;
        *(_WORD *)&v13[4] = 1024;
        *(_DWORD *)&v13[6] = DWORD1(v19);
        v14 = 1024;
        v15 = DWORD2(v19);
        v16 = 1024;
        v17 = v20;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "clients %d %d %d %d", buf, 0x1Au);
      }
      -[CSArmedClients setMartyArmedSecondsLocal:](v3, "setMartyArmedSecondsLocal:", DWORD1(v19));
      -[CSArmedClients setMartyArmedSecondsRemote:](v3, "setMartyArmedSecondsRemote:", DWORD2(v19));
      -[CSArmedClients setEnableMode:](v3, "setEnableMode:", v20);
    }
    else
    {
      if (qword_100387320 != -1)
        dispatch_once(&qword_100387320, &stru_10035E6F0);
      v8 = qword_100387328;
      if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)v13 = v5;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "getReport failed %@", buf, 0xCu);
      }
    }

  }
  else
  {
    if (qword_100387320 != -1)
      dispatch_once(&qword_100387320, &stru_10035E6F0);
    v7 = qword_100387328;
    if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "query nil", v18, 2u);
    }
    v4 = 0;
  }

  return v4;
}

void sub_100259E3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t CSAOPSvc::getStat(CSAOPSvc *this, CSCAStat *a2)
{
  CSCAStat *v4;
  void *v5;
  void *v6;
  id *v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  id v11;
  NSObject *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  NSObject *v17;
  id v19;
  uint64_t v20;
  uint8_t v21[4];
  _BYTE v22[10];
  __int16 v23;
  unsigned int v24;
  __int16 v25;
  unsigned int v26;
  uint8_t buf[16];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  v4 = a2;
  v5 = (void *)*((_QWORD *)this + 4);
  if (v5)
  {
    v8 = (void *)*((_QWORD *)this + 7);
    v7 = (id *)((char *)this + 56);
    v6 = v8;
    if (v8)
    {
      -[CSCAStat setUserAge:](v4, "setUserAge:", objc_msgSend(v6, "userAge"));
      -[CSCAStat setSex:](v4, "setSex:", objc_msgSend(*v7, "sex"));
      -[CSCAStat setMcc1:](v4, "setMcc1:", objc_msgSend(*v7, "mcc1"));
      -[CSCAStat setMnc1:](v4, "setMnc1:", objc_msgSend(*v7, "mnc1"));
      -[CSCAStat setMcc2:](v4, "setMcc2:", objc_msgSend(*v7, "mcc2"));
      -[CSCAStat setMnc2:](v4, "setMnc2:", objc_msgSend(*v7, "mnc2"));
      -[CSCAStat setArmedSec:](v4, "setArmedSec:", objc_msgSend(*v7, "armedSec"));
      -[CSCAStat setArmedSecMartyLocal:](v4, "setArmedSecMartyLocal:", objc_msgSend(*v7, "armedSecMartyLocal"));
      -[CSCAStat setArmedSecMartyRemote:](v4, "setArmedSecMartyRemote:", objc_msgSend(*v7, "armedSecMartyRemote"));
      -[CSCAStat setArmedSecMartyBicycle:](v4, "setArmedSecMartyBicycle:", objc_msgSend(*v7, "armedSecMartyBicycle"));
      v9 = 1;
    }
    else
    {
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      *(_OWORD *)buf = 0u;
      v28 = 0u;
      buf[0] = 3;
      v19 = 0;
      v20 = 128;
      v9 = (uint64_t)objc_msgSend(v5, "getReport:reportLength:withIdentifier:forType:error:", buf, &v20, 3, 1, &v19);
      v11 = v19;
      if ((v9 & 1) != 0)
      {
        -[CSCAStat setUserAge:](v4, "setUserAge:", (char)v28);
        -[CSCAStat setSex:](v4, "setSex:", BYTE1(v28));
        -[CSCAStat setMcc1:](v4, "setMcc1:", SWORD1(v28));
        -[CSCAStat setMnc1:](v4, "setMnc1:", SWORD2(v28));
        -[CSCAStat setMcc2:](v4, "setMcc2:", SWORD3(v28));
        -[CSCAStat setMnc2:](v4, "setMnc2:", SWORD4(v28));
        -[CSCAStat setArmedSec:](v4, "setArmedSec:", WORD5(v28));
        -[CSCAStat setArmedSecMartyLocal:](v4, "setArmedSecMartyLocal:", HIWORD(v28));
        -[CSCAStat setArmedSecMartyRemote:](v4, "setArmedSecMartyRemote:", (unsigned __int16)v29);
        -[CSCAStat setArmedSecMartyBicycle:](v4, "setArmedSecMartyBicycle:", WORD6(v28));
        objc_storeStrong(v7, a2);
        if (qword_100387320 != -1)
          dispatch_once(&qword_100387320, &stru_10035E6F0);
        v12 = (id)qword_100387328;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          v13 = -[CSCAStat armedSec](v4, "armedSec");
          v14 = -[CSCAStat armedSecMartyLocal](v4, "armedSecMartyLocal");
          v15 = -[CSCAStat armedSecMartyRemote](v4, "armedSecMartyRemote");
          v16 = -[CSCAStat armedSecMartyBicycle](v4, "armedSecMartyBicycle");
          *(_DWORD *)v21 = 67109888;
          *(_DWORD *)v22 = v13;
          *(_WORD *)&v22[4] = 1024;
          *(_DWORD *)&v22[6] = v14;
          v23 = 1024;
          v24 = v15;
          v25 = 1024;
          v26 = v16;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "kappa sec %d marty local %d remote %d bicycle %d", v21, 0x1Au);
        }

      }
      else
      {
        if (qword_100387320 != -1)
          dispatch_once(&qword_100387320, &stru_10035E6F0);
        v17 = qword_100387328;
        if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)v21 = 138412290;
          *(_QWORD *)v22 = v11;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "getReport failed %@", v21, 0xCu);
        }
      }

    }
  }
  else
  {
    if (qword_100387320 != -1)
      dispatch_once(&qword_100387320, &stru_10035E6F0);
    v10 = qword_100387328;
    if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Invalid _device", buf, 2u);
    }
    v9 = 0;
  }

  return v9;
}

void sub_10025A23C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void CSAOPSvc::clearStat(CSAOPSvc *this)
{
  void *v1;

  v1 = (void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;

}

void CSAOPSvc::begin(CSAOPSvc *this)
{
  CSHSM::initial(this, (CSAOPSvc *)((char *)this + 64));
  CSAOPSvc::openHidManager(this);
}

void CSAOPSvc::openHidManager(CSAOPSvc *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  _QWORD v8[5];
  _QWORD v9[5];
  uint8_t buf[16];

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    objc_msgSend(v2, "open");
    objc_msgSend(*((id *)this + 3), "setDeviceMatching:", &off_10036DC80);
    v3 = (void *)*((_QWORD *)this + 3);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10025A408;
    v9[3] = &unk_10035E5E0;
    v9[4] = this;
    objc_msgSend(v3, "setDeviceNotificationHandler:", v9);
    v4 = (void *)*((_QWORD *)this + 3);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10025ABBC;
    v8[3] = &unk_10035E600;
    v8[4] = this;
    objc_msgSend(v4, "setInputReportHandler:", v8);
    v5 = (void *)*((_QWORD *)this + 3);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)this + 6), "queue"));
    objc_msgSend(v5, "setDispatchQueue:", v6);

    objc_msgSend(*((id *)this + 3), "activate");
  }
  else
  {
    if (qword_100387320 != -1)
      dispatch_once(&qword_100387320, &stru_10035E6F0);
    v7 = qword_100387328;
    if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "NULL IOHIDManager", buf, 2u);
    }
  }
}

void sub_10025A3F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10025A408(uint64_t a1, void *a2, int a3)
{
  id v5;
  CSAOPSvc *v6;
  kern_return_t RegistryEntryID;
  uint64_t v8;
  const char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint32_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t entryID;
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  CSAOPSvc *v19;

  v5 = a2;
  v6 = *(CSAOPSvc **)(a1 + 32);
  entryID = 0;
  RegistryEntryID = IORegistryEntryGetRegistryEntryID((io_registry_entry_t)objc_msgSend(v5, "service"), &entryID);
  if (RegistryEntryID)
  {
    if (qword_100387320 != -1)
      dispatch_once(&qword_100387320, &stru_10035E6F0);
    v8 = qword_100387328;
    if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v17) = RegistryEntryID;
      v9 = "IORegistryEntryGetRegistryEntryID failed 0x%x";
      v10 = v8;
      v11 = OS_LOG_TYPE_FAULT;
      v12 = 8;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v10, v11, v9, buf, v12);
    }
  }
  else
  {
    if (!a3)
    {
      CSAOPSvc::onServiceRemoved(v6);
      goto LABEL_19;
    }
    if (qword_100387320 != -1)
      dispatch_once(&qword_100387320, &stru_10035E6F0);
    v13 = qword_100387328;
    if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134218240;
      v17 = entryID;
      v18 = 2048;
      v19 = v6;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "A new safety device entry ID %llu, this %p", buf, 0x16u);
    }
    if (!*((_QWORD *)v6 + 4))
    {
      CSAOPSvc::onServiceAdded((uint64_t)v6, v5);
      goto LABEL_19;
    }
    if (qword_100387320 != -1)
      dispatch_once(&qword_100387320, &stru_10035E6F0);
    v14 = qword_100387328;
    if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v9 = "unexpected duplicate safety device";
      v10 = v14;
      v11 = OS_LOG_TYPE_ERROR;
      v12 = 2;
      goto LABEL_6;
    }
  }
LABEL_19:

}

void sub_10025A614(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CSAOPSvc::onServiceAdded(uint64_t a1, void *a2)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  unsigned __int8 v7;
  id v8;
  unsigned int v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  int v13;
  CSSPUKappaTrigger *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  CSSPUKappaTrigger *v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint8_t v36[4];
  _BYTE v37[10];
  uint64_t v38;
  _BYTE v39[6];
  __int16 v40;
  int v41;
  uint8_t buf[16];
  __int128 v43;
  __int128 v44;
  _OWORD v45[2];
  __int128 v46;
  __int128 v47;
  __int128 v48;

  v4 = a2;
  objc_storeStrong((id *)(a1 + 32), a2);
  if (qword_100387320 != -1)
    dispatch_once(&qword_100387320, &stru_10035E6F0);
  v5 = qword_100387328;
  if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_DEBUG))
  {
    v6 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "setting fastpaths device %p", buf, 0xCu);
  }
  v47 = 0u;
  v48 = 0u;
  v46 = 0u;
  v44 = 0u;
  memset(v45, 0, sizeof(v45));
  *(_OWORD *)buf = 0u;
  v43 = 0u;
  v34 = 0;
  v35 = 128;
  v7 = objc_msgSend(v4, "getReport:reportLength:withIdentifier:forType:error:", buf, &v35, 0, 1, &v34);
  v8 = v34;
  if ((v7 & 1) != 0)
  {
    if (((char)v43 & 0x80000000) == 0)
    {
      v9 = DWORD1(v43);
      *(_DWORD *)(a1 + 1004) = DWORD1(v43) & 0xFFFFFFF;
      *(_BYTE *)(a1 + 1000) = v9 >> 28;
      *(_QWORD *)(a1 + 1008) = *((_QWORD *)&v43 + 1);
      *(CFAbsoluteTime *)(a1 + 1064) = CFAbsoluteTimeGetCurrent();
      if (qword_100387320 != -1)
        dispatch_once(&qword_100387320, &stru_10035E6F0);
      v10 = qword_100387328;
      if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_INFO))
      {
        v11 = *(_QWORD *)(a1 + 1008);
        v12 = *(unsigned __int8 *)(a1 + 1000);
        v13 = *(_DWORD *)(a1 + 1004);
        *(_DWORD *)v36 = 134218752;
        *(_QWORD *)v37 = v11;
        *(_WORD *)&v37[8] = 2048;
        v38 = *(_QWORD *)&buf[8];
        *(_WORD *)v39 = 1024;
        *(_DWORD *)&v39[2] = v12;
        v40 = 1024;
        v41 = v13;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Service added trigger timestamp %llu, now %llu, RMS session %u SN %d", v36, 0x22u);
      }
      if (*(_QWORD *)&buf[8] - *(_QWORD *)(a1 + 1008) <= 0x1E847FuLL)
      {
        v14 = [CSSPUKappaTrigger alloc];
        LODWORD(v16) = DWORD1(v44);
        LODWORD(v15) = v44;
        LOWORD(v18) = WORD2(v48);
        LOWORD(v17) = WORD1(v48);
        LOWORD(v19) = WORD3(v48);
        LODWORD(v21) = DWORD2(v47);
        LODWORD(v20) = DWORD1(v47);
        BYTE4(v33) = BYTE12(v47);
        WORD1(v33) = v48;
        LOWORD(v33) = *(_WORD *)((char *)&v47 + 13);
        BYTE1(v32) = v46;
        LOBYTE(v32) = BYTE8(v48);
        LODWORD(v31) = *(_DWORD *)((char *)v45 + 14);
        BYTE2(v30) = BYTE12(v44);
        LOWORD(v30) = WORD5(v44);
        v22 = -[CSSPUKappaTrigger initWithTimestamp:meta:decel:impact:path:armedSec:motionHint:gpsHint:basebandHint:wifiHint:btHint:lastValidImuTimestamp:vehicleProbabilityLongTermMean:martyPath:enableMode:martyArmedSec:companionAopTs:maxMeanTenMinPreTrigger:lastCompleted15sWindowMean:currentWindowMean:numMaxEnvelopes:igneousPath:igneousGUID:martyImpactMagnitude:martyRotationMagnitude:overrideMode:martyIsBicycle:martyArmedSecBicycle:locallyArmed:](v14, "initWithTimestamp:meta:decel:impact:path:armedSec:motionHint:gpsHint:basebandHint:wifiHint:btHint:lastValidImuTimestamp:vehicleProbabilityLongTermMean:martyPath:enableMode:martyArmedSec:companionAopTs:maxMeanTenMinPreTrigger:lastCompleted15sWindowMean:currentWindowMean:numMaxEnvelopes:igneousPath:igneousGUID:martyImpactMagnitude:martyRotationMagnitude:overrideMode:martyIsBicycle:martyArmedSecBicycle:locallyArmed:", *((_QWORD *)&v43 + 1), v43, BYTE1(v43), WORD1(v43), SBYTE8(v44), SBYTE9(v44), v15, v16, v17, v18, v19, v20, v21, v30,
                *(_QWORD *)&v45[0],
                (char *)v45 + 8,
                v31,
                *((_QWORD *)&v45[1] + 1),
                v32,
                (char *)&v46 + 1,
                v33);
        if (*(_BYTE *)(a1 + 1057))
        {
          if (qword_100387320 != -1)
            dispatch_once(&qword_100387320, &stru_10035E6F0);
          v23 = qword_100387328;
          if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v36 = 0;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "suppressing trigger until detection service is ready", v36, 2u);
          }
        }
        else
        {
          objc_storeStrong((id *)(a1 + 40), v22);
          if (qword_100387320 != -1)
            dispatch_once(&qword_100387320, &stru_10035E6F0);
          v25 = (id)qword_100387328;
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            v26 = *((unsigned __int8 *)-[CSSPUKappaTrigger c_struct](v22, "c_struct") + 1);
            v27 = *((unsigned __int8 *)-[CSSPUKappaTrigger c_struct](v22, "c_struct") + 46);
            v28 = *((unsigned __int8 *)-[CSSPUKappaTrigger c_struct](v22, "c_struct") + 64);
            v29 = *((unsigned __int8 *)-[CSSPUKappaTrigger c_struct](v22, "c_struct") + 47);
            *(_DWORD *)v36 = 67109888;
            *(_DWORD *)v37 = v26;
            *(_WORD *)&v37[4] = 1024;
            *(_DWORD *)&v37[6] = v27;
            LOWORD(v38) = 1024;
            *(_DWORD *)((char *)&v38 + 2) = v28;
            HIWORD(v38) = 1024;
            *(_DWORD *)v39 = v29;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "aop trigger path %d marty path %d igneous path %d enabledMode %d", v36, 0x1Au);
          }

          CSHSM::signal((CSHSM *)a1, 1, 0);
        }

      }
    }
  }
  else
  {
    if (qword_100387320 != -1)
      dispatch_once(&qword_100387320, &stru_10035E6F0);
    v24 = qword_100387328;
    if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v36 = 138412290;
      *(_QWORD *)v37 = v8;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "getReport failed %@", v36, 0xCu);
    }
  }

}

void sub_10025AAC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void CSAOPSvc::onServiceRemoved(CSAOPSvc *this)
{
  NSObject *v2;
  uint64_t i;
  void *v4;
  uint8_t v5[16];

  if (qword_100387320 != -1)
    dispatch_once(&qword_100387320, &stru_10035E6F0);
  v2 = qword_100387328;
  if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "safety service disappeared!", v5, 2u);
  }
  for (i = 296; i != 920; i += 48)
    CSFastpathGlue::close((CSAOPSvc *)((char *)this + i));
  v4 = (void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;

}

void sub_10025ABBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  NSData *v8;

  v8 = a6;
  if (!a4)
    CSAOPSvc::onInputReport(*(CSAOPSvc **)(a1 + 32), v8);

}

void sub_10025AC00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void CSAOPSvc::onInputReport(CSAOPSvc *this, NSData *a2)
{
  NSData *v3;
  int v4;
  NSObject *v5;
  NSData *v6;
  id v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  NSObject *v17;
  NSObject *v18;
  unint64_t v19;
  CSSPUKappaTrigger *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  CSSPUKappaTrigger *v28;
  NSObject *v29;
  NSObject *v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint8_t buf[4];
  _BYTE v40[10];
  uint64_t v41;
  _BYTE v42[6];
  __int16 v43;
  int v44;
  __int128 __dst;
  __int128 v46;
  __int128 v47;
  _OWORD v48[2];
  __int128 v49;
  __int128 v50;
  __int128 v51;

  v3 = a2;
  v50 = 0u;
  v51 = 0u;
  v49 = 0u;
  v47 = 0u;
  memset(v48, 0, sizeof(v48));
  __dst = 0u;
  v46 = 0u;
  v4 = -[NSData length](v3, "length");
  if (v4 >= 129)
  {
    if (qword_100387320 != -1)
      dispatch_once(&qword_100387320, &stru_10035E6F0);
    v5 = qword_100387328;
    if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v40 = v4;
      *(_WORD *)&v40[4] = 1024;
      *(_DWORD *)&v40[6] = 128;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "mismatch between report and nsdata sizes %d %d", buf, 0xEu);
    }
  }
  v6 = objc_retainAutorelease(v3);
  v7 = -[NSData bytes](v6, "bytes");
  if (v4 >= 128)
    v8 = 128;
  else
    v8 = v4;
  memcpy(&__dst, v7, v8);
  v9 = __dst;
  switch((char)__dst)
  {
    case 0:
      v10 = DWORD1(v46);
      *((_DWORD *)this + 251) = DWORD1(v46) & 0xFFFFFFF;
      *((_BYTE *)this + 1000) = v10 >> 28;
      v11 = *((_QWORD *)&v46 + 1);
      *((_QWORD *)this + 126) = *((_QWORD *)&v46 + 1);
      *((CFAbsoluteTime *)this + 133) = CFAbsoluteTimeGetCurrent();
      if (qword_100387320 != -1)
        dispatch_once(&qword_100387320, &stru_10035E6F0);
      v12 = qword_100387328;
      if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_DEFAULT))
      {
        v13 = *((_QWORD *)this + 126);
        v14 = *((_QWORD *)&__dst + 1);
        v15 = *((unsigned __int8 *)this + 1000);
        v16 = *((_DWORD *)this + 251);
        *(_DWORD *)buf = 134218752;
        *(_QWORD *)v40 = v13;
        *(_WORD *)&v40[8] = 2048;
        v41 = *((_QWORD *)&__dst + 1);
        *(_WORD *)v42 = 1024;
        *(_DWORD *)&v42[2] = v15;
        v43 = 1024;
        v44 = v16;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "trigger timestamp %llu, now %llu, RMS session %u SN %d", buf, 0x22u);
      }
      else
      {
        v14 = *((_QWORD *)&__dst + 1);
      }
      if ((unint64_t)(v14 - *((_QWORD *)this + 126)) <= 0x1E847F)
      {
        v20 = [CSSPUKappaTrigger alloc];
        LODWORD(v22) = DWORD1(v47);
        LODWORD(v21) = v47;
        LOWORD(v24) = WORD2(v51);
        LOWORD(v23) = WORD1(v51);
        LOWORD(v25) = WORD3(v51);
        LODWORD(v27) = DWORD2(v50);
        LODWORD(v26) = DWORD1(v50);
        BYTE4(v38) = BYTE12(v50);
        WORD1(v38) = v51;
        LOWORD(v38) = *(_WORD *)((char *)&v50 + 13);
        BYTE1(v37) = v49;
        LOBYTE(v37) = BYTE8(v51);
        LODWORD(v36) = *(_DWORD *)((char *)v48 + 14);
        BYTE2(v35) = BYTE12(v47);
        LOWORD(v35) = WORD5(v47);
        v28 = -[CSSPUKappaTrigger initWithTimestamp:meta:decel:impact:path:armedSec:motionHint:gpsHint:basebandHint:wifiHint:btHint:lastValidImuTimestamp:vehicleProbabilityLongTermMean:martyPath:enableMode:martyArmedSec:companionAopTs:maxMeanTenMinPreTrigger:lastCompleted15sWindowMean:currentWindowMean:numMaxEnvelopes:igneousPath:igneousGUID:martyImpactMagnitude:martyRotationMagnitude:overrideMode:martyIsBicycle:martyArmedSecBicycle:locallyArmed:](v20, "initWithTimestamp:meta:decel:impact:path:armedSec:motionHint:gpsHint:basebandHint:wifiHint:btHint:lastValidImuTimestamp:vehicleProbabilityLongTermMean:martyPath:enableMode:martyArmedSec:companionAopTs:maxMeanTenMinPreTrigger:lastCompleted15sWindowMean:currentWindowMean:numMaxEnvelopes:igneousPath:igneousGUID:martyImpactMagnitude:martyRotationMagnitude:overrideMode:martyIsBicycle:martyArmedSecBicycle:locallyArmed:", v11, v46, BYTE1(v46), WORD1(v46), SBYTE8(v47), SBYTE9(v47), v21, v22, v23, v24, v25, v26, v27, v35,
                *(_QWORD *)&v48[0],
                (char *)v48 + 8,
                v36,
                *((_QWORD *)&v48[1] + 1),
                v37,
                (char *)&v49 + 1,
                v38);
        if (*((_BYTE *)this + 1057))
        {
          if (qword_100387320 != -1)
            dispatch_once(&qword_100387320, &stru_10035E6F0);
          v29 = qword_100387328;
          if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "suppressing trigger until detection service is ready", buf, 2u);
          }
        }
        else
        {
          objc_storeStrong((id *)this + 5, v28);
          if (qword_100387320 != -1)
            dispatch_once(&qword_100387320, &stru_10035E6F0);
          v30 = (id)qword_100387328;
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
          {
            v31 = *((unsigned __int8 *)-[CSSPUKappaTrigger c_struct](v28, "c_struct") + 1);
            v32 = *((unsigned __int8 *)-[CSSPUKappaTrigger c_struct](v28, "c_struct") + 46);
            v33 = *((unsigned __int8 *)-[CSSPUKappaTrigger c_struct](v28, "c_struct") + 64);
            v34 = *((unsigned __int8 *)-[CSSPUKappaTrigger c_struct](v28, "c_struct") + 47);
            *(_DWORD *)buf = 67109888;
            *(_DWORD *)v40 = v31;
            *(_WORD *)&v40[4] = 1024;
            *(_DWORD *)&v40[6] = v32;
            LOWORD(v41) = 1024;
            *(_DWORD *)((char *)&v41 + 2) = v33;
            HIWORD(v41) = 1024;
            *(_DWORD *)v42 = v34;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "aop trigger path %d marty path %d igneous path %d enabledMode %d", buf, 0x1Au);
          }

          CSHSM::signal(this, 1, 0);
        }

      }
      break;
    case 1:
      if (qword_100387320 != -1)
        dispatch_once(&qword_100387320, &stru_10035E6F0);
      v18 = qword_100387328;
      if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_INFO))
      {
        v19 = *((_QWORD *)&__dst + 1);
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)v40 = *((_QWORD *)&__dst + 1);
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "stream stopped at %llu", buf, 0xCu);
      }
      else
      {
        v19 = *((_QWORD *)&__dst + 1);
      }
      if (v19 > *((_QWORD *)this + 126))
        CSHSM::signal(this, 3, 0);
      break;
    case 2:
      objc_msgSend(*((id *)this + 2), "sosActivated");
      break;
    case 3:
      break;
    default:
      if (qword_100387320 != -1)
        dispatch_once(&qword_100387320, &stru_10035E6F0);
      v17 = qword_100387328;
      if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)v40 = v9;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Unexpected input report %u", buf, 8u);
      }
      break;
  }

}

void sub_10025B17C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL sub_10025B1C8(const void **a1, char *__s)
{
  int v4;
  size_t v5;
  const void *v6;

  v4 = *((char *)a1 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (v5 != strlen(__s))
    return 0;
  if (v4 >= 0)
    v6 = a1;
  else
    v6 = *a1;
  return memcmp(v6, __s, v5) == 0;
}

char *CSAOPSvc::recordStreams(id *this, NSMutableArray *a2, int a3)
{
  NSMutableArray *v5;
  char *v6;
  char *v7;
  int v8;
  int v9;
  char *v10;
  CSSPUGps *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  int v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  NSObject *v34;
  id v36;
  NSObject *v37;
  unint64_t v38;
  unint64_t v39;
  CSSPUKappaTrigger *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint8_t buf[4];
  _BYTE v50[10];
  CSSPUKappaTrigger *v51;
  _BYTE v52[6];
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;

  v5 = a2;
  if ((unint64_t)-[NSMutableArray count](v5, "count") < 0xC9
    || (v6 = (char *)-[NSMutableArray count](v5, "count"), v7 = v6 - 200, v6 == (char *)200))
  {
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v33 = 0;
    v43 = 0;
    v44 = 0;
    HIDWORD(v42) = 0;
    v10 = 0;
    v9 = 0;
    v8 = 0;
    goto LABEL_73;
  }
  v47 = 0;
  v48 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  while (1)
  {
    v11 = (CSSPUGps *)objc_claimAutoreleasedReturnValue(-[NSMutableArray objectAtIndexedSubscript:](v5, "objectAtIndexedSubscript:", v10));
    v12 = objc_opt_class(CSSPUSpl);
    if ((objc_opt_isKindOfClass(v11, v12) & 1) == 0)
      break;
    if (a3)
      objc_msgSend(this[127], "recordSoundPressureLevel:", v11);
    ++v9;
    *((_BYTE *)this + 928) = 1;
LABEL_8:

    if (v7 == ++v10)
    {
      v10 = v7;
      goto LABEL_72;
    }
  }
  v13 = objc_opt_class(CSSPUAccel800);
  if ((objc_opt_isKindOfClass(v11, v13) & 1) != 0)
  {
    ++v8;
    if (a3)
      objc_msgSend(this[127], "recordAccel800:", v11);
    goto LABEL_8;
  }
  v14 = objc_opt_class(CSSPUHgAccel);
  if ((objc_opt_isKindOfClass(v11, v14) & 1) != 0)
  {
    ++HIDWORD(v48);
    if (a3)
      objc_msgSend(this[127], "recordHgAccel:", v11);
    goto LABEL_8;
  }
  v15 = objc_opt_class(CSSPUDM);
  if ((objc_opt_isKindOfClass(v11, v15) & 1) != 0)
  {
    LODWORD(v48) = v48 + 1;
    if (a3)
      objc_msgSend(this[127], "recordDeviceMotion:", v11);
    goto LABEL_8;
  }
  v16 = objc_opt_class(CSSPUPressure);
  if ((objc_opt_isKindOfClass(v11, v16) & 1) != 0)
  {
    ++HIDWORD(v47);
    if (a3)
      objc_msgSend(this[127], "recordPressure:", v11);
    goto LABEL_8;
  }
  v17 = objc_opt_class(CSSPUAccel);
  if ((objc_opt_isKindOfClass(v11, v17) & 1) != 0)
  {
    LODWORD(v47) = v47 + 1;
    if (a3)
      objc_msgSend(this[127], "recordAccel:", v11);
    goto LABEL_8;
  }
  v18 = objc_opt_class(CSSPUGps);
  if ((objc_opt_isKindOfClass(v11, v18) & 1) != 0)
  {
    if (a3)
      objc_msgSend(this[127], "recordGPS:", v11);
    CSAOPSvc::processSample((CSAOPSvc *)this, v11);
    ++HIDWORD(v46);
    goto LABEL_8;
  }
  v19 = objc_opt_class(CSSPUKappaTrigger);
  if ((objc_opt_isKindOfClass(v11, v19) & 1) == 0)
  {
    v22 = objc_opt_class(CSSPUSteps);
    if ((objc_opt_isKindOfClass(v11, v22) & 1) != 0)
    {
      v23 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
      v41 = objc_msgSend(v23, "BOOLForKey:", CFSTR("CSKappaRecordSteps"));

      LODWORD(v42) = v42 + 1;
      if ((v41 & a3) == 1)
        objc_msgSend(this[127], "recordSteps:", v11);
    }
    else
    {
      v24 = objc_opt_class(CSSPUMag);
      if ((objc_opt_isKindOfClass(v11, v24) & 1) != 0)
      {
        LODWORD(v46) = v46 + 1;
        if (a3)
          objc_msgSend(this[127], "recordMag:", v11);
      }
      else
      {
        v25 = objc_opt_class(CSPressureCalibration);
        if ((objc_opt_isKindOfClass(v11, v25) & 1) != 0)
        {
          ++HIDWORD(v45);
          if (a3)
            objc_msgSend(this[127], "recordPressureCalibration:", v11);
        }
        else
        {
          v26 = objc_opt_class(CSSignificantUserInteraction);
          if ((objc_opt_isKindOfClass(v11, v26) & 1) != 0)
          {
            LODWORD(v45) = v45 + 1;
            if (a3)
              objc_msgSend(this[127], "recordSignificantUserInteraction:", v11);
          }
          else
          {
            v27 = objc_opt_class(CSSPURoadInfo);
            if ((objc_opt_isKindOfClass(v11, v27) & 1) != 0)
            {
              if (a3)
                objc_msgSend(this[127], "recordRoadInfo:", v11);
              CSAOPSvc::processSample((CSAOPSvc *)this, (CSSPURoadInfo *)v11);
              ++HIDWORD(v44);
            }
            else
            {
              v28 = objc_opt_class(CSSPUTrustedAudioResult);
              if ((objc_opt_isKindOfClass(v11, v28) & 1) != 0)
              {
                if (a3)
                  objc_msgSend(this[127], "recordTrustedAudio:", v11);
              }
              else
              {
                v29 = objc_opt_class(CSSPUActivityPhone);
                if ((objc_opt_isKindOfClass(v11, v29) & 1) != 0)
                {
                  LODWORD(v44) = v44 + 1;
                  if (a3)
                    objc_msgSend(this[127], "recordActivityPhone:", v11);
                }
                else
                {
                  v30 = objc_opt_class(CSSPUHertzSample);
                  if ((objc_opt_isKindOfClass(v11, v30) & 1) != 0)
                  {
                    ++HIDWORD(v43);
                    if (a3)
                      objc_msgSend(this[127], "recordSafetyHertzSample:", v11);
                  }
                  else
                  {
                    v31 = objc_opt_class(CSCompanionStatus);
                    if ((objc_opt_isKindOfClass(v11, v31) & 1) != 0)
                    {
                      LODWORD(v43) = v43 + 1;
                      if (a3)
                        objc_msgSend(this[127], "recordCompanionStatus:", v11);
                    }
                    else
                    {
                      v32 = objc_opt_class(CSRemoteSample);
                      if ((objc_opt_isKindOfClass(v11, v32) & 1) != 0)
                      {
                        ++HIDWORD(v42);
                        if (a3)
                          objc_msgSend(this[127], "recordRemoteSample:", v11);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    goto LABEL_8;
  }
  v40 = v11;
  if (((char)-[CSSPUKappaTrigger meta](v40, "meta") & 0x80000000) == 0)
  {
    if (qword_100387320 != -1)
      dispatch_once(&qword_100387320, &stru_10035E6F0);
    v20 = (id)qword_100387328;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      v39 = -[CSSPUKappaTrigger timestamp](v40, "timestamp");
      v21 = *((unsigned __int8 *)-[CSSPUKappaTrigger c_struct](v40, "c_struct") + 1);
      *(_DWORD *)buf = 134349568;
      *(_QWORD *)v50 = v39;
      *(_WORD *)&v50[8] = 2048;
      v51 = v40;
      *(_WORD *)v52 = 1024;
      *(_DWORD *)&v52[2] = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Notifying trigger %{public}llu %p %d", buf, 0x1Cu);
    }

    goto LABEL_43;
  }
  if ((id)-[CSSPUKappaTrigger timestamp](v40, "timestamp") <= this[126])
  {
LABEL_43:
    if (a3)
      objc_msgSend(this[127], "recordKappaTrigger:", v40);
    CSAOPSvc::processSample((CSAOPSvc *)this, v40);

    goto LABEL_8;
  }
  v36 = sub_100254C90();
  v37 = objc_claimAutoreleasedReturnValue(v36);
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
  {
    v38 = -[CSSPUKappaTrigger timestamp](v40, "timestamp");
    *(_DWORD *)buf = 134349056;
    *(_QWORD *)v50 = v38;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Notifying streaming finish %{public}llu", buf, 0xCu);
  }

LABEL_72:
  v33 = v42;
LABEL_73:
  if (qword_100387320 != -1)
    dispatch_once(&qword_100387320, &stru_10035E6F0);
  v34 = qword_100387328;
  if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67113216;
    *(_DWORD *)v50 = v8;
    *(_WORD *)&v50[4] = 1024;
    *(_DWORD *)&v50[6] = v48;
    LOWORD(v51) = 1024;
    *(_DWORD *)((char *)&v51 + 2) = HIDWORD(v47);
    HIWORD(v51) = 1024;
    *(_DWORD *)v52 = v9;
    *(_WORD *)&v52[4] = 1024;
    v53 = HIDWORD(v46);
    v54 = 1024;
    v55 = HIDWORD(v48);
    v56 = 1024;
    v57 = v33;
    v58 = 1024;
    v59 = v47;
    v60 = 1024;
    v61 = v46;
    v62 = 1024;
    v63 = HIDWORD(v45);
    v64 = 1024;
    v65 = v45;
    v66 = 1024;
    v67 = HIDWORD(v44);
    v68 = 1024;
    v69 = v44;
    v70 = 1024;
    v71 = 0;
    v72 = 1024;
    v73 = HIDWORD(v43);
    v74 = 1024;
    v75 = v43;
    v76 = 1024;
    v77 = HIDWORD(v42);
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "Sorted %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u", buf, 0x68u);
  }

  return v10;
}

void sub_10025BA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t CSAOPSvc::processSample(uint64_t this, CSSPUSpl *a2)
{
  *(_BYTE *)(this + 928) = 1;
  return this;
}

void CSAOPSvc::processSample(CSAOPSvc *this, CSSPUGps *a2)
{
  CSSPUGps *v3;
  int v4;
  double Current;
  uint64_t v6;
  void *v7;
  double v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD v12[2];
  _QWORD v13[2];

  v3 = a2;
  v4 = *((_DWORD *)this + 230);
  if (!v4)
  {
    Current = CFAbsoluteTimeGetCurrent();
    LODWORD(Current) = sunElevationDeg(Current, *((float *)-[CSSPUGps c_struct](v3, "c_struct") + 4), *((float *)-[CSSPUGps c_struct](v3, "c_struct") + 5));
    v6 = *((unsigned __int8 *)-[CSSPUGps c_struct](v3, "c_struct") + 32);
    v7 = (void *)*((_QWORD *)this + 127);
    v12[0] = CFSTR("sunElevation");
    LODWORD(v8) = LODWORD(Current);
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v8));
    v12[1] = CFSTR("signalEnvironment");
    v13[0] = v9;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v6));
    v13[1] = v10;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v13, v12, 2));
    objc_msgSend(v7, "updateMetadata:", v11);

    v4 = *((_DWORD *)this + 230);
  }
  *((_DWORD *)this + 230) = v4 + 1;

}

void sub_10025BC14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void CSAOPSvc::processSample(CSAOPSvc *this, CSSPUKappaTrigger *a2)
{
  CSSPUKappaTrigger *v3;
  CSSPUKappaTrigger *v4;
  NSObject *v15;
  double v16;
  double v17;
  double v18;
  int v19;
  int v22;
  NSObject *v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  int v38;
  int v39;
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  double v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  int v48;

  v3 = a2;
  v4 = v3;
  if (!*((_QWORD *)this + 117))
  {
    _H0 = *((_WORD *)-[CSSPUKappaTrigger c_struct](v3, "c_struct") + 49);
    __asm { FCVT            S0, H0 }
    *((_DWORD *)this + 246) = _S0;
    _H0 = *((_WORD *)-[CSSPUKappaTrigger c_struct](v4, "c_struct") + 50);
    __asm { FCVT            S0, H0 }
    *((_DWORD *)this + 247) = _S0;
    _H0 = *((_WORD *)-[CSSPUKappaTrigger c_struct](v4, "c_struct") + 51);
    __asm { FCVT            S0, H0 }
    *((_DWORD *)this + 248) = _S0;
    *((_BYTE *)this + 996) = *((_BYTE *)-[CSSPUKappaTrigger c_struct](v4, "c_struct") + 104);
  }
  if (qword_100387320 != -1)
    dispatch_once(&qword_100387320, &stru_10035E6F0);
  v15 = qword_100387328;
  if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_INFO))
  {
    v16 = *((float *)this + 246);
    v17 = *((float *)this + 247);
    v18 = *((float *)this + 248);
    v19 = *((unsigned __int8 *)this + 996);
    v39 = 134218752;
    v40 = v16;
    v41 = 2048;
    v42 = v17;
    v43 = 2048;
    v44 = v18;
    v45 = 1024;
    LODWORD(v46) = v19;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "historical loudness stats %f / %f / %f / %i", (uint8_t *)&v39, 0x26u);
  }
  if (!*((_QWORD *)this + 117))
  {
    *((_QWORD *)this + 117) = (unint64_t)CFAbsoluteTimeGetCurrent();
    *((_QWORD *)this + 118) = *((_QWORD *)-[CSSPUKappaTrigger c_struct](v4, "c_struct") + 1);
    *((_BYTE *)this + 931) = *((_BYTE *)-[CSSPUKappaTrigger c_struct](v4, "c_struct") + 28);
    *((_BYTE *)this + 932) = *((_BYTE *)-[CSSPUKappaTrigger c_struct](v4, "c_struct") + 25);
    *((_WORD *)this + 476) = *((_WORD *)-[CSSPUKappaTrigger c_struct](v4, "c_struct") + 1);
    *((_WORD *)this + 477) = *((_WORD *)-[CSSPUKappaTrigger c_struct](v4, "c_struct") + 24);
    *((_BYTE *)this + 998) = *((_BYTE *)-[CSSPUKappaTrigger c_struct](v4, "c_struct") + 93);
    *((_BYTE *)this + 997) = *((_BYTE *)-[CSSPUKappaTrigger c_struct](v4, "c_struct") + 92);
  }
  *((_BYTE *)this + 929) |= *((_BYTE *)-[CSSPUKappaTrigger c_struct](v4, "c_struct") + 1);
  *((_BYTE *)this + 930) |= *((_BYTE *)-[CSSPUKappaTrigger c_struct](v4, "c_struct") + 46);
  *((_BYTE *)this + 980) |= *((_BYTE *)-[CSSPUKappaTrigger c_struct](v4, "c_struct") + 47);
  _H0 = *((_WORD *)-[CSSPUKappaTrigger c_struct](v4, "c_struct") + 20);
  __asm { FCVT            S0, H0 }
  if (*((float *)this + 239) >= _S0)
  {
    v22 = -1;
  }
  else
  {
    v22 = 0;
    _H0 = *((_WORD *)-[CSSPUKappaTrigger c_struct](v4, "c_struct") + 20);
    __asm { FCVT            S0, H0 }
    *((_DWORD *)this + 239) = _S0;
  }
  _H0 = *((_WORD *)-[CSSPUKappaTrigger c_struct](v4, "c_struct") + 21);
  __asm { FCVT            S0, H0 }
  if (*((float *)this + 240) < _S0)
  {
    _H0 = *((_WORD *)-[CSSPUKappaTrigger c_struct](v4, "c_struct") + 21);
    __asm { FCVT            S0, H0 }
    *((_DWORD *)this + 240) = _S0;
    v22 = 1;
  }
  _H0 = *((_WORD *)-[CSSPUKappaTrigger c_struct](v4, "c_struct") + 22);
  __asm { FCVT            S0, H0 }
  if (*((float *)this + 241) >= _S0)
  {
    if (v22 == -1)
      goto LABEL_19;
  }
  else
  {
    _H0 = *((_WORD *)-[CSSPUKappaTrigger c_struct](v4, "c_struct") + 22);
    __asm { FCVT            S0, H0 }
    *((_DWORD *)this + 241) = _S0;
    v22 = 2;
  }
  if (*((double *)this + 133) > 0.0)
  {
    *((double *)this + 121) = (double)(unint64_t)(*((_QWORD *)-[CSSPUKappaTrigger c_struct](v4, "c_struct") + 1)
                                                       - *((_QWORD *)this + 117));
    *((_DWORD *)this + 244) = v22;
  }
LABEL_19:
  if (qword_100387320 != -1)
    dispatch_once(&qword_100387320, &stru_10035E6F0);
  v33 = qword_100387328;
  if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_INFO))
  {
    v34 = *((float *)this + 239);
    v35 = *((float *)this + 240);
    v36 = *((float *)this + 241);
    v37 = *((_QWORD *)this + 121);
    v38 = *((_DWORD *)this + 244);
    v39 = 134219008;
    v40 = v34;
    v41 = 2048;
    v42 = v35;
    v43 = 2048;
    v44 = v36;
    v45 = 2048;
    v46 = v37;
    v47 = 1024;
    v48 = v38;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "trigger session stats %f / %f / %f / %f / %d", (uint8_t *)&v39, 0x30u);
  }

}

void sub_10025C020(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CSAOPSvc::processSample(CSAOPSvc *this, CSSPURoadInfo *a2)
{
  CSSPURoadInfo *v3;
  void *v4;
  void *v5;
  double v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  int v12;
  float v13;
  NSObject *v14;
  uint8_t v15[8];
  _QWORD v16[5];
  _QWORD v17[5];

  v3 = a2;
  v4 = (void *)*((_QWORD *)this + 127);
  v16[0] = CFSTR("roadClass");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *((unsigned __int8 *)-[CSSPURoadInfo c_struct](v3, "c_struct") + 16)));
  v17[0] = v5;
  v16[1] = CFSTR("distToRoadHorizontalAccuracy");
  *(float *)&v6 = roundf(*((float *)-[CSSPURoadInfo c_struct](v3, "c_struct") + 5));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v6));
  v17[1] = v7;
  v16[2] = CFSTR("numRoadFeaturesEvaluated");
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *((unsigned __int16 *)-[CSSPURoadInfo c_struct](v3, "c_struct") + 12)));
  v17[2] = v8;
  v16[3] = CFSTR("GEOHandlerErrorDomain");
  v9 = objc_msgSend(objc_alloc((Class)NSString), "initWithBytes:length:encoding:", (char *)-[CSSPURoadInfo c_struct](v3, "c_struct") + 26, strnlen((const char *)-[CSSPURoadInfo c_struct](v3, "c_struct") + 26, 0x40uLL), 1);
  v17[3] = v9;
  v16[4] = CFSTR("GEOHandlerErrorCode");
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLong:](NSNumber, "numberWithLong:", *((_QWORD *)-[CSSPURoadInfo c_struct](v3, "c_struct") + 12)));
  v17[4] = v10;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v17, v16, 5));
  objc_msgSend(v4, "updateMetadata:", v11);

  if (*((_BYTE *)-[CSSPURoadInfo c_struct](v3, "c_struct") + 16) != 9)
  {
    v12 = *((_DWORD *)this + 231);
    if (v12 == -1 || *((double *)-[CSSPURoadInfo c_struct](v3, "c_struct") + 1) > (double)v12)
    {
      v13 = *((double *)-[CSSPURoadInfo c_struct](v3, "c_struct") + 1);
      *((_DWORD *)this + 231) = llroundf(v13);
    }
    else
    {
      if (qword_100387320 != -1)
        dispatch_once(&qword_100387320, &stru_10035E6F0);
      v14 = qword_100387328;
      if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v15 = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Received road info more than once per session.", v15, 2u);
      }
    }
  }

}

void sub_10025C2EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

int64_t sub_10025C360(id a1, CSTimestampedSample *a2, CSTimestampedSample *a3)
{
  CSTimestampedSample *v4;
  CSTimestampedSample *v5;
  id v6;
  int64_t v7;
  id v8;

  v4 = a2;
  v5 = a3;
  v6 = -[CSTimestampedSample timestamp](v4, "timestamp");
  if (v6 <= -[CSTimestampedSample timestamp](v5, "timestamp"))
  {
    v8 = -[CSTimestampedSample timestamp](v4, "timestamp");
    if (v8 >= -[CSTimestampedSample timestamp](v5, "timestamp"))
      v7 = 0;
    else
      v7 = -1;
  }
  else
  {
    v7 = 1;
  }

  return v7;
}

void sub_10025C3E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void CSAOPSvc::setRecording(id *this, CSMSLDataRecording *a2, NSUUID *a3, char a4)
{
  CSMSLDataRecording *v8;
  NSUUID *v9;
  NSObject *v10;
  _BYTE buf[24];

  v8 = a2;
  v9 = a3;
  if ((a4 & 1) == 0 && !CSHSM::isIn((CSHSM *)this, (CSHSM::State *)(this + 8)))
  {
    sub_10025D008((NSObject **)buf);

    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreSafety/SafetyAlgorithms/CSAOPSvc.mm", 1517, "setRecording");
    __break(1u);
  }
  if (qword_100387320 != -1)
    dispatch_once(&qword_100387320, &stru_10035E6F0);
  v10 = qword_100387328;
  if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "setting msl recording for %@", buf, 0xCu);
  }
  objc_storeStrong(this + 127, a2);
  objc_storeStrong(this + 129, a3);
  *((_BYTE *)this + 1056) = 1;
  objc_msgSend(this[127], "updateMetadata:", &off_10036DCA8);

}

void sub_10025C570(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CSAOPSvc::updateMetadataAtBegin(id *this)
{
  return objc_msgSend(this[127], "updateMetadata:", &off_10036DCA8);
}

uint64_t CSAOPSvc::isRecording(CSAOPSvc *this)
{
  return *((unsigned __int8 *)this + 1056);
}

void CSAOPSvc::onCompanionStatusUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  CSCompanionStatus *v7;
  _DWORD v8[2];
  __int16 v9;
  uint64_t v10;

  if (qword_100387320 != -1)
    dispatch_once(&qword_100387320, &stru_10035E6F0);
  v6 = qword_100387328;
  if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_DEBUG))
  {
    v8[0] = 67109376;
    v8[1] = a2;
    v9 = 2048;
    v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CSCompanionStatus status=%d t=%llu", (uint8_t *)v8, 0x12u);
  }
  v7 = -[CSCompanionStatus initWithTimestamp:code:]([CSCompanionStatus alloc], "initWithTimestamp:code:", a3, a2);
  objc_msgSend(*(id *)(a1 + 1080), "addObject:", v7);

}

void sub_10025C6B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CSAOPSvc::onSafetyRemoteSample(id *this, const CSRemoteSample_Struct *a2)
{
  unint64_t v4;
  __int128 v5;
  CSRemoteSample *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v4 = +[CSTimeManager SPU_estimate_current_timestamp](CSTimeManager, "SPU_estimate_current_timestamp");
  v5 = *(_OWORD *)&a2->createdAtTimestamp;
  v7 = *(_OWORD *)&a2->mode;
  v8 = v5;
  v9 = *(_OWORD *)&a2->lastRealTriggerTimestamp;
  *((_QWORD *)&v8 + 1) = v4;
  v6 = -[CSRemoteSample initWithStruct:]([CSRemoteSample alloc], "initWithStruct:", &v7);
  objc_msgSend(this[135], "addObject:", v6, v7, v8, v9);

}

void sub_10025C738(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10025C748(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1003659C8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  operator delete();
}

void sub_10025C798(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_1003659C8;
  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v2);
  }
  operator delete();
}

void sub_10025C808(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_1003659C8;
  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v2);
  }
  operator delete();
}

void sub_10025C860(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "AOP");
  v2 = (void *)qword_100387328;
  qword_100387328 = (uint64_t)v1;

}

void sub_10025C890(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "Flow");
  v2 = (void *)qword_100387308;
  qword_100387308 = (uint64_t)v1;

}

void sub_10025C8C4()
{
  operator delete();
}

_QWORD *sub_10025C8D8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10035E740;
  result[1] = v3;
  return result;
}

uint64_t sub_10025C90C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10035E740;
  a2[1] = v2;
  return result;
}

void sub_10025C928(uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  CSSPUMag *v8;
  _DWORD v9[2];
  __int16 v10;
  uint64_t v11;

  v3 = *a3;
  if ((_DWORD)v3)
  {
    v4 = *a2;
    v5 = *(_QWORD *)(a1 + 8);
    if (qword_100387320 != -1)
      dispatch_once(&qword_100387320, &stru_10035E6F0);
    v6 = qword_100387328;
    if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(_QWORD *)(v4 + 16);
      v9[0] = 67109376;
      v9[1] = v3;
      v10 = 2048;
      v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%u mag100 %llu", (uint8_t *)v9, 0x12u);
    }
    do
    {
      if (!*(_BYTE *)(v5 + 1040) && (unint64_t)(*(_QWORD *)(v4 + 16) + 180000000) >= *(_QWORD *)(v5 + 1008))
      {
        v8 = -[CSSPUMag initWithStruct:]([CSSPUMag alloc], "initWithStruct:", v4);
        objc_msgSend(*(id *)(v5 + 1072), "addObject:", v8);

      }
      v4 += 24;
      --v3;
    }
    while (v3);
  }
}

void sub_10025CA70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10025CA88(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10025CAC4()
{
}

BOOL sub_10025CAD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

void sub_10025CB20()
{
  operator delete();
}

_QWORD *sub_10025CB34(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10035E7D0;
  result[1] = v3;
  return result;
}

uint64_t sub_10025CB68(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10035E7D0;
  a2[1] = v2;
  return result;
}

void sub_10025CB84(uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CSSPUDM *v10;
  _DWORD v11[2];
  __int16 v12;
  uint64_t v13;

  v3 = *a3;
  if ((_DWORD)v3)
  {
    v4 = *a2;
    v5 = *(_QWORD *)(a1 + 8);
    if (qword_100387320 != -1)
      dispatch_once(&qword_100387320, &stru_10035E6F0);
    v6 = qword_100387328;
    if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(_QWORD *)(v4 + 92);
      v11[0] = 67109376;
      v11[1] = v3;
      v12 = 2048;
      v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%u DM200 %llu", (uint8_t *)v11, 0x12u);
    }
    v8 = v4 + 28;
    do
    {
      if (*(_BYTE *)(v5 + 1040))
        v9 = 90000000;
      else
        v9 = 180000000;
      if ((unint64_t)(v9 + *(_QWORD *)(v8 + 14)) >= *(_QWORD *)(v5 + 1008))
      {
        v10 = -[CSSPUDM initWithTimestamp:quaternion:rate:userAccel:]([CSSPUDM alloc], "initWithTimestamp:quaternion:rate:userAccel:", *(_QWORD *)(v8 + 14), v8 - 28, v8 - 12, v8);
        objc_msgSend(*(id *)(v5 + 1072), "addObject:", v10);

      }
      v8 += 50;
      --v3;
    }
    while (v3);
  }
}

void sub_10025CCF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10025CD08(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_10025CD44()
{
}

void sub_10025CD50(void *a1, NSObject *a2, uint64_t a3, uint64_t a4, const char *a5, const char *a6, uint8_t *a7)
{
  _os_signpost_emit_with_name_impl(a1, a2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, a5, a6, a7, 0x26u);
}

void sub_10025CD68(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0x26u);
}

BOOL sub_10025CD70(NSObject *a1)
{
  return os_log_type_enabled(a1, OS_LOG_TYPE_FAULT);
}

uint64_t sub_10025CD78()
{
  id v0;
  NSObject *v1;
  id v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  uint8_t v10[40];

  v0 = sub_100254C90();
  v1 = objc_claimAutoreleasedReturnValue(v0);
  if (sub_10025CD70(v1))
  {
    sub_10000A8E8();
    sub_10025CD68((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"restartSession can only happen in reading\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10);
  }

  v2 = sub_100254C90();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_signpost_enabled(v3))
  {
    sub_10000A8E8();
    sub_10025CD50((void *)&_mh_execute_header, v3, v4, v5, "restartSession can only happen in reading", "{\"msg%{public}.0s\":\"restartSession can only happen in reading\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10);
  }

  v6 = sub_100254C90();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (sub_100028944(v7))
  {
    sub_10000A8E8();
    sub_10025CD68((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"restartSession can only happen in reading\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10);
  }

  v8 = abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreSafety/SafetyAlgorithms/CSAOPSvc.mm", 284, "restartSessionInternal");
  return sub_10025CEBC(v8);
}

uint64_t sub_10025CEBC()
{
  id v0;
  NSObject *v1;
  id v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  uint64_t result;
  uint8_t v9[40];

  v0 = sub_100254C90();
  v1 = objc_claimAutoreleasedReturnValue(v0);
  if (sub_10025CD70(v1))
  {
    sub_10000A8E8();
    sub_10025CD68((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"trigger is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
  }

  v2 = sub_100254C90();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_signpost_enabled(v3))
  {
    sub_10000A8E8();
    sub_10025CD50((void *)&_mh_execute_header, v3, v4, v5, "trigger is null", "{\"msg%{public}.0s\":\"trigger is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
  }

  v6 = sub_100254C90();
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (sub_100028944(v7))
  {
    sub_10000A8E8();
    sub_10025CD68((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"trigger is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
  }

  result = abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreSafety/SafetyAlgorithms/CSAOPSvc.mm", 319, "trigger");
  __break(1u);
  return result;
}

void sub_10025D008(NSObject **a1)
{
  id v2;
  NSObject *v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  uint8_t v10[40];

  v2 = sub_100254C90();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (sub_10025CD70(v3))
  {
    sub_1000249BC();
    sub_10025CD68((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"recording details can only be set in idle\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10);
  }

  v4 = sub_100254C90();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_signpost_enabled(v5))
  {
    sub_1000249BC();
    sub_10025CD50((void *)&_mh_execute_header, v5, v6, v7, "recording details can only be set in idle", "{\"msg%{public}.0s\":\"recording details can only be set in idle\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10);
  }

  v8 = sub_100254C90();
  v9 = objc_claimAutoreleasedReturnValue(v8);
  *a1 = v9;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    sub_1000249BC();
    sub_10025CD68((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"recording details can only be set in idle\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10);
  }
}

unint64_t CLRobustMaxAccelNorm::findPreviousChunkBoundary(unint64_t this)
{
  return 50000 * (this / 0xC350);
}

int64x2_t CLRobustMaxAccelNorm::resetChunks(CLRobustMaxAccelNorm *this, unint64_t a2)
{
  unint64_t v2;
  int64x2_t result;

  v2 = 50000 * (a2 / 0xC350);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 2) = v2;
  *((_QWORD *)this + 3) = v2 + 100000;
  result = vaddq_s64(vdupq_n_s64(v2), (int64x2_t)xmmword_1002ED500);
  *(int64x2_t *)this = result;
  return result;
}

BOOL CLRobustMaxAccelNorm::currentChunkBoundaryExceeded(CLRobustMaxAccelNorm *this, unint64_t a2)
{
  return *((_QWORD *)this + 1) <= a2;
}

BOOL CLRobustMaxAccelNorm::nextChunkBoundaryExceeded(CLRobustMaxAccelNorm *this, unint64_t a2)
{
  return *((_QWORD *)this + 3) <= a2;
}

float CLRobustMaxAccelNorm::currentChunkMaxAccelNorm(CLRobustMaxAccelNorm *this)
{
  return sqrtf((float)((float)(*((float *)this + 9) * *((float *)this + 9))+ (float)(*((float *)this + 8) * *((float *)this + 8)))+ (float)(*((float *)this + 10) * *((float *)this + 10)));
}

int8x8_t CLRobustMaxAccelNorm::updateMaxes(CLRobustMaxAccelNorm *this, int8x16_t a2, int8x16_t a3, float a4)
{
  float32x4_t v4;
  int8x8_t result;

  *(float *)a2.i32 = fabsf(*(float *)a2.i32);
  *(float *)&a3.i32[1] = a4;
  *(float32x2_t *)a3.i8 = vabs_f32(*(float32x2_t *)a3.i8);
  v4 = (float32x4_t)vextq_s8(vextq_s8(a2, a2, 4uLL), a3, 0xCuLL);
  v4.i32[3] = v4.i32[0];
  *((int8x16_t *)this + 2) = vbslq_s8((int8x16_t)vcgtq_f32(v4, *((float32x4_t *)this + 2)), (int8x16_t)v4, *((int8x16_t *)this + 2));
  result = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)a3.i8, *(float32x2_t *)((char *)this + 48)), *(int8x8_t *)a3.i8, *(int8x8_t *)((char *)this + 48));
  *((int8x8_t *)this + 6) = result;
  return result;
}

__n128 CLRobustMaxAccelNorm::switchChunks(CLRobustMaxAccelNorm *this)
{
  __n128 result;

  *((_QWORD *)this + 4) = *(_QWORD *)((char *)this + 44);
  *((_DWORD *)this + 10) = *((_DWORD *)this + 13);
  result = *((__n128 *)this + 1);
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 11) = 0;
  *(__n128 *)this = result;
  *((int64x2_t *)this + 1) = vaddq_s64(vdupq_lane_s64(result.n128_i64[0], 0), (int64x2_t)xmmword_1002ED510);
  return result;
}

float CLRobustMaxAccelNorm::run(uint64_t a1, void *a2)
{
  id v3;
  char *v4;
  char *v5;
  float v6;
  void *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  float v11;
  unint64_t v12;
  unint64_t v13;
  float v14;
  unint64_t v15;
  __int32 v16;
  __int32 v17;
  float *v18;
  int8x16_t v19;
  int8x16_t v20;
  float v21;
  float v22;
  int64x2_t v24;

  v3 = a2;
  v4 = (char *)objc_msgSend(v3, "count");
  if (v4)
  {
    v5 = 0;
    v6 = 0.0;
    v24 = (int64x2_t)xmmword_1002ED510;
    do
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectAtIndex:", v5, *(_OWORD *)&v24));
      v8 = *(_QWORD *)objc_msgSend(v7, "c_struct");
      v9 = *(_QWORD *)(a1 + 24);
      if (v9 <= v8)
      {
        v11 = sqrtf((float)((float)(*(float *)(a1 + 36) * *(float *)(a1 + 36))+ (float)(*(float *)(a1 + 32) * *(float *)(a1 + 32)))+ (float)(*(float *)(a1 + 40) * *(float *)(a1 + 40)));
        if (v6 < v11)
          v6 = v11;
        *(_QWORD *)(a1 + 32) = 0;
        *(_QWORD *)(a1 + 40) = 0;
        *(_QWORD *)(a1 + 48) = 0;
        v12 = 50000 * (v8 / 0xC350);
        v9 = v12 + 100000;
        *(_QWORD *)(a1 + 16) = v12;
        *(_QWORD *)(a1 + 24) = v12 + 100000;
        v13 = v12 - 50000;
        v10 = v12 + 50000;
        *(_QWORD *)a1 = v13;
        *(_QWORD *)(a1 + 8) = v10;
      }
      else
      {
        v10 = *(_QWORD *)(a1 + 8);
      }
      if (v10 <= v8)
      {
        v14 = sqrtf((float)((float)(*(float *)(a1 + 36) * *(float *)(a1 + 36))+ (float)(*(float *)(a1 + 32) * *(float *)(a1 + 32)))+ (float)(*(float *)(a1 + 40) * *(float *)(a1 + 40)));
        if (v6 < v14)
          v6 = v14;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 44);
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 52);
        v15 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)a1 = v15;
        *(_QWORD *)(a1 + 8) = v9;
        *(_QWORD *)(a1 + 48) = 0;
        *(_DWORD *)(a1 + 44) = 0;
        *(int64x2_t *)(a1 + 16) = vaddq_s64(vdupq_n_s64(v15), v24);
      }
      v16 = *((_DWORD *)objc_msgSend(v7, "c_struct") + 2);
      v17 = *((_DWORD *)objc_msgSend(v7, "c_struct") + 3);
      v18 = (float *)objc_msgSend(v7, "c_struct");
      v19.i32[0] = v16;
      v20.i32[0] = v17;
      CLRobustMaxAccelNorm::updateMaxes((CLRobustMaxAccelNorm *)a1, v19, v20, v18[4]);

      ++v5;
    }
    while (v4 != v5);
  }
  else
  {
    v6 = 0.0;
  }
  v21 = sqrtf((float)((float)(*(float *)(a1 + 36) * *(float *)(a1 + 36)) + (float)(*(float *)(a1 + 32) * *(float *)(a1 + 32)))+ (float)(*(float *)(a1 + 40) * *(float *)(a1 + 40)));
  if (v6 >= v21)
    v22 = v6;
  else
    v22 = v21;

  return v22;
}

void sub_10025D45C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

float CLRobustMaxAccelNorm::robustMaxAccelNorm(void *a1)
{
  _OWORD v2[3];
  uint64_t v3;

  v3 = 0;
  memset(v2, 0, sizeof(v2));
  return CLRobustMaxAccelNorm::run((uint64_t)v2, a1);
}

void CLMartyInferencesAlgSevereCrashResult::reset(CLMartyInferencesAlgSevereCrashResult *this)
{
  NSObject *v1;
  uint8_t v2[16];

  *((_BYTE *)this + 8) = 0;
  *((_DWORD *)this + 3) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 93) = 0;
  *((_DWORD *)this + 26) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_BYTE *)this + 128) = 0;
  *(_OWORD *)((char *)this + 132) = 0u;
  *(_OWORD *)((char *)this + 148) = 0u;
  *(_OWORD *)((char *)this + 164) = 0u;
  *(_OWORD *)((char *)this + 174) = 0u;
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10035F3F8);
  v1 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "[M][SC] ", v2, 2u);
  }
}

double CLMartyInferencesAlgSevereCrashResult::log(CLMartyInferencesAlgSevereCrashResult *this)
{
  NSObject *v2;
  double result;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  double v12;
  double v13;
  double v14;
  double v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  double v51;
  __int16 v52;
  double v53;
  __int16 v54;
  double v55;
  __int16 v56;
  double v57;
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;
  __int16 v78;
  int v79;
  __int16 v80;
  int v81;
  __int16 v82;
  int v83;
  __int16 v84;
  int v85;
  __int16 v86;
  int v87;
  __int16 v88;
  int v89;
  __int16 v90;
  int v91;
  __int16 v92;
  int v93;

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10035F3F8);
  v2 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *((_QWORD *)this + 10);
    v4 = *((_QWORD *)this + 11);
    v6 = *((unsigned __int8 *)this + 97);
    v7 = *((unsigned __int8 *)this + 96);
    v8 = *((unsigned __int8 *)this + 98);
    v9 = *((unsigned __int8 *)this + 99);
    v10 = *((unsigned __int8 *)this + 100);
    v11 = *((_DWORD *)this + 26);
    v12 = *((float *)this + 4);
    v13 = *((float *)this + 5);
    v14 = *((float *)this + 13);
    v15 = *((float *)this + 15);
    v16 = *((unsigned __int8 *)this + 112);
    v17 = *((unsigned __int8 *)this + 113);
    v18 = *((unsigned __int8 *)this + 114);
    v19 = *((unsigned __int8 *)this + 116);
    v20 = *((unsigned __int8 *)this + 117);
    v21 = *((unsigned __int8 *)this + 118);
    v22 = *((unsigned __int8 *)this + 119);
    v23 = *((unsigned __int8 *)this + 120);
    v24 = *((unsigned __int8 *)this + 121);
    v25 = *((unsigned __int8 *)this + 122);
    v26 = *((unsigned __int8 *)this + 123);
    v27 = *((unsigned __int8 *)this + 124);
    v28 = *((unsigned __int8 *)this + 125);
    v29 = *((unsigned __int8 *)this + 127);
    v30 = *((unsigned __int8 *)this + 188);
    v31 = *((unsigned __int8 *)this + 189);
    v32 = *((unsigned __int8 *)this + 128);
    v33 = *((unsigned __int8 *)this + 126);
    v34 = 134356480;
    v35 = v5;
    v36 = 2050;
    v37 = v4;
    v38 = 1026;
    v39 = v6;
    v40 = 1026;
    v41 = v7;
    v42 = 1026;
    v43 = v8;
    v44 = 1026;
    v45 = v9;
    v46 = 1026;
    v47 = v10;
    v48 = 1026;
    v49 = v11;
    v50 = 2050;
    v51 = v12;
    v52 = 2050;
    v53 = v13;
    v54 = 2050;
    v55 = v14;
    v56 = 2050;
    v57 = v15;
    v58 = 1026;
    v59 = v16;
    v60 = 1026;
    v61 = v17;
    v62 = 1026;
    v63 = v18;
    v64 = 1026;
    v65 = v19;
    v66 = 1026;
    v67 = v20;
    v68 = 1026;
    v69 = v21;
    v70 = 1026;
    v71 = v22;
    v72 = 1026;
    v73 = v23;
    v74 = 1026;
    v75 = v24;
    v76 = 1026;
    v77 = v25;
    v78 = 1026;
    v79 = v26;
    v80 = 1026;
    v81 = v27;
    v82 = 1026;
    v83 = v28;
    v84 = 1026;
    v85 = v29;
    v86 = 1026;
    v87 = v30;
    v88 = 1026;
    v89 = v31;
    v90 = 1026;
    v91 = v32;
    v92 = 1026;
    v93 = v33;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[M][SC] AlgBlock summary,A,%{public}llu,B,%{public}llu,C,%{public}d,D,%{public}d,E,%{public}d,F,%{public}d,G,%{public}d,H,%{public}d,config-1,%{public}f,config-2,%{public}f,config-3,%{public}f,config-4,%{public}f,debug-1a,%{public}d,debug-1b,%{public}d,debug-1c,%{public}d,debug-2a,%{public}d,debug-2b,%{public}d,debug-2c,%{public}d,debug-2d,%{public}d,debug-2e,%{public}d,debug-2f,%{public}d,debug-2g,%{public}d,debug-2h,%{public}d,debug-2i,%{public}d,debug-2j,%{public}d,debug-2k,%{public}d,debug-2l,%{public}d,debug-2m,%{public}d,debug-2n,%{public}d,debug-2o,%{public}d\n", (uint8_t *)&v34, 0xCEu);
  }
  return result;
}

void CLMartyInferencesAlgSevereCrash::CLMartyInferencesAlgSevereCrash(CLMartyInferencesAlgSevereCrash *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  NSObject *v78;
  char v79;
  uint64_t i;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  uint8_t buf[31];

  CLKappaAlgBlock::CLKappaAlgBlock(this, a2 + 1);
  v4 = *a2;
  *(_QWORD *)v5 = *a2;
  *(_QWORD *)(v5 + *(_QWORD *)(v4 - 152)) = a2[6];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 160)) = a2[7];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 168)) = a2[8];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 176)) = a2[9];
  *(_OWORD *)(v5 + 28) = 0u;
  v6 = v5 + 28;
  v86 = v5 + 48;
  v87 = v5 + 32;
  v84 = v5 + 80;
  v85 = v5 + 64;
  v82 = v5 + 112;
  v83 = v5 + 96;
  v81 = v5 + 128;
  v7 = v5 + 144;
  v8 = v5 + 160;
  v9 = v5 + 176;
  v10 = v5 + 192;
  v11 = (_QWORD *)(v5 + 208);
  v12 = v5 + 224;
  *(_OWORD *)(v5 + 412) = 0u;
  *(_OWORD *)(v5 + 428) = 0u;
  *(_OWORD *)(v5 + 380) = 0u;
  *(_OWORD *)(v5 + 396) = 0u;
  *(_OWORD *)(v5 + 348) = 0u;
  *(_OWORD *)(v5 + 364) = 0u;
  *(_OWORD *)(v5 + 316) = 0u;
  *(_OWORD *)(v5 + 332) = 0u;
  *(_OWORD *)(v5 + 284) = 0u;
  *(_OWORD *)(v5 + 300) = 0u;
  *(_OWORD *)(v5 + 252) = 0u;
  *(_OWORD *)(v5 + 268) = 0u;
  *(_OWORD *)(v5 + 220) = 0u;
  *(_OWORD *)(v5 + 236) = 0u;
  *(_OWORD *)(v5 + 188) = 0u;
  *(_OWORD *)(v5 + 204) = 0u;
  *(_OWORD *)(v5 + 156) = 0u;
  *(_OWORD *)(v5 + 172) = 0u;
  *(_OWORD *)(v5 + 124) = 0u;
  *(_OWORD *)(v5 + 140) = 0u;
  *(_OWORD *)(v5 + 92) = 0u;
  *(_OWORD *)(v5 + 108) = 0u;
  *(_OWORD *)(v5 + 60) = 0u;
  *(_OWORD *)(v5 + 76) = 0u;
  *(_OWORD *)(v5 + 44) = 0u;
  *(_QWORD *)(v5 + 444) = 0;
  *(_QWORD *)(v5 + 452) = 0x500000000;
  v13 = v5 + 472;
  *(_BYTE *)(v5 + 496) = 0;
  *(_QWORD *)(v5 + 480) = 0;
  *(_QWORD *)(v5 + 472) = 0;
  *(_BYTE *)(v5 + 488) = 0;
  *(_QWORD *)(v5 + 504) = 0;
  *(_BYTE *)(v5 + 512) = 0;
  *(_BYTE *)(v5 + 24) = 2;
  sub_1002604C0(buf);
  sub_1000081AC((uint64_t)this + 8, (__int128 *)buf);
  v14 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v15 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v88 = *((_QWORD *)this + 1);
  v89 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  sub_10025E048((uint64_t)&v88, buf);
  sub_1000081AC(v13, (__int128 *)buf);
  v20 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v21 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v89;
  if (v89)
  {
    v24 = (unint64_t *)&v89->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  sub_100260618(buf);
  v26 = (uint64_t *)sub_1000081AC(v87, (__int128 *)buf);
  sub_10000A6A0((_QWORD *)(v6 + 212), v26);
  v27 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v28 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  sub_100260704(buf);
  v30 = (uint64_t *)sub_1000081AC(v86, (__int128 *)buf);
  sub_10000A6A0((_QWORD *)this + 32, v30);
  v31 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v32 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  sub_1002607F0(buf);
  v34 = (uint64_t *)sub_1000081AC(v85, (__int128 *)buf);
  sub_10000A6A0((_QWORD *)this + 34, v34);
  v35 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v36 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  sub_1002608DC(buf);
  v38 = (uint64_t *)sub_1000081AC(v84, (__int128 *)buf);
  sub_10000A6A0((_QWORD *)this + 36, v38);
  v39 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v40 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  sub_1002609C8(buf);
  v42 = (uint64_t *)sub_1000081AC(v83, (__int128 *)buf);
  sub_10000A6A0((_QWORD *)this + 38, v42);
  v43 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v44 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  sub_100260AB4(buf);
  v46 = (uint64_t *)sub_1000081AC(v7, (__int128 *)buf);
  sub_10000A6A0((_QWORD *)this + 40, v46);
  v47 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v48 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  sub_100260BA0(buf);
  v50 = (uint64_t *)sub_1000081AC(v82, (__int128 *)buf);
  sub_10000A6A0((_QWORD *)this + 42, v50);
  v51 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v52 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  sub_100260C8C(buf);
  v54 = (uint64_t *)sub_1000081AC(v81, (__int128 *)buf);
  sub_10000A6A0((_QWORD *)this + 44, v54);
  v55 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v56 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  sub_100260D78(buf);
  v58 = (uint64_t *)sub_1000081AC(v8, (__int128 *)buf);
  sub_10000A6A0((_QWORD *)this + 46, v58);
  v59 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v60 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  sub_100260E64(buf);
  v62 = (uint64_t *)sub_1000081AC(v9, (__int128 *)buf);
  sub_10000A6A0((_QWORD *)this + 48, v62);
  v63 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v64 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  sub_100260F50(buf);
  v66 = (uint64_t *)sub_1000081AC(v10, (__int128 *)buf);
  sub_10000A6A0((_QWORD *)this + 50, v66);
  v67 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v68 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  sub_10026103C(buf);
  v70 = (uint64_t *)sub_1000081AC(v12, (__int128 *)buf);
  sub_10000A6A0((_QWORD *)this + 52, v70);
  v71 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v72 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  sub_100261128(buf);
  v74 = (uint64_t *)sub_1000081AC((uint64_t)v11, (__int128 *)buf);
  sub_10000A6A0((_QWORD *)this + 54, v74);
  v75 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v76 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  if (*((_QWORD *)this + 54) != *v11)
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_10035F3F8);
    v78 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEBUG, "Two-level de-escalator is not the last one", buf, 2u);
    }
  }
  v79 = *((_BYTE *)this + 24);
  for (i = 240; i != 448; i += 16)
    *(_BYTE *)(*(_QWORD *)((char *)this + i) + 32) = v79;
  (*(void (**)(CLMartyInferencesAlgSevereCrash *))(*(_QWORD *)this + 304))(this);
}

void sub_10025DF70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  CLKappaAlgBlock *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;

  sub_10000A718(v22);
  for (i = 432; i != 224; i -= 16)
    sub_10000A718((uint64_t)v16 + i);
  sub_10000A718(v21);
  sub_10000A718(v20);
  sub_10000A718(v19);
  sub_10000A718(v18);
  sub_10000A718(v17);
  sub_10000A718(v23);
  sub_10000A718(a10);
  sub_10000A718(a11);
  sub_10000A718(a12);
  sub_10000A718(a13);
  sub_10000A718(a14);
  sub_10000A718(a15);
  sub_10000A718(a16);
  CLKappaAlgBlock::~CLKappaAlgBlock(v16, a9);
  _Unwind_Resume(a1);
}

void *sub_10025E048@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = *(void **)a1;
  if (result
  {
    v5 = *(_QWORD *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void CLMartyInferencesAlgSevereCrash::CLMartyInferencesAlgSevereCrash(CLMartyInferencesAlgSevereCrash *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  NSObject *v74;
  char v75;
  uint64_t i;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  uint8_t buf[31];

  *(_QWORD *)this = off_100345D50;
  *((_QWORD *)this + 65) = off_100345DF8;
  *((_QWORD *)this + 66) = off_100345EC0;
  *((_QWORD *)this + 67) = off_100345F68;
  CLKappaAlgBlock::CLKappaAlgBlock(this, (uint64_t *)off_10035EDF0);
  *(_QWORD *)v2 = off_10035E8F0;
  *(_QWORD *)(v2 + 520) = off_10035EB90;
  *(_QWORD *)(v2 + 528) = off_10035ECC8;
  *(_QWORD *)(v2 + 536) = off_10035EDA0;
  v3 = v2 + 32;
  v82 = v2 + 64;
  v83 = v2 + 48;
  *(_OWORD *)(v2 + 44) = 0u;
  v80 = v2 + 96;
  v81 = v2 + 80;
  *(_OWORD *)(v2 + 60) = 0u;
  v77 = v2 + 128;
  v78 = v2 + 112;
  *(_OWORD *)(v2 + 76) = 0u;
  v79 = v2 + 144;
  v4 = v2 + 160;
  *(_OWORD *)(v2 + 92) = 0u;
  v5 = v2 + 176;
  v6 = v2 + 192;
  *(_OWORD *)(v2 + 108) = 0u;
  v7 = (_QWORD *)(v2 + 208);
  v8 = v2 + 224;
  *(_OWORD *)(v2 + 124) = 0u;
  *(_OWORD *)(v2 + 140) = 0u;
  *(_OWORD *)(v2 + 156) = 0u;
  *(_OWORD *)(v2 + 172) = 0u;
  *(_OWORD *)(v2 + 188) = 0u;
  *(_OWORD *)(v2 + 204) = 0u;
  *(_OWORD *)(v2 + 220) = 0u;
  *(_OWORD *)(v2 + 236) = 0u;
  *(_OWORD *)(v2 + 28) = 0u;
  *(_OWORD *)(v2 + 252) = 0u;
  *(_OWORD *)(v2 + 268) = 0u;
  *(_OWORD *)(v2 + 284) = 0u;
  *(_OWORD *)(v2 + 300) = 0u;
  *(_OWORD *)(v2 + 316) = 0u;
  *(_OWORD *)(v2 + 332) = 0u;
  *(_OWORD *)(v2 + 348) = 0u;
  *(_OWORD *)(v2 + 364) = 0u;
  *(_OWORD *)(v2 + 380) = 0u;
  *(_OWORD *)(v2 + 396) = 0u;
  *(_OWORD *)(v2 + 412) = 0u;
  *(_OWORD *)(v2 + 428) = 0u;
  *(_QWORD *)(v2 + 444) = 0;
  *(_QWORD *)(v2 + 452) = 0x500000000;
  v9 = v2 + 472;
  *(_BYTE *)(v2 + 496) = 0;
  *(_QWORD *)(v2 + 472) = 0;
  *(_QWORD *)(v2 + 480) = 0;
  *(_BYTE *)(v2 + 488) = 0;
  *(_QWORD *)(v2 + 504) = 0;
  *(_BYTE *)(v2 + 512) = 0;
  *(_BYTE *)(v2 + 24) = 2;
  sub_1002604C0(buf);
  sub_1000081AC((uint64_t)this + 8, (__int128 *)buf);
  v10 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v11 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v84 = *((_QWORD *)this + 1);
  v85 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  sub_10025E048((uint64_t)&v84, buf);
  sub_1000081AC(v9, (__int128 *)buf);
  v16 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v17 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v85;
  if (v85)
  {
    v20 = (unint64_t *)&v85->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  sub_100260618(buf);
  v22 = (uint64_t *)sub_1000081AC(v3, (__int128 *)buf);
  sub_10000A6A0((_QWORD *)this + 30, v22);
  v23 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v24 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  sub_100260704(buf);
  v26 = (uint64_t *)sub_1000081AC(v83, (__int128 *)buf);
  sub_10000A6A0((_QWORD *)this + 32, v26);
  v27 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v28 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  sub_1002607F0(buf);
  v30 = (uint64_t *)sub_1000081AC(v82, (__int128 *)buf);
  sub_10000A6A0((_QWORD *)this + 34, v30);
  v31 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v32 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  sub_1002608DC(buf);
  v34 = (uint64_t *)sub_1000081AC(v81, (__int128 *)buf);
  sub_10000A6A0((_QWORD *)this + 36, v34);
  v35 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v36 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  sub_1002609C8(buf);
  v38 = (uint64_t *)sub_1000081AC(v80, (__int128 *)buf);
  sub_10000A6A0((_QWORD *)this + 38, v38);
  v39 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v40 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  sub_100260AB4(buf);
  v42 = (uint64_t *)sub_1000081AC(v79, (__int128 *)buf);
  sub_10000A6A0((_QWORD *)this + 40, v42);
  v43 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v44 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  sub_100260BA0(buf);
  v46 = (uint64_t *)sub_1000081AC(v78, (__int128 *)buf);
  sub_10000A6A0((_QWORD *)this + 42, v46);
  v47 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v48 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  sub_100260C8C(buf);
  v50 = (uint64_t *)sub_1000081AC(v77, (__int128 *)buf);
  sub_10000A6A0((_QWORD *)this + 44, v50);
  v51 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v52 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  sub_100260D78(buf);
  v54 = (uint64_t *)sub_1000081AC(v4, (__int128 *)buf);
  sub_10000A6A0((_QWORD *)this + 46, v54);
  v55 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v56 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  sub_100260E64(buf);
  v58 = (uint64_t *)sub_1000081AC(v5, (__int128 *)buf);
  sub_10000A6A0((_QWORD *)this + 48, v58);
  v59 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v60 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  sub_100260F50(buf);
  v62 = (uint64_t *)sub_1000081AC(v6, (__int128 *)buf);
  sub_10000A6A0((_QWORD *)this + 50, v62);
  v63 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v64 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  sub_10026103C(buf);
  v66 = (uint64_t *)sub_1000081AC(v8, (__int128 *)buf);
  sub_10000A6A0((_QWORD *)this + 52, v66);
  v67 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v68 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  sub_100261128(buf);
  v70 = (uint64_t *)sub_1000081AC((uint64_t)v7, (__int128 *)buf);
  sub_10000A6A0((_QWORD *)this + 54, v70);
  v71 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v72 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  if (*((_QWORD *)this + 54) != *v7)
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_10035F3F8);
    v74 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEBUG, "Two-level de-escalator is not the last one", buf, 2u);
    }
  }
  v75 = *((_BYTE *)this + 24);
  for (i = 240; i != 448; i += 16)
    *(_BYTE *)(*(_QWORD *)((char *)this + i) + 32) = v75;
  (*(void (**)(CLMartyInferencesAlgSevereCrash *))(*(_QWORD *)this + 304))(this);
}

void sub_10025E88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  CLKappaAlgBlock *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;

  sub_10000A718(v21);
  for (i = 432; i != 224; i -= 16)
    sub_10000A718((uint64_t)v16 + i);
  sub_10000A718(v20);
  sub_10000A718(v19);
  sub_10000A718(v18);
  sub_10000A718(v17);
  sub_10000A718(v23);
  sub_10000A718(a12);
  sub_10000A718(a10);
  sub_10000A718(a11);
  sub_10000A718(a13);
  sub_10000A718(a14);
  sub_10000A718(a15);
  sub_10000A718(a16);
  sub_10000A718(v22);
  CLKappaAlgBlock::~CLKappaAlgBlock(v16, (uint64_t *)off_10035EDF0);
  _Unwind_Resume(a1);
}

void CLMartyInferencesAlgSevereCrash::resetConfiguration(CLMartyInferencesAlgSevereCrash *this)
{
  void *v2;
  double v3;
  double v4;
  double v5;
  int v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  int v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  int v16;
  void *v17;
  double v18;
  double v19;
  double v20;
  int v21;
  void *v22;
  void *v23;
  double v24;
  double v25;
  double v26;
  int v27;
  uint64_t v28;
  char *v29;
  id v30;
  _DWORD v31[3];
  __int128 v32;
  uint64_t v33;
  int v34;
  __int16 v35;
  int v36;
  uint64_t v37;
  unsigned __int8 v38;
  int v39;

  v30 = (id)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration configBaseKey:forFeatureMode:](CSPersistentConfiguration, "configBaseKey:forFeatureMode:", "InferencesAlgSCConfig", *((unsigned __int8 *)this + 24)));
  v31[2] = 5;
  v32 = xmmword_1002E5DF0;
  v33 = 0x700000002;
  v35 = 1305;
  v37 = 0x80000001ELL;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v3) = 1114636288;
  LODWORD(v4) = 3.0;
  LODWORD(v5) = 15.0;
  objc_msgSend(v2, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 0, v30, v4, v3, v5);
  v31[0] = v6;

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v8) = 1114636288;
  LODWORD(v9) = 1110704128;
  LODWORD(v10) = 3.0;
  objc_msgSend(v7, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 1, v30, v10, v8, v9);
  v31[1] = v11;

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v13) = 1114636288;
  LODWORD(v14) = 0;
  LODWORD(v15) = 10.0;
  objc_msgSend(v12, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 10, v30, v14, v13, v15);
  v34 = v16;

  v17 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v18) = 1114636288;
  LODWORD(v19) = 3.0;
  LODWORD(v20) = 25.0;
  objc_msgSend(v17, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 20, v30, v19, v18, v20);
  v36 = v21;

  v22 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  v38 = objc_msgSend(v22, "algorithmBoolNumber:inArrayForKey:defaultValue:", 23, v30, 0);

  v23 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v24) = 1114636288;
  LODWORD(v25) = -1.0;
  LODWORD(v26) = 10.0;
  objc_msgSend(v23, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 24, v30, v25, v24, v26);
  v39 = v27;

  CLMartyInferencesAlgSevereCrash::setConfig((uint64_t)this, (__int128 *)v31);
  v28 = 0;
  v29 = (char *)this + 240;
  do
  {
    (*(void (**)(_QWORD))(**(_QWORD **)&v29[v28] + 24))(*(_QWORD *)&v29[v28]);
    v28 += 16;
  }
  while (v28 != 208);

}

void sub_10025EB70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void CLMartyInferencesAlgSevereCrash::setConfig(uint64_t a1, __int128 *a2)
{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  NSObject *v8;
  float *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  int32x2_t v18;
  int v19;
  _BYTE buf[22];
  __int16 v21;
  double v22;
  __int16 v23;
  double v24;

  v4 = *(_OWORD **)(a1 + 472);
  v5 = *a2;
  v6 = a2[1];
  v7 = a2[3];
  v4[3] = a2[2];
  v4[4] = v7;
  v4[1] = v5;
  v4[2] = v6;
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10035F3F8);
  v8 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v9 = *(float **)(a1 + 472);
    v10 = v9[4];
    v11 = v9[5];
    v12 = v9[13];
    v13 = v9[15];
    *(_DWORD *)buf = 134218752;
    *(double *)&buf[4] = v10;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = v11;
    v21 = 2048;
    v22 = v12;
    v23 = 2048;
    v24 = v13;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "[M][SC] config, %f, %f, %f, %f", buf, 0x2Au);
  }
  v19 = *((_DWORD *)a2 + 7);
  CLKappaDeescalatorAutocorrelation::setConfig(*(_QWORD *)(a1 + 48), &v19);
  v18 = vrev64_s32(*(int32x2_t *)((char *)a2 + 20));
  CLKappaDeescalatorQuiescence::setConfig(*(_QWORD *)(a1 + 80), (uint64_t)&v18);
  v17 = 0;
  LODWORD(v17) = *((_DWORD *)a2 + 8);
  BYTE4(v17) = *((_BYTE *)a2 + 40);
  CLKappaDeescalatorStaticGps::setConfig(*(_QWORD *)(a1 + 144), (uint64_t)&v17);
  v14 = *((_QWORD *)a2 + 6);
  *(_QWORD *)buf = *(_QWORD *)((char *)a2 + 12);
  *(_QWORD *)&buf[8] = v14;
  CLKappaDeescalatorSteps::setConfig(*(_QWORD *)(a1 + 112), (uint64_t)buf);
  v16 = *((_BYTE *)a2 + 41);
  CLKappaDeescalatorMovingGps::setConfig(*(_QWORD *)(a1 + 64), &v16);
  sub_100005D24(*(_QWORD *)(a1 + 208));
  CLKappaDeescalatorWaterProxy::setConfig(*(CLKappaDeescalatorWaterProxy **)(a1 + 160));
  v15 = 0;
  LOBYTE(v15) = *((_BYTE *)a2 + 56);
  HIDWORD(v15) = *((_DWORD *)a2 + 15);
  CLSafetyDeescalatorJointDetection::setConfig(*(_QWORD *)(a1 + 192), (unsigned __int8 *)&v15);
}

uint64_t CLMartyInferencesAlgSevereCrash::reset(CLMartyInferencesAlgSevereCrash *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 59) + 24))(*((_QWORD *)this + 59));
  if (*((_BYTE *)this + 496))
    *((_BYTE *)this + 496) = 0;
  *(_WORD *)((char *)this + 505) = 0;
  *((_BYTE *)this + 507) = 0;
  *((_DWORD *)this + 113) = 0;
  return result;
}

void CLMartyInferencesAlgSevereCrash::epochFinalize(CLMartyInferencesAlgSevereCrash *this, uint64_t a2)
{
  void *v4;
  int *v5;
  uint64_t i;
  NSObject *v7;
  int v8;
  int v9;
  int v10;
  int isDecidedForOption;
  _BOOL4 shouldDeescalateForOption;
  _BOOL4 v13;
  _WORD *v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned __int16 v22;
  NSObject *v23;
  unint64_t v24;
  int v25;
  void *v26;
  NSObject *v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  float v31;
  float *v32;
  uint64_t j;
  int v34;
  uint64_t v35;
  char *v36;
  int v37;
  NSObject *v38;
  char v39;
  NSObject *v40;
  uint64_t m;
  int v42;
  NSObject *v43;
  char v44;
  NSObject *v45;
  uint64_t v46;
  const char *v47;
  char v48;
  uint64_t v49;
  uint64_t k;
  int v51;
  NSObject *v52;
  int v53;
  uint64_t n;
  int v55;
  int v56;
  _BOOL4 v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  char *v69;
  uint64_t ii;
  _DWORD *v71;
  void *v72;
  char v73;
  BOOL v74;
  uint8_t buf[4];
  _BOOL4 v76;
  __int16 v77;
  _BYTE v78[10];
  __int16 v79;
  int v80;
  __int16 v81;
  _BOOL4 v82;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  v5 = (int *)((char *)this + 28);
  if (CLKappaDeescalator::isDecidedForOption(*((_DWORD *)this + 7)))
  {
    for (i = 0; i != 208; i += 16)
      CLKappaDeescalator::previousEpochMadeDecision(*(CLKappaDeescalator **)((char *)this + i + 240));
    if (*((_BYTE *)this + 496))
      *((_BYTE *)this + 496) = 0;
  }
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10035F3F8);
  v7 = (id)qword_100387318;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    v8 = *((unsigned __int8 *)this + 505);
    v9 = *((unsigned __int8 *)this + 506);
    v10 = *((unsigned __int8 *)this + 507);
    isDecidedForOption = CLKappaDeescalator::isDecidedForOption(*((_DWORD *)this + 7));
    shouldDeescalateForOption = CLKappaDeescalator::shouldDeescalateForOption(*v5);
    *(_DWORD *)buf = 67110144;
    v76 = v8;
    v77 = 1024;
    *(_DWORD *)v78 = v9;
    *(_WORD *)&v78[4] = 1024;
    *(_DWORD *)&v78[6] = v10;
    v79 = 1024;
    v80 = isDecidedForOption;
    v81 = 1024;
    v82 = shouldDeescalateForOption;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[M][SC] is %u %u %u %u %u", buf, 0x20u);
  }

  CLKappaDeescalationDecision::reset((_DWORD *)this + 7);
  if (*((_BYTE *)this + 505))
    v13 = 1;
  else
    v13 = *((_BYTE *)this + 506) != 0;
  v14 = (_WORD *)((char *)this + 452);
  if (*((_BYTE *)this + 508))
    v15 = 1;
  else
    v15 = *((_BYTE *)this + 509) != 0;
  v16 = *((unsigned __int16 *)this + 227);
  v17 = *((unsigned int *)this + 114);
  v18 = *((unsigned __int16 *)this + 226);
  if (v18 + v16 >= v17)
    v19 = *((unsigned int *)this + 114);
  else
    v19 = 0;
  *((_BYTE *)v14 + v18 + v16 - v19 + 8) = v15;
  if (v17 <= v16)
  {
    if (v18 + 1 < v17)
      LOWORD(v17) = 0;
    *v14 = v18 + 1 - v17;
  }
  else
  {
    *((_WORD *)this + 227) = v16 + 1;
  }
  v20 = *((unsigned __int8 *)this + 512);
  if (*((_BYTE *)this + 511))
    v20 |= 2u;
  if (*((_BYTE *)this + 507))
    v21 = v20 | 4;
  else
    v21 = v20;
  v22 = (unsigned __int16)objc_msgSend(v4, "getBooleanDefault:", CFSTR("MartyForceEarlyCrashInSevereBlock"));
  if (v22 >= 0x100u && (_BYTE)v22 && !*((_BYTE *)this + 496))
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_10035F3F8);
    v23 = (id)qword_100387318;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "[M][SC] forcing early crash decision", buf, 2u);
    }

    *((_QWORD *)this + 61) = a2;
    *((_BYTE *)this + 496) = 1;
    *((_BYTE *)this + 504) = 1;
    goto LABEL_39;
  }
  if (v13)
  {
LABEL_39:
    *((_DWORD *)this + 112) = 0;
    if (*((_WORD *)this + 227))
    {
      v24 = 0;
      while (!*(_BYTE *)sub_100027E40((unsigned __int16 *)this + 226, v24))
      {
        if (++v24 >= *((unsigned __int16 *)this + 227))
          goto LABEL_43;
      }
      v25 = 1;
    }
    else
    {
LABEL_43:
      v25 = 0;
    }
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", CFSTR("ForceLowSenseDetected")));
    if (v26)
    {
      if (objc_msgSend(v4, "BOOLForKey:", CFSTR("ForceLowSenseDetected")))
      {
        if (qword_100387310 != -1)
          dispatch_once(&qword_100387310, &stru_10035F3F8);
        v27 = (id)qword_100387318;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "[M][SC] force low sense high", buf, 2u);
        }
        v25 = 1;
      }
      else
      {
        if (qword_100387310 != -1)
          dispatch_once(&qword_100387310, &stru_10035F3F8);
        v27 = (id)qword_100387318;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "[M][SC] force low sense low", buf, 2u);
        }
        v25 = 0;
      }

    }
    v74 = v25 != 0;
    sub_1000062D4(*((_QWORD *)this + 26), v25);
    v28 = 0;
    *((_QWORD *)this + 61) = a2;
    *((_BYTE *)this + 496) = 1;
    do
    {
      CLKappaDeescalator::earlyCrashDetected(*(CLKappaDeescalator **)((char *)this + v28 + 240), a2);
      v28 += 16;
    }
    while (v28 != 208);
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_10035F3F8);
    v29 = (id)qword_100387318;
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109376;
      v76 = v13;
      v77 = 2048;
      *(_QWORD *)v78 = a2;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "[M][SC] anyCrashDetectorDecision:%d, crashTimestamp:%llu", buf, 0x12u);
    }

    goto LABEL_65;
  }
  v74 = 0;
LABEL_65:
  CLKappaDeescalatorAutocorrelation::updateWithAnyCrashDetected(*((_QWORD *)this + 6), v13);
  v73 = *((_BYTE *)this + 496);
  if (!v73)
    goto LABEL_115;
  v30 = *((_QWORD *)this + 61);
  CLKappaDeescalatorStaticGps::updateCountTotal(*((_QWORD *)this + 18));
  v31 = (double)(unint64_t)(a2 - v30) * 0.000001;
  v32 = (float *)*((_QWORD *)this + 59);
  if (v32[13] < v31)
  {
    CLKappaDeescalatorMovingGps::updateCountTotal(*((_QWORD *)this + 8));
    v32 = (float *)*((_QWORD *)this + 59);
  }
  if (v32[4] >= v31)
    goto LABEL_115;
  v72 = v4;
  if (v32[5] > v31)
  {
    if (!*((_DWORD *)this + 112))
    {
      for (j = 0; j != 208; j += 16)
      {
        v34 = CLKappaDeescalator::evaluateAtMinHoldDuration(*(CLKappaDeescalator **)((char *)this + j + 240));
        CLKappaDeescalationDecision::update((_DWORD *)this + 7, v34);
      }
      *((_DWORD *)this + 112) = 1;
    }
    v35 = 0;
    v36 = (char *)this + 240;
    while (1)
    {
      v37 = CLKappaDeescalator::evaluateBetweenMinAndMaxHoldDuration(*(CLKappaDeescalator **)&v36[v35]);
      CLKappaDeescalationDecision::update((_DWORD *)this + 7, v37);
      if (v37 == 3)
        break;
      if (v37 == 2)
      {
        if (qword_100387310 != -1)
          dispatch_once(&qword_100387310, &stru_10035F3F8);
        v38 = qword_100387318;
        if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "[M][SC] two-level feed is escalation candidate", buf, 2u);
        }
        v39 = 1;
        *(_BYTE *)(*((_QWORD *)this + 59) + 189) = 1;
LABEL_87:
        sub_1000062DC(*((_QWORD *)this + 26), v39);
      }
      v35 += 16;
      if (v35 == 208)
      {
        v49 = *((_QWORD *)this + 59);
        if (*(float *)(v49 + 60) >= v31 && !*(_BYTE *)(v49 + 189))
        {
          v48 = 0;
          v4 = v72;
          goto LABEL_116;
        }
        v4 = v72;
        if (*((_DWORD *)this + 112) == 1)
        {
          for (k = 0; k != 208; k += 16)
          {
            v51 = CLKappaDeescalator::evaluateAtSecondDeescalationOpportunity(*(CLKappaDeescalator **)&v36[k]);
            CLKappaDeescalationDecision::update((_DWORD *)this + 7, v51);
          }
          v48 = 0;
          *((_DWORD *)this + 112) = 2;
          goto LABEL_116;
        }
LABEL_115:
        v48 = 0;
        goto LABEL_116;
      }
    }
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_10035F3F8);
    v40 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "[M][SC] two-level feed is no longer escalation candidate", buf, 2u);
    }
    v39 = 0;
    goto LABEL_87;
  }
  for (m = 0; m != 208; m += 16)
  {
    v42 = CLKappaDeescalator::evaluateAtBoundary(*(CLKappaDeescalator **)((char *)this + m + 240));
    CLKappaDeescalationDecision::update((_DWORD *)this + 7, v42);
    if (v42 == 3)
    {
      if (qword_100387310 != -1)
        dispatch_once(&qword_100387310, &stru_10035F3F8);
      v45 = qword_100387318;
      if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "[M][SC] two-level feed is no longer escalation candidate", buf, 2u);
      }
      v44 = 0;
    }
    else
    {
      if (v42 != 2)
        continue;
      if (qword_100387310 != -1)
        dispatch_once(&qword_100387310, &stru_10035F3F8);
      v43 = qword_100387318;
      if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "[M][SC] two-level feed is escalation candidate", buf, 2u);
      }
      v44 = 1;
      *(_BYTE *)(*((_QWORD *)this + 59) + 189) = 1;
    }
    sub_1000062DC(*((_QWORD *)this + 26), v44);
  }
  v4 = v72;
  if (*((_BYTE *)this + 504) && (CLKappaDeescalator::isDecidedForOption(*v5) & 1) == 0)
    CLKappaDeescalationDecision::update((_DWORD *)this + 7, 5);
  v46 = CLKappaDeescalator::isDecidedForOption(*v5);
  CLKappaDeescalator::raiseUnless(v46, (BOOL)"[M][SC] Reached boundary condition but made no decision", v47);
  v48 = 1;
LABEL_116:
  if (CLKappaDeescalator::isDecidedForOption(*v5))
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_10035F3F8);
    v52 = (id)qword_100387318;
    if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
    {
      v53 = sub_100034A1C((unsigned int *)this + 7);
      *(_DWORD *)buf = 67109120;
      v76 = v53;
      _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "[M][SC] deescalation decision decided %d", buf, 8u);
    }

    if (sub_100034A1C((unsigned int *)this + 7))
    {
      for (n = 0; n != 208; n += 16)
      {
        v55 = CLKappaDeescalator::evaluateFollowingEscalation(*(CLKappaDeescalator **)((char *)this + n + 240));
        CLKappaDeescalationDecision::update((_DWORD *)this + 7, v55);
      }
    }
    v56 = sub_100034A1C((unsigned int *)this + 7);
    v57 = (v56 & 1) == 0 && *(_BYTE *)(*((_QWORD *)this + 59) + 189) != 0;
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_10035F3F8);
    v58 = (id)qword_100387318;
    if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240448;
      v76 = v56;
      v77 = 1026;
      *(_DWORD *)v78 = v57;
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "[M][SC] de %{public}d suppress %{public}d", buf, 0xEu);
    }

  }
  else
  {
    LOBYTE(v56) = 0;
    LOBYTE(v57) = 0;
  }
  v59 = *((_QWORD *)this + 59);
  *(_QWORD *)(v59 + 80) = a2;
  *(_BYTE *)(v59 + 96) = v56;
  if (*((_BYTE *)this + 496))
    v60 = *((_QWORD *)this + 61);
  else
    v60 = 0;
  *(_QWORD *)(v59 + 88) = v60;
  *(_BYTE *)(v59 + 97) = v73;
  *(_BYTE *)(*((_QWORD *)this + 59) + 98) = CLKappaDeescalator::isDecidedForOption(*v5);
  v61 = CLKappaDeescalator::shouldDeescalateForOption(*((_DWORD *)this + 7));
  v62 = *((_QWORD *)this + 59);
  *(_BYTE *)(v62 + 99) = v61;
  *(_BYTE *)(v62 + 100) = v57;
  *(_DWORD *)(v62 + 104) = v21;
  *(_BYTE *)(v62 + 112) = *((_BYTE *)this + 505);
  *(_WORD *)(v62 + 113) = *((_WORD *)this + 253);
  *(_BYTE *)(v62 + 115) = v74;
  *(_BYTE *)(*((_QWORD *)this + 59) + 116) = CLKappaDeescalator::shouldDeescalateForOption(*(_DWORD *)(*((_QWORD *)this + 4) + 24));
  *(_BYTE *)(*((_QWORD *)this + 59) + 117) = CLKappaDeescalator::shouldDeescalateForOption(*(_DWORD *)(*((_QWORD *)this + 6) + 24));
  *(_BYTE *)(*((_QWORD *)this + 59) + 118) = CLKappaDeescalator::shouldDeescalateForOption(*(_DWORD *)(*((_QWORD *)this + 8) + 24));
  *(_BYTE *)(*((_QWORD *)this + 59) + 119) = CLKappaDeescalator::shouldDeescalateForOption(*(_DWORD *)(*((_QWORD *)this + 10) + 24));
  *(_BYTE *)(*((_QWORD *)this + 59) + 120) = CLKappaDeescalator::shouldDeescalateForOption(*(_DWORD *)(*((_QWORD *)this + 12) + 24));
  *(_BYTE *)(*((_QWORD *)this + 59) + 121) = CLKappaDeescalator::shouldDeescalateForOption(*(_DWORD *)(*((_QWORD *)this + 14) + 24));
  *(_BYTE *)(*((_QWORD *)this + 59) + 122) = CLKappaDeescalator::shouldDeescalateForOption(*(_DWORD *)(*((_QWORD *)this + 16) + 24));
  *(_BYTE *)(*((_QWORD *)this + 59) + 123) = CLKappaDeescalator::shouldDeescalateForOption(*(_DWORD *)(*((_QWORD *)this + 18) + 24));
  *(_BYTE *)(*((_QWORD *)this + 59) + 124) = CLKappaDeescalator::shouldDeescalateForOption(*(_DWORD *)(*((_QWORD *)this + 20) + 24));
  *(_BYTE *)(*((_QWORD *)this + 59) + 125) = CLKappaDeescalator::shouldDeescalateForOption(*(_DWORD *)(*((_QWORD *)this + 22) + 24));
  *(_BYTE *)(*((_QWORD *)this + 59) + 128) = CLKappaDeescalator::shouldDeescalateForOption(*(_DWORD *)(*((_QWORD *)this + 24) + 24));
  *(_BYTE *)(*((_QWORD *)this + 59) + 127) = CLKappaDeescalator::shouldDeescalateForOption(*(_DWORD *)(*((_QWORD *)this + 26) + 24));
  v63 = CLKappaDeescalator::shouldDeescalateForOption(*(_DWORD *)(*((_QWORD *)this + 28) + 24));
  v64 = *((_QWORD *)this + 59);
  *(_BYTE *)(v64 + 126) = v63;
  *(_BYTE *)(v64 + 188) = v48;
  *(_DWORD *)(v64 + 132) = *(_DWORD *)(*((_QWORD *)this + 4) + 28) != 0;
  *(_DWORD *)(v64 + 136) = *(_DWORD *)(*((_QWORD *)this + 6) + 28) != 0;
  *(_DWORD *)(v64 + 140) = *(_DWORD *)(*((_QWORD *)this + 8) + 28) != 0;
  *(_DWORD *)(v64 + 144) = *(_DWORD *)(*((_QWORD *)this + 10) + 28) != 0;
  *(_DWORD *)(v64 + 148) = *(_DWORD *)(*((_QWORD *)this + 12) + 28) != 0;
  *(_DWORD *)(v64 + 152) = *(_DWORD *)(*((_QWORD *)this + 14) + 28) != 0;
  *(_DWORD *)(v64 + 156) = *(_DWORD *)(*((_QWORD *)this + 16) + 28) != 0;
  *(_DWORD *)(v64 + 160) = *(_DWORD *)(*((_QWORD *)this + 18) + 28) != 0;
  *(_DWORD *)(v64 + 164) = *(_DWORD *)(*((_QWORD *)this + 20) + 28) != 0;
  *(_DWORD *)(v64 + 168) = *(_DWORD *)(*((_QWORD *)this + 22) + 28) != 0;
  *(_DWORD *)(v64 + 172) = *(_DWORD *)(*((_QWORD *)this + 28) + 28) != 0;
  v65 = *((_QWORD *)this + 26);
  v66 = *(_DWORD *)(v65 + 28);
  *(_DWORD *)(v64 + 184) = *(_DWORD *)(*((_QWORD *)this + 24) + 28) != 0;
  *(_QWORD *)(v64 + 176) = 0;
  if (v66)
  {
    v67 = sub_100006744(v65);
    if (v67 == 1)
    {
      *(_DWORD *)(*((_QWORD *)this + 59) + 176) = 1;
    }
    else if (v67 == 2)
    {
      *(_DWORD *)(*((_QWORD *)this + 59) + 180) = 1;
    }
  }
  v68 = 0;
  v69 = (char *)this + 240;
  do
  {
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)&v69[v68] + 40))(*(_QWORD *)&v69[v68], a2);
    v68 += 16;
  }
  while (v68 != 208);
  for (ii = 0; ii != 208; ii += 16)
    (*(void (**)(_QWORD))(**(_QWORD **)&v69[ii] + 32))(*(_QWORD *)&v69[ii]);
  v71 = (_DWORD *)*((_QWORD *)this + 59);
  if (v71[40])
    v71[48] |= 1u;
  if (v71[35])
    v71[48] |= 2u;
  if (v71[38])
    v71[48] |= 4u;
  if (v71[36])
    v71[48] |= 8u;
  if (v71[34])
    v71[48] |= 0x10u;
  if (v71[39])
    v71[48] |= 0x20u;
  if (v71[37])
    v71[48] |= 0x80u;
  if (v71[33])
    v71[48] |= 0x200u;
  if (v71[42])
    v71[48] |= 0x1000u;
  if (v71[44])
    v71[48] |= 0x400u;
  if (v71[45])
    v71[48] |= 0x800u;
  if (v71[46])
    v71[48] |= 0x2000u;
  if (v71[41])
    v71[48] |= 0x4000u;
  if (v71[43])
    v71[48] |= 0x8000u;

}

void sub_10025FC00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void `virtual thunk to'CLMartyInferencesAlgSevereCrash::epochFinalize(CLMartyInferencesAlgSevereCrash *this, uint64_t a2)
{
  CLMartyInferencesAlgSevereCrash::epochFinalize((CLMartyInferencesAlgSevereCrash *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)), a2);
}

void CLMartyInferencesAlgSevereCrash::feedTrigger(CLMartyInferencesAlgSevereCrash *this, TriggerSample *a2)
{
  CLKappaDeescalatorAOI::updateWithTrigger(*((CLKappaDeescalatorAOI **)this + 4), a2);
  CLKappaDeescalatorSkiLift::updateWithTrigger(*((CLKappaDeescalatorSkiLift **)this + 12), a2);
  sub_100006AA0(*((_QWORD *)this + 26), (float16x4_t *)a2);
  CLKappaDeescalatorWaterProxy::updateWithTrigger(*((CLKappaDeescalatorWaterProxy **)this + 20), a2);
}

void `virtual thunk to'CLMartyInferencesAlgSevereCrash::feedTrigger(CLMartyInferencesAlgSevereCrash *this, TriggerSample *a2)
{
  CLMartyInferencesAlgSevereCrash::feedTrigger((CLMartyInferencesAlgSevereCrash *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 88)), a2);
}

void CLMartyInferencesAlgSevereCrash::feedGPS(CLKappaDeescalatorAOI **this, const CSSPUGps_Struct *a2)
{
  NSObject *v4;
  double latitude;
  double longitude;
  int v7;
  double v8;
  __int16 v9;
  double v10;

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10035F3F8);
  v4 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    latitude = a2->latitude;
    longitude = a2->longitude;
    v7 = 134218240;
    v8 = latitude;
    v9 = 2048;
    v10 = longitude;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[M][SC] lat %f long %f", (uint8_t *)&v7, 0x16u);
  }
  CLKappaDeescalatorAOI::updateWithCurrentLocation(this[4], a2);
  CLKappaDeescalatorWaterProxy::updateWithCurrentLocation(this[20], a2);
}

void `virtual thunk to'CLMartyInferencesAlgSevereCrash::feedGPS(CLMartyInferencesAlgSevereCrash *this, const CSSPUGps_Struct *a2)
{
  CLMartyInferencesAlgSevereCrash::feedGPS((CLKappaDeescalatorAOI **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 96)), a2);
}

void CLMartyInferencesAlgSevereCrash::feedRoads(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10035F3F8);
  v4 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_QWORD *)(a2 + 8);
    v6 = 134217984;
    v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[M][SC] feedRoads distanceToNearestRoad:%f", (uint8_t *)&v6, 0xCu);
  }
  sub_100006DA4(*(_QWORD *)(a1 + 208), a2);
  CLKappaDeescalatorWaterProxy::updateWithRoadInfo(*(_QWORD *)(a1 + 160), a2);
}

void `virtual thunk to'CLMartyInferencesAlgSevereCrash::feedRoads(_QWORD *a1, uint64_t a2)
{
  CLMartyInferencesAlgSevereCrash::feedRoads((uint64_t)a1 + *(_QWORD *)(*a1 - 112), a2);
}

void CLMartyInferencesAlgSevereCrash::feedRemoteSample(CLSafetyDeescalatorJointDetection **this, const CSRemoteSample_Struct *a2)
{
  CLSafetyDeescalatorJointDetection::updateWithRemoteSample(this[24], a2);
}

void `virtual thunk to'CLMartyInferencesAlgSevereCrash::feedRemoteSample(CLMartyInferencesAlgSevereCrash *this, const CSRemoteSample_Struct *a2)
{
  CLSafetyDeescalatorJointDetection::updateWithRemoteSample(*(CLSafetyDeescalatorJointDetection **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 136) + 192), a2);
}

uint64_t CLMartyInferencesAlgSevereCrash::feedFeatures(uint64_t a1, uint64_t a2)
{
  CLKappaDeescalatorStaticGps::updateWithFeatures(*(_QWORD *)(a1 + 144), a2);
  return CLKappaDeescalatorMovingGps::updateWithFeatures(*(_QWORD *)(a1 + 64), a2);
}

uint64_t `virtual thunk to'CLMartyInferencesAlgSevereCrash::feedFeatures(_QWORD *a1, uint64_t a2)
{
  char *v3;

  v3 = (char *)a1 + *(_QWORD *)(*a1 - 48);
  CLKappaDeescalatorStaticGps::updateWithFeatures(*((_QWORD *)v3 + 18), a2);
  return CLKappaDeescalatorMovingGps::updateWithFeatures(*((_QWORD *)v3 + 8), a2);
}

unsigned __int16 *CLMartyInferencesAlgSevereCrash::feedFeatures(uint64_t a1, uint64_t a2)
{
  return CLKappaDeescalatorSteps::updateWithStepsFeatures(*(unsigned __int16 **)(a1 + 112), a2);
}

{
  return CLKappaDeescalatorMAP::updateWithIsMAP(*(_QWORD *)(a1 + 176), a2);
}

unsigned __int16 *`virtual thunk to'CLMartyInferencesAlgSevereCrash::feedFeatures(_QWORD *a1, uint64_t a2)
{
  return CLKappaDeescalatorSteps::updateWithStepsFeatures(*(unsigned __int16 **)((char *)a1 + *(_QWORD *)(*a1 - 96) + 112), a2);
}

{
  return CLKappaDeescalatorMAP::updateWithIsMAP(*(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 128) + 176), a2);
}

float CLMartyInferencesAlgSevereCrash::feedFeatures(uint64_t a1, uint64_t a2)
{
  CLKappaDeescalatorQuiescence::updateWithPulseFeatures(*(_QWORD *)(a1 + 80), a2);
  return CLSafetyDeescalatorProjectilePhone::updateWithPulseFeatures(*(_QWORD *)(a1 + 224), a2);
}

{
  CLKappaDeescalatorQuiescence::updateWithSpinFeatures(*(_QWORD *)(a1 + 80), a2);
  return CLSafetyDeescalatorProjectilePhone::updateWithSpinFeatures(*(_QWORD *)(a1 + 224), a2);
}

{
  return CLKappaDeescalatorTriggerClusters::updateWithTriggerClustersFeatures(*(_QWORD *)(a1 + 128), a2);
}

{
  CLKappaDeescalatorMAP::updateWithFreeFall(*(_QWORD *)(a1 + 176), a2);
  return CLSafetyDeescalatorProjectilePhone::updateWithFreeFallFeatures(*(_QWORD *)(a1 + 224), a2);
}

float `virtual thunk to'CLMartyInferencesAlgSevereCrash::feedFeatures(_QWORD *a1, uint64_t a2)
{
  char *v3;

  v3 = (char *)a1 + *(_QWORD *)(*a1 - 32);
  CLKappaDeescalatorQuiescence::updateWithPulseFeatures(*((_QWORD *)v3 + 10), a2);
  return CLSafetyDeescalatorProjectilePhone::updateWithPulseFeatures(*((_QWORD *)v3 + 28), a2);
}

{
  char *v3;

  v3 = (char *)a1 + *(_QWORD *)(*a1 - 88);
  CLKappaDeescalatorQuiescence::updateWithSpinFeatures(*((_QWORD *)v3 + 10), a2);
  return CLSafetyDeescalatorProjectilePhone::updateWithSpinFeatures(*((_QWORD *)v3 + 28), a2);
}

{
  return CLKappaDeescalatorTriggerClusters::updateWithTriggerClustersFeatures(*(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 120) + 128), a2);
}

{
  char *v3;

  v3 = (char *)a1 + *(_QWORD *)(*a1 - 104);
  CLKappaDeescalatorMAP::updateWithFreeFall(*((_QWORD *)v3 + 22), a2);
  return CLSafetyDeescalatorProjectilePhone::updateWithFreeFallFeatures(*((_QWORD *)v3 + 28), a2);
}

unsigned __int16 *CLMartyInferencesAlgSevereCrash::feedFeatures(uint64_t a1, _OWORD *a2)
{
  return CLKappaDeescalatorAutocorrelation::updateWithAutocorrelationFeatures(*(_QWORD *)(a1 + 48), a2);
}

unsigned __int16 *`virtual thunk to'CLMartyInferencesAlgSevereCrash::feedFeatures(_QWORD *a1, _OWORD *a2)
{
  return CLKappaDeescalatorAutocorrelation::updateWithAutocorrelationFeatures(*(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 72) + 48), a2);
}

void CLMartyInferencesAlgSevereCrash::feedFeatures(uint64_t a1, uint64_t a2)
{
  CLSafetyDeescalatorJointDetection::updateWithJointDetectionOutput(*(_QWORD *)(a1 + 192), a2);
}

void `virtual thunk to'CLMartyInferencesAlgSevereCrash::feedFeatures(_QWORD *a1, uint64_t a2)
{
  CLSafetyDeescalatorJointDetection::updateWithJointDetectionOutput(*(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 144) + 192), a2);
}

uint64_t CLMartyInferencesAlgSevereCrash::feedEstimates(uint64_t a1, char *a2)
{
  char v2;

  v2 = *a2;
  *(_BYTE *)(a1 + 505) = *a2;
  *(_BYTE *)(a1 + 508) = a2[1];
  *(_BYTE *)(a1 + 512) = a2[2];
  return CLSafetyDeescalatorProjectilePhone::updateWithCoupledCrash(*(_QWORD *)(a1 + 224), v2);
}

{
  char v2;

  v2 = *a2;
  *(_BYTE *)(a1 + 506) = *a2;
  *(_BYTE *)(a1 + 509) = a2[1];
  *(_BYTE *)(a1 + 511) = a2[2];
  return CLSafetyDeescalatorProjectilePhone::updateWithUncoupledCrash(*(_QWORD *)(a1 + 224), v2);
}

{
  char v3;

  v3 = *a2;
  *(_BYTE *)(a1 + 507) = *a2;
  *(_BYTE *)(a1 + 510) = a2[1];
  CLKappaDeescalatorAutocorrelation::updateWithHighSpeedCrash(*(_QWORD *)(a1 + 48), v3);
  return CLKappaDeescalatorSteps::updateWithHighSpeedCrash(*(_QWORD *)(a1 + 112), *(_BYTE *)(a1 + 507));
}

uint64_t `virtual thunk to'CLMartyInferencesAlgSevereCrash::feedEstimates(_QWORD *a1, char *a2)
{
  char *v2;
  char v3;

  v2 = (char *)a1 + *(_QWORD *)(*a1 - 64);
  v3 = *a2;
  v2[505] = *a2;
  v2[508] = a2[1];
  v2[512] = a2[2];
  return CLSafetyDeescalatorProjectilePhone::updateWithCoupledCrash(*((_QWORD *)v2 + 28), v3);
}

{
  char *v2;
  char v3;

  v2 = (char *)a1 + *(_QWORD *)(*a1 - 72);
  v3 = *a2;
  v2[506] = *a2;
  v2[509] = a2[1];
  v2[511] = a2[2];
  return CLSafetyDeescalatorProjectilePhone::updateWithUncoupledCrash(*((_QWORD *)v2 + 28), v3);
}

{
  return CLMartyInferencesAlgSevereCrash::feedEstimates((uint64_t)a1 + *(_QWORD *)(*a1 - 80), a2);
}

double CLMartyInferencesAlgSevereCrash::epochReset(CLMartyInferencesAlgSevereCrash *this)
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v1 = *((_QWORD *)this + 59);
  *(_QWORD *)(v1 + 80) = 0;
  *(_QWORD *)(v1 + 88) = 0;
  *(_QWORD *)(v1 + 93) = 0;
  *(_DWORD *)(v1 + 104) = 0;
  v2 = *((_QWORD *)this + 59);
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 120) = 0;
  *(_BYTE *)(v2 + 128) = 0;
  result = 0.0;
  *(_OWORD *)(v2 + 132) = 0u;
  *(_OWORD *)(v2 + 148) = 0u;
  *(_OWORD *)(v2 + 164) = 0u;
  *(_OWORD *)(v2 + 174) = 0u;
  return result;
}

double `virtual thunk to'CLMartyInferencesAlgSevereCrash::epochReset(CLMartyInferencesAlgSevereCrash *this)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  double result;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 56);
  v2 = *((_QWORD *)v1 + 59);
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 93) = 0;
  *(_DWORD *)(v2 + 104) = 0;
  v3 = *((_QWORD *)v1 + 59);
  *(_QWORD *)(v3 + 112) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_BYTE *)(v3 + 128) = 0;
  result = 0.0;
  *(_OWORD *)(v3 + 132) = 0u;
  *(_OWORD *)(v3 + 148) = 0u;
  *(_OWORD *)(v3 + 164) = 0u;
  *(_OWORD *)(v3 + 174) = 0u;
  return result;
}

void sub_1002602B0(CLKappaAlgBlock *a1)
{
}

void sub_1002602BC(CLKappaAlgBlock *a1)
{
  operator delete();
}

uint64_t sub_1002602E8(uint64_t a1, unint64_t a2)
{
  unint64_t *v3;
  uint64_t result;

  v3 = (unint64_t *)(a1 + 488);
  if (!*(_BYTE *)(a1 + 496))
    v3 = (unint64_t *)&unk_1002ED560;
  result = CLKappaAlgBlock::isActiveInferences((CLKappaAlgBlock *)a1, a2, *v3);
  if ((_DWORD)result)
  {
    if (*(_BYTE *)(a1 + 496))
      return CLKappaDeescalator::isDecidedForOption(*(_DWORD *)(a1 + 28)) ^ 1;
    else
      return 0;
  }
  return result;
}

void sub_100260344(_QWORD *a1)
{
}

void sub_10026035C(_QWORD *a1)
{
  operator delete();
}

void sub_100260394(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "Alg");
  v2 = (void *)qword_100387318;
  qword_100387318 = (uint64_t)v1;

}

void sub_1002603C4(CLKappaAlgBlock *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t i;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v4 - 152)) = a2[6];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 160)) = a2[7];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 168)) = a2[8];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 176)) = a2[9];
  sub_10000A718((uint64_t)a1 + 472);
  for (i = 432; i != 224; i -= 16)
    sub_10000A718((uint64_t)a1 + i);
  sub_10000A718((uint64_t)a1 + 224);
  sub_10000A718((uint64_t)a1 + 208);
  sub_10000A718((uint64_t)a1 + 192);
  sub_10000A718((uint64_t)a1 + 176);
  sub_10000A718((uint64_t)a1 + 160);
  sub_10000A718((uint64_t)a1 + 144);
  sub_10000A718((uint64_t)a1 + 128);
  sub_10000A718((uint64_t)a1 + 112);
  sub_10000A718((uint64_t)a1 + 96);
  sub_10000A718((uint64_t)a1 + 80);
  sub_10000A718((uint64_t)a1 + 64);
  sub_10000A718((uint64_t)a1 + 48);
  sub_10000A718((uint64_t)a1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(a1, a2 + 1);
}

void sub_1002604C0(_QWORD *a1@<X8>)
{
  char *v2;

  v2 = (char *)operator new(0xE0uLL);
  sub_100260508((uint64_t)v2);
  *a1 = v2 + 24;
  a1[1] = v2;
}

void sub_1002604F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double sub_100260508(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = off_10035F428;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 24) = &off_10034D498;
  *(_QWORD *)(a1 + 40) = 0x4234000041700000;
  *(_DWORD *)(a1 + 48) = 5;
  *(_OWORD *)(a1 + 52) = xmmword_1002E5DF0;
  *(_QWORD *)(a1 + 68) = 0x700000002;
  *(_DWORD *)(a1 + 76) = 1092616192;
  *(_WORD *)(a1 + 80) = 1305;
  *(_DWORD *)(a1 + 84) = 1103626240;
  *(_QWORD *)(a1 + 88) = 0x80000001ELL;
  *(_DWORD *)(a1 + 100) = 1092616192;
  *(_QWORD *)(a1 + 117) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_BYTE *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 156) = 0u;
  *(_OWORD *)(a1 + 172) = 0u;
  *(_OWORD *)(a1 + 188) = 0u;
  *(_OWORD *)(a1 + 198) = 0u;
  return result;
}

void sub_1002605C0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10035F428;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002605D4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10035F428;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100260608(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_100260618@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x78uLL);
  result = sub_100260660(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10026064C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100260660(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_10035F478;
  a1[1] = 0;
  CLKappaDeescalatorAOI::CLKappaDeescalatorAOI((CLKappaDeescalatorAOI *)(a1 + 3));
  return a1;
}

void sub_100260698(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1002606AC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10035F478;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002606C0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10035F478;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1002606F4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_100260704@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0xFA0uLL);
  result = sub_10026074C(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100260738(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10026074C(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_10035F4C8;
  a1[1] = 0;
  CLKappaDeescalatorAutocorrelation::CLKappaDeescalatorAutocorrelation((CLKappaDeescalatorAutocorrelation *)(a1 + 3));
  return a1;
}

void sub_100260784(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100260798(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10035F4C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002607AC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10035F4C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1002607E0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_1002607F0@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x78uLL);
  result = sub_100260838(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100260824(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100260838(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_10035F518;
  a1[1] = 0;
  CLKappaDeescalatorMovingGps::CLKappaDeescalatorMovingGps((CLKappaDeescalatorMovingGps *)(a1 + 3));
  return a1;
}

void sub_100260870(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100260884(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10035F518;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100260898(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10035F518;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1002608CC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_1002608DC@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0xD8uLL);
  result = sub_100260924(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100260910(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100260924(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_10035F568;
  a1[1] = 0;
  CLKappaDeescalatorQuiescence::CLKappaDeescalatorQuiescence((CLKappaDeescalatorQuiescence *)(a1 + 3));
  return a1;
}

void sub_10026095C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100260970(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10035F568;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100260984(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10035F568;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1002609B8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_1002609C8@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x68uLL);
  result = sub_100260A10(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1002609FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100260A10(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_10035F5B8;
  a1[1] = 0;
  CLKappaDeescalatorSkiLift::CLKappaDeescalatorSkiLift((CLKappaDeescalatorSkiLift *)(a1 + 3));
  return a1;
}

void sub_100260A48(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100260A5C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10035F5B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100260A70(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10035F5B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100260AA4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_100260AB4@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x88uLL);
  result = sub_100260AFC(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100260AE8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100260AFC(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_10035F608;
  a1[1] = 0;
  CLKappaDeescalatorStaticGps::CLKappaDeescalatorStaticGps((CLKappaDeescalatorStaticGps *)(a1 + 3));
  return a1;
}

void sub_100260B34(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100260B48(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10035F608;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100260B5C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10035F608;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100260B90(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_100260BA0@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0xC68uLL);
  result = sub_100260BE8(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100260BD4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100260BE8(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_10035F658;
  a1[1] = 0;
  CLKappaDeescalatorSteps::CLKappaDeescalatorSteps((CLKappaDeescalatorSteps *)(a1 + 3));
  return a1;
}

void sub_100260C20(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100260C34(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10035F658;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100260C48(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10035F658;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100260C7C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_100260C8C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x78uLL);
  result = sub_100260CD4(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100260CC0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100260CD4(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_10035F6A8;
  a1[1] = 0;
  CLKappaDeescalatorTriggerClusters::CLKappaDeescalatorTriggerClusters((CLKappaDeescalatorTriggerClusters *)(a1 + 3));
  return a1;
}

void sub_100260D0C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100260D20(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10035F6A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100260D34(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10035F6A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100260D68(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_100260D78@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x80uLL);
  result = sub_100260DC0(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100260DAC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100260DC0(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_10035F6F8;
  a1[1] = 0;
  CLKappaDeescalatorWaterProxy::CLKappaDeescalatorWaterProxy((CLKappaDeescalatorWaterProxy *)(a1 + 3));
  return a1;
}

void sub_100260DF8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100260E0C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10035F6F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100260E20(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10035F6F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100260E54(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_100260E64@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x108uLL);
  result = sub_100260EAC(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100260E98(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100260EAC(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_10035F748;
  a1[1] = 0;
  CLKappaDeescalatorMAP::CLKappaDeescalatorMAP((CLKappaDeescalatorMAP *)(a1 + 3));
  return a1;
}

void sub_100260EE4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100260EF8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10035F748;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100260F0C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10035F748;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100260F40(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_100260F50@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0xC8uLL);
  result = sub_100260F98(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100260F84(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100260F98(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_10035F798;
  a1[1] = 0;
  CLSafetyDeescalatorJointDetection::CLSafetyDeescalatorJointDetection((CLSafetyDeescalatorJointDetection *)(a1 + 3));
  return a1;
}

void sub_100260FD0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100260FE4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10035F798;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100260FF8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10035F798;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10026102C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_10026103C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x180uLL);
  result = sub_100261084(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100261070(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100261084(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_10035F7E8;
  a1[1] = 0;
  CLSafetyDeescalatorProjectilePhone::CLSafetyDeescalatorProjectilePhone((CLSafetyDeescalatorProjectilePhone *)(a1 + 3));
  return a1;
}

void sub_1002610BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1002610D0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10035F7E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002610E4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10035F7E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100261118(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_100261128@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0xB8uLL);
  result = sub_100261170(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10026115C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100261170(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_10035F838;
  a1[1] = 0;
  sub_1000062D0(a1 + 3);
  return a1;
}

void sub_1002611A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1002611BC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10035F838;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002611D0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10035F838;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100261204(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t CLSafetyFeaturesAlgJointDetectionResult::reset(uint64_t this)
{
  *(_BYTE *)(this + 8) = 0;
  *(_DWORD *)(this + 12) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

void CLSafetyFeaturesAlgJointDetectionResult::log(CLSafetyFeaturesAlgJointDetectionResult *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100360430);
  v2 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_QWORD *)this + 3);
    v4 = *((_QWORD *)this + 4);
    v5 = 134349312;
    v6 = v3;
    v7 = 2050;
    v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[JD] AlgBlock summary,A,%{public}llu,B,%{public}llu\n", (uint8_t *)&v5, 0x16u);
  }
}

void CLSafetyFeaturesAlgJointDetection::CLSafetyFeaturesAlgJointDetection(CLSafetyFeaturesAlgJointDetection *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  __int128 v22;

  CLKappaAlgBlock::CLKappaAlgBlock(this, a2 + 1);
  v4 = *a2;
  *(_QWORD *)v5 = *a2;
  *(_QWORD *)(v5 + *(_QWORD *)(v4 - 152)) = a2[6];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 160)) = a2[7];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 168)) = a2[8];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 176)) = a2[9];
  *(_OWORD *)(v5 + 32) = 0u;
  v6 = v5 + 32;
  *(_BYTE *)(v5 + 72) = 0;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_BYTE *)(v5 + 64) = 0;
  v7 = operator new(0x48uLL);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = off_100360460;
  v7[4] = 0;
  v7[5] = 0;
  v7[3] = &off_10034D138;
  v7[7] = 0;
  v7[8] = 0;
  v7[6] = 0;
  *(_QWORD *)&v22 = v7 + 3;
  *((_QWORD *)&v22 + 1) = v7;
  sub_1000081AC((uint64_t)this + 8, &v22);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v20 = *((_QWORD *)this + 1);
  v21 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  sub_10003BA48((uint64_t)&v20, &v22);
  sub_1000081AC(v6, &v22);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v21;
  if (v21)
  {
    v18 = (unint64_t *)&v21->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  (*(void (**)(CLSafetyFeaturesAlgJointDetection *))(*(_QWORD *)this + 304))(this);
}

void sub_1002614DC(_Unwind_Exception *a1)
{
  CLKappaAlgBlock *v1;
  uint64_t *v2;
  uint64_t v3;

  sub_10000A718((uint64_t)v1 + 48);
  sub_10000A718(v3);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, v2);
  _Unwind_Resume(a1);
}

void CLSafetyFeaturesAlgJointDetection::CLSafetyFeaturesAlgJointDetection(CLSafetyFeaturesAlgJointDetection *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;

  *(_QWORD *)this = off_100345D50;
  *((_QWORD *)this + 10) = off_100345DF8;
  *((_QWORD *)this + 11) = off_100345EC0;
  *((_QWORD *)this + 12) = off_100345F68;
  CLKappaAlgBlock::CLKappaAlgBlock(this, (uint64_t *)off_10035FE28);
  *(_QWORD *)v2 = off_10035F928;
  *(_QWORD *)(v2 + 80) = off_10035FBC8;
  *(_QWORD *)(v2 + 88) = off_10035FD00;
  *(_QWORD *)(v2 + 96) = off_10035FDD8;
  *(_OWORD *)(v2 + 32) = 0u;
  v3 = v2 + 32;
  *(_BYTE *)(v2 + 72) = 0;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_BYTE *)(v2 + 64) = 0;
  v4 = operator new(0x48uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = off_100360460;
  v4[4] = 0;
  v4[5] = 0;
  v4[3] = &off_10034D138;
  v4[7] = 0;
  v4[8] = 0;
  v4[6] = 0;
  *(_QWORD *)&v19 = v4 + 3;
  *((_QWORD *)&v19 + 1) = v4;
  sub_1000081AC((uint64_t)this + 8, &v19);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v17 = *((_QWORD *)this + 1);
  v18 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_10003BA48((uint64_t)&v17, &v19);
  sub_1000081AC(v3, &v19);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v18;
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  (*(void (**)(CLSafetyFeaturesAlgJointDetection *))(*(_QWORD *)this + 304))(this);
}

void sub_1002616F4(_Unwind_Exception *a1)
{
  CLKappaAlgBlock *v1;
  uint64_t v2;

  sub_10000A718((uint64_t)v1 + 48);
  sub_10000A718(v2);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10035FE28);
  _Unwind_Resume(a1);
}

void CLSafetyFeaturesAlgJointDetection::reset(CLSafetyFeaturesAlgJointDetection *this)
{
  NSObject *v1;
  uint8_t v2[16];

  (*(void (**)(_QWORD))(**((_QWORD **)this + 4) + 24))(*((_QWORD *)this + 4));
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100360430);
  v1 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "[JD] reset", v2, 2u);
  }
}

void CLSafetyFeaturesAlgJointDetection::feedTrigger(CLSafetyFeaturesAlgJointDetection *this, const TriggerSample *a2)
{
  int v3;
  NSObject *v4;
  int v5;
  _DWORD v6[2];

  v3 = *((unsigned __int8 *)this + 24);
  if (v3 == 2)
  {
    if ((a2[1].rmsSN & 0x10000) == 0)
      return;
    goto LABEL_6;
  }
  if (v3 == 1)
  {
    if ((a2->path & 3) == 0)
      return;
LABEL_6:
    *((_QWORD *)this + 8) = a2->timestamp;
    *((_BYTE *)this + 72) = 1;
    return;
  }
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100360430);
  v4 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_FAULT))
  {
    v5 = *((unsigned __int8 *)this + 24);
    v6[0] = 67109120;
    v6[1] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "[JD] unsupported feature mode %u", (uint8_t *)v6, 8u);
  }
}

void `virtual thunk to'CLSafetyFeaturesAlgJointDetection::feedTrigger(CLSafetyFeaturesAlgJointDetection *this, const TriggerSample *a2)
{
  CLSafetyFeaturesAlgJointDetection::feedTrigger((CLSafetyFeaturesAlgJointDetection *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 88)), a2);
}

uint64_t CLSafetyFeaturesAlgJointDetection::epochFinalize(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(this + 32);
  *(_QWORD *)(v2 + 24) = a2;
  if (*(_BYTE *)(this + 72))
    v3 = *(_QWORD *)(this + 64);
  else
    v3 = 0;
  *(_QWORD *)(v2 + 32) = v3;
  return this;
}

_QWORD *`virtual thunk to'CLSafetyFeaturesAlgJointDetection::epochFinalize(_QWORD *this, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (char *)this + *(_QWORD *)(*this - 48);
  v3 = *((_QWORD *)v2 + 4);
  *(_QWORD *)(v3 + 24) = a2;
  if (v2[72])
    v4 = *((_QWORD *)v2 + 8);
  else
    v4 = 0;
  *(_QWORD *)(v3 + 32) = v4;
  return this;
}

uint64_t CLSafetyFeaturesAlgJointDetection::epochReset(CLSafetyFeaturesAlgJointDetection *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 24))(*((_QWORD *)this + 4));
}

uint64_t `virtual thunk to'CLSafetyFeaturesAlgJointDetection::epochReset(CLSafetyFeaturesAlgJointDetection *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 56) + 32);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
}

void sub_10026195C(CLKappaAlgBlock *a1)
{
  *(_QWORD *)a1 = off_10035F928;
  *((_QWORD *)a1 + 10) = off_10035FBC8;
  *((_QWORD *)a1 + 11) = off_10035FD00;
  *((_QWORD *)a1 + 12) = off_10035FDD8;
  sub_10000A718((uint64_t)a1 + 48);
  sub_10000A718((uint64_t)a1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(a1, (uint64_t *)off_10035FE28);
}

void sub_1002619B4(CLKappaAlgBlock *a1)
{
  *(_QWORD *)a1 = off_10035F928;
  *((_QWORD *)a1 + 10) = off_10035FBC8;
  *((_QWORD *)a1 + 11) = off_10035FD00;
  *((_QWORD *)a1 + 12) = off_10035FDD8;
  sub_10000A718((uint64_t)a1 + 48);
  sub_10000A718((uint64_t)a1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(a1, (uint64_t *)off_10035FE28);
  operator delete();
}

_QWORD *sub_100261A24(uint64_t a1, uint64_t *a2)
{
  return sub_10000A6A0((_QWORD *)(a1 + 48), a2);
}

void sub_100261A2C(_QWORD *a1)
{
  CLKappaAlgBlock *v1;

  v1 = (CLKappaAlgBlock *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  *(_QWORD *)v1 = off_10035F928;
  *((_QWORD *)v1 + 10) = off_10035FBC8;
  *((_QWORD *)v1 + 11) = off_10035FD00;
  *((_QWORD *)v1 + 12) = off_10035FDD8;
  sub_10000A718((uint64_t)v1 + 48);
  sub_10000A718((uint64_t)v1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10035FE28);
}

void sub_100261A8C(_QWORD *a1)
{
  CLKappaAlgBlock *v1;

  v1 = (CLKappaAlgBlock *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  *(_QWORD *)v1 = off_10035F928;
  *((_QWORD *)v1 + 10) = off_10035FBC8;
  *((_QWORD *)v1 + 11) = off_10035FD00;
  *((_QWORD *)v1 + 12) = off_10035FDD8;
  sub_10000A718((uint64_t)v1 + 48);
  sub_10000A718((uint64_t)v1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10035FE28);
  operator delete();
}

_QWORD *sub_100261B00(_QWORD *a1, uint64_t *a2)
{
  return sub_10000A6A0((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32) + 48), a2);
}

void sub_100261B14(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "Alg");
  v2 = (void *)qword_100387318;
  qword_100387318 = (uint64_t)v1;

}

void sub_100261B44(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100360460;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100261B58(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100360460;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100261B8C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double CLKappaFeaturesAlgGravityAutoCorrelationResult::log(CLKappaFeaturesAlgGravityAutoCorrelationResult *this)
{
  NSObject *v2;
  double result;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  double v10;
  int v11;
  int v12;
  double v13;
  int v14;
  double v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  int v27;
  __int16 v28;
  double v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  double v35;
  __int16 v36;
  int v37;
  __int16 v38;
  double v39;

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100361058);
  v2 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *((_QWORD *)this + 4);
    v5 = *((unsigned __int8 *)this + 40);
    v6 = *((unsigned __int8 *)this + 41);
    v7 = *((_QWORD *)this + 6);
    v8 = *((_QWORD *)this + 7);
    v9 = *((_DWORD *)this + 16);
    v10 = *((float *)this + 17);
    v11 = *((_DWORD *)this + 18);
    v12 = *((_DWORD *)this + 4);
    v13 = *((float *)this + 5);
    v14 = *((_DWORD *)this + 6);
    v15 = *((float *)this + 7);
    v16 = 134351872;
    v17 = v4;
    v18 = 1026;
    v19 = v5;
    v20 = 1026;
    v21 = v6;
    v22 = 2050;
    v23 = v7;
    v24 = 2050;
    v25 = v8;
    v26 = 1026;
    v27 = v9;
    v28 = 2050;
    v29 = v10;
    v30 = 1026;
    v31 = v11;
    v32 = 1026;
    v33 = v12;
    v34 = 2050;
    v35 = v13;
    v36 = 1026;
    v37 = v14;
    v38 = 2050;
    v39 = v15;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[GravityAC] summary,,A,%{public}llu,B,%{public}d,C,%{public}d,,debug-1,%{public}llu,debug-2,%{public}llu,debug-3,%{public}d,debug-4,%{public}f,debug-5,%{public}d,config-1,%{public}d,config-2,%{public}f,config-3,%{public}d,config-4,%{public}f", (uint8_t *)&v16, 0x62u);
  }
  return result;
}

void CLKappaFeaturesAlgGravityAutoCorrelation::CLKappaFeaturesAlgGravityAutoCorrelation(CLKappaFeaturesAlgGravityAutoCorrelation *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  __int128 v22;

  CLKappaAlgBlock::CLKappaAlgBlock(this, a2 + 1);
  v4 = *a2;
  *(_QWORD *)v5 = *a2;
  *(_QWORD *)(v5 + *(_QWORD *)(v4 - 152)) = a2[6];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 160)) = a2[7];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 168)) = a2[8];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 176)) = a2[9];
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  v6 = v5 + 32;
  v7 = operator new(0x68uLL);
  v7[2] = 0;
  *v7 = off_100361088;
  v7[1] = 0;
  *((_OWORD *)v7 + 2) = 0u;
  *((_OWORD *)v7 + 3) = 0u;
  *((_OWORD *)v7 + 4) = 0u;
  *((_OWORD *)v7 + 5) = 0u;
  v7[3] = &off_10034CD18;
  v7[12] = 0;
  v7[5] = 0x3D4CCCCD00000064;
  v7[6] = 0x3E99999A00000006;
  v7[9] = 0;
  v7[10] = 0;
  *((_DWORD *)v7 + 22) = 0x7FFFFFFF;
  *(_QWORD *)&v22 = v7 + 3;
  *((_QWORD *)&v22 + 1) = v7;
  sub_1000081AC((uint64_t)this + 8, &v22);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v20 = *((_QWORD *)this + 1);
  v21 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  sub_100261F28((uint64_t)&v20, &v22);
  sub_1000081AC(v6, &v22);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v21;
  if (v21)
  {
    v18 = (unint64_t *)&v21->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  (*(void (**)(CLKappaFeaturesAlgGravityAutoCorrelation *))(*(_QWORD *)this + 304))(this);
}

void sub_100261EFC(_Unwind_Exception *a1)
{
  CLKappaAlgBlock *v1;
  uint64_t *v2;
  uint64_t v3;

  sub_10000A718((uint64_t)v1 + 48);
  sub_10000A718(v3);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, v2);
  _Unwind_Resume(a1);
}

void *sub_100261F28@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = *(void **)a1;
  if (result
  {
    v5 = *(_QWORD *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void CLKappaFeaturesAlgGravityAutoCorrelation::CLKappaFeaturesAlgGravityAutoCorrelation(CLKappaFeaturesAlgGravityAutoCorrelation *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;

  *(_QWORD *)this = off_100345D50;
  *((_QWORD *)this + 8) = off_100345DF8;
  *((_QWORD *)this + 9) = off_100345EC0;
  *((_QWORD *)this + 10) = off_100345F68;
  CLKappaAlgBlock::CLKappaAlgBlock(this, (uint64_t *)off_100360A50);
  *(_QWORD *)v2 = off_100360550;
  *(_QWORD *)(v2 + 64) = off_1003607F0;
  *(_QWORD *)(v2 + 72) = off_100360928;
  *(_QWORD *)(v2 + 80) = off_100360A00;
  *(_OWORD *)(v2 + 32) = 0u;
  v3 = v2 + 32;
  *(_OWORD *)(v2 + 48) = 0u;
  v4 = operator new(0x68uLL);
  v4[2] = 0;
  *v4 = off_100361088;
  v4[1] = 0;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  v4[3] = &off_10034CD18;
  v4[12] = 0;
  v4[5] = 0x3D4CCCCD00000064;
  v4[6] = 0x3E99999A00000006;
  v4[9] = 0;
  v4[10] = 0;
  *((_DWORD *)v4 + 22) = 0x7FFFFFFF;
  *(_QWORD *)&v19 = v4 + 3;
  *((_QWORD *)&v19 + 1) = v4;
  sub_1000081AC((uint64_t)this + 8, &v19);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v17 = *((_QWORD *)this + 1);
  v18 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_100261F28((uint64_t)&v17, &v19);
  sub_1000081AC(v3, &v19);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v18;
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  (*(void (**)(CLKappaFeaturesAlgGravityAutoCorrelation *))(*(_QWORD *)this + 304))(this);
}

void sub_1002621A8(_Unwind_Exception *a1)
{
  CLKappaAlgBlock *v1;
  uint64_t v2;

  sub_10000A718((uint64_t)v1 + 48);
  sub_10000A718(v2);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_100360A50);
  _Unwind_Resume(a1);
}

void CLKappaFeaturesAlgGravityAutoCorrelation::resetConfiguration(CLKappaFeaturesAlgGravityAutoCorrelation *this)
{
  void *v2;
  double v3;
  double v4;
  double v5;
  float v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  int v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  float v16;
  void *v17;
  double v18;
  double v19;
  double v20;
  int v21;
  id v22;
  __int128 v23;

  v22 = (id)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration configBaseKey:forFeatureMode:](CSPersistentConfiguration, "configBaseKey:forFeatureMode:", "FeaturesAlgGravityAutoCorrelationConfig", *((unsigned __int8 *)this + 24)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v3) = 1125515264;
  LODWORD(v4) = 1120403456;
  LODWORD(v5) = 20.0;
  objc_msgSend(v2, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 0, v22, v5, v3, v4);
  LODWORD(v23) = (int)v6;

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v8) = 1017370378;
  LODWORD(v9) = 1028443341;
  LODWORD(v10) = 0.5;
  objc_msgSend(v7, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 1, v22, v8, v10, v9);
  DWORD1(v23) = v11;

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v13) = 1.0;
  LODWORD(v14) = 20.0;
  LODWORD(v15) = 6.0;
  objc_msgSend(v12, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 2, v22, v13, v14, v15);
  DWORD2(v23) = (int)v16;

  v17 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v18) = 1036831949;
  LODWORD(v19) = 1050253722;
  LODWORD(v20) = 1.0;
  objc_msgSend(v17, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 3, v22, v18, v20, v19);
  HIDWORD(v23) = v21;

  CLKappaFeaturesAlgGravityAutoCorrelation::setConfig((uint64_t)this, &v23);
}

void sub_100262320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

double CLKappaFeaturesAlgGravityAutoCorrelation::setConfig(uint64_t a1, _OWORD *a2)
{
  NSObject *v3;
  double result;
  uint64_t v5;
  int v6;
  double v7;
  int v8;
  double v9;
  _DWORD v10[2];
  __int16 v11;
  double v12;
  __int16 v13;
  int v14;
  __int16 v15;
  double v16;

  *(_OWORD *)(*(_QWORD *)(a1 + 32) + 16) = *a2;
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100361058);
  v3 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(_DWORD *)(v5 + 16);
    v7 = *(float *)(v5 + 20);
    v8 = *(_DWORD *)(v5 + 24);
    v9 = *(float *)(v5 + 28);
    v10[0] = 67109888;
    v10[1] = v6;
    v11 = 2048;
    v12 = v7;
    v13 = 1024;
    v14 = v8;
    v15 = 2048;
    v16 = v9;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[GravityAC] config, %d, %f, %d, %f", (uint8_t *)v10, 0x22u);
  }
  return result;
}

uint64_t CLKappaFeaturesAlgGravityAutoCorrelation::reset(CLKappaFeaturesAlgGravityAutoCorrelation *this)
{
  uint64_t result;
  uint64_t v3;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 24))(*((_QWORD *)this + 4));
  v3 = *((_QWORD *)this + 4);
  *(_QWORD *)(v3 + 32) = 0;
  *(_WORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0x7FFFFFFFLL;
  *(_DWORD *)(v3 + 72) = 0;
  return result;
}

void CLKappaFeaturesAlgGravityAutoCorrelation::epochFinalize(CLKappaFeaturesAlgGravityAutoCorrelation *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  int v7;
  void *v8;
  uint64_t i;
  void *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  float32x4_t v14;
  float v15;
  int v16;
  int v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int16 v36;
  unsigned __int16 v37;
  int v38;
  unsigned __int16 v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  __int16 v43;
  unsigned __int16 v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  __int16 v48;
  unsigned __int16 v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  __int16 v53;
  unsigned __int16 v54;
  uint64_t v56;
  unint64_t v57;
  int v58;
  unint64_t v59;
  int v60;
  unint64_t v61;
  unsigned __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  unint64_t v70;
  uint64_t v71;
  int v72;
  unint64_t v73;
  uint64_t v74;
  __int16 v75;
  unint64_t v76;
  float32x4_t v77;
  int v78;
  int v79;
  int v80;
  char v81;
  int v82;
  float v83;
  float v84;
  uint64_t v85;
  float v86;
  float v87;
  float v88;
  int v89;
  int v90;
  int v91;
  float v92;
  int v93;
  uint64_t v94;
  BOOL v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  void *v100;
  _BYTE v101[8344];
  float32x4_t v102[777];
  float v103[1024];
  float v104[1024];
  float v105[1024];
  unsigned __int16 v106[2];
  int v107;
  _DWORD v108[1024];
  _QWORD v109[513];
  _QWORD v110[513];
  float v111[1024];
  float v112[1024];
  float v113[1024];
  _QWORD v114[513];
  _QWORD v115[513];
  _QWORD v116[513];

  v1 = __chkstk_darwin(this);
  v3 = v2;
  v4 = v1;
  v5 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v5 + 32) = 0;
  *(_WORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 64) = 0x7FFFFFFFLL;
  *(_DWORD *)(v5 + 72) = 0;
  v6 = *(id *)(*(_QWORD *)(v1 + 48) + 72);
  v7 = objc_msgSend(v6, "count");
  *(_DWORD *)(*(_QWORD *)(v4 + 32) + 72) = v7;
  if (v7 < 0x2EE)
    goto LABEL_122;
  v100 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectAtIndex:", 0));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectAtIndex:", v7 - 1));
  *(_QWORD *)(*(_QWORD *)(v4 + 32) + 48) = objc_msgSend(v100, "timestamp");
  *(_QWORD *)(*(_QWORD *)(v4 + 32) + 56) = objc_msgSend(v8, "timestamp");
  v116[0] = 0x40000000000;
  v115[0] = 0x40000000000;
  v114[0] = 0x40000000000;
  if (v7 < 1)
    goto LABEL_30;
  v97 = v4;
  v98 = v3;
  v99 = v8;
  for (i = 0; i != v7; ++i)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectAtIndex:", i, v97, v98, v99));
    v11 = *(_DWORD *)objc_msgSend(v10, "c_struct");
    v12 = *((_DWORD *)objc_msgSend(v10, "c_struct") + 1);
    v13 = *((_DWORD *)objc_msgSend(v10, "c_struct") + 2);
    v14.i32[0] = *((_DWORD *)objc_msgSend(v10, "c_struct") + 3);
    v102[0].i64[0] = __PAIR64__(v12, v11);
    v102[0].i64[1] = __PAIR64__(v14.u32[0], v13);
    CMOQuaternion::normalize(v102, v14);
    v15 = CMOQuaternion::gravity((CMOQuaternion *)v102);
    v18 = WORD1(v116[0]);
    v19 = HIDWORD(v116[0]);
    v20 = LOWORD(v116[0]);
    if (LOWORD(v116[0]) + (unint64_t)WORD1(v116[0]) >= HIDWORD(v116[0]))
      v21 = HIDWORD(v116[0]);
    else
      v21 = 0;
    *((float *)&v116[1] + LOWORD(v116[0]) + (unint64_t)WORD1(v116[0]) - v21) = v15;
    if (v19 <= v18)
    {
      if (v20 + 1 < v19)
        LOWORD(v19) = 0;
      LOWORD(v116[0]) = v20 + 1 - v19;
    }
    else
    {
      WORD1(v116[0]) = v18 + 1;
    }
    v22 = WORD1(v115[0]);
    v23 = HIDWORD(v115[0]);
    v24 = LOWORD(v115[0]);
    if (LOWORD(v115[0]) + (unint64_t)WORD1(v115[0]) >= HIDWORD(v115[0]))
      v25 = HIDWORD(v115[0]);
    else
      v25 = 0;
    *((_DWORD *)&v115[1] + LOWORD(v115[0]) + (unint64_t)WORD1(v115[0]) - v25) = v16;
    if (v23 <= v22)
    {
      if (v24 + 1 < v23)
        LOWORD(v23) = 0;
      LOWORD(v115[0]) = v24 + 1 - v23;
    }
    else
    {
      WORD1(v115[0]) = v22 + 1;
    }
    v26 = WORD1(v114[0]);
    v27 = HIDWORD(v114[0]);
    v28 = LOWORD(v114[0]);
    if (LOWORD(v114[0]) + (unint64_t)WORD1(v114[0]) >= HIDWORD(v114[0]))
      v29 = HIDWORD(v114[0]);
    else
      v29 = 0;
    *((_DWORD *)&v114[1] + LOWORD(v114[0]) + (unint64_t)WORD1(v114[0]) - v29) = v17;
    if (v27 <= v26)
    {
      if (v28 + 1 < v27)
        LOWORD(v27) = 0;
      LOWORD(v114[0]) = v28 + 1 - v27;
    }
    else
    {
      WORD1(v114[0]) = v26 + 1;
    }

  }
  v3 = v98;
  v8 = v99;
  v4 = v97;
  if (v7 <= 1023)
  {
LABEL_30:
    v30 = LOWORD(v114[0]);
    v31 = LOWORD(v115[0]);
    v32 = LOWORD(v116[0]);
    v33 = HIDWORD(v116[0]);
    v34 = HIDWORD(v115[0]);
    v35 = HIDWORD(v114[0]);
    v36 = WORD1(v116[0]);
    v37 = WORD1(v115[0]);
    v38 = v7 - 1024;
    v39 = WORD1(v114[0]);
    do
    {
      v40 = v32 + v36;
      if (v40 >= v33)
        v41 = v33;
      else
        v41 = 0;
      *((_DWORD *)&v116[1] + v40 - v41) = 0;
      if (v33 <= v36)
      {
        v42 = v32 + 1;
        if (v42 >= v33)
          v43 = v33;
        else
          v43 = 0;
        v44 = v42 - v43;
        v32 = v44;
        LOWORD(v116[0]) = v44;
      }
      else
      {
        WORD1(v116[0]) = ++v36;
      }
      v45 = v31 + v37;
      if (v45 >= v34)
        v46 = v34;
      else
        v46 = 0;
      *((_DWORD *)&v115[1] + v45 - v46) = 0;
      if (v34 <= v37)
      {
        v47 = v31 + 1;
        if (v47 >= v34)
          v48 = v34;
        else
          v48 = 0;
        v49 = v47 - v48;
        v31 = v49;
        LOWORD(v115[0]) = v49;
      }
      else
      {
        WORD1(v115[0]) = ++v37;
      }
      v50 = v30 + v39;
      if (v50 >= v35)
        v51 = v35;
      else
        v51 = 0;
      *((_DWORD *)&v114[1] + v50 - v51) = 0;
      if (v35 <= v39)
      {
        v52 = v30 + 1;
        if (v52 >= v35)
          v53 = v35;
        else
          v53 = 0;
        v54 = v52 - v53;
        v30 = v54;
        LOWORD(v114[0]) = v54;
      }
      else
      {
        WORD1(v114[0]) = ++v39;
      }
    }
    while (!__CFADD__(v38++, 1));
  }
  CMFourierTransformSafety::CMFourierTransformSafety((CMFourierTransformSafety *)v102);
  CMFourierTransformSafety::forward_wide((uint64_t)v102, v113, (unsigned __int16 *)v116);
  CMFourierTransformSafety::forward_wide((uint64_t)v102, v112, (unsigned __int16 *)v115);
  CMFourierTransformSafety::forward_wide((uint64_t)v102, v111, (unsigned __int16 *)v114);
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v110[0] = 0x40000000000;
  v109[0] = 0x40000000000;
  v107 = 1024;
  LOWORD(v63) = 0;
  v64 = 0;
  LOWORD(v65) = 0;
  v66 = 0;
  do
  {
    v67 = v57 + (unsigned __int16)v58;
    if (v67 >= 0x400)
      v68 = 0x7FFFFFFFFFFFFE00;
    else
      v68 = 0;
    *((float *)&v110[v68 + 1] + v67) = v113[v56] * v113[v56];
    if (v57 > 0x3FF)
    {
      if ((unsigned __int16)v58 >= 0x3FFu)
        v69 = -1024;
      else
        v69 = 0;
      v63 = v58 + v69 + 1;
      v58 = v63;
    }
    else
    {
      v64 = ++v57;
    }
    v70 = v59 + (unsigned __int16)v60;
    if (v70 >= 0x400)
      v71 = 0x7FFFFFFFFFFFFE00;
    else
      v71 = 0;
    *((float *)&v109[v71 + 1] + v70) = v112[v56] * v112[v56];
    if (v59 > 0x3FF)
    {
      if ((unsigned __int16)v60 >= 0x3FFu)
        v72 = -1024;
      else
        v72 = 0;
      v65 = v60 + v72 + 1;
      v60 = v65;
    }
    else
    {
      v66 = ++v59;
    }
    v73 = v61 + v62;
    if (v73 >= 0x400)
      v74 = -1024;
    else
      v74 = 0;
    *(float *)&v108[v74 + v73] = v111[v56] * v111[v56];
    if (v61 > 0x3FF)
    {
      if (v62 >= 0x3FFu)
        v75 = -1024;
      else
        v75 = 0;
      v62 += v75 + 1;
    }
    else
    {
      ++v61;
    }
    ++v56;
  }
  while (v56 != 1024);
  LOWORD(v110[0]) = v63;
  WORD1(v110[0]) = v64;
  LOWORD(v109[0]) = v65;
  WORD1(v109[0]) = v66;
  v106[1] = v61;
  v106[0] = v62;
  CMFourierTransformSafety::CMFourierTransformSafety((CMFourierTransformSafety *)v101);
  CMFourierTransformSafety::forward_real((uint64_t)v101, v105, (unsigned __int16 *)v110);
  CMFourierTransformSafety::forward_real((uint64_t)v101, v104, (unsigned __int16 *)v109);
  CMFourierTransformSafety::forward_real((uint64_t)v101, v103, v106);
  v76 = 0;
  v77 = (float32x4_t)vdupq_n_s32(0x3A800000u);
  do
  {
    *(float32x4_t *)((char *)&v102[v76 / 4 + 521] + 8) = vmulq_f32(vaddq_f32(vaddq_f32(*(float32x4_t *)&v105[v76], *(float32x4_t *)&v104[v76]), *(float32x4_t *)&v103[v76]), v77);
    v76 += 4;
  }
  while (v76 != 1024);
  v78 = 0;
  v79 = 0;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  v83 = -3.4028e38;
  v84 = 3.4028e38;
  v85 = 111;
  v86 = 3.4028e38;
  while (1)
  {
    v87 = v102[521].f32[v85 + 2];
    v82 |= v87 >= v86;
    if ((v82 & 1) != 0)
    {
      if (v87 <= v83)
        goto LABEL_98;
      v83 = v102[521].f32[v85 + 2];
      v79 = v85;
    }
    else
    {
      v86 = v102[521].f32[v85 + 2];
      v80 = v85;
    }
    if ((v81 & 1) == 0)
    {
      v81 = 0;
      goto LABEL_102;
    }
LABEL_98:
    if (v87 >= v84)
      break;
    v81 = 1;
    v84 = v102[521].f32[v85 + 2];
    v78 = v85;
LABEL_102:
    if (++v85 == 399)
    {
      v88 = 0.0;
      v89 = 0x7FFFFFFF;
      goto LABEL_114;
    }
  }
  v90 = v79 - v80;
  v91 = v78 - v79;
  v92 = (float)(v84 + v86) * -0.5;
  if (v80 <= v90)
    v93 = v90;
  else
    v93 = v80;
  if (v93 <= v91)
    v93 = v91;
  if (v90 < v80)
    v80 = v90;
  v88 = v83 + v92;
  if (v91 < v80)
    v80 = v91;
  v89 = v93 - v80;
LABEL_114:
  v94 = *(_QWORD *)(v4 + 32);
  if (v88 <= *(float *)(v94 + 20) || v89 >= *(_DWORD *)(v94 + 16))
  {
    v96 = 0;
    v95 = 0;
  }
  else
  {
    v95 = v88 > *(float *)(v94 + 28) && v89 < *(_DWORD *)(v94 + 24);
    v96 = 1;
  }
  *(_QWORD *)(v94 + 32) = v3;
  *(_BYTE *)(v94 + 40) = v96;
  *(_BYTE *)(v94 + 41) = v95;
  *(float *)(v94 + 68) = v88;
  *(_DWORD *)(v94 + 64) = v89;

LABEL_122:
}

void sub_100262C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void `virtual thunk to'CLKappaFeaturesAlgGravityAutoCorrelation::epochFinalize(CLKappaFeaturesAlgGravityAutoCorrelation *this)
{
  CLKappaFeaturesAlgGravityAutoCorrelation::epochFinalize((CLKappaFeaturesAlgGravityAutoCorrelation *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)));
}

uint64_t CLKappaFeaturesAlgGravityAutoCorrelation::epochReset(CLKappaFeaturesAlgGravityAutoCorrelation *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 24))(*((_QWORD *)this + 4));
}

uint64_t `virtual thunk to'CLKappaFeaturesAlgGravityAutoCorrelation::epochReset(CLKappaFeaturesAlgGravityAutoCorrelation *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 56) + 32);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
}

void sub_100262D24(CLKappaAlgBlock *a1)
{
  *(_QWORD *)a1 = off_100360550;
  *((_QWORD *)a1 + 8) = off_1003607F0;
  *((_QWORD *)a1 + 9) = off_100360928;
  *((_QWORD *)a1 + 10) = off_100360A00;
  sub_10000A718((uint64_t)a1 + 48);
  sub_10000A718((uint64_t)a1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(a1, (uint64_t *)off_100360A50);
}

void sub_100262D7C(CLKappaAlgBlock *a1)
{
  *(_QWORD *)a1 = off_100360550;
  *((_QWORD *)a1 + 8) = off_1003607F0;
  *((_QWORD *)a1 + 9) = off_100360928;
  *((_QWORD *)a1 + 10) = off_100360A00;
  sub_10000A718((uint64_t)a1 + 48);
  sub_10000A718((uint64_t)a1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(a1, (uint64_t *)off_100360A50);
  operator delete();
}

_QWORD *sub_100262DEC(uint64_t a1, uint64_t *a2)
{
  return sub_10000A6A0((_QWORD *)(a1 + 48), a2);
}

void sub_100262DF4(_QWORD *a1)
{
  CLKappaAlgBlock *v1;

  v1 = (CLKappaAlgBlock *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  *(_QWORD *)v1 = off_100360550;
  *((_QWORD *)v1 + 8) = off_1003607F0;
  *((_QWORD *)v1 + 9) = off_100360928;
  *((_QWORD *)v1 + 10) = off_100360A00;
  sub_10000A718((uint64_t)v1 + 48);
  sub_10000A718((uint64_t)v1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_100360A50);
}

void sub_100262E54(_QWORD *a1)
{
  CLKappaAlgBlock *v1;

  v1 = (CLKappaAlgBlock *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  *(_QWORD *)v1 = off_100360550;
  *((_QWORD *)v1 + 8) = off_1003607F0;
  *((_QWORD *)v1 + 9) = off_100360928;
  *((_QWORD *)v1 + 10) = off_100360A00;
  sub_10000A718((uint64_t)v1 + 48);
  sub_10000A718((uint64_t)v1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_100360A50);
  operator delete();
}

_QWORD *sub_100262EC8(_QWORD *a1, uint64_t *a2)
{
  return sub_10000A6A0((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32) + 48), a2);
}

void sub_100262EDC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "Alg");
  v2 = (void *)qword_100387318;
  qword_100387318 = (uint64_t)v1;

}

void sub_100262F0C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100361088;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100262F20(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100361088;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100262F54(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

id sub_100263114()
{
  if (qword_100387340 != -1)
    dispatch_once(&qword_100387340, &stru_100361118);
  return (id)qword_100387348;
}

void sub_100263488(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100263664(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

__CFString *sub_10026368C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4;

  switch(a2)
  {
    case 4:
      objc_msgSend(*(id *)(a1 + 32), "resetSession");
      goto LABEL_9;
    case 3:
      if (a3 == 1)
      {
        v4 = objc_retainBlock(*(id *)(*(_QWORD *)(a1 + 32) + 24));
        return (__CFString *)v4;
      }
LABEL_9:
      v4 = 0;
      return (__CFString *)v4;
    case 1:
      return CFSTR("idle");
    default:
      return (__CFString *)0;
  }
}

__CFString *sub_1002636E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4;
  __CFString *result;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  _DWORD v10[2];

  v4 = 0;
  switch(a2)
  {
    case 1:
      return CFSTR("reading");
    case 3:
      v4 = 0;
      switch(a3)
      {
        case 1:
          if (qword_100387340 != -1)
            dispatch_once(&qword_100387340, &stru_100361118);
          v8 = qword_100387348;
          if (os_log_type_enabled((os_log_t)qword_100387348, OS_LOG_TYPE_INFO))
          {
            v10[0] = 67109120;
            v10[1] = 600;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "reset timeout to  %u sec", (uint8_t *)v10, 8u);
          }
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 112), "setNextFireDelay:", 600.0);
          v6 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
          goto LABEL_18;
        case 2:
        case 3:
          goto LABEL_4;
        case 4:
          v6 = *(void **)(*(_QWORD *)(a1 + 32) + 32);
          goto LABEL_18;
        case 6:
          if (qword_100387340 != -1)
            dispatch_once(&qword_100387340, &stru_100361118);
          v9 = qword_100387348;
          if (os_log_type_enabled((os_log_t)qword_100387348, OS_LOG_TYPE_INFO))
          {
            LOWORD(v10[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "forcefully aborting session", (uint8_t *)v10, 2u);
          }
LABEL_4:
          v6 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
LABEL_18:
          v4 = objc_retainBlock(v6);
          break;
        default:
          goto LABEL_19;
      }
      goto LABEL_19;
    case 4:
      objc_msgSend(*(id *)(a1 + 32), "start");
      goto LABEL_11;
    case 6:
      if (qword_100387340 != -1)
        dispatch_once(&qword_100387340, &stru_100361118);
      v7 = qword_100387348;
      if (os_log_type_enabled((os_log_t)qword_100387348, OS_LOG_TYPE_INFO))
      {
        LOWORD(v10[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "stop trigger timer", (uint8_t *)v10, 2u);
      }
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 112), "setNextFireDelay:", 1.79769313e308);
LABEL_11:
      result = (__CFString *)0;
      break;
    default:
LABEL_19:
      result = (__CFString *)v4;
      break;
  }
  return result;
}

__CFString *sub_100263970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  double v10;
  NSObject *v11;
  NSObject *v12;
  uint8_t v13[16];
  uint8_t v14[16];
  uint8_t buf[16];
  uint8_t v16[16];

  v4 = 0;
  switch(a2)
  {
    case 1:
      return CFSTR("waitForSOS");
    case 3:
      if (a3 == 5 || a3 == 2)
        goto LABEL_29;
      if (a3 != 1)
        return (__CFString *)0;
      if (!*(_BYTE *)(*(_QWORD *)(a1 + 32) + 216))
        goto LABEL_29;
      if (qword_100387340 != -1)
        dispatch_once(&qword_100387340, &stru_100361118);
      v6 = qword_100387348;
      if (os_log_type_enabled((os_log_t)qword_100387348, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "ignoring trigger in wait state while waiting for SOS resolution", v13, 2u);
      }
      v7 = *(void **)(*(_QWORD *)(a1 + 32) + 32);
      goto LABEL_30;
    case 4:
      if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 216))
      {
        if (qword_100387340 != -1)
          dispatch_once(&qword_100387340, &stru_100361118);
        v8 = qword_100387348;
        if (os_log_type_enabled((os_log_t)qword_100387348, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "wait for 30s for SOS resolution", buf, 2u);
        }
        v9 = *(void **)(*(_QWORD *)(a1 + 32) + 112);
        v10 = 30.0;
LABEL_23:
        objc_msgSend(v9, "setNextFireDelay:interval:", v10, 1.79769313e308);
        return (__CFString *)0;
      }
      else
      {
        if (qword_100387340 != -1)
          dispatch_once(&qword_100387340, &stru_100361118);
        v12 = qword_100387348;
        if (os_log_type_enabled((os_log_t)qword_100387348, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)v16 = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "SOSInProgress false while in wait state", v16, 2u);
        }
LABEL_29:
        v7 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
LABEL_30:
        v4 = objc_retainBlock(v7);
        return (__CFString *)v4;
      }
    case 6:
      if (qword_100387340 != -1)
        dispatch_once(&qword_100387340, &stru_100361118);
      v11 = qword_100387348;
      if (os_log_type_enabled((os_log_t)qword_100387348, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v14 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "cancel sos timeout timer", v14, 2u);
      }
      v9 = *(void **)(*(_QWORD *)(a1 + 32) + 112);
      v10 = 1.79769313e308;
      goto LABEL_23;
    default:
      return (__CFString *)v4;
  }
}

id sub_100263BF4(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  if (qword_100387340 != -1)
    dispatch_once(&qword_100387340, &stru_100361118);
  v2 = qword_100387348;
  if (os_log_type_enabled((os_log_t)qword_100387348, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Trigger timeout expired", v4, 2u);
  }
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "signal:data:", 2, 0);
}

void sub_1002641A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002649C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);

  sub_10000A718((uint64_t)va);
  sub_10000A718((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_100264AD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100265B54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_100265DD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v1 + 216))
  {
    v2 = 4;
  }
  else
  {
    objc_msgSend(*(id *)(v1 + 80), "feedDetectionDecision:uuid:forMode:", 0, 0, 2);
    v1 = *(_QWORD *)(a1 + 32);
    v2 = 3;
  }
  return objc_msgSend(*(id *)(v1 + 8), "signal:data:", v2, 0);
}

void sub_100265F18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1002662D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10026652C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1002669BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1002673B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_100267484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{

  _Unwind_Resume(a1);
}

void sub_100267514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{

  _Unwind_Resume(a1);
}

void sub_1002675C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{

  _Unwind_Resume(a1);
}

void sub_100267730(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002677C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{

  _Unwind_Resume(a1);
}

void sub_100267854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{

  _Unwind_Resume(a1);
}

void sub_100267900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{

  _Unwind_Resume(a1);
}

void sub_100267990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{

  _Unwind_Resume(a1);
}

void sub_100267A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{

  _Unwind_Resume(a1);
}

id sub_100267A34()
{
  if (qword_100387330 != -1)
    dispatch_once(&qword_100387330, &stru_100361138);
  return (id)qword_100387338;
}

void sub_100267B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{

  _Unwind_Resume(a1);
}

void sub_100267B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{

  _Unwind_Resume(a1);
}

void sub_100267C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{

  _Unwind_Resume(a1);
}

void sub_100267CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{

  _Unwind_Resume(a1);
}

void sub_100268248(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100268420(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002689EC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_100268E8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100268F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100269164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_10026923C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100269494(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10026959C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100269770(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100269978(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100269CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v21;

  if (a20 < 0)
    operator delete(__p);
  v21 = a12;
  a12 = 0;
  if (v21)
    sub_10026C4F0((uint64_t)&a12, v21);
  _Unwind_Resume(exception_object);
}

void sub_10026A518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27)
{
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  _Unwind_Resume(a1);
}

id sub_10026A6E8(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_10026A96C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10026B1D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36)
{
  void *v36;

  _Unwind_Resume(a1);
}

id sub_10026B394(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_10026B408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10026B7F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10026B84C()
{
  JUMPOUT(0x10026B844);
}

void sub_10026B904(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v7 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "updateMartyUserInfoWithInfo:", v8);
    objc_msgSend(v7, "uploadUserInfoToCoreAnalyticsWithHandler:", v5);
    objc_msgSend(v7, "clearCAStats");
  }

}

void sub_10026B980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_10026C19C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10026C418(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "MartyDetection");
  v2 = (void *)qword_100387348;
  qword_100387348 = (uint64_t)v1;

}

void sub_10026C448(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "KappaDetection");
  v2 = (void *)qword_100387338;
  qword_100387338 = (uint64_t)v1;

}

void sub_10026C478(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "CoreAnalytics");
  v2 = (void *)qword_1003873C8;
  qword_1003873C8 = (uint64_t)v1;

}

void sub_10026C4A8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 31) < 0)
      operator delete(*(void **)(a2 + 8));
    operator delete();
  }
}

void sub_10026C4F0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    operator delete();
  }
}

void sub_10026C538(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, const char *a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_signpost_emit_with_name_impl(a1, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, a5, a6, &a9, 0x26u);
}

void sub_10026C56C(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0x26u);
}

void sub_10026C580(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_impl(a1, v9, OS_LOG_TYPE_INFO, a4, &a9, 0x26u);
}

BOOL sub_10026C594(NSObject *a1)
{
  NSObject **v1;

  *v1 = a1;
  return os_log_type_enabled(a1, OS_LOG_TYPE_INFO);
}

BOOL sub_10026C5A4(NSObject *a1)
{
  return os_log_type_enabled(a1, OS_LOG_TYPE_FAULT);
}

BOOL sub_10026C5B0(NSObject *a1)
{
  return os_log_type_enabled(a1, OS_LOG_TYPE_INFO);
}

BOOL sub_10026C5B8(os_log_t log)
{
  return os_signpost_enabled(log);
}

#error "10026C654: call analysis failed (funcsize=53)"

#error "10026C824: call analysis failed (funcsize=69)"

#error "10026C96C: call analysis failed (funcsize=69)"

#error "10026C9E4: call analysis failed (funcsize=53)"

#error "10026CAE4: call analysis failed (funcsize=53)"

#error "10026CBE4: call analysis failed (funcsize=53)"

#error "10026CCE4: call analysis failed (funcsize=53)"

#error "10026CEB4: call analysis failed (funcsize=69)"

#error "10026CF2C: call analysis failed (funcsize=53)"

#error "10026D02C: call analysis failed (funcsize=53)"

#error "10026D12C: call analysis failed (funcsize=53)"

#error "10026D22C: call analysis failed (funcsize=53)"

#error "10026D3FC: call analysis failed (funcsize=69)"

#error "10026D474: call analysis failed (funcsize=53)"

#error "10026D574: call analysis failed (funcsize=53)"

#error "10026D674: call analysis failed (funcsize=53)"

#error "10026D844: call analysis failed (funcsize=69)"

#error "10026D8BC: call analysis failed (funcsize=53)"

#error "10026D9BC: call analysis failed (funcsize=53)"

#error "10026DABC: call analysis failed (funcsize=53)"

#error "10026DBBC: call analysis failed (funcsize=53)"

#error "10026DCBC: call analysis failed (funcsize=53)"

#error "10026DE8C: call analysis failed (funcsize=68)"

#error "10026DEFC: call analysis failed (funcsize=53)"

uint64_t CSFastpathGlue::open(CSFastpathGlue *this, int a2, io_service_t a3)
{
  _QWORD *v5;
  IOCFPlugInInterface ***v6;
  const __CFUUID *v7;
  const __CFUUID *v8;
  uint64_t v9;
  IOCFPlugInInterface **v11;
  HRESULT (__cdecl *QueryInterface)(void *, REFIID, LPVOID *);
  const __CFUUID *v13;
  CFUUIDBytes v14;
  NSObject *v15;
  NSObject *v16;
  SInt32 theScore;
  uint8_t buf[4];
  int v19;

  *((_QWORD *)this + 2) = 0;
  v5 = (_QWORD *)((char *)this + 16);
  *(_DWORD *)this = a2;
  v6 = (IOCFPlugInInterface ***)((char *)this + 8);
  v7 = CFUUIDGetConstantUUIDWithBytes(kCFAllocatorSystemDefault, 0x53u, 0xEAu, 0x67u, 0x34u, 0xC7u, 0xEu, 0x46u, 0x35u, 0x9Cu, 0xF5u, 0x4Fu, 0xAFu, 5u, 0xB4u, 0xF2u, 0x30u);
  v8 = CFUUIDGetConstantUUIDWithBytes(0, 0xC2u, 0x44u, 0xE8u, 0x58u, 0x10u, 0x9Cu, 0x11u, 0xD4u, 0x91u, 0xD4u, 0, 0x50u, 0xE4u, 0xC6u, 0x42u, 0x6Fu);
  v9 = IOCreatePlugInInterfaceForService(a3, v7, v8, v6, &theScore);
  if (!(_DWORD)v9)
  {
    v11 = *v6;
    QueryInterface = (**v6)->QueryInterface;
    v13 = CFUUIDGetConstantUUIDWithBytes(kCFAllocatorSystemDefault, 0xA6u, 0x7Au, 0x69u, 0x95u, 0x23u, 0x6Bu, 0x44u, 0xDEu, 0x97u, 0xB5u, 0x27u, 0xB9u, 0xB1u, 0xE6u, 0x6Fu, 0x2Fu);
    v14 = CFUUIDGetUUIDBytes(v13);
    ((void (*)(IOCFPlugInInterface **, _QWORD, _QWORD, _QWORD *))QueryInterface)(v11, *(_QWORD *)&v14.byte0, *(_QWORD *)&v14.byte8, v5);
    if (*v5)
    {
      v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v5 + 64))(*v5);
      if ((_DWORD)v9)
      {
        if (qword_100387320 != -1)
          dispatch_once(&qword_100387320, &stru_100361198);
        v15 = qword_100387328;
        if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 67109120;
          v19 = v9;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "error: failed to open AOP, error 0x%x", buf, 8u);
        }
        *v5 = 0;
      }
      else
      {
        *((_DWORD *)this + 6) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 88))(*((_QWORD *)this + 2));
      }
    }
    else
    {
      if (qword_100387320 != -1)
        dispatch_once(&qword_100387320, &stru_100361198);
      v16 = qword_100387328;
      if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 67109120;
        v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "error: failed to query fastpath interface, error 0x%x", buf, 8u);
      }
      return 0;
    }
  }
  return v9;
}

uint64_t CSFastpathGlue::close(CSFastpathGlue *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 2);
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 72))(result);
    result = *((_QWORD *)this + 1);
    if (result)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)result + 24))(result);
      result = IODestroyPlugInInterface(*((IOCFPlugInInterface ***)this + 1));
    }
    *((_QWORD *)this + 2) = 0;
  }
  return result;
}

uint64_t CSFastpathGlue::reset(uint64_t this)
{
  *(_QWORD *)(this + 32) = 0;
  return this;
}

BOOL CSFastpathGlue::setupForReading(CSFastpathGlue *this, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  NSObject *v6;
  _BOOL8 result;
  const char *v8;
  int v9;
  int v10;
  int v11;
  int v12;

  v3 = **((_QWORD **)this + 2);
  if (*((_QWORD *)this + 4))
  {
    v4 = (*(uint64_t (**)(void))(v3 + 104))();
    if (v4)
    {
      v5 = v4;
      if (qword_100387320 != -1)
        dispatch_once(&qword_100387320, &stru_100361198);
      v6 = qword_100387328;
      result = os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_FAULT);
      if (result)
      {
        v11 = 67109120;
        v12 = v5;
        v8 = "error: Read error 0x%x";
LABEL_12:
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, v8, (uint8_t *)&v11, 8u);
        return 0;
      }
      return result;
    }
    return 1;
  }
  v9 = (*(uint64_t (**)(void))(v3 + 112))();
  if (!v9)
    return 1;
  v10 = v9;
  if (qword_100387320 != -1)
    dispatch_once(&qword_100387320, &stru_100361198);
  v6 = qword_100387328;
  result = os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_FAULT);
  if (result)
  {
    v11 = 67109120;
    v12 = v10;
    v8 = "error: ReadLast error 0x%x";
    goto LABEL_12;
  }
  return result;
}

uint64_t CSFastpathGlue::read(CSFastpathGlue *this, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  NSObject *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  _BYTE v23[4];
  int v24;
  const void *v25;
  uint8_t buf[4];
  int v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;

  v4 = *((_QWORD *)this + 2);
  if (!v4)
    return 0;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 96))(v4);
  __chkstk_darwin(v7);
  v9 = &v23[-v8];
  if (!CSFastpathGlue::setupForReading(this, a3, &v23[-v8]))
    return 0;
  v25 = 0;
  v10 = 0;
  if ((_DWORD)a3)
  {
    while ((*(unsigned int (**)(_QWORD, _QWORD *, char *, const void **, _QWORD, _QWORD))(**((_QWORD **)this + 2) + 128))(*((_QWORD *)this + 2), v9, (char *)this + 40, &v25, 0, 0))
    {
      memcpy(a2, v25, *((unsigned int *)this + 6));
      v24 = 0;
      (*(void (**)(_QWORD, _QWORD *, _QWORD, int *))(**((_QWORD **)this + 2) + 136))(*((_QWORD *)this + 2), v9, *((_QWORD *)this + 5), &v24);
      if (v24)
      {
        if (qword_100387320 != -1)
          dispatch_once(&qword_100387320, &stru_100361198);
        v12 = qword_100387328;
        if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_ERROR))
        {
          v13 = *(_DWORD *)this;
          v15 = v9[10];
          v14 = v9[11];
          v17 = v9[3];
          v16 = v9[4];
          v18 = v9[2];
          v20 = v9[8];
          v19 = v9[9];
          v21 = v9[7];
          *(_DWORD *)buf = 67111168;
          v27 = v13;
          v28 = 2048;
          v29 = v15;
          v30 = 2048;
          v31 = v14;
          v32 = 2048;
          v33 = v17;
          v34 = 2048;
          v35 = v16;
          v36 = 2048;
          v37 = v18;
          v38 = 2048;
          v39 = v20;
          v40 = 2048;
          v41 = v19;
          v42 = 2048;
          v43 = v21;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "interface %0x corrupt count %zd offset %zd, desc read/write [%llu/%llu/%zd, %llu/%llu/%zd", buf, 0x58u);
          if (qword_100387320 != -1)
            dispatch_once(&qword_100387320, &stru_100361198);
        }
        v22 = qword_100387328;
        if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 67109376;
          v27 = v10;
          v28 = 1024;
          LODWORD(v29) = 1;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "Read %u, corrupt %u", buf, 0xEu);
        }
        return v10;
      }
      v10 = (v10 + 1);
      a2 += *((unsigned int *)this + 6);
      if ((_DWORD)a3 == (_DWORD)v10)
        return a3;
    }
  }
  return v10;
}

uint64_t CSFastpathGlue::readInChunks(int *a1, char *a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  int v16;
  char v17;
  NSObject *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  NSObject *v30;
  _BYTE v32[4];
  int v33;
  const void *v34;
  uint8_t buf[4];
  int v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;

  v6 = *((_QWORD *)a1 + 2);
  if (!v6)
    return 0;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 96))(v6);
  __chkstk_darwin(v11);
  v13 = &v32[-v12];
  if (!CSFastpathGlue::setupForReading((CSFastpathGlue *)a1, a4, &v32[-v12]))
    return 0;
  v34 = 0;
  v14 = 0;
  if ((_DWORD)a4)
  {
    v15 = a2;
    while ((*(unsigned int (**)(_QWORD, _QWORD *, int *, const void **, _QWORD, _QWORD))(**((_QWORD **)a1 + 2) + 128))(*((_QWORD *)a1 + 2), v13, a1 + 10, &v34, 0, 0))
    {
      memcpy(v15, v34, a1[6]);
      v33 = 0;
      (*(void (**)(_QWORD, _QWORD *, _QWORD, int *))(**((_QWORD **)a1 + 2) + 136))(*((_QWORD *)a1 + 2), v13, *((_QWORD *)a1 + 5), &v33);
      if (v33)
      {
        if (qword_100387320 != -1)
          dispatch_once(&qword_100387320, &stru_100361198);
        v18 = qword_100387328;
        if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_ERROR))
        {
          v19 = *a1;
          v21 = v13[10];
          v20 = v13[11];
          v23 = v13[3];
          v22 = v13[4];
          v24 = v13[2];
          v26 = v13[8];
          v25 = v13[9];
          v27 = v13[7];
          *(_DWORD *)buf = 67111168;
          v36 = v19;
          v37 = 2048;
          v38 = v21;
          v39 = 2048;
          v40 = v20;
          v41 = 2048;
          v42 = v23;
          v43 = 2048;
          v44 = v22;
          v45 = 2048;
          v46 = v24;
          v47 = 2048;
          v48 = v26;
          v49 = 2048;
          v50 = v25;
          v51 = 2048;
          v52 = v27;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "interface %0x corrupt count %zd offset %zd, desc read/write [%llu/%llu/%zd, %llu/%llu/%zd", buf, 0x58u);
        }
        v17 = 0;
        v16 = 1;
        goto LABEL_20;
      }
      v14 = (v14 + 1);
      if (v14 % a3)
      {
        v15 += a1[6];
      }
      else
      {
        sub_10026EA1C(a5, (uint64_t)a2, a3);
        bzero(a2, a1[6] * a3);
        v15 = a2;
      }
      if ((_DWORD)a4 == (_DWORD)v14)
      {
        v16 = 0;
        v17 = 1;
        v14 = a4;
        goto LABEL_20;
      }
    }
  }
  v16 = 0;
  v17 = 1;
LABEL_20:
  v28 = v14 % a3;
  v29 = v14 >= a3 || (_DWORD)v14 == 0;
  if (!v29 || v28)
  {
    sub_10026EA1C(a5, (uint64_t)a2, v28);
    bzero(a2, a1[6] * a3);
  }
  if ((v17 & 1) == 0)
  {
    if (qword_100387320 != -1)
      dispatch_once(&qword_100387320, &stru_100361198);
    v30 = qword_100387328;
    if (os_log_type_enabled((os_log_t)qword_100387328, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67109376;
      v36 = v14;
      v37 = 1024;
      LODWORD(v38) = v16;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_FAULT, "Read %u, corrupt %u", buf, 0xEu);
    }
  }
  return v14;
}

uint64_t sub_10026EA1C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  int v5;
  uint64_t v6;

  v6 = a2;
  v5 = a3;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    sub_10026EA88();
  return (*(uint64_t (**)(uint64_t, uint64_t *, int *))(*(_QWORD *)v3 + 48))(v3, &v6, &v5);
}

void sub_10026EA5C(id a1)
{
  qword_100387328 = (uint64_t)os_log_create("com.apple.anomalydetectiond", "AOP");
}

void sub_10026EA88()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = &off_1003611E0;
}

void sub_10026EAC0(std::exception *a1)
{
  std::exception::~exception(a1);
  operator delete();
}

void SafetySOSEventDetected::SafetySOSEventDetected(SafetySOSEventDetected *this)
{
  *(_QWORD *)this = off_100361208;
  *((_DWORD *)this + 3) = 0;
}

{
  *(_QWORD *)this = off_100361208;
  *((_DWORD *)this + 3) = 0;
}

void SafetySOSEventDetected::~SafetySOSEventDetected(SafetySOSEventDetected *this)
{
  PB::Base::~Base(this);
  operator delete();
}

void SafetySOSEventDetected::SafetySOSEventDetected(SafetySOSEventDetected *this, const SafetySOSEventDetected *a2)
{
  int v2;

  *(_QWORD *)this = off_100361208;
  *((_DWORD *)this + 3) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_DWORD *)a2 + 2);
    *((_BYTE *)this + 12) = 1;
    *((_DWORD *)this + 2) = v2;
  }
}

{
  int v2;

  *(_QWORD *)this = off_100361208;
  *((_DWORD *)this + 3) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_DWORD *)a2 + 2);
    *((_BYTE *)this + 12) = 1;
    *((_DWORD *)this + 2) = v2;
  }
}

uint64_t SafetySOSEventDetected::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v6[0] = off_100361208;
    v3 = *(_BYTE *)(a2 + 12) & 1;
    v4 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v6[0] = off_100361208;
    v3 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 12) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t swap(uint64_t result, SafetySOSEventDetected *a2)
{
  int v2;
  int v3;

  v2 = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v2;
  v3 = *(_DWORD *)(result + 8);
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v3;
  return result;
}

uint64_t SafetySOSEventDetected::SafetySOSEventDetected(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = off_100361208;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = off_100361208;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t SafetySOSEventDetected::formatText(SafetySOSEventDetected *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 12) & 1) != 0)
    PB::TextFormatter::format(a2, "mode", *((_DWORD *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t SafetySOSEventDetected::readFrom(SafetySOSEventDetected *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 12) |= 1u;
        v20 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v3 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          else
            v2 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_43;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
LABEL_42:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)a2 + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 2) = v24;
      }
      else
      {
        result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t SafetySOSEventDetected::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 12) & 1) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 8), 1u);
  return this;
}

BOOL SafetySOSEventDetected::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 12);
  result = (*(_BYTE *)(a2 + 12) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 12) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t SafetySOSEventDetected::hash_value(SafetySOSEventDetected *this)
{
  if ((*((_BYTE *)this + 12) & 1) != 0)
    return *((int *)this + 2);
  else
    return 0;
}

void KappaCompanionUUID::KappaCompanionUUID(KappaCompanionUUID *this)
{
  *(_QWORD *)this = off_100361258;
  *((_QWORD *)this + 1) = 0;
}

{
  *(_QWORD *)this = off_100361258;
  *((_QWORD *)this + 1) = 0;
}

void KappaCompanionUUID::~KappaCompanionUUID(KappaCompanionUUID *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_100361258;
  v4 = *((_QWORD *)this + 1);
  v2 = (_QWORD *)((char *)this + 8);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_100011294((uint64_t)v2, v3);
  PB::Base::~Base(this);
}

{
  KappaCompanionUUID::~KappaCompanionUUID(this);
  operator delete();
}

void KappaCompanionUUID::KappaCompanionUUID(KappaCompanionUUID *this, const KappaCompanionUUID *a2)
{
  *(_QWORD *)this = off_100361258;
  *((_QWORD *)this + 1) = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
}

const KappaCompanionUUID *KappaCompanionUUID::operator=(const KappaCompanionUUID *a1, const KappaCompanionUUID *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    KappaCompanionUUID::KappaCompanionUUID((KappaCompanionUUID *)&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v6 = v3;
    KappaCompanionUUID::~KappaCompanionUUID((KappaCompanionUUID *)&v5);
  }
  return a1;
}

uint64_t swap(uint64_t result, KappaCompanionUUID *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)(result + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v2;
  return result;
}

_QWORD *KappaCompanionUUID::KappaCompanionUUID(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = off_100361258;
  a1[1] = 0;
  v3 = a1 + 1;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *v3;
  *v3 = v4;
  if (v5)
    sub_100011294((uint64_t)v3, v5);
  return a1;
}

{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = off_100361258;
  a1[1] = 0;
  v3 = a1 + 1;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *v3;
  *v3 = v4;
  if (v5)
    sub_100011294((uint64_t)v3, v5);
  return a1;
}

uint64_t KappaCompanionUUID::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_100361258;
    v6[1] = v4;
    KappaCompanionUUID::~KappaCompanionUUID((KappaCompanionUUID *)v6);
  }
  return a1;
}

uint64_t KappaCompanionUUID::formatText(KappaCompanionUUID *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format(a2, "uuid");
  return PB::TextFormatter::endObject(a2);
}

uint64_t KappaCompanionUUID::readFrom(KappaCompanionUUID *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t KappaCompanionUUID::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 8);
  if (v2)
    return PB::Writer::write(a2, v2, 1);
  return this;
}

uint64_t KappaCompanionUUID::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 **v3;
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;

  v2 = *(unsigned __int8 **)(a1 + 8);
  v3 = *(unsigned __int8 ***)(a2 + 8);
  result = v3 == 0;
  if (!v2)
    return result;
  if (!v3)
    return 0;
  v5 = v2[23];
  if ((v5 & 0x80u) == 0)
    v6 = (unsigned __int8 *)v2[23];
  else
    v6 = (unsigned __int8 *)*((_QWORD *)v2 + 1);
  v7 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  v8 = (char)v7;
  if ((char)v7 < 0)
    v7 = v3[1];
  if (v6 != v7)
    return 0;
  if (v8 >= 0)
    v9 = *(unsigned __int8 **)(a2 + 8);
  else
    v9 = *v3;
  if ((v5 & 0x80) != 0)
    return !memcmp(*(const void **)v2, v9, *((_QWORD *)v2 + 1));
  if (!v2[23])
    return 1;
  v10 = v5 - 1;
  do
  {
    v12 = *v2++;
    v11 = v12;
    v14 = *v9++;
    v13 = v14;
    v16 = v10-- != 0;
    result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

unint64_t KappaCompanionUUID::hash_value(KappaCompanionUUID *this)
{
  uint64_t v1;
  char v3;

  v1 = *((_QWORD *)this + 1);
  if (v1)
    return sub_1000112DC((uint64_t)&v3, v1);
  else
    return 0;
}

void sub_10026F78C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_10026F89C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10026F920(uint64_t a1, void *a2)
{
  _xpc_activity_s *v3;
  xpc_activity_state_t state;
  NSObject *v5;
  const char *v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  xpc_activity_state_t v11;
  _QWORD v12[5];
  _xpc_activity_s *v13;
  uint8_t buf[4];
  const char *v15;

  v3 = a2;
  state = xpc_activity_get_state(v3);
  if (state == 2)
  {
    if (qword_1003873C0 != -1)
      dispatch_once(&qword_1003873C0, &stru_100361310);
    v8 = qword_1003873C8;
    if (os_log_type_enabled((os_log_t)qword_1003873C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      v15 = "com.apple.anomalydetectiond.CoreAnalytics.UserInfo";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Running activity %s", buf, 0xCu);
    }
    v9 = *(_QWORD *)(a1 + 32);
    v10 = *(_QWORD *)(v9 + 24);
    if (v10)
    {
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_10026FC0C;
      v12[3] = &unk_1003612C8;
      v12[4] = v9;
      v13 = v3;
      (*(void (**)(uint64_t, _QWORD, _QWORD *))(v10 + 16))(v10, 0, v12);

    }
    if (xpc_activity_get_state(v3) == 2 && !xpc_activity_set_state(v3, 4))
    {
      if (qword_1003873C0 != -1)
        dispatch_once(&qword_1003873C0, &stru_100361310);
      v7 = (id)qword_1003873C8;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        v11 = xpc_activity_get_state(v3);
        *(_DWORD *)buf = 134349056;
        v15 = (const char *)v11;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to mark activity as CONTINUE. Current state is %{public}ld", buf, 0xCu);
      }
      goto LABEL_8;
    }
  }
  else if (!state)
  {
    if (qword_1003873C0 != -1)
      dispatch_once(&qword_1003873C0, &stru_100361310);
    v5 = qword_1003873C8;
    if (os_log_type_enabled((os_log_t)qword_1003873C8, OS_LOG_TYPE_INFO))
    {
      v6 = *(const char **)(*(_QWORD *)(a1 + 32) + 8);
      *(_DWORD *)buf = 134217984;
      v15 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Configuring UserInfo with cadence %llu", buf, 0xCu);
    }
    v7 = xpc_activity_copy_criteria(v3);
    xpc_dictionary_set_int64(v7, XPC_ACTIVITY_INTERVAL, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
    xpc_activity_set_criteria(v3, v7);
LABEL_8:

  }
}

void sub_10026FBC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10026FC0C(uint64_t a1, int a2, void *a3)
{
  id v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  _QWORD v10[4];
  id v11;
  char v12;
  uint8_t buf[4];
  int v14;

  v5 = a3;
  if (qword_1003873C0 != -1)
    dispatch_once(&qword_1003873C0, &stru_100361310);
  v6 = qword_1003873C8;
  if (os_log_type_enabled((os_log_t)qword_1003873C8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Kappa handler executed with result: %d", buf, 8u);
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
  if (v7)
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10026FE20;
    v10[3] = &unk_1003612A0;
    v12 = a2;
    v11 = *(id *)(a1 + 40);
    (*(void (**)(uint64_t, id, _QWORD *))(v7 + 16))(v7, v5, v10);

  }
  if (a2)
  {
    if (qword_1003873C0 != -1)
      dispatch_once(&qword_1003873C0, &stru_100361310);
    v8 = qword_1003873C8;
    if (os_log_type_enabled((os_log_t)qword_1003873C8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      v9 = "Kappa handler executed successfully";
LABEL_16:
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, v9, buf, 2u);
    }
  }
  else
  {
    if (qword_1003873C0 != -1)
      dispatch_once(&qword_1003873C0, &stru_100361310);
    v8 = qword_1003873C8;
    if (os_log_type_enabled((os_log_t)qword_1003873C8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      v9 = "CoreAnalytics Kappa upload failed";
      goto LABEL_16;
    }
  }

}

void sub_10026FE00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_10026FE20(uint64_t a1, char a2, void *a3)
{
  id v5;
  NSObject *v6;
  xpc_activity_state_t state;
  NSObject *v8;
  xpc_activity_state_t v9;
  const char *v10;
  NSObject *v11;
  NSObject *v12;
  xpc_activity_state_t v13;
  int v14;
  xpc_activity_state_t v15;

  v5 = a3;
  if ((a2 & 1) != 0)
  {
    if (qword_1003873C0 != -1)
      dispatch_once(&qword_1003873C0, &stru_100361310);
    v6 = qword_1003873C8;
    if (os_log_type_enabled((os_log_t)qword_1003873C8, OS_LOG_TYPE_INFO))
    {
      LOWORD(v14) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Marty handler executed successfully", (uint8_t *)&v14, 2u);
    }
    if (*(_BYTE *)(a1 + 40))
    {
      state = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32));
      if ((state == 4 || state == 2) && !xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 5))
      {
        if (qword_1003873C0 != -1)
          dispatch_once(&qword_1003873C0, &stru_100361310);
        v8 = (id)qword_1003873C8;
        if (!os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
          goto LABEL_28;
        v9 = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32));
        v14 = 134349056;
        v15 = v9;
        v10 = "Failed to mark activity as DONE. Current state is %{public}ld";
LABEL_27:
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, v10, (uint8_t *)&v14, 0xCu);
LABEL_28:

        goto LABEL_29;
      }
      goto LABEL_29;
    }
  }
  else
  {
    if (qword_1003873C0 != -1)
      dispatch_once(&qword_1003873C0, &stru_100361310);
    v11 = qword_1003873C8;
    if (os_log_type_enabled((os_log_t)qword_1003873C8, OS_LOG_TYPE_INFO))
    {
      LOWORD(v14) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "CoreAnalytics Marty upload failed", (uint8_t *)&v14, 2u);
    }
  }
  if (qword_1003873C0 != -1)
    dispatch_once(&qword_1003873C0, &stru_100361310);
  v12 = qword_1003873C8;
  if (os_log_type_enabled((os_log_t)qword_1003873C8, OS_LOG_TYPE_INFO))
  {
    LOWORD(v14) = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "At least one CoreAnalytics uploader failed to complete. Will retry later.", (uint8_t *)&v14, 2u);
  }
  if (!xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 3))
  {
    if (qword_1003873C0 != -1)
      dispatch_once(&qword_1003873C0, &stru_100361310);
    v8 = (id)qword_1003873C8;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      goto LABEL_28;
    v13 = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32));
    v14 = 134349056;
    v15 = v13;
    v10 = "Failed to mark activity as DEFER. Current state is %{public}ld";
    goto LABEL_27;
  }
LABEL_29:

}

void sub_1002700D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10027013C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "CoreAnalytics");
  v2 = (void *)qword_1003873C8;
  qword_1003873C8 = (uint64_t)v1;

}

double CLKappaEstimatesAlgCrashResult::reset(CLKappaEstimatesAlgCrashResult *this)
{
  double result;

  *((_BYTE *)this + 8) = 0;
  *((_DWORD *)this + 3) = 0;
  *((_WORD *)this + 88) = 0;
  *((_QWORD *)this + 23) = 0;
  result = 0.0;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_DWORD *)this + 64) = 0;
  return result;
}

void CLKappaEstimatesAlgCrashResult::log(CLKappaEstimatesAlgCrashResult *this)
{
  NSObject *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  __int16 v51;
  int v52;
  __int16 v53;
  double v54;
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  __int16 v59;
  int v60;
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  __int16 v67;
  double v68;
  __int16 v69;
  double v70;
  __int16 v71;
  double v72;
  __int16 v73;
  double v74;
  __int16 v75;
  double v76;
  __int16 v77;
  int v78;
  __int16 v79;
  int v80;
  __int16 v81;
  int v82;
  __int16 v83;
  int v84;
  __int16 v85;
  int v86;
  __int16 v87;
  int v88;
  __int16 v89;
  double v90;
  __int16 v91;
  double v92;
  __int16 v93;
  double v94;
  __int16 v95;
  double v96;
  __int16 v97;
  double v98;
  __int16 v99;
  double v100;
  __int16 v101;
  double v102;
  __int16 v103;
  double v104;
  __int16 v105;
  double v106;
  __int16 v107;
  double v108;
  __int16 v109;
  double v110;
  __int16 v111;
  double v112;
  __int16 v113;
  double v114;
  __int16 v115;
  double v116;
  __int16 v117;
  double v118;
  __int16 v119;
  double v120;
  __int16 v121;
  double v122;
  __int16 v123;
  double v124;
  __int16 v125;
  double v126;
  __int16 v127;
  double v128;
  __int16 v129;
  double v130;
  __int16 v131;
  double v132;
  __int16 v133;
  double v134;
  __int16 v135;
  double v136;
  __int16 v137;
  double v138;
  __int16 v139;
  double v140;
  __int16 v141;
  double v142;
  __int16 v143;
  double v144;
  __int16 v145;
  double v146;
  __int16 v147;
  double v148;
  __int16 v149;
  double v150;
  __int16 v151;
  double v152;
  __int16 v153;
  double v154;
  __int16 v155;
  double v156;
  __int16 v157;
  double v158;
  __int16 v159;
  double v160;
  __int16 v161;
  double v162;
  __int16 v163;
  double v164;
  __int16 v165;
  double v166;

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100361EE8);
  v2 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((float *)this + 50);
    v4 = *((float *)this + 51);
    v49 = 134363904;
    v5 = *((float *)this + 52);
    v54 = v3;
    v68 = v4;
    v6 = *((float *)this + 54);
    v7 = *((float *)this + 55);
    v70 = v5;
    v8 = *((float *)this + 56);
    v72 = v6;
    v74 = v7;
    v9 = *((float *)this + 4);
    v10 = *((float *)this + 5);
    v76 = v8;
    v90 = v9;
    LODWORD(v8) = *((_DWORD *)this + 7);
    v11 = *((float *)this + 6);
    v92 = v10;
    v94 = v11;
    v12 = *((float *)this + 9);
    v96 = *((float *)this + 8);
    v98 = v12;
    v13 = *((float *)this + 11);
    v100 = *((float *)this + 10);
    v102 = *(float *)&v8;
    v14 = *((float *)this + 16);
    v15 = *((float *)this + 17);
    v104 = v13;
    v106 = v14;
    v16 = *((float *)this + 18);
    v17 = *((float *)this + 19);
    v108 = v15;
    v110 = v16;
    v18 = *((float *)this + 20);
    v19 = *((float *)this + 21);
    v112 = v17;
    v114 = v18;
    v20 = *((float *)this + 22);
    v21 = *((float *)this + 23);
    v116 = v19;
    v118 = v20;
    v22 = *((float *)this + 24);
    v23 = *((float *)this + 25);
    v120 = v21;
    v122 = v22;
    v24 = *((float *)this + 26);
    v25 = *((float *)this + 27);
    v124 = v23;
    v126 = v24;
    v26 = *((float *)this + 12);
    v27 = *((float *)this + 13);
    v128 = v25;
    v130 = v26;
    v28 = *((float *)this + 14);
    v29 = *((float *)this + 15);
    v132 = v27;
    v134 = v28;
    v30 = *((float *)this + 28);
    v31 = *((float *)this + 29);
    v136 = v29;
    v138 = v30;
    LODWORD(v29) = *((_DWORD *)this + 31);
    v32 = *((float *)this + 30);
    v140 = v31;
    v142 = v32;
    v33 = *((float *)this + 35);
    v144 = *((float *)this + 34);
    v146 = v33;
    LODWORD(v33) = *((_DWORD *)this + 37);
    v148 = *((float *)this + 36);
    v150 = *(float *)&v29;
    v152 = *(float *)&v33;
    v34 = *((float *)this + 33);
    v154 = *((float *)this + 32);
    v156 = v34;
    v35 = *((float *)this + 39);
    v158 = *((float *)this + 38);
    v160 = v35;
    LODWORD(v35) = *((_DWORD *)this + 41);
    v162 = *((float *)this + 40);
    v164 = *(float *)&v35;
    v166 = *((float *)this + 42);
    v36 = *((unsigned __int8 *)this + 176);
    v37 = *((unsigned __int8 *)this + 212);
    v38 = *((unsigned __int8 *)this + 213);
    v39 = *((unsigned __int8 *)this + 214);
    v40 = *((unsigned __int8 *)this + 215);
    v41 = *((unsigned __int8 *)this + 192);
    v42 = *((_DWORD *)this + 49);
    v43 = *((unsigned __int8 *)this + 240);
    v44 = *((unsigned __int8 *)this + 241);
    v45 = *((unsigned __int8 *)this + 242);
    v46 = *((unsigned __int8 *)this + 177);
    v47 = *((_DWORD *)this + 61);
    v48 = *((unsigned __int8 *)this + 248);
    v50 = *((_QWORD *)this + 23);
    v51 = 1026;
    v52 = v36;
    v53 = 2050;
    v55 = 1026;
    v56 = v37;
    v57 = 1026;
    v58 = v38;
    v59 = 1026;
    v60 = v39;
    v61 = 1026;
    v62 = v40;
    v63 = 1026;
    v64 = v41;
    v65 = 1026;
    v66 = v42;
    v67 = 2050;
    v69 = 2050;
    v71 = 2050;
    v73 = 2050;
    v75 = 2050;
    v77 = 1026;
    v78 = v43;
    v79 = 1026;
    v80 = v44;
    v81 = 1026;
    v82 = v45;
    v83 = 1026;
    v84 = v46;
    v85 = 1026;
    v86 = v47;
    v87 = 1026;
    v88 = v48;
    v89 = 2050;
    v91 = 2050;
    v93 = 2050;
    v95 = 2050;
    v97 = 2050;
    v99 = 2050;
    v101 = 2050;
    v103 = 2050;
    v105 = 2050;
    v107 = 2050;
    v109 = 2050;
    v111 = 2050;
    v113 = 2050;
    v115 = 2050;
    v117 = 2050;
    v119 = 2050;
    v121 = 2050;
    v123 = 2050;
    v125 = 2050;
    v127 = 2050;
    v129 = 2050;
    v131 = 2050;
    v133 = 2050;
    v135 = 2050;
    v137 = 2050;
    v139 = 2050;
    v141 = 2050;
    v143 = 2050;
    v145 = 2050;
    v147 = 2050;
    v149 = 2050;
    v151 = 2050;
    v153 = 2050;
    v155 = 2050;
    v157 = 2050;
    v159 = 2050;
    v161 = 2050;
    v163 = 2050;
    v165 = 2050;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[C] AlgBlock summary,A,%{public}llu,B,%{public}d,C,%{public}f,D,%{public}d,E,%{public}d,F,%{public}d,G,%{public}d,H,%{public}d,I,%{public}d,J,%{public}f,K,%{public}f,L,%{public}f,M,%{public}f,N,%{public}f,O,%{public}d,P,%{public}d,Q,%{public}d,R,%{public}d,S,%{public}d,T,%{public}d,config-1,%{public}f,config-2,%{public}f,config-3,%{public}f,config-4,%{public}f,config-5,%{public}f,config-6,%{public}f,config-7,%{public}f,config-8,%{public}f,config-9,%{public}f,config-10,%{public}f,config-11,%{public}f,config-12,%{public}f,config-13,%{public}f,config-14,%{public}f,config-15,%{public}f,config-16,%{public}f,config-17,%{public}f,config-18,%{public}f,config-19,%{public}f,config-20,%{public}f,config-21,%{public}f,config-22,%{public}f,config-23,%{public}f,config-24,%{public}f,config-25,%{public}f,config-26,%{public}f,config-27,%{public}f,config-28,%{public}f,config-29,%{public}f,config-30,%{public}f,config-31,%{public}f,config-32,%{public}f,config-33,%{public}f,config-34,%{public}f,config-35,%{public}f,config-36,%{public}f,config-37,%{public}f,config-38,%{public}f,config-39,%{public}f\n", (uint8_t *)&v49, 0x21Cu);
  }
}

void CLKappaEstimatesAlgCrash::CLKappaEstimatesAlgCrash(CLKappaEstimatesAlgCrash *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  __int128 v23;

  CLKappaAlgBlock::CLKappaAlgBlock((CLKappaAlgBlock *)this, a2 + 1);
  v4 = *a2;
  *(_QWORD *)v5 = *a2;
  *(_QWORD *)(v5 + *(_QWORD *)(v4 - 152)) = a2[6];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 160)) = a2[7];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 168)) = a2[8];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 176)) = a2[9];
  *(_QWORD *)(v5 + 32) = 0;
  v6 = v5 + 32;
  *(_QWORD *)(v5 + 54) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)&v7 = 0x80000000800000;
  *((_QWORD *)&v7 + 1) = 0x80000000800000;
  *(_OWORD *)(v5 + 64) = v7;
  *(_QWORD *)(v5 + 80) = 0x80000000800000;
  *(_WORD *)(v5 + 88) = 0;
  *(_BYTE *)(v5 + 90) = 0;
  *(_QWORD *)(v5 + 92) = 0x80000000800000;
  *(_QWORD *)(v5 + 100) = 0xFFFFFFFFLL;
  *(_BYTE *)(v5 + 108) = 0;
  *(_DWORD *)(v5 + 112) = -1;
  v8 = operator new(0x120uLL);
  v8[2] = 0;
  *v8 = off_100361F18;
  v8[1] = 0;
  sub_1002727F8((uint64_t)(v8 + 3));
  *(_QWORD *)&v23 = v8 + 3;
  *((_QWORD *)&v23 + 1) = v8;
  sub_1000081AC((uint64_t)this + 8, &v23);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v21 = *((_QWORD *)this + 1);
  v22 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  sub_1002707B0((uint64_t)&v21, &v23);
  sub_1000081AC(v6, &v23);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v22;
  if (v22)
  {
    v19 = (unint64_t *)&v22->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  (*(void (**)(CLKappaEstimatesAlgCrash *))(*(_QWORD *)this + 304))(this);
}

void sub_10027078C(_Unwind_Exception *a1)
{
  CLKappaAlgBlock *v1;
  uint64_t *v2;
  uint64_t v3;

  sub_10000A718(v3);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, v2);
  _Unwind_Resume(a1);
}

void *sub_1002707B0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = *(void **)a1;
  if (result
  {
    v5 = *(_QWORD *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void CLKappaEstimatesAlgCrash::CLKappaEstimatesAlgCrash(CLKappaEstimatesAlgCrash *this)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  __int128 v20;

  *(_QWORD *)this = off_100345D50;
  *((_QWORD *)this + 15) = off_100345DF8;
  *((_QWORD *)this + 16) = off_100345EC0;
  *((_QWORD *)this + 17) = off_100345F68;
  CLKappaAlgBlock::CLKappaAlgBlock((CLKappaAlgBlock *)this, (uint64_t *)off_1003618E0);
  *(_QWORD *)v2 = off_1003613E0;
  *(_QWORD *)(v2 + 120) = off_100361680;
  *(_QWORD *)(v2 + 128) = off_1003617B8;
  *(_QWORD *)(v2 + 136) = off_100361890;
  *(_QWORD *)(v2 + 32) = 0;
  v3 = v2 + 32;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 54) = 0;
  *(_QWORD *)&v4 = 0x80000000800000;
  *((_QWORD *)&v4 + 1) = 0x80000000800000;
  *(_OWORD *)(v2 + 64) = v4;
  *(_QWORD *)(v2 + 80) = 0x80000000800000;
  *(_WORD *)(v2 + 88) = 0;
  *(_BYTE *)(v2 + 90) = 0;
  *(_QWORD *)(v2 + 92) = 0x80000000800000;
  *(_QWORD *)(v2 + 100) = 0xFFFFFFFFLL;
  *(_BYTE *)(v2 + 108) = 0;
  *(_DWORD *)(v2 + 112) = -1;
  v5 = operator new(0x120uLL);
  v5[2] = 0;
  *v5 = off_100361F18;
  v5[1] = 0;
  sub_1002727F8((uint64_t)(v5 + 3));
  *(_QWORD *)&v20 = v5 + 3;
  *((_QWORD *)&v20 + 1) = v5;
  sub_1000081AC((uint64_t)this + 8, &v20);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v18 = *((_QWORD *)this + 1);
  v19 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  sub_1002707B0((uint64_t)&v18, &v20);
  sub_1000081AC(v3, &v20);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v19;
  if (v19)
  {
    v16 = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  (*(void (**)(CLKappaEstimatesAlgCrash *))(*(_QWORD *)this + 304))(this);
}

void sub_100270A1C(_Unwind_Exception *a1)
{
  CLKappaAlgBlock *v1;
  uint64_t v2;

  sub_10000A718(v2);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003618E0);
  _Unwind_Resume(a1);
}

void CLKappaEstimatesAlgCrash::resetConfiguration(CLKappaEstimatesAlgCrash *this)
{
  void *v2;
  double v3;
  double v4;
  double v5;
  int v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  int v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  int v16;
  void *v17;
  double v18;
  double v19;
  double v20;
  int v21;
  void *v22;
  double v23;
  double v24;
  double v25;
  int v26;
  void *v27;
  double v28;
  double v29;
  double v30;
  int v31;
  void *v32;
  double v33;
  double v34;
  double v35;
  int v36;
  void *v37;
  double v38;
  double v39;
  double v40;
  int v41;
  void *v42;
  double v43;
  double v44;
  double v45;
  int v46;
  void *v47;
  double v48;
  double v49;
  double v50;
  int v51;
  void *v52;
  double v53;
  double v54;
  double v55;
  int v56;
  void *v57;
  double v58;
  double v59;
  double v60;
  int v61;
  void *v62;
  double v63;
  double v64;
  double v65;
  int v66;
  void *v67;
  double v68;
  double v69;
  double v70;
  int v71;
  void *v72;
  double v73;
  double v74;
  double v75;
  int v76;
  void *v77;
  double v78;
  double v79;
  double v80;
  int v81;
  void *v82;
  double v83;
  double v84;
  double v85;
  int v86;
  void *v87;
  double v88;
  double v89;
  double v90;
  int v91;
  void *v92;
  double v93;
  double v94;
  double v95;
  int v96;
  void *v97;
  double v98;
  double v99;
  double v100;
  int v101;
  void *v102;
  double v103;
  double v104;
  double v105;
  int v106;
  void *v107;
  double v108;
  double v109;
  double v110;
  int v111;
  void *v112;
  double v113;
  double v114;
  double v115;
  int v116;
  void *v117;
  double v118;
  double v119;
  double v120;
  int v121;
  void *v122;
  double v123;
  double v124;
  double v125;
  int v126;
  void *v127;
  double v128;
  double v129;
  double v130;
  int v131;
  void *v132;
  double v133;
  double v134;
  double v135;
  int v136;
  void *v137;
  double v138;
  double v139;
  double v140;
  int v141;
  void *v142;
  double v143;
  double v144;
  double v145;
  int v146;
  void *v147;
  double v148;
  double v149;
  double v150;
  int v151;
  void *v152;
  double v153;
  double v154;
  double v155;
  int v156;
  void *v157;
  double v158;
  double v159;
  double v160;
  int v161;
  void *v162;
  double v163;
  double v164;
  double v165;
  int v166;
  void *v167;
  double v168;
  double v169;
  double v170;
  int v171;
  void *v172;
  double v173;
  double v174;
  double v175;
  int v176;
  void *v177;
  double v178;
  double v179;
  double v180;
  int v181;
  void *v182;
  double v183;
  double v184;
  double v185;
  int v186;
  void *v187;
  double v188;
  double v189;
  double v190;
  int v191;
  void *v192;
  double v193;
  double v194;
  double v195;
  int v196;
  id v197;
  __int128 v198;
  int v199;
  int v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  int v210;
  int v211;
  int v212;
  int v213;
  int v214;
  int v215;
  int v216;
  int v217;
  int v218;
  int v219;
  int v220;
  int v221;
  int v222;
  int v223;
  int v224;
  int v225;
  int v226;
  int v227;
  int v228;
  int v229;
  int v230;
  int v231;
  int v232;
  int v233;

  v197 = (id)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration configBaseKey:forFeatureMode:](CSPersistentConfiguration, "configBaseKey:forFeatureMode:", "FeaturesAlgCrashConfig", *((unsigned __int8 *)this + 24)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v3) = 0.5;
  LODWORD(v4) = 3.0;
  LODWORD(v5) = 1193033728;
  objc_msgSend(v2, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 0, v197, v3, v5, v4);
  LODWORD(v198) = v6;

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v8) = 0.5;
  LODWORD(v9) = 9.0;
  LODWORD(v10) = 1193033728;
  objc_msgSend(v7, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 1, v197, v8, v10, v9);
  DWORD1(v198) = v11;

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v13) = 0.5;
  LODWORD(v14) = 1193033728;
  LODWORD(v15) = 1193033728;
  objc_msgSend(v12, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 2, v197, v13, v14, v15);
  DWORD2(v198) = v16;

  v17 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v18) = 1117782016;
  LODWORD(v19) = 0;
  LODWORD(v20) = 9.0;
  objc_msgSend(v17, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 6, v197, v19, v18, v20);
  HIDWORD(v198) = v21;

  v22 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v23) = 0.5;
  LODWORD(v24) = 3.0;
  LODWORD(v25) = 1193033728;
  objc_msgSend(v22, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 3, v197, v23, v25, v24);
  v199 = v26;

  v27 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v28) = 0.5;
  LODWORD(v29) = 1193033728;
  LODWORD(v30) = 1193033728;
  objc_msgSend(v27, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 4, v197, v28, v29, v30);
  v200 = v31;

  v32 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v33) = 0.5;
  LODWORD(v34) = 1193033728;
  LODWORD(v35) = 1193033728;
  objc_msgSend(v32, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 5, v197, v33, v34, v35);
  v201 = v36;

  v37 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v38) = 1117782016;
  LODWORD(v39) = 0;
  LODWORD(v40) = 15.0;
  objc_msgSend(v37, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 7, v197, v39, v38, v40);
  v202 = v41;

  v42 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v43) = 0.5;
  LODWORD(v44) = 3.0;
  LODWORD(v45) = 1193033728;
  objc_msgSend(v42, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 20, v197, v43, v45, v44);
  v203 = v46;

  v47 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v48) = 0.5;
  LODWORD(v49) = 1193033728;
  LODWORD(v50) = 1193033728;
  objc_msgSend(v47, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 21, v197, v48, v49, v50);
  v204 = v51;

  v52 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v53) = 0.5;
  LODWORD(v54) = 1193033728;
  LODWORD(v55) = 1193033728;
  objc_msgSend(v52, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 22, v197, v53, v54, v55);
  v205 = v56;

  v57 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v58) = 1117782016;
  LODWORD(v59) = 0;
  LODWORD(v60) = 15.0;
  objc_msgSend(v57, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 23, v197, v59, v58, v60);
  v206 = v61;

  v62 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v63) = 1120403456;
  LODWORD(v64) = 0;
  LODWORD(v65) = 8.5;
  objc_msgSend(v62, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 8, v197, v64, v63, v65);
  v207 = v66;

  v67 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v68) = 0;
  LODWORD(v69) = 20.0;
  LODWORD(v70) = 0.375;
  objc_msgSend(v67, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 9, v197, v68, v69, v70);
  v208 = v71;

  v72 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v73) = 1148846080;
  LODWORD(v74) = 1112014848;
  LODWORD(v75) = 0;
  objc_msgSend(v72, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 10, v197, v75, v73, v74);
  v209 = v76;

  v77 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v78) = 1148846080;
  LODWORD(v79) = 1120403456;
  LODWORD(v80) = 0;
  objc_msgSend(v77, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 11, v197, v80, v78, v79);
  v210 = v81;

  v82 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v83) = 1120403456;
  LODWORD(v84) = 0;
  LODWORD(v85) = 8.5;
  objc_msgSend(v82, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 12, v197, v84, v83, v85);
  v211 = v86;

  v87 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v88) = 0;
  LODWORD(v89) = 20.0;
  LODWORD(v90) = 0.375;
  objc_msgSend(v87, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 13, v197, v88, v89, v90);
  v212 = v91;

  v92 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v93) = 1148846080;
  LODWORD(v94) = 0;
  LODWORD(v95) = 17.0;
  objc_msgSend(v92, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 14, v197, v94, v93, v95);
  v213 = v96;

  v97 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v98) = 1148846080;
  LODWORD(v99) = 1114636288;
  LODWORD(v100) = 0;
  objc_msgSend(v97, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 15, v197, v100, v98, v99);
  v214 = v101;

  v102 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v103) = 1120403456;
  LODWORD(v104) = 0;
  LODWORD(v105) = 8.5;
  objc_msgSend(v102, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 16, v197, v104, v103, v105);
  v215 = v106;

  v107 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v108) = 0;
  LODWORD(v109) = 20.0;
  LODWORD(v110) = 0.375;
  objc_msgSend(v107, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 17, v197, v108, v109, v110);
  v216 = v111;

  v112 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v113) = *(_DWORD *)"ff&?33s?";
  LODWORD(v114) = 0;
  LODWORD(v115) = 2.0;
  objc_msgSend(v112, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 18, v197, v114, v115, v113);
  v217 = v116;

  v117 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v118) = 1061997773;
  LODWORD(v119) = 0;
  LODWORD(v120) = 2.0;
  objc_msgSend(v117, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 19, v197, v119, v120, v118);
  v218 = v121;

  v122 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v123) = 0.5;
  LODWORD(v124) = 7.0;
  LODWORD(v125) = 1193033728;
  objc_msgSend(v122, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 24, v197, v123, v125, v124);
  v219 = v126;

  v127 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v128) = 0.5;
  LODWORD(v129) = 13.0;
  LODWORD(v130) = 1193033728;
  objc_msgSend(v127, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 25, v197, v128, v130, v129);
  v220 = v131;

  v132 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v133) = 0.5;
  LODWORD(v134) = 1193033728;
  LODWORD(v135) = 1193033728;
  objc_msgSend(v132, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 26, v197, v133, v134, v135);
  v221 = v136;

  v137 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v138) = 0.5;
  LODWORD(v139) = 7.0;
  LODWORD(v140) = 1193033728;
  objc_msgSend(v137, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 27, v197, v138, v140, v139);
  v225 = v141;

  v142 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v143) = 0.5;
  LODWORD(v144) = 1193033728;
  LODWORD(v145) = 1193033728;
  objc_msgSend(v142, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 28, v197, v143, v144, v145);
  v226 = v146;

  v147 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v148) = 0.5;
  LODWORD(v149) = 1193033728;
  LODWORD(v150) = 1193033728;
  objc_msgSend(v147, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 29, v197, v148, v149, v150);
  v227 = v151;

  v152 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v153) = 1114636288;
  LODWORD(v154) = 0;
  LODWORD(v155) = 19.0;
  objc_msgSend(v152, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 30, v197, v154, v153, v155);
  v222 = v156;

  v157 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v158) = 1114636288;
  LODWORD(v159) = 0;
  LODWORD(v160) = 19.0;
  objc_msgSend(v157, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 31, v197, v159, v158, v160);
  v228 = v161;

  v162 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v163) = 1112014848;
  LODWORD(v164) = 0;
  LODWORD(v165) = 7.0;
  objc_msgSend(v162, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 32, v197, v164, v163, v165);
  v223 = v166;

  v167 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v168) = 1120403456;
  LODWORD(v169) = 1148846080;
  LODWORD(v170) = 1203982336;
  objc_msgSend(v167, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 33, v197, v168, v170, v169);
  v224 = v171;

  v172 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v173) = 1112014848;
  LODWORD(v174) = 0;
  LODWORD(v175) = 7.0;
  objc_msgSend(v172, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 34, v197, v174, v173, v175);
  v229 = v176;

  v177 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v178) = 1120403456;
  LODWORD(v179) = 1148846080;
  LODWORD(v180) = 1203982336;
  objc_msgSend(v177, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 35, v197, v178, v180, v179);
  v230 = v181;

  v182 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v183) = 1148846080;
  LODWORD(v184) = 1123024896;
  LODWORD(v185) = -1138501878;
  objc_msgSend(v182, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 36, v197, v185, v183, v184);
  v231 = v186;

  v187 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v188) = 1148846080;
  LODWORD(v189) = 1138819072;
  LODWORD(v190) = -1138501878;
  objc_msgSend(v187, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 37, v197, v190, v188, v189);
  v232 = v191;

  v192 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v193) = 1120403456;
  LODWORD(v194) = 7.0;
  LODWORD(v195) = -1138501878;
  objc_msgSend(v192, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 38, v197, v195, v193, v194);
  v233 = v196;

  CLKappaEstimatesAlgCrash::setConfig((uint64_t)this, &v198);
}

void sub_1002712E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

double CLKappaEstimatesAlgCrash::setConfig(uint64_t a1, _OWORD *a2)
{
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  NSObject *v11;
  float *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  NSObject *v17;
  float *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  NSObject *v23;
  float *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  NSObject *v37;
  float *v38;
  double v39;
  double v40;
  double v41;
  double v42;
  NSObject *v43;
  float *v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  NSObject *v51;
  float *v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  NSObject *v59;
  double result;
  float *v61;
  double v62;
  double v63;
  double v64;
  int v65;
  double v66;
  __int16 v67;
  double v68;
  __int16 v69;
  double v70;
  __int16 v71;
  double v72;
  __int16 v73;
  double v74;
  __int16 v75;
  double v76;
  __int16 v77;
  double v78;
  __int16 v79;
  double v80;
  __int16 v81;
  double v82;
  __int16 v83;
  double v84;
  __int16 v85;
  double v86;
  __int16 v87;
  double v88;

  v3 = *(_OWORD **)(a1 + 32);
  v4 = a2[1];
  v3[1] = *a2;
  v3[2] = v4;
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[5];
  v3[5] = a2[4];
  v3[6] = v7;
  v3[3] = v5;
  v3[4] = v6;
  v8 = a2[6];
  v9 = a2[7];
  v10 = a2[8];
  *(_OWORD *)((char *)v3 + 156) = *(_OWORD *)((char *)a2 + 140);
  v3[8] = v9;
  v3[9] = v10;
  v3[7] = v8;
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100361EE8);
  v11 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v12 = *(float **)(a1 + 32);
    v13 = v12[4];
    v14 = v12[5];
    v15 = v12[6];
    v16 = v12[7];
    v65 = 134218752;
    v66 = v13;
    v67 = 2048;
    v68 = v14;
    v69 = 2048;
    v70 = v15;
    v71 = 2048;
    v72 = v16;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "[C] config-1,%f,config-2,%f,config-3,%f,config-7,%f", (uint8_t *)&v65, 0x2Au);
  }
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100361EE8);
  v17 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v18 = *(float **)(a1 + 32);
    v19 = v18[8];
    v20 = v18[9];
    v21 = v18[10];
    v22 = v18[11];
    v65 = 134218752;
    v66 = v19;
    v67 = 2048;
    v68 = v20;
    v69 = 2048;
    v70 = v21;
    v71 = 2048;
    v72 = v22;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "[C] config-4,%f,config-5,%f,config-6,%f,config-8,%f", (uint8_t *)&v65, 0x2Au);
  }
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100361EE8);
  v23 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v24 = *(float **)(a1 + 32);
    v25 = v24[16];
    v26 = v24[17];
    v27 = v24[18];
    v28 = v24[19];
    v29 = v24[20];
    v30 = v24[21];
    v31 = v24[22];
    v32 = v24[23];
    v33 = v24[24];
    v34 = v24[25];
    v35 = v24[26];
    v36 = v24[27];
    v65 = 134220800;
    v66 = v25;
    v67 = 2048;
    v68 = v26;
    v69 = 2048;
    v70 = v27;
    v71 = 2048;
    v72 = v28;
    v73 = 2048;
    v74 = v29;
    v75 = 2048;
    v76 = v30;
    v77 = 2048;
    v78 = v31;
    v79 = 2048;
    v80 = v32;
    v81 = 2048;
    v82 = v33;
    v83 = 2048;
    v84 = v34;
    v85 = 2048;
    v86 = v35;
    v87 = 2048;
    v88 = v36;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "[C] config-9,%f,config-10,%f,config-11,%f,config-12,%f,config-13,%f,config-14,%f,config-15,%f,config-16,%f,config-17,%f,config-18,%f,config-19,%f,config-20,%f", (uint8_t *)&v65, 0x7Au);
  }
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100361EE8);
  v37 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v38 = *(float **)(a1 + 32);
    v39 = v38[12];
    v40 = v38[13];
    v41 = v38[14];
    v42 = v38[15];
    v65 = 134218752;
    v66 = v39;
    v67 = 2048;
    v68 = v40;
    v69 = 2048;
    v70 = v41;
    v71 = 2048;
    v72 = v42;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "[C] config-21,%f,config-22,%f,config-23,%f,config-24,%f", (uint8_t *)&v65, 0x2Au);
  }
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100361EE8);
  v43 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v44 = *(float **)(a1 + 32);
    v45 = v44[28];
    v46 = v44[29];
    v47 = v44[30];
    v48 = v44[31];
    v49 = v44[32];
    v50 = v44[33];
    v65 = 134219264;
    v66 = v45;
    v67 = 2048;
    v68 = v46;
    v69 = 2048;
    v70 = v47;
    v71 = 2048;
    v72 = v48;
    v73 = 2048;
    v74 = v49;
    v75 = 2048;
    v76 = v50;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "[C] config-25,%f,config-26,%f,config-27,%f,config-28,%f,config-29,%f,config-30,%f", (uint8_t *)&v65, 0x3Eu);
  }
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100361EE8);
  v51 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v52 = *(float **)(a1 + 32);
    v53 = v52[34];
    v54 = v52[35];
    v55 = v52[36];
    v56 = v52[37];
    v57 = v52[38];
    v58 = v52[39];
    v65 = 134219264;
    v66 = v53;
    v67 = 2048;
    v68 = v54;
    v69 = 2048;
    v70 = v55;
    v71 = 2048;
    v72 = v56;
    v73 = 2048;
    v74 = v57;
    v75 = 2048;
    v76 = v58;
    _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "[C] config-31,%f,config-32,%f,config-33,%f,config-34,%f,config-35,%f,config-36,%f", (uint8_t *)&v65, 0x3Eu);
  }
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100361EE8);
  v59 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v61 = *(float **)(a1 + 32);
    v62 = v61[40];
    v63 = v61[41];
    v64 = v61[42];
    v65 = 134218496;
    v66 = v62;
    v67 = 2048;
    v68 = v63;
    v69 = 2048;
    v70 = v64;
    _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEBUG, "[C] config-37,%f,config-38,%f,config-39,%f", (uint8_t *)&v65, 0x20u);
  }
  return result;
}

uint64_t CLKappaEstimatesAlgCrash::reset(CLKappaEstimatesAlgCrash *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 24))(*((_QWORD *)this + 4));
}

uint64_t CLKappaEstimatesAlgCrash::lowSensitivityDetector(CLKappaEstimatesAlgCrash *this, int a2)
{
  float *v2;
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float v15;
  int v16;
  float v17;
  int v18;
  int v19;
  _BOOL4 v20;
  float v21;
  int v22;
  uint64_t v23;

  v2 = (float *)*((_QWORD *)this + 4);
  v3 = v2 + 34;
  v4 = v2 + 35;
  v5 = v2 + 36;
  v6 = v2 + 37;
  v7 = v2 + 38;
  v8 = v2 + 39;
  v9 = v2 + 28;
  v10 = v2 + 29;
  v11 = v2 + 30;
  v12 = v2 + 31;
  v13 = v2 + 32;
  v14 = v2 + 33;
  if (a2)
    v7 = v13;
  else
    v14 = v8;
  if (a2)
  {
    v6 = v12;
    v5 = v11;
    v4 = v10;
    v3 = v9;
  }
  v15 = *((float *)this + 18);
  if (v15 >= *v3)
  {
    v17 = *v4;
    if (v15 >= *v5)
      v18 = 3;
    else
      v18 = -1;
    if (v15 >= *v5)
      v19 = v18;
    else
      v19 = 2;
    if (v15 >= v17)
      v16 = v19;
    else
      v16 = 1;
  }
  else
  {
    v16 = 0;
  }
  if (*((_BYTE *)this + 56))
    v20 = *((float *)this + 23) >= *v7;
  else
    v20 = 0;
  v21 = *v6;
  v22 = *((unsigned __int8 *)this + 58);
  if (*((_BYTE *)this + 58))
    v22 = *((float *)this + 24) >= *v14;
  if (*((_BYTE *)this + 57))
    LODWORD(v23) = 1;
  else
    LODWORD(v23) = v20;
  if (*((float *)this + 16) >= v21)
    v23 = v23;
  else
    v23 = 0;
  if (v16 != 3)
  {
    if (v16 == 2)
    {
      if ((_DWORD)v23)
        return (*((unsigned __int8 *)this + 61) | v22) != 0;
    }
    else
    {
      LODWORD(v23) = v23 & v22;
      if (v16 == 1)
        return v23;
      else
        return 0;
    }
  }
  return v23;
}

void CLKappaEstimatesAlgCrash::epochFinalize(CLKappaEstimatesAlgCrash *this, uint64_t a2)
{
  NSObject *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  NSObject *v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  BOOL v18;
  int v19;
  float *v20;
  BOOL v21;
  float v22;
  int v23;
  NSObject *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  NSObject *v35;
  int v36;
  _BOOL4 v38;
  int v39;
  int v40;
  NSObject *v41;
  char v42;
  int v43;
  uint64_t v44;
  int v45;
  _BOOL4 v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  __int16 v59;
  int v60;
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;

  if (*((_BYTE *)this + 88))
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100361EE8);
    v4 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v45) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[C] using audio thresholds", (uint8_t *)&v45, 2u);
    }
    v5 = (float *)*((_QWORD *)this + 4);
    v6 = v5 + 4;
    v7 = v5 + 5;
    v8 = v5 + 6;
    v9 = v5 + 7;
  }
  else
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100361EE8);
    v10 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v45) = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[C] without audio thresholds", (uint8_t *)&v45, 2u);
    }
    v5 = (float *)*((_QWORD *)this + 4);
    v6 = v5 + 8;
    v7 = v5 + 9;
    v8 = v5 + 10;
    v9 = v5 + 11;
  }
  v11 = *v6;
  v12 = *v7;
  v13 = *v8;
  v14 = *v9;
  v15 = CLSafetyAlgorithmsMath::computeSigmoidalThreshold(v5 + 16, *((float *)this + 18));
  v16 = CLSafetyAlgorithmsMath::computeSigmoidalThreshold((float *)(*((_QWORD *)this + 4) + 80), *((float *)this + 18));
  v17 = CLSafetyAlgorithmsMath::computeSigmoidalThreshold((float *)(*((_QWORD *)this + 4) + 96), *((float *)this + 18));
  v18 = *((float *)this + 19) >= v15 && *((float *)this + 20) >= v16 && *((float *)this + 21) >= v17;
  *((_BYTE *)this + 60) = v18;
  if (!*((_BYTE *)this + 59))
    v18 = 0;
  v19 = *((_DWORD *)this + 25);
  v21 = 0;
  if (v19 != -1)
  {
    v20 = (float *)*((_QWORD *)this + 4);
    if (v20[40] > (float)v19 && *((float *)this + 24) < v20[41] && *((float *)this + 23) < v20[42])
      v21 = 1;
  }
  *((_BYTE *)this + 61) = v18 && !v21;
  v22 = *((float *)this + 18);
  if (v22 >= v11)
  {
    if (v22 >= v12)
    {
      if (v22 >= v13)
        v23 = 3;
      else
        v23 = 2;
    }
    else
    {
      v23 = 1;
    }
  }
  else
  {
    v23 = 0;
  }
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100361EE8);
  v24 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
  {
    v25 = *((unsigned __int8 *)this + 108);
    v26 = *((unsigned __int8 *)this + 104);
    v27 = *((unsigned __int8 *)this + 105);
    v28 = *((unsigned __int8 *)this + 106);
    v29 = *((unsigned __int8 *)this + 107);
    v30 = *((unsigned __int8 *)this + 56);
    v31 = *((unsigned __int8 *)this + 57);
    v32 = *((unsigned __int8 *)this + 58);
    v33 = *((unsigned __int8 *)this + 59);
    v34 = *((_DWORD *)this + 28);
    v45 = 67111424;
    v46 = v25;
    v47 = 1024;
    v48 = v26;
    v49 = 1024;
    v50 = v27;
    v51 = 1024;
    v52 = v28;
    v53 = 1024;
    v54 = v29;
    v55 = 1024;
    v56 = v30;
    v57 = 1024;
    v58 = v31;
    v59 = 1024;
    v60 = v32;
    v61 = 1024;
    v62 = v33;
    v63 = 1024;
    v64 = v34;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "[C] force %d %d %d %d %d is %d %d %d %d regime %d", (uint8_t *)&v45, 0x3Eu);
  }
  if (*((_DWORD *)this + 28) != -1)
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100361EE8);
    v35 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
    {
      v36 = *((_DWORD *)this + 28);
      v45 = 67109120;
      v46 = v36;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "[C] forcing re to %d", (uint8_t *)&v45, 8u);
    }
    v23 = *((_DWORD *)this + 28);
    *((_DWORD *)this + 28) = -1;
  }
  v38 = *((float *)this + 16) >= v14 && (*((unsigned __int8 *)this + 57) | *((unsigned __int8 *)this + 56)) != 0;
  if (v23 != 3)
  {
    if (v23 == 2)
    {
      if (!v38)
        goto LABEL_56;
      v39 = *((unsigned __int8 *)this + 58) | *((unsigned __int8 *)this + 61);
      goto LABEL_54;
    }
    if (v23 == 1)
    {
      if (!v38)
        goto LABEL_56;
      v39 = *((unsigned __int8 *)this + 58);
LABEL_54:
      v38 = v39 != 0;
      goto LABEL_56;
    }
    v38 = 0;
  }
LABEL_56:
  v40 = CLKappaEstimatesAlgCrash::lowSensitivityDetector(this, *((unsigned __int8 *)this + 88));
  if (*((_BYTE *)this + 108))
  {
    *((_BYTE *)this + 108) = 0;
    v38 = 1;
  }
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100361EE8);
  v41 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEFAULT))
  {
    v45 = 67240704;
    v46 = v38;
    v47 = 1026;
    v48 = v23;
    v49 = 1026;
    v50 = v40;
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "[C] de %{public}d re %{public}d low %{public}d", (uint8_t *)&v45, 0x14u);
  }
  v42 = *((_BYTE *)this + 88);
  v43 = *((unsigned __int8 *)this + 89);
  if (v42)
    ++*((_DWORD *)this + 12);
  if (v43)
    ++*((_DWORD *)this + 13);
  v44 = *((_QWORD *)this + 4);
  *(_BYTE *)(v44 + 176) = v38;
  *(_QWORD *)(v44 + 184) = a2;
  *(_BYTE *)(v44 + 177) = v40;
  *(_BYTE *)(v44 + 192) = v42;
  *(_QWORD *)(v44 + 200) = *((_QWORD *)this + 8);
  *(_DWORD *)(v44 + 208) = *((_DWORD *)this + 18);
  *(_DWORD *)(v44 + 196) = v23;
  *(_DWORD *)(v44 + 212) = *((_DWORD *)this + 14);
  *(_QWORD *)(v44 + 216) = *(_QWORD *)((char *)this + 76);
  *(_DWORD *)(v44 + 224) = *((_DWORD *)this + 21);
  *(float *)(v44 + 228) = v15;
  *(float *)(v44 + 232) = v16;
  *(float *)(v44 + 236) = v17;
  *(_WORD *)(v44 + 240) = *((_WORD *)this + 30);
  *(_BYTE *)(v44 + 242) = *((_BYTE *)this + 90);
  *(_DWORD *)(v44 + 244) = *((_DWORD *)this + 25);
  *(_BYTE *)(v44 + 248) = v21;
  *(int32x2_t *)(v44 + 252) = vrev64_s32(*(int32x2_t *)((char *)this + 92));
}

CLKappaEstimatesAlgCrash *CLKappaEstimatesAlgCrash::updateFractionalAudio(CLKappaEstimatesAlgCrash *this, int a2, int a3)
{
  if (a2)
    ++*((_DWORD *)this + 12);
  if (a3)
    ++*((_DWORD *)this + 13);
  return this;
}

void `virtual thunk to'CLKappaEstimatesAlgCrash::epochFinalize(CLKappaEstimatesAlgCrash *this, uint64_t a2)
{
  CLKappaEstimatesAlgCrash::epochFinalize((CLKappaEstimatesAlgCrash *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)), a2);
}

float CLKappaEstimatesAlgCrash::feedFeatures(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  float result;
  uint8_t v7[16];

  if (*(_BYTE *)(a1 + 104))
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100361EE8);
    v4 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[C] forcing pu", v7, 2u);
    }
    *(_BYTE *)(a1 + 56) = 1;
    *(_BYTE *)(a1 + 104) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 56) = *(_BYTE *)a2;
  }
  v5 = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 72) = v5;
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 92) = result;
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 64);
  return result;
}

{
  NSObject *v4;
  float result;
  uint8_t v6[16];

  if (*(_BYTE *)(a1 + 106))
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100361EE8);
    v4 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[C] forcing ba", v6, 2u);
    }
    *(_BYTE *)(a1 + 58) = 1;
    *(_BYTE *)(a1 + 106) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 52) != 0;
  }
  result = *(float *)(a2 + 32);
  *(float *)(a1 + 96) = result;
  return result;
}

{
  NSObject *v3;
  float result;
  uint8_t v5[16];

  if (*(_BYTE *)(a1 + 105))
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100361EE8);
    v3 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[C] forcing ff", v5, 2u);
    }
    *(_BYTE *)(a1 + 57) = 1;
    *(_BYTE *)(a1 + 105) = 0;
  }
  else
  {
    result = *(float *)(a2 + 20);
    *(float *)(a1 + 64) = result;
    *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 44);
  }
  return result;
}

float `virtual thunk to'CLKappaEstimatesAlgCrash::feedFeatures(_QWORD *a1, uint64_t a2)
{
  return CLKappaEstimatesAlgCrash::feedFeatures((uint64_t)a1 + *(_QWORD *)(*a1 - 32), a2);
}

{
  return CLKappaEstimatesAlgCrash::feedFeatures((uint64_t)a1 + *(_QWORD *)(*a1 - 56), a2);
}

{
  return CLKappaEstimatesAlgCrash::feedFeatures((uint64_t)a1 + *(_QWORD *)(*a1 - 104), a2);
}

void CLKappaEstimatesAlgCrash::feedFeatures(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  float v4;
  uint8_t v5[16];

  if (*(_BYTE *)(a1 + 107))
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100361EE8);
    v3 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[C] forcing au", v5, 2u);
    }
    *(_WORD *)(a1 + 59) = 257;
    *(int32x2_t *)(a1 + 76) = vdup_n_s32(0x7F7FFFFFu);
    *(_DWORD *)(a1 + 84) = 2139095039;
    *(_BYTE *)(a1 + 61) = 1;
    *(_BYTE *)(a1 + 107) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 59) = *(_BYTE *)(a2 + 29);
    v4 = *(float *)(a2 + 8);
    *(_BYTE *)(a1 + 88) = v4 > 0.0;
    *(_QWORD *)(a1 + 76) = *(_QWORD *)(a2 + 12);
    *(float *)(a1 + 84) = v4;
  }
}

void `virtual thunk to'CLKappaEstimatesAlgCrash::feedFeatures(_QWORD *a1, uint64_t a2)
{
  CLKappaEstimatesAlgCrash::feedFeatures((uint64_t)a1 + *(_QWORD *)(*a1 - 80), a2);
}

uint64_t CLKappaEstimatesAlgCrash::feedFeatures(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 100) = *a2;
  return result;
}

_QWORD *`virtual thunk to'CLKappaEstimatesAlgCrash::feedFeatures(_QWORD *result, _DWORD *a2)
{
  *(_DWORD *)((char *)result + *(_QWORD *)(*result - 136) + 100) = *a2;
  return result;
}

double CLKappaEstimatesAlgCrash::epochReset(CLKappaEstimatesAlgCrash *this)
{
  uint64_t v1;
  double result;

  if (!*((_BYTE *)this + 104))
    *((_BYTE *)this + 56) = 0;
  if (!*((_BYTE *)this + 105))
    *((_BYTE *)this + 57) = 0;
  if (!*((_BYTE *)this + 106))
    *((_BYTE *)this + 58) = 0;
  if (!*((_BYTE *)this + 107))
  {
    *(_WORD *)((char *)this + 59) = 0;
    *((_BYTE *)this + 61) = 0;
  }
  *((_DWORD *)this + 16) = 0x800000;
  *((_BYTE *)this + 88) = 0;
  v1 = *((_QWORD *)this + 4);
  *(_WORD *)(v1 + 176) = 0;
  *(_QWORD *)(v1 + 184) = 0;
  *(_OWORD *)(v1 + 192) = 0u;
  *(_OWORD *)(v1 + 208) = 0u;
  *(_OWORD *)(v1 + 224) = 0u;
  *(_OWORD *)(v1 + 240) = 0u;
  *(_DWORD *)(v1 + 256) = 0;
  result = 2.84809454e-306;
  *(_QWORD *)((char *)this + 76) = 0x80000000800000;
  *((_DWORD *)this + 21) = 0x800000;
  *((_DWORD *)this + 25) = -1;
  return result;
}

double `virtual thunk to'CLKappaEstimatesAlgCrash::epochReset(CLKappaEstimatesAlgCrash *this)
{
  return CLKappaEstimatesAlgCrash::epochReset((CLKappaEstimatesAlgCrash *)((char *)this
                                                                         + *(_QWORD *)(*(_QWORD *)this - 56)));
}

float CLKappaEstimatesAlgCrash::getFractionalAudio(CLKappaEstimatesAlgCrash *this)
{
  unsigned int v1;

  v1 = *((_DWORD *)this + 13);
  if (v1)
    return (float)*((unsigned int *)this + 12) / (float)v1;
  else
    return -1.0;
}

float CLKappaEstimatesAlgCrash::getFractionalAudioAndLog(CLKappaEstimatesAlgCrash *this)
{
  unsigned int v2;
  float v3;
  NSObject *v4;
  int v5;
  int v6;
  _DWORD v8[2];
  __int16 v9;
  int v10;
  __int16 v11;
  double v12;

  v2 = *((_DWORD *)this + 13);
  if (v2)
    v3 = (float)*((unsigned int *)this + 12) / (float)v2;
  else
    v3 = -1.0;
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100361EE8);
  v4 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *((_DWORD *)this + 12);
    v6 = *((_DWORD *)this + 13);
    v8[0] = 67109632;
    v8[1] = v5;
    v9 = 1024;
    v10 = v6;
    v11 = 2048;
    v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[C] fractionalAudio %d %d %f", (uint8_t *)v8, 0x18u);
  }
  return v3;
}

void sub_1002725AC(CLKappaAlgBlock *a1)
{
  *(_QWORD *)a1 = off_1003613E0;
  *((_QWORD *)a1 + 15) = off_100361680;
  *((_QWORD *)a1 + 16) = off_1003617B8;
  *((_QWORD *)a1 + 17) = off_100361890;
  sub_10000A718((uint64_t)a1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(a1, (uint64_t *)off_1003618E0);
}

void sub_1002725FC(CLKappaAlgBlock *a1)
{
  *(_QWORD *)a1 = off_1003613E0;
  *((_QWORD *)a1 + 15) = off_100361680;
  *((_QWORD *)a1 + 16) = off_1003617B8;
  *((_QWORD *)a1 + 17) = off_100361890;
  sub_10000A718((uint64_t)a1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(a1, (uint64_t *)off_1003618E0);
  operator delete();
}

void sub_100272688(_QWORD *a1)
{
  CLKappaAlgBlock *v1;

  v1 = (CLKappaAlgBlock *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  *(_QWORD *)v1 = off_1003613E0;
  *((_QWORD *)v1 + 15) = off_100361680;
  *((_QWORD *)v1 + 16) = off_1003617B8;
  *((_QWORD *)v1 + 17) = off_100361890;
  sub_10000A718((uint64_t)v1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003618E0);
}

void sub_1002726E0(_QWORD *a1)
{
  CLKappaAlgBlock *v1;

  v1 = (CLKappaAlgBlock *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  *(_QWORD *)v1 = off_1003613E0;
  *((_QWORD *)v1 + 15) = off_100361680;
  *((_QWORD *)v1 + 16) = off_1003617B8;
  *((_QWORD *)v1 + 17) = off_100361890;
  sub_10000A718((uint64_t)v1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003618E0);
  operator delete();
}

void sub_100272770(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "Alg");
  v2 = (void *)qword_100387318;
  qword_100387318 = (uint64_t)v1;

}

void sub_1002727A0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100361F18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002727B4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100361F18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1002727E8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double sub_1002727F8(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_QWORD *)a1 = &off_10034D1F8;
  *(_OWORD *)(a1 + 16) = xmmword_1002EDBD0;
  *(_OWORD *)(a1 + 32) = xmmword_1002EDBE0;
  *(_OWORD *)(a1 + 48) = xmmword_1002EDBE0;
  *(_OWORD *)(a1 + 64) = xmmword_1002EDBF0;
  *(_OWORD *)(a1 + 80) = xmmword_1002EDC00;
  *(_OWORD *)(a1 + 96) = xmmword_1002EDC10;
  *(_OWORD *)(a1 + 112) = xmmword_1002EDC20;
  *(_OWORD *)(a1 + 128) = xmmword_1002EDC30;
  *(_OWORD *)(a1 + 144) = xmmword_1002EDC40;
  result = 9.79983509e18;
  *(_QWORD *)(a1 + 160) = 0x43E1000042F00000;
  *(_DWORD *)(a1 + 168) = 1088421888;
  return result;
}

void sub_1002732D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39)
{
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;

  objc_destroyWeak((id *)(v44 - 184));
  _Unwind_Resume(a1);
}

id sub_100273494()
{
  if (qword_100387450 != -1)
    dispatch_once(&qword_100387450, &stru_100361F80);
  return (id)qword_100387458;
}

id sub_1002734D4(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  if (qword_100387450 != -1)
    dispatch_once(&qword_100387450, &stru_100361F80);
  v2 = qword_100387458;
  if (os_log_type_enabled((os_log_t)qword_100387458, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "DetectionSM timeout", v4, 2u);
  }
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "signal:data:", 9, 0);
}

__CFString *sub_100273574(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;

  if (a2 == 4)
  {
    objc_msgSend(*(id *)(a1 + 32), "clearAll");
    return (__CFString *)0;
  }
  if (a2 == 3)
  {
    if (a3 != 10)
    {
      if (a3 == 4)
      {
        v4 = *(void **)(*(_QWORD *)(a1 + 32) + 56);
        return (__CFString *)objc_retainBlock(v4);
      }
      if (a3 != 1)
        return (__CFString *)0;
    }
    v4 = *(void **)(*(_QWORD *)(a1 + 32) + 32);
    return (__CFString *)objc_retainBlock(v4);
  }
  if (a2 != 1)
    return (__CFString *)0;
  return CFSTR("idle");
}

__CFString *sub_1002735E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __CFString *v3;
  void *v5;

  if (a2 == 3)
  {
    v3 = 0;
    switch(a3)
    {
      case 2:
      case 10:
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 128), "setBool:forKey:", 1, CFSTR("ActiveKappaDecision"));
        v5 = *(void **)(*(_QWORD *)(a1 + 32) + 40);
        goto LABEL_9;
      case 3:
        v5 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
        goto LABEL_9;
      case 4:
        v5 = *(void **)(*(_QWORD *)(a1 + 32) + 56);
LABEL_9:
        v3 = objc_retainBlock(v5);
        break;
      default:
        return v3;
    }
  }
  else if (a2 == 1)
  {
    v3 = CFSTR("potentialCrash");
  }
  else
  {
    v3 = 0;
  }
  return v3;
}

__CFString *sub_100273684(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *src)
{
  __CFString *v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  float v12;
  float v13;
  double v14;
  void *v15;
  uint8_t v17[8];
  uuid_t dst;

  v5 = 0;
  switch(a2)
  {
    case 1:
      v5 = CFSTR("crashStaging");
      break;
    case 3:
      if ((unint64_t)(a3 - 9) >= 2)
      {
        if (a3 != 4)
          goto LABEL_14;
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 128), "setBool:forKey:", 0, CFSTR("ActiveKappaDecision"));
        v15 = *(void **)(*(_QWORD *)(a1 + 32) + 56);
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)(a1 + 32) + 112) = 1;
        v15 = *(void **)(*(_QWORD *)(a1 + 32) + 48);
      }
      v5 = objc_retainBlock(v15);
      break;
    case 4:
      memset(dst, 0, sizeof(dst));
      uuid_copy(dst, src);
      v6 = *(void **)(a1 + 32);
      v7 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", dst);
      objc_msgSend(v6, "updateLocalUUID:", v7);

      if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 80))
      {
        if (qword_100387450 != -1)
          dispatch_once(&qword_100387450, &stru_100361F80);
        v8 = qword_100387458;
        if (os_log_type_enabled((os_log_t)qword_100387458, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)v17 = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Local trigger UUID is nil in crashStagingState", v17, 2u);
        }
      }
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", CFSTR("KappaCompanionWaitDuration")));

      v11 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
      objc_msgSend(v11, "floatForKey:", CFSTR("KappaCompanionWaitDuration"));
      v13 = v12;

      v14 = v13;
      if (v10 == 0 || v13 < 0.0)
        v14 = 1.0;
      objc_msgSend(*(id *)(a1 + 32), "startTimer:", v14);
      goto LABEL_14;
    case 6:
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 128), "removeObjectForKey:", CFSTR("KappaCompanionWaitDuration"), src);
      objc_msgSend(*(id *)(a1 + 32), "stopTimer");
LABEL_14:
      v5 = 0;
      break;
    default:
      return v5;
  }
  return v5;
}

void sub_1002738BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

__CFString *sub_1002738F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __CFString *v4;

  v4 = 0;
  switch(a2)
  {
    case 1:
      v4 = CFSTR("notifyingCompanionState");
      break;
    case 3:
      if (a3 != 9)
        goto LABEL_7;
      v4 = (__CFString *)objc_retainBlock(*(id *)(*(_QWORD *)(a1 + 32) + 56));
      break;
    case 4:
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "notifyCompanionOfLocalCrash:forMode:martyIsBicycle:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80), *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 64), *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 65));
      objc_msgSend(*(id *)(a1 + 32), "startTimer:", 0.5);
      goto LABEL_7;
    case 6:
      objc_msgSend(*(id *)(a1 + 32), "stopTimer");
LABEL_7:
      v4 = 0;
      break;
    default:
      return v4;
  }
  return v4;
}

__CFString *sub_10027398C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4;
  void *v6;
  _BYTE *v7;
  uint64_t v8;
  id v9;
  __CFString *v10;
  void *v11;
  unsigned __int8 v12;
  __CFString *v13;
  NSObject *v14;
  const char *v15;
  id v16;
  uint8_t buf[4];
  __CFString *v18;

  v4 = 0;
  switch(a2)
  {
    case 1:
      return CFSTR("crashProcessing");
    case 3:
      switch(a3)
      {
        case 6:
        case 9:
        case 10:
          goto LABEL_26;
        case 7:
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "didReceiveSOSStatusUpdate:forMode:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 144), *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 64));
          v6 = *(void **)(*(_QWORD *)(a1 + 32) + 56);
          goto LABEL_27;
        case 8:
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "didReceiveSOSStatusUpdate:forMode:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 144), *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 64));
LABEL_26:
          v6 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
LABEL_27:
          v4 = objc_retainBlock(v6);
          break;
        default:
          return (__CFString *)0;
      }
      return (__CFString *)v4;
    case 4:
      v7 = *(_BYTE **)(a1 + 32);
      if (v7[112])
      {
        objc_msgSend(v7, "notifySOSDaemon");
        v7 = *(_BYTE **)(a1 + 32);
      }
      objc_msgSend(v7, "startTimer:", 60.0);
      return (__CFString *)0;
    case 6:
      objc_msgSend(*(id *)(a1 + 32), "stopTimer");
      v8 = *(_QWORD *)(a1 + 32);
      if (*(_BYTE *)(v8 + 64) != 1)
        goto LABEL_23;
      v9 = *(id *)(v8 + 80);
      if (v9 || (v9 = *(id *)(*(_QWORD *)(a1 + 32) + 88)) != 0)
        v10 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "UUIDString"));
      else
        v10 = CFSTR("UUID-NONE");
      v11 = *(void **)(*(_QWORD *)(a1 + 32) + 152);
      v16 = 0;
      v12 = objc_msgSend(v11, "enqueueTTRWithTriggerUUID:error:", v10, &v16);
      v13 = (__CFString *)v16;
      if ((v12 & 1) != 0)
      {
        if (qword_100387450 != -1)
          dispatch_once(&qword_100387450, &stru_100361F80);
        v14 = qword_100387458;
        if (os_log_type_enabled((os_log_t)qword_100387458, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v18 = v10;
          v15 = "Enqueued TTR with UUID %@";
LABEL_21:
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, v15, buf, 0xCu);
        }
      }
      else
      {
        if (qword_100387450 != -1)
          dispatch_once(&qword_100387450, &stru_100361F80);
        v14 = qword_100387458;
        if (os_log_type_enabled((os_log_t)qword_100387458, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v18 = v13;
          v15 = "Error enqueuing TTR: %@";
          goto LABEL_21;
        }
      }

      v8 = *(_QWORD *)(a1 + 32);
LABEL_23:
      objc_msgSend((id)v8, "startTimer:", 60.0);
      return (__CFString *)0;
    default:
      return (__CFString *)v4;
  }
}

void sub_100273C1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100273CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)CSSafetySOSStateMachine;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_10027418C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100274474(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002745E4(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v3;
  id v5;
  NSObject *v6;
  id *WeakRetained;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  unint64_t v12;
  uint8_t buf[4];
  unint64_t v14;
  __int16 v15;
  id v16;

  v3 = a2;
  v12 = a2;
  v5 = a3;
  if (qword_100387450 != -1)
    dispatch_once(&qword_100387450, &stru_100361F80);
  v6 = qword_100387458;
  if (os_log_type_enabled((os_log_t)qword_100387458, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134218242;
    v14 = v3;
    v15 = 2112;
    v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "SOS ACK block response:%ld, SOS UUID: %@", buf, 0x16u);
  }
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained[16], "setBool:forKey:", 0, CFSTR("ActiveKappaDecision"));
  objc_msgSend(WeakRetained[16], "setBool:forKey:", 0, CFSTR("WaitingForSOSAck"));
  v8 = WeakRetained[16];
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[SOSKappaManager currentSOSStatus](SOSKappaManager, "currentSOSStatus"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "uuid"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "UUIDString"));
  objc_msgSend(v8, "setObject:forKey:", v11, CFSTR("KappaSOSUUID"));

  if (v3 <= 5)
  {
    if (((1 << v3) & 0x1A) != 0)
    {
      objc_msgSend(WeakRetained[2], "signal:data:", 6, &v12);
      v3 = v12;
    }
    else if (((1 << v3) & 0x21) != 0)
    {
      objc_msgSend(WeakRetained[16], "setInteger:forKey:", *((unsigned __int8 *)WeakRetained + 64), kSOSEventKey);
      objc_msgSend(WeakRetained, "notifyCompanionOfSafetyEventType:", *((unsigned __int8 *)WeakRetained + 64));
    }
  }
  objc_msgSend(WeakRetained[15], "didReceiveSOSAck:forMode:", v3, *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 64));

}

void sub_1002747E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_100274924(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100274C18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_100274F74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1002751F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100275304(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "SOSStateMachine");
  v2 = (void *)qword_100387458;
  qword_100387458 = (uint64_t)v1;

}

void sub_100275334(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "Companion");
  v2 = (void *)qword_100387388;
  qword_100387388 = (uint64_t)v1;

}

uint64_t sub_100275364(id *a1)
{
  id v1;
  NSObject *v2;
  id v3;
  NSObject *v4;
  id v5;
  NSObject *v6;
  uint64_t result;
  uint8_t buf[40];

  objc_msgSend(*a1, "removeObjectForKey:", CFSTR("SimulateCrashProbability"));
  v1 = sub_100273494();
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
  {
    sub_10000A8E8();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Simulating crash\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
  }

  v3 = sub_100273494();
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_signpost_enabled(v4))
  {
    sub_10000A8E8();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Simulating crash", "{\"msg%{public}.0s\":\"Simulating crash\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
  }

  v5 = sub_100273494();
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    sub_10000A8E8();
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Simulating crash\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
  }

  result = abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreSafety/SafetyAlgorithms/CSSafetySOSStateMachine.mm", 456, "-[CSSafetySOSStateMachine notifySOSDaemon]");
  __break(1u);
  return result;
}

void CLKappaDeescalatorTriggerClusters::CLKappaDeescalatorTriggerClusters(CLKappaDeescalatorTriggerClusters *this)
{
  char *v2;

  *(_QWORD *)this = off_100347FF0;
  *((_BYTE *)this + 8) = 0;
  *((_BYTE *)this + 16) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 32) = 1;
  *((_DWORD *)this + 9) = 0;
  *((_BYTE *)this + 40) = 0;
  v2 = (char *)sub_100007088((_QWORD *)this + 6, "none");
  *(_QWORD *)this = &off_100361FD0;
  *((_BYTE *)this + 72) = 0;
  *((_BYTE *)this + 80) = 0;
  *((_BYTE *)this + 88) = 0;
  if (*((char *)this + 71) < 0)
  {
    *((_QWORD *)this + 7) = 5;
    v2 = (char *)*((_QWORD *)this + 6);
  }
  else
  {
    *((_BYTE *)this + 71) = 5;
  }
  strcpy(v2, "de-TC");
}

unint64_t CLKappaDeescalatorTriggerClusters::setupForceControls(CLKappaDeescalatorTriggerClusters *this)
{
  unint64_t result;

  *((_BYTE *)this + 40) = CLKappaDeescalator::shouldForceNoop(this, "ForceTriggerCluster");
  result = CLKappaDeescalator::shouldForceDeescalate(this, "ForceTriggerCluster");
  *((_DWORD *)this + 9) = result;
  return result;
}

uint64_t CLKappaDeescalatorTriggerClusters::assertReady(CLKappaDeescalatorTriggerClusters *this, uint64_t a2, const char *a3)
{
  uint64_t result;
  const char *v5;

  result = CLKappaDeescalator::assertCrashTimestamp(this, a2, a3);
  if (*((_BYTE *)this + 72))
    return CLKappaDeescalator::raiseUnless(*((unsigned __int8 *)this + 88), (BOOL)"[SC] triggerClusters condition met but missing window boundary", v5);
  return result;
}

float CLKappaDeescalatorTriggerClusters::updateWithTriggerClustersFeatures(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  float result;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  _DWORD v9[2];
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;
  __int16 v14;
  uint64_t v15;

  if (!*(_BYTE *)(a1 + 72) && *(_BYTE *)(a2 + 8) && *(_BYTE *)(a2 + 9) && !*(_BYTE *)(a2 + 10))
  {
    *(_BYTE *)(a1 + 72) = 1;
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 88) = 1;
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100362058);
    v3 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
    {
      v5 = *(unsigned __int8 *)(a2 + 8);
      v6 = *(unsigned __int8 *)(a2 + 9);
      v7 = *(unsigned __int8 *)(a2 + 10);
      v8 = *(_QWORD *)(a2 + 16);
      v9[0] = 67109888;
      v9[1] = v5;
      v10 = 1024;
      v11 = v6;
      v12 = 1024;
      v13 = v7;
      v14 = 2048;
      v15 = v8;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[SC] triggerClusters condition met - isTriggerCluster:%d, isClusterInBeginningOfDrive:%d, isBTHintDetected:%d, rightBoundaryTs:%llu", (uint8_t *)v9, 0x1Eu);
    }
  }
  return result;
}

uint64_t CLKappaDeescalatorTriggerClusters::deescalationCondition(uint64_t this, unint64_t a2, unint64_t a3)
{
  if (a2 <= a3)
    return this;
  else
    return 0;
}

uint64_t CLKappaDeescalatorTriggerClusters::onEvaluateBetweenMinAndMaxHoldDuration(CLKappaDeescalatorTriggerClusters *this)
{
  unint64_t v1;
  unint64_t *v2;

  if (*((_BYTE *)this + 88))
    v1 = *((_QWORD *)this + 10);
  else
    v1 = 0;
  v2 = (unint64_t *)((char *)this + 8);
  if (!*((_BYTE *)this + 16))
    v2 = (unint64_t *)&unk_1002EDD30;
  if (*v2 > v1 || *((_BYTE *)this + 72) == 0)
    return 0;
  else
    return 4;
}

uint64_t CLKappaDeescalatorTriggerClusters::onEvaluateAtBoundary(CLKappaDeescalatorTriggerClusters *this)
{
  unint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  BOOL v5;
  NSObject *v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  unint64_t v13;

  if (*((_BYTE *)this + 88))
    v2 = *((_QWORD *)this + 10);
  else
    v2 = 0;
  if (*((_BYTE *)this + 16))
    v3 = (unint64_t *)((char *)this + 8);
  else
    v3 = (unint64_t *)&unk_1002EDD30;
  v4 = *v3;
  if (*((_BYTE *)this + 72))
    v5 = v4 > v2;
  else
    v5 = 1;
  if (v5)
    return 0;
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100362058);
  v7 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    if (*((_BYTE *)this + 16))
      v8 = (uint64_t *)((char *)this + 8);
    else
      v8 = (uint64_t *)&unk_1002EDD30;
    v9 = *v8;
    v10 = 134218240;
    v11 = v9;
    v12 = 2048;
    v13 = v2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "[SC] TriggerCluster deescalated at boundary, crashTimestamp:%llu, deescalationBoundary:%llu", (uint8_t *)&v10, 0x16u);
  }
  return 4;
}

void sub_1002758D4(void **a1)
{
  CLKappaDeescalator::~CLKappaDeescalator(a1);
  operator delete();
}

void sub_1002758F8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "Alg");
  v2 = (void *)qword_100387318;
  qword_100387318 = (uint64_t)v1;

}

void KappaTriggerSample::KappaTriggerSample(KappaTriggerSample *this)
{
  *(_QWORD *)this = off_100362088;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 30) = 0;
}

{
  *(_QWORD *)this = off_100362088;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 30) = 0;
}

void KappaTriggerSample::~KappaTriggerSample(KappaTriggerSample *this)
{
  void *v2;

  *(_QWORD *)this = off_100362088;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

{
  KappaTriggerSample::~KappaTriggerSample(this);
  operator delete();
}

void KappaTriggerSample::KappaTriggerSample(KappaTriggerSample *this, const KappaTriggerSample *a2)
{
  char *v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;

  *(_QWORD *)this = off_100362088;
  *((_QWORD *)this + 1) = 0;
  v4 = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 30) = 0;
  v5 = *((_DWORD *)a2 + 30);
  if ((v5 & 4) != 0)
  {
    v7 = *((_QWORD *)a2 + 6);
    v6 = 4;
    *((_DWORD *)this + 30) = 4;
    *((_QWORD *)this + 6) = v7;
    v5 = *((_DWORD *)a2 + 30);
    if ((v5 & 0x2000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((v5 & 0x2000) != 0)
  {
LABEL_5:
    v8 = *((_DWORD *)a2 + 25);
    v6 |= 0x2000u;
    *((_DWORD *)this + 30) = v6;
    *((_DWORD *)this + 25) = v8;
    v5 = *((_DWORD *)a2 + 30);
  }
LABEL_6:
  if ((v5 & 0x8000) != 0)
  {
    v12 = *((_DWORD *)a2 + 27);
    v6 |= 0x8000u;
    *((_DWORD *)this + 30) = v6;
    *((_DWORD *)this + 27) = v12;
    v5 = *((_DWORD *)a2 + 30);
    if ((v5 & 0x400) == 0)
    {
LABEL_8:
      if ((v5 & 0x10000) == 0)
        goto LABEL_9;
      goto LABEL_29;
    }
  }
  else if ((v5 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  v13 = *((_DWORD *)a2 + 22);
  v6 |= 0x400u;
  *((_DWORD *)this + 30) = v6;
  *((_DWORD *)this + 22) = v13;
  v5 = *((_DWORD *)a2 + 30);
  if ((v5 & 0x10000) == 0)
  {
LABEL_9:
    if ((v5 & 8) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  v14 = *((_DWORD *)a2 + 28);
  v6 |= 0x10000u;
  *((_DWORD *)this + 30) = v6;
  *((_DWORD *)this + 28) = v14;
  v5 = *((_DWORD *)a2 + 30);
  if ((v5 & 8) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  v15 = *((_QWORD *)a2 + 7);
  v6 |= 8u;
  *((_DWORD *)this + 30) = v6;
  *((_QWORD *)this + 7) = v15;
  v5 = *((_DWORD *)a2 + 30);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  v16 = *((_DWORD *)a2 + 18);
  v6 |= 0x40u;
  *((_DWORD *)this + 30) = v6;
  *((_DWORD *)this + 18) = v16;
  v5 = *((_DWORD *)a2 + 30);
  if ((v5 & 0x200) == 0)
  {
LABEL_12:
    if ((v5 & 0x4000) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  v17 = *((_DWORD *)a2 + 21);
  v6 |= 0x200u;
  *((_DWORD *)this + 30) = v6;
  *((_DWORD *)this + 21) = v17;
  v5 = *((_DWORD *)a2 + 30);
  if ((v5 & 0x4000) == 0)
  {
LABEL_13:
    if ((v5 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  v18 = *((_DWORD *)a2 + 26);
  v6 |= 0x4000u;
  *((_DWORD *)this + 30) = v6;
  *((_DWORD *)this + 26) = v18;
  v5 = *((_DWORD *)a2 + 30);
  if ((v5 & 0x100) == 0)
  {
LABEL_14:
    if ((v5 & 0x10) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  v19 = *((_DWORD *)a2 + 20);
  v6 |= 0x100u;
  *((_DWORD *)this + 30) = v6;
  *((_DWORD *)this + 20) = v19;
  v5 = *((_DWORD *)a2 + 30);
  if ((v5 & 0x10) == 0)
  {
LABEL_15:
    if ((v5 & 0x20000) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  v20 = *((_DWORD *)a2 + 16);
  v6 |= 0x10u;
  *((_DWORD *)this + 30) = v6;
  *((_DWORD *)this + 16) = v20;
  v5 = *((_DWORD *)a2 + 30);
  if ((v5 & 0x20000) == 0)
  {
LABEL_16:
    if ((v5 & 0x20) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  v6 |= 0x20000u;
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)this + 30) = v6;
  v5 = *((_DWORD *)a2 + 30);
  if ((v5 & 0x20) == 0)
  {
LABEL_17:
    if ((v5 & 2) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_37:
  v21 = *((_DWORD *)a2 + 17);
  v6 |= 0x20u;
  *((_DWORD *)this + 30) = v6;
  *((_DWORD *)this + 17) = v21;
  if ((*((_DWORD *)a2 + 30) & 2) != 0)
  {
LABEL_18:
    v9 = *((_QWORD *)a2 + 5);
    *((_DWORD *)this + 30) = v6 | 2;
    *((_QWORD *)this + 5) = v9;
  }
LABEL_19:
  if (this != a2)
    sub_100020CE4(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  v10 = *((_DWORD *)a2 + 30);
  if ((v10 & 0x1000) != 0)
  {
    v22 = *((_DWORD *)a2 + 24);
    *((_DWORD *)this + 30) |= 0x1000u;
    *((_DWORD *)this + 24) = v22;
    v10 = *((_DWORD *)a2 + 30);
    if ((v10 & 0x80) == 0)
    {
LABEL_23:
      if ((v10 & 0x800) == 0)
        goto LABEL_24;
      goto LABEL_41;
    }
  }
  else if ((v10 & 0x80) == 0)
  {
    goto LABEL_23;
  }
  v23 = *((_DWORD *)a2 + 19);
  *((_DWORD *)this + 30) |= 0x80u;
  *((_DWORD *)this + 19) = v23;
  v10 = *((_DWORD *)a2 + 30);
  if ((v10 & 0x800) == 0)
  {
LABEL_24:
    if ((v10 & 1) == 0)
      return;
    goto LABEL_25;
  }
LABEL_41:
  v24 = *((_DWORD *)a2 + 23);
  *((_DWORD *)this + 30) |= 0x800u;
  *((_DWORD *)this + 23) = v24;
  if ((*((_DWORD *)a2 + 30) & 1) == 0)
    return;
LABEL_25:
  v11 = *((_QWORD *)a2 + 4);
  *((_DWORD *)this + 30) |= 1u;
  *((_QWORD *)this + 4) = v11;
}

KappaTriggerSample *KappaTriggerSample::operator=(KappaTriggerSample *a1, const KappaTriggerSample *a2)
{
  _BYTE v4[128];

  if (a1 != a2)
  {
    KappaTriggerSample::KappaTriggerSample((KappaTriggerSample *)v4, a2);
    swap(a1, (KappaTriggerSample *)v4);
    KappaTriggerSample::~KappaTriggerSample((KappaTriggerSample *)v4);
  }
  return a1;
}

double swap(KappaTriggerSample *a1, KappaTriggerSample *a2)
{
  int v2;
  double result;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *((_DWORD *)a1 + 30);
  *((_DWORD *)a1 + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v2;
  result = *((double *)a1 + 6);
  *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
  v4 = *((_DWORD *)a1 + 18);
  *((_DWORD *)a1 + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  v5 = *((_DWORD *)a1 + 21);
  *((_DWORD *)a1 + 21) = *((_DWORD *)a2 + 21);
  v6 = *((_DWORD *)a1 + 25);
  *((_DWORD *)a1 + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v6;
  v7 = *((_DWORD *)a1 + 27);
  *((_DWORD *)a1 + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v7;
  v8 = *((_DWORD *)a1 + 22);
  *((_DWORD *)a1 + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v8;
  v9 = *((_DWORD *)a1 + 28);
  *((_DWORD *)a1 + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v9;
  v10 = *((_QWORD *)a1 + 7);
  *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v10;
  LODWORD(v10) = *((_DWORD *)a1 + 26);
  *((_DWORD *)a1 + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v10;
  LODWORD(v10) = *((_DWORD *)a1 + 20);
  *((_DWORD *)a1 + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v10;
  LODWORD(v10) = *((_DWORD *)a1 + 16);
  *((_DWORD *)a1 + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v10;
  LODWORD(v10) = *((_DWORD *)a1 + 29);
  *((_DWORD *)a1 + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v10;
  LODWORD(v10) = *((_DWORD *)a1 + 17);
  *((_DWORD *)a1 + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v10;
  v11 = *((_QWORD *)a1 + 5);
  *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v11;
  v12 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v12;
  v13 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v13;
  LODWORD(v13) = *((_DWORD *)a1 + 24);
  *((_DWORD *)a1 + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v13;
  LODWORD(v13) = *((_DWORD *)a1 + 19);
  *((_DWORD *)a1 + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v13;
  LODWORD(v13) = *((_DWORD *)a1 + 23);
  *((_DWORD *)a1 + 23) = *((_DWORD *)a2 + 23);
  v14 = *((_QWORD *)a1 + 3);
  v15 = *((_QWORD *)a1 + 4);
  v16 = *((_QWORD *)a2 + 4);
  *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a1 + 4) = v16;
  *((double *)a2 + 6) = result;
  *((_DWORD *)a2 + 21) = v5;
  *((_DWORD *)a2 + 23) = v13;
  *((_QWORD *)a2 + 3) = v14;
  *((_QWORD *)a2 + 4) = v15;
  return result;
}

uint64_t KappaTriggerSample::KappaTriggerSample(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_100362088;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

KappaTriggerSample *KappaTriggerSample::operator=(KappaTriggerSample *a1, uint64_t a2)
{
  _BYTE v4[128];

  if (a1 != (KappaTriggerSample *)a2)
  {
    KappaTriggerSample::KappaTriggerSample((uint64_t)v4, a2);
    swap(a1, (KappaTriggerSample *)v4);
    KappaTriggerSample::~KappaTriggerSample((KappaTriggerSample *)v4);
  }
  return a1;
}

uint64_t KappaTriggerSample::formatText(KappaTriggerSample *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;
  float *v6;
  float *v7;
  float v8;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "basebandHint", *((_DWORD *)this + 16));
    v5 = *((_DWORD *)this + 30);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_26;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "btHint", *((_DWORD *)this + 17));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "companionAopTs", *((_QWORD *)this + 4));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "decel", *((float *)this + 18));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "enableMode", *((_DWORD *)this + 19));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x200) == 0)
      goto LABEL_8;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "gpsHint", *((_DWORD *)this + 20));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x200) == 0)
  {
LABEL_8:
    if ((v5 & 0x400) == 0)
      goto LABEL_9;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "impact", *((float *)this + 21));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x400) == 0)
  {
LABEL_9:
    if ((v5 & 2) == 0)
      goto LABEL_10;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "kappaArmedSeconds", *((_DWORD *)this + 22));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 2) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "lastValidImuTimestamp", *((_QWORD *)this + 5));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "martyArmedSeconds", *((_DWORD *)this + 23));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "martyPath", *((_DWORD *)this + 24));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 0x4000) == 0)
      goto LABEL_14;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "meta", *((_DWORD *)this + 25));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x4000) == 0)
  {
LABEL_14:
    if ((v5 & 4) == 0)
      goto LABEL_15;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "motionHint", *((_DWORD *)this + 26));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 4) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "now", *((double *)this + 6));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "path", *((_DWORD *)this + 27));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 8) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "rmsSN", *((_DWORD *)this + 28));
  if ((*((_DWORD *)this + 30) & 8) != 0)
LABEL_18:
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 7));
LABEL_19:
  v6 = (float *)*((_QWORD *)this + 1);
  v7 = (float *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "vehicleProbabilityLongTermMean", v8);
  }
  if ((*((_BYTE *)this + 122) & 2) != 0)
    PB::TextFormatter::format(a2, "wifiHint", *((_DWORD *)this + 29));
  return PB::TextFormatter::endObject(a2);
}

BOOL KappaTriggerSample::readFrom(KappaTriggerSample *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  char *v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char v70;
  unsigned int v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char v78;
  unsigned int v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char v94;
  unsigned int v95;
  uint64_t v96;
  unint64_t v97;
  char v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  char v102;
  unsigned int v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  char v110;
  unsigned int v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  char *v118;
  _DWORD *v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  int v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  char v132;
  unsigned int v133;
  uint64_t v134;
  unint64_t v135;
  char v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  char v140;
  unsigned int v141;
  uint64_t v142;
  unint64_t v143;
  char v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  char v148;
  unsigned int v149;
  uint64_t v150;
  unint64_t v151;
  char v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  char v156;
  unsigned int v157;
  uint64_t v158;
  unint64_t v159;
  char v160;
  char v161;
  unsigned int v162;
  unint64_t v163;
  char v164;
  char v165;
  unsigned int v166;
  unint64_t v167;
  char v168;
  char v169;
  unsigned int v170;
  unint64_t v171;
  char v172;
  char v173;
  unsigned int v174;
  unint64_t v175;
  char v176;
  char v177;
  unsigned int v178;
  unint64_t v179;
  char v180;
  char v181;
  unsigned int v182;
  unint64_t v183;
  char v184;
  char v185;
  unsigned int v186;
  unint64_t v187;
  char v188;
  char v189;
  unsigned int v190;
  unint64_t v191;
  char v192;
  char v193;
  unsigned int v194;
  unint64_t v195;
  char v196;
  char v197;
  unsigned int v198;
  unint64_t v199;
  char v200;
  char v201;
  unsigned int v202;
  unint64_t v203;
  char v204;
  unint64_t v205;
  char *v206;
  _DWORD *v207;
  char v208;
  unsigned int v209;
  unint64_t v210;
  char v211;
  char v212;
  unsigned int v213;
  unint64_t v214;
  char v215;
  char v216;
  unsigned int v217;
  unint64_t v218;
  char v219;
  char v220;
  unsigned int v221;
  unint64_t v222;
  char v223;
  char *v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  unint64_t v228;
  char *v229;
  char *v230;
  int v231;
  unint64_t v232;
  _BYTE v235[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 8);
    v9 = (char *)this + 24;
    while (1)
    {
      v10 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v16 = v12++ > 8;
        if (v16)
          goto LABEL_20;
      }
LABEL_21:
      v22 = v13 & 7;
      if (v22 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *((_DWORD *)this + 30) |= 4u;
          v23 = *((_QWORD *)a2 + 1);
          if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_348;
          *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v23);
          v24 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_351;
        case 2u:
          *((_DWORD *)this + 30) |= 0x2000u;
          v25 = *((_QWORD *)a2 + 1);
          v26 = *((_QWORD *)a2 + 2);
          v27 = *(_QWORD *)a2;
          if (v25 <= 0xFFFFFFFFFFFFFFF5 && v25 + 10 <= v26)
          {
            v28 = 0;
            v29 = 0;
            v30 = 0;
            do
            {
              v31 = v25 + 1;
              *((_QWORD *)a2 + 1) = v25 + 1;
              v32 = *(_BYTE *)(v27 + v25);
              v30 |= (unint64_t)(v32 & 0x7F) << v28;
              if ((v32 & 0x80) == 0)
                goto LABEL_295;
              v28 += 7;
              v25 = v31;
              v16 = v29++ > 8;
            }
            while (!v16);
LABEL_169:
            LODWORD(v30) = 0;
            goto LABEL_295;
          }
          v161 = 0;
          v162 = 0;
          v30 = 0;
          if (v26 <= v25)
            v26 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v26 == v25)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v163 = v25 + 1;
              v164 = *(_BYTE *)(v27 + v25);
              *((_QWORD *)a2 + 1) = v163;
              v30 |= (unint64_t)(v164 & 0x7F) << v161;
              if (v164 < 0)
              {
                v161 += 7;
                v25 = v163;
                v16 = v162++ > 8;
                if (v16)
                  goto LABEL_169;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v30) = 0;
            }
            break;
          }
LABEL_295:
          *((_DWORD *)this + 25) = v30;
          goto LABEL_352;
        case 3u:
          *((_DWORD *)this + 30) |= 0x8000u;
          v33 = *((_QWORD *)a2 + 1);
          v34 = *((_QWORD *)a2 + 2);
          v35 = *(_QWORD *)a2;
          if (v33 <= 0xFFFFFFFFFFFFFFF5 && v33 + 10 <= v34)
          {
            v36 = 0;
            v37 = 0;
            v38 = 0;
            do
            {
              v39 = v33 + 1;
              *((_QWORD *)a2 + 1) = v33 + 1;
              v40 = *(_BYTE *)(v35 + v33);
              v38 |= (unint64_t)(v40 & 0x7F) << v36;
              if ((v40 & 0x80) == 0)
                goto LABEL_298;
              v36 += 7;
              v33 = v39;
              v16 = v37++ > 8;
            }
            while (!v16);
LABEL_176:
            LODWORD(v38) = 0;
            goto LABEL_298;
          }
          v165 = 0;
          v166 = 0;
          v38 = 0;
          if (v34 <= v33)
            v34 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v34 == v33)
            {
              LODWORD(v38) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v167 = v33 + 1;
              v168 = *(_BYTE *)(v35 + v33);
              *((_QWORD *)a2 + 1) = v167;
              v38 |= (unint64_t)(v168 & 0x7F) << v165;
              if (v168 < 0)
              {
                v165 += 7;
                v33 = v167;
                v16 = v166++ > 8;
                if (v16)
                  goto LABEL_176;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v38) = 0;
            }
            break;
          }
LABEL_298:
          *((_DWORD *)this + 27) = v38;
          goto LABEL_352;
        case 4u:
          *((_DWORD *)this + 30) |= 0x400u;
          v41 = *((_QWORD *)a2 + 1);
          v42 = *((_QWORD *)a2 + 2);
          v43 = *(_QWORD *)a2;
          if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
          {
            v44 = 0;
            v45 = 0;
            v46 = 0;
            do
            {
              v47 = v41 + 1;
              *((_QWORD *)a2 + 1) = v41 + 1;
              v48 = *(_BYTE *)(v43 + v41);
              v46 |= (unint64_t)(v48 & 0x7F) << v44;
              if ((v48 & 0x80) == 0)
                goto LABEL_301;
              v44 += 7;
              v41 = v47;
              v16 = v45++ > 8;
            }
            while (!v16);
LABEL_183:
            LODWORD(v46) = 0;
            goto LABEL_301;
          }
          v169 = 0;
          v170 = 0;
          v46 = 0;
          if (v42 <= v41)
            v42 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v42 == v41)
            {
              LODWORD(v46) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v171 = v41 + 1;
              v172 = *(_BYTE *)(v43 + v41);
              *((_QWORD *)a2 + 1) = v171;
              v46 |= (unint64_t)(v172 & 0x7F) << v169;
              if (v172 < 0)
              {
                v169 += 7;
                v41 = v171;
                v16 = v170++ > 8;
                if (v16)
                  goto LABEL_183;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v46) = 0;
            }
            break;
          }
LABEL_301:
          *((_DWORD *)this + 22) = v46;
          goto LABEL_352;
        case 5u:
          *((_DWORD *)this + 30) |= 0x10000u;
          v49 = *((_QWORD *)a2 + 1);
          v50 = *((_QWORD *)a2 + 2);
          v51 = *(_QWORD *)a2;
          if (v49 <= 0xFFFFFFFFFFFFFFF5 && v49 + 10 <= v50)
          {
            v52 = 0;
            v53 = 0;
            v54 = 0;
            do
            {
              v55 = v49 + 1;
              *((_QWORD *)a2 + 1) = v49 + 1;
              v56 = *(_BYTE *)(v51 + v49);
              v54 |= (unint64_t)(v56 & 0x7F) << v52;
              if ((v56 & 0x80) == 0)
                goto LABEL_304;
              v52 += 7;
              v49 = v55;
              v16 = v53++ > 8;
            }
            while (!v16);
LABEL_190:
            LODWORD(v54) = 0;
            goto LABEL_304;
          }
          v173 = 0;
          v174 = 0;
          v54 = 0;
          if (v50 <= v49)
            v50 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v50 == v49)
            {
              LODWORD(v54) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v175 = v49 + 1;
              v176 = *(_BYTE *)(v51 + v49);
              *((_QWORD *)a2 + 1) = v175;
              v54 |= (unint64_t)(v176 & 0x7F) << v173;
              if (v176 < 0)
              {
                v173 += 7;
                v49 = v175;
                v16 = v174++ > 8;
                if (v16)
                  goto LABEL_190;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v54) = 0;
            }
            break;
          }
LABEL_304:
          *((_DWORD *)this + 28) = v54;
          goto LABEL_352;
        case 6u:
          *((_DWORD *)this + 30) |= 8u;
          v57 = *((_QWORD *)a2 + 1);
          v58 = *((_QWORD *)a2 + 2);
          v59 = *(_QWORD *)a2;
          if (v57 <= 0xFFFFFFFFFFFFFFF5 && v57 + 10 <= v58)
          {
            v60 = 0;
            v61 = 0;
            v62 = 0;
            do
            {
              v63 = v57 + 1;
              *((_QWORD *)a2 + 1) = v57 + 1;
              v64 = *(_BYTE *)(v59 + v57);
              v62 |= (unint64_t)(v64 & 0x7F) << v60;
              if ((v64 & 0x80) == 0)
                goto LABEL_307;
              v60 += 7;
              v57 = v63;
              v16 = v61++ > 8;
            }
            while (!v16);
LABEL_197:
            v62 = 0;
            goto LABEL_307;
          }
          v177 = 0;
          v178 = 0;
          v62 = 0;
          if (v58 <= v57)
            v58 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v58 == v57)
            {
              v62 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v179 = v57 + 1;
              v180 = *(_BYTE *)(v59 + v57);
              *((_QWORD *)a2 + 1) = v179;
              v62 |= (unint64_t)(v180 & 0x7F) << v177;
              if (v180 < 0)
              {
                v177 += 7;
                v57 = v179;
                v16 = v178++ > 8;
                if (v16)
                  goto LABEL_197;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v62 = 0;
            }
            break;
          }
LABEL_307:
          *((_QWORD *)this + 7) = v62;
          goto LABEL_352;
        case 7u:
          *((_DWORD *)this + 30) |= 0x40u;
          v65 = *((_QWORD *)a2 + 1);
          if (v65 > 0xFFFFFFFFFFFFFFFBLL || v65 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_348;
          *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v65);
          goto LABEL_350;
        case 8u:
          *((_DWORD *)this + 30) |= 0x200u;
          v66 = *((_QWORD *)a2 + 1);
          if (v66 > 0xFFFFFFFFFFFFFFFBLL || v66 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_348;
          *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v66);
          goto LABEL_350;
        case 9u:
          *((_DWORD *)this + 30) |= 0x4000u;
          v67 = *((_QWORD *)a2 + 1);
          v68 = *((_QWORD *)a2 + 2);
          v69 = *(_QWORD *)a2;
          if (v67 <= 0xFFFFFFFFFFFFFFF5 && v67 + 10 <= v68)
          {
            v70 = 0;
            v71 = 0;
            v72 = 0;
            do
            {
              v73 = v67 + 1;
              *((_QWORD *)a2 + 1) = v67 + 1;
              v74 = *(_BYTE *)(v69 + v67);
              v72 |= (unint64_t)(v74 & 0x7F) << v70;
              if ((v74 & 0x80) == 0)
                goto LABEL_310;
              v70 += 7;
              v67 = v73;
              v16 = v71++ > 8;
            }
            while (!v16);
LABEL_204:
            LODWORD(v72) = 0;
            goto LABEL_310;
          }
          v181 = 0;
          v182 = 0;
          v72 = 0;
          if (v68 <= v67)
            v68 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v68 == v67)
            {
              LODWORD(v72) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v183 = v67 + 1;
              v184 = *(_BYTE *)(v69 + v67);
              *((_QWORD *)a2 + 1) = v183;
              v72 |= (unint64_t)(v184 & 0x7F) << v181;
              if (v184 < 0)
              {
                v181 += 7;
                v67 = v183;
                v16 = v182++ > 8;
                if (v16)
                  goto LABEL_204;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v72) = 0;
            }
            break;
          }
LABEL_310:
          *((_DWORD *)this + 26) = v72;
          goto LABEL_352;
        case 0xAu:
          *((_DWORD *)this + 30) |= 0x100u;
          v75 = *((_QWORD *)a2 + 1);
          v76 = *((_QWORD *)a2 + 2);
          v77 = *(_QWORD *)a2;
          if (v75 <= 0xFFFFFFFFFFFFFFF5 && v75 + 10 <= v76)
          {
            v78 = 0;
            v79 = 0;
            v80 = 0;
            do
            {
              v81 = v75 + 1;
              *((_QWORD *)a2 + 1) = v75 + 1;
              v82 = *(_BYTE *)(v77 + v75);
              v80 |= (unint64_t)(v82 & 0x7F) << v78;
              if ((v82 & 0x80) == 0)
                goto LABEL_313;
              v78 += 7;
              v75 = v81;
              v16 = v79++ > 8;
            }
            while (!v16);
LABEL_211:
            LODWORD(v80) = 0;
            goto LABEL_313;
          }
          v185 = 0;
          v186 = 0;
          v80 = 0;
          if (v76 <= v75)
            v76 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v76 == v75)
            {
              LODWORD(v80) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v187 = v75 + 1;
              v188 = *(_BYTE *)(v77 + v75);
              *((_QWORD *)a2 + 1) = v187;
              v80 |= (unint64_t)(v188 & 0x7F) << v185;
              if (v188 < 0)
              {
                v185 += 7;
                v75 = v187;
                v16 = v186++ > 8;
                if (v16)
                  goto LABEL_211;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v80) = 0;
            }
            break;
          }
LABEL_313:
          *((_DWORD *)this + 20) = v80;
          goto LABEL_352;
        case 0xBu:
          *((_DWORD *)this + 30) |= 0x10u;
          v83 = *((_QWORD *)a2 + 1);
          v84 = *((_QWORD *)a2 + 2);
          v85 = *(_QWORD *)a2;
          if (v83 <= 0xFFFFFFFFFFFFFFF5 && v83 + 10 <= v84)
          {
            v86 = 0;
            v87 = 0;
            v88 = 0;
            do
            {
              v89 = v83 + 1;
              *((_QWORD *)a2 + 1) = v83 + 1;
              v90 = *(_BYTE *)(v85 + v83);
              v88 |= (unint64_t)(v90 & 0x7F) << v86;
              if ((v90 & 0x80) == 0)
                goto LABEL_316;
              v86 += 7;
              v83 = v89;
              v16 = v87++ > 8;
            }
            while (!v16);
LABEL_218:
            LODWORD(v88) = 0;
            goto LABEL_316;
          }
          v189 = 0;
          v190 = 0;
          v88 = 0;
          if (v84 <= v83)
            v84 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v84 == v83)
            {
              LODWORD(v88) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v191 = v83 + 1;
              v192 = *(_BYTE *)(v85 + v83);
              *((_QWORD *)a2 + 1) = v191;
              v88 |= (unint64_t)(v192 & 0x7F) << v189;
              if (v192 < 0)
              {
                v189 += 7;
                v83 = v191;
                v16 = v190++ > 8;
                if (v16)
                  goto LABEL_218;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v88) = 0;
            }
            break;
          }
LABEL_316:
          *((_DWORD *)this + 16) = v88;
          goto LABEL_352;
        case 0xCu:
          *((_DWORD *)this + 30) |= 0x20000u;
          v91 = *((_QWORD *)a2 + 1);
          v92 = *((_QWORD *)a2 + 2);
          v93 = *(_QWORD *)a2;
          if (v91 <= 0xFFFFFFFFFFFFFFF5 && v91 + 10 <= v92)
          {
            v94 = 0;
            v95 = 0;
            v96 = 0;
            do
            {
              v97 = v91 + 1;
              *((_QWORD *)a2 + 1) = v91 + 1;
              v98 = *(_BYTE *)(v93 + v91);
              v96 |= (unint64_t)(v98 & 0x7F) << v94;
              if ((v98 & 0x80) == 0)
                goto LABEL_319;
              v94 += 7;
              v91 = v97;
              v16 = v95++ > 8;
            }
            while (!v16);
LABEL_225:
            LODWORD(v96) = 0;
            goto LABEL_319;
          }
          v193 = 0;
          v194 = 0;
          v96 = 0;
          if (v92 <= v91)
            v92 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v92 == v91)
            {
              LODWORD(v96) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v195 = v91 + 1;
              v196 = *(_BYTE *)(v93 + v91);
              *((_QWORD *)a2 + 1) = v195;
              v96 |= (unint64_t)(v196 & 0x7F) << v193;
              if (v196 < 0)
              {
                v193 += 7;
                v91 = v195;
                v16 = v194++ > 8;
                if (v16)
                  goto LABEL_225;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v96) = 0;
            }
            break;
          }
LABEL_319:
          *((_DWORD *)this + 29) = v96;
          goto LABEL_352;
        case 0xDu:
          *((_DWORD *)this + 30) |= 0x20u;
          v99 = *((_QWORD *)a2 + 1);
          v100 = *((_QWORD *)a2 + 2);
          v101 = *(_QWORD *)a2;
          if (v99 <= 0xFFFFFFFFFFFFFFF5 && v99 + 10 <= v100)
          {
            v102 = 0;
            v103 = 0;
            v104 = 0;
            do
            {
              v105 = v99 + 1;
              *((_QWORD *)a2 + 1) = v99 + 1;
              v106 = *(_BYTE *)(v101 + v99);
              v104 |= (unint64_t)(v106 & 0x7F) << v102;
              if ((v106 & 0x80) == 0)
                goto LABEL_322;
              v102 += 7;
              v99 = v105;
              v16 = v103++ > 8;
            }
            while (!v16);
LABEL_232:
            LODWORD(v104) = 0;
            goto LABEL_322;
          }
          v197 = 0;
          v198 = 0;
          v104 = 0;
          if (v100 <= v99)
            v100 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v100 == v99)
            {
              LODWORD(v104) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v199 = v99 + 1;
              v200 = *(_BYTE *)(v101 + v99);
              *((_QWORD *)a2 + 1) = v199;
              v104 |= (unint64_t)(v200 & 0x7F) << v197;
              if (v200 < 0)
              {
                v197 += 7;
                v99 = v199;
                v16 = v198++ > 8;
                if (v16)
                  goto LABEL_232;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v104) = 0;
            }
            break;
          }
LABEL_322:
          *((_DWORD *)this + 17) = v104;
          goto LABEL_352;
        case 0xEu:
          *((_DWORD *)this + 30) |= 2u;
          v107 = *((_QWORD *)a2 + 1);
          v108 = *((_QWORD *)a2 + 2);
          v109 = *(_QWORD *)a2;
          if (v107 <= 0xFFFFFFFFFFFFFFF5 && v107 + 10 <= v108)
          {
            v110 = 0;
            v111 = 0;
            v112 = 0;
            do
            {
              v113 = v107 + 1;
              *((_QWORD *)a2 + 1) = v107 + 1;
              v114 = *(_BYTE *)(v109 + v107);
              v112 |= (unint64_t)(v114 & 0x7F) << v110;
              if ((v114 & 0x80) == 0)
                goto LABEL_325;
              v110 += 7;
              v107 = v113;
              v16 = v111++ > 8;
            }
            while (!v16);
LABEL_239:
            v112 = 0;
            goto LABEL_325;
          }
          v201 = 0;
          v202 = 0;
          v112 = 0;
          if (v108 <= v107)
            v108 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v108 == v107)
            {
              v112 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v203 = v107 + 1;
              v204 = *(_BYTE *)(v109 + v107);
              *((_QWORD *)a2 + 1) = v203;
              v112 |= (unint64_t)(v204 & 0x7F) << v201;
              if (v204 < 0)
              {
                v201 += 7;
                v107 = v203;
                v16 = v202++ > 8;
                if (v16)
                  goto LABEL_239;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v112 = 0;
            }
            break;
          }
LABEL_325:
          *((_QWORD *)this + 5) = v112;
          goto LABEL_352;
        case 0xFu:
          if (v22 == 2)
          {
            if ((PB::Reader::placeMark(a2, v235) & 1) != 0)
              return 0;
            v115 = *((_QWORD *)a2 + 1);
            v116 = *((_QWORD *)a2 + 2);
            while (v115 < v116 && !*((_BYTE *)a2 + 24))
            {
              v118 = (char *)*((_QWORD *)this + 2);
              v117 = *((_QWORD *)this + 3);
              if ((unint64_t)v118 >= v117)
              {
                v120 = (char *)*v8;
                v121 = (v118 - (_BYTE *)*v8) >> 2;
                v122 = v121 + 1;
                if ((unint64_t)(v121 + 1) >> 62)
                  goto LABEL_362;
                v123 = v117 - (_QWORD)v120;
                if (v123 >> 1 > v122)
                  v122 = v123 >> 1;
                if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFFCLL)
                  v124 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v124 = v122;
                if (v124)
                {
                  v125 = (char *)sub_100020E2C((uint64_t)v9, v124);
                  v120 = (char *)*((_QWORD *)this + 1);
                  v118 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v125 = 0;
                }
                v126 = &v125[4 * v121];
                *(_DWORD *)v126 = 0;
                v119 = v126 + 4;
                while (v118 != v120)
                {
                  v127 = *((_DWORD *)v118 - 1);
                  v118 -= 4;
                  *((_DWORD *)v126 - 1) = v127;
                  v126 -= 4;
                }
                *((_QWORD *)this + 1) = v126;
                *((_QWORD *)this + 2) = v119;
                *((_QWORD *)this + 3) = &v125[4 * v124];
                if (v120)
                  operator delete(v120);
              }
              else
              {
                *(_DWORD *)v118 = 0;
                v119 = v118 + 4;
              }
              *((_QWORD *)this + 2) = v119;
              v128 = *((_QWORD *)a2 + 1);
              if (v128 > 0xFFFFFFFFFFFFFFFBLL || v128 + 4 > *((_QWORD *)a2 + 2))
              {
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v119 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v128);
              v116 = *((_QWORD *)a2 + 2);
              v115 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v115;
            }
            PB::Reader::recallMark(a2, v235);
          }
          else
          {
            v206 = (char *)*((_QWORD *)this + 2);
            v205 = *((_QWORD *)this + 3);
            if ((unint64_t)v206 >= v205)
            {
              v224 = (char *)*v8;
              v225 = (v206 - (_BYTE *)*v8) >> 2;
              v226 = v225 + 1;
              if ((unint64_t)(v225 + 1) >> 62)
LABEL_362:
                sub_10000D5F8();
              v227 = v205 - (_QWORD)v224;
              if (v227 >> 1 > v226)
                v226 = v227 >> 1;
              if ((unint64_t)v227 >= 0x7FFFFFFFFFFFFFFCLL)
                v228 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v228 = v226;
              if (v228)
              {
                v229 = (char *)sub_100020E2C((uint64_t)v9, v228);
                v224 = (char *)*((_QWORD *)this + 1);
                v206 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v229 = 0;
              }
              v230 = &v229[4 * v225];
              *(_DWORD *)v230 = 0;
              v207 = v230 + 4;
              while (v206 != v224)
              {
                v231 = *((_DWORD *)v206 - 1);
                v206 -= 4;
                *((_DWORD *)v230 - 1) = v231;
                v230 -= 4;
              }
              *((_QWORD *)this + 1) = v230;
              *((_QWORD *)this + 2) = v207;
              *((_QWORD *)this + 3) = &v229[4 * v228];
              if (v224)
                operator delete(v224);
            }
            else
            {
              *(_DWORD *)v206 = 0;
              v207 = v206 + 4;
            }
            *((_QWORD *)this + 2) = v207;
            v232 = *((_QWORD *)a2 + 1);
            if (v232 <= 0xFFFFFFFFFFFFFFFBLL && v232 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v207 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v232);
LABEL_350:
              v24 = *((_QWORD *)a2 + 1) + 4;
LABEL_351:
              *((_QWORD *)a2 + 1) = v24;
            }
            else
            {
LABEL_348:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_352:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 0x10u:
          *((_DWORD *)this + 30) |= 0x1000u;
          v129 = *((_QWORD *)a2 + 1);
          v130 = *((_QWORD *)a2 + 2);
          v131 = *(_QWORD *)a2;
          if (v129 <= 0xFFFFFFFFFFFFFFF5 && v129 + 10 <= v130)
          {
            v132 = 0;
            v133 = 0;
            v134 = 0;
            do
            {
              v135 = v129 + 1;
              *((_QWORD *)a2 + 1) = v129 + 1;
              v136 = *(_BYTE *)(v131 + v129);
              v134 |= (unint64_t)(v136 & 0x7F) << v132;
              if ((v136 & 0x80) == 0)
                goto LABEL_328;
              v132 += 7;
              v129 = v135;
              v16 = v133++ > 8;
            }
            while (!v16);
LABEL_248:
            LODWORD(v134) = 0;
            goto LABEL_328;
          }
          v208 = 0;
          v209 = 0;
          v134 = 0;
          if (v130 <= v129)
            v130 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v130 == v129)
            {
              LODWORD(v134) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v210 = v129 + 1;
              v211 = *(_BYTE *)(v131 + v129);
              *((_QWORD *)a2 + 1) = v210;
              v134 |= (unint64_t)(v211 & 0x7F) << v208;
              if (v211 < 0)
              {
                v208 += 7;
                v129 = v210;
                v16 = v209++ > 8;
                if (v16)
                  goto LABEL_248;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v134) = 0;
            }
            break;
          }
LABEL_328:
          *((_DWORD *)this + 24) = v134;
          goto LABEL_352;
        case 0x11u:
          *((_DWORD *)this + 30) |= 0x80u;
          v137 = *((_QWORD *)a2 + 1);
          v138 = *((_QWORD *)a2 + 2);
          v139 = *(_QWORD *)a2;
          if (v137 <= 0xFFFFFFFFFFFFFFF5 && v137 + 10 <= v138)
          {
            v140 = 0;
            v141 = 0;
            v142 = 0;
            do
            {
              v143 = v137 + 1;
              *((_QWORD *)a2 + 1) = v137 + 1;
              v144 = *(_BYTE *)(v139 + v137);
              v142 |= (unint64_t)(v144 & 0x7F) << v140;
              if ((v144 & 0x80) == 0)
                goto LABEL_331;
              v140 += 7;
              v137 = v143;
              v16 = v141++ > 8;
            }
            while (!v16);
LABEL_255:
            LODWORD(v142) = 0;
            goto LABEL_331;
          }
          v212 = 0;
          v213 = 0;
          v142 = 0;
          if (v138 <= v137)
            v138 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v138 == v137)
            {
              LODWORD(v142) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v214 = v137 + 1;
              v215 = *(_BYTE *)(v139 + v137);
              *((_QWORD *)a2 + 1) = v214;
              v142 |= (unint64_t)(v215 & 0x7F) << v212;
              if (v215 < 0)
              {
                v212 += 7;
                v137 = v214;
                v16 = v213++ > 8;
                if (v16)
                  goto LABEL_255;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v142) = 0;
            }
            break;
          }
LABEL_331:
          *((_DWORD *)this + 19) = v142;
          goto LABEL_352;
        case 0x12u:
          *((_DWORD *)this + 30) |= 0x800u;
          v145 = *((_QWORD *)a2 + 1);
          v146 = *((_QWORD *)a2 + 2);
          v147 = *(_QWORD *)a2;
          if (v145 <= 0xFFFFFFFFFFFFFFF5 && v145 + 10 <= v146)
          {
            v148 = 0;
            v149 = 0;
            v150 = 0;
            do
            {
              v151 = v145 + 1;
              *((_QWORD *)a2 + 1) = v145 + 1;
              v152 = *(_BYTE *)(v147 + v145);
              v150 |= (unint64_t)(v152 & 0x7F) << v148;
              if ((v152 & 0x80) == 0)
                goto LABEL_334;
              v148 += 7;
              v145 = v151;
              v16 = v149++ > 8;
            }
            while (!v16);
LABEL_262:
            LODWORD(v150) = 0;
            goto LABEL_334;
          }
          v216 = 0;
          v217 = 0;
          v150 = 0;
          if (v146 <= v145)
            v146 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v146 == v145)
            {
              LODWORD(v150) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v218 = v145 + 1;
              v219 = *(_BYTE *)(v147 + v145);
              *((_QWORD *)a2 + 1) = v218;
              v150 |= (unint64_t)(v219 & 0x7F) << v216;
              if (v219 < 0)
              {
                v216 += 7;
                v145 = v218;
                v16 = v217++ > 8;
                if (v16)
                  goto LABEL_262;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v150) = 0;
            }
            break;
          }
LABEL_334:
          *((_DWORD *)this + 23) = v150;
          goto LABEL_352;
        case 0x13u:
          *((_DWORD *)this + 30) |= 1u;
          v153 = *((_QWORD *)a2 + 1);
          v154 = *((_QWORD *)a2 + 2);
          v155 = *(_QWORD *)a2;
          if (v153 <= 0xFFFFFFFFFFFFFFF5 && v153 + 10 <= v154)
          {
            v156 = 0;
            v157 = 0;
            v158 = 0;
            do
            {
              v159 = v153 + 1;
              *((_QWORD *)a2 + 1) = v153 + 1;
              v160 = *(_BYTE *)(v155 + v153);
              v158 |= (unint64_t)(v160 & 0x7F) << v156;
              if ((v160 & 0x80) == 0)
                goto LABEL_337;
              v156 += 7;
              v153 = v159;
              v16 = v157++ > 8;
            }
            while (!v16);
LABEL_269:
            v158 = 0;
            goto LABEL_337;
          }
          v220 = 0;
          v221 = 0;
          v158 = 0;
          if (v154 <= v153)
            v154 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v154 == v153)
            {
              v158 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v222 = v153 + 1;
              v223 = *(_BYTE *)(v155 + v153);
              *((_QWORD *)a2 + 1) = v222;
              v158 |= (unint64_t)(v223 & 0x7F) << v220;
              if (v223 < 0)
              {
                v220 += 7;
                v153 = v222;
                v16 = v221++ > 8;
                if (v16)
                  goto LABEL_269;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v158 = 0;
            }
            break;
          }
LABEL_337:
          *((_QWORD *)this + 4) = v158;
          goto LABEL_352;
        default:
          if ((PB::Reader::skip(a2, v13 >> 3, v22, 0) & 1) == 0)
            return 0;
          goto LABEL_352;
      }
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_21;
      v17 += 7;
      v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t KappaTriggerSample::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;
  float *v5;
  float *v6;
  float v7;
  int v8;

  v3 = this;
  v4 = *(_DWORD *)(this + 120);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 48), 1u);
    v4 = *(_DWORD *)(v3 + 120);
    if ((v4 & 0x2000) == 0)
    {
LABEL_3:
      if ((v4 & 0x8000) == 0)
        goto LABEL_4;
      goto LABEL_26;
    }
  }
  else if ((v4 & 0x2000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 100), 2u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x8000) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 108), 3u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x10000) == 0)
      goto LABEL_6;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 88), 4u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x10000) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0)
      goto LABEL_7;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 112), 5u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 56), 6u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 7u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x200) == 0)
  {
LABEL_9:
    if ((v4 & 0x4000) == 0)
      goto LABEL_10;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 8u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x4000) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 104), 9u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 80), 0xAu);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 0x20000) == 0)
      goto LABEL_13;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 64), 0xBu);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x20000) == 0)
  {
LABEL_13:
    if ((v4 & 0x20) == 0)
      goto LABEL_14;
LABEL_36:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 68), 0xDu);
    if ((*(_DWORD *)(v3 + 120) & 2) == 0)
      goto LABEL_16;
    goto LABEL_15;
  }
LABEL_35:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 116), 0xCu);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x20) != 0)
    goto LABEL_36;
LABEL_14:
  if ((v4 & 2) != 0)
LABEL_15:
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 40), 0xEu);
LABEL_16:
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7, 0xFu);
  }
  v8 = *(_DWORD *)(v3 + 120);
  if ((v8 & 0x1000) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 96), 0x10u);
    v8 = *(_DWORD *)(v3 + 120);
    if ((v8 & 0x80) == 0)
    {
LABEL_21:
      if ((v8 & 0x800) == 0)
        goto LABEL_22;
      goto LABEL_40;
    }
  }
  else if ((v8 & 0x80) == 0)
  {
    goto LABEL_21;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 76), 0x11u);
  v8 = *(_DWORD *)(v3 + 120);
  if ((v8 & 0x800) == 0)
  {
LABEL_22:
    if ((v8 & 1) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 32), 0x13u);
  }
LABEL_40:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 92), 0x12u);
  if ((*(_DWORD *)(v3 + 120) & 1) != 0)
    return PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 32), 0x13u);
  return this;
}

BOOL KappaTriggerSample::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  float *v4;
  float *v5;
  float *v6;
  _BOOL8 v7;

  v2 = *(_DWORD *)(a1 + 120);
  v3 = *(_DWORD *)(a2 + 120);
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(_DWORD *)(a1 + 100) != *(_DWORD *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(_DWORD *)(a1 + 108) != *(_DWORD *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(_DWORD *)(a1 + 104) != *(_DWORD *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(_DWORD *)(a1 + 116) != *(_DWORD *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  v5 = *(float **)(a1 + 8);
  v4 = *(float **)(a1 + 16);
  v6 = *(float **)(a2 + 8);
  if ((char *)v4 - (char *)v5 != *(_QWORD *)(a2 + 16) - (_QWORD)v6)
    return 0;
  while (v5 != v4)
  {
    if (*v5 != *v6)
      return 0;
    ++v5;
    ++v6;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  v7 = (*(_DWORD *)(a2 + 120) & 1) == 0;
  if ((v2 & 1) != 0)
    return (v3 & 1) != 0 && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32);
  return v7;
}

uint64_t KappaTriggerSample::hash_value(KappaTriggerSample *this)
{
  int v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;

  v2 = *((_DWORD *)this + 30);
  if ((v2 & 4) != 0)
  {
    v14 = *((double *)this + 6);
    if (v14 == 0.0)
      v14 = 0.0;
    v26 = v14;
    if ((v2 & 0x2000) != 0)
    {
LABEL_3:
      v25 = *((int *)this + 25);
      if ((v2 & 0x8000) != 0)
        goto LABEL_4;
      goto LABEL_26;
    }
  }
  else
  {
    v26 = 0.0;
    if ((v2 & 0x2000) != 0)
      goto LABEL_3;
  }
  v25 = 0;
  if ((v2 & 0x8000) != 0)
  {
LABEL_4:
    v24 = *((int *)this + 27);
    if ((v2 & 0x400) != 0)
      goto LABEL_5;
    goto LABEL_27;
  }
LABEL_26:
  v24 = 0;
  if ((v2 & 0x400) != 0)
  {
LABEL_5:
    v23 = *((int *)this + 22);
    if ((v2 & 0x10000) != 0)
      goto LABEL_6;
    goto LABEL_28;
  }
LABEL_27:
  v23 = 0;
  if ((v2 & 0x10000) != 0)
  {
LABEL_6:
    v22 = *((int *)this + 28);
    if ((v2 & 8) != 0)
      goto LABEL_7;
    goto LABEL_29;
  }
LABEL_28:
  v22 = 0;
  if ((v2 & 8) != 0)
  {
LABEL_7:
    v3 = *((_QWORD *)this + 7);
    if ((v2 & 0x40) != 0)
      goto LABEL_8;
LABEL_30:
    v5 = 0;
    if ((v2 & 0x200) != 0)
      goto LABEL_12;
LABEL_31:
    v7 = 0;
    if ((v2 & 0x4000) != 0)
      goto LABEL_16;
    goto LABEL_32;
  }
LABEL_29:
  v3 = 0;
  if ((v2 & 0x40) == 0)
    goto LABEL_30;
LABEL_8:
  v4 = *((float *)this + 18);
  if (v4 == 0.0)
    v5 = 0;
  else
    v5 = LODWORD(v4);
  if ((v2 & 0x200) == 0)
    goto LABEL_31;
LABEL_12:
  v6 = *((float *)this + 21);
  if (v6 == 0.0)
    v7 = 0;
  else
    v7 = LODWORD(v6);
  if ((v2 & 0x4000) != 0)
  {
LABEL_16:
    v8 = *((int *)this + 26);
    if ((v2 & 0x100) != 0)
      goto LABEL_17;
    goto LABEL_33;
  }
LABEL_32:
  v8 = 0;
  if ((v2 & 0x100) != 0)
  {
LABEL_17:
    v9 = *((int *)this + 20);
    if ((v2 & 0x10) != 0)
      goto LABEL_18;
    goto LABEL_34;
  }
LABEL_33:
  v9 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_18:
    v10 = *((int *)this + 16);
    if ((v2 & 0x20000) != 0)
      goto LABEL_19;
    goto LABEL_35;
  }
LABEL_34:
  v10 = 0;
  if ((v2 & 0x20000) != 0)
  {
LABEL_19:
    v11 = *((int *)this + 29);
    if ((v2 & 0x20) != 0)
      goto LABEL_20;
LABEL_36:
    v12 = 0;
    if ((v2 & 2) != 0)
      goto LABEL_21;
    goto LABEL_37;
  }
LABEL_35:
  v11 = 0;
  if ((v2 & 0x20) == 0)
    goto LABEL_36;
LABEL_20:
  v12 = *((int *)this + 17);
  if ((v2 & 2) != 0)
  {
LABEL_21:
    v13 = *((_QWORD *)this + 5);
    goto LABEL_38;
  }
LABEL_37:
  v13 = 0;
LABEL_38:
  v15 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  v16 = *((_DWORD *)this + 30);
  if ((v16 & 0x1000) != 0)
  {
    v17 = *((int *)this + 24);
    if ((v16 & 0x80) != 0)
    {
LABEL_40:
      v18 = *((int *)this + 19);
      if ((v16 & 0x800) != 0)
        goto LABEL_41;
LABEL_45:
      v19 = 0;
      if ((v16 & 1) != 0)
        goto LABEL_42;
LABEL_46:
      v20 = 0;
      return v25 ^ *(_QWORD *)&v26 ^ v24 ^ v23 ^ v22 ^ v3 ^ v5 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v17 ^ v15 ^ v18 ^ v19 ^ v20;
    }
  }
  else
  {
    v17 = 0;
    if ((v16 & 0x80) != 0)
      goto LABEL_40;
  }
  v18 = 0;
  if ((v16 & 0x800) == 0)
    goto LABEL_45;
LABEL_41:
  v19 = *((int *)this + 23);
  if ((v16 & 1) == 0)
    goto LABEL_46;
LABEL_42:
  v20 = *((_QWORD *)this + 4);
  return v25 ^ *(_QWORD *)&v26 ^ v24 ^ v23 ^ v22 ^ v3 ^ v5 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v17 ^ v15 ^ v18 ^ v19 ^ v20;
}

uint64_t CLKappaFeaturesAlgGPSResult::reset(uint64_t this)
{
  *(_BYTE *)(this + 8) = 0;
  *(_DWORD *)(this + 12) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_WORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_DWORD *)(this + 56) = 2143289344;
  *(_QWORD *)(this + 64) = 0;
  *(_DWORD *)(this + 72) = 2143289344;
  *(_QWORD *)(this + 80) = 0;
  *(_DWORD *)(this + 88) = 2143289344;
  *(_QWORD *)(this + 96) = 0;
  *(_DWORD *)(this + 104) = 0;
  *(_BYTE *)(this + 108) = 0;
  return this;
}

double CLKappaFeaturesAlgGPSResult::log(CLKappaFeaturesAlgGPSResult *this)
{
  return CLKappaFeaturesAlgGPSResult::logInternal(this, 1);
}

double CLKappaFeaturesAlgGPSResult::logInternal(CLKappaFeaturesAlgGPSResult *this, int a2)
{
  NSObject *v3;
  double result;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  float v19;
  int v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  double v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  double v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  double v38;
  __int16 v39;
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  double v44;
  __int16 v45;
  double v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  double v50;
  __int16 v51;
  double v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;

  if (a2)
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100362C80);
    v3 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *((_QWORD *)this + 4);
      v6 = *((unsigned __int8 *)this + 40);
      v7 = *((unsigned __int8 *)this + 41);
      v8 = *((_QWORD *)this + 6);
      v9 = *((float *)this + 14);
      v10 = *((_QWORD *)this + 8);
      v11 = *((float *)this + 18);
      v12 = *((_QWORD *)this + 10);
      v13 = *((float *)this + 22);
      v14 = *((float *)this + 4);
      v15 = *((float *)this + 5);
      v16 = *((float *)this + 6);
      v17 = *((float *)this + 7);
      v18 = *((_QWORD *)this + 12);
      v19 = *((float *)this + 26);
      v20 = *((unsigned __int8 *)this + 108);
      v21 = 134353408;
      v22 = v5;
      v23 = 1026;
      v24 = v6;
      v25 = 1026;
      v26 = v7;
      v27 = 2050;
      v28 = v8;
      v29 = 2050;
      v30 = v9;
      v31 = 2050;
      v32 = v10;
      v33 = 2050;
      v34 = v11;
      v35 = 2050;
      v36 = v12;
      v37 = 2050;
      v38 = v13;
      v39 = 2050;
      v40 = v14;
      v41 = 2050;
      v42 = v15;
      v43 = 2050;
      v44 = v16;
      v45 = 2050;
      v46 = v17;
      v47 = 2050;
      v48 = v18;
      v49 = 2050;
      v50 = v19;
      v51 = 2050;
      v52 = (float)(v19 / 0.44704);
      v53 = 1026;
      v54 = v20;
      v55 = 1026;
      v56 = 1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[GP] summary,A,%{public}llu,B,%{public}d,C,%{public}d,D,%{public}llu,E,%{public}f,F,%{public}llu,G,%{public}f,H,%{public}llu,I,%{public}f,config-1,%{public}f,config-2,%{public}f,config-3,%{public}f,config-4,%{public}f,debug-1,%{public}llu,debug-2%{public}f,debug-3,%{public}f,debug-4,%{public}d,debug-5,%{public}d\n", (uint8_t *)&v21, 0xA6u);
    }
  }
  return result;
}

void CLKappaFeaturesAlgGPS::CLKappaFeaturesAlgGPS(CLKappaFeaturesAlgGPS *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  __int128 v22;

  CLKappaAlgBlock::CLKappaAlgBlock(this, a2 + 1);
  v4 = *a2;
  *(_QWORD *)v5 = *a2;
  *(_QWORD *)(v5 + *(_QWORD *)(v4 - 152)) = a2[6];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 160)) = a2[7];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 168)) = a2[8];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 176)) = a2[9];
  *(_OWORD *)(v5 + 88) = 0u;
  v6 = v5 + 88;
  *(_QWORD *)(v5 + 32) = 0;
  *(_WORD *)(v5 + 40) = 1;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(int32x2_t *)(v5 + 72) = vdup_n_s32(0x7FC00000u);
  *(_DWORD *)(v5 + 80) = 2143289344;
  *(_OWORD *)(v5 + 104) = 0u;
  v7 = (char *)operator new(0x88uLL);
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = off_100362CB0;
  *((_QWORD *)v7 + 1) = 0;
  *((_OWORD *)v7 + 2) = 0u;
  *((_OWORD *)v7 + 3) = 0u;
  *((_OWORD *)v7 + 6) = 0u;
  *((_OWORD *)v7 + 7) = 0u;
  *((_OWORD *)v7 + 4) = 0u;
  *((_OWORD *)v7 + 5) = 0u;
  *((_QWORD *)v7 + 16) = 0;
  *((_QWORD *)v7 + 3) = &off_10034CCB8;
  *(_OWORD *)(v7 + 40) = xmmword_1002EDDA0;
  *((_DWORD *)v7 + 20) = 2143289344;
  *((_DWORD *)v7 + 24) = 2143289344;
  *((_DWORD *)v7 + 28) = 2143289344;
  *(_QWORD *)&v22 = v7 + 24;
  *((_QWORD *)&v22 + 1) = v7;
  sub_1000081AC((uint64_t)this + 8, &v22);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v20 = *((_QWORD *)this + 1);
  v21 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  sub_100277E70((uint64_t)&v20, &v22);
  sub_1000081AC(v6, &v22);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v21;
  if (v21)
  {
    v18 = (unint64_t *)&v21->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  (*(void (**)(CLKappaFeaturesAlgGPS *))(*(_QWORD *)this + 304))(this);
}

void sub_100277E44(_Unwind_Exception *a1)
{
  CLKappaAlgBlock *v1;
  uint64_t *v2;
  uint64_t v3;

  sub_10000A718((uint64_t)v1 + 104);
  sub_10000A718(v3);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, v2);
  _Unwind_Resume(a1);
}

void *sub_100277E70@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = *(void **)a1;
  if (result
  {
    v5 = *(_QWORD *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void CLKappaFeaturesAlgGPS::CLKappaFeaturesAlgGPS(CLKappaFeaturesAlgGPS *this)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;

  *(_QWORD *)this = off_100345D50;
  *((_QWORD *)this + 15) = off_100345DF8;
  *((_QWORD *)this + 16) = off_100345EC0;
  *((_QWORD *)this + 17) = off_100345F68;
  CLKappaAlgBlock::CLKappaAlgBlock(this, (uint64_t *)off_100362678);
  *(_QWORD *)v2 = off_100362178;
  *(_QWORD *)(v2 + 120) = off_100362418;
  *(_QWORD *)(v2 + 128) = off_100362550;
  *(_QWORD *)(v2 + 136) = off_100362628;
  *(_QWORD *)(v2 + 32) = 0;
  *(_WORD *)(v2 + 40) = 1;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(int32x2_t *)(v2 + 72) = vdup_n_s32(0x7FC00000u);
  *(_DWORD *)(v2 + 80) = 2143289344;
  *(_OWORD *)(v2 + 88) = 0u;
  v3 = v2 + 88;
  *(_OWORD *)(v2 + 104) = 0u;
  v4 = (char *)operator new(0x88uLL);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = off_100362CB0;
  *((_QWORD *)v4 + 1) = 0;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((_OWORD *)v4 + 7) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  *((_QWORD *)v4 + 16) = 0;
  *((_QWORD *)v4 + 3) = &off_10034CCB8;
  *(_OWORD *)(v4 + 40) = xmmword_1002EDDA0;
  *((_DWORD *)v4 + 20) = 2143289344;
  *((_DWORD *)v4 + 24) = 2143289344;
  *((_DWORD *)v4 + 28) = 2143289344;
  *(_QWORD *)&v19 = v4 + 24;
  *((_QWORD *)&v19 + 1) = v4;
  sub_1000081AC((uint64_t)this + 8, &v19);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v17 = *((_QWORD *)this + 1);
  v18 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_100277E70((uint64_t)&v17, &v19);
  sub_1000081AC(v3, &v19);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v18;
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  (*(void (**)(CLKappaFeaturesAlgGPS *))(*(_QWORD *)this + 304))(this);
}

void sub_100278108(_Unwind_Exception *a1)
{
  CLKappaAlgBlock *v1;
  uint64_t v2;

  sub_10000A718((uint64_t)v1 + 104);
  sub_10000A718(v2);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_100362678);
  _Unwind_Resume(a1);
}

uint64_t CLKappaFeaturesAlgGPS::reset(CLKappaFeaturesAlgGPS *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 11) + 24))(*((_QWORD *)this + 11));
  *((_BYTE *)this + 40) = 1;
  return result;
}

void CLKappaFeaturesAlgGPS::resetConfiguration(CLKappaFeaturesAlgGPS *this)
{
  float v2;
  int v3;
  int v4;
  int v5;
  void *v6;
  double v7;
  double v8;
  double v9;
  int v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  int v15;
  void *v16;
  double v17;
  double v18;
  double v19;
  int v20;
  void *v21;
  double v22;
  double v23;
  double v24;
  int v25;
  id v26;
  __int128 v27;

  v26 = (id)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration configBaseKey:forFeatureMode:](CSPersistentConfiguration, "configBaseKey:forFeatureMode:", "FeaturesAlgGPSConfig", *((unsigned __int8 *)this + 24)));
  if (*((_BYTE *)this + 24) == 2)
  {
    v2 = 6.0;
    v3 = 1099894125;
    v4 = 1074728301;
    v5 = 1050253722;
  }
  else
  {
    v3 = 1106925439;
    v4 = 1068214710;
    v5 = 1038174126;
    v2 = 1.01;
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v7) = 1096193060;
  LODWORD(v8) = 1106925439;
  LODWORD(v9) = v3;
  objc_msgSend(v6, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 0, v26, v7, v8, v9);
  LODWORD(v27) = v10;

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v12) = 1068214710;
  LODWORD(v13) = 1083116909;
  LODWORD(v14) = v4;
  objc_msgSend(v11, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 1, v26, v12, v13, v14);
  DWORD1(v27) = v15;

  v16 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v17) = 1036831949;
  LODWORD(v18) = 0.5;
  LODWORD(v19) = v5;
  objc_msgSend(v16, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 2, v26, v17, v18, v19);
  DWORD2(v27) = v20;

  v21 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v22) = 1.0;
  LODWORD(v23) = 20.0;
  *(float *)&v24 = v2;
  objc_msgSend(v21, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 3, v26, v22, v23, v24);
  HIDWORD(v27) = v25;

  CLKappaFeaturesAlgGPS::setConfig((uint64_t)this, &v27);
}

void sub_100278304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

double CLKappaFeaturesAlgGPS::setConfig(uint64_t a1, _OWORD *a2)
{
  NSObject *v3;
  double v4;
  NSObject *v5;
  double v6;
  NSObject *v7;
  double v8;
  NSObject *v9;
  double result;
  double v11;
  int v12;
  double v13;

  *(_OWORD *)(*(_QWORD *)(a1 + 88) + 16) = *a2;
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100362C80);
  v3 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v4 = *(float *)(*(_QWORD *)(a1 + 88) + 16);
    v12 = 134217984;
    v13 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[GPS] config-1,%f", (uint8_t *)&v12, 0xCu);
  }
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100362C80);
  v5 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v6 = *(float *)(*(_QWORD *)(a1 + 88) + 20);
    v12 = 134217984;
    v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[GPS] config-2,%f", (uint8_t *)&v12, 0xCu);
  }
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100362C80);
  v7 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v8 = *(float *)(*(_QWORD *)(a1 + 88) + 24);
    v12 = 134217984;
    v13 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "[GPS] config-3,%f", (uint8_t *)&v12, 0xCu);
  }
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100362C80);
  v9 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v11 = *(float *)(*(_QWORD *)(a1 + 88) + 28);
    v12 = 134217984;
    v13 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "[GPS] config-4,%f", (uint8_t *)&v12, 0xCu);
  }
  return result;
}

uint64_t CLKappaFeaturesAlgGPS::feedGPS(uint64_t this, const CSSPUGps_Struct *a2)
{
  uint64_t v2;
  unint64_t timestamp;
  float speedMS;
  float v5;
  float v6;
  _BOOL4 v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  int v14;

  v2 = *(_QWORD *)(this + 88);
  timestamp = a2->timestamp;
  speedMS = a2->speedMS;
  v6 = *(float *)(v2 + 16);
  v5 = *(float *)(v2 + 20);
  v7 = a2->speedMS < v6 && a2->speedMS >= v5;
  v8 = *(unsigned __int8 *)(this + 40);
  if (v8 == 1)
  {
    *(_BYTE *)(this + 41) = 0;
    if (speedMS < v6)
    {
      v9 = *(_QWORD *)(this + 32);
      *(_QWORD *)(this + 48) = v9;
      *(_DWORD *)(this + 72) = 2143289344;
LABEL_12:
      LOBYTE(v8) = 1;
      goto LABEL_17;
    }
    LOBYTE(v8) = 2;
    *(_BYTE *)(this + 40) = 2;
    *(_QWORD *)(this + 48) = timestamp;
    *(float *)(this + 72) = speedMS;
LABEL_16:
    v9 = timestamp;
    goto LABEL_17;
  }
  if (v8 != 2)
  {
    v9 = *(_QWORD *)(this + 48);
    goto LABEL_17;
  }
  if (speedMS >= v6)
  {
    *(_QWORD *)(this + 48) = timestamp;
    *(float *)(this + 72) = speedMS;
    LOBYTE(v8) = 2;
    goto LABEL_16;
  }
  v9 = *(_QWORD *)(this + 48);
  v10 = v9 + (unint64_t)((float)(*(float *)(v2 + 24) + *(float *)(v2 + 28)) * 1000000.0);
  if (v7 && timestamp <= v10)
  {
    LOBYTE(v8) = 2;
    goto LABEL_17;
  }
  if ((((speedMS >= v5) ^ v7) & 1) == 0 && timestamp > v10)
  {
    LOBYTE(v8) = 1;
    *(_BYTE *)(this + 40) = 1;
    v9 = *(_QWORD *)(this + 32);
    *(_QWORD *)(this + 48) = v9;
    *(_DWORD *)(this + 72) = 2143289344;
    goto LABEL_17;
  }
  LOBYTE(v8) = 2;
  if (speedMS < v5 && timestamp <= v10)
  {
    *(_WORD *)(this + 40) = 257;
    v14 = *(_DWORD *)(this + 72);
    *(_QWORD *)(this + 56) = v9;
    *(_QWORD *)(this + 64) = timestamp;
    *(_DWORD *)(this + 76) = v14;
    *(float *)(this + 80) = speedMS;
    goto LABEL_12;
  }
LABEL_17:
  v11 = *(_DWORD *)(this + 76);
  *(_DWORD *)(v2 + 56) = *(_DWORD *)(this + 72);
  *(_QWORD *)(v2 + 32) = timestamp;
  v12 = *(_BYTE *)(this + 41);
  *(_BYTE *)(v2 + 40) |= v12;
  *(_BYTE *)(v2 + 41) = v8;
  *(_QWORD *)(v2 + 48) = v9;
  v13 = *(_QWORD *)(this + 64);
  *(_QWORD *)(v2 + 64) = *(_QWORD *)(this + 56);
  *(_DWORD *)(v2 + 72) = v11;
  *(_QWORD *)(v2 + 80) = v13;
  *(_DWORD *)(v2 + 88) = *(_DWORD *)(this + 80);
  *(_QWORD *)(v2 + 96) = timestamp;
  *(float *)(v2 + 104) = speedMS;
  *(_BYTE *)(v2 + 108) = v12;
  return this;
}

uint64_t `virtual thunk to'CLKappaFeaturesAlgGPS::feedGPS(CLKappaFeaturesAlgGPS *this, const CSSPUGps_Struct *a2)
{
  return CLKappaFeaturesAlgGPS::feedGPS((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 96), a2);
}

uint64_t CLKappaFeaturesAlgGPS::epochFinalize(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(this + 88) + 32) = a2;
  return this;
}

_QWORD *`virtual thunk to'CLKappaFeaturesAlgGPS::epochFinalize(_QWORD *this, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*this - 48) + 88) + 32) = a2;
  return this;
}

uint64_t CLKappaFeaturesAlgGPS::epochReset(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(this + 88);
  *(_QWORD *)(v1 + 32) = 0;
  *(_WORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  *(_DWORD *)(v1 + 56) = 2143289344;
  *(_QWORD *)(v1 + 64) = 0;
  *(_DWORD *)(v1 + 72) = 2143289344;
  *(_QWORD *)(v1 + 80) = 0;
  *(_DWORD *)(v1 + 88) = 2143289344;
  v2 = *(_QWORD *)(this + 88);
  *(_QWORD *)(v2 + 96) = 0;
  *(_DWORD *)(v2 + 104) = 0;
  *(_BYTE *)(v2 + 108) = 0;
  return this;
}

_QWORD *`virtual thunk to'CLKappaFeaturesAlgGPS::epochReset(_QWORD *this)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (char *)this + *(_QWORD *)(*this - 56);
  v2 = *((_QWORD *)v1 + 11);
  *(_QWORD *)(v2 + 32) = 0;
  *(_WORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_DWORD *)(v2 + 56) = 2143289344;
  *(_QWORD *)(v2 + 64) = 0;
  *(_DWORD *)(v2 + 72) = 2143289344;
  *(_QWORD *)(v2 + 80) = 0;
  *(_DWORD *)(v2 + 88) = 2143289344;
  v3 = *((_QWORD *)v1 + 11);
  *(_QWORD *)(v3 + 96) = 0;
  *(_DWORD *)(v3 + 104) = 0;
  *(_BYTE *)(v3 + 108) = 0;
  return this;
}

void sub_1002787A0(CLKappaAlgBlock *a1)
{
  *(_QWORD *)a1 = off_100362178;
  *((_QWORD *)a1 + 15) = off_100362418;
  *((_QWORD *)a1 + 16) = off_100362550;
  *((_QWORD *)a1 + 17) = off_100362628;
  sub_10000A718((uint64_t)a1 + 104);
  sub_10000A718((uint64_t)a1 + 88);
  CLKappaAlgBlock::~CLKappaAlgBlock(a1, (uint64_t *)off_100362678);
}

void sub_1002787F8(CLKappaAlgBlock *a1)
{
  *(_QWORD *)a1 = off_100362178;
  *((_QWORD *)a1 + 15) = off_100362418;
  *((_QWORD *)a1 + 16) = off_100362550;
  *((_QWORD *)a1 + 17) = off_100362628;
  sub_10000A718((uint64_t)a1 + 104);
  sub_10000A718((uint64_t)a1 + 88);
  CLKappaAlgBlock::~CLKappaAlgBlock(a1, (uint64_t *)off_100362678);
  operator delete();
}

void sub_100278868(_QWORD *a1)
{
  CLKappaAlgBlock *v1;

  v1 = (CLKappaAlgBlock *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  *(_QWORD *)v1 = off_100362178;
  *((_QWORD *)v1 + 15) = off_100362418;
  *((_QWORD *)v1 + 16) = off_100362550;
  *((_QWORD *)v1 + 17) = off_100362628;
  sub_10000A718((uint64_t)v1 + 104);
  sub_10000A718((uint64_t)v1 + 88);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_100362678);
}

void sub_1002788C8(_QWORD *a1)
{
  CLKappaAlgBlock *v1;

  v1 = (CLKappaAlgBlock *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  *(_QWORD *)v1 = off_100362178;
  *((_QWORD *)v1 + 15) = off_100362418;
  *((_QWORD *)v1 + 16) = off_100362550;
  *((_QWORD *)v1 + 17) = off_100362628;
  sub_10000A718((uint64_t)v1 + 104);
  sub_10000A718((uint64_t)v1 + 88);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_100362678);
  operator delete();
}

void sub_10027893C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "Alg");
  v2 = (void *)qword_100387318;
  qword_100387318 = (uint64_t)v1;

}

void sub_10027896C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100362CB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100278980(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100362CB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1002789B4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void CLSafetyDeescalatorJointDetection::CLSafetyDeescalatorJointDetection(CLSafetyDeescalatorJointDetection *this)
{
  char *v2;

  *(_QWORD *)this = off_100347FF0;
  *((_BYTE *)this + 8) = 0;
  *((_BYTE *)this + 16) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 32) = 1;
  *((_DWORD *)this + 9) = 0;
  *((_BYTE *)this + 40) = 0;
  v2 = (char *)sub_100007088((_QWORD *)this + 6, "none");
  *(_QWORD *)this = &off_100362D00;
  *((_WORD *)this + 36) = 0;
  *((_BYTE *)this + 76) = 0;
  *((_BYTE *)this + 80) = 0;
  *((_BYTE *)this + 88) = 0;
  *((_BYTE *)this + 136) = 0;
  *((_BYTE *)this + 144) = 0;
  *((_BYTE *)this + 160) = 0;
  *((_BYTE *)this + 168) = 0;
  *((_BYTE *)this + 172) = 0;
  if (*((char *)this + 71) < 0)
  {
    *((_QWORD *)this + 7) = 5;
    v2 = (char *)*((_QWORD *)this + 6);
  }
  else
  {
    *((_BYTE *)this + 71) = 5;
  }
  strcpy(v2, "de-JD");
  *((_BYTE *)this + 84) = 1;
}

unint64_t CLSafetyDeescalatorJointDetection::setupForceControls(CLSafetyDeescalatorJointDetection *this)
{
  unint64_t result;

  *((_BYTE *)this + 40) = CLKappaDeescalator::shouldForceNoop(this, "ForceJointDetection");
  result = CLKappaDeescalator::shouldForceDeescalate(this, "ForceJointDetection");
  *((_DWORD *)this + 9) = result;
  return result;
}

uint64_t CLSafetyDeescalatorJointDetection::assertReady(CLSafetyDeescalatorJointDetection *this, uint64_t a2, const char *a3)
{
  const char *v4;
  const char *v5;
  const char *v6;

  CLKappaDeescalator::raiseUnless(*((unsigned __int8 *)this + 160), (BOOL)"[JDD] has not received local JD output", a3);
  CLKappaDeescalator::raiseUnless(1, (BOOL)"[JDD] internal enum has been changed", v4);
  CLKappaDeescalator::raiseUnless(*((unsigned __int8 *)this + 73), (BOOL)"[JDD] missing enabled config", v5);
  return CLKappaDeescalator::raiseUnless(*((unsigned __int8 *)this + 80), (BOOL)"[JDD] missing threshold", v6);
}

void CLSafetyDeescalatorJointDetection::setConfig(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v3;
  int v4;
  double v5;
  _DWORD v6[2];
  __int16 v7;
  double v8;

  *(_WORD *)(a1 + 72) = *a2 | 0x100;
  *(_DWORD *)(a1 + 76) = *((_DWORD *)a2 + 1);
  *(_BYTE *)(a1 + 80) = 1;
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100362D88);
  v3 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
  {
    v4 = *(unsigned __int8 *)(a1 + 73);
    if (*(_BYTE *)(a1 + 73))
      v4 = *(unsigned __int8 *)(a1 + 72);
    if (*(_BYTE *)(a1 + 80))
      v5 = *(float *)(a1 + 76);
    else
      v5 = 0.0;
    v6[0] = 67109376;
    v6[1] = v4;
    v7 = 2048;
    v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[JDD] config-1,%u,config-2,%f", (uint8_t *)v6, 0x12u);
  }
}

id sub_100278C3C()
{
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100362D88);
  return (id)qword_100387318;
}

void CLSafetyDeescalatorJointDetection::updateWithRemoteSample(CLSafetyDeescalatorJointDetection *this, const CSRemoteSample_Struct *a2)
{
  unint64_t v4;
  unint64_t lastRealTriggerTimestamp;
  unint64_t v6;
  NSObject *v7;
  const char *v8;
  unint64_t v9;
  unint64_t v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  int v14;
  __int128 v15;
  __int128 v16;
  NSObject *v17;
  int v18;
  int mode;
  unint64_t v20;
  char v21;
  unint64_t v22;
  NSObject *v23;
  const char *v24;
  int v25;
  __int128 v26;
  __int128 v27;
  CLSafetyDeescalatorJointDetection *v28;
  int v29;
  NSObject *v30;
  NSObject *v31;
  id v32;
  NSObject *v33;
  _BOOL4 v34;
  id v35;
  NSObject *v36;
  int v37;
  __int128 v38;
  __int128 v39;
  int v40;
  __int128 v41;
  __int128 v42;
  int v43;
  _BYTE v44[10];
  unint64_t v45;

  v4 = a2->receivedAtTimestamp - a2->createdAtTimestamp;
  lastRealTriggerTimestamp = a2->lastRealTriggerTimestamp;
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100362D88);
  v6 = v4 + lastRealTriggerTimestamp;
  v7 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v9 = a2->lastRealTriggerTimestamp;
    if (v9)
      v10 = v6;
    else
      v10 = 0;
    v43 = 134218240;
    *(_QWORD *)v44 = v9;
    *(_WORD *)&v44[8] = 2048;
    v45 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "[JDD] received remote sample: [remote=%llu local=%llu]", (uint8_t *)&v43, 0x16u);
  }
  if (*((_BYTE *)this + 84) == 2)
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100362D88);
    v11 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v43) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "[JDD] already latched to sure-real", (uint8_t *)&v43, 2u);
    }
    return;
  }
  if (*((unsigned __int8 *)this + 32) != a2->mode)
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100362D88);
    v17 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
    {
      v18 = *((unsigned __int8 *)this + 32);
      mode = a2->mode;
      v43 = 67109376;
      *(_DWORD *)v44 = v18;
      *(_WORD *)&v44[4] = 1024;
      *(_DWORD *)&v44[6] = mode;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "[JDD] got sample for other mode me=%u other=%u: UNSURE", (uint8_t *)&v43, 0xEu);
    }
    *((_BYTE *)this + 84) = 1;
    return;
  }
  CLKappaDeescalator::raiseUnless(1, (BOOL)"[JDD] Precondition not met: different modes", v8);
  if (*((_BYTE *)this + 84) != 3)
  {
    *((_BYTE *)this + 84) = 1;
    CLKappaDeescalator::raiseUnless(1, (BOOL)"[JDD] Precondition not met: not unsure", v12);
    v20 = CLSafetyDeescalatorJointDetection::sameEventRegionBoundary(this);
    if (v21)
    {
      v22 = v20;
      if (a2->receivedAtTimestamp < v20)
      {
        if (qword_100387310 != -1)
          dispatch_once(&qword_100387310, &stru_100362D88);
        v23 = qword_100387318;
        if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v43) = 0;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "[JDD] RS was inside 'same event region'", (uint8_t *)&v43, 2u);
        }
        v25 = *((unsigned __int8 *)this + 136);
        v27 = *(_OWORD *)&a2->createdAtTimestamp;
        v26 = *(_OWORD *)&a2->lastRealTriggerTimestamp;
        *(_OWORD *)((char *)this + 88) = *(_OWORD *)&a2->mode;
        *(_OWORD *)((char *)this + 104) = v27;
        *(_OWORD *)((char *)this + 120) = v26;
        if (!v25)
          *((_BYTE *)this + 136) = 1;
        v28 = this;
        v29 = 0;
LABEL_54:
        CLSafetyDeescalatorJointDetection::verifySameEvent(v28, v29, v24);
        return;
      }
      if (qword_100387310 != -1)
        dispatch_once(&qword_100387310, &stru_100362D88);
      v31 = qword_100387318;
      if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v43) = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "[JDD] RS was outside 'same event region'", (uint8_t *)&v43, 2u);
      }
      if (!a2->lastRealTriggerTimestamp)
      {
        v35 = sub_100278C3C();
        v36 = objc_claimAutoreleasedReturnValue(v35);
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v43) = 0;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "[JDD] RS did not have a trigger: no blind spot", (uint8_t *)&v43, 2u);
        }

        goto LABEL_51;
      }
      v32 = sub_100278C3C();
      v33 = objc_claimAutoreleasedReturnValue(v32);
      v34 = os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG);
      if (v6 < v22)
      {
        if (v34)
        {
          LOWORD(v43) = 0;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "[JDD] RS had a trigger but no blind spot", (uint8_t *)&v43, 2u);
        }

LABEL_51:
        v37 = *((unsigned __int8 *)this + 136);
        v39 = *(_OWORD *)&a2->createdAtTimestamp;
        v38 = *(_OWORD *)&a2->lastRealTriggerTimestamp;
        *(_OWORD *)((char *)this + 88) = *(_OWORD *)&a2->mode;
        *(_OWORD *)((char *)this + 104) = v39;
        *(_OWORD *)((char *)this + 120) = v38;
        if (!v37)
          *((_BYTE *)this + 136) = 1;
        v28 = this;
        v29 = 1;
        goto LABEL_54;
      }
      if (v34)
      {
        LOWORD(v43) = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "[JDD] RS had a trigger that could have a blind spot: UNSURE", (uint8_t *)&v43, 2u);
      }

    }
    else
    {
      if (qword_100387310 != -1)
        dispatch_once(&qword_100387310, &stru_100362D88);
      v30 = qword_100387318;
      if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v43) = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "[JDD] 'same event region' is undefined: UNSURE", (uint8_t *)&v43, 2u);
      }
    }
    *((_BYTE *)this + 84) = 1;
    v40 = *((unsigned __int8 *)this + 136);
    v42 = *(_OWORD *)&a2->createdAtTimestamp;
    v41 = *(_OWORD *)&a2->lastRealTriggerTimestamp;
    *(_OWORD *)((char *)this + 88) = *(_OWORD *)&a2->mode;
    *(_OWORD *)((char *)this + 104) = v42;
    *(_OWORD *)((char *)this + 120) = v41;
    if (v40)
      return;
    goto LABEL_59;
  }
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100362D88);
  v13 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v43) = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "[JDD] new remote sample does not change our SURE-NONE state", (uint8_t *)&v43, 2u);
  }
  v14 = *((unsigned __int8 *)this + 136);
  v16 = *(_OWORD *)&a2->createdAtTimestamp;
  v15 = *(_OWORD *)&a2->lastRealTriggerTimestamp;
  *(_OWORD *)((char *)this + 88) = *(_OWORD *)&a2->mode;
  *(_OWORD *)((char *)this + 104) = v16;
  *(_OWORD *)((char *)this + 120) = v15;
  if (!v14)
LABEL_59:
    *((_BYTE *)this + 136) = 1;
}

unint64_t CLSafetyDeescalatorJointDetection::sameEventRegionBoundary(CLSafetyDeescalatorJointDetection *this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  if (!*((_BYTE *)this + 160))
  {
    v1 = 0;
    goto LABEL_6;
  }
  v1 = *((_QWORD *)this + 19);
  if (!v1)
  {
LABEL_6:
    v3 = 0;
    return v3 | v1;
  }
  if (*((_BYTE *)this + 80))
    v2 = (unint64_t)(float)(*((float *)this + 19) * 1000000.0);
  else
    v2 = 0;
  v1 += v2;
  v3 = v1 & 0xFFFFFFFFFFFFFF00;
  v1 = v1;
  return v3 | v1;
}

void CLSafetyDeescalatorJointDetection::verifySameEvent(CLSafetyDeescalatorJointDetection *this, int a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  float v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  NSObject *v14;
  char v15;
  NSObject *v16;
  uint32_t v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  uint32_t v21;
  uint64_t v22;
  int v23;
  double v24;
  __int16 v25;
  double v26;

  CLKappaDeescalator::raiseUnless(*((unsigned __int8 *)this + 84) == 1, (BOOL)"[JDD] precondition failed: verify same event but not unsure", a3);
  if (!*((_BYTE *)this + 160))
  {
    if (!a2)
    {
      if (qword_100387310 != -1)
        dispatch_once(&qword_100387310, &stru_100362D88);
      v12 = qword_100387318;
      if (!os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
        return;
      LOWORD(v23) = 0;
      v13 = "[JDD] verifying same event: no JD feature (hold, UNSURE)";
      goto LABEL_62;
    }
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100362D88);
    v10 = qword_100387318;
    if (!os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
      goto LABEL_40;
    LOWORD(v23) = 0;
    v11 = "[JDD] verifying same event: no JD feature (SURE-NONE)";
LABEL_38:
    v16 = v10;
    v17 = 2;
    goto LABEL_39;
  }
  v5 = *((_QWORD *)this + 19);
  if (!v5)
  {
    if (!a2)
    {
      if (qword_100387310 != -1)
        dispatch_once(&qword_100387310, &stru_100362D88);
      v12 = qword_100387318;
      if (!os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
        return;
      LOWORD(v23) = 0;
      v13 = "[JDD] verifying same event: no local real trigger (hold, UNSURE)";
      goto LABEL_62;
    }
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100362D88);
    v10 = qword_100387318;
    if (!os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
      goto LABEL_40;
    LOWORD(v23) = 0;
    v11 = "[JDD] verifying same event: no local real trigger (SURE-NONE)";
    goto LABEL_38;
  }
  if (!*((_BYTE *)this + 136))
  {
    if (a2)
    {
      if (qword_100387310 != -1)
        dispatch_once(&qword_100387310, &stru_100362D88);
      v14 = qword_100387318;
      if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v23) = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "[JDD] verifying same event: no communication (UNSURE)", (uint8_t *)&v23, 2u);
      }
      v15 = 1;
      goto LABEL_41;
    }
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100362D88);
    v12 = qword_100387318;
    if (!os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
      return;
    LOWORD(v23) = 0;
    v13 = "[JDD] verifying same event: no communication (hold, UNSURE)";
    goto LABEL_62;
  }
  v6 = *((_QWORD *)this + 15);
  if (!v6)
  {
    if (a2)
    {
      if (qword_100387310 != -1)
        dispatch_once(&qword_100387310, &stru_100362D88);
      v10 = qword_100387318;
      if (!os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
        goto LABEL_40;
      LOWORD(v23) = 0;
      v11 = "[JDD] verifying same event: no remote real trigger (SURE-NONE)";
      goto LABEL_38;
    }
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100362D88);
    v12 = qword_100387318;
    if (!os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
      return;
    LOWORD(v23) = 0;
    v13 = "[JDD] verifying same event: no remote real trigger (hold)";
LABEL_62:
    v20 = v12;
    v21 = 2;
LABEL_63:
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, v13, (uint8_t *)&v23, v21);
    return;
  }
  v7 = v5 + *((_QWORD *)this + 13) - (v6 + *((_QWORD *)this + 14));
  if (v7 < 0)
    v7 = -v7;
  v8 = (float)v7 / 1000000.0;
  if (*((_BYTE *)this + 80))
    v9 = *((float *)this + 19);
  else
    v9 = 0.0;
  *((float *)this + 42) = v8;
  *((_BYTE *)this + 172) = 1;
  if (v8 < v9)
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100362D88);
    v18 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
    {
      v23 = 134218240;
      v24 = v8;
      v25 = 2048;
      v26 = v9;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "[JDD] verifying same event: SURE-REAL (%f < %f)", (uint8_t *)&v23, 0x16u);
    }
    *((_BYTE *)this + 84) = 2;
    return;
  }
  if (a2)
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100362D88);
    v19 = qword_100387318;
    if (!os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
      goto LABEL_40;
    v23 = 134218240;
    v24 = v8;
    v25 = 2048;
    v26 = v9;
    v11 = "[JDD] verifying same event: SURE-NONE (%f >= %f)";
    v16 = v19;
    v17 = 22;
LABEL_39:
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, v11, (uint8_t *)&v23, v17);
LABEL_40:
    v15 = 3;
LABEL_41:
    *((_BYTE *)this + 84) = v15;
    return;
  }
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100362D88);
  v22 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v23 = 134218240;
    v24 = v8;
    v25 = 2048;
    v26 = v9;
    v13 = "[JDD] verifying same event: (hold, UNSURE) (%f >= %f)";
    v20 = v22;
    v21 = 22;
    goto LABEL_63;
  }
}

void CLSafetyDeescalatorJointDetection::updateWithJointDetectionOutput(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  _OWORD *v9;
  NSObject *v10;
  int v11;
  int v12;
  uint64_t v13;

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100362D88);
  v4 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v6 = *(_QWORD *)(a2 + 8);
    v12 = 134217984;
    v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[JDD] received local lastRealTriggerTimestamp: %llu", (uint8_t *)&v12, 0xCu);
  }
  if (*(_BYTE *)(a1 + 84) != 2)
  {
    v9 = (_OWORD *)(a1 + 144);
    if (*(_BYTE *)(a1 + 160))
    {
      if (*(_QWORD *)(a2 + 8) == *(_QWORD *)(a1 + 152))
      {
        if (qword_100387310 != -1)
          dispatch_once(&qword_100387310, &stru_100362D88);
        v10 = qword_100387318;
        if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v12) = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[JDD]: lack of new local trigger does not change our mind", (uint8_t *)&v12, 2u);
        }
        v11 = *(unsigned __int8 *)(a1 + 160);
        *v9 = *(_OWORD *)a2;
        if (!v11)
          goto LABEL_19;
        return;
      }
      *(_BYTE *)(a1 + 84) = 1;
      *v9 = *(_OWORD *)a2;
    }
    else
    {
      *(_BYTE *)(a1 + 84) = 1;
      *v9 = *(_OWORD *)a2;
      *(_BYTE *)(a1 + 160) = 1;
    }
    CLSafetyDeescalatorJointDetection::verifySameEvent((CLSafetyDeescalatorJointDetection *)a1, 0, v5);
    return;
  }
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100362D88);
  v7 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v12) = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "[JDD] already latched to sure-real", (uint8_t *)&v12, 2u);
  }
  v8 = *(unsigned __int8 *)(a1 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)a2;
  if (!v8)
LABEL_19:
    *(_BYTE *)(a1 + 160) = 1;
}

uint64_t CLSafetyDeescalatorJointDetection::onEvaluateAtMinHoldDuration(CLSafetyDeescalatorJointDetection *this)
{
  NSObject *v2;
  int v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v11;
  __int16 v12;
  uint8_t v13[2];
  uint8_t v14[16];
  __int16 v15;
  uint8_t v16[2];
  uint8_t buf[16];

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100362D88);
  v2 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "[JDD] evaluating at min hold duration", buf, 2u);
  }
  if (!*((_BYTE *)this + 73) || !*((_BYTE *)this + 72))
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100362D88);
    v7 = qword_100387318;
    if (!os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
      return 6;
    *(_WORD *)v16 = 0;
    v8 = "[JDD] disabled";
    v9 = v16;
    goto LABEL_18;
  }
  v3 = *((unsigned __int8 *)this + 84);
  if (v3 != 3)
  {
    if (v3 == 2)
    {
      if (qword_100387310 != -1)
        dispatch_once(&qword_100387310, &stru_100362D88);
      v4 = qword_100387318;
      if (!os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
        return 1;
      *(_WORD *)v13 = 0;
      v5 = "[JDD] final - no-decision: SURE-REAL";
      v6 = v13;
      goto LABEL_29;
    }
    if (v3 == 1)
    {
      if (qword_100387310 != -1)
        dispatch_once(&qword_100387310, &stru_100362D88);
      v4 = qword_100387318;
      if (!os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
        return 1;
      v15 = 0;
      v5 = "[JDD] final - no-decision: UNSURE";
      v6 = (uint8_t *)&v15;
LABEL_29:
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, v5, v6, 2u);
      return 1;
    }
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100362D88);
    v7 = qword_100387318;
    if (!os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
      return 6;
    v12 = 0;
    v8 = "[JDD] final - no-decision";
    v9 = (uint8_t *)&v12;
LABEL_18:
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, v8, v9, 2u);
    return 6;
  }
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100362D88);
  v11 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "[JDD] final - de-escalate: SURE-NONE", v14, 2u);
  }
  return 4;
}

void sub_100279C64(void **a1)
{
  CLKappaDeescalator::~CLKappaDeescalator(a1);
  operator delete();
}

void sub_100279C88(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "Alg");
  v2 = (void *)qword_100387318;
  qword_100387318 = (uint64_t)v1;

}

double CLMartyEstimatesAlgUncoupledCrashResult::reset(CLMartyEstimatesAlgUncoupledCrashResult *this)
{
  double result;

  *((_BYTE *)this + 8) = 0;
  *((_DWORD *)this + 3) = 0;
  *((_WORD *)this + 24) = 0;
  *((_BYTE *)this + 50) = 0;
  *((_QWORD *)this + 7) = 0;
  result = 0.0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 0;
  return result;
}

double CLMartyEstimatesAlgUncoupledCrashResult::log(CLMartyEstimatesAlgUncoupledCrashResult *this)
{
  NSObject *v2;
  double result;
  uint64_t v4;
  int v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  int v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  int v24;
  uint64_t v25;
  __int16 v26;
  int v27;
  __int16 v28;
  double v29;
  __int16 v30;
  double v31;
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  double v39;
  __int16 v40;
  double v41;
  __int16 v42;
  double v43;
  __int16 v44;
  double v45;
  __int16 v46;
  int v47;
  __int16 v48;
  double v49;
  __int16 v50;
  double v51;
  __int16 v52;
  double v53;
  __int16 v54;
  double v55;
  __int16 v56;
  double v57;
  __int16 v58;
  double v59;
  __int16 v60;
  double v61;
  __int16 v62;
  double v63;

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100363960);
  v2 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *((_QWORD *)this + 7);
    v5 = *((unsigned __int8 *)this + 48);
    v6 = *((float *)this + 16);
    v7 = *((float *)this + 17);
    v8 = *((float *)this + 18);
    v9 = *((float *)this + 19);
    v10 = *((float *)this + 22);
    v11 = *((float *)this + 23);
    v12 = *((float *)this + 24);
    v13 = *((float *)this + 25);
    v14 = *((float *)this + 26);
    v15 = *((unsigned __int8 *)this + 50);
    v16 = *((float *)this + 20);
    v17 = *((float *)this + 21);
    v18 = *((float *)this + 27);
    v19 = *((float *)this + 28);
    v20 = *((float *)this + 29);
    v21 = *((float *)this + 30);
    v22 = *((float *)this + 31);
    v23 = *((float *)this + 32);
    v24 = 134353920;
    v25 = v4;
    v26 = 1026;
    v27 = v5;
    v28 = 2050;
    v29 = v6;
    v30 = 2050;
    v31 = v7;
    v32 = 2050;
    v33 = v8;
    v34 = 2050;
    v35 = v9;
    v36 = 2050;
    v37 = v10;
    v38 = 2050;
    v39 = v11;
    v40 = 2050;
    v41 = v12;
    v42 = 2050;
    v43 = v13;
    v44 = 2050;
    v45 = v14;
    v46 = 1026;
    v47 = v15;
    v48 = 2050;
    v49 = v16;
    v50 = 2050;
    v51 = v17;
    v52 = 2050;
    v53 = v18;
    v54 = 2050;
    v55 = v19;
    v56 = 2050;
    v57 = v20;
    v58 = 2050;
    v59 = v21;
    v60 = 2050;
    v61 = v22;
    v62 = 2050;
    v63 = v23;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[M][UC] AlgBlock summary,A,%{public}llu,B,%{public}d,C,%{public}f,D,%{public}f,E,%{public}f,F,%{public}f,G,%{public}f,H,%{public}f,I,%{public}f,J,%{public}f,K,%{public}f,L,%{public}d,M,%{public}f,N,%{public}f,O,%{public}f,P,%{public}f,Q,%{public}f,R,%{public}f,S,%{public}f,T,%{public}f\n", (uint8_t *)&v24, 0xC2u);
  }
  return result;
}

void CLMartyEstimatesAlgUncoupledCrash::CLMartyEstimatesAlgUncoupledCrash(CLMartyEstimatesAlgUncoupledCrash *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  __int128 v23;

  CLKappaAlgBlock::CLKappaAlgBlock(this, a2 + 1);
  v4 = *a2;
  *(_QWORD *)v5 = *a2;
  *(_QWORD *)(v5 + *(_QWORD *)(v4 - 152)) = a2[6];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 160)) = a2[7];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 168)) = a2[8];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 176)) = a2[9];
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  v6 = v5 + 32;
  *(_QWORD *)&v7 = 0x80000000800000;
  *((_QWORD *)&v7 + 1) = 0x80000000800000;
  *(_OWORD *)(v5 + 48) = v7;
  *(_OWORD *)(v5 + 64) = xmmword_1002EDE70;
  *(_OWORD *)(v5 + 80) = xmmword_1002EDE80;
  *(_QWORD *)(v5 + 96) = 0x80000000800000;
  v8 = (char *)operator new(0xA0uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = off_100363990;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_OWORD *)v8 + 7) = 0u;
  *((_QWORD *)v8 + 3) = &off_10034D378;
  *((_OWORD *)v8 + 8) = 0u;
  *((_OWORD *)v8 + 9) = 0u;
  *(_OWORD *)(v8 + 40) = xmmword_1002EDE90;
  *((_QWORD *)v8 + 7) = 0x42AC000041980000;
  *((_DWORD *)v8 + 16) = 1097859072;
  *(_QWORD *)&v23 = v8 + 24;
  *((_QWORD *)&v23 + 1) = v8;
  sub_1000081AC((uint64_t)this + 8, &v23);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v21 = *((_QWORD *)this + 1);
  v22 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  sub_10027A100((uint64_t)&v21, &v23);
  sub_1000081AC(v6, &v23);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v22;
  if (v22)
  {
    v19 = (unint64_t *)&v22->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  (*(void (**)(CLMartyEstimatesAlgUncoupledCrash *))(*(_QWORD *)this + 304))(this);
}

void sub_10027A0DC(_Unwind_Exception *a1)
{
  CLKappaAlgBlock *v1;
  uint64_t *v2;
  uint64_t v3;

  sub_10000A718(v3);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, v2);
  _Unwind_Resume(a1);
}

void *sub_10027A100@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = *(void **)a1;
  if (result
  {
    v5 = *(_QWORD *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void CLMartyEstimatesAlgUncoupledCrash::CLMartyEstimatesAlgUncoupledCrash(CLMartyEstimatesAlgUncoupledCrash *this)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  __int128 v20;

  *(_QWORD *)this = off_100345D50;
  *((_QWORD *)this + 13) = off_100345DF8;
  *((_QWORD *)this + 14) = off_100345EC0;
  *((_QWORD *)this + 15) = off_100345F68;
  CLKappaAlgBlock::CLKappaAlgBlock(this, (uint64_t *)off_100363358);
  *(_QWORD *)v2 = off_100362E58;
  *(_QWORD *)(v2 + 104) = off_1003630F8;
  *(_QWORD *)(v2 + 112) = off_100363230;
  *(_QWORD *)(v2 + 32) = 0;
  v3 = v2 + 32;
  *(_QWORD *)(v2 + 120) = off_100363308;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)&v4 = 0x80000000800000;
  *((_QWORD *)&v4 + 1) = 0x80000000800000;
  *(_OWORD *)(v2 + 48) = v4;
  *(_OWORD *)(v2 + 64) = xmmword_1002EDE70;
  *(_OWORD *)(v2 + 80) = xmmword_1002EDE80;
  *(_QWORD *)(v2 + 96) = 0x80000000800000;
  v5 = (char *)operator new(0xA0uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_100363990;
  *((_OWORD *)v5 + 2) = 0u;
  *((_OWORD *)v5 + 3) = 0u;
  *((_OWORD *)v5 + 4) = 0u;
  *((_OWORD *)v5 + 5) = 0u;
  *((_OWORD *)v5 + 6) = 0u;
  *((_OWORD *)v5 + 7) = 0u;
  *((_QWORD *)v5 + 3) = &off_10034D378;
  *((_OWORD *)v5 + 8) = 0u;
  *((_OWORD *)v5 + 9) = 0u;
  *(_OWORD *)(v5 + 40) = xmmword_1002EDE90;
  *((_QWORD *)v5 + 7) = 0x42AC000041980000;
  *((_DWORD *)v5 + 16) = 1097859072;
  *(_QWORD *)&v20 = v5 + 24;
  *((_QWORD *)&v20 + 1) = v5;
  sub_1000081AC((uint64_t)this + 8, &v20);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v18 = *((_QWORD *)this + 1);
  v19 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  sub_10027A100((uint64_t)&v18, &v20);
  sub_1000081AC(v3, &v20);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v19;
  if (v19)
  {
    v16 = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  (*(void (**)(CLMartyEstimatesAlgUncoupledCrash *))(*(_QWORD *)this + 304))(this);
}

void sub_10027A39C(_Unwind_Exception *a1)
{
  CLKappaAlgBlock *v1;
  uint64_t v2;

  sub_10000A718(v2);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_100363358);
  _Unwind_Resume(a1);
}

void CLMartyEstimatesAlgUncoupledCrash::resetConfiguration(CLMartyEstimatesAlgUncoupledCrash *this)
{
  void *v2;
  double v3;
  double v4;
  double v5;
  int v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  int v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  int v16;
  void *v17;
  double v18;
  double v19;
  double v20;
  int v21;
  void *v22;
  double v23;
  double v24;
  double v25;
  int v26;
  void *v27;
  double v28;
  double v29;
  double v30;
  int v31;
  void *v32;
  double v33;
  double v34;
  double v35;
  int v36;
  id v37;
  __int128 v38;
  int v39;
  int v40;
  int v41;

  v37 = (id)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration configBaseKey:forFeatureMode:](CSPersistentConfiguration, "configBaseKey:forFeatureMode:", "EstimatesAlgUCConfig", *((unsigned __int8 *)this + 24)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v3) = 1091829760;
  LODWORD(v4) = 0.5;
  LODWORD(v5) = 1193033728;
  objc_msgSend(v2, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 0, v37, v4, v5, v3);
  LODWORD(v38) = v6;

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v8) = 1117782016;
  LODWORD(v9) = 1108082688;
  LODWORD(v10) = 0;
  objc_msgSend(v7, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 1, v37, v10, v8, v9);
  DWORD1(v38) = v11;

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v13) = -1138501878;
  LODWORD(v14) = 1034147594;
  LODWORD(v15) = 5.0;
  objc_msgSend(v12, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 2, v37, v13, v15, v14);
  DWORD2(v38) = v16;

  v17 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v18) = 1133903872;
  LODWORD(v19) = 0;
  LODWORD(v20) = 1159479296;
  objc_msgSend(v17, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 3, v37, v19, v20, v18);
  HIDWORD(v38) = v21;

  v22 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v23) = 0;
  LODWORD(v24) = 19.0;
  LODWORD(v25) = 1159479296;
  objc_msgSend(v22, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 4, v37, v23, v25, v24);
  v39 = v26;

  v27 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v28) = 1118568448;
  LODWORD(v29) = 0;
  LODWORD(v30) = 1159479296;
  objc_msgSend(v27, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 5, v37, v29, v30, v28);
  v40 = v31;

  v32 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v33) = 0.5;
  LODWORD(v34) = 15.0;
  LODWORD(v35) = 1193033728;
  objc_msgSend(v32, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 6, v37, v33, v35, v34);
  v41 = v36;

  CLMartyEstimatesAlgUncoupledCrash::setConfig((uint64_t)this, &v38);
}

void sub_10027A5B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

double CLMartyEstimatesAlgUncoupledCrash::setConfig(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;
  NSObject *v5;
  double result;
  float *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  int v15;
  double v16;
  __int16 v17;
  double v18;
  __int16 v19;
  double v20;
  __int16 v21;
  double v22;
  __int16 v23;
  double v24;
  __int16 v25;
  double v26;
  __int16 v27;
  double v28;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *a2;
  *(_OWORD *)(v3 + 28) = *(__int128 *)((char *)a2 + 12);
  *(_OWORD *)(v3 + 16) = v4;
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100363960);
  v5 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(float **)(a1 + 32);
    v8 = v7[4];
    v9 = v7[5];
    v10 = v7[6];
    v11 = v7[7];
    v12 = v7[8];
    v13 = v7[9];
    v14 = v7[10];
    v15 = 134219520;
    v16 = v8;
    v17 = 2048;
    v18 = v9;
    v19 = 2048;
    v20 = v10;
    v21 = 2048;
    v22 = v11;
    v23 = 2048;
    v24 = v12;
    v25 = 2048;
    v26 = v13;
    v27 = 2048;
    v28 = v14;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[M][UC] config-1,%f,config-2,%f,config-3,%f,config-4,%f,config-5,%f,config-6,%f,config-7,%f", (uint8_t *)&v15, 0x48u);
  }
  return result;
}

uint64_t CLMartyEstimatesAlgUncoupledCrash::reset(CLMartyEstimatesAlgUncoupledCrash *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 24))(*((_QWORD *)this + 4));
}

double CLMartyEstimatesAlgUncoupledCrash::epochFinalize(CLMartyEstimatesAlgUncoupledCrash *this, uint64_t a2)
{
  uint64_t v2;
  float v3;
  float v4;
  float v5;
  _BOOL4 v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  BOOL v13;
  float v14;
  _BOOL4 v15;
  float v16;
  float v17;
  BOOL v18;
  float v19;
  float v20;
  float v21;
  BOOL v22;
  int v23;
  double result;

  v2 = *((_QWORD *)this + 4);
  v3 = *(float *)(v2 + 32);
  v4 = *(float *)(v2 + 36);
  v5 = *((float *)this + 21);
  v6 = v5 < v3 && *((float *)this + 23) < v3;
  v7 = *(float *)(v2 + 20);
  v8 = *(float *)(v2 + 24);
  v9 = *(float *)(v2 + 28);
  v10 = *((float *)this + 14);
  v11 = *((float *)this + 16);
  v12 = *((float *)this + 22);
  v13 = v12 >= v4 || *((float *)this + 24) >= v4;
  v14 = *(float *)(v2 + 40);
  v15 = v10 < v7;
  v16 = *((float *)this + 25);
  v17 = *((float *)this + 15);
  if (v11 < v9)
    v15 = 1;
  if (v17 < v8)
    v15 = 1;
  v18 = !v15 && !v6 && v16 >= v14 && v13;
  v19 = *(float *)(v2 + 16);
  v20 = *((float *)this + 12);
  v21 = *((float *)this + 17);
  v22 = v17 >= *((float *)this + 19);
  if (v10 < *((float *)this + 18) || v11 < *((float *)this + 20))
    v22 = 0;
  *(_QWORD *)(v2 + 56) = a2;
  if (v20 < v19)
    v18 = 0;
  *(_BYTE *)(v2 + 48) = v18;
  if (v20 < v21)
    v22 = 0;
  *(_BYTE *)(v2 + 49) = v18;
  *(float *)(v2 + 64) = v19;
  *(float *)(v2 + 68) = v7;
  *(float *)(v2 + 72) = v8;
  *(float *)(v2 + 76) = v9;
  v23 = *((_DWORD *)this + 13);
  *(float *)(v2 + 88) = v20;
  *(_DWORD *)(v2 + 92) = v23;
  *(float *)(v2 + 96) = v10;
  *(float *)(v2 + 100) = v17;
  *(_BYTE *)(v2 + 50) = v22;
  *(float *)(v2 + 80) = v3;
  *(float *)(v2 + 84) = v4;
  *(float *)(v2 + 104) = v11;
  *(float *)(v2 + 108) = v5;
  *(float *)(v2 + 112) = v12;
  result = *(double *)((char *)this + 92);
  *(double *)(v2 + 116) = result;
  *(float *)(v2 + 124) = v16;
  *(float *)(v2 + 128) = v14;
  return result;
}

double `virtual thunk to'CLMartyEstimatesAlgUncoupledCrash::epochFinalize(CLMartyEstimatesAlgUncoupledCrash *this, uint64_t a2)
{
  return CLMartyEstimatesAlgUncoupledCrash::epochFinalize((CLMartyEstimatesAlgUncoupledCrash *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)), a2);
}

double CLMartyEstimatesAlgUncoupledCrash::feedFeatures(uint64_t a1, uint64_t a2)
{
  double result;
  __int128 v3;

  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 12);
  result = *(double *)(a1 + 84);
  *(_QWORD *)&v3 = *(_QWORD *)(a2 + 44);
  *((double *)&v3 + 1) = result;
  *(_OWORD *)(a1 + 84) = v3;
  return result;
}

double `virtual thunk to'CLMartyEstimatesAlgUncoupledCrash::feedFeatures(_QWORD *a1, uint64_t a2)
{
  char *v2;
  double result;
  __int128 v4;

  v2 = (char *)a1 + *(_QWORD *)(*a1 - 88);
  *((_DWORD *)v2 + 16) = *(_DWORD *)(a2 + 12);
  result = *(double *)(v2 + 84);
  *(_QWORD *)&v4 = *(_QWORD *)(a2 + 44);
  *((double *)&v4 + 1) = result;
  *(_OWORD *)(v2 + 84) = v4;
  return result;
}

float CLMartyEstimatesAlgUncoupledCrash::feedFeatures(uint64_t a1, uint64_t a2)
{
  int v2;
  float result;

  v2 = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 52) = v2;
  result = *(float *)(a2 + 268);
  *(float *)(a1 + 100) = result;
  return result;
}

{
  float result;
  int v3;

  result = *(float *)(a2 + 20);
  v3 = *(_DWORD *)(a2 + 28);
  *(float *)(a1 + 56) = result;
  *(_DWORD *)(a1 + 60) = v3;
  return result;
}

float `virtual thunk to'CLMartyEstimatesAlgUncoupledCrash::feedFeatures(_QWORD *a1, uint64_t a2)
{
  char *v2;
  int v3;
  float result;

  v2 = (char *)a1 + *(_QWORD *)(*a1 - 32);
  v3 = *(_DWORD *)(a2 + 68);
  *((_DWORD *)v2 + 12) = *(_DWORD *)(a2 + 88);
  *((_DWORD *)v2 + 13) = v3;
  result = *(float *)(a2 + 268);
  *((float *)v2 + 25) = result;
  return result;
}

{
  float *v2;
  float result;
  int v4;

  v2 = (float *)((char *)a1 + *(_QWORD *)(*a1 - 104));
  result = *(float *)(a2 + 20);
  v4 = *(_DWORD *)(a2 + 28);
  v2[14] = result;
  *((_DWORD *)v2 + 15) = v4;
  return result;
}

double CLMartyEstimatesAlgUncoupledCrash::epochReset(CLMartyEstimatesAlgUncoupledCrash *this)
{
  uint64_t v1;
  double result;

  v1 = *((_QWORD *)this + 4);
  *(_WORD *)(v1 + 48) = 0;
  *(_BYTE *)(v1 + 50) = 0;
  *(_QWORD *)(v1 + 56) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_DWORD *)(v1 + 128) = 0;
  return result;
}

double `virtual thunk to'CLMartyEstimatesAlgUncoupledCrash::epochReset(CLMartyEstimatesAlgUncoupledCrash *this)
{
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 56) + 32);
  *(_WORD *)(v1 + 48) = 0;
  *(_BYTE *)(v1 + 50) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_OWORD *)(v1 + 116) = 0u;
  return result;
}

void sub_10027A964(CLKappaAlgBlock *a1)
{
  *(_QWORD *)a1 = off_100362E58;
  *((_QWORD *)a1 + 13) = off_1003630F8;
  *((_QWORD *)a1 + 14) = off_100363230;
  *((_QWORD *)a1 + 15) = off_100363308;
  sub_10000A718((uint64_t)a1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(a1, (uint64_t *)off_100363358);
}

void sub_10027A9B4(CLKappaAlgBlock *a1)
{
  *(_QWORD *)a1 = off_100362E58;
  *((_QWORD *)a1 + 13) = off_1003630F8;
  *((_QWORD *)a1 + 14) = off_100363230;
  *((_QWORD *)a1 + 15) = off_100363308;
  sub_10000A718((uint64_t)a1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(a1, (uint64_t *)off_100363358);
  operator delete();
}

void sub_10027AA1C(_QWORD *a1)
{
  CLKappaAlgBlock *v1;

  v1 = (CLKappaAlgBlock *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  *(_QWORD *)v1 = off_100362E58;
  *((_QWORD *)v1 + 13) = off_1003630F8;
  *((_QWORD *)v1 + 14) = off_100363230;
  *((_QWORD *)v1 + 15) = off_100363308;
  sub_10000A718((uint64_t)v1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_100363358);
}

void sub_10027AA74(_QWORD *a1)
{
  CLKappaAlgBlock *v1;

  v1 = (CLKappaAlgBlock *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  *(_QWORD *)v1 = off_100362E58;
  *((_QWORD *)v1 + 13) = off_1003630F8;
  *((_QWORD *)v1 + 14) = off_100363230;
  *((_QWORD *)v1 + 15) = off_100363308;
  sub_10000A718((uint64_t)v1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_100363358);
  operator delete();
}

void sub_10027AAE0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "Alg");
  v2 = (void *)qword_100387318;
  qword_100387318 = (uint64_t)v1;

}

void sub_10027AB10(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100363990;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10027AB24(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100363990;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10027AB58(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void CMFourierTransformSafety::CMFourierTransformSafety(CMFourierTransformSafety *this)
{
  const mach_header_64 *v2;
  uint64_t v3;
  int32x2_t v4;
  int64x2_t v5;
  float32x2_t v6;
  __float2 v7;
  __float2 v8;
  float *v9;
  float64x2_t v10;
  float64x2_t v11;
  float v12;
  float32x2x2_t v13;

  *((_QWORD *)this + 18) = (char *)this + 152;
  *((_QWORD *)this + 1) = 1024;
  *(_DWORD *)this = 10;
  v2 = &_mh_execute_header;
  v3 = 152;
  v10 = (float64x2_t)vdupq_n_s64(0x3F60000000000000uLL);
  v11 = (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL);
  do
  {
    v4 = vneg_s32((int32x2_t)v2);
    v5.i64[0] = v4.i32[0];
    v5.i64[1] = v4.i32[1];
    v6 = vcvt_f32_f64(vmulq_f64(vmulq_f64(vcvtq_f64_s64(v5), v11), v10));
    v12 = v6.f32[0];
    v7 = __sincosf_stret(v6.f32[1]);
    v8 = __sincosf_stret(v12);
    v13.val[1] = (float32x2_t)__PAIR64__(LODWORD(v7.__sinval), LODWORD(v8.__sinval));
    v13.val[0] = (float32x2_t)__PAIR64__(LODWORD(v7.__cosval), LODWORD(v8.__cosval));
    v9 = (float *)((char *)this + v3);
    vst2_f32(v9, v13);
    v2 = (const mach_header_64 *)vadd_s32((int32x2_t)v2, (int32x2_t)0x200000002);
    v3 += 16;
  }
  while (v3 != 8344);
  kf_factor_cs(1024, (int *)this + 4);
}

uint64_t CMFourierTransformSafety::findExponent(CMFourierTransformSafety *this, int a2)
{
  uint64_t result;
  char v3;

  result = 0;
  if ((a2 & 1) == 0)
  {
    do
    {
      v3 = a2;
      result = (result + 1);
      a2 >>= 1;
    }
    while ((v3 & 2) == 0);
  }
  return result;
}

uint64_t kf_factor_cs(uint64_t result, int *a2)
{
  float v2;
  int v3;
  int v4;

  v2 = sqrtf((float)(int)result);
  v3 = 4;
  do
  {
    while ((int)result % v3)
    {
      v4 = v3 + 2;
      if (v3 == 2)
        v4 = 3;
      if (v3 == 4)
        v3 = 2;
      else
        v3 = v4;
      if (v2 < (float)v3)
        v3 = result;
    }
    result = ((int)result / v3);
    *a2 = v3;
    a2[1] = result;
    a2 += 2;
  }
  while ((int)result > 1);
  return result;
}

void CMFourierTransformSafety::forward(uint64_t a1, _DWORD *a2, unsigned __int16 *a3)
{
  int *v5;
  unint64_t v6;
  unint64_t v7;
  float v8;
  float *v9;
  float32x2_t *v10;
  unint64_t v11;
  float32x2_t v12;
  float v13;
  uint64_t v14;

  v5 = (int *)(a1 + 8);
  bzero(&v13, 8 * *(int *)(a1 + 8));
  sub_10027AF98(&v13, a3, 0, 1, 1u, v5 + 2, (uint64_t)v5);
  *a2 = 0;
  v6 = *v5;
  if ((int)v6 >= 4)
  {
    v7 = v6 >> 1;
    v8 = (float)(int)v6;
    v9 = (float *)(a2 + 1);
    v10 = (float32x2_t *)&v14;
    v11 = v7 - 1;
    do
    {
      v12 = *v10++;
      *v9++ = sqrtf(vaddv_f32(vmul_f32(v12, v12)) / v8);
      --v11;
    }
    while (v11);
  }
}

float kiss_fft_cs(uint64_t a1, unsigned __int16 *a2, float *a3)
{
  return sub_10027AF98(a3, a2, 0, 1, 1u, (int *)(a1 + 8), a1);
}

void CMFourierTransformSafety::forward_wide(uint64_t a1, float *a2, unsigned __int16 *a3)
{
  int *v5;
  uint64_t v6;
  float v7;
  float32x2_t *v8;
  float32x2_t v9;
  float v10[2048];

  v5 = (int *)(a1 + 8);
  bzero(v10, 8 * *(int *)(a1 + 8));
  sub_10027AF98(v10, a3, 0, 1, 1u, v5 + 2, (uint64_t)v5);
  v6 = *v5;
  if ((int)v6 >= 1)
  {
    v7 = (float)(int)v6;
    v8 = (float32x2_t *)v10;
    do
    {
      v9 = *v8++;
      *a2++ = sqrtf(vaddv_f32(vmul_f32(v9, v9)) / v7);
      --v6;
    }
    while (v6);
  }
}

float CMFourierTransformSafety::forward_real(uint64_t a1, float *a2, unsigned __int16 *a3)
{
  int *v5;
  float result;
  uint64_t v7;
  float *v8;
  float v9;
  float v10[2048];

  v5 = (int *)(a1 + 8);
  bzero(v10, 8 * *(int *)(a1 + 8));
  result = sub_10027AF98(v10, a3, 0, 1, 1u, v5 + 2, (uint64_t)v5);
  v7 = *v5;
  if ((int)v7 >= 1)
  {
    v8 = v10;
    do
    {
      v9 = *v8;
      v8 += 2;
      result = v9;
      *a2++ = v9;
      --v7;
    }
    while (v7);
  }
  return result;
}

float kiss_fft_stride_cs(uint64_t a1, unsigned __int16 *a2, float *a3, unsigned int a4)
{
  return sub_10027AF98(a3, a2, 0, 1, a4, (int *)(a1 + 8), a1);
}

float sub_10027AF98(float *a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6, uint64_t a7)
{
  float *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  float *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  float *v22;
  float *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  float *v27;
  float *v28;
  float *v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float *v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float *v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float result;
  float v57;
  float v58;
  float v59;
  float *v60;
  uint64_t v61;
  float *v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  int v70;
  int *v71;

  v9 = a1;
  v10 = a6[1];
  v11 = *a6;
  v12 = v10;
  v13 = v10 * (int)v11;
  v70 = *a6;
  if (v10 == 1)
  {
    v14 = a4 * a5;
    v15 = 8 * v13;
    v16 = a1;
    do
    {
      *v16 = *(float *)sub_1000361EC(a2, (int)a3);
      v16 += 2;
      LODWORD(a3) = a3 + v14;
      v15 -= 8;
    }
    while (v15);
  }
  else
  {
    v17 = 0;
    v71 = a6 + 2;
    v18 = v11 * a4;
    v19 = 8 * v13;
    v20 = a4 * a5;
    do
    {
      sub_10027AF98(&v9[v17 / 4], a2, a3, v18, a5, v71, a7);
      a3 = (a3 + v20);
      v17 += 8 * v10;
    }
    while (v19 != v17);
  }
  if (v70 == 2)
  {
    v60 = (float *)(*(_QWORD *)(a7 + 136) + 4);
    v61 = 2 * v10;
    do
    {
      v62 = &v9[v61];
      v63 = *(v60 - 1);
      v64 = v9[2 * v12];
      v65 = v9[v61 + 1];
      v66 = (float)(v64 * v63) - (float)(v65 * *v60);
      v67 = (float)(v63 * v65) + (float)(v64 * *v60);
      v68 = v9[1] - v67;
      *v62 = *v9 - v66;
      v62[1] = v68;
      result = v67 + v9[1];
      *v9 = v66 + *v9;
      v9[1] = result;
      v9 += 2;
      v60 += 2 * a4;
      --v10;
    }
    while (v10);
  }
  else
  {
    if (v70 != 4)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        sub_10027B270(v70);
      __assert_rtn("kf_work", "CMFourierTransformSafety.cpp", 253, "false");
    }
    v21 = 2 * v10;
    v22 = v9 + 1;
    v23 = (float *)(*(_QWORD *)(a7 + 136) + 4);
    v24 = 4 * v10;
    v25 = *(_DWORD *)(a7 + 4);
    v26 = 6 * v10;
    v27 = v23;
    v28 = v23;
    do
    {
      v29 = &v22[v21];
      v30 = *(v23 - 1);
      v31 = v22[v21 - 1];
      v32 = v22[2 * v10];
      v33 = (float)(v31 * v30) - (float)(v32 * *v23);
      v34 = (float)(v30 * v32) + (float)(v31 * *v23);
      v35 = &v22[v24];
      v36 = *(v27 - 1);
      v37 = v22[v24 - 1];
      v38 = v22[4 * v10];
      v39 = (float)(v37 * v36) - (float)(v38 * *v27);
      v40 = (float)(v36 * v38) + (float)(v37 * *v27);
      v41 = &v22[v26];
      v42 = *(v28 - 1);
      v43 = v22[v26 - 1];
      v44 = v22[6 * v10];
      v45 = (float)(v43 * v42) - (float)(v44 * *v28);
      v46 = (float)(v42 * v44) + (float)(v43 * *v28);
      v47 = *(v22 - 1);
      v48 = v47 - v39;
      v49 = *v22 - v40;
      v50 = v39 + v47;
      v51 = v40 + *v22;
      *(v22 - 1) = v50;
      *v22 = v51;
      v52 = v34 + v46;
      v53 = v33 - v45;
      v54 = v34 - v46;
      *(v35 - 1) = v50 - (float)(v33 + v45);
      *v35 = v51 - v52;
      v55 = v52 + *v22;
      *(v22 - 1) = (float)(v33 + v45) + *(v22 - 1);
      *v22 = v55;
      if (v25)
      {
        result = v48 + v54;
        v57 = v49 - v53;
        v58 = v48 - v54;
        v59 = v49 + v53;
      }
      else
      {
        v58 = v48 + v54;
        v59 = v49 - v53;
        result = v48 - v54;
        v57 = v49 + v53;
      }
      v22[2 * v10] = v59;
      v22[6 * v10] = v57;
      v22 += 2;
      v28 += 6 * a4;
      *(v29 - 1) = v58;
      v27 += 4 * a4;
      v23 += 2 * a4;
      *(v41 - 1) = result;
      --v12;
    }
    while (v12);
  }
  return result;
}

void sub_10027B270(int a1)
{
  int v2;
  CFAbsoluteTime Current;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;

  v2 = 134218498;
  Current = CFAbsoluteTimeGetCurrent();
  v4 = 2080;
  v5 = "void kf_work(kiss_fft_cpx *, const CMQueue<scalar_32> &, int, const size_t, int, const int *, const kiss_fft_state *)";
  v6 = 1024;
  v7 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "ERROR,Die,Time,%.3f,Function,\"%s\",Error in FFT,p,%d\n", (uint8_t *)&v2, 0x1Cu);
}

void sub_10027B70C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_10027B738()
{
  if (qword_100387330 != -1)
    dispatch_once(&qword_100387330, &stru_100363A20);
  return (id)qword_100387338;
}

void sub_10027B874(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10027BDB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;

  objc_destroyWeak((id *)(v37 - 120));
  _Unwind_Resume(a1);
}

__CFString *sub_10027BE4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v4;
  id v5;

  switch(a2)
  {
    case 4:
      v4 = *(_BYTE **)(a1 + 32);
      if (v4[400])
        objc_msgSend(v4, "resetSession");
      goto LABEL_10;
    case 3:
      if (a3 == 1)
      {
        v5 = objc_retainBlock(*(id *)(*(_QWORD *)(a1 + 32) + 64));
        return (__CFString *)v5;
      }
LABEL_10:
      v5 = 0;
      return (__CFString *)v5;
    case 1:
      return CFSTR("idle");
    default:
      return (__CFString *)0;
  }
}

__CFString *sub_10027BEB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  NSObject *v6;
  _DWORD v7[2];

  switch(a2)
  {
    case 4:
      objc_msgSend(*(id *)(a1 + 32), "start");
      return (__CFString *)0;
    case 3:
      switch(a3)
      {
        case 1:
          if (qword_100387330 != -1)
            dispatch_once(&qword_100387330, &stru_100363A20);
          v6 = qword_100387338;
          if (os_log_type_enabled((os_log_t)qword_100387338, OS_LOG_TYPE_INFO))
          {
            v7[0] = 67109120;
            v7[1] = 600;
            _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "reset timeout to  %u sec", (uint8_t *)v7, 8u);
          }
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 96), "setNextFireDelay:interval:", 600.0, 1.79769313e308);
          v5 = *(void **)(*(_QWORD *)(a1 + 32) + 64);
          break;
        case 2:
        case 3:
          v5 = *(void **)(*(_QWORD *)(a1 + 32) + 56);
          break;
        case 4:
          v5 = *(void **)(*(_QWORD *)(a1 + 32) + 72);
          break;
        case 5:
          v5 = *(void **)(*(_QWORD *)(a1 + 32) + 80);
          break;
        default:
          return (__CFString *)0;
      }
      return (__CFString *)objc_retainBlock(v5);
    case 1:
      return CFSTR("reading");
    default:
      return (__CFString *)0;
  }
}

__CFString *sub_10027C030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  uint8_t v11[16];
  uint8_t v12[16];
  uint8_t buf[16];

  v4 = 0;
  switch(a2)
  {
    case 1:
      return CFSTR("waitForPOI");
    case 3:
      goto LABEL_13;
    case 4:
      if (qword_100387330 != -1)
        dispatch_once(&qword_100387330, &stru_100363A20);
      v7 = qword_100387338;
      if (os_log_type_enabled((os_log_t)qword_100387338, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "set timer for POI resolution timeout", buf, 2u);
      }
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 96), "setNextFireDelay:interval:", 10.0, 1.79769313e308);
      return (__CFString *)0;
    case 6:
      if (qword_100387330 != -1)
        dispatch_once(&qword_100387330, &stru_100363A20);
      v8 = qword_100387338;
      if (os_log_type_enabled((os_log_t)qword_100387338, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "cancel POI timeout timer", v12, 2u);
      }
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 96), "setNextFireDelay:interval:", 1.79769313e308, 1.79769313e308);
LABEL_13:
      v4 = 0;
      switch(a3)
      {
        case 1:
          if (qword_100387330 != -1)
            dispatch_once(&qword_100387330, &stru_100363A20);
          v9 = qword_100387338;
          if (os_log_type_enabled((os_log_t)qword_100387338, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)v11 = 0;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "ignoring trigger in wait state while waiting for POI resolution", v11, 2u);
          }
          v10 = *(void **)(*(_QWORD *)(a1 + 32) + 80);
          break;
        case 2:
        case 6:
          objc_msgSend(*(id *)(a1 + 32), "evaluateCrashWithPOI");
          return (__CFString *)0;
        case 3:
          v10 = *(void **)(*(_QWORD *)(a1 + 32) + 56);
          break;
        case 4:
          v10 = *(void **)(*(_QWORD *)(a1 + 32) + 72);
          break;
        default:
          return (__CFString *)v4;
      }
      v4 = objc_retainBlock(v10);
      return (__CFString *)v4;
    default:
      return (__CFString *)v4;
  }
}

__CFString *sub_10027C28C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  double v10;
  NSObject *v11;
  NSObject *v12;
  uint8_t v13[16];
  uint8_t v14[16];
  uint8_t buf[16];
  uint8_t v16[16];

  v4 = 0;
  switch(a2)
  {
    case 1:
      return CFSTR("waitForSOS");
    case 3:
      if (a3 == 7 || a3 == 2)
        goto LABEL_29;
      if (a3 != 1)
        return (__CFString *)0;
      if (!*(_BYTE *)(*(_QWORD *)(a1 + 32) + 401))
        goto LABEL_29;
      if (qword_100387330 != -1)
        dispatch_once(&qword_100387330, &stru_100363A20);
      v6 = qword_100387338;
      if (os_log_type_enabled((os_log_t)qword_100387338, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "ignoring trigger in wait state while waiting for SOS resolution", v13, 2u);
      }
      v7 = *(void **)(*(_QWORD *)(a1 + 32) + 72);
      goto LABEL_30;
    case 4:
      if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 401))
      {
        if (qword_100387330 != -1)
          dispatch_once(&qword_100387330, &stru_100363A20);
        v8 = qword_100387338;
        if (os_log_type_enabled((os_log_t)qword_100387338, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "wait for 30s for SOS resolution", buf, 2u);
        }
        v9 = *(void **)(*(_QWORD *)(a1 + 32) + 96);
        v10 = 30.0;
LABEL_23:
        objc_msgSend(v9, "setNextFireDelay:interval:", v10, 1.79769313e308);
        return (__CFString *)0;
      }
      else
      {
        if (qword_100387330 != -1)
          dispatch_once(&qword_100387330, &stru_100363A20);
        v12 = qword_100387338;
        if (os_log_type_enabled((os_log_t)qword_100387338, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)v16 = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "SOSInProgress false while in wait state", v16, 2u);
        }
LABEL_29:
        v7 = *(void **)(*(_QWORD *)(a1 + 32) + 56);
LABEL_30:
        v4 = objc_retainBlock(v7);
        return (__CFString *)v4;
      }
    case 6:
      if (qword_100387330 != -1)
        dispatch_once(&qword_100387330, &stru_100363A20);
      v11 = qword_100387338;
      if (os_log_type_enabled((os_log_t)qword_100387338, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v14 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "cancel sos timeout timer", v14, 2u);
      }
      v9 = *(void **)(*(_QWORD *)(a1 + 32) + 96);
      v10 = 1.79769313e308;
      goto LABEL_23;
    default:
      return (__CFString *)v4;
  }
}

id sub_10027C510(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  if (qword_100387330 != -1)
    dispatch_once(&qword_100387330, &stru_100363A20);
  v2 = qword_100387338;
  if (os_log_type_enabled((os_log_t)qword_100387338, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Trigger timeout expired", v4, 2u);
  }
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "signal:data:", 2, 0);
}

void sub_10027C884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v20 = v15;

  _Unwind_Resume(a1);
}

void sub_10027C8E8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  const char *v7;
  NSObject *v8;
  uint32_t v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  double v19;
  double v20;
  id v21;
  double v22;
  double v23;
  double v24;
  NSObject *v25;
  uint64_t v26;
  void *v27;
  id v28;
  id obj;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint8_t buf[4];
  id v35;
  __int16 v36;
  void *v37;
  __int16 v38;
  void *v39;
  __int16 v40;
  double v41;
  _BYTE v42[128];

  v5 = a2;
  v27 = v5;
  v28 = a3;
  if (v28)
  {
    if (qword_100387330 != -1)
      dispatch_once(&qword_100387330, &stru_100363A20);
    v6 = qword_100387338;
    if (!os_log_type_enabled((os_log_t)qword_100387338, OS_LOG_TYPE_INFO))
      goto LABEL_7;
    *(_DWORD *)buf = 138543362;
    v35 = v28;
    v7 = "geoservices place lookup failed with error: %{public}@";
    v8 = v6;
    v9 = 12;
LABEL_6:
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, v7, buf, v9);
LABEL_7:
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 218) = 1;
    goto LABEL_25;
  }
  if (!v5)
  {
    if (qword_100387330 != -1)
      dispatch_once(&qword_100387330, &stru_100363A20);
    v26 = qword_100387338;
    if (!os_log_type_enabled((os_log_t)qword_100387338, OS_LOG_TYPE_INFO))
      goto LABEL_7;
    *(_WORD *)buf = 0;
    v7 = "geoservices place unexpectedly received a nil result but no error";
    v8 = v26;
    v9 = 2;
    goto LABEL_6;
  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectAtIndexedSubscript:", 0));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "mapItemsForSpatialLookupParameters:", v10));

  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  obj = v11;
  v12 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v42, 16);
  if (v12)
  {
    v13 = *(_QWORD *)v31;
    do
    {
      v14 = 0;
      do
      {
        if (*(_QWORD *)v31 != v13)
          objc_enumerationMutation(obj);
        v15 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * (_QWORD)v14);
        if (qword_100387330 != -1)
          dispatch_once(&qword_100387330, &stru_100363A20);
        v16 = (id)qword_100387338;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "name"));
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "spatialMappedPlaceCategories"));
          v19 = *(double *)(a1 + 48);
          v20 = *(double *)(a1 + 56);
          v21 = objc_msgSend(v15, "centerCoordinate");
          v24 = GEOCalculateDistance(v21, v19, v20, v22, v23);
          *(_DWORD *)buf = 134218755;
          v35 = v15;
          v36 = 2113;
          v37 = v17;
          v38 = 2112;
          v39 = v18;
          v40 = 2048;
          v41 = v24;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "geoservices mapItem %p name %{private}@ category %@ distance %f", buf, 0x2Au);

        }
        *(_BYTE *)(*(_QWORD *)(a1 + 32) + 216) = 1;
        v14 = (char *)v14 + 1;
      }
      while (v12 != v14);
      v12 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v42, 16);
    }
    while (v12);
  }

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 218) = 1;
  if (qword_100387330 != -1)
    dispatch_once(&qword_100387330, &stru_100363A20);
  v25 = qword_100387338;
  if (os_log_type_enabled((os_log_t)qword_100387338, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "geoservices lookup done", buf, 2u);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "signal:data:", 6, 0, v27);

LABEL_25:
}

void sub_10027CCC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_10027D1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);

  sub_10000A718((uint64_t)va);
  sub_10000A718((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_10027D6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);

  sub_10000A718((uint64_t)va);
  sub_10000A718((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_10027D840(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10027D8D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_10027DA74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10027DB7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10027E010(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10027E45C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_10027E6DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10027EB18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10027ED8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_10027EEE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_10027EF14()
{
  if (qword_100387380 != -1)
    dispatch_once(&qword_100387380, &stru_100363A60);
  return (id)qword_100387388;
}

void sub_10027F354(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  _Unwind_Resume(a1);
}

void sub_10027F448(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10027F658()
{
  operator delete();
}

void sub_10027FC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);

  sub_10000A718((uint64_t)va);
  sub_10000A718((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_10027FD60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10000A718((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10027FE44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1002802B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  void *v15;
  uint64_t v17;
  va_list va;
  uint64_t v19;
  va_list va1;

  va_start(va1, a15);
  va_start(va, a15);
  v17 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);

  sub_10000A718((uint64_t)va);
  sub_10000A718((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1002806FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va2;
  uint64_t v17;
  va_list va3;

  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v15 = va_arg(va3, _QWORD);
  v17 = va_arg(va3, _QWORD);
  sub_10000A718((uint64_t)va);
  sub_10000A718((uint64_t)va1);
  sub_10000A718((uint64_t)va2);
  sub_10000A718((uint64_t)va3);
  sub_10000A718(v5 - 64);
  sub_10000A718(v5 - 48);
  _Unwind_Resume(a1);
}

void sub_100280E7C()
{
  JUMPOUT(0x100280E6CLL);
}

void sub_100281060(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100281638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  sub_10000A718((uint64_t)&location);
  _Unwind_Resume(a1);
}

_QWORD *sub_10028168C(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(result[4] + 376) = result[5];
  v1 = result[4];
  if (!*(_BYTE *)(v1 + 219))
  {
    if (!*(_BYTE *)(v1 + 401))
    {
      v2 = result;
      objc_msgSend(*(id *)(v1 + 40), "feedDetectionDecision:uuid:forMode:", 0, 0, 1);
      objc_msgSend(*(id *)(v2[4] + 48), "signal:data:", 3, 0);
      return objc_msgSend(*(id *)(v2[4] + 176), "releasePowerAssertion");
    }
    return objc_msgSend(*(id *)(v1 + 48), "signal:data:", 4, 0);
  }
  if (*(_BYTE *)(v1 + 401))
    return objc_msgSend(*(id *)(v1 + 48), "signal:data:", 4, 0);
  return result;
}

void sub_100281B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10000A718((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100281B8C(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100363A80);
  v4 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[C] force de %d", (uint8_t *)v5, 8u);
  }
  *(_BYTE *)(a1 + 108) = a2;
}

void sub_100281C60(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100363A80);
  v4 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[C] force pu %d", (uint8_t *)v5, 8u);
  }
  *(_BYTE *)(a1 + 104) = a2;
}

void sub_100281D34(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100363A80);
  v4 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[C] force ff %d", (uint8_t *)v5, 8u);
  }
  *(_BYTE *)(a1 + 105) = a2;
}

void sub_100281E08(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100363A80);
  v4 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[C] force ba %d", (uint8_t *)v5, 8u);
  }
  *(_BYTE *)(a1 + 106) = a2;
}

void sub_100281EDC(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100363A80);
  v4 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[C] force au %d", (uint8_t *)v5, 8u);
  }
  *(_BYTE *)(a1 + 107) = a2;
}

void sub_100281FB0(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100363A80);
  v4 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[C] force re %d", (uint8_t *)v5, 8u);
  }
  *(_DWORD *)(a1 + 112) = a2;
}

void sub_100282430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10000A718((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028245C(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100363A80);
  v4 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[HSC] setting force de %d", (uint8_t *)v5, 8u);
  }
  *(_BYTE *)(a1 + 81) = a2;
}

void sub_100282530(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100363A80);
  v4 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[HSC] setting force pu %d", (uint8_t *)v5, 8u);
  }
  *(_BYTE *)(a1 + 76) = a2;
}

void sub_100282604(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100363A80);
  v4 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[HSC] setting force ff %d", (uint8_t *)v5, 8u);
  }
  *(_BYTE *)(a1 + 77) = a2;
}

void sub_1002826D8(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100363A80);
  v4 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[HSC] setting force ba %d", (uint8_t *)v5, 8u);
  }
  *(_BYTE *)(a1 + 78) = a2;
}

void sub_1002827AC(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100363A80);
  v4 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[HSC] setting force au %d", (uint8_t *)v5, 8u);
  }
  *(_BYTE *)(a1 + 79) = a2;
}

void sub_100282880(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100363A80);
  v4 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[HSC] setting force gp %d", (uint8_t *)v5, 8u);
  }
  *(_BYTE *)(a1 + 80) = a2;
}

void sub_100282C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10000A718((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100282C3C(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100363A80);
  v4 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[RC] setting force de %d", (uint8_t *)v5, 8u);
  }
  *(_BYTE *)(a1 + 108) = a2;
}

void sub_100282D10(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100363A80);
  v4 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[RC] setting force ba %d", (uint8_t *)v5, 8u);
  }
  *(_BYTE *)(a1 + 109) = a2;
}

void sub_100282DE4(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100363A80);
  v4 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[RC] setting force ro %d", (uint8_t *)v5, 8u);
  }
  *(_BYTE *)(a1 + 111) = a2;
}

void sub_100282EB8(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100363A80);
  v4 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[RC] setting force re %d", (uint8_t *)v5, 8u);
  }
  *(_DWORD *)(a1 + 112) = a2;
}

void sub_100283338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10000A718((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028336C(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100363A80);
  v4 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[SC] setting force de %d", (uint8_t *)v5, 8u);
  }
  *(_BYTE *)(a1 + 8969) = a2;
}

void sub_100283444(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100363A80);
  v4 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[SC] setting force c %d", (uint8_t *)v5, 8u);
  }
  *(_BYTE *)(a1 + 8965) = a2;
}

void sub_10028351C(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100363A80);
  v4 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[SC] setting force roc %d", (uint8_t *)v5, 8u);
  }
  *(_BYTE *)(a1 + 8966) = a2;
}

void sub_1002835F4(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100363A80);
  v4 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[SC] setting force hsc %d", (uint8_t *)v5, 8u);
  }
  *(_BYTE *)(a1 + 8967) = a2;
}

void sub_1002836CC(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100363A80);
  v4 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[SC] setting force desc %d", (uint8_t *)v5, 8u);
  }
  *(_BYTE *)(a1 + 8968) = a2;
}

void sub_1002837A4(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100363A80);
  v4 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[SC] setting force au %d", (uint8_t *)v5, 8u);
  }
  *(_BYTE *)(a1 + 8970) = a2;
}

void sub_100283938(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];

  if (qword_100387300 != -1)
    dispatch_once(&qword_100387300, &stru_100363AA0);
  v4 = qword_100387308;
  if (os_log_type_enabled((os_log_t)qword_100387308, OS_LOG_TYPE_DEBUG))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "setting force participation %d", (uint8_t *)v5, 8u);
  }
  *(_BYTE *)(a1 + 40) = a2;
}

void sub_100283C60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100283D58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1002840FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100284550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_10000A718((uint64_t)va);
  sub_10000A718((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1002848F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100284FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);

  sub_10000A718((uint64_t)va);
  sub_10000A718((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_100285370(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100285600(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100285F74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_100286100(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100286194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{

  _Unwind_Resume(a1);
}

void sub_100286224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{

  _Unwind_Resume(a1);
}

void sub_1002862D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{

  _Unwind_Resume(a1);
}

void sub_1002864E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100286574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{

  _Unwind_Resume(a1);
}

void sub_100286604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{

  _Unwind_Resume(a1);
}

void sub_1002866B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{

  _Unwind_Resume(a1);
}

void sub_100286740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{

  _Unwind_Resume(a1);
}

void sub_1002867D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{

  _Unwind_Resume(a1);
}

void sub_10028687C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{

  _Unwind_Resume(a1);
}

void sub_10028690C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{

  _Unwind_Resume(a1);
}

void sub_10028699C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{

  _Unwind_Resume(a1);
}

void sub_100286A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{

  _Unwind_Resume(a1);
}

void sub_100286FB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100287194(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002877F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_100287FEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  __cxa_guard_abort(&qword_100389398);

  _Unwind_Resume(a1);
}

void sub_1002880F4(id a1)
{
  void *v1;
  NSString *v2;
  void *v3;
  void *v4;
  CSKappaTap2Radar *v5;
  NSString *v6;
  void *v7;
  void *v8;
  CSKappaTap2Radar *v9;
  void *v10;
  id v11;
  NSObject *v12;
  id v13;
  uint8_t buf[4];
  id v15;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v2 = NSTemporaryDirectory();
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stringByAppendingPathComponent:", CFSTR("kappaTestTTRSpooler")));
  objc_msgSend(v1, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v4, 1, 0, 0);

  v5 = [CSKappaTap2Radar alloc];
  v6 = NSTemporaryDirectory();
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "stringByAppendingPathComponent:", CFSTR("kappaTestTTRSpooler")));
  v9 = -[CSKappaTap2Radar initWithSpoolerFolder:andConfiguration:](v5, "initWithSpoolerFolder:andConfiguration:", v8, qword_100389390);
  v10 = (void *)qword_1003893A0;
  qword_1003893A0 = (uint64_t)v9;

  v13 = 0;
  objc_msgSend((id)qword_1003893A0, "startMonitoringWithError:", &v13);
  v11 = v13;
  if (v11)
  {
    if (qword_100387330 != -1)
      dispatch_once(&qword_100387330, &stru_100363A20);
    v12 = qword_100387338;
    if (os_log_type_enabled((os_log_t)qword_100387338, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v15 = v11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Error monitoring for TTR test: %@", buf, 0xCu);
    }
  }

}

void sub_100288294(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002883F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v1;

  _Unwind_Resume(a1);
}

void sub_1002886C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002888E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100288BC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100288DD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100289030(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002895A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100289720(uint64_t a1, uint64_t a2, void *a3)
{
  id *WeakRetained;
  id *v5;
  id v6;

  v6 = a3;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained)
    objc_msgSend(WeakRetained[49], "uploadUserInfoWithHandler:", v6);

}

void sub_100289770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1002899E0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "KappaDetection");
  v2 = (void *)qword_100387338;
  qword_100387338 = (uint64_t)v1;

}

void sub_100289A10(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "AnomalyEvent");
  v2 = (void *)qword_1003872F8;
  qword_1003872F8 = (uint64_t)v1;

}

void sub_100289A40(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "Companion");
  v2 = (void *)qword_100387388;
  qword_100387388 = (uint64_t)v1;

}

void sub_100289A70(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "Alg");
  v2 = (void *)qword_100387318;
  qword_100387318 = (uint64_t)v1;

}

void sub_100289AA0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "Flow");
  v2 = (void *)qword_100387308;
  qword_100387308 = (uint64_t)v1;

}

#error "100289C0C: call analysis failed (funcsize=69)"

#error "100289C84: call analysis failed (funcsize=55)"

#error "100289D8C: call analysis failed (funcsize=55)"

#error "100289F64: call analysis failed (funcsize=69)"

#error "10028A0AC: call analysis failed (funcsize=69)"

#error "10028A1F4: call analysis failed (funcsize=68)"

#error "10028A334: call analysis failed (funcsize=68)"

#error "10028A474: call analysis failed (funcsize=69)"

#error "10028A5BC: call analysis failed (funcsize=69)"

#error "10028A704: call analysis failed (funcsize=69)"

#error "10028A84C: call analysis failed (funcsize=69)"

#error "10028A994: call analysis failed (funcsize=69)"

#error "10028AA0C: call analysis failed (funcsize=55)"

#error "10028ABE4: call analysis failed (funcsize=69)"

#error "10028AC5C: call analysis failed (funcsize=55)"

#error "10028AE34: call analysis failed (funcsize=69)"

#error "10028AEAC: call analysis failed (funcsize=55)"

#error "10028B084: call analysis failed (funcsize=69)"

#error "10028B0FC: call analysis failed (funcsize=55)"

#error "10028B2D4: call analysis failed (funcsize=68)"

#error "10028B414: call analysis failed (funcsize=69)"

#error "10028B48C: call analysis failed (funcsize=55)"

#error "10028B594: call analysis failed (funcsize=55)"

#error "10028B69C: call analysis failed (funcsize=55)"

#error "10028B874: call analysis failed (funcsize=69)"

#error "10028B8EC: call analysis failed (funcsize=55)"

#error "10028B9F4: call analysis failed (funcsize=55)"

#error "10028BAFC: call analysis failed (funcsize=55)"

#error "10028BC04: call analysis failed (funcsize=55)"

#error "10028BDDC: call analysis failed (funcsize=69)"

#error "10028BE54: call analysis failed (funcsize=55)"

#error "10028BF5C: call analysis failed (funcsize=55)"

#error "10028C064: call analysis failed (funcsize=55)"

#error "10028C23C: call analysis failed (funcsize=69)"

#error "10028C2B4: call analysis failed (funcsize=55)"

#error "10028C3BC: call analysis failed (funcsize=55)"

#error "10028C4C4: call analysis failed (funcsize=55)"

#error "10028C5CC: call analysis failed (funcsize=55)"

#error "10028C6D4: call analysis failed (funcsize=55)"

#error "10028C7DC: call analysis failed (funcsize=55)"

#error "10028C8E4: call analysis failed (funcsize=55)"

void CLKappaFeaturesAlgDataIntegrityResult::CLKappaFeaturesAlgDataIntegrityResult(CLKappaFeaturesAlgDataIntegrityResult *this)
{
  *((_BYTE *)this + 8) = 0;
  *(_QWORD *)this = off_100363AD0;
  *((_DWORD *)this + 82) = 0;
}

{
  *((_BYTE *)this + 8) = 0;
  *(_QWORD *)this = off_100363AD0;
  *((_DWORD *)this + 82) = 0;
}

void CLKappaFeaturesAlgDataIntegrityResult::~CLKappaFeaturesAlgDataIntegrityResult(CLKappaFeaturesAlgDataIntegrityResult *this)
{
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(this);
  operator delete();
}

_OWORD *CLKappaFeaturesAlgDataIntegrityResult::reset(CLKappaFeaturesAlgDataIntegrityResult *this)
{
  _OWORD *result;

  *(_OWORD *)((char *)this + 40) = 0u;
  result = (_OWORD *)((char *)this + 40);
  *((_QWORD *)result - 3) = 0;
  *((_QWORD *)result - 2) = 0;
  *((_QWORD *)result - 1) = 0;
  result[1] = 0u;
  result[2] = 0u;
  result[3] = 0u;
  result[4] = 0u;
  result[5] = 0u;
  result[6] = 0u;
  result[7] = 0u;
  result[8] = 0u;
  result[9] = 0u;
  result[10] = 0u;
  result[11] = 0u;
  result[12] = 0u;
  result[13] = 0u;
  result[14] = 0u;
  result[15] = 0u;
  result[16] = 0u;
  result[17] = 0u;
  return result;
}

void CLKappaFeaturesAlgDataIntegrity::CLKappaFeaturesAlgDataIntegrity(CLKappaFeaturesAlgDataIntegrity *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  __int128 v22;

  CLKappaAlgBlock::CLKappaAlgBlock(this, a2 + 1);
  v4 = *a2;
  *(_QWORD *)v5 = *a2;
  *(_QWORD *)(v5 + *(_QWORD *)(v4 - 152)) = a2[6];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 160)) = a2[7];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 168)) = a2[8];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 176)) = a2[9];
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  v6 = v5 + 32;
  v7 = operator new(0x170uLL);
  v7[2] = 0;
  *v7 = off_100364708;
  v7[1] = 0;
  *((_BYTE *)v7 + 32) = 0;
  v7[3] = off_100363AD0;
  *((_DWORD *)v7 + 88) = 0;
  *(_QWORD *)&v22 = v7 + 3;
  *((_QWORD *)&v22 + 1) = v7;
  sub_1000081AC((uint64_t)this + 8, &v22);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v20 = *((_QWORD *)this + 1);
  v21 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  sub_10028CC08((uint64_t)&v20, &v22);
  sub_1000081AC(v6, &v22);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v21;
  if (v21)
  {
    v18 = (unint64_t *)&v21->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  (*(void (**)(CLKappaFeaturesAlgDataIntegrity *))(*(_QWORD *)this + 296))(this);
}

void sub_10028CBDC(_Unwind_Exception *a1)
{
  CLKappaAlgBlock *v1;
  uint64_t *v2;
  uint64_t v3;

  sub_10000A718((uint64_t)v1 + 48);
  sub_10000A718(v3);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, v2);
  _Unwind_Resume(a1);
}

void *sub_10028CC08@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = *(void **)a1;
  if (result
  {
    v5 = *(_QWORD *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void CLKappaFeaturesAlgDataIntegrity::CLKappaFeaturesAlgDataIntegrity(CLKappaFeaturesAlgDataIntegrity *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;

  *(_QWORD *)this = off_100345D50;
  *((_QWORD *)this + 8) = off_100345DF8;
  *((_QWORD *)this + 9) = off_100345EC0;
  *((_QWORD *)this + 10) = off_100345F68;
  CLKappaAlgBlock::CLKappaAlgBlock(this, (uint64_t *)off_1003640B8);
  *(_QWORD *)v2 = off_100363BB8;
  *(_QWORD *)(v2 + 64) = off_100363E58;
  *(_QWORD *)(v2 + 72) = off_100363F90;
  *(_QWORD *)(v2 + 80) = off_100364068;
  *(_OWORD *)(v2 + 32) = 0u;
  v3 = v2 + 32;
  *(_OWORD *)(v2 + 48) = 0u;
  v4 = operator new(0x170uLL);
  v4[2] = 0;
  *v4 = off_100364708;
  v4[1] = 0;
  *((_BYTE *)v4 + 32) = 0;
  v4[3] = off_100363AD0;
  *((_DWORD *)v4 + 88) = 0;
  *(_QWORD *)&v19 = v4 + 3;
  *((_QWORD *)&v19 + 1) = v4;
  sub_1000081AC((uint64_t)this + 8, &v19);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v17 = *((_QWORD *)this + 1);
  v18 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_10028CC08((uint64_t)&v17, &v19);
  sub_1000081AC(v3, &v19);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v18;
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  (*(void (**)(CLKappaFeaturesAlgDataIntegrity *))(*(_QWORD *)this + 296))(this);
}

void sub_10028CE50(_Unwind_Exception *a1)
{
  CLKappaAlgBlock *v1;
  uint64_t v2;

  sub_10000A718((uint64_t)v1 + 48);
  sub_10000A718(v2);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_1003640B8);
  _Unwind_Resume(a1);
}

void CLKappaFeaturesAlgDataIntegrity::~CLKappaFeaturesAlgDataIntegrity(CLKappaFeaturesAlgDataIntegrity *this, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 152)) = a2[6];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 160)) = a2[7];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 168)) = a2[8];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 176)) = a2[9];
  sub_10000A718((uint64_t)this + 48);
  sub_10000A718((uint64_t)this + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(this, a2 + 1);
}

void CLKappaFeaturesAlgDataIntegrity::~CLKappaFeaturesAlgDataIntegrity(CLKappaFeaturesAlgDataIntegrity *this)
{
}

{
  operator delete();
}

void `virtual thunk to'CLKappaFeaturesAlgDataIntegrity::~CLKappaFeaturesAlgDataIntegrity(CLKappaFeaturesAlgDataIntegrity *this)
{
}

{
  operator delete();
}

void CLKappaFeaturesAlgDataIntegrity::streamInfo(NSArray *a1@<X1>, uint64_t a2@<X8>)
{
  char *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  NSArray *v9;

  v9 = a1;
  v4 = -[NSArray count](v9, "count");
  if ((_DWORD)v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray objectAtIndex:](v9, "objectAtIndex:", 0));
    v6 = objc_msgSend(v5, "timestamp");

    v7 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray objectAtIndex:](v9, "objectAtIndex:", v4 - 1));
    v8 = objc_msgSend(v7, "timestamp");

  }
  else
  {
    v8 = 0;
    v6 = 0;
  }
  *(_DWORD *)a2 = (_DWORD)v4;
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = v8;

}

void sub_10028D034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void CLKappaFeaturesAlgDataIntegrity::epochFinalize(CLKappaFeaturesAlgDataIntegrity *this, uint64_t a2)
{
  uint64_t v3;
  NSArray *v4;
  uint64_t v5;
  NSArray *v6;
  uint64_t v7;
  NSArray *v8;
  uint64_t v9;
  NSArray *v10;
  uint64_t v11;
  NSArray *v12;
  uint64_t v13;
  NSArray *v14;
  uint64_t v15;
  NSArray *v16;
  uint64_t v17;
  NSArray *v18;
  uint64_t v19;
  NSArray *v20;
  uint64_t v21;
  NSArray *v22;
  uint64_t v23;
  NSArray *v24;
  uint64_t v25;
  NSArray *v26;
  uint64_t v27;
  NSObject *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD v60[2];
  uint64_t v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  int v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  int v72;
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  int v78;
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  uint64_t v82;
  __int16 v83;
  int v84;
  __int16 v85;
  uint64_t v86;
  __int16 v87;
  uint64_t v88;
  __int16 v89;
  int v90;
  __int16 v91;
  uint64_t v92;
  __int16 v93;
  uint64_t v94;
  __int16 v95;
  int v96;
  __int16 v97;
  uint64_t v98;
  __int16 v99;
  uint64_t v100;
  __int16 v101;
  int v102;
  __int16 v103;
  uint64_t v104;
  __int16 v105;
  uint64_t v106;
  __int16 v107;
  int v108;
  __int16 v109;
  uint64_t v110;
  __int16 v111;
  uint64_t v112;
  __int16 v113;
  int v114;
  __int16 v115;
  uint64_t v116;
  __int16 v117;
  uint64_t v118;
  __int16 v119;
  int v120;
  __int16 v121;
  uint64_t v122;
  __int16 v123;
  uint64_t v124;

  v3 = *((_QWORD *)this + 4);
  *(_QWORD *)(v3 + 16) = a2;
  ++*(_DWORD *)(v3 + 328);
  v4 = (NSArray *)*(id *)(*((_QWORD *)this + 6) + 24);
  CLKappaFeaturesAlgDataIntegrity::streamInfo(v4, (uint64_t)v60);
  *(_DWORD *)(v3 + 88) = v60[0];
  v5 = v62;
  *(_QWORD *)(v3 + 136) = v61;
  *(_QWORD *)(v3 + 232) = v5;

  v6 = (NSArray *)*(id *)(*((_QWORD *)this + 6) + 32);
  CLKappaFeaturesAlgDataIntegrity::streamInfo(v6, (uint64_t)v60);
  *(_DWORD *)(v3 + 92) = v60[0];
  v7 = v62;
  *(_QWORD *)(v3 + 144) = v61;
  *(_QWORD *)(v3 + 240) = v7;

  v8 = (NSArray *)*(id *)(*((_QWORD *)this + 6) + 96);
  CLKappaFeaturesAlgDataIntegrity::streamInfo(v8, (uint64_t)v60);
  *(_DWORD *)(v3 + 96) = v60[0];
  v9 = v62;
  *(_QWORD *)(v3 + 152) = v61;
  *(_QWORD *)(v3 + 248) = v9;

  v10 = (NSArray *)*(id *)(*((_QWORD *)this + 6) + 72);
  CLKappaFeaturesAlgDataIntegrity::streamInfo(v10, (uint64_t)v60);
  *(_DWORD *)(v3 + 100) = v60[0];
  v11 = v62;
  *(_QWORD *)(v3 + 160) = v61;
  *(_QWORD *)(v3 + 256) = v11;

  v12 = (NSArray *)*(id *)(*((_QWORD *)this + 6) + 48);
  CLKappaFeaturesAlgDataIntegrity::streamInfo(v12, (uint64_t)v60);
  *(_DWORD *)(v3 + 104) = v60[0];
  v13 = v62;
  *(_QWORD *)(v3 + 168) = v61;
  *(_QWORD *)(v3 + 264) = v13;

  v14 = (NSArray *)*(id *)(*((_QWORD *)this + 6) + 56);
  CLKappaFeaturesAlgDataIntegrity::streamInfo(v14, (uint64_t)v60);
  *(_DWORD *)(v3 + 108) = v60[0];
  v15 = v62;
  *(_QWORD *)(v3 + 176) = v61;
  *(_QWORD *)(v3 + 272) = v15;

  v16 = (NSArray *)*(id *)(*((_QWORD *)this + 6) + 80);
  CLKappaFeaturesAlgDataIntegrity::streamInfo(v16, (uint64_t)v60);
  *(_DWORD *)(v3 + 112) = v60[0];
  v17 = v62;
  *(_QWORD *)(v3 + 184) = v61;
  *(_QWORD *)(v3 + 280) = v17;

  v18 = (NSArray *)*(id *)(*((_QWORD *)this + 6) + 64);
  CLKappaFeaturesAlgDataIntegrity::streamInfo(v18, (uint64_t)v60);
  *(_DWORD *)(v3 + 116) = v60[0];
  v19 = v62;
  *(_QWORD *)(v3 + 192) = v61;
  *(_QWORD *)(v3 + 288) = v19;

  v20 = (NSArray *)*(id *)(*((_QWORD *)this + 6) + 112);
  CLKappaFeaturesAlgDataIntegrity::streamInfo(v20, (uint64_t)v60);
  *(_DWORD *)(v3 + 120) = v60[0];
  v21 = v62;
  *(_QWORD *)(v3 + 200) = v61;
  *(_QWORD *)(v3 + 296) = v21;

  v22 = (NSArray *)*(id *)(*((_QWORD *)this + 6) + 120);
  CLKappaFeaturesAlgDataIntegrity::streamInfo(v22, (uint64_t)v60);
  *(_DWORD *)(v3 + 124) = v60[0];
  v23 = v62;
  *(_QWORD *)(v3 + 208) = v61;
  *(_QWORD *)(v3 + 304) = v23;

  v24 = (NSArray *)*(id *)(*((_QWORD *)this + 6) + 128);
  CLKappaFeaturesAlgDataIntegrity::streamInfo(v24, (uint64_t)v60);
  *(_DWORD *)(v3 + 128) = v60[0];
  v25 = v62;
  *(_QWORD *)(v3 + 216) = v61;
  *(_QWORD *)(v3 + 312) = v25;

  v26 = (NSArray *)*(id *)(*((_QWORD *)this + 6) + 88);
  CLKappaFeaturesAlgDataIntegrity::streamInfo(v26, (uint64_t)v60);
  *(_DWORD *)(v3 + 132) = v60[0];
  v27 = v62;
  *(_QWORD *)(v3 + 224) = v61;
  *(_QWORD *)(v3 + 320) = v27;

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_1003646D8);
  v28 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v29 = *(_DWORD *)(v3 + 88);
    v30 = *(_DWORD *)(v3 + 92);
    v32 = *(_QWORD *)(v3 + 136);
    v31 = *(_QWORD *)(v3 + 144);
    v34 = *(_QWORD *)(v3 + 232);
    v33 = *(_QWORD *)(v3 + 240);
    v35 = *(_DWORD *)(v3 + 96);
    v36 = *(_DWORD *)(v3 + 100);
    v37 = *(_QWORD *)(v3 + 152);
    v38 = *(_QWORD *)(v3 + 160);
    v39 = *(_DWORD *)(v3 + 104);
    v40 = *(_DWORD *)(v3 + 108);
    v41 = *(_QWORD *)(v3 + 168);
    v42 = *(_QWORD *)(v3 + 176);
    v43 = *(_QWORD *)(v3 + 272);
    v45 = *(_DWORD *)(v3 + 112);
    v44 = *(_DWORD *)(v3 + 116);
    v47 = *(_QWORD *)(v3 + 184);
    v46 = *(_QWORD *)(v3 + 192);
    v49 = *(_DWORD *)(v3 + 120);
    v48 = *(_DWORD *)(v3 + 124);
    v50 = *(_DWORD *)(v3 + 128);
    v88 = *(_QWORD *)(v3 + 264);
    v92 = v42;
    v51 = *(_QWORD *)(v3 + 280);
    v52 = *(_QWORD *)(v3 + 288);
    v94 = v43;
    v96 = v45;
    v53 = *(_QWORD *)(v3 + 200);
    v54 = *(_QWORD *)(v3 + 208);
    v98 = v47;
    v100 = v51;
    v55 = *(_QWORD *)(v3 + 296);
    v56 = *(_QWORD *)(v3 + 304);
    v104 = v46;
    v57 = *(_QWORD *)(v3 + 216);
    v108 = v49;
    v112 = v55;
    v58 = *(_QWORD *)(v3 + 248);
    v59 = *(_QWORD *)(v3 + 256);
    v116 = v54;
    v118 = v56;
    v120 = v50;
    v122 = v57;
    v124 = *(_QWORD *)(v3 + 312);
    v60[1] = *(_DWORD *)(*((_QWORD *)this + 4) + 328);
    *(_DWORD *)((char *)&v61 + 2) = v29;
    v62 = v32;
    v64 = v34;
    v66 = v30;
    v68 = v31;
    v70 = v33;
    v72 = v35;
    v74 = v37;
    v76 = v58;
    v78 = v36;
    v80 = v38;
    v82 = v59;
    v84 = v39;
    v86 = v41;
    v90 = v40;
    v102 = v44;
    v106 = v52;
    v110 = v53;
    v114 = v48;
    LOWORD(v61) = 1024;
    v65 = 1024;
    v71 = 1024;
    v77 = 1024;
    v83 = 1024;
    v89 = 1024;
    v95 = 1024;
    v101 = 1024;
    v107 = 1024;
    v113 = 1024;
    v119 = 1024;
    HIWORD(v61) = 2048;
    v63 = 2048;
    v67 = 2048;
    v69 = 2048;
    v73 = 2048;
    v75 = 2048;
    v79 = 2048;
    v81 = 2048;
    v85 = 2048;
    v87 = 2048;
    v91 = 2048;
    v93 = 2048;
    v97 = 2048;
    v99 = 2048;
    v103 = 2048;
    v105 = 2048;
    v109 = 2048;
    v111 = 2048;
    v115 = 2048;
    v117 = 2048;
    v121 = 2048;
    v123 = 2048;
    v60[0] = 67117568;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "[DataIntegrity] Stream=count [min_ts max_ts] epoch %d accel800=%u [%llu %llu] hgaccel=%u [%llu %llu] trigger=%u [%llu %llu] dm6=%u [%llu %llu] gps=%u [%llu %llu] steps=%u [%llu %llu] audio=%u [%llu %llu] pressure=%u [%llu %llu] hertzSample=%u [%llu %llu] companionStatus=%u [%llu %llu] remoteSample=%u [%llu %llu]", (uint8_t *)v60, 0x126u);
  }
}

