BOOL CMMsl::KappaSteps::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 0x10) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 8) == 0;
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
    return (*(_BYTE *)(a2 + 32) & 8) != 0 && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
  return v2;
}

BOOL CMMsl::SignificantUserInteraction::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

BOOL CMMsl::KappaRoads::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 8) == 0;
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
    return (*(_BYTE *)(a2 + 32) & 8) != 0 && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28);
  return v2;
}

uint64_t CMMsl::UserStudyEvent::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 **v3;
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    return 0;
  }
  v2 = *(unsigned __int8 **)(a1 + 8);
  v3 = *(unsigned __int8 ***)(a2 + 8);
  result = v3 == 0;
  if (!v2)
    return result;
  if (!v3)
    return 0;
  v5 = v2[23];
  if ((v5 & 0x80u) == 0)
    v6 = (unsigned __int8 *)v2[23];
  else
    v6 = (unsigned __int8 *)*((_QWORD *)v2 + 1);
  v7 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  v8 = (char)v7;
  if ((char)v7 < 0)
    v7 = v3[1];
  if (v6 != v7)
    return 0;
  if (v8 >= 0)
    v9 = *(unsigned __int8 **)(a2 + 8);
  else
    v9 = *v3;
  if ((v5 & 0x80) != 0)
    return !memcmp(*(const void **)v2, v9, *((_QWORD *)v2 + 1));
  if (!v2[23])
    return 1;
  v10 = v5 - 1;
  do
  {
    v12 = *v2++;
    v11 = v12;
    v14 = *v9++;
    v13 = v14;
    v16 = v10-- != 0;
    result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

BOOL CMMsl::TempestPoCAuxiliaryDeviceMotion::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  float *v6;
  float *v7;
  float *v8;
  __int16 v9;
  __int16 v10;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a2 + 80);
  if (v4)
  {
    if (!v5 || !CMMsl::AuxiliaryDeviceMotion::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v7 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  v8 = *(float **)(a2 + 8);
  if ((char *)v6 - (char *)v7 == *(_QWORD *)(a2 + 16) - (_QWORD)v8)
  {
    while (v7 != v6)
    {
      if (*v7 != *v8)
        return 0;
      ++v7;
      ++v8;
    }
    v9 = *(_WORD *)(a1 + 104);
    v10 = *(_WORD *)(a2 + 104);
    if ((v9 & 0x80) != 0)
    {
      if ((v10 & 0x80) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
        return 0;
    }
    else if ((v10 & 0x80) != 0)
    {
      return 0;
    }
    if ((v9 & 0x40) != 0)
    {
      if ((v10 & 0x40) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88))
        return 0;
    }
    else if ((v10 & 0x40) != 0)
    {
      return 0;
    }
    if ((*(_WORD *)(a1 + 104) & 0x100) != 0)
    {
      if ((*(_WORD *)(a2 + 104) & 0x100) == 0 || *(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96))
        return 0;
    }
    else if ((*(_WORD *)(a2 + 104) & 0x100) != 0)
    {
      return 0;
    }
    if ((*(_WORD *)(a1 + 104) & 0x200) != 0)
    {
      if ((*(_WORD *)(a2 + 104) & 0x200) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
        return 0;
    }
    else if ((*(_WORD *)(a2 + 104) & 0x200) != 0)
    {
      return 0;
    }
    if ((v9 & 2) != 0)
    {
      if ((v10 & 2) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
        return 0;
    }
    else if ((v10 & 2) != 0)
    {
      return 0;
    }
    if ((v9 & 4) != 0)
    {
      if ((v10 & 4) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
        return 0;
    }
    else if ((v10 & 4) != 0)
    {
      return 0;
    }
    if ((v9 & 0x10) != 0)
    {
      if ((v10 & 0x10) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
        return 0;
    }
    else if ((v10 & 0x10) != 0)
    {
      return 0;
    }
    if ((v9 & 0x20) != 0)
    {
      if ((v10 & 0x20) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
        return 0;
    }
    else if ((v10 & 0x20) != 0)
    {
      return 0;
    }
    if ((v9 & 1) != 0)
    {
      if ((v10 & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
        return 0;
    }
    else if ((v10 & 1) != 0)
    {
      return 0;
    }
    result = (v10 & 8) == 0;
    if ((v9 & 8) == 0)
      return result;
    if ((v10 & 8) != 0 && *(double *)(a1 + 56) == *(double *)(a2 + 56))
      return 1;
  }
  return 0;
}

BOOL CMMsl::TempestPoCListenerOrientation::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  float *v4;
  float *v5;
  float *v6;
  _BOOL8 v7;

  v2 = *(_WORD *)(a1 + 96);
  v3 = *(_WORD *)(a2 + 96);
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 96) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 96) & 0x200) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 96) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 96) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 96) & 0x100) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 96) & 0x100) != 0)
  {
    return 0;
  }
  v5 = *(float **)(a1 + 8);
  v4 = *(float **)(a1 + 16);
  v6 = *(float **)(a2 + 8);
  if ((char *)v4 - (char *)v5 != *(_QWORD *)(a2 + 16) - (_QWORD)v6)
    return 0;
  while (v5 != v4)
  {
    if (*v5 != *v6)
      return 0;
    ++v5;
    ++v6;
  }
  if ((*(_WORD *)(a1 + 96) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 96) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 92) != *(unsigned __int8 *)(a2 + 92))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 96) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  v7 = (v3 & 2) == 0;
  if ((v2 & 2) != 0)
    return (v3 & 2) != 0 && *(double *)(a1 + 40) == *(double *)(a2 + 40);
  return v7;
}

BOOL CMMsl::WorkoutRecorderAccel800::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::Accel::operator==(v2, v3);
  return result;
}

BOOL CMMsl::WorkoutRecorderALSData::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
  {
    if (v3)
    {
      if ((*(_BYTE *)(v2 + 12) & 1) != 0)
      {
        if ((*(_BYTE *)(v3 + 12) & 1) == 0 || *(float *)(v2 + 8) != *(float *)(v3 + 8))
          return 0;
      }
      else if ((*(_BYTE *)(v3 + 12) & 1) != 0)
      {
        return 0;
      }
      return 1;
    }
    return 0;
  }
  return result;
}

BOOL CMMsl::VisualLocalization::operator==(uint64_t a1, uint64_t a2)
{
  double *v2;
  double *v3;
  double *v4;
  float *v5;
  float *v6;
  float *v7;
  _BOOL8 v8;

  if ((*(_BYTE *)(a1 + 100) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 100) & 0x10) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 100) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 100) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 100) & 4) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 100) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 100) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 100) & 8) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 100) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 100) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 100) & 1) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 100) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 100) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 100) & 2) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 100) & 2) != 0)
  {
    return 0;
  }
  v3 = *(double **)(a1 + 32);
  v2 = *(double **)(a1 + 40);
  v4 = *(double **)(a2 + 32);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 40) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(float **)(a1 + 8);
  v5 = *(float **)(a1 + 16);
  v7 = *(float **)(a2 + 8);
  if ((char *)v5 - (char *)v6 != *(_QWORD *)(a2 + 16) - (_QWORD)v7)
    return 0;
  while (v6 != v5)
  {
    if (*v6 != *v7)
      return 0;
    ++v6;
    ++v7;
  }
  v8 = (*(_BYTE *)(a2 + 100) & 0x20) == 0;
  if ((*(_BYTE *)(a1 + 100) & 0x20) != 0)
    return (*(_BYTE *)(a2 + 100) & 0x20) != 0 && *(float *)(a1 + 96) == *(float *)(a2 + 96);
  return v8;
}

BOOL CMMsl::SoundPressureLevel::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 1) == 0;
  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
    return (*(_BYTE *)(a2 + 20) & 1) != 0 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  return v2;
}

BOOL CMMsl::MotionLocation::operator==(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  _BOOL8 v15;

  v3 = *(_DWORD *)(a1 + 220);
  v4 = *(_DWORD *)(a2 + 220);
  if ((v3 & 0x40000) != 0)
  {
    if ((v4 & 0x40000) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 152) != *(double *)(a2 + 152))
      return 0;
  }
  else if ((v4 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100) != 0)
  {
    if ((v4 & 0x100) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((v4 & 0x100) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200) != 0)
  {
    if ((v4 & 0x200) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((v4 & 0x200) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10000) != 0)
  {
    if ((v4 & 0x10000) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 136) != *(double *)(a2 + 136))
      return 0;
  }
  else if ((v4 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20000) != 0)
  {
    if ((v4 & 0x20000) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 144) != *(double *)(a2 + 144))
      return 0;
  }
  else if ((v4 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80) != 0)
  {
    if ((v4 & 0x80) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v4 & 0x80) != 0)
  {
    return 0;
  }
  if ((v3 & 2) != 0)
  {
    if ((v4 & 2) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v4 & 2) != 0)
  {
    return 0;
  }
  if ((v3 & 4) != 0)
  {
    if ((v4 & 4) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v4 & 4) != 0)
  {
    return 0;
  }
  if ((v3 & 1) != 0)
  {
    if ((v4 & 1) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v4 & 1) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100000) != 0)
  {
    if ((v4 & 0x100000) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 168) != *(double *)(a2 + 168))
      return 0;
  }
  else if ((v4 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10000000) != 0)
  {
    if ((v4 & 0x10000000) == 0)
      return 0;
    v5 = *(_DWORD *)(a1 + 204);
    v6 = *(_DWORD *)(a2 + 204);
    v2 = __OFSUB__(v5, v6);
    if (v5 != v6)
      return 0;
  }
  else if ((v4 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80000) != 0)
  {
    if ((v4 & 0x80000) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 160) != *(double *)(a2 + 160))
      return 0;
  }
  else if ((v4 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20000000) != 0)
  {
    if ((v4 & 0x20000000) == 0)
      return 0;
    v2 = 0;
    if (*(float *)(a1 + 208) != *(float *)(a2 + 208))
      return 0;
  }
  else if ((v4 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40000000) != 0)
  {
    if ((v4 & 0x40000000) == 0)
      return 0;
    v7 = *(_DWORD *)(a1 + 212);
    v8 = *(_DWORD *)(a2 + 212);
    v2 = __OFSUB__(v7, v8);
    if (v7 != v8)
      return 0;
  }
  else if ((v4 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200000) != 0)
  {
    if ((v4 & 0x200000) == 0)
      return 0;
    v2 = 0;
    if (*(float *)(a1 + 176) != *(float *)(a2 + 176))
      return 0;
  }
  else if ((v4 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800000) != 0)
  {
    if ((v4 & 0x800000) == 0)
      return 0;
    v2 = 0;
    if (*(float *)(a1 + 184) != *(float *)(a2 + 184))
      return 0;
  }
  else if ((v4 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400000) != 0)
  {
    if ((v4 & 0x400000) == 0)
      return 0;
    v2 = 0;
    if (*(float *)(a1 + 180) != *(float *)(a2 + 180))
      return 0;
  }
  else if ((v4 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800) != 0)
  {
    if ((v4 & 0x800) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 96) != *(double *)(a2 + 96))
      return 0;
  }
  else if ((v4 & 0x800) != 0)
  {
    return 0;
  }
  if ((v3 & 8) != 0)
  {
    if ((v4 & 8) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v4 & 8) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10) != 0)
  {
    if ((v4 & 0x10) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v4 & 0x10) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000000) != 0)
  {
    if ((v4 & 0x2000000) == 0)
      return 0;
    v9 = *(_DWORD *)(a1 + 192);
    v10 = *(_DWORD *)(a2 + 192);
    v2 = __OFSUB__(v9, v10);
    if (v9 != v10)
      return 0;
  }
  else if ((v4 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000000) != 0)
  {
    if ((v4 & 0x8000000) == 0)
      return 0;
    v11 = *(_DWORD *)(a1 + 200);
    v12 = *(_DWORD *)(a2 + 200);
    v2 = __OFSUB__(v11, v12);
    if (v11 != v12)
      return 0;
  }
  else if ((v4 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000000) != 0)
  {
    if ((v4 & 0x1000000) == 0)
      return 0;
    v13 = *(_DWORD *)(a1 + 188);
    v14 = *(_DWORD *)(a2 + 188);
    v2 = __OFSUB__(v13, v14);
    if (v13 != v14)
      return 0;
  }
  else if ((v4 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20) != 0)
  {
    if ((v4 & 0x20) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v4 & 0x20) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40) != 0)
  {
    if ((v4 & 0x40) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v4 & 0x40) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000) != 0)
  {
    if ((v4 & 0x8000) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 128) != *(double *)(a2 + 128))
      return 0;
  }
  else if ((v4 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400) != 0)
  {
    if ((v4 & 0x400) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 88) != *(double *)(a2 + 88))
      return 0;
  }
  else if ((v4 & 0x400) != 0)
  {
    return 0;
  }
  if ((v3 & v4) < 0 != v2)
  {
    if (*(unsigned __int8 *)(a1 + 216) != *(unsigned __int8 *)(a2 + 216))
      return 0;
  }
  else if ((v3 | v4) < 0)
  {
    return 0;
  }
  if ((v3 & 0x1000) != 0)
  {
    if ((v4 & 0x1000) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104))
      return 0;
  }
  else if ((v4 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000) != 0)
  {
    if ((v4 & 0x4000) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120))
      return 0;
  }
  else if ((v4 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000) != 0)
  {
    if ((v4 & 0x2000) == 0 || *(double *)(a1 + 112) != *(double *)(a2 + 112))
      return 0;
  }
  else if ((v4 & 0x2000) != 0)
  {
    return 0;
  }
  v15 = (v4 & 0x4000000) == 0;
  if ((v3 & 0x4000000) != 0)
    return (v4 & 0x4000000) != 0 && *(_DWORD *)(a1 + 196) == *(_DWORD *)(a2 + 196);
  return v15;
}

BOOL CMMsl::MotionActivity::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 116);
  v3 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(unsigned __int8 *)(a1 + 108) != *(unsigned __int8 *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(unsigned __int8 *)(a1 + 109) != *(unsigned __int8 *)(a2 + 109))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(unsigned __int8 *)(a1 + 113) != *(unsigned __int8 *)(a2 + 113))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(unsigned __int8 *)(a1 + 112) != *(unsigned __int8 *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(unsigned __int8 *)(a1 + 110) != *(unsigned __int8 *)(a2 + 110))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(unsigned __int8 *)(a1 + 114) != *(unsigned __int8 *)(a2 + 114))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(unsigned __int8 *)(a1 + 111) != *(unsigned __int8 *)(a2 + 111))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(_DWORD *)(a1 + 100) != *(_DWORD *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(_DWORD *)(a1 + 104) != *(_DWORD *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 116) & 0x2000) == 0;
  if ((v2 & 0x2000) != 0)
    return (v3 & 0x2000) != 0 && *(_DWORD *)(a1 + 80) == *(_DWORD *)(a2 + 80);
  return v4;
}

BOOL CMMsl::KappaTrigger::operator==(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  double *v8;
  double *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  _BOOL8 v16;

  v3 = *(_DWORD *)(a1 + 212);
  v4 = *(_DWORD *)(a2 + 212);
  if ((v3 & 4) != 0)
  {
    if ((v4 & 4) == 0)
      return 0;
    v5 = *(_QWORD *)(a1 + 96);
    v6 = *(_QWORD *)(a2 + 96);
    v2 = __OFSUB__(v5, v6);
    if (v5 != v6)
      return 0;
  }
  else if ((v4 & 4) != 0)
  {
    return 0;
  }
  if ((v3 & v4) < 0 != v2)
  {
    if (*(unsigned __int8 *)(a1 + 211) != *(unsigned __int8 *)(a2 + 211))
      return 0;
  }
  else if ((v3 | v4) < 0)
  {
    return 0;
  }
  if ((v3 & 1) != 0)
  {
    if ((v4 & 1) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((v4 & 1) != 0)
  {
    return 0;
  }
  v8 = *(double **)(a1 + 8);
  v7 = *(double **)(a1 + 16);
  v9 = *(double **)(a2 + 8);
  if ((char *)v7 - (char *)v8 != *(_QWORD *)(a2 + 16) - (_QWORD)v9)
    return 0;
  while (v8 != v7)
  {
    if (*v8 != *v9)
      return 0;
    ++v8;
    ++v9;
  }
  v11 = *(float **)(a1 + 56);
  v10 = *(float **)(a1 + 64);
  v12 = *(float **)(a2 + 56);
  if ((char *)v10 - (char *)v11 != *(_QWORD *)(a2 + 64) - (_QWORD)v12)
    return 0;
  while (v11 != v10)
  {
    if (*v11 != *v12)
      return 0;
    ++v11;
    ++v12;
  }
  v14 = *(float **)(a1 + 32);
  v13 = *(float **)(a1 + 40);
  v15 = *(float **)(a2 + 32);
  if ((char *)v13 - (char *)v14 != *(_QWORD *)(a2 + 40) - (_QWORD)v15)
    return 0;
  while (v14 != v13)
  {
    if (*v14 != *v15)
      return 0;
    ++v14;
    ++v15;
  }
  if ((v3 & 0x10000000) != 0)
  {
    if ((v4 & 0x10000000) == 0 || *(unsigned __int8 *)(a1 + 208) != *(unsigned __int8 *)(a2 + 208))
      return 0;
  }
  else if ((v4 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20000000) != 0)
  {
    if ((v4 & 0x20000000) == 0 || *(unsigned __int8 *)(a1 + 209) != *(unsigned __int8 *)(a2 + 209))
      return 0;
  }
  else if ((v4 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400000) != 0)
  {
    if ((v4 & 0x400000) == 0 || *(_DWORD *)(a1 + 184) != *(_DWORD *)(a2 + 184))
      return 0;
  }
  else if ((v4 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10) != 0)
  {
    if ((v4 & 0x10) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112))
      return 0;
  }
  else if ((v4 & 0x10) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80000) != 0)
  {
    if ((v4 & 0x80000) == 0 || *(_DWORD *)(a1 + 172) != *(_DWORD *)(a2 + 172))
      return 0;
  }
  else if ((v4 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40000) != 0)
  {
    if ((v4 & 0x40000) == 0 || *(_DWORD *)(a1 + 168) != *(_DWORD *)(a2 + 168))
      return 0;
  }
  else if ((v4 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20000) != 0)
  {
    if ((v4 & 0x20000) == 0 || *(_DWORD *)(a1 + 164) != *(_DWORD *)(a2 + 164))
      return 0;
  }
  else if ((v4 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10000) != 0)
  {
    if ((v4 & 0x10000) == 0 || *(_DWORD *)(a1 + 160) != *(_DWORD *)(a2 + 160))
      return 0;
  }
  else if ((v4 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000) != 0)
  {
    if ((v4 & 0x8000) == 0 || *(_DWORD *)(a1 + 156) != *(_DWORD *)(a2 + 156))
      return 0;
  }
  else if ((v4 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000) != 0)
  {
    if ((v4 & 0x4000) == 0 || *(_DWORD *)(a1 + 152) != *(_DWORD *)(a2 + 152))
      return 0;
  }
  else if ((v4 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000) != 0)
  {
    if ((v4 & 0x2000) == 0 || *(_DWORD *)(a1 + 148) != *(_DWORD *)(a2 + 148))
      return 0;
  }
  else if ((v4 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100000) != 0)
  {
    if ((v4 & 0x100000) == 0 || *(_DWORD *)(a1 + 176) != *(_DWORD *)(a2 + 176))
      return 0;
  }
  else if ((v4 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100) != 0)
  {
    if ((v4 & 0x100) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128))
      return 0;
  }
  else if ((v4 & 0x100) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000000) != 0)
  {
    if ((v4 & 0x1000000) == 0 || *(_DWORD *)(a1 + 192) != *(_DWORD *)(a2 + 192))
      return 0;
  }
  else if ((v4 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20) != 0)
  {
    if ((v4 & 0x20) == 0 || *(_DWORD *)(a1 + 116) != *(_DWORD *)(a2 + 116))
      return 0;
  }
  else if ((v4 & 0x20) != 0)
  {
    return 0;
  }
  if ((v3 & 8) != 0)
  {
    if ((v4 & 8) == 0 || *(_QWORD *)(a1 + 104) != *(_QWORD *)(a2 + 104))
      return 0;
  }
  else if ((v4 & 8) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000000) != 0)
  {
    if ((v4 & 0x2000000) == 0 || *(float *)(a1 + 196) != *(float *)(a2 + 196))
      return 0;
  }
  else if ((v4 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000000) != 0)
  {
    if ((v4 & 0x4000000) == 0 || *(float *)(a1 + 200) != *(float *)(a2 + 200))
      return 0;
  }
  else if ((v4 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000000) != 0)
  {
    if ((v4 & 0x8000000) == 0 || *(float *)(a1 + 204) != *(float *)(a2 + 204))
      return 0;
  }
  else if ((v4 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800) != 0)
  {
    if ((v4 & 0x800) == 0 || *(_DWORD *)(a1 + 140) != *(_DWORD *)(a2 + 140))
      return 0;
  }
  else if ((v4 & 0x800) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80) != 0)
  {
    if ((v4 & 0x80) == 0 || *(_DWORD *)(a1 + 124) != *(_DWORD *)(a2 + 124))
      return 0;
  }
  else if ((v4 & 0x80) != 0)
  {
    return 0;
  }
  if ((v3 & 2) != 0)
  {
    if ((v4 & 2) == 0 || *(_QWORD *)(a1 + 88) != *(_QWORD *)(a2 + 88))
      return 0;
  }
  else if ((v4 & 2) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40000000) != 0)
  {
    if ((v4 & 0x40000000) == 0 || *(unsigned __int8 *)(a1 + 210) != *(unsigned __int8 *)(a2 + 210))
      return 0;
  }
  else if ((v4 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000) != 0)
  {
    if ((v4 & 0x1000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144))
      return 0;
  }
  else if ((v4 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200) != 0)
  {
    if ((v4 & 0x200) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132))
      return 0;
  }
  else if ((v4 & 0x200) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40) != 0)
  {
    if ((v4 & 0x40) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120))
      return 0;
  }
  else if ((v4 & 0x40) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200000) != 0)
  {
    if ((v4 & 0x200000) == 0 || *(_DWORD *)(a1 + 180) != *(_DWORD *)(a2 + 180))
      return 0;
  }
  else if ((v4 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400) != 0)
  {
    if ((v4 & 0x400) == 0 || *(_DWORD *)(a1 + 136) != *(_DWORD *)(a2 + 136))
      return 0;
  }
  else if ((v4 & 0x400) != 0)
  {
    return 0;
  }
  v16 = (v4 & 0x800000) == 0;
  if ((v3 & 0x800000) != 0)
    return (v4 & 0x800000) != 0 && *(_DWORD *)(a1 + 188) == *(_DWORD *)(a2 + 188);
  return v16;
}

BOOL CMMsl::RelDMInSystemConfig::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  _BOOL8 result;

  v4 = *(unsigned __int8 **)(a1 + 8);
  v5 = *(unsigned __int8 ***)(a2 + 8);
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = v4[23];
    if ((v6 & 0x80u) == 0)
      v7 = (unsigned __int8 *)v4[23];
    else
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    v9 = (char)v8;
    if ((char)v8 < 0)
      v8 = v5[1];
    if (v7 != v8)
      return 0;
    if (v9 >= 0)
      v10 = *(unsigned __int8 **)(a2 + 8);
    else
      v10 = *v5;
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)))
        return 0;
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6)
          goto LABEL_18;
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  result = (*(_BYTE *)(a2 + 24) & 1) == 0;
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
    return result;
  return (*(_BYTE *)(a2 + 24) & 1) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
}

BOOL CMMsl::JointLinkModelPose::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::BioMotionPose::operator==(v2, v3);
  return result;
}

BOOL CMMsl::ModelBasedBioMotionClassification::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::BioMotionClassification::operator==(v2, v3);
  return result;
}

BOOL CMMsl::MLBasedBioMotionClassification::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::BioMotionClassification::operator==(v2, v3);
  return result;
}

BOOL CMMsl::JointLinkModelPredictedPose::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::BioMotionPredictedPose::operator==(v2, v3);
  return result;
}

BOOL CMMsl::PressureCompensated::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::Pressure::operator==(v2, v3);
  return result;
}

BOOL CMMsl::VO2MaxOutput::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 72);
  v3 = *(_WORD *)(a2 + 72);
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 72) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 72) & 0x100) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 72) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x80) == 0;
  if ((v2 & 0x80) != 0)
    return (v3 & 0x80) != 0 && *(_DWORD *)(a1 + 64) == *(_DWORD *)(a2 + 64);
  return v4;
}

BOOL CMMsl::MagneticAccessoryType1::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  _BOOL8 result;

  v4 = *(unsigned __int8 **)(a1 + 8);
  v5 = *(unsigned __int8 ***)(a2 + 8);
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = v4[23];
    if ((v6 & 0x80u) == 0)
      v7 = (unsigned __int8 *)v4[23];
    else
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    v9 = (char)v8;
    if ((char)v8 < 0)
      v8 = v5[1];
    if (v7 != v8)
      return 0;
    if (v9 >= 0)
      v10 = *(unsigned __int8 **)(a2 + 8);
    else
      v10 = *v5;
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)))
        return 0;
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6)
          goto LABEL_18;
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    return 0;
  }
  result = (*(_BYTE *)(a2 + 24) & 2) == 0;
  if ((*(_BYTE *)(a1 + 24) & 2) == 0)
    return result;
  return (*(_BYTE *)(a2 + 24) & 2) != 0 && *(unsigned __int8 *)(a1 + 20) == *(unsigned __int8 *)(a2 + 20);
}

BOOL CMMsl::MagneticAccessoryType2::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 12);
  result = (*(_BYTE *)(a2 + 12) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 12) & 1) != 0 && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8);
  return result;
}

BOOL CMMsl::PressureCalibration::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 0x20) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 0x10) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 8) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 4) == 0;
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
    return (*(_BYTE *)(a2 + 32) & 4) != 0 && *(float *)(a1 + 16) == *(float *)(a2 + 16);
  return v2;
}

BOOL CMMsl::WorkoutRecorderMagnetometer::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::Magnetometer::operator==(v2, v3);
  return result;
}

BOOL CMMsl::WorkoutRecorderCompassCalibration::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::CompassCalibration::operator==(v2, v3);
  return result;
}

BOOL CMMsl::RawAudio::operator==(uint64_t a1, uint64_t a2)
{
  const void *v2;
  uint64_t v3;
  size_t v4;
  const void *v5;
  uint64_t v6;

  v3 = a1 + 8;
  v2 = *(const void **)(a1 + 8);
  v4 = *(_QWORD *)(v3 + 8) - (_QWORD)v2;
  v6 = a2 + 8;
  v5 = *(const void **)(a2 + 8);
  return v4 == *(_QWORD *)(v6 + 8) - (_QWORD)v5 && memcmp(v2, v5, v4) == 0;
}

BOOL CMMsl::ODTPose::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double *v4;
  uint64_t v5;
  double v6;
  _BOOL8 result;
  BOOL v8;

  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    return 0;
  }
  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(double **)(a2 + 8);
  if (v2 - v3 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  if (v3 == v2)
    return 1;
  v5 = v3 + 8;
  do
  {
    v6 = *v4++;
    result = *(double *)(v5 - 8) == v6;
    v8 = *(double *)(v5 - 8) != v6 || v5 == v2;
    v5 += 8;
  }
  while (!v8);
  return result;
}

BOOL CMMsl::PencilTipForce::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 24) & 2) == 0;
  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
    return (*(_BYTE *)(a2 + 24) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  return v2;
}

BOOL CMMsl::PencilTouch::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 88);
  v3 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 88) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x400) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 88) & 0x400) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x200) == 0 || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 88) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x10) == 0;
  if ((v2 & 0x10) != 0)
    return (v3 & 0x10) != 0 && *(double *)(a1 + 40) == *(double *)(a2 + 40);
  return v4;
}

BOOL CMMsl::Timestamp::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 1) == 0;
  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
    return (*(_BYTE *)(a2 + 20) & 1) != 0 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  return v2;
}

BOOL CMMsl::WalkingSteadinessClassification::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL8 result;

  v2 = *(_DWORD *)(a1 + 244);
  v3 = *(_DWORD *)(a2 + 244);
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(_DWORD *)(a1 + 220) != *(_DWORD *)(a2 + 220))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(_DWORD *)(a1 + 216) != *(_DWORD *)(a2 + 216))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 228) != *(float *)(a2 + 228))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(unsigned __int8 *)(a1 + 241) != *(unsigned __int8 *)(a2 + 241))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 232) != *(float *)(a2 + 232))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(unsigned __int8 *)(a1 + 242) != *(unsigned __int8 *)(a2 + 242))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(double *)(a1 + 176) != *(double *)(a2 + 176))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(unsigned __int8 *)(a1 + 238) != *(unsigned __int8 *)(a2 + 238))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(_QWORD *)(a2 + 64);
  if (v4)
  {
    if (!v5 || !CMMsl::SteadinessEvent::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(double *)(a1 + 192) != *(double *)(a2 + 192))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(unsigned __int8 *)(a1 + 239) != *(unsigned __int8 *)(a2 + 239))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(double *)(a1 + 184) != *(double *)(a2 + 184))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(unsigned __int8 *)(a1 + 237) != *(unsigned __int8 *)(a2 + 237))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  v6 = *(_QWORD *)(a1 + 120);
  v7 = *(_QWORD *)(a2 + 120);
  if (v6)
  {
    if (!v7 || !CMMsl::SteadinessModelResult::operator==(v6, v7))
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  v8 = *(_QWORD *)(a1 + 112);
  v9 = *(_QWORD *)(a2 + 112);
  if (v8)
  {
    if (!v9 || !CMMsl::SteadinessModelGaitBaselineFeatures::operator==(v8, v9))
      return 0;
  }
  else if (v9)
  {
    return 0;
  }
  v10 = *(_QWORD *)(a1 + 104);
  v11 = *(_QWORD *)(a2 + 104);
  if (v10)
  {
    if (!v11 || !CMMsl::SteadinessModelResult::operator==(v10, v11))
      return 0;
  }
  else if (v11)
  {
    return 0;
  }
  v12 = *(_QWORD *)(a1 + 96);
  v13 = *(_QWORD *)(a2 + 96);
  if (v12)
  {
    if (!v13 || !CMMsl::SteadinessModelContinuousWalkingFeatures::operator==(v12, v13))
      return 0;
  }
  else if (v13)
  {
    return 0;
  }
  v14 = *(_QWORD *)(a1 + 152);
  v15 = *(_QWORD *)(a2 + 152);
  if (v14)
  {
    if (!v15 || !CMMsl::SteadinessModelResult::operator==(v14, v15))
      return 0;
  }
  else if (v15)
  {
    return 0;
  }
  v16 = *(_QWORD *)(a1 + 144);
  v17 = *(_QWORD *)(a2 + 144);
  if (v16)
  {
    if (!v17 || !CMMsl::SteadinessModelTemporalDispersionFeatures::operator==(v16, v17))
      return 0;
  }
  else if (v17)
  {
    return 0;
  }
  v18 = *(_QWORD *)(a1 + 168);
  v19 = *(_QWORD *)(a2 + 168);
  if (v18)
  {
    if (!v19 || !CMMsl::SteadinessModelResult::operator==(v18, v19))
      return 0;
  }
  else if (v19)
  {
    return 0;
  }
  v20 = *(_QWORD *)(a1 + 160);
  v21 = *(_QWORD *)(a2 + 160);
  if (v20)
  {
    if (!v21 || !CMMsl::SteadinessModelTemporalEntropyFeatures::operator==(v20, v21))
      return 0;
  }
  else if (v21)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(unsigned __int8 *)(a1 + 236) != *(unsigned __int8 *)(a2 + 236))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  v22 = *(_QWORD *)(a1 + 88);
  v23 = *(_QWORD *)(a2 + 88);
  if (v22)
  {
    if (!v23 || !CMMsl::SteadinessModelBalanceFeatures::operator==(v22, v23))
      return 0;
  }
  else if (v23)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 224) != *(float *)(a2 + 224))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(unsigned __int8 *)(a1 + 240) != *(unsigned __int8 *)(a2 + 240))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(double *)(a1 + 200) != *(double *)(a2 + 200))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(_DWORD *)(a1 + 212) != *(_DWORD *)(a2 + 212))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(_DWORD *)(a1 + 208) != *(_DWORD *)(a2 + 208))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  v24 = *(_QWORD *)(a1 + 136);
  v25 = *(_QWORD *)(a2 + 136);
  if (v24)
  {
    if (!v25 || !CMMsl::SteadinessModelResult::operator==(v24, v25))
      return 0;
  }
  else if (v25)
  {
    return 0;
  }
  v26 = *(_QWORD *)(a2 + 128);
  result = v26 == 0;
  if (!*(_QWORD *)(a1 + 128))
    return result;
  return v26 && CMMsl::SteadinessModelHarmonicFeatures::operator==(*(_QWORD *)(a1 + 128), v26);
}

BOOL CMMsl::SteadinessModelResult::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(unsigned __int8 *)(a1 + 52);
  v3 = *(unsigned __int8 *)(a2 + 52);
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & v3 & 0x80) != 0)
  {
    if (*(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
      return 0;
  }
  else if (((v2 | v3) & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x20) == 0;
  if ((v2 & 0x20) != 0)
    return (v3 & 0x20) != 0 && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40);
  return v4;
}

BOOL CMMsl::SteadinessEvent::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 60);
  v3 = *(_WORD *)(a2 + 60);
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x200) == 0 || *(unsigned __int8 *)(a1 + 55) != *(unsigned __int8 *)(a2 + 55))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 60) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 56) != *(unsigned __int8 *)(a2 + 56))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 60) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(unsigned __int8 *)(a1 + 52) != *(unsigned __int8 *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(unsigned __int8 *)(a1 + 53) != *(unsigned __int8 *)(a2 + 53))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 54) != *(unsigned __int8 *)(a2 + 54))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 60) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x10) == 0;
  if ((v2 & 0x10) != 0)
    return (v3 & 0x10) != 0 && *(double *)(a1 + 40) == *(double *)(a2 + 40);
  return v4;
}

BOOL CMMsl::SteadinessModelGaitBaselineFeatures::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 88);
  v3 = *(_WORD *)(a2 + 88);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 88) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 88) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x20) == 0;
  if ((v2 & 0x20) != 0)
    return (v3 & 0x20) != 0 && *(double *)(a1 + 48) == *(double *)(a2 + 48);
  return v4;
}

BOOL CMMsl::SteadinessModelContinuousWalkingFeatures::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 176);
  v3 = *(_DWORD *)(a2 + 176);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(double *)(a1 + 96) != *(double *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(double *)(a1 + 160) != *(double *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(double *)(a1 + 168) != *(double *)(a2 + 168))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(double *)(a1 + 144) != *(double *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(double *)(a1 + 128) != *(double *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(double *)(a1 + 152) != *(double *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(double *)(a1 + 112) != *(double *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(double *)(a1 + 136) != *(double *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 176) & 0x1000) == 0;
  if ((v2 & 0x1000) != 0)
    return (v3 & 0x1000) != 0 && *(double *)(a1 + 104) == *(double *)(a2 + 104);
  return v4;
}

BOOL CMMsl::SteadinessModelTemporalDispersionFeatures::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 40) & 1) == 0;
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    return (*(_BYTE *)(a2 + 40) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return v2;
}

BOOL CMMsl::SteadinessModelTemporalEntropyFeatures::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 216);
  v3 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(double *)(a1 + 160) != *(double *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(double *)(a1 + 152) != *(double *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(double *)(a1 + 168) != *(double *)(a2 + 168))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(double *)(a1 + 184) != *(double *)(a2 + 184))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(double *)(a1 + 176) != *(double *)(a2 + 176))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(double *)(a1 + 192) != *(double *)(a2 + 192))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(double *)(a1 + 208) != *(double *)(a2 + 208))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(double *)(a1 + 200) != *(double *)(a2 + 200))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(double *)(a1 + 112) != *(double *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(double *)(a1 + 128) != *(double *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(double *)(a1 + 144) != *(double *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(double *)(a1 + 136) != *(double *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(double *)(a1 + 96) != *(double *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 216) & 0x1000) == 0;
  if ((v2 & 0x1000) != 0)
    return (v3 & 0x1000) != 0 && *(double *)(a1 + 104) == *(double *)(a2 + 104);
  return v4;
}

BOOL CMMsl::SteadinessModelBalanceFeatures::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 40) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 40) & 8) == 0;
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
    return (*(_BYTE *)(a2 + 40) & 8) != 0 && *(double *)(a1 + 32) == *(double *)(a2 + 32);
  return v2;
}

BOOL CMMsl::MagnetometerReset::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 44) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 0x40) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 0x40) == 0 || *(unsigned __int8 *)(a1 + 42) != *(unsigned __int8 *)(a2 + 42))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 0x10) == 0 || *(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(a2 + 40))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 0x10) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 44) & 0x20) == 0;
  if ((*(_BYTE *)(a1 + 44) & 0x20) != 0)
    return (*(_BYTE *)(a2 + 44) & 0x20) != 0 && *(unsigned __int8 *)(a1 + 41) == *(unsigned __int8 *)(a2 + 41);
  return v2;
}

BOOL CMMsl::WorkoutRecorderWatchOnWristStatus::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::WatchOnWristState::operator==(v2, v3);
  return result;
}

BOOL CMMsl::LiftToWakeOnHeadStatus::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 2) == 0;
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
    return (*(_BYTE *)(a2 + 28) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  return v2;
}

BOOL CMMsl::StepCountEntryAddition::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 72);
  v3 = *(_WORD *)(a2 + 72);
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 72) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 72) & 0x200) == 0 || *(unsigned __int8 *)(a1 + 69) != *(unsigned __int8 *)(a2 + 69))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 72) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 72) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 72) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 70) != *(unsigned __int8 *)(a2 + 70))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 72) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x100) == 0;
  if ((*(_WORD *)(a1 + 72) & 0x100) != 0)
    return (*(_WORD *)(a2 + 72) & 0x100) != 0 && *(unsigned __int8 *)(a1 + 68) == *(unsigned __int8 *)(a2 + 68);
  return v4;
}

BOOL CMMsl::StepDistanceFusionResult::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  __int16 v9;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    if (!v5 || !CMMsl::StepCountEntry::operator==(v4, v5) && *(_QWORD *)(a1 + 16) | *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    if (!v7 || !CMMsl::StepCountEntryAddition::operator==(v6, v7))
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  v8 = *(_WORD *)(a1 + 100);
  v9 = *(_WORD *)(a2 + 100);
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v9 & 1) != 0)
  {
    return 0;
  }
  if ((v8 & 2) != 0)
  {
    if ((v9 & 2) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v9 & 2) != 0)
  {
    return 0;
  }
  if ((v8 & 0x80) != 0)
  {
    if ((v9 & 0x80) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((v9 & 0x80) != 0)
  {
    return 0;
  }
  if ((v8 & 0x20) != 0)
  {
    if ((v9 & 0x20) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v9 & 0x20) != 0)
  {
    return 0;
  }
  if ((v8 & 0x40) != 0)
  {
    if ((v9 & 0x40) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((v9 & 0x40) != 0)
  {
    return 0;
  }
  if ((v8 & 4) != 0)
  {
    if ((v9 & 4) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v9 & 4) != 0)
  {
    return 0;
  }
  if ((v8 & 8) != 0)
  {
    if ((v9 & 8) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v9 & 8) != 0)
  {
    return 0;
  }
  if ((v8 & 0x10) != 0)
  {
    if ((v9 & 0x10) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v9 & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 100) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 100) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 96) != *(unsigned __int8 *)(a2 + 96))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 100) & 0x400) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 100) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 100) & 0x200) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 100) & 0x200) != 0)
  {
    return 0;
  }
  result = (v9 & 0x100) == 0;
  if ((*(_WORD *)(a1 + 100) & 0x100) == 0)
    return result;
  return (*(_WORD *)(a2 + 100) & 0x100) != 0 && *(_DWORD *)(a1 + 88) == *(_DWORD *)(a2 + 88);
}

BOOL CMMsl::Skeleton3D::operator==(uint64_t a1, uint64_t a2)
{
  return sub_1001F6B20((uint64_t *)(a1 + 8), a2 + 8);
}

BOOL CMMsl::LockScreenStatus::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 12);
  result = (*(_BYTE *)(a2 + 12) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 12) & 1) != 0 && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8);
  return result;
}

BOOL CMMsl::PowerManagementUserActivity::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 16);
  result = (*(_BYTE *)(a2 + 16) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 16) & 1) != 0 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  return result;
}

BOOL CMMsl::LiftToWakeState::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 2) == 0;
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
    return (*(_BYTE *)(a2 + 28) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  return v2;
}

BOOL CMMsl::ViewObstructedState::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 84);
  v3 = *(_DWORD *)(a2 + 84);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(unsigned __int8 *)(a1 + 80) != *(unsigned __int8 *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x40000) == 0;
  if ((v2 & 0x40000) != 0)
    return (v3 & 0x40000) != 0 && *(unsigned __int8 *)(a1 + 81) == *(unsigned __int8 *)(a2 + 81);
  return v4;
}

BOOL CMMsl::RunningFormMetrics::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;

  v2 = *(_QWORD *)(a1 + 224);
  v3 = *(_QWORD *)(a2 + 224);
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(unsigned __int8 *)(a1 + 220) != *(unsigned __int8 *)(a2 + 220))
      return 0;
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(unsigned __int8 *)(a1 + 217) != *(unsigned __int8 *)(a2 + 217))
      return 0;
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(double *)(a1 + 160) != *(double *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v3 & 0x400000000) == 0 || *(unsigned __int8 *)(a1 + 221) != *(unsigned __int8 *)(a2 + 221))
      return 0;
  }
  else if ((v3 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(unsigned __int8 *)(a1 + 216) != *(unsigned __int8 *)(a2 + 216))
      return 0;
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(unsigned __int8 *)(a1 + 218) != *(unsigned __int8 *)(a2 + 218))
      return 0;
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(double *)(a1 + 128) != *(double *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(double *)(a1 + 152) != *(double *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(_DWORD *)(a1 + 208) != *(_DWORD *)(a2 + 208))
      return 0;
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(_DWORD *)(a1 + 204) != *(_DWORD *)(a2 + 204))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(_DWORD *)(a1 + 212) != *(_DWORD *)(a2 + 212))
      return 0;
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(_DWORD *)(a1 + 192) != *(_DWORD *)(a2 + 192))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(_DWORD *)(a1 + 200) != *(_DWORD *)(a2 + 200))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(_DWORD *)(a1 + 196) != *(_DWORD *)(a2 + 196))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v3 & 0x100000000) == 0 || *(unsigned __int8 *)(a1 + 219) != *(unsigned __int8 *)(a2 + 219))
      return 0;
  }
  else if ((v3 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(double *)(a1 + 96) != *(double *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(double *)(a1 + 136) != *(double *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(double *)(a1 + 144) != *(double *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(double *)(a1 + 184) != *(double *)(a2 + 184))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(double *)(a1 + 112) != *(double *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(double *)(a1 + 168) != *(double *)(a2 + 168))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(double *)(a1 + 176) != *(double *)(a2 + 176))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  v4 = (*(_QWORD *)(a2 + 224) & 0x400) == 0;
  if ((v2 & 0x400) != 0)
    return (v3 & 0x400) != 0 && *(double *)(a1 + 88) == *(double *)(a2 + 88);
  return v4;
}

BOOL CMMsl::WorkoutSessionPriors::operator==(uint64_t a1, uint64_t a2)
{
  return sub_1002347FC((uint64_t *)(a1 + 8), a2 + 8);
}

BOOL CMMsl::WorkoutRecorderWorkoutSessionPriors::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return *(_QWORD *)(a2 + 8) == 0;
  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
    return 0;
  if (sub_1002347FC((uint64_t *)(v3 + 8), v4 + 8))
    return 1;
  return !*(_QWORD *)(a1 + 8) && *(_QWORD *)(a2 + 8) == 0;
}

BOOL CMMsl::PDRImpulse::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 1) == 0;
  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
    return (*(_BYTE *)(a2 + 20) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return v2;
}

BOOL CMMsl::PocketDetectionPacket::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 84);
  v3 = *(_WORD *)(a2 + 84);
  if ((v2 & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 84) & 0x200) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 84) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 84) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 84) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 80) != *(unsigned __int8 *)(a2 + 80))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 84) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 84) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 84) & 0x100) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 84) & 0x100) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x40) == 0;
  if ((v2 & 0x40) != 0)
    return (v3 & 0x40) != 0 && *(double *)(a1 + 56) == *(double *)(a2 + 56);
  return v4;
}

BOOL CMMsl::LiftToWakeFeaturesNeo::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 8) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 40) & 0x10) == 0;
  if ((*(_BYTE *)(a1 + 40) & 0x10) != 0)
    return (*(_BYTE *)(a2 + 40) & 0x10) != 0 && *(float *)(a1 + 36) == *(float *)(a2 + 36);
  return v2;
}

BOOL CMMsl::LiftToWakeStatusNeo::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 64);
  v3 = *(_WORD *)(a2 + 64);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x800) == 0 || *(unsigned __int8 *)(a1 + 60) != *(unsigned __int8 *)(a2 + 60))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x800) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x400) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x1000) == 0 || *(unsigned __int8 *)(a1 + 61) != *(unsigned __int8 *)(a2 + 61))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x100) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x200) == 0;
  if ((*(_WORD *)(a1 + 64) & 0x200) != 0)
    return (*(_WORD *)(a2 + 64) & 0x200) != 0 && *(_DWORD *)(a1 + 52) == *(_DWORD *)(a2 + 52);
  return v4;
}

BOOL CMMsl::RunningPower::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 128);
  v3 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(unsigned __int8 *)(a1 + 124) != *(unsigned __int8 *)(a2 + 124))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(double *)(a1 + 96) != *(double *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(_DWORD *)(a1 + 108) != *(_DWORD *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 104) != *(_DWORD *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(unsigned __int8 *)(a1 + 123) != *(unsigned __int8 *)(a2 + 123))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(unsigned __int8 *)(a1 + 125) != *(unsigned __int8 *)(a2 + 125))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(unsigned __int8 *)(a1 + 121) != *(unsigned __int8 *)(a2 + 121))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(_DWORD *)(a1 + 116) != *(_DWORD *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(unsigned __int8 *)(a1 + 120) != *(unsigned __int8 *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(unsigned __int8 *)(a1 + 122) != *(unsigned __int8 *)(a2 + 122))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 128) & 0x4000) == 0;
  if ((v2 & 0x4000) != 0)
    return (v3 & 0x4000) != 0 && *(_DWORD *)(a1 + 112) == *(_DWORD *)(a2 + 112);
  return v4;
}

BOOL CMMsl::MotionContextActivity::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 2) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (!v2)
    return result;
  return v3 && CMMsl::PDRImpulse::operator==(v2, v3);
}

BOOL CMMsl::PDRAlgType::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 12);
  result = (*(_BYTE *)(a2 + 12) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 12) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  return result;
}

BOOL CMMsl::PdrMLModelOutput::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double *v4;
  uint64_t v5;
  double v6;
  _BOOL8 result;
  BOOL v8;

  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    return 0;
  }
  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(double **)(a2 + 8);
  if (v2 - v3 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  if (v3 == v2)
    return 1;
  v5 = v3 + 8;
  do
  {
    v6 = *v4++;
    result = *(double *)(v5 - 8) == v6;
    v8 = *(double *)(v5 - 8) != v6 || v5 == v2;
    v5 += 8;
  }
  while (!v8);
  return result;
}

BOOL CMMsl::WorkoutRecorderAveragedALSData::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::AveragedALSData::operator==(v2, v3);
  return result;
}

BOOL CMMsl::StrideCalEntry::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 92);
  v3 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 92) & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 92) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 92) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 92) & 0x800) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 92) & 0x800) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 92) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 92) & 0x400) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 92) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x200) == 0;
  if ((*(_WORD *)(a1 + 92) & 0x200) != 0)
    return (*(_WORD *)(a2 + 92) & 0x200) != 0 && *(_DWORD *)(a1 + 80) == *(_DWORD *)(a2 + 80);
  return v4;
}

BOOL CMMsl::RunningSpeedKFResult::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 188);
  v3 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(double *)(a1 + 160) != *(double *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(double *)(a1 + 152) != *(double *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(unsigned __int8 *)(a1 + 184) != *(unsigned __int8 *)(a2 + 184))
      return 0;
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(double *)(a1 + 144) != *(double *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(double *)(a1 + 136) != *(double *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(unsigned __int8 *)(a1 + 182) != *(unsigned __int8 *)(a2 + 182))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(unsigned __int8 *)(a1 + 183) != *(unsigned __int8 *)(a2 + 183))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(double *)(a1 + 128) != *(double *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(_DWORD *)(a1 + 176) != *(_DWORD *)(a2 + 176))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(_DWORD *)(a1 + 168) != *(_DWORD *)(a2 + 168))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(_DWORD *)(a1 + 172) != *(_DWORD *)(a2 + 172))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(unsigned __int8 *)(a1 + 180) != *(unsigned __int8 *)(a2 + 180))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(double *)(a1 + 112) != *(double *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(double *)(a1 + 96) != *(double *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x1000000) == 0;
  if ((v2 & 0x1000000) != 0)
    return (v3 & 0x1000000) != 0 && *(unsigned __int8 *)(a1 + 181) == *(unsigned __int8 *)(a2 + 181);
  return v4;
}

BOOL CMMsl::ProxPDP::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 48);
  v3 = *(_WORD *)(a2 + 48);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 48) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 48) & 0x200) == 0 || *(unsigned __int8 *)(a1 + 45) != *(unsigned __int8 *)(a2 + 45))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 48) & 0x200) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x100) == 0;
  if ((*(_WORD *)(a1 + 48) & 0x100) != 0)
    return (*(_WORD *)(a2 + 48) & 0x100) != 0 && *(unsigned __int8 *)(a1 + 44) == *(unsigned __int8 *)(a2 + 44);
  return v4;
}

BOOL CMMsl::KeyboardMotionFeatures::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 8) == 0;
  if ((*(_BYTE *)(a1 + 28) & 8) != 0)
    return (*(_BYTE *)(a2 + 28) & 8) != 0 && *(float *)(a1 + 24) == *(float *)(a2 + 24);
  return v2;
}

BOOL CMMsl::KeyboardMotionState::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

BOOL CMMsl::KeyboardKeyPress::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
  return v2;
}

BOOL CMMsl::WakeGestureNotification::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 44) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 0x10) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 8) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 0x20) == 0 || *(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(a2 + 40))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 0x20) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 44) & 1) == 0;
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
    return (*(_BYTE *)(a2 + 44) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return v2;
}

BOOL CMMsl::ProxBaselineEstimatorState::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 88);
  v3 = *(_DWORD *)(a2 + 88);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(unsigned __int8 *)(a1 + 84) != *(unsigned __int8 *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 88) & 0x200) == 0;
  if ((v2 & 0x200) != 0)
    return (v3 & 0x200) != 0 && *(float *)(a1 + 48) == *(float *)(a2 + 48);
  return v4;
}

BOOL CMMsl::RhythmicGnssOperatorStatus::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 2) == 0 || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 8) == 0 || *(unsigned __int8 *)(a1 + 20) != *(unsigned __int8 *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 4) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) == 0 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 24) & 0x10) == 0;
  if ((*(_BYTE *)(a1 + 24) & 0x10) != 0)
    return (*(_BYTE *)(a2 + 24) & 0x10) != 0 && *(unsigned __int8 *)(a1 + 21) == *(unsigned __int8 *)(a2 + 21);
  return v2;
}

BOOL CMMsl::KeyboardMotionTrackpad::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
  return v2;
}

BOOL CMMsl::KeyboardAttached::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
  return v2;
}

BOOL CMMsl::Skeleton2D::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = sub_1001F563C((uint64_t *)(a1 + 16), a2 + 16);
  if (result)
  {
    if ((*(_BYTE *)(a1 + 48) & 2) != 0)
    {
      if ((*(_BYTE *)(a2 + 48) & 2) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
        return 0;
    }
    else if ((*(_BYTE *)(a2 + 48) & 2) != 0)
    {
      return 0;
    }
    result = (*(_BYTE *)(a2 + 48) & 1) == 0;
    if ((*(_BYTE *)(a1 + 48) & 1) == 0)
      return result;
    return (*(_BYTE *)(a2 + 48) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  }
  return result;
}

BOOL CMMsl::Skeleton3DRetargeted::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = sub_1001F6B20((uint64_t *)(a1 + 16), a2 + 16);
  if (result)
  {
    if ((*(_BYTE *)(a1 + 48) & 2) != 0)
    {
      if ((*(_BYTE *)(a2 + 48) & 2) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
        return 0;
    }
    else if ((*(_BYTE *)(a2 + 48) & 2) != 0)
    {
      return 0;
    }
    result = (*(_BYTE *)(a2 + 48) & 1) == 0;
    if ((*(_BYTE *)(a1 + 48) & 1) == 0)
      return result;
    return (*(_BYTE *)(a2 + 48) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  }
  return result;
}

BOOL CMMsl::Skeleton3DLifted::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = sub_1001F75F8((uint64_t *)(a1 + 16), a2 + 16);
  if (result)
  {
    if ((*(_BYTE *)(a1 + 48) & 2) != 0)
    {
      if ((*(_BYTE *)(a2 + 48) & 2) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
        return 0;
    }
    else if ((*(_BYTE *)(a2 + 48) & 2) != 0)
    {
      return 0;
    }
    result = (*(_BYTE *)(a2 + 48) & 1) == 0;
    if ((*(_BYTE *)(a1 + 48) & 1) == 0)
      return result;
    return (*(_BYTE *)(a2 + 48) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  }
  return result;
}

BOOL CMMsl::WatchHeartRateData::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a2 + 24);
  result = v3 == 0;
  if (!v2)
    return result;
  return v3 && CMMsl::OnsetHeartRateData::operator==(v2, v3);
}

BOOL CMMsl::WatchActiveCalories::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 1) == 0;
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
    return (*(_BYTE *)(a2 + 28) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return v2;
}

BOOL CMMsl::WatchBasalCalories::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 1) == 0;
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
    return (*(_BYTE *)(a2 + 28) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return v2;
}

BOOL CMMsl::TrackRunData::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 40) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 0x10) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 8) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 0x20) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 40) & 0x40) == 0;
  if ((*(_BYTE *)(a1 + 40) & 0x40) != 0)
    return (*(_BYTE *)(a2 + 40) & 0x40) != 0 && *(unsigned __int8 *)(a1 + 36) == *(unsigned __int8 *)(a2 + 36);
  return v2;
}

BOOL CMMsl::MapsRouteHintData::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 20);
  v3 = *(_WORD *)(a2 + 20);
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(unsigned __int8 *)(a1 + 15) != *(unsigned __int8 *)(a2 + 15))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(unsigned __int8 *)(a1 + 9) != *(unsigned __int8 *)(a2 + 9))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(unsigned __int8 *)(a1 + 11) != *(unsigned __int8 *)(a2 + 11))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(unsigned __int8 *)(a1 + 13) != *(unsigned __int8 *)(a2 + 13))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(unsigned __int8 *)(a1 + 14) != *(unsigned __int8 *)(a2 + 14))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(unsigned __int8 *)(a1 + 12) != *(unsigned __int8 *)(a2 + 12))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 20) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 20) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 20) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(unsigned __int8 *)(a1 + 10) != *(unsigned __int8 *)(a2 + 10))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  v4 = (v3 & 1) == 0;
  if ((v2 & 1) != 0)
    return (v3 & 1) != 0 && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8);
  return v4;
}

BOOL CMMsl::WorkoutRecorderFitnessMachineData::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::FitnessMachineData::operator==(v2, v3);
  return result;
}

BOOL CMMsl::PedestrianFenceExit::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 8) == 0;
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
    return (*(_BYTE *)(a2 + 32) & 8) != 0 && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28);
  return v2;
}

BOOL CMMsl::PhysicalEffortInput::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 4) == 0;
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
    return (*(_BYTE *)(a2 + 28) & 4) != 0 && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
  return v2;
}

BOOL CMMsl::PhysicalEffortSample::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 44) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 8) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 0x10) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 0x10) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 44) & 0x20) == 0;
  if ((*(_BYTE *)(a1 + 44) & 0x20) != 0)
    return (*(_BYTE *)(a2 + 44) & 0x20) != 0 && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40);
  return v2;
}

BOOL CMMsl::PedestrianCalorieModelDebugging::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(unsigned __int16 *)(a1 + 116);
  v3 = *(unsigned __int16 *)(a2 + 116);
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(_DWORD *)(a1 + 108) != *(_DWORD *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(double *)(a1 + 96) != *(double *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & v3 & 0x8000) != 0)
  {
    if (*(unsigned __int8 *)(a1 + 113) != *(unsigned __int8 *)(a2 + 113))
      return 0;
  }
  else if (((v2 | v3) & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(unsigned __int8 *)(a1 + 112) != *(unsigned __int8 *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x1000) == 0;
  if ((v2 & 0x1000) != 0)
    return (v3 & 0x1000) != 0 && *(_DWORD *)(a1 + 104) == *(_DWORD *)(a2 + 104);
  return v4;
}

BOOL CMMsl::WorkoutActivity::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 16) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 16) & 2) == 0 || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 16) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 16) & 1) == 0;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    return (*(_BYTE *)(a2 + 16) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  return v2;
}

BOOL CMMsl::PencilDeviceMotion::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  float *v6;
  float *v7;
  float *v8;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
  {
    if (!v5 || !CMMsl::AuxiliaryDeviceMotion::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v7 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  v8 = *(float **)(a2 + 8);
  if ((char *)v6 - (char *)v7 == *(_QWORD *)(a2 + 16) - (_QWORD)v8)
  {
    while (v7 != v6)
    {
      if (*v7 != *v8)
        return 0;
      ++v7;
      ++v8;
    }
    if ((*(_BYTE *)(a1 + 48) & 2) != 0)
    {
      if ((*(_BYTE *)(a2 + 48) & 2) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
        return 0;
    }
    else if ((*(_BYTE *)(a2 + 48) & 2) != 0)
    {
      return 0;
    }
    result = (*(_BYTE *)(a2 + 48) & 1) == 0;
    if ((*(_BYTE *)(a1 + 48) & 1) == 0)
      return result;
    if ((*(_BYTE *)(a2 + 48) & 1) != 0 && *(float *)(a1 + 40) == *(float *)(a2 + 40))
      return 1;
  }
  return 0;
}

BOOL CMMsl::PencilFusionResult::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 76);
  v3 = *(_WORD *)(a2 + 76);
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x100) == 0;
  if ((*(_WORD *)(a1 + 76) & 0x100) != 0)
    return (*(_WORD *)(a2 + 76) & 0x100) != 0 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)(a2 + 72);
  return v4;
}

BOOL CMMsl::SteadinessModelHarmonicFeatures::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 248);
  v3 = *(_DWORD *)(a2 + 248);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(double *)(a1 + 96) != *(double *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(double *)(a1 + 112) != *(double *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(double *)(a1 + 128) != *(double *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(double *)(a1 + 136) != *(double *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(double *)(a1 + 144) != *(double *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(double *)(a1 + 152) != *(double *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(double *)(a1 + 160) != *(double *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(double *)(a1 + 168) != *(double *)(a2 + 168))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(double *)(a1 + 176) != *(double *)(a2 + 176))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(double *)(a1 + 184) != *(double *)(a2 + 184))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(double *)(a1 + 192) != *(double *)(a2 + 192))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(double *)(a1 + 200) != *(double *)(a2 + 200))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(double *)(a1 + 216) != *(double *)(a2 + 216))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(double *)(a1 + 224) != *(double *)(a2 + 224))
      return 0;
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(double *)(a1 + 232) != *(double *)(a2 + 232))
      return 0;
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(double *)(a1 + 240) != *(double *)(a2 + 240))
      return 0;
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x2000000) == 0;
  if ((v2 & 0x2000000) != 0)
    return (v3 & 0x2000000) != 0 && *(double *)(a1 + 208) == *(double *)(a2 + 208);
  return v4;
}

BOOL CMMsl::PencilFusionReplayResult::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double *v6;
  double *v7;
  double *v8;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a2 + 48);
  if (v4)
  {
    if (!v5 || !CMMsl::PencilFusionResult::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 64) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 64) & 4) == 0 || *(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 56))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 64) & 4) != 0)
  {
    return 0;
  }
  v7 = *(double **)(a1 + 8);
  v6 = *(double **)(a1 + 16);
  v8 = *(double **)(a2 + 8);
  if ((char *)v6 - (char *)v7 == *(_QWORD *)(a2 + 16) - (_QWORD)v8)
  {
    while (v7 != v6)
    {
      if (*v7 != *v8)
        return 0;
      ++v7;
      ++v8;
    }
    if ((*(_BYTE *)(a1 + 64) & 1) != 0)
    {
      if ((*(_BYTE *)(a2 + 64) & 1) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
        return 0;
    }
    else if ((*(_BYTE *)(a2 + 64) & 1) != 0)
    {
      return 0;
    }
    result = (*(_BYTE *)(a2 + 64) & 2) == 0;
    if ((*(_BYTE *)(a1 + 64) & 2) == 0)
      return result;
    if ((*(_BYTE *)(a2 + 64) & 2) != 0 && *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40))
      return 1;
  }
  return 0;
}

BOOL CMMsl::MobilitySmoothedGaitMetrics::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 0x40) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 0x10) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 40) & 2) == 0;
  if ((*(_BYTE *)(a1 + 40) & 2) != 0)
    return (*(_BYTE *)(a2 + 40) & 2) != 0 && *(float *)(a1 + 16) == *(float *)(a2 + 16);
  return v2;
}

BOOL CMMsl::WatchEnclosureMaterial::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 24) & 1) == 0;
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    return (*(_BYTE *)(a2 + 24) & 1) != 0 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  return v2;
}

BOOL CMMsl::MotionLoiAltitudeData::operator==(_QWORD *a1, _QWORD *a2)
{
  double *v2;
  double *v3;
  double *v4;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  uint64_t v8;
  double v9;
  _BOOL8 result;
  BOOL v11;

  v3 = (double *)a1[1];
  v2 = (double *)a1[2];
  v4 = (double *)a2[1];
  if ((char *)v2 - (char *)v3 != a2[2] - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = a1[4];
  v5 = a1[5];
  v7 = (double *)a2[4];
  if (v5 - v6 != a2[5] - (_QWORD)v7)
    return 0;
  if (v6 == v5)
    return 1;
  v8 = v6 + 8;
  do
  {
    v9 = *v7++;
    result = *(double *)(v8 - 8) == v9;
    v11 = *(double *)(v8 - 8) != v9 || v8 == v5;
    v8 += 8;
  }
  while (!v11);
  return result;
}

BOOL CMMsl::PostureJoint::operator==(uint64_t a1, uint64_t a2)
{
  double *v2;
  double *v3;
  double *v4;
  double *v5;
  double *v6;
  double *v7;
  _BOOL8 v8;

  v3 = *(double **)(a1 + 8);
  v2 = *(double **)(a1 + 16);
  v4 = *(double **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(double **)(a1 + 32);
  v5 = *(double **)(a1 + 40);
  v7 = *(double **)(a2 + 32);
  if ((char *)v5 - (char *)v6 != *(_QWORD *)(a2 + 40) - (_QWORD)v7)
    return 0;
  while (v6 != v5)
  {
    if (*v6 != *v7)
      return 0;
    ++v6;
    ++v7;
  }
  v8 = (*(_BYTE *)(a2 + 60) & 1) == 0;
  if ((*(_BYTE *)(a1 + 60) & 1) != 0)
    return (*(_BYTE *)(a2 + 60) & 1) != 0 && *(_DWORD *)(a1 + 56) == *(_DWORD *)(a2 + 56);
  return v8;
}

BOOL CMMsl::PostureSkeleton::operator==(uint64_t a1, uint64_t a2)
{
  return sub_1001C8EEC((uint64_t *)(a1 + 8), a2 + 8);
}

BOOL CMMsl::WorkoutRecorderFaceCovered::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::FaceCovered::operator==(v2, v3);
  return result;
}

BOOL CMMsl::StreamingHighFrequencyHeartRateData::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::OnsetHeartRateData::operator==(v2, v3);
  return result;
}

BOOL CMMsl::UltraFastAccel::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    if (!v5 || !CMMsl::Accel::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  result = (*(_BYTE *)(a2 + 24) & 1) == 0;
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
    return result;
  return (*(_BYTE *)(a2 + 24) & 1) != 0 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
}

BOOL CMMsl::PressureOscarEmu::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::Pressure::operator==(v2, v3);
  return result;
}

BOOL CMMsl::PressureFiltered::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::Pressure::operator==(v2, v3);
  return result;
}

BOOL CMMsl::Prox::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

BOOL CMMsl::TouchOscarEmu::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
  return v2;
}

BOOL CMMsl::MotionStateUpdate::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 192);
  v3 = *(_QWORD *)(a2 + 192);
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(_DWORD *)(a1 + 100) != *(_DWORD *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(_DWORD *)(a1 + 104) != *(_DWORD *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(_DWORD *)(a1 + 108) != *(_DWORD *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(_DWORD *)(a1 + 148) != *(_DWORD *)(a2 + 148))
      return 0;
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(_DWORD *)(a1 + 136) != *(_DWORD *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  v7 = *(_QWORD *)(a1 + 192);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(float *)(a1 + 156) != *(float *)(a2 + 156))
      return 0;
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(_DWORD *)(a1 + 144) != *(_DWORD *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v7 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v7 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v7 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v7 & 0x800000000) != 0)
  {
    if ((v3 & 0x800000000) == 0 || *(_DWORD *)(a1 + 180) != *(_DWORD *)(a2 + 180))
      return 0;
  }
  else if ((v3 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(_DWORD *)(a1 + 160) != *(_DWORD *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v7 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(_DWORD *)(a1 + 120) != *(_DWORD *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v7 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(_DWORD *)(a1 + 116) != *(_DWORD *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v7 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
  {
    if (!v5 || !CMMsl::VehicularFlagsData::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if ((v7 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v7 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v7 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v7 & 0x1000000000) != 0)
  {
    if ((v3 & 0x1000000000) == 0 || *(_DWORD *)(a1 + 184) != *(_DWORD *)(a2 + 184))
      return 0;
  }
  else if ((v3 & 0x1000000000) != 0)
  {
    return 0;
  }
  if ((v7 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v7 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(_DWORD *)(a1 + 152) != *(_DWORD *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v7 & 0x2000000000) != 0)
  {
    if ((v3 & 0x2000000000) == 0 || *(_DWORD *)(a1 + 188) != *(_DWORD *)(a2 + 188))
      return 0;
  }
  else if ((v3 & 0x2000000000) != 0)
  {
    return 0;
  }
  if ((v7 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v7 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(float *)(a1 + 164) != *(float *)(a2 + 164))
      return 0;
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v7 & 0x100000000) != 0)
  {
    if ((v3 & 0x100000000) == 0 || *(float *)(a1 + 168) != *(float *)(a2 + 168))
      return 0;
  }
  else if ((v3 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v7 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(float *)(a1 + 172) != *(float *)(a2 + 172))
      return 0;
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  result = (v3 & 0x400000000) == 0;
  if ((v7 & 0x400000000) == 0)
    return result;
  return (v3 & 0x400000000) != 0 && *(_DWORD *)(a1 + 176) == *(_DWORD *)(a2 + 176);
}

BOOL CMMsl::PressureGps::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::Pressure::operator==(v2, v3);
  return result;
}

BOOL CMMsl::SessionOverride::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

BOOL CMMsl::LocationOscarEmu::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 100);
  v3 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 100) & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 100) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 100) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 100) & 0x1000) == 0 || *(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 100) & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 100) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 100) & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 100) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 100) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 100) & 0x400) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 100) & 0x400) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x800) == 0;
  if ((*(_WORD *)(a1 + 100) & 0x800) != 0)
    return (*(_WORD *)(a2 + 100) & 0x800) != 0 && *(_DWORD *)(a1 + 92) == *(_DWORD *)(a2 + 92);
  return v4;
}

BOOL CMMsl::MotionHint::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 24) & 4) == 0;
  if ((*(_BYTE *)(a1 + 24) & 4) != 0)
    return (*(_BYTE *)(a2 + 24) & 4) != 0 && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
  return v2;
}

BOOL CMMsl::NonlinearBiasFit::operator==(uint64_t a1, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  const void *v13;
  size_t v14;
  const void *v15;
  const void *v16;
  size_t v17;
  const void *v18;

  v3 = *(float **)(a1 + 128);
  v2 = *(float **)(a1 + 136);
  v4 = *(float **)(a2 + 128);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 136) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v8 = *(float **)(a1 + 104);
  v7 = *(float **)(a1 + 112);
  v9 = *(float **)(a2 + 104);
  if ((char *)v7 - (char *)v8 != *(_QWORD *)(a2 + 112) - (_QWORD)v9)
    return 0;
  while (v8 != v7)
  {
    if (*v8 != *v9)
      return 0;
    ++v8;
    ++v9;
  }
  v11 = *(float **)(a1 + 152);
  v10 = *(float **)(a1 + 160);
  v12 = *(float **)(a2 + 152);
  if ((char *)v10 - (char *)v11 != *(_QWORD *)(a2 + 160) - (_QWORD)v12)
    return 0;
  while (v11 != v10)
  {
    if (*v11 != *v12)
      return 0;
    ++v11;
    ++v12;
  }
  if ((*(_BYTE *)(a1 + 180) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 180) & 1) == 0 || *(float *)(a1 + 176) != *(float *)(a2 + 176))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 180) & 1) != 0)
  {
    return 0;
  }
  v13 = *(const void **)(a1 + 80);
  v14 = *(_QWORD *)(a1 + 88) - (_QWORD)v13;
  v15 = *(const void **)(a2 + 80);
  if (v14 == *(_QWORD *)(a2 + 88) - (_QWORD)v15 && !memcmp(v13, v15, v14))
  {
    v16 = *(const void **)(a1 + 8);
    v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
    v18 = *(const void **)(a2 + 8);
    if (v17 == *(_QWORD *)(a2 + 16) - (_QWORD)v18 && !memcmp(v16, v18, v17) && sub_1000615E4(a1 + 32, a2 + 32))
      return sub_1000615E4(a1 + 56, a2 + 56);
  }
  return 0;
}

BOOL CMMsl::NatalieData::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 68);
  v3 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 65) != *(unsigned __int8 *)(a2 + 65))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x100) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x200) == 0;
  if ((*(_WORD *)(a1 + 68) & 0x200) != 0)
    return (*(_WORD *)(a2 + 68) & 0x200) != 0 && *(unsigned __int8 *)(a1 + 64) == *(unsigned __int8 *)(a2 + 64);
  return v4;
}

BOOL CMMsl::WorkoutEvent::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 64);
  v3 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x200) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x100) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x20) == 0;
  if ((v2 & 0x20) != 0)
    return (v3 & 0x20) != 0 && *(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 44);
  return v4;
}

BOOL CMMsl::OnsetHeartRateData::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 68);
  v3 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x200) == 0 || *(unsigned __int8 *)(a1 + 64) != *(unsigned __int8 *)(a2 + 64))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x100) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x100) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x20) == 0;
  if ((v2 & 0x20) != 0)
    return (v3 & 0x20) != 0 && *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48);
  return v4;
}

BOOL CMMsl::MotionWifiLocation::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::MotionGPSLocation::operator==(v2, v3);
  return result;
}

BOOL CMMsl::StrideCalBin::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 8) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 0x10) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 0x10) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 40) & 4) == 0;
  if ((*(_BYTE *)(a1 + 40) & 4) != 0)
    return (*(_BYTE *)(a2 + 40) & 4) != 0 && *(double *)(a1 + 24) == *(double *)(a2 + 24);
  return v2;
}

BOOL CMMsl::Odometer::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 100);
  v3 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 100) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 100) & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 100) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 100) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 100) & 0x400) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 100) & 0x400) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 100) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 100) & 0x800) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 100) & 0x800) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 100) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 100) & 0x1000) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 100) & 0x1000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 100) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 100) & 0x200) == 0 || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 100) & 0x200) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x2000) == 0;
  if ((*(_WORD *)(a1 + 100) & 0x2000) != 0)
    return (*(_WORD *)(a2 + 100) & 0x2000) != 0 && *(unsigned __int8 *)(a1 + 96) == *(unsigned __int8 *)(a2 + 96);
  return v4;
}

BOOL CMMsl::MetsInfo::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 4) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 8) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 0x10) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 0x10) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 2) == 0;
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
    return (*(_BYTE *)(a2 + 28) & 2) != 0 && *(float *)(a1 + 12) == *(float *)(a2 + 12);
  return v2;
}

BOOL CMMsl::VibrationEvent::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 12);
  result = (*(_BYTE *)(a2 + 12) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 12) & 1) != 0 && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8);
  return result;
}

BOOL CMMsl::StepCadenceToStrideLengthBin::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 8) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 0x10) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 0x10) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 40) & 4) == 0;
  if ((*(_BYTE *)(a1 + 40) & 4) != 0)
    return (*(_BYTE *)(a2 + 40) & 4) != 0 && *(double *)(a1 + 24) == *(double *)(a2 + 24);
  return v2;
}

BOOL CMMsl::WatchOrientationSettings::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 16) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 16) & 2) == 0 || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 16) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 16) & 1) == 0;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    return (*(_BYTE *)(a2 + 16) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  return v2;
}

BOOL CMMsl::MotionWifiAssociation::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 12);
  result = (*(_BYTE *)(a2 + 12) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 12) & 1) != 0 && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8);
  return result;
}

BOOL CMMsl::MotionLoiData::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 92);
  v3 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 92) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 92) & 0x200) == 0 || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 92) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 92) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 92) & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 92) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 92) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 92) & 0x400) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 92) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x800) == 0;
  if ((*(_WORD *)(a1 + 92) & 0x800) != 0)
    return (*(_WORD *)(a2 + 92) & 0x800) != 0 && *(unsigned __int8 *)(a1 + 88) == *(unsigned __int8 *)(a2 + 88);
  return v4;
}

BOOL CMMsl::PressureFilteredNoTemperature::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(float *)(a1 + 16) == *(float *)(a2 + 16);
  return v2;
}

BOOL CMMsl::TapDetect::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 64);
  v3 = *(_WORD *)(a2 + 64);
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x400) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x200) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x800) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x100) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  v4 = (v3 & 1) == 0;
  if ((v2 & 1) != 0)
    return (v3 & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return v4;
}

BOOL CMMsl::TapAccept::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 44) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 0x20) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 0x10) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 44) & 0x40) == 0;
  if ((*(_BYTE *)(a1 + 44) & 0x40) != 0)
    return (*(_BYTE *)(a2 + 44) & 0x40) != 0 && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40);
  return v2;
}

BOOL CMMsl::RelativeDeviceMotionInternal::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  BOOL v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  _BOOL8 v19;

  v2 = *(_DWORD *)(a1 + 164);
  v3 = *(_DWORD *)(a2 + 164);
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 148) != *(float *)(a2 + 148))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  v5 = *(float **)(a1 + 32);
  v4 = *(float **)(a1 + 40);
  v6 = *(float **)(a2 + 32);
  if ((char *)v4 - (char *)v5 != *(_QWORD *)(a2 + 40) - (_QWORD)v6)
    return 0;
  while (v5 != v4)
  {
    if (*v5 != *v6)
      return 0;
    ++v5;
    ++v6;
  }
  v8 = *(float **)(a1 + 8);
  v7 = *(float **)(a1 + 16);
  v9 = *(float **)(a2 + 8);
  if ((char *)v7 - (char *)v8 != *(_QWORD *)(a2 + 16) - (_QWORD)v9)
    return 0;
  while (1)
  {
    v10 = __OFSUB__(v8, v7);
    if (v8 == v7)
      break;
    if (*v8 != *v9)
      return 0;
    ++v8;
    ++v9;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0)
      return 0;
    v11 = *(unsigned __int8 *)(a1 + 157);
    v12 = *(unsigned __int8 *)(a2 + 157);
    v10 = __OFSUB__(v11, v12);
    if (v11 != v12)
      return 0;
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0)
      return 0;
    v13 = *(unsigned __int8 *)(a1 + 152);
    v14 = *(unsigned __int8 *)(a2 + 152);
    v10 = __OFSUB__(v13, v14);
    if (v13 != v14)
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0)
      return 0;
    v15 = *(unsigned __int8 *)(a1 + 154);
    v16 = *(unsigned __int8 *)(a2 + 154);
    v10 = __OFSUB__(v15, v16);
    if (v15 != v16)
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0)
      return 0;
    v10 = 0;
    if (*(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0)
      return 0;
    v10 = 0;
    if (*(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0)
      return 0;
    v10 = 0;
    if (*(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0)
      return 0;
    v17 = *(unsigned __int8 *)(a1 + 159);
    v18 = *(unsigned __int8 *)(a2 + 159);
    v10 = __OFSUB__(v17, v18);
    if (v17 != v18)
      return 0;
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & v3) < 0 != v10)
  {
    if (*(unsigned __int8 *)(a1 + 161) != *(unsigned __int8 *)(a2 + 161))
      return 0;
  }
  else if ((v2 | v3) < 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(unsigned __int8 *)(a1 + 153) != *(unsigned __int8 *)(a2 + 153))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(_DWORD *)(a1 + 136) != *(_DWORD *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(unsigned __int8 *)(a1 + 158) != *(unsigned __int8 *)(a2 + 158))
      return 0;
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(unsigned __int8 *)(a1 + 156) != *(unsigned __int8 *)(a2 + 156))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(unsigned __int8 *)(a1 + 160) != *(unsigned __int8 *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(unsigned __int8 *)(a1 + 155) != *(unsigned __int8 *)(a2 + 155))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  v19 = (v3 & 0x20000) == 0;
  if ((v2 & 0x20000) != 0)
    return (v3 & 0x20000) != 0 && *(_DWORD *)(a1 + 132) == *(_DWORD *)(a2 + 132);
  return v19;
}

BOOL CMMsl::RelativeGravityCorrection::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::DeviceMotionCorrection::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  result = (*(_BYTE *)(a2 + 20) & 1) == 0;
  if ((*(_BYTE *)(a1 + 20) & 1) == 0)
    return result;
  return (*(_BYTE *)(a2 + 20) & 1) != 0 && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
}

BOOL CMMsl::RelativeGravityConstraints::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 48);
  v3 = *(_WORD *)(a2 + 48);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 48) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 48) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 44) != *(unsigned __int8 *)(a2 + 44))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 48) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  v4 = (v3 & 4) == 0;
  if ((v2 & 4) != 0)
    return (v3 & 4) != 0 && *(float *)(a1 + 20) == *(float *)(a2 + 20);
  return v4;
}

BOOL CMMsl::ZeroVelocityCorrection::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::DeviceMotionCorrection::operator==(v2, v3);
  return result;
}

BOOL CMMsl::PredictedRelativeDeviceMotion::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 80);
  v3 = *(_WORD *)(a2 + 80);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 80) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 80) & 0x100) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 80) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 80) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 80) & 0x200) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 80) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 80) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 80) & 0x400) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 80) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 80) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 80) & 0x800) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 80) & 0x800) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 80) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 80) & 0x1000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 80) & 0x1000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 80) & 0x2000) != 0)
  {
    if ((*(_WORD *)(a2 + 80) & 0x2000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 80) & 0x2000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 80) & 0x4000) != 0)
  {
    if ((*(_WORD *)(a2 + 80) & 0x4000) == 0 || *(unsigned __int8 *)(a1 + 76) != *(unsigned __int8 *)(a2 + 76))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 80) & 0x4000) != 0)
  {
    return 0;
  }
  v4 = (v3 & 2) == 0;
  if ((v2 & 2) != 0)
    return (v3 & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  return v4;
}

BOOL CMMsl::MovementStatsSignal::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 0x40) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 40) & 0x10) == 0;
  if ((*(_BYTE *)(a1 + 40) & 0x10) != 0)
    return (*(_BYTE *)(a2 + 40) & 0x10) != 0 && *(float *)(a1 + 28) == *(float *)(a2 + 28);
  return v2;
}

BOOL CMMsl::MovementStatsGravityProjection::operator==(uint64_t a1, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  float v9;
  _BOOL8 result;
  BOOL v11;

  if ((*(_BYTE *)(a1 + 76) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 76) & 2) == 0 || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a2 + 64))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 76) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 76) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 76) & 1) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 76) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 76) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 76) & 4) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 76) & 4) != 0)
  {
    return 0;
  }
  v3 = *(float **)(a1 + 32);
  v2 = *(float **)(a1 + 40);
  v4 = *(float **)(a2 + 32);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 40) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(float **)(a2 + 8);
  if (v5 - v6 != *(_QWORD *)(a2 + 16) - (_QWORD)v7)
    return 0;
  if (v6 == v5)
    return 1;
  v8 = v6 + 4;
  do
  {
    v9 = *v7++;
    result = *(float *)(v8 - 4) == v9;
    v11 = *(float *)(v8 - 4) != v9 || v8 == v5;
    v8 += 4;
  }
  while (!v11);
  return result;
}

BOOL CMMsl::VisualLocalizationAttitudeCorrection::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::DeviceMotionCorrection::operator==(v2, v3);
  return result;
}

BOOL CMMsl::VisualLocalizationAttitudeConstraints::operator==(uint64_t a1, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  _BOOL8 v5;

  if ((*(_BYTE *)(a1 + 60) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 60) & 2) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 60) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 60) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 60) & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 60) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 60) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 60) & 0x10) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 60) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 60) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 60) & 8) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 60) & 8) != 0)
  {
    return 0;
  }
  v3 = *(float **)(a1 + 8);
  v2 = *(float **)(a1 + 16);
  v4 = *(float **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v5 = (*(_BYTE *)(a2 + 60) & 4) == 0;
  if ((*(_BYTE *)(a1 + 60) & 4) != 0)
    return (*(_BYTE *)(a2 + 60) & 4) != 0 && *(float *)(a1 + 48) == *(float *)(a2 + 48);
  return v5;
}

BOOL CMMsl::RelativeDeviceMotionCorrelatedMotion::operator==(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  _BOOL8 v13;

  v3 = *(_DWORD *)(a1 + 128);
  v4 = *(_DWORD *)(a2 + 128);
  if ((v3 & 4) != 0)
  {
    if ((v4 & 4) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v4 & 4) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100000) != 0)
  {
    if ((v4 & 0x100000) == 0)
      return 0;
    v2 = 0;
    if (*(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v4 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80) != 0)
  {
    if ((v4 & 0x80) == 0)
      return 0;
    v2 = 0;
    if (*(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v4 & 0x80) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80000) != 0)
  {
    if ((v4 & 0x80000) == 0)
      return 0;
    v2 = 0;
    if (*(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v4 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40) != 0)
  {
    if ((v4 & 0x40) == 0)
      return 0;
    v2 = 0;
    if (*(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v4 & 0x40) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000) != 0)
  {
    if ((v4 & 0x4000) == 0)
      return 0;
    v2 = 0;
    if (*(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v4 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000) != 0)
  {
    if ((v4 & 0x2000) == 0)
      return 0;
    v2 = 0;
    if (*(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v4 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000) != 0)
  {
    if ((v4 & 0x1000) == 0)
      return 0;
    v2 = 0;
    if (*(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v4 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800000) != 0)
  {
    if ((v4 & 0x800000) == 0)
      return 0;
    v2 = 0;
    if (*(float *)(a1 + 112) != *(float *)(a2 + 112))
      return 0;
  }
  else if ((v4 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20000000) != 0)
  {
    if ((v4 & 0x20000000) == 0)
      return 0;
    v5 = *(unsigned __int8 *)(a1 + 124);
    v6 = *(unsigned __int8 *)(a2 + 124);
    v2 = __OFSUB__(v5, v6);
    if (v5 != v6)
      return 0;
  }
  else if ((v4 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000000) != 0)
  {
    if ((v4 & 0x2000000) == 0)
      return 0;
    v7 = *(unsigned __int8 *)(a1 + 120);
    v8 = *(unsigned __int8 *)(a2 + 120);
    v2 = __OFSUB__(v7, v8);
    if (v7 != v8)
      return 0;
  }
  else if ((v4 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400) != 0)
  {
    if ((v4 & 0x400) == 0)
      return 0;
    v2 = 0;
    if (*(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v4 & 0x400) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10000000) != 0)
  {
    if ((v4 & 0x10000000) == 0)
      return 0;
    v9 = *(unsigned __int8 *)(a1 + 123);
    v10 = *(unsigned __int8 *)(a2 + 123);
    v2 = __OFSUB__(v9, v10);
    if (v9 != v10)
      return 0;
  }
  else if ((v4 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40000000) != 0)
  {
    if ((v4 & 0x40000000) == 0)
      return 0;
    v11 = *(unsigned __int8 *)(a1 + 125);
    v12 = *(unsigned __int8 *)(a2 + 125);
    v2 = __OFSUB__(v11, v12);
    if (v11 != v12)
      return 0;
  }
  else if ((v4 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40000) != 0)
  {
    if ((v4 & 0x40000) == 0)
      return 0;
    v2 = 0;
    if (*(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v4 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20) != 0)
  {
    if ((v4 & 0x20) == 0)
      return 0;
    v2 = 0;
    if (*(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v4 & 0x20) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20000) != 0)
  {
    if ((v4 & 0x20000) == 0)
      return 0;
    v2 = 0;
    if (*(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v4 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10) != 0)
  {
    if ((v4 & 0x10) == 0)
      return 0;
    v2 = 0;
    if (*(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v4 & 0x10) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100) != 0)
  {
    if ((v4 & 0x100) == 0)
      return 0;
    v2 = 0;
    if (*(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v4 & 0x100) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400000) != 0)
  {
    if ((v4 & 0x400000) == 0)
      return 0;
    v2 = 0;
    if (*(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v4 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v3 & v4) < 0 != v2)
  {
    if (*(unsigned __int8 *)(a1 + 126) != *(unsigned __int8 *)(a2 + 126))
      return 0;
  }
  else if ((v3 | v4) < 0)
  {
    return 0;
  }
  if ((v3 & 0x10000) != 0)
  {
    if ((v4 & 0x10000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v4 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v3 & 8) != 0)
  {
    if ((v4 & 8) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v4 & 8) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200) != 0)
  {
    if ((v4 & 0x200) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v4 & 0x200) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200000) != 0)
  {
    if ((v4 & 0x200000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v4 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000000) != 0)
  {
    if ((v4 & 0x4000000) == 0 || *(unsigned __int8 *)(a1 + 121) != *(unsigned __int8 *)(a2 + 121))
      return 0;
  }
  else if ((v4 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800) != 0)
  {
    if ((v4 & 0x800) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v4 & 0x800) != 0)
  {
    return 0;
  }
  if ((v3 & 1) != 0)
  {
    if ((v4 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v4 & 1) != 0)
  {
    return 0;
  }
  if ((v3 & 2) != 0)
  {
    if ((v4 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v4 & 2) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000000) != 0)
  {
    if ((v4 & 0x1000000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116))
      return 0;
  }
  else if ((v4 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000) != 0)
  {
    if ((v4 & 0x8000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v4 & 0x8000) != 0)
  {
    return 0;
  }
  v13 = (v4 & 0x8000000) == 0;
  if ((v3 & 0x8000000) != 0)
    return (v4 & 0x8000000) != 0 && *(unsigned __int8 *)(a1 + 122) == *(unsigned __int8 *)(a2 + 122);
  return v13;
}

BOOL CMMsl::RelativeDeviceMotionComplexTransition::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;

  v2 = *(_QWORD *)(a1 + 188);
  v3 = *(_QWORD *)(a2 + 188);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132))
      return 0;
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124))
      return 0;
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v3 & 0x400000000) == 0 || *(float *)(a1 + 148) != *(float *)(a2 + 148))
      return 0;
  }
  else if ((v3 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000) != 0)
  {
    if ((v3 & 0x2000000000) == 0 || *(float *)(a1 + 160) != *(float *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x2000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000) != 0)
  {
    if ((v3 & 0x800000000) == 0 || *(float *)(a1 + 152) != *(float *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000) != 0)
  {
    if ((v3 & 0x4000000000) == 0 || *(float *)(a1 + 164) != *(float *)(a2 + 164))
      return 0;
  }
  else if ((v3 & 0x4000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000) != 0)
  {
    if ((v3 & 0x1000000000) == 0 || *(float *)(a1 + 156) != *(float *)(a2 + 156))
      return 0;
  }
  else if ((v3 & 0x1000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000000) != 0)
  {
    if ((v3 & 0x8000000000) == 0 || *(float *)(a1 + 168) != *(float *)(a2 + 168))
      return 0;
  }
  else if ((v3 & 0x8000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000000) != 0)
  {
    if ((v3 & 0x200000000000) == 0 || *(unsigned __int8 *)(a1 + 183) != *(unsigned __int8 *)(a2 + 183))
      return 0;
  }
  else if ((v3 & 0x200000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000000) != 0)
  {
    if ((v3 & 0x100000000000) == 0 || *(unsigned __int8 *)(a1 + 182) != *(unsigned __int8 *)(a2 + 182))
      return 0;
  }
  else if ((v3 & 0x100000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000000) != 0)
  {
    if ((v3 & 0x400000000000) == 0 || *(unsigned __int8 *)(a1 + 184) != *(unsigned __int8 *)(a2 + 184))
      return 0;
  }
  else if ((v3 & 0x400000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v3 & 0x100000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140))
      return 0;
  }
  else if ((v3 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000000) != 0)
  {
    if ((v3 & 0x1000000000000) == 0 || *(unsigned __int8 *)(a1 + 186) != *(unsigned __int8 *)(a2 + 186))
      return 0;
  }
  else if ((v3 & 0x1000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000000) != 0)
  {
    if ((v3 & 0x80000000000) == 0 || *(unsigned __int8 *)(a1 + 181) != *(unsigned __int8 *)(a2 + 181))
      return 0;
  }
  else if ((v3 & 0x80000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000000) != 0)
  {
    if ((v3 & 0x40000000000) == 0 || *(unsigned __int8 *)(a1 + 180) != *(unsigned __int8 *)(a2 + 180))
      return 0;
  }
  else if ((v3 & 0x40000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000000) != 0)
  {
    if ((v3 & 0x20000000000) == 0 || *(float *)(a1 + 176) != *(float *)(a2 + 176))
      return 0;
  }
  else if ((v3 & 0x20000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000000) != 0)
  {
    if ((v3 & 0x10000000000) == 0 || *(float *)(a1 + 172) != *(float *)(a2 + 172))
      return 0;
  }
  else if ((v3 & 0x10000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000000) != 0)
  {
    if ((v3 & 0x800000000000) == 0 || *(unsigned __int8 *)(a1 + 185) != *(unsigned __int8 *)(a2 + 185))
      return 0;
  }
  else if ((v3 & 0x800000000000) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x2000000000000) == 0;
  if ((v2 & 0x2000000000000) != 0)
    return (v3 & 0x2000000000000) != 0 && *(unsigned __int8 *)(a1 + 187) == *(unsigned __int8 *)(a2 + 187);
  return v4;
}

BOOL CMMsl::WalkingDetectionResult::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 60);
  v3 = *(_WORD *)(a2 + 60);
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x200) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 60) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x100) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 60) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 60) & 0x400) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x4000) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x4000) == 0 || *(unsigned __int8 *)(a1 + 59) != *(unsigned __int8 *)(a2 + 59))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 60) & 0x4000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x2000) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x2000) == 0 || *(unsigned __int8 *)(a1 + 58) != *(unsigned __int8 *)(a2 + 58))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 60) & 0x2000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x1000) == 0 || *(unsigned __int8 *)(a1 + 57) != *(unsigned __int8 *)(a2 + 57))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 60) & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x800) == 0 || *(unsigned __int8 *)(a1 + 56) != *(unsigned __int8 *)(a2 + 56))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 60) & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x80) == 0;
  if ((v2 & 0x80) != 0)
    return (v3 & 0x80) != 0 && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40);
  return v4;
}

BOOL CMMsl::SitStandDetectorFeatures::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(unsigned __int8 *)(a1 + 44);
  v3 = *(unsigned __int8 *)(a2 + 44);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & v3 & 0x80) != 0)
  {
    if (*(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if (((v2 | v3) & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x20) == 0;
  if ((v2 & 0x20) != 0)
    return (v3 & 0x20) != 0 && *(float *)(a1 + 32) == *(float *)(a2 + 32);
  return v4;
}

BOOL CMMsl::SitStandDetectorTransition::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

BOOL CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 4) == 0;
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
    return (*(_BYTE *)(a2 + 28) & 4) != 0 && *(float *)(a1 + 20) == *(float *)(a2 + 20);
  return v2;
}

BOOL CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 4) == 0;
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
    return (*(_BYTE *)(a2 + 28) & 4) != 0 && *(float *)(a1 + 20) == *(float *)(a2 + 20);
  return v2;
}

BOOL CMMsl::SpatialEvent::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 1) == 0;
  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
    return (*(_BYTE *)(a2 + 20) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return v2;
}

BOOL CMMsl::JitterBufferLevel::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 4) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12);
  return v2;
}

BOOL CMMsl::PressureFiltered1HzLowPass::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    return 0;
  }
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a2 + 16);
  result = v3 == 0;
  if (!v2)
    return result;
  return v3 && CMMsl::PressureFilteredNoTemperature::operator==(v2, v3);
}

BOOL CMMsl::MotionActivityReplay::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 36);
  v3 = *(_WORD *)(a2 + 36);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(unsigned __int8 *)(a1 + 34) != *(unsigned __int8 *)(a2 + 34))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 36) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 36) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 35) != *(unsigned __int8 *)(a2 + 35))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 36) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(unsigned __int8 *)(a1 + 33) != *(unsigned __int8 *)(a2 + 33))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  v4 = (v3 & 4) == 0;
  if ((v2 & 4) != 0)
    return (v3 & 4) != 0 && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
  return v4;
}

BOOL CMMsl::LegacyALS5CHInput::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 8) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 0x10) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 0x20) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 0x20) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 40) & 0x40) == 0;
  if ((*(_BYTE *)(a1 + 40) & 0x40) != 0)
    return (*(_BYTE *)(a2 + 40) & 0x40) != 0 && *(float *)(a1 + 36) == *(float *)(a2 + 36);
  return v2;
}

BOOL CMMsl::Orientation::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

BOOL CMMsl::KappaAudioResult::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 108);
  v3 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(unsigned __int8 *)(a1 + 100) != *(unsigned __int8 *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(unsigned __int8 *)(a1 + 103) != *(unsigned __int8 *)(a2 + 103))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(unsigned __int8 *)(a1 + 102) != *(unsigned __int8 *)(a2 + 102))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(unsigned __int8 *)(a1 + 101) != *(unsigned __int8 *)(a2 + 101))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(unsigned __int8 *)(a1 + 104) != *(unsigned __int8 *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 108) & 0x200) == 0;
  if ((v2 & 0x200) != 0)
    return (v3 & 0x200) != 0 && *(float *)(a1 + 44) == *(float *)(a2 + 44);
  return v4;
}

BOOL CMMsl::KappaBaroResult::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 152);
  v3 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(unsigned __int8 *)(a1 + 148) != *(unsigned __int8 *)(a2 + 148))
      return 0;
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(_DWORD *)(a1 + 104) != *(_DWORD *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140))
      return 0;
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(_DWORD *)(a1 + 108) != *(_DWORD *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 152) & 0x80) == 0;
  if ((v2 & 0x80) != 0)
    return (v3 & 0x80) != 0 && *(float *)(a1 + 60) == *(float *)(a2 + 60);
  return v4;
}

BOOL CMMsl::KappaGpsResult::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 132);
  v3 = *(_DWORD *)(a2 + 132);
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(unsigned __int8 *)(a1 + 126) != *(unsigned __int8 *)(a2 + 126))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(unsigned __int8 *)(a1 + 127) != *(unsigned __int8 *)(a2 + 127))
      return 0;
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(unsigned __int8 *)(a1 + 124) != *(unsigned __int8 *)(a2 + 124))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(unsigned __int8 *)(a1 + 128) != *(unsigned __int8 *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x2000000) == 0;
  if ((v2 & 0x2000000) != 0)
    return (v3 & 0x2000000) != 0 && *(unsigned __int8 *)(a1 + 125) == *(unsigned __int8 *)(a2 + 125);
  return v4;
}

BOOL CMMsl::KappaPulseResult::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 v5;

  v2 = *(_QWORD *)(a1 + 316);
  v3 = *(_QWORD *)(a2 + 316);
  if ((*(_BYTE *)(a1 + 324) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 324) & 8) == 0 || *(unsigned __int8 *)(a1 + 312) != *(unsigned __int8 *)(a2 + 312))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 324) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 324) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 324) & 2) == 0 || *(float *)(a1 + 304) != *(float *)(a2 + 304))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 324) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 324) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 324) & 4) == 0 || *(float *)(a1 + 308) != *(float *)(a2 + 308))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 324) & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_QWORD *)(a1 + 72) != *(_QWORD *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(float *)(a1 + 152) != *(float *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 148) != *(float *)(a2 + 148))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000000000) != 0)
  {
    if ((v3 & 0x40000000000000) == 0 || *(float *)(a1 + 260) != *(float *)(a2 + 260))
      return 0;
  }
  else if ((v3 & 0x40000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000000000) != 0)
  {
    if ((v3 & 0x20000000000000) == 0 || *(float *)(a1 + 256) != *(float *)(a2 + 256))
      return 0;
  }
  else if ((v3 & 0x20000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000000000) != 0)
  {
    if ((v3 & 0x4000000000000000) == 0 || *(float *)(a1 + 292) != *(float *)(a2 + 292))
      return 0;
  }
  else if ((v3 & 0x4000000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000000) != 0)
  {
    if ((v3 & 0x800000000000) == 0 || *(float *)(a1 + 232) != *(float *)(a2 + 232))
      return 0;
  }
  else if ((v3 & 0x800000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000000) != 0)
  {
    if ((v3 & 0x1000000000000) == 0 || *(float *)(a1 + 236) != *(float *)(a2 + 236))
      return 0;
  }
  else if ((v3 & 0x1000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000000000) != 0)
  {
    if ((v3 & 0x1000000000000000) == 0 || *(float *)(a1 + 284) != *(float *)(a2 + 284))
      return 0;
  }
  else if ((v3 & 0x1000000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000000000) != 0)
  {
    if ((v3 & 0x10000000000000) == 0 || *(float *)(a1 + 252) != *(float *)(a2 + 252))
      return 0;
  }
  else if ((v3 & 0x10000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000000000) != 0)
  {
    if ((v3 & 0x800000000000000) == 0 || *(float *)(a1 + 280) != *(float *)(a2 + 280))
      return 0;
  }
  else if ((v3 & 0x800000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000000000) != 0)
  {
    if ((v3 & 0x8000000000000) == 0 || *(float *)(a1 + 248) != *(float *)(a2 + 248))
      return 0;
  }
  else if ((v3 & 0x8000000000000) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 324) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 324) & 1) == 0 || *(float *)(a1 + 300) != *(float *)(a2 + 300))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 324) & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000000000) != 0)
  {
    if ((v3 & 0x200000000000000) == 0 || *(float *)(a1 + 272) != *(float *)(a2 + 272))
      return 0;
  }
  else if ((v3 & 0x200000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000000) != 0)
  {
    if ((v3 & 0x4000000000000) == 0 || *(float *)(a1 + 244) != *(float *)(a2 + 244))
      return 0;
  }
  else if ((v3 & 0x4000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000000000) != 0)
  {
    if ((v3 & 0x100000000000000) == 0 || *(float *)(a1 + 268) != *(float *)(a2 + 268))
      return 0;
  }
  else if ((v3 & 0x100000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000000) != 0)
  {
    if ((v3 & 0x2000000000000) == 0 || *(float *)(a1 + 240) != *(float *)(a2 + 240))
      return 0;
  }
  else if ((v3 & 0x2000000000000) != 0)
  {
    return 0;
  }
  if (v2 < 0)
  {
    if ((v3 & 0x8000000000000000) == 0 || *(float *)(a1 + 296) != *(float *)(a2 + 296))
      return 0;
  }
  else if (v3 < 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000) != 0)
  {
    if ((v3 & 0x800000000) == 0 || *(float *)(a1 + 184) != *(float *)(a2 + 184))
      return 0;
  }
  else if ((v3 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v3 & 0x400000000) == 0 || *(float *)(a1 + 180) != *(float *)(a2 + 180))
      return 0;
  }
  else if ((v3 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000000) != 0)
  {
    if ((v3 & 0x80000000000) == 0 || *(float *)(a1 + 216) != *(float *)(a2 + 216))
      return 0;
  }
  else if ((v3 & 0x80000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(float *)(a1 + 156) != *(float *)(a2 + 156))
      return 0;
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(float *)(a1 + 160) != *(float *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000000) != 0)
  {
    if ((v3 & 0x20000000000) == 0 || *(float *)(a1 + 208) != *(float *)(a2 + 208))
      return 0;
  }
  else if ((v3 & 0x20000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(float *)(a1 + 176) != *(float *)(a2 + 176))
      return 0;
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000000) != 0)
  {
    if ((v3 & 0x10000000000) == 0 || *(float *)(a1 + 204) != *(float *)(a2 + 204))
      return 0;
  }
  else if ((v3 & 0x10000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v3 & 0x100000000) == 0 || *(float *)(a1 + 172) != *(float *)(a2 + 172))
      return 0;
  }
  else if ((v3 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000000) != 0)
  {
    if ((v3 & 0x200000000000) == 0 || *(float *)(a1 + 224) != *(float *)(a2 + 224))
      return 0;
  }
  else if ((v3 & 0x200000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000) != 0)
  {
    if ((v3 & 0x4000000000) == 0 || *(float *)(a1 + 196) != *(float *)(a2 + 196))
      return 0;
  }
  else if ((v3 & 0x4000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(float *)(a1 + 168) != *(float *)(a2 + 168))
      return 0;
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  v4 = *(_QWORD *)(a2 + 316);
  if ((v2 & 0x2000000000) != 0)
  {
    if ((v4 & 0x2000000000) == 0 || *(float *)(a1 + 192) != *(float *)(a2 + 192))
      return 0;
  }
  else if ((v4 & 0x2000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v4 & 0x40000000) == 0 || *(float *)(a1 + 164) != *(float *)(a2 + 164))
      return 0;
  }
  else if ((v4 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000000) != 0)
  {
    if ((v4 & 0x100000000000) == 0 || *(float *)(a1 + 220) != *(float *)(a2 + 220))
      return 0;
  }
  else if ((v4 & 0x100000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v4 & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((v4 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v4 & 0x10) == 0 || *(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40))
      return 0;
  }
  else if ((v4 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v4 & 0x1000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140))
      return 0;
  }
  else if ((v4 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000000000) != 0)
  {
    if ((v4 & 0x2000000000000000) == 0 || *(float *)(a1 + 288) != *(float *)(a2 + 288))
      return 0;
  }
  else if ((v4 & 0x2000000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000000) != 0)
  {
    if ((v4 & 0x40000000000) == 0 || *(float *)(a1 + 212) != *(float *)(a2 + 212))
      return 0;
  }
  else if ((v4 & 0x40000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v4 & 0x40000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116))
      return 0;
  }
  else if ((v4 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000000000) != 0)
  {
    if ((v4 & 0x80000000000000) == 0 || *(float *)(a1 + 264) != *(float *)(a2 + 264))
      return 0;
  }
  else if ((v4 & 0x80000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000) != 0)
  {
    if ((v4 & 0x1000000000) == 0 || *(float *)(a1 + 188) != *(float *)(a2 + 188))
      return 0;
  }
  else if ((v4 & 0x1000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v4 & 0x200000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128))
      return 0;
  }
  else if ((v4 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000000000) != 0)
  {
    if ((v4 & 0x400000000000000) == 0 || *(float *)(a1 + 276) != *(float *)(a2 + 276))
      return 0;
  }
  else if ((v4 & 0x400000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000000) != 0)
  {
    if ((v4 & 0x8000000000) == 0 || *(float *)(a1 + 200) != *(float *)(a2 + 200))
      return 0;
  }
  else if ((v4 & 0x8000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v4 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v4 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) == 0)
  {
    if ((v4 & 4) == 0)
      goto LABEL_336;
    return 0;
  }
  if ((v4 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
    return 0;
LABEL_336:
  v5 = (v4 & 0x400000000000) == 0;
  if ((v2 & 0x400000000000) != 0)
    return (v4 & 0x400000000000) != 0 && *(float *)(a1 + 228) == *(float *)(a2 + 228);
  return v5;
}

BOOL CMMsl::KappaZgResult::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;

  v2 = *(_QWORD *)(a1 + 164);
  v3 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x100000000) != 0)
  {
    if ((v3 & 0x100000000) == 0 || *(unsigned __int8 *)(a1 + 160) != *(unsigned __int8 *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(_DWORD *)(a1 + 108) != *(_DWORD *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(float *)(a1 + 148) != *(float *)(a2 + 148))
      return 0;
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(float *)(a1 + 156) != *(float *)(a2 + 156))
      return 0;
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(_DWORD *)(a1 + 116) != *(_DWORD *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(_DWORD *)(a1 + 120) != *(_DWORD *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140))
      return 0;
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(_DWORD *)(a1 + 124) != *(_DWORD *)(a2 + 124))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(float *)(a1 + 152) != *(float *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  v4 = (*(_QWORD *)(a2 + 164) & 2) == 0;
  if ((v2 & 2) != 0)
    return (v3 & 2) != 0 && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
  return v4;
}

BOOL CMMsl::KappaZgDetected::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 16);
  result = (*(_BYTE *)(a2 + 16) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 16) & 1) != 0 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  return result;
}

BOOL CMMsl::KappaPulseInertialAccel::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 80);
  v3 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 80) & 0x100) == 0 || *(_QWORD *)(a1 + 72) != *(_QWORD *)(a2 + 72))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 80) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x10) == 0;
  if ((v2 & 0x10) != 0)
    return (v3 & 0x10) != 0 && *(double *)(a1 + 40) == *(double *)(a2 + 40);
  return v4;
}

BOOL CMMsl::KappaAirbagResult::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 68);
  v3 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 64) != *(unsigned __int8 *)(a2 + 64))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x200) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x100) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  v4 = (v3 & 8) == 0;
  if ((v2 & 8) != 0)
    return (v3 & 8) != 0 && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32);
  return v4;
}

BOOL CMMsl::KappaCrashResult::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  __int16 v7;
  _BOOL8 v8;

  v2 = *(_WORD *)(a1 + 288);
  v3 = *(_QWORD *)(a1 + 280);
  v4 = *(_QWORD *)(a2 + 280);
  v5 = *(_WORD *)(a2 + 288);
  if ((v3 & 1) != 0)
  {
    if ((v4 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v4 & 1) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000000000000) != 0)
  {
    if ((v4 & 0x2000000000000) == 0 || *(float *)(a1 + 208) != *(float *)(a2 + 208))
      return 0;
  }
  else if ((v4 & 0x2000000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 288) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 288) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 276) != *(unsigned __int8 *)(a2 + 276))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 288) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v5 & 0x80) == 0 || *(unsigned __int8 *)(a1 + 275) != *(unsigned __int8 *)(a2 + 275))
      return 0;
  }
  else if ((v5 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v5 & 0x20) == 0 || *(unsigned __int8 *)(a1 + 273) != *(unsigned __int8 *)(a2 + 273))
      return 0;
  }
  else if ((v5 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v5 & 4) == 0 || *(unsigned __int8 *)(a1 + 270) != *(unsigned __int8 *)(a2 + 270))
      return 0;
  }
  else if ((v5 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v5 & 2) == 0 || *(unsigned __int8 *)(a1 + 269) != *(unsigned __int8 *)(a2 + 269))
      return 0;
  }
  else if ((v5 & 2) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40000) != 0)
  {
    if ((v4 & 0x40000) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84))
      return 0;
  }
  else if ((v4 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v5 & 1) == 0 || *(unsigned __int8 *)(a1 + 268) != *(unsigned __int8 *)(a2 + 268))
      return 0;
  }
  else if ((v5 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v5 & 0x10) == 0 || *(unsigned __int8 *)(a1 + 272) != *(unsigned __int8 *)(a2 + 272))
      return 0;
  }
  else if ((v5 & 0x10) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20000) != 0)
  {
    if ((v4 & 0x20000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v4 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10000) != 0)
  {
    if ((v4 & 0x10000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v4 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400000) != 0)
  {
    if ((v4 & 0x400000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v4 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000000) != 0)
  {
    if ((v4 & 0x8000000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120))
      return 0;
  }
  else if ((v4 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100000000) != 0)
  {
    if ((v4 & 0x100000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140))
      return 0;
  }
  else if ((v4 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000000000000) != 0)
  {
    if ((v4 & 0x4000000000000) == 0 || *(float *)(a1 + 212) != *(float *)(a2 + 212))
      return 0;
  }
  else if ((v4 & 0x4000000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800000) != 0)
  {
    if ((v4 & 0x800000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v4 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10000000) != 0)
  {
    if ((v4 & 0x10000000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124))
      return 0;
  }
  else if ((v4 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200000000) != 0)
  {
    if ((v4 & 0x200000000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144))
      return 0;
  }
  else if ((v4 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000000000000) != 0)
  {
    if ((v4 & 0x8000000000000) == 0 || *(float *)(a1 + 216) != *(float *)(a2 + 216))
      return 0;
  }
  else if ((v4 & 0x8000000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000000) != 0)
  {
    if ((v4 & 0x1000000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v4 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20000000) != 0)
  {
    if ((v4 & 0x20000000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128))
      return 0;
  }
  else if ((v4 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400000000) != 0)
  {
    if ((v4 & 0x400000000) == 0 || *(float *)(a1 + 148) != *(float *)(a2 + 148))
      return 0;
  }
  else if ((v4 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10000000000000) != 0)
  {
    if ((v4 & 0x10000000000000) == 0 || *(float *)(a1 + 220) != *(float *)(a2 + 220))
      return 0;
  }
  else if ((v4 & 0x10000000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80000) != 0)
  {
    if ((v4 & 0x80000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v4 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100000) != 0)
  {
    if ((v4 & 0x100000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v4 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200000) != 0)
  {
    if ((v4 & 0x200000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v4 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100000000000000) != 0)
  {
    if ((v4 & 0x100000000000000) == 0 || *(float *)(a1 + 236) != *(float *)(a2 + 236))
      return 0;
  }
  else if ((v4 & 0x100000000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80000000000000) != 0)
  {
    if ((v4 & 0x80000000000000) == 0 || *(float *)(a1 + 232) != *(float *)(a2 + 232))
      return 0;
  }
  else if ((v4 & 0x80000000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200000000000000) != 0)
  {
    if ((v4 & 0x200000000000000) == 0 || *(float *)(a1 + 240) != *(float *)(a2 + 240))
      return 0;
  }
  else if ((v4 & 0x200000000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40) != 0)
  {
    if ((v4 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v4 & 0x40) != 0)
  {
    return 0;
  }
  if ((v3 & 2) != 0)
  {
    if ((v4 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v4 & 2) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000) != 0)
  {
    if ((v4 & 0x8000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v4 & 0x8000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 288) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 288) & 0x800) == 0 || *(unsigned __int8 *)(a1 + 279) != *(unsigned __int8 *)(a2 + 279))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 288) & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v5 & 8) == 0 || *(unsigned __int8 *)(a1 + 271) != *(unsigned __int8 *)(a2 + 271))
      return 0;
  }
  else if ((v5 & 8) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80) != 0)
  {
    if ((v4 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v4 & 0x80) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400) != 0)
  {
    if ((v4 & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v4 & 0x400) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200) != 0)
  {
    if ((v4 & 0x200) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v4 & 0x200) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100) != 0)
  {
    if ((v4 & 0x100) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v4 & 0x100) != 0)
  {
    return 0;
  }
  if ((v3 & 4) != 0)
  {
    if ((v4 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((v4 & 4) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20) != 0)
  {
    if ((v4 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v4 & 0x20) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10) != 0)
  {
    if ((v4 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v4 & 0x10) != 0)
  {
    return 0;
  }
  if ((v3 & 8) != 0)
  {
    if ((v4 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v4 & 8) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800) != 0)
  {
    if ((v4 & 0x800) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v4 & 0x800) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000) != 0)
  {
    if ((v4 & 0x4000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v4 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000) != 0)
  {
    if ((v4 & 0x2000) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v4 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000) != 0)
  {
    if ((v4 & 0x1000) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v4 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000000) != 0)
  {
    if ((v4 & 0x2000000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112))
      return 0;
  }
  else if ((v4 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40000000) != 0)
  {
    if ((v4 & 0x40000000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132))
      return 0;
  }
  else if ((v4 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800000000) != 0)
  {
    if ((v4 & 0x800000000) == 0 || *(float *)(a1 + 152) != *(float *)(a2 + 152))
      return 0;
  }
  else if ((v4 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20000000000000) != 0)
  {
    if ((v4 & 0x20000000000000) == 0 || *(float *)(a1 + 224) != *(float *)(a2 + 224))
      return 0;
  }
  else if ((v4 & 0x20000000000000) != 0)
  {
    return 0;
  }
  v6 = *(_QWORD *)(a2 + 280);
  v7 = *(_WORD *)(a2 + 288);
  if ((v3 & 0x4000000) != 0)
  {
    if ((v6 & 0x4000000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116))
      return 0;
  }
  else if ((v6 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80000000) != 0)
  {
    if ((v6 & 0x80000000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136))
      return 0;
  }
  else if ((v6 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000000000) != 0)
  {
    if ((v6 & 0x1000000000) == 0 || *(float *)(a1 + 156) != *(float *)(a2 + 156))
      return 0;
  }
  else if ((v6 & 0x1000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40000000000000) != 0)
  {
    if ((v6 & 0x40000000000000) == 0 || *(float *)(a1 + 228) != *(float *)(a2 + 228))
      return 0;
  }
  else if ((v6 & 0x40000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v7 & 0x40) == 0 || *(unsigned __int8 *)(a1 + 274) != *(unsigned __int8 *)(a2 + 274))
      return 0;
  }
  else if ((v7 & 0x40) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000000000000000) != 0)
  {
    if ((v6 & 0x1000000000000000) == 0 || *(float *)(a1 + 252) != *(float *)(a2 + 252))
      return 0;
  }
  else if ((v6 & 0x1000000000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400000000000000) != 0)
  {
    if ((v6 & 0x400000000000000) == 0 || *(float *)(a1 + 244) != *(float *)(a2 + 244))
      return 0;
  }
  else if ((v6 & 0x400000000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 288) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 288) & 0x200) == 0 || *(unsigned __int8 *)(a1 + 277) != *(unsigned __int8 *)(a2 + 277))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 288) & 0x200) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000000000) != 0)
  {
    if ((v6 & 0x2000000000) == 0 || *(float *)(a1 + 160) != *(float *)(a2 + 160))
      return 0;
  }
  else if ((v6 & 0x2000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000000000) != 0)
  {
    if ((v6 & 0x4000000000) == 0 || *(float *)(a1 + 164) != *(float *)(a2 + 164))
      return 0;
  }
  else if ((v6 & 0x4000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000000000) != 0)
  {
    if ((v6 & 0x8000000000) == 0 || *(float *)(a1 + 168) != *(float *)(a2 + 168))
      return 0;
  }
  else if ((v6 & 0x8000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20000000000) != 0)
  {
    if ((v6 & 0x20000000000) == 0 || *(float *)(a1 + 176) != *(float *)(a2 + 176))
      return 0;
  }
  else if ((v6 & 0x20000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10000000000) != 0)
  {
    if ((v6 & 0x10000000000) == 0 || *(float *)(a1 + 172) != *(float *)(a2 + 172))
      return 0;
  }
  else if ((v6 & 0x10000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40000000000) != 0)
  {
    if ((v6 & 0x40000000000) == 0 || *(float *)(a1 + 180) != *(float *)(a2 + 180))
      return 0;
  }
  else if ((v6 & 0x40000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80000000000) != 0)
  {
    if ((v6 & 0x80000000000) == 0 || *(float *)(a1 + 184) != *(float *)(a2 + 184))
      return 0;
  }
  else if ((v6 & 0x80000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100000000000) != 0)
  {
    if ((v6 & 0x100000000000) == 0 || *(float *)(a1 + 188) != *(float *)(a2 + 188))
      return 0;
  }
  else if ((v6 & 0x100000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200000000000) != 0)
  {
    if ((v6 & 0x200000000000) == 0 || *(float *)(a1 + 192) != *(float *)(a2 + 192))
      return 0;
  }
  else if ((v6 & 0x200000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800000000000) != 0)
  {
    if ((v6 & 0x800000000000) == 0 || *(float *)(a1 + 200) != *(float *)(a2 + 200))
      return 0;
  }
  else if ((v6 & 0x800000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400000000000) != 0)
  {
    if ((v6 & 0x400000000000) == 0 || *(float *)(a1 + 196) != *(float *)(a2 + 196))
      return 0;
  }
  else if ((v6 & 0x400000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000000000000) != 0)
  {
    if ((v6 & 0x1000000000000) == 0 || *(float *)(a1 + 204) != *(float *)(a2 + 204))
      return 0;
  }
  else if ((v6 & 0x1000000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800000000000000) != 0)
  {
    if ((v6 & 0x800000000000000) == 0 || *(_DWORD *)(a1 + 248) != *(_DWORD *)(a2 + 248))
      return 0;
  }
  else if ((v6 & 0x800000000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 288) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 288) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 278) != *(unsigned __int8 *)(a2 + 278))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 288) & 0x400) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000000000000000) != 0)
  {
    if ((v6 & 0x4000000000000000) == 0 || *(float *)(a1 + 260) != *(float *)(a2 + 260))
      return 0;
  }
  else if ((v6 & 0x4000000000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000000000000000) == 0)
  {
    if ((v6 & 0x8000000000000000) == 0)
      goto LABEL_376;
    return 0;
  }
  if ((v6 & 0x8000000000000000) == 0 || *(float *)(a1 + 264) != *(float *)(a2 + 264))
    return 0;
LABEL_376:
  v8 = (v6 & 0x2000000000000000) == 0;
  if ((v3 & 0x2000000000000000) != 0)
    return (v6 & 0x2000000000000000) != 0 && *(float *)(a1 + 256) == *(float *)(a2 + 256);
  return v8;
}

BOOL CMMsl::KappaQuiescenceResult::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 8) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 0x10) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 4) == 0;
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
    return (*(_BYTE *)(a2 + 28) & 4) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

BOOL CMMsl::KappaRecoveryResult::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 8) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 0x10) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 4) == 0;
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
    return (*(_BYTE *)(a2 + 28) & 4) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

BOOL CMMsl::KappaRolloverCrashResult::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  _BOOL8 v8;

  v2 = *(_QWORD *)(a1 + 316);
  v3 = *(_QWORD *)(a2 + 316);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  v4 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v5 = *(unsigned __int16 *)(a2 + 324) | (*(unsigned __int8 *)(a2 + 326) << 16);
  if ((*(_WORD *)(a1 + 324) & 0x8000) != 0)
  {
    if ((*(_WORD *)(a2 + 324) & 0x8000) == 0 || *(unsigned __int8 *)(a1 + 310) != *(unsigned __int8 *)(a2 + 310))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 324) & 0x8000) != 0)
  {
    return 0;
  }
  if ((v4 & 0x10000) != 0)
  {
    if ((v5 & 0x10000) == 0 || *(unsigned __int8 *)(a1 + 311) != *(unsigned __int8 *)(a2 + 311))
      return 0;
  }
  else if ((v5 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000000) != 0)
  {
    if ((v3 & 0x40000000000) == 0 || *(float *)(a1 + 180) != *(float *)(a2 + 180))
      return 0;
  }
  else if ((v3 & 0x40000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 324) & 8) != 0)
  {
    if ((*(_WORD *)(a2 + 324) & 8) == 0 || *(float *)(a1 + 280) != *(float *)(a2 + 280))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 324) & 8) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 324) & 0x2000) != 0)
  {
    if ((*(_WORD *)(a2 + 324) & 0x2000) == 0 || *(unsigned __int8 *)(a1 + 308) != *(unsigned __int8 *)(a2 + 308))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 324) & 0x2000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 324) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 324) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 305) != *(unsigned __int8 *)(a2 + 305))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 324) & 0x400) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 324) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 324) & 0x200) == 0 || *(unsigned __int8 *)(a1 + 304) != *(unsigned __int8 *)(a2 + 304))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 324) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 324) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 324) & 0x1000) == 0 || *(unsigned __int8 *)(a1 + 307) != *(unsigned __int8 *)(a2 + 307))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 324) & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000000) != 0)
  {
    if ((v3 & 0x2000000000000) == 0 || *(float *)(a1 + 208) != *(float *)(a2 + 208))
      return 0;
  }
  else if ((v3 & 0x2000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000000) != 0)
  {
    if ((v3 & 0x1000000000000) == 0 || *(float *)(a1 + 204) != *(float *)(a2 + 204))
      return 0;
  }
  else if ((v3 & 0x1000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000000) != 0)
  {
    if ((v3 & 0x4000000000000) == 0 || *(float *)(a1 + 212) != *(float *)(a2 + 212))
      return 0;
  }
  else if ((v3 & 0x4000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v4 & 0x40000) != 0)
  {
    if ((v5 & 0x40000) == 0 || *(unsigned __int8 *)(a1 + 313) != *(unsigned __int8 *)(a2 + 313))
      return 0;
  }
  else if ((v5 & 0x40000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 324) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 324) & 0x800) == 0 || *(unsigned __int8 *)(a1 + 306) != *(unsigned __int8 *)(a2 + 306))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 324) & 0x800) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 324) & 0x4000) != 0)
  {
    if ((*(_WORD *)(a2 + 324) & 0x4000) == 0 || *(unsigned __int8 *)(a1 + 309) != *(unsigned __int8 *)(a2 + 309))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 324) & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000000000) != 0)
  {
    if ((v3 & 0x20000000000000) == 0 || *(float *)(a1 + 224) != *(float *)(a2 + 224))
      return 0;
  }
  else if ((v3 & 0x20000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000000000) != 0)
  {
    if ((v3 & 0x8000000000000) == 0 || *(float *)(a1 + 216) != *(float *)(a2 + 216))
      return 0;
  }
  else if ((v3 & 0x8000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000000000) != 0)
  {
    if ((v3 & 0x10000000000000) == 0 || *(_DWORD *)(a1 + 220) != *(_DWORD *)(a2 + 220))
      return 0;
  }
  else if ((v3 & 0x10000000000000) != 0)
  {
    return 0;
  }
  if ((v4 & 0x20000) != 0)
  {
    if ((v5 & 0x20000) == 0 || *(unsigned __int8 *)(a1 + 312) != *(unsigned __int8 *)(a2 + 312))
      return 0;
  }
  else if ((v5 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000000000) != 0)
  {
    if ((v3 & 0x40000000000000) == 0 || *(float *)(a1 + 228) != *(float *)(a2 + 228))
      return 0;
  }
  else if ((v3 & 0x40000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000000000) != 0)
  {
    if ((v3 & 0x800000000000000) == 0 || *(float *)(a1 + 248) != *(float *)(a2 + 248))
      return 0;
  }
  else if ((v3 & 0x800000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000000) != 0)
  {
    if ((v3 & 0x80000000000) == 0 || *(float *)(a1 + 184) != *(float *)(a2 + 184))
      return 0;
  }
  else if ((v3 & 0x80000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 324) & 0x10) != 0)
  {
    if ((*(_WORD *)(a2 + 324) & 0x10) == 0 || *(float *)(a1 + 284) != *(float *)(a2 + 284))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 324) & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000000000) != 0)
  {
    if ((v3 & 0x80000000000000) == 0 || *(float *)(a1 + 232) != *(float *)(a2 + 232))
      return 0;
  }
  else if ((v3 & 0x80000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000000000) != 0)
  {
    if ((v3 & 0x1000000000000000) == 0 || *(float *)(a1 + 252) != *(float *)(a2 + 252))
      return 0;
  }
  else if ((v3 & 0x1000000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000000) != 0)
  {
    if ((v3 & 0x100000000000) == 0 || *(float *)(a1 + 188) != *(float *)(a2 + 188))
      return 0;
  }
  else if ((v3 & 0x100000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 324) & 0x20) != 0)
  {
    if ((*(_WORD *)(a2 + 324) & 0x20) == 0 || *(float *)(a1 + 288) != *(float *)(a2 + 288))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 324) & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000000000) != 0)
  {
    if ((v3 & 0x100000000000000) == 0 || *(float *)(a1 + 236) != *(float *)(a2 + 236))
      return 0;
  }
  else if ((v3 & 0x100000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000000000) != 0)
  {
    if ((v3 & 0x2000000000000000) == 0 || *(float *)(a1 + 256) != *(float *)(a2 + 256))
      return 0;
  }
  else if ((v3 & 0x2000000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000000) != 0)
  {
    if ((v3 & 0x200000000000) == 0 || *(float *)(a1 + 192) != *(float *)(a2 + 192))
      return 0;
  }
  else if ((v3 & 0x200000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 324) & 0x40) != 0)
  {
    if ((*(_WORD *)(a2 + 324) & 0x40) == 0 || *(float *)(a1 + 292) != *(float *)(a2 + 292))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 324) & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  v6 = *(_QWORD *)(a2 + 316);
  if ((v2 & 0x1000) != 0)
  {
    if ((v6 & 0x1000) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v6 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v6 & 0x10000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v6 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v6 & 0x20000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v6 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000000000) != 0)
  {
    if ((v6 & 0x200000000000000) == 0 || *(float *)(a1 + 240) != *(float *)(a2 + 240))
      return 0;
  }
  else if ((v6 & 0x200000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000000000) != 0)
  {
    if ((v6 & 0x4000000000000000) == 0 || *(float *)(a1 + 260) != *(float *)(a2 + 260))
      return 0;
  }
  else if ((v6 & 0x4000000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v6 & 0x400000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v6 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000000) != 0)
  {
    if ((v6 & 0x400000000000) == 0 || *(float *)(a1 + 196) != *(float *)(a2 + 196))
      return 0;
  }
  else if ((v6 & 0x400000000000) != 0)
  {
    return 0;
  }
  v7 = *(_WORD *)(a2 + 324);
  if ((*(_WORD *)(a1 + 324) & 0x80) != 0)
  {
    if ((v7 & 0x80) == 0 || *(float *)(a1 + 296) != *(float *)(a2 + 296))
      return 0;
  }
  else if ((v7 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000000000) != 0)
  {
    if ((v6 & 0x400000000000000) == 0 || *(float *)(a1 + 244) != *(float *)(a2 + 244))
      return 0;
  }
  else if ((v6 & 0x400000000000000) != 0)
  {
    return 0;
  }
  if (v2 < 0)
  {
    if ((v6 & 0x8000000000000000) == 0 || *(float *)(a1 + 264) != *(float *)(a2 + 264))
      return 0;
  }
  else if (v6 < 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v6 & 0x800000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v6 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000000) != 0)
  {
    if ((v6 & 0x800000000000) == 0 || *(float *)(a1 + 200) != *(float *)(a2 + 200))
      return 0;
  }
  else if ((v6 & 0x800000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 324) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 324) & 0x100) == 0 || *(float *)(a1 + 300) != *(float *)(a2 + 300))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 324) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v6 & 0x100000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140))
      return 0;
  }
  else if ((v6 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v6 & 0x200000000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144))
      return 0;
  }
  else if ((v6 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v6 & 0x8000000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120))
      return 0;
  }
  else if ((v6 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v6 & 0x4000000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116))
      return 0;
  }
  else if ((v6 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v6 & 0x80000000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136))
      return 0;
  }
  else if ((v6 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v6 & 0x40000000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132))
      return 0;
  }
  else if ((v6 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v6 & 0x20000000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128))
      return 0;
  }
  else if ((v6 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v6 & 0x10000000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124))
      return 0;
  }
  else if ((v6 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000000) != 0)
  {
    if ((v6 & 0x10000000000) == 0 || *(float *)(a1 + 172) != *(float *)(a2 + 172))
      return 0;
  }
  else if ((v6 & 0x10000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000000) != 0)
  {
    if ((v6 & 0x20000000000) == 0 || *(float *)(a1 + 176) != *(float *)(a2 + 176))
      return 0;
  }
  else if ((v6 & 0x20000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000) != 0)
  {
    if ((v6 & 0x800000000) == 0 || *(float *)(a1 + 152) != *(float *)(a2 + 152))
      return 0;
  }
  else if ((v6 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v6 & 0x400000000) == 0 || *(float *)(a1 + 148) != *(float *)(a2 + 148))
      return 0;
  }
  else if ((v6 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000000) != 0)
  {
    if ((v6 & 0x8000000000) == 0 || *(float *)(a1 + 168) != *(float *)(a2 + 168))
      return 0;
  }
  else if ((v6 & 0x8000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000) != 0)
  {
    if ((v6 & 0x4000000000) == 0 || *(float *)(a1 + 164) != *(float *)(a2 + 164))
      return 0;
  }
  else if ((v6 & 0x4000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000) != 0)
  {
    if ((v6 & 0x2000000000) == 0 || *(float *)(a1 + 160) != *(float *)(a2 + 160))
      return 0;
  }
  else if ((v6 & 0x2000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000) != 0)
  {
    if ((v6 & 0x1000000000) == 0 || *(float *)(a1 + 156) != *(float *)(a2 + 156))
      return 0;
  }
  else if ((v6 & 0x1000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 324) & 2) != 0)
  {
    if ((v7 & 2) == 0 || *(float *)(a1 + 272) != *(float *)(a2 + 272))
      return 0;
  }
  else if ((v7 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 324) & 4) == 0)
  {
    if ((v7 & 4) == 0)
      goto LABEL_411;
    return 0;
  }
  if ((v7 & 4) == 0 || *(float *)(a1 + 276) != *(float *)(a2 + 276))
    return 0;
LABEL_411:
  v8 = (v7 & 1) == 0;
  if ((*(_WORD *)(a1 + 324) & 1) != 0)
    return (v7 & 1) != 0 && *(float *)(a1 + 268) == *(float *)(a2 + 268);
  return v8;
}

BOOL CMMsl::KappaMildImpactResult::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 8) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 0x10) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 4) == 0;
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
    return (*(_BYTE *)(a2 + 28) & 4) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

BOOL CMMsl::KappaLackOfMotionResult::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 92);
  v3 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(unsigned __int8 *)(a1 + 90) != *(unsigned __int8 *)(a2 + 90))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(unsigned __int8 *)(a1 + 89) != *(unsigned __int8 *)(a2 + 89))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x10000) == 0;
  if ((v2 & 0x10000) != 0)
    return (v3 & 0x10000) != 0 && *(unsigned __int8 *)(a1 + 88) == *(unsigned __int8 *)(a2 + 88);
  return v4;
}

BOOL CMMsl::KappaSevereCrashResult::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;

  v2 = *(_QWORD *)(a1 + 356);
  v3 = *(_QWORD *)(a1 + 364);
  v4 = (uint64_t *)(a2 + 356);
  v6 = *(_QWORD *)(a2 + 356);
  v5 = *(_QWORD *)(a2 + 364);
  if ((v2 & 0x800000) != 0)
  {
    if ((v6 & 0x800000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132))
      return 0;
  }
  else if ((v6 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v6 & 0x400000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128))
      return 0;
  }
  else if ((v6 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v6 & 0x1000000) == 0 || *(_DWORD *)(a1 + 136) != *(_DWORD *)(a2 + 136))
      return 0;
  }
  else if ((v6 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000000000) != 0)
  {
    if ((v6 & 0x10000000000000) == 0 || *(_DWORD *)(a1 + 248) != *(_DWORD *)(a2 + 248))
      return 0;
  }
  else if ((v6 & 0x10000000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 1) != 0)
  {
    if ((v5 & 1) == 0 || *(float *)(a1 + 296) != *(float *)(a2 + 296))
      return 0;
  }
  else if ((v5 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000000000) != 0)
  {
    if ((v6 & 0x400000000000000) == 0 || *(float *)(a1 + 272) != *(float *)(a2 + 272))
      return 0;
  }
  else if ((v6 & 0x400000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000000) != 0)
  {
    if ((v6 & 0x400000000000) == 0 || *(float *)(a1 + 224) != *(float *)(a2 + 224))
      return 0;
  }
  else if ((v6 & 0x400000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000000) != 0)
  {
    if ((v6 & 0x200000000000) == 0 || *(float *)(a1 + 220) != *(float *)(a2 + 220))
      return 0;
  }
  else if ((v6 & 0x200000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v6 & 0x200) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v6 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000000000) != 0)
  {
    if ((v6 & 0x80000000000000) == 0 || *(_DWORD *)(a1 + 260) != *(_DWORD *)(a2 + 260))
      return 0;
  }
  else if ((v6 & 0x80000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v6 & 0x2000000) == 0 || *(_DWORD *)(a1 + 140) != *(_DWORD *)(a2 + 140))
      return 0;
  }
  else if ((v6 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v6 & 0x10000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v6 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v3 & 8) != 0)
  {
    if ((v5 & 8) == 0 || *(float *)(a1 + 308) != *(float *)(a2 + 308))
      return 0;
  }
  else if ((v5 & 8) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10) != 0)
  {
    if ((v5 & 0x10) == 0 || *(float *)(a1 + 312) != *(float *)(a2 + 312))
      return 0;
  }
  else if ((v5 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000000) != 0)
  {
    if ((v6 & 0x80000000000) == 0 || *(_DWORD *)(a1 + 212) != *(_DWORD *)(a2 + 212))
      return 0;
  }
  else if ((v6 & 0x80000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000000) != 0)
  {
    if ((v6 & 0x20000000000) == 0 || *(_DWORD *)(a1 + 204) != *(_DWORD *)(a2 + 204))
      return 0;
  }
  else if ((v6 & 0x20000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000000) != 0)
  {
    if ((v6 & 0x4000000000000) == 0 || *(float *)(a1 + 240) != *(float *)(a2 + 240))
      return 0;
  }
  else if ((v6 & 0x4000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000000000) != 0)
  {
    if ((v6 & 0x1000000000000000) == 0 || *(_DWORD *)(a1 + 280) != *(_DWORD *)(a2 + 280))
      return 0;
  }
  else if ((v6 & 0x1000000000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 2) != 0)
  {
    if ((v5 & 2) == 0 || *(_DWORD *)(a1 + 300) != *(_DWORD *)(a2 + 300))
      return 0;
  }
  else if ((v5 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v6 & 0x80) == 0 || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a2 + 64))
      return 0;
  }
  else if ((v6 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v6 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v6 & 1) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40) != 0)
  {
    if ((v5 & 0x40) == 0 || *(unsigned __int8 *)(a1 + 317) != *(unsigned __int8 *)(a2 + 317))
      return 0;
  }
  else if ((v5 & 0x40) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80) != 0)
  {
    if ((v5 & 0x80) == 0 || *(unsigned __int8 *)(a1 + 318) != *(unsigned __int8 *)(a2 + 318))
      return 0;
  }
  else if ((v5 & 0x80) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000) != 0)
  {
    if ((v5 & 0x8000) == 0 || *(unsigned __int8 *)(a1 + 326) != *(unsigned __int8 *)(a2 + 326))
      return 0;
  }
  else if ((v5 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10000) != 0)
  {
    if ((v5 & 0x10000) == 0 || *(unsigned __int8 *)(a1 + 327) != *(unsigned __int8 *)(a2 + 327))
      return 0;
  }
  else if ((v5 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000000) != 0)
  {
    if ((v5 & 0x8000000) == 0 || *(unsigned __int8 *)(a1 + 338) != *(unsigned __int8 *)(a2 + 338))
      return 0;
  }
  else if ((v5 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000000) != 0)
  {
    if ((v5 & 0x2000000) == 0 || *(unsigned __int8 *)(a1 + 336) != *(unsigned __int8 *)(a2 + 336))
      return 0;
  }
  else if ((v5 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000) != 0)
  {
    if ((v5 & 0x1000) == 0 || *(unsigned __int8 *)(a1 + 323) != *(unsigned __int8 *)(a2 + 323))
      return 0;
  }
  else if ((v5 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10000000) != 0)
  {
    if ((v5 & 0x10000000) == 0 || *(unsigned __int8 *)(a1 + 339) != *(unsigned __int8 *)(a2 + 339))
      return 0;
  }
  else if ((v5 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20000000) != 0)
  {
    if ((v5 & 0x20000000) == 0 || *(unsigned __int8 *)(a1 + 340) != *(unsigned __int8 *)(a2 + 340))
      return 0;
  }
  else if ((v5 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200) != 0)
  {
    if ((v5 & 0x200) == 0 || *(unsigned __int8 *)(a1 + 320) != *(unsigned __int8 *)(a2 + 320))
      return 0;
  }
  else if ((v5 & 0x200) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000000) != 0)
  {
    if ((v5 & 0x1000000) == 0 || *(unsigned __int8 *)(a1 + 335) != *(unsigned __int8 *)(a2 + 335))
      return 0;
  }
  else if ((v5 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000) != 0)
  {
    if ((v5 & 0x2000) == 0 || *(unsigned __int8 *)(a1 + 324) != *(unsigned __int8 *)(a2 + 324))
      return 0;
  }
  else if ((v5 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000000) != 0)
  {
    if ((v5 & 0x4000000) == 0 || *(unsigned __int8 *)(a1 + 337) != *(unsigned __int8 *)(a2 + 337))
      return 0;
  }
  else if ((v5 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80000) != 0)
  {
    if ((v5 & 0x80000) == 0 || *(unsigned __int8 *)(a1 + 330) != *(unsigned __int8 *)(a2 + 330))
      return 0;
  }
  else if ((v5 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000000000) != 0)
  {
    if ((v5 & 0x2000000000) == 0 || *(unsigned __int8 *)(a1 + 348) != *(unsigned __int8 *)(a2 + 348))
      return 0;
  }
  else if ((v5 & 0x2000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200000000) != 0)
  {
    if ((v5 & 0x200000000) == 0 || *(unsigned __int8 *)(a1 + 344) != *(unsigned __int8 *)(a2 + 344))
      return 0;
  }
  else if ((v5 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000000000) != 0)
  {
    if ((v5 & 0x4000000000) == 0 || *(unsigned __int8 *)(a1 + 349) != *(unsigned __int8 *)(a2 + 349))
      return 0;
  }
  else if ((v5 & 0x4000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400000000) != 0)
  {
    if ((v5 & 0x400000000) == 0 || *(unsigned __int8 *)(a1 + 345) != *(unsigned __int8 *)(a2 + 345))
      return 0;
  }
  else if ((v5 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40000000) != 0)
  {
    if ((v5 & 0x40000000) == 0 || *(unsigned __int8 *)(a1 + 341) != *(unsigned __int8 *)(a2 + 341))
      return 0;
  }
  else if ((v5 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800) != 0)
  {
    if ((v5 & 0x800) == 0 || *(unsigned __int8 *)(a1 + 322) != *(unsigned __int8 *)(a2 + 322))
      return 0;
  }
  else if ((v5 & 0x800) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100000) != 0)
  {
    if ((v5 & 0x100000) == 0 || *(unsigned __int8 *)(a1 + 331) != *(unsigned __int8 *)(a2 + 331))
      return 0;
  }
  else if ((v5 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000000000) != 0)
  {
    if ((v5 & 0x8000000000) == 0 || *(unsigned __int8 *)(a1 + 350) != *(unsigned __int8 *)(a2 + 350))
      return 0;
  }
  else if ((v5 & 0x8000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800000000) != 0)
  {
    if ((v5 & 0x800000000) == 0 || *(unsigned __int8 *)(a1 + 346) != *(unsigned __int8 *)(a2 + 346))
      return 0;
  }
  else if ((v5 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v6 & 0x20000) == 0 || *(_DWORD *)(a1 + 108) != *(_DWORD *)(a2 + 108))
      return 0;
  }
  else if ((v6 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400000) != 0)
  {
    if ((v5 & 0x400000) == 0 || *(unsigned __int8 *)(a1 + 333) != *(unsigned __int8 *)(a2 + 333))
      return 0;
  }
  else if ((v5 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800000) != 0)
  {
    if ((v5 & 0x800000) == 0 || *(unsigned __int8 *)(a1 + 334) != *(unsigned __int8 *)(a2 + 334))
      return 0;
  }
  else if ((v5 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20) != 0)
  {
    if ((v5 & 0x20) == 0 || *(unsigned __int8 *)(a1 + 316) != *(unsigned __int8 *)(a2 + 316))
      return 0;
  }
  else if ((v5 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v6 & 0x40000) == 0 || *(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 112))
      return 0;
  }
  else if ((v6 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40000000000) != 0)
  {
    if ((v5 & 0x40000000000) == 0 || *(unsigned __int8 *)(a1 + 353) != *(unsigned __int8 *)(a2 + 353))
      return 0;
  }
  else if ((v5 & 0x40000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10000000000) != 0)
  {
    if ((v5 & 0x10000000000) == 0 || *(unsigned __int8 *)(a1 + 351) != *(unsigned __int8 *)(a2 + 351))
      return 0;
  }
  else if ((v5 & 0x10000000000) != 0)
  {
    return 0;
  }
  v7 = *v4;
  v8 = *(_QWORD *)(a2 + 364);
  if ((v3 & 0x20000000000) != 0)
  {
    if ((v8 & 0x20000000000) == 0 || *(unsigned __int8 *)(a1 + 352) != *(unsigned __int8 *)(a2 + 352))
      return 0;
  }
  else if ((v8 & 0x20000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100000000) != 0)
  {
    if ((v8 & 0x100000000) == 0 || *(unsigned __int8 *)(a1 + 343) != *(unsigned __int8 *)(a2 + 343))
      return 0;
  }
  else if ((v8 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80000000) != 0)
  {
    if ((v8 & 0x80000000) == 0 || *(unsigned __int8 *)(a1 + 342) != *(unsigned __int8 *)(a2 + 342))
      return 0;
  }
  else if ((v8 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000000000) != 0)
  {
    if ((v7 & 0x20000000000000) == 0 || *(_DWORD *)(a1 + 252) != *(_DWORD *)(a2 + 252))
      return 0;
  }
  else if ((v7 & 0x20000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000000000) != 0)
  {
    if ((v7 & 0x40000000000000) == 0 || *(_DWORD *)(a1 + 256) != *(_DWORD *)(a2 + 256))
      return 0;
  }
  else if ((v7 & 0x40000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v7 & 0x4000000) == 0 || *(_DWORD *)(a1 + 144) != *(_DWORD *)(a2 + 144))
      return 0;
  }
  else if ((v7 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v7 & 0x8000000) == 0 || *(_DWORD *)(a1 + 148) != *(_DWORD *)(a2 + 148))
      return 0;
  }
  else if ((v7 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20000) != 0)
  {
    if ((v8 & 0x20000) == 0 || *(unsigned __int8 *)(a1 + 328) != *(unsigned __int8 *)(a2 + 328))
      return 0;
  }
  else if ((v8 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000) != 0)
  {
    if ((v8 & 0x4000) == 0 || *(unsigned __int8 *)(a1 + 325) != *(unsigned __int8 *)(a2 + 325))
      return 0;
  }
  else if ((v8 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000) != 0)
  {
    if ((v7 & 0x2000000000) == 0 || *(_DWORD *)(a1 + 188) != *(_DWORD *)(a2 + 188))
      return 0;
  }
  else if ((v7 & 0x2000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v7 & 0x80000) == 0 || *(_DWORD *)(a1 + 116) != *(_DWORD *)(a2 + 116))
      return 0;
  }
  else if ((v7 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000) != 0)
  {
    if ((v7 & 0x1000000000) == 0 || *(_DWORD *)(a1 + 184) != *(_DWORD *)(a2 + 184))
      return 0;
  }
  else if ((v7 & 0x1000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000000000) != 0)
  {
    if ((v7 & 0x4000000000000000) == 0 || *(float *)(a1 + 288) != *(float *)(a2 + 288))
      return 0;
  }
  else if ((v7 & 0x4000000000000000) != 0)
  {
    return 0;
  }
  if (v2 < 0)
  {
    if ((v7 & 0x8000000000000000) == 0 || *(float *)(a1 + 292) != *(float *)(a2 + 292))
      return 0;
  }
  else if (v7 < 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000000000) != 0)
  {
    if ((v7 & 0x200000000000000) == 0 || *(float *)(a1 + 268) != *(float *)(a2 + 268))
      return 0;
  }
  else if ((v7 & 0x200000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000000000) != 0)
  {
    if ((v7 & 0x800000000000000) == 0 || *(_DWORD *)(a1 + 276) != *(_DWORD *)(a2 + 276))
      return 0;
  }
  else if ((v7 & 0x800000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000000000) != 0)
  {
    if ((v7 & 0x2000000000000000) == 0 || *(_DWORD *)(a1 + 284) != *(_DWORD *)(a2 + 284))
      return 0;
  }
  else if ((v7 & 0x2000000000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400) != 0)
  {
    if ((v8 & 0x400) == 0 || *(unsigned __int8 *)(a1 + 321) != *(unsigned __int8 *)(a2 + 321))
      return 0;
  }
  else if ((v8 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v7 & 0x4000) == 0 || *(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96))
      return 0;
  }
  else if ((v7 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v7 & 0x1000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v7 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000000) != 0)
  {
    if ((v7 & 0x100000000000) == 0 || *(_DWORD *)(a1 + 216) != *(_DWORD *)(a2 + 216))
      return 0;
  }
  else if ((v7 & 0x100000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000000000) != 0)
  {
    if ((v7 & 0x100000000000000) == 0 || *(_DWORD *)(a1 + 264) != *(_DWORD *)(a2 + 264))
      return 0;
  }
  else if ((v7 & 0x100000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v7 & 0x40) == 0 || *(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 56))
      return 0;
  }
  else if ((v7 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000000) != 0)
  {
    if ((v7 & 0x800000000000) == 0 || *(_DWORD *)(a1 + 228) != *(_DWORD *)(a2 + 228))
      return 0;
  }
  else if ((v7 & 0x800000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000000) != 0)
  {
    if ((v7 & 0x1000000000000) == 0 || *(_DWORD *)(a1 + 232) != *(_DWORD *)(a2 + 232))
      return 0;
  }
  else if ((v7 & 0x1000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v7 & 0x100000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120))
      return 0;
  }
  else if ((v7 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v7 & 0x400) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v7 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v7 & 0x200000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124))
      return 0;
  }
  else if ((v7 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v7 & 0x800) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v7 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v7 & 0x100) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v7 & 0x100) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200000) != 0)
  {
    if ((v8 & 0x200000) == 0 || *(unsigned __int8 *)(a1 + 332) != *(unsigned __int8 *)(a2 + 332))
      return 0;
  }
  else if ((v8 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v3 & 4) != 0)
  {
    if ((v8 & 4) == 0 || *(_DWORD *)(a1 + 304) != *(_DWORD *)(a2 + 304))
      return 0;
  }
  else if ((v8 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v7 & 0x10000000) == 0 || *(_DWORD *)(a1 + 152) != *(_DWORD *)(a2 + 152))
      return 0;
  }
  else if ((v7 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v7 & 0x40000000) == 0 || *(_DWORD *)(a1 + 160) != *(_DWORD *)(a2 + 160))
      return 0;
  }
  else if ((v7 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000000000) != 0)
  {
    if ((v8 & 0x1000000000) == 0 || *(unsigned __int8 *)(a1 + 347) != *(unsigned __int8 *)(a2 + 347))
      return 0;
  }
  else if ((v8 & 0x1000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v7 & 0x80000000) == 0 || *(_DWORD *)(a1 + 164) != *(_DWORD *)(a2 + 164))
      return 0;
  }
  else if ((v7 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v7 & 0x20000000) == 0 || *(_DWORD *)(a1 + 156) != *(_DWORD *)(a2 + 156))
      return 0;
  }
  else if ((v7 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000000000) != 0)
  {
    if ((v7 & 0x8000000000000) == 0 || *(float *)(a1 + 244) != *(float *)(a2 + 244))
      return 0;
  }
  else if ((v7 & 0x8000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000) != 0)
  {
    if ((v7 & 0x4000000000) == 0 || *(_DWORD *)(a1 + 192) != *(_DWORD *)(a2 + 192))
      return 0;
  }
  else if ((v7 & 0x4000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000000) != 0)
  {
    if ((v7 & 0x8000000000) == 0 || *(_DWORD *)(a1 + 196) != *(_DWORD *)(a2 + 196))
      return 0;
  }
  else if ((v7 & 0x8000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v7 & 0x8000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v7 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000000) != 0)
  {
    if ((v7 & 0x40000000000) == 0 || *(_DWORD *)(a1 + 208) != *(_DWORD *)(a2 + 208))
      return 0;
  }
  else if ((v7 & 0x40000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000000) != 0)
  {
    if ((v7 & 0x10000000000) == 0 || *(_DWORD *)(a1 + 200) != *(_DWORD *)(a2 + 200))
      return 0;
  }
  else if ((v7 & 0x10000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000) != 0)
  {
    if ((v7 & 0x800000000) == 0 || *(_DWORD *)(a1 + 180) != *(_DWORD *)(a2 + 180))
      return 0;
  }
  else if ((v7 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v7 & 0x100000000) == 0 || *(_DWORD *)(a1 + 168) != *(_DWORD *)(a2 + 168))
      return 0;
  }
  else if ((v7 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v7 & 0x400000000) == 0 || *(_DWORD *)(a1 + 176) != *(_DWORD *)(a2 + 176))
      return 0;
  }
  else if ((v7 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100) != 0)
  {
    if ((v8 & 0x100) == 0 || *(unsigned __int8 *)(a1 + 319) != *(unsigned __int8 *)(a2 + 319))
      return 0;
  }
  else if ((v8 & 0x100) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40000) != 0)
  {
    if ((v8 & 0x40000) == 0 || *(unsigned __int8 *)(a1 + 329) != *(unsigned __int8 *)(a2 + 329))
      return 0;
  }
  else if ((v8 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v7 & 0x200000000) == 0 || *(_DWORD *)(a1 + 172) != *(_DWORD *)(a2 + 172))
      return 0;
  }
  else if ((v7 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v7 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v7 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v7 & 0x20) == 0 || *(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 48))
      return 0;
  }
  else if ((v7 & 0x20) != 0)
  {
    return 0;
  }
  v9 = *v4;
  if ((v2 & 4) != 0)
  {
    if ((v9 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v9 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v9 & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((v9 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v9 & 0x10) == 0 || *(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40))
      return 0;
  }
  else if ((v9 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000000) == 0)
  {
    if ((v9 & 0x2000000000000) == 0)
      goto LABEL_531;
    return 0;
  }
  if ((v9 & 0x2000000000000) == 0 || *(_DWORD *)(a1 + 236) != *(_DWORD *)(a2 + 236))
    return 0;
LABEL_531:
  v10 = (*v4 & 0x2000) == 0;
  if ((v2 & 0x2000) != 0)
    return (v9 & 0x2000) != 0 && *(float *)(a1 + 92) == *(float *)(a2 + 92);
  return v10;
}

BOOL CMMsl::KappaLocalAudioResult::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;

  v2 = *(_QWORD *)(a1 + 172);
  v3 = *(_QWORD *)(a2 + 172);
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140))
      return 0;
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132))
      return 0;
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(float *)(a1 + 148) != *(float *)(a2 + 148))
      return 0;
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(_DWORD *)(a1 + 104) != *(_DWORD *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(_DWORD *)(a1 + 100) != *(_DWORD *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v3 & 0x100000000) == 0 || *(float *)(a1 + 152) != *(float *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(_DWORD *)(a1 + 108) != *(_DWORD *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000000) != 0)
  {
    if ((v3 & 0x40000000000) == 0 || *(unsigned __int8 *)(a1 + 165) != *(unsigned __int8 *)(a2 + 165))
      return 0;
  }
  else if ((v3 & 0x40000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000000) != 0)
  {
    if ((v3 & 0x10000000000) == 0 || *(unsigned __int8 *)(a1 + 163) != *(unsigned __int8 *)(a2 + 163))
      return 0;
  }
  else if ((v3 & 0x10000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(unsigned __int8 *)(a1 + 156) != *(unsigned __int8 *)(a2 + 156))
      return 0;
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000000) != 0)
  {
    if ((v3 & 0x100000000000) == 0 || *(unsigned __int8 *)(a1 + 167) != *(unsigned __int8 *)(a2 + 167))
      return 0;
  }
  else if ((v3 & 0x100000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000) != 0)
  {
    if ((v3 & 0x800000000) == 0 || *(unsigned __int8 *)(a1 + 158) != *(unsigned __int8 *)(a2 + 158))
      return 0;
  }
  else if ((v3 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000) != 0)
  {
    if ((v3 & 0x4000000000) == 0 || *(unsigned __int8 *)(a1 + 161) != *(unsigned __int8 *)(a2 + 161))
      return 0;
  }
  else if ((v3 & 0x4000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000000) != 0)
  {
    if ((v3 & 0x80000000000) == 0 || *(unsigned __int8 *)(a1 + 166) != *(unsigned __int8 *)(a2 + 166))
      return 0;
  }
  else if ((v3 & 0x80000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000000) != 0)
  {
    if ((v3 & 0x20000000000) == 0 || *(unsigned __int8 *)(a1 + 164) != *(unsigned __int8 *)(a2 + 164))
      return 0;
  }
  else if ((v3 & 0x20000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v3 & 0x400000000) == 0 || *(unsigned __int8 *)(a1 + 157) != *(unsigned __int8 *)(a2 + 157))
      return 0;
  }
  else if ((v3 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000000) != 0)
  {
    if ((v3 & 0x200000000000) == 0 || *(unsigned __int8 *)(a1 + 168) != *(unsigned __int8 *)(a2 + 168))
      return 0;
  }
  else if ((v3 & 0x200000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000) != 0)
  {
    if ((v3 & 0x1000000000) == 0 || *(unsigned __int8 *)(a1 + 159) != *(unsigned __int8 *)(a2 + 159))
      return 0;
  }
  else if ((v3 & 0x1000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000000) != 0)
  {
    if ((v3 & 0x8000000000) == 0 || *(unsigned __int8 *)(a1 + 162) != *(unsigned __int8 *)(a2 + 162))
      return 0;
  }
  else if ((v3 & 0x8000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000) != 0)
  {
    if ((v3 & 0x2000000000) == 0 || *(unsigned __int8 *)(a1 + 160) != *(unsigned __int8 *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x2000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(_DWORD *)(a1 + 120) != *(_DWORD *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  v4 = (*(_QWORD *)(a2 + 172) & 0x400) == 0;
  if ((v2 & 0x400) != 0)
    return (v3 & 0x400) != 0 && *(float *)(a1 + 64) == *(float *)(a2 + 64);
  return v4;
}

BOOL CMMsl::KappaRemoteAudioResult::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  int v6;
  _BOOL8 v7;

  v2 = *(_QWORD *)(a1 + 204);
  v3 = *(_QWORD *)(a2 + 204);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  v4 = *(_WORD *)(a2 + 212);
  if ((*(_WORD *)(a1 + 212) & 2) != 0)
  {
    if ((v4 & 2) == 0 || *(unsigned __int8 *)(a1 + 188) != *(unsigned __int8 *)(a2 + 188))
      return 0;
  }
  else if ((v4 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 212) & 4) != 0)
  {
    if ((v4 & 4) == 0 || *(unsigned __int8 *)(a1 + 189) != *(unsigned __int8 *)(a2 + 189))
      return 0;
  }
  else if ((v4 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000000000) != 0)
  {
    if ((v3 & 0x400000000000000) == 0 || *(unsigned __int8 *)(a1 + 181) != *(unsigned __int8 *)(a2 + 181))
      return 0;
  }
  else if ((v3 & 0x400000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v3 & 0x400000000) == 0 || *(unsigned __int8 *)(a1 + 157) != *(unsigned __int8 *)(a2 + 157))
      return 0;
  }
  else if ((v3 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 212) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 212) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 197) != *(unsigned __int8 *)(a2 + 197))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 212) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000000) != 0)
  {
    if ((v3 & 0x40000000000) == 0 || *(unsigned __int8 *)(a1 + 165) != *(unsigned __int8 *)(a2 + 165))
      return 0;
  }
  else if ((v3 & 0x40000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000000) != 0)
  {
    if ((v3 & 0x4000000000000) == 0 || *(unsigned __int8 *)(a1 + 173) != *(unsigned __int8 *)(a2 + 173))
      return 0;
  }
  else if ((v3 & 0x4000000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 212) & 8) != 0)
  {
    if ((v4 & 8) == 0 || *(unsigned __int8 *)(a1 + 190) != *(unsigned __int8 *)(a2 + 190))
      return 0;
  }
  else if ((v4 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000000000) != 0)
  {
    if ((v3 & 0x4000000000000000) == 0 || *(unsigned __int8 *)(a1 + 185) != *(unsigned __int8 *)(a2 + 185))
      return 0;
  }
  else if ((v3 & 0x4000000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000) != 0)
  {
    if ((v3 & 0x4000000000) == 0 || *(unsigned __int8 *)(a1 + 161) != *(unsigned __int8 *)(a2 + 161))
      return 0;
  }
  else if ((v3 & 0x4000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 212) & 0x4000) != 0)
  {
    if ((*(_WORD *)(a2 + 212) & 0x4000) == 0 || *(unsigned __int8 *)(a1 + 201) != *(unsigned __int8 *)(a2 + 201))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 212) & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000000) != 0)
  {
    if ((v3 & 0x400000000000) == 0 || *(unsigned __int8 *)(a1 + 169) != *(unsigned __int8 *)(a2 + 169))
      return 0;
  }
  else if ((v3 & 0x400000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000000000) != 0)
  {
    if ((v3 & 0x40000000000000) == 0 || *(unsigned __int8 *)(a1 + 177) != *(unsigned __int8 *)(a2 + 177))
      return 0;
  }
  else if ((v3 & 0x40000000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 212) & 0x40) != 0)
  {
    if ((v4 & 0x40) == 0 || *(unsigned __int8 *)(a1 + 193) != *(unsigned __int8 *)(a2 + 193))
      return 0;
  }
  else if ((v4 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132))
      return 0;
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000000000) != 0)
  {
    if ((v3 & 0x800000000000000) == 0 || *(unsigned __int8 *)(a1 + 182) != *(unsigned __int8 *)(a2 + 182))
      return 0;
  }
  else if ((v3 & 0x800000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000) != 0)
  {
    if ((v3 & 0x800000000) == 0 || *(unsigned __int8 *)(a1 + 158) != *(unsigned __int8 *)(a2 + 158))
      return 0;
  }
  else if ((v3 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 212) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 212) & 0x800) == 0 || *(unsigned __int8 *)(a1 + 198) != *(unsigned __int8 *)(a2 + 198))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 212) & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000000) != 0)
  {
    if ((v3 & 0x80000000000) == 0 || *(unsigned __int8 *)(a1 + 166) != *(unsigned __int8 *)(a2 + 166))
      return 0;
  }
  else if ((v3 & 0x80000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000000000) != 0)
  {
    if ((v3 & 0x8000000000000) == 0 || *(unsigned __int8 *)(a1 + 174) != *(unsigned __int8 *)(a2 + 174))
      return 0;
  }
  else if ((v3 & 0x8000000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 212) & 0x10) != 0)
  {
    if ((v4 & 0x10) == 0 || *(unsigned __int8 *)(a1 + 191) != *(unsigned __int8 *)(a2 + 191))
      return 0;
  }
  else if ((v4 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(float *)(a1 + 148) != *(float *)(a2 + 148))
      return 0;
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if (v2 < 0)
  {
    if ((v3 & 0x8000000000000000) == 0 || *(unsigned __int8 *)(a1 + 186) != *(unsigned __int8 *)(a2 + 186))
      return 0;
  }
  else if (v3 < 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000000) != 0)
  {
    if ((v3 & 0x8000000000) == 0 || *(unsigned __int8 *)(a1 + 162) != *(unsigned __int8 *)(a2 + 162))
      return 0;
  }
  else if ((v3 & 0x8000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 212) & 0x8000) != 0)
  {
    if ((*(_WORD *)(a2 + 212) & 0x8000) == 0 || *(unsigned __int8 *)(a1 + 202) != *(unsigned __int8 *)(a2 + 202))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 212) & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000000) != 0)
  {
    if ((v3 & 0x800000000000) == 0 || *(unsigned __int8 *)(a1 + 170) != *(unsigned __int8 *)(a2 + 170))
      return 0;
  }
  else if ((v3 & 0x800000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000000000) != 0)
  {
    if ((v3 & 0x80000000000000) == 0 || *(unsigned __int8 *)(a1 + 178) != *(unsigned __int8 *)(a2 + 178))
      return 0;
  }
  else if ((v3 & 0x80000000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 212) & 0x80) != 0)
  {
    if ((v4 & 0x80) == 0 || *(unsigned __int8 *)(a1 + 194) != *(unsigned __int8 *)(a2 + 194))
      return 0;
  }
  else if ((v4 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000000000) != 0)
  {
    if ((v3 & 0x1000000000000000) == 0 || *(unsigned __int8 *)(a1 + 183) != *(unsigned __int8 *)(a2 + 183))
      return 0;
  }
  else if ((v3 & 0x1000000000000000) != 0)
  {
    return 0;
  }
  v5 = *(_QWORD *)(a2 + 204);
  if ((v2 & 0x1000000000) != 0)
  {
    if ((v5 & 0x1000000000) == 0 || *(unsigned __int8 *)(a1 + 159) != *(unsigned __int8 *)(a2 + 159))
      return 0;
  }
  else if ((v5 & 0x1000000000) != 0)
  {
    return 0;
  }
  v6 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  if ((*(_WORD *)(a1 + 212) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 212) & 0x1000) == 0 || *(unsigned __int8 *)(a1 + 199) != *(unsigned __int8 *)(a2 + 199))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 212) & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000000) != 0)
  {
    if ((v5 & 0x100000000000) == 0 || *(unsigned __int8 *)(a1 + 167) != *(unsigned __int8 *)(a2 + 167))
      return 0;
  }
  else if ((v5 & 0x100000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000000000) != 0)
  {
    if ((v5 & 0x10000000000000) == 0 || *(unsigned __int8 *)(a1 + 175) != *(unsigned __int8 *)(a2 + 175))
      return 0;
  }
  else if ((v5 & 0x10000000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 212) & 0x20) != 0)
  {
    if ((*(_WORD *)(a2 + 212) & 0x20) == 0 || *(unsigned __int8 *)(a1 + 192) != *(unsigned __int8 *)(a2 + 192))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 212) & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v5 & 0x100000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v5 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v5 & 0x1000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v5 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v5 & 0x100000000) == 0 || *(float *)(a1 + 152) != *(float *)(a2 + 152))
      return 0;
  }
  else if ((v5 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 212) & 1) != 0)
  {
    if ((*(_WORD *)(a2 + 212) & 1) == 0 || *(unsigned __int8 *)(a1 + 187) != *(unsigned __int8 *)(a2 + 187))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 212) & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000000) != 0)
  {
    if ((v5 & 0x10000000000) == 0 || *(unsigned __int8 *)(a1 + 163) != *(unsigned __int8 *)(a2 + 163))
      return 0;
  }
  else if ((v5 & 0x10000000000) != 0)
  {
    return 0;
  }
  if (((*(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16)) & 0x10000) != 0)
  {
    if ((v6 & 0x10000) == 0 || *(unsigned __int8 *)(a1 + 203) != *(unsigned __int8 *)(a2 + 203))
      return 0;
  }
  else if ((v6 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000000) != 0)
  {
    if ((v5 & 0x1000000000000) == 0 || *(unsigned __int8 *)(a1 + 171) != *(unsigned __int8 *)(a2 + 171))
      return 0;
  }
  else if ((v5 & 0x1000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000000000) != 0)
  {
    if ((v5 & 0x100000000000000) == 0 || *(unsigned __int8 *)(a1 + 179) != *(unsigned __int8 *)(a2 + 179))
      return 0;
  }
  else if ((v5 & 0x100000000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 212) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 212) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 195) != *(unsigned __int8 *)(a2 + 195))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 212) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v5 & 0x2000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v5 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v5 & 0x20) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v5 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v5 & 0x2000000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124))
      return 0;
  }
  else if ((v5 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000000000) != 0)
  {
    if ((v5 & 0x200000000000000) == 0 || *(unsigned __int8 *)(a1 + 180) != *(unsigned __int8 *)(a2 + 180))
      return 0;
  }
  else if ((v5 & 0x200000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v5 & 0x200000000) == 0 || *(unsigned __int8 *)(a1 + 156) != *(unsigned __int8 *)(a2 + 156))
      return 0;
  }
  else if ((v5 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 212) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 212) & 0x200) == 0 || *(unsigned __int8 *)(a1 + 196) != *(unsigned __int8 *)(a2 + 196))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 212) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000000) != 0)
  {
    if ((v5 & 0x20000000000) == 0 || *(unsigned __int8 *)(a1 + 164) != *(unsigned __int8 *)(a2 + 164))
      return 0;
  }
  else if ((v5 & 0x20000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000000) != 0)
  {
    if ((v5 & 0x2000000000000) == 0 || *(unsigned __int8 *)(a1 + 172) != *(unsigned __int8 *)(a2 + 172))
      return 0;
  }
  else if ((v5 & 0x2000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v5 & 0x20000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v5 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v5 & 0x200) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v5 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v5 & 0x20000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140))
      return 0;
  }
  else if ((v5 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000000000) != 0)
  {
    if ((v5 & 0x2000000000000000) == 0 || *(unsigned __int8 *)(a1 + 184) != *(unsigned __int8 *)(a2 + 184))
      return 0;
  }
  else if ((v5 & 0x2000000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000) != 0)
  {
    if ((v5 & 0x2000000000) == 0 || *(unsigned __int8 *)(a1 + 160) != *(unsigned __int8 *)(a2 + 160))
      return 0;
  }
  else if ((v5 & 0x2000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 212) & 0x2000) != 0)
  {
    if ((*(_WORD *)(a2 + 212) & 0x2000) == 0 || *(unsigned __int8 *)(a1 + 200) != *(unsigned __int8 *)(a2 + 200))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 212) & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000000) == 0)
  {
    if ((v5 & 0x200000000000) == 0)
      goto LABEL_401;
    return 0;
  }
  if ((v5 & 0x200000000000) == 0 || *(unsigned __int8 *)(a1 + 168) != *(unsigned __int8 *)(a2 + 168))
    return 0;
LABEL_401:
  v7 = (v5 & 0x20000000000000) == 0;
  if ((v2 & 0x20000000000000) != 0)
    return (v5 & 0x20000000000000) != 0 && *(unsigned __int8 *)(a1 + 176) == *(unsigned __int8 *)(a2 + 176);
  return v7;
}

BOOL CMMsl::ViewObstructedMachineLearningDecision::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
  return v2;
}

BOOL CMMsl::ViewObstructedMachineLearningFeatures::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 116);
  v3 = *(_DWORD *)(a2 + 116);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 116) & 2) == 0;
  if ((v2 & 2) != 0)
    return (v3 & 2) != 0 && *(float *)(a1 + 16) == *(float *)(a2 + 16);
  return v4;
}

BOOL CMMsl::ViewObstructedMachineLearningProbabilities::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 64);
  v3 = *(_WORD *)(a2 + 64);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x400) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x1000) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x1000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x200) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x800) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x800) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x100) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x80) == 0;
  if ((v2 & 0x80) != 0)
    return (v3 & 0x80) != 0 && *(float *)(a1 + 40) == *(float *)(a2 + 40);
  return v4;
}

BOOL CMMsl::RunningArmSwingSignals::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 64) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 64) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 64) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 64) & 0x40) != 0)
  {
    if ((*(_BYTE *)(a2 + 64) & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 64) & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 64) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 64) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 64) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 64) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 64) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 64) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 64) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 64) & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 64) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 64) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 64) & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 64) & 0x20) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 64) & 8) == 0;
  if ((*(_BYTE *)(a1 + 64) & 8) != 0)
    return (*(_BYTE *)(a2 + 64) & 8) != 0 && *(double *)(a1 + 32) == *(double *)(a2 + 32);
  return v2;
}

BOOL CMMsl::RunningCentripetalAccelSignals::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 120);
  v3 = *(_WORD *)(a2 + 120);
  if ((v2 & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 120) & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 120) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 120) & 0x2000) != 0)
  {
    if ((*(_WORD *)(a2 + 120) & 0x2000) == 0 || *(double *)(a1 + 112) != *(double *)(a2 + 112))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 120) & 0x2000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 120) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 120) & 0x400) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 120) & 0x400) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 120) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 120) & 0x800) == 0 || *(double *)(a1 + 96) != *(double *)(a2 + 96))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 120) & 0x800) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 120) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 120) & 0x1000) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 120) & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 120) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 120) & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 120) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  v4 = (v3 & 4) == 0;
  if ((v2 & 4) != 0)
    return (v3 & 4) != 0 && *(double *)(a1 + 24) == *(double *)(a2 + 24);
  return v4;
}

BOOL CMMsl::RunningRotationAxis::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 48) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 48) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 48) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 48) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 48) & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 48) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 48) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 48) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 48) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 48) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 48) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 48) & 4) == 0;
  if ((*(_BYTE *)(a1 + 48) & 4) != 0)
    return (*(_BYTE *)(a2 + 48) & 4) != 0 && *(double *)(a1 + 24) == *(double *)(a2 + 24);
  return v2;
}

BOOL CMMsl::RunningVerticalOscillationSignals::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 208);
  v3 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(double *)(a1 + 136) != *(double *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(double *)(a1 + 192) != *(double *)(a2 + 192))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(double *)(a1 + 96) != *(double *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(double *)(a1 + 200) != *(double *)(a2 + 200))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(double *)(a1 + 168) != *(double *)(a2 + 168))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(double *)(a1 + 176) != *(double *)(a2 + 176))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(double *)(a1 + 128) != *(double *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(double *)(a1 + 112) != *(double *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(double *)(a1 + 160) != *(double *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(double *)(a1 + 184) != *(double *)(a2 + 184))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(double *)(a1 + 152) != *(double *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(double *)(a1 + 144) != *(double *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 208) & 2) == 0;
  if ((v2 & 2) != 0)
    return (v3 & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  return v4;
}

BOOL CMMsl::RunningVerticalOscillation::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 40) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 40) & 2) == 0;
  if ((*(_BYTE *)(a1 + 40) & 2) != 0)
    return (*(_BYTE *)(a2 + 40) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  return v2;
}

BOOL CMMsl::KappaSpinResult::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 result;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  uint64_t v14;
  float v15;
  BOOL v16;

  v2 = *(_WORD *)(a1 + 204);
  v3 = *(_WORD *)(a2 + 204);
  if ((v2 & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 204) & 0x1000) == 0 || *(float *)(a1 + 196) != *(float *)(a2 + 196))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 204) & 0x1000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 204) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 204) & 0x800) == 0 || *(float *)(a1 + 192) != *(float *)(a2 + 192))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 204) & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_QWORD *)(a1 + 160) != *(_QWORD *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 204) & 0x4000) != 0)
  {
    if ((*(_WORD *)(a2 + 204) & 0x4000) == 0 || *(unsigned __int8 *)(a1 + 201) != *(unsigned __int8 *)(a2 + 201))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 204) & 0x4000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 204) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 204) & 0x400) == 0 || *(float *)(a1 + 188) != *(float *)(a2 + 188))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 204) & 0x400) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 204) & 0x2000) != 0)
  {
    if ((*(_WORD *)(a2 + 204) & 0x2000) == 0 || *(unsigned __int8 *)(a1 + 200) != *(unsigned __int8 *)(a2 + 200))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 204) & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 144) != *(_QWORD *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_QWORD *)(a1 + 152) != *(_QWORD *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 204) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 204) & 0x100) == 0 || *(float *)(a1 + 180) != *(float *)(a2 + 180))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 204) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 176) != *(float *)(a2 + 176))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 172) != *(float *)(a2 + 172))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 128) != *(_QWORD *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 136) != *(_QWORD *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 204) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 204) & 0x200) == 0 || *(_DWORD *)(a1 + 184) != *(_DWORD *)(a2 + 184))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 204) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 168) != *(float *)(a2 + 168))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  result = sub_1000615E4(a1 + 80, a2 + 80);
  if (result)
  {
    result = sub_1000615E4(a1 + 104, a2 + 104);
    if (result)
    {
      v6 = *(float **)(a1 + 8);
      v5 = *(float **)(a1 + 16);
      v7 = *(float **)(a2 + 8);
      if ((char *)v5 - (char *)v6 != *(_QWORD *)(a2 + 16) - (_QWORD)v7)
        return 0;
      while (v6 != v5)
      {
        if (*v6 != *v7)
          return 0;
        ++v6;
        ++v7;
      }
      v9 = *(float **)(a1 + 56);
      v8 = *(float **)(a1 + 64);
      v10 = *(float **)(a2 + 56);
      if ((char *)v8 - (char *)v9 != *(_QWORD *)(a2 + 64) - (_QWORD)v10)
        return 0;
      while (v9 != v8)
      {
        if (*v9 != *v10)
          return 0;
        ++v9;
        ++v10;
      }
      v12 = *(_QWORD *)(a1 + 32);
      v11 = *(_QWORD *)(a1 + 40);
      v13 = *(float **)(a2 + 32);
      if (v11 - v12 != *(_QWORD *)(a2 + 40) - (_QWORD)v13)
        return 0;
      if (v12 == v11)
      {
        return 1;
      }
      else
      {
        v14 = v12 + 4;
        do
        {
          v15 = *v13++;
          result = *(float *)(v14 - 4) == v15;
          v16 = *(float *)(v14 - 4) != v15 || v14 == v11;
          v14 += 4;
        }
        while (!v16);
      }
    }
  }
  return result;
}

BOOL CMMsl::KappaPulseDeltaV::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 112);
  v3 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(unsigned __int8 *)(a1 + 108) != *(unsigned __int8 *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 112) & 4) == 0;
  if ((v2 & 4) != 0)
    return (v3 & 4) != 0 && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24);
  return v4;
}

BOOL CMMsl::RunningStrideLength::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 136);
  v3 = *(_DWORD *)(a2 + 136);
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(double *)(a1 + 96) != *(double *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(double *)(a1 + 112) != *(double *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(_DWORD *)(a1 + 128) != *(_DWORD *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(unsigned __int8 *)(a1 + 132) != *(unsigned __int8 *)(a2 + 132))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 136) & 2) == 0;
  if ((v2 & 2) != 0)
    return (v3 & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  return v4;
}

BOOL CMMsl::KappaHighSpeedCrashResult::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 68);
  v3 = *(_DWORD *)(a2 + 68);
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(unsigned __int8 *)(a1 + 56) != *(unsigned __int8 *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(unsigned __int8 *)(a1 + 57) != *(unsigned __int8 *)(a2 + 57))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(unsigned __int8 *)(a1 + 58) != *(unsigned __int8 *)(a2 + 58))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(unsigned __int8 *)(a1 + 65) != *(unsigned __int8 *)(a2 + 65))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(unsigned __int8 *)(a1 + 63) != *(unsigned __int8 *)(a2 + 63))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(unsigned __int8 *)(a1 + 60) != *(unsigned __int8 *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(unsigned __int8 *)(a1 + 59) != *(unsigned __int8 *)(a2 + 59))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(unsigned __int8 *)(a1 + 64) != *(unsigned __int8 *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(unsigned __int8 *)(a1 + 61) != *(unsigned __int8 *)(a2 + 61))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(unsigned __int8 *)(a1 + 62) != *(unsigned __int8 *)(a2 + 62))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 68) & 0x80) == 0;
  if ((v2 & 0x80) != 0)
    return (v3 & 0x80) != 0 && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40);
  return v4;
}

BOOL CMMsl::KappaPulseInertialHgAccel::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 104);
  v3 = *(_WORD *)(a2 + 104);
  if ((v2 & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 104) & 0x800) == 0 || *(_QWORD *)(a1 + 96) != *(_QWORD *)(a2 + 96))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 104) & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 104) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 104) & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 104) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 104) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 104) & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 104) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 104) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 104) & 0x400) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 104) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  v4 = (v3 & 4) == 0;
  if ((v2 & 4) != 0)
    return (v3 & 4) != 0 && *(double *)(a1 + 24) == *(double *)(a2 + 24);
  return v4;
}

BOOL CMMsl::PedometerPathStraightness::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 56) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 0x20) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 56) & 1) == 0;
  if ((*(_BYTE *)(a1 + 56) & 1) != 0)
    return (*(_BYTE *)(a2 + 56) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return v2;
}

BOOL CMMsl::VO2MaxModelInput::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 40) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 40) & 8) == 0;
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
    return (*(_BYTE *)(a2 + 40) & 8) != 0 && *(double *)(a1 + 32) == *(double *)(a2 + 32);
  return v2;
}

BOOL CMMsl::ProxCalibration::operator==(uint64_t a1, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  float v9;
  _BOOL8 result;
  BOOL v11;

  if ((*(_BYTE *)(a1 + 72) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 72) & 2) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 72) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 72) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 72) & 1) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 72) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 72) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 72) & 4) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 72) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 72) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 72) & 8) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 72) & 8) != 0)
  {
    return 0;
  }
  v3 = *(float **)(a1 + 8);
  v2 = *(float **)(a1 + 16);
  v4 = *(float **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v7 = *(float **)(a2 + 32);
  if (v5 - v6 != *(_QWORD *)(a2 + 40) - (_QWORD)v7)
    return 0;
  if (v6 == v5)
    return 1;
  v8 = v6 + 4;
  do
  {
    v9 = *v7++;
    result = *(float *)(v8 - 4) == v9;
    v11 = *(float *)(v8 - 4) != v9 || v8 == v5;
    v8 += 4;
  }
  while (!v11);
  return result;
}

BOOL CMMsl::KappaStepsResult::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 60);
  v3 = *(_WORD *)(a2 + 60);
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 56) != *(unsigned __int8 *)(a2 + 56))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 60) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  v4 = (v3 & 2) == 0;
  if ((v2 & 2) != 0)
    return (v3 & 2) != 0 && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
  return v4;
}

BOOL CMMsl::WakeGestureSample::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 84);
  v3 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(unsigned __int8 *)(a1 + 76) != *(unsigned __int8 *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(unsigned __int8 *)(a1 + 81) != *(unsigned __int8 *)(a2 + 81))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(unsigned __int8 *)(a1 + 79) != *(unsigned __int8 *)(a2 + 79))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(unsigned __int8 *)(a1 + 80) != *(unsigned __int8 *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(unsigned __int8 *)(a1 + 78) != *(unsigned __int8 *)(a2 + 78))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(unsigned __int8 *)(a1 + 82) != *(unsigned __int8 *)(a2 + 82))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(unsigned __int8 *)(a1 + 77) != *(unsigned __int8 *)(a2 + 77))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 84) & 0x40) == 0;
  if ((v2 & 0x40) != 0)
    return (v3 & 0x40) != 0 && *(_DWORD *)(a1 + 56) == *(_DWORD *)(a2 + 56);
  return v4;
}

BOOL CMMsl::KappaGravityAutocorrelationResult::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 64);
  v3 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x800) == 0 || *(unsigned __int8 *)(a1 + 61) != *(unsigned __int8 *)(a2 + 61))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x800) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 60) != *(unsigned __int8 *)(a2 + 60))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x200) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x100) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x100) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x80) == 0;
  if ((v2 & 0x80) != 0)
    return (v3 & 0x80) != 0 && *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48);
  return v4;
}

BOOL CMMsl::RunningVerticalOscillationGradientBoostedSignals::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 212);
  v3 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(double *)(a1 + 152) != *(double *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(double *)(a1 + 96) != *(double *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(double *)(a1 + 200) != *(double *)(a2 + 200))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(double *)(a1 + 176) != *(double *)(a2 + 176))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(double *)(a1 + 168) != *(double *)(a2 + 168))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(double *)(a1 + 144) != *(double *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(double *)(a1 + 128) != *(double *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(double *)(a1 + 192) != *(double *)(a2 + 192))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(double *)(a1 + 112) != *(double *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(double *)(a1 + 136) != *(double *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(double *)(a1 + 184) != *(double *)(a2 + 184))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(double *)(a1 + 160) != *(double *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x2000000) == 0;
  if ((v2 & 0x2000000) != 0)
    return (v3 & 0x2000000) != 0 && *(unsigned __int8 *)(a1 + 208) == *(unsigned __int8 *)(a2 + 208);
  return v4;
}

BOOL CMMsl::SubStats::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 56);
  v3 = *(_WORD *)(a2 + 56);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 56) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 56) & 0x200) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 56) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 56) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 56) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 52) != *(unsigned __int8 *)(a2 + 52))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 56) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 56) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 56) & 0x100) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 56) & 0x100) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x40) == 0;
  if ((v2 & 0x40) != 0)
    return (v3 & 0x40) != 0 && *(float *)(a1 + 36) == *(float *)(a2 + 36);
  return v4;
}

BOOL CMMsl::PedOdomFusionExtendedModeSegment::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 56) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 0x40) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 0x40) == 0 || *(unsigned __int8 *)(a1 + 52) != *(unsigned __int8 *)(a2 + 52))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 0x40) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 56) & 0x20) == 0;
  if ((*(_BYTE *)(a1 + 56) & 0x20) != 0)
    return (*(_BYTE *)(a2 + 56) & 0x20) != 0 && *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48);
  return v2;
}

BOOL CMMsl::MagicMountState::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

BOOL CMMsl::PDRPedestrianClassifierState::operator==(uint64_t a1, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  _BOOL8 v5;

  if ((*(_BYTE *)(a1 + 52) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 52) & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 52) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 52) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 52) & 4) == 0 || *(unsigned __int8 *)(a1 + 48) != *(unsigned __int8 *)(a2 + 48))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 52) & 4) != 0)
  {
    return 0;
  }
  v3 = *(float **)(a1 + 8);
  v2 = *(float **)(a1 + 16);
  v4 = *(float **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v5 = (*(_BYTE *)(a2 + 52) & 2) == 0;
  if ((*(_BYTE *)(a1 + 52) & 2) != 0)
    return (*(_BYTE *)(a2 + 52) & 2) != 0 && *(double *)(a1 + 40) == *(double *)(a2 + 40);
  return v5;
}

BOOL CMMsl::PDRPlacementClassifierState::operator==(uint64_t a1, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  _BOOL8 v5;

  if ((*(_BYTE *)(a1 + 52) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 52) & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 52) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 52) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 52) & 4) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 52) & 4) != 0)
  {
    return 0;
  }
  v3 = *(float **)(a1 + 8);
  v2 = *(float **)(a1 + 16);
  v4 = *(float **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v5 = (*(_BYTE *)(a2 + 52) & 2) == 0;
  if ((*(_BYTE *)(a1 + 52) & 2) != 0)
    return (*(_BYTE *)(a2 + 52) & 2) != 0 && *(double *)(a1 + 40) == *(double *)(a2 + 40);
  return v5;
}

BOOL CMMsl::PDRSpeedEstimatorState::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 2) == 0;
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
    return (*(_BYTE *)(a2 + 32) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  return v2;
}

BOOL CMMsl::PDRDOTEstimatorState::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 2) == 0;
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
    return (*(_BYTE *)(a2 + 32) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  return v2;
}

BOOL CMMsl::PDRVelocityEstimatorState::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(unsigned __int8 *)(a1 + 48);
  v3 = *(unsigned __int8 *)(a2 + 48);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & v3 & 0x80) != 0)
  {
    if (*(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if (((v2 | v3) & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  v4 = (v3 & 2) == 0;
  if ((v2 & 2) != 0)
    return (v3 & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  return v4;
}

BOOL CMMsl::KMVelocityEstimatorState::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 52);
  v3 = *(_WORD *)(a2 + 52);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 52) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 52) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 48) != *(unsigned __int8 *)(a2 + 48))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 52) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 52) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 52) & 0x200) == 0 || *(unsigned __int8 *)(a1 + 49) != *(unsigned __int8 *)(a2 + 49))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 52) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 52) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 52) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 50) != *(unsigned __int8 *)(a2 + 50))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 52) & 0x400) != 0)
  {
    return 0;
  }
  v4 = (v3 & 2) == 0;
  if ((v2 & 2) != 0)
    return (v3 & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  return v4;
}

BOOL CMMsl::VelocityEstimatorFusionState::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 60);
  v3 = *(_WORD *)(a2 + 60);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x100) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 60) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x200) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 60) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x400) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 60) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  v4 = (v3 & 2) == 0;
  if ((v2 & 2) != 0)
    return (v3 & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  return v4;
}

BOOL CMMsl::PDRFenceReference::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(float *)(a1 + 16) == *(float *)(a2 + 16);
  return v2;
}

BOOL CMMsl::PDRFenceState::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 68);
  v3 = *(_WORD *)(a2 + 68);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x200) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x400) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x400) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x800) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x100) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x1000) == 0 || *(unsigned __int8 *)(a1 + 64) != *(unsigned __int8 *)(a2 + 64))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  v4 = (v3 & 4) == 0;
  if ((v2 & 4) != 0)
    return (v3 & 4) != 0 && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
  return v4;
}

BOOL CMMsl::UWBRange::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 56) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 0x10) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 56) & 0x20) == 0;
  if ((*(_BYTE *)(a1 + 56) & 0x20) != 0)
    return (*(_BYTE *)(a2 + 56) & 0x20) != 0 && *(double *)(a1 + 48) == *(double *)(a2 + 48);
  return v2;
}

BOOL CMMsl::KappaTriggerClustersResult::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(unsigned __int16 *)(a1 + 96);
  v3 = *(unsigned __int16 *)(a2 + 96);
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & v3 & 0x8000) != 0)
  {
    if (*(unsigned __int8 *)(a1 + 94) != *(unsigned __int8 *)(a2 + 94))
      return 0;
  }
  else if (((v2 | v3) & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(unsigned __int8 *)(a1 + 93) != *(unsigned __int8 *)(a2 + 93))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(unsigned __int8 *)(a1 + 92) != *(unsigned __int8 *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  v4 = (v3 & 4) == 0;
  if ((v2 & 4) != 0)
    return (v3 & 4) != 0 && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24);
  return v4;
}

BOOL CMMsl::SimActivityEvent::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
LABEL_6:
    v2 = *(_QWORD *)(a1 + 8);
    v3 = *(_QWORD *)(a2 + 8);
    result = v3 == 0;
    if (!v2)
      return result;
    if (!v3)
      return 0;
    if ((*(_BYTE *)(v2 + 12) & 1) != 0)
    {
      if ((*(_BYTE *)(v3 + 12) & 1) == 0 || *(_DWORD *)(v2 + 8) != *(_DWORD *)(v3 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v3 + 12) & 1) != 0)
    {
      return 0;
    }
    return 1;
  }
  if ((*(_BYTE *)(a2 + 24) & 1) == 0)
    goto LABEL_6;
  return 0;
}

BOOL CMMsl::PDRFeatures::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 108);
  v3 = *(_DWORD *)(a2 + 108);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 108) & 2) == 0;
  if ((v2 & 2) != 0)
    return (v3 & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  return v4;
}

BOOL CMMsl::PDRDOTEstimatorStateBody::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 2) == 0;
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
    return (*(_BYTE *)(a2 + 32) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  return v2;
}

BOOL CMMsl::PDRDOTEstimatorStateArmSwing::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 2) == 0;
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
    return (*(_BYTE *)(a2 + 32) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  return v2;
}

BOOL CMMsl::PDRDOTEstimatorStateHeading::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 2) == 0;
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
    return (*(_BYTE *)(a2 + 32) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  return v2;
}

BOOL CMMsl::PDRSpeedEstimatorStateDebug::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 2) == 0;
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
    return (*(_BYTE *)(a2 + 32) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  return v2;
}

BOOL CMMsl::PrecisionFindingDOTEstimate::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 24) & 1) == 0;
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    return (*(_BYTE *)(a2 + 24) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return v2;
}

BOOL CMMsl::PrecisionFindingState::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 92);
  v3 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 92) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 92) & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 92) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 92) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 92) & 0x800) == 0 || *(unsigned __int8 *)(a1 + 88) != *(unsigned __int8 *)(a2 + 88))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 92) & 0x800) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 92) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 92) & 0x400) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 92) & 0x400) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 92) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 92) & 0x200) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 92) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 92) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 92) & 0x1000) == 0 || *(unsigned __int8 *)(a1 + 89) != *(unsigned __int8 *)(a2 + 89))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 92) & 0x1000) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x20) == 0;
  if ((v2 & 0x20) != 0)
    return (v3 & 0x20) != 0 && *(double *)(a1 + 48) == *(double *)(a2 + 48);
  return v4;
}

BOOL CMMsl::KappaRoadsResult::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 40) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 8) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 0x10) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 40) & 2) == 0;
  if ((*(_BYTE *)(a1 + 40) & 2) != 0)
    return (*(_BYTE *)(a2 + 40) & 2) != 0 && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
  return v2;
}

BOOL CMMsl::PrecisionFindingVelocityEstimate::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(unsigned __int8 *)(a1 + 44);
  v3 = *(unsigned __int8 *)(a2 + 44);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & v3 & 0x80) != 0)
  {
    if (*(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if (((v2 | v3) & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  v4 = (v3 & 8) == 0;
  if ((v2 & 8) != 0)
    return (v3 & 8) != 0 && *(float *)(a1 + 24) == *(float *)(a2 + 24);
  return v4;
}

BOOL CMMsl::PrecisionFindingRangeFilter::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 40) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 0x10) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 0x20) == 0 || *(unsigned __int8 *)(a1 + 36) != *(unsigned __int8 *)(a2 + 36))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 0x20) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 40) & 0x40) == 0;
  if ((*(_BYTE *)(a1 + 40) & 0x40) != 0)
    return (*(_BYTE *)(a2 + 40) & 0x40) != 0 && *(unsigned __int8 *)(a1 + 37) == *(unsigned __int8 *)(a2 + 37);
  return v2;
}

BOOL CMMsl::PDRDOTMeasurementSelectorState::operator==(uint64_t a1, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  _BOOL8 v5;

  if ((*(_BYTE *)(a1 + 52) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 52) & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 52) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 52) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 52) & 4) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 52) & 4) != 0)
  {
    return 0;
  }
  v3 = *(float **)(a1 + 8);
  v2 = *(float **)(a1 + 16);
  v4 = *(float **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v5 = (*(_BYTE *)(a2 + 52) & 2) == 0;
  if ((*(_BYTE *)(a1 + 52) & 2) != 0)
    return (*(_BYTE *)(a2 + 52) & 2) != 0 && *(double *)(a1 + 40) == *(double *)(a2 + 40);
  return v5;
}

BOOL CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 0x40) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 0x10) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 40) & 8) == 0;
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
    return (*(_BYTE *)(a2 + 40) & 8) != 0 && *(float *)(a1 + 24) == *(float *)(a2 + 24);
  return v2;
}

BOOL CMMsl::PeerState::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

BOOL CMMsl::MagnetometerCalibratorFilterParameters::operator==(uint64_t a1, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  uint64_t v14;
  float v15;
  _BOOL8 result;
  BOOL v17;

  if ((*(_BYTE *)(a1 + 112) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 112) & 1) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 112) & 1) != 0)
  {
    return 0;
  }
  v3 = *(float **)(a1 + 32);
  v2 = *(float **)(a1 + 40);
  v4 = *(float **)(a2 + 32);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 40) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(float **)(a1 + 8);
  v5 = *(float **)(a1 + 16);
  v7 = *(float **)(a2 + 8);
  if ((char *)v5 - (char *)v6 != *(_QWORD *)(a2 + 16) - (_QWORD)v7)
    return 0;
  while (v6 != v5)
  {
    if (*v6 != *v7)
      return 0;
    ++v6;
    ++v7;
  }
  v9 = *(float **)(a1 + 80);
  v8 = *(float **)(a1 + 88);
  v10 = *(float **)(a2 + 80);
  if ((char *)v8 - (char *)v9 != *(_QWORD *)(a2 + 88) - (_QWORD)v10)
    return 0;
  while (v9 != v8)
  {
    if (*v9 != *v10)
      return 0;
    ++v9;
    ++v10;
  }
  v12 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 64);
  v13 = *(float **)(a2 + 56);
  if (v11 - v12 != *(_QWORD *)(a2 + 64) - (_QWORD)v13)
    return 0;
  if (v12 == v11)
    return 1;
  v14 = v12 + 4;
  do
  {
    v15 = *v13++;
    result = *(float *)(v14 - 4) == v15;
    v17 = *(float *)(v14 - 4) != v15 || v14 == v11;
    v14 += 4;
  }
  while (!v17);
  return result;
}

BOOL CMMsl::KappaActivityPhone::operator==(uint64_t a1, uint64_t a2)
{
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  _BOOL8 result;

  if ((*(_BYTE *)(a1 + 140) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 140) & 1) == 0 || *(_QWORD *)(a1 + 104) != *(_QWORD *)(a2 + 104))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 140) & 1) != 0)
  {
    return 0;
  }
  v5 = *(float **)(a1 + 8);
  v4 = *(float **)(a1 + 16);
  v6 = *(float **)(a2 + 8);
  if ((char *)v4 - (char *)v5 != *(_QWORD *)(a2 + 16) - (_QWORD)v6)
    return 0;
  while (v5 != v4)
  {
    if (*v5 != *v6)
      return 0;
    ++v5;
    ++v6;
  }
  if ((*(_BYTE *)(a1 + 140) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 140) & 4) == 0 || *(_DWORD *)(a1 + 120) != *(_DWORD *)(a2 + 120))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 140) & 4) != 0)
  {
    return 0;
  }
  v8 = *(float **)(a1 + 80);
  v7 = *(float **)(a1 + 88);
  v9 = *(float **)(a2 + 80);
  if ((char *)v7 - (char *)v8 != *(_QWORD *)(a2 + 88) - (_QWORD)v9)
    return 0;
  while (v8 != v7)
  {
    if (*v8 != *v9)
      return 0;
    ++v8;
    ++v9;
  }
  if ((*(_BYTE *)(a1 + 140) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 140) & 2) == 0 || *(_QWORD *)(a1 + 112) != *(_QWORD *)(a2 + 112))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 140) & 2) != 0)
  {
    return 0;
  }
  result = sub_1000615E4(a1 + 32, a2 + 32);
  if (result)
  {
    result = sub_1000615E4(a1 + 56, a2 + 56);
    if (result)
    {
      if ((*(_BYTE *)(a1 + 140) & 0x20) != 0)
      {
        if ((*(_BYTE *)(a2 + 140) & 0x20) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132))
          return 0;
      }
      else if ((*(_BYTE *)(a2 + 140) & 0x20) != 0)
      {
        return 0;
      }
      if ((*(_BYTE *)(a1 + 140) & 8) != 0)
      {
        if ((*(_BYTE *)(a2 + 140) & 8) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124))
          return 0;
      }
      else if ((*(_BYTE *)(a2 + 140) & 8) != 0)
      {
        return 0;
      }
      if ((*(_BYTE *)(a1 + 140) & 0x10) != 0)
      {
        if ((*(_BYTE *)(a2 + 140) & 0x10) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128))
          return 0;
      }
      else if ((*(_BYTE *)(a2 + 140) & 0x10) != 0)
      {
        return 0;
      }
      result = (*(_BYTE *)(a2 + 140) & 0x40) == 0;
      if ((*(_BYTE *)(a1 + 140) & 0x40) == 0)
        return result;
      return (*(_BYTE *)(a2 + 140) & 0x40) != 0 && *(float *)(a1 + 136) == *(float *)(a2 + 136);
    }
  }
  return result;
}

BOOL CMMsl::KappaActivityWatch::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  __int16 v5;
  const void *v6;
  size_t v7;
  const void *v8;
  _BOOL8 result;
  __int16 v10;
  __int16 v11;

  v4 = *(_WORD *)(a1 + 104);
  v5 = *(_WORD *)(a2 + 104);
  if ((v4 & 1) != 0)
  {
    if ((v5 & 1) == 0 || *(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 56))
      return 0;
  }
  else if ((v5 & 1) != 0)
  {
    return 0;
  }
  v6 = *(const void **)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40) - (_QWORD)v6;
  v8 = *(const void **)(a2 + 32);
  if (v7 != *(_QWORD *)(a2 + 40) - (_QWORD)v8 || memcmp(v6, v8, v7))
    return 0;
  if ((v4 & 0x100) != 0)
  {
    if ((v5 & 0x100) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v5 & 0x100) != 0)
  {
    return 0;
  }
  if ((v4 & 0x40) != 0)
  {
    if ((v5 & 0x40) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v5 & 0x40) != 0)
  {
    return 0;
  }
  if ((v4 & 0x80) != 0)
  {
    if ((v5 & 0x80) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v5 & 0x80) != 0)
  {
    return 0;
  }
  if ((v4 & 0x20) != 0)
  {
    if ((v5 & 0x20) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88))
      return 0;
  }
  else if ((v5 & 0x20) != 0)
  {
    return 0;
  }
  if ((v4 & 2) != 0)
  {
    if ((v5 & 2) == 0 || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a2 + 64))
      return 0;
  }
  else if ((v5 & 2) != 0)
  {
    return 0;
  }
  if ((v4 & 4) != 0)
  {
    if ((v5 & 4) == 0 || *(_QWORD *)(a1 + 72) != *(_QWORD *)(a2 + 72))
      return 0;
  }
  else if ((v5 & 4) != 0)
  {
    return 0;
  }
  result = sub_1000615E4(a1 + 8, a2 + 8);
  if (!result)
    return result;
  v10 = *(_WORD *)(a1 + 104);
  v11 = *(_WORD *)(a2 + 104);
  if ((v10 & 0x10) != 0)
  {
    if ((v11 & 0x10) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
    goto LABEL_46;
  }
  if ((v11 & 0x10) != 0)
    return 0;
LABEL_46:
  result = (v11 & 8) == 0;
  if ((v10 & 8) != 0)
    return (v11 & 8) != 0 && *(float *)(a1 + 80) == *(float *)(a2 + 80);
  return result;
}

BOOL CMMsl::PrecisionFindingSessionStartStop::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
  return v2;
}

BOOL CMMsl::PDRDOTEstimatorStateDebug::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 2) == 0;
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
    return (*(_BYTE *)(a2 + 32) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  return v2;
}

BOOL CMMsl::PDRDOTEstimatorStateBodyDebug::operator==(uint64_t a1, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  _BOOL8 v8;

  if ((*(_BYTE *)(a1 + 72) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 72) & 1) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 72) & 1) != 0)
  {
    return 0;
  }
  v3 = *(float **)(a1 + 8);
  v2 = *(float **)(a1 + 16);
  v4 = *(float **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(float **)(a1 + 32);
  v5 = *(float **)(a1 + 40);
  v7 = *(float **)(a2 + 32);
  if ((char *)v5 - (char *)v6 != *(_QWORD *)(a2 + 40) - (_QWORD)v7)
    return 0;
  while (v6 != v5)
  {
    if (*v6 != *v7)
      return 0;
    ++v6;
    ++v7;
  }
  if ((*(_BYTE *)(a1 + 72) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 72) & 2) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 72) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 72) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 72) & 8) == 0 || *(unsigned __int8 *)(a1 + 69) != *(unsigned __int8 *)(a2 + 69))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 72) & 8) != 0)
  {
    return 0;
  }
  v8 = (*(_BYTE *)(a2 + 72) & 4) == 0;
  if ((*(_BYTE *)(a1 + 72) & 4) != 0)
    return (*(_BYTE *)(a2 + 72) & 4) != 0 && *(unsigned __int8 *)(a1 + 68) == *(unsigned __int8 *)(a2 + 68);
  return v8;
}

BOOL CMMsl::KappaPeakDetectorMapResult::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 result;
  float *v5;
  float *v6;
  float *v7;
  int v8;
  int v9;

  v2 = *(_DWORD *)(a1 + 152);
  v3 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_QWORD *)(a1 + 80) != *(_QWORD *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(_DWORD *)(a1 + 128) != *(_DWORD *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_QWORD *)(a1 + 88) != *(_QWORD *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_QWORD *)(a1 + 96) != *(_QWORD *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(unsigned __int8 *)(a1 + 148) != *(unsigned __int8 *)(a2 + 148))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_QWORD *)(a1 + 104) != *(_QWORD *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 132) != *(_DWORD *)(a2 + 132))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 72) != *(_QWORD *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  result = sub_1000615E4(a1 + 8, a2 + 8);
  if (!result)
    return result;
  v6 = *(float **)(a1 + 32);
  v5 = *(float **)(a1 + 40);
  v7 = *(float **)(a2 + 32);
  if ((char *)v5 - (char *)v6 != *(_QWORD *)(a2 + 40) - (_QWORD)v7)
    return 0;
  while (v6 != v5)
  {
    if (*v6 != *v7)
      return 0;
    ++v6;
    ++v7;
  }
  v8 = *(_DWORD *)(a1 + 152);
  v9 = *(_DWORD *)(a2 + 152);
  if ((v8 & 1) != 0)
  {
    if ((v9 & 1) == 0 || *(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 56))
      return 0;
  }
  else if ((v9 & 1) != 0)
  {
    return 0;
  }
  if ((v8 & 2) != 0)
  {
    if ((v9 & 2) == 0 || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a2 + 64))
      return 0;
  }
  else if ((v9 & 2) != 0)
  {
    return 0;
  }
  result = (v9 & 0x20000) == 0;
  if ((v8 & 0x20000) == 0)
    return result;
  return (v9 & 0x20000) != 0 && *(unsigned __int8 *)(a1 + 149) == *(unsigned __int8 *)(a2 + 149);
}

BOOL CMMsl::KappaPeakDetectorMapMagTimestamps::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 44) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 0x10) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 0x10) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 44) & 4) == 0;
  if ((*(_BYTE *)(a1 + 44) & 4) != 0)
    return (*(_BYTE *)(a2 + 44) & 4) != 0 && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24);
  return v2;
}

BOOL CMMsl::PrecisionFindingVerticalState::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 60);
  v3 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 58) != *(unsigned __int8 *)(a2 + 58))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 60) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(unsigned __int8 *)(a1 + 56) != *(unsigned __int8 *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x80) == 0;
  if ((v2 & 0x80) != 0)
    return (v3 & 0x80) != 0 && *(unsigned __int8 *)(a1 + 57) == *(unsigned __int8 *)(a2 + 57);
  return v4;
}

BOOL CMMsl::PencilFusionDMYawAlignmentUpdate::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v2 = *(unsigned __int8 *)(a1 + 64);
  v3 = *(unsigned __int8 *)(a2 + 64);
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & v3 & 0x80) != 0)
    return *(_DWORD *)(a1 + 60) == *(_DWORD *)(a2 + 60);
  else
    return ((v2 | v3) & 0x80u) == 0;
}

BOOL CMMsl::PencilFusionRingSensorTrustModelUpdate::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 8) == 0 || *(unsigned __int8 *)(a1 + 28) != *(unsigned __int8 *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 1) == 0;
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
    return (*(_BYTE *)(a2 + 32) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return v2;
}

BOOL CMMsl::SafetyHertzSample::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 24) & 2) == 0;
  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
    return (*(_BYTE *)(a2 + 24) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

BOOL CMMsl::SafetyCompanionStatus::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

BOOL CMMsl::PTSConsumedGNSS::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    if (!v5 || !CMMsl::LocationOscarEmu::operator==(v4, v5))
      return 0;
LABEL_6:
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_QWORD *)(a2 + 8);
    result = v7 == 0;
    if (!v6)
      return result;
    if (!v7)
      return 0;
    if ((*(_BYTE *)(v6 + 12) & 1) != 0)
    {
      if ((*(_BYTE *)(v7 + 12) & 1) == 0 || *(_DWORD *)(v6 + 8) != *(_DWORD *)(v7 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v7 + 12) & 1) != 0)
    {
      return 0;
    }
    return 1;
  }
  if (!v5)
    goto LABEL_6;
  return 0;
}

BOOL CMMsl::PTSForwardPropagation::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  if ((*(_BYTE *)(a1 + 64) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 64) & 0x20) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
LABEL_6:
    if ((*(_BYTE *)(a1 + 64) & 8) != 0)
    {
      if ((*(_BYTE *)(a2 + 64) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
        return 0;
    }
    else if ((*(_BYTE *)(a2 + 64) & 8) != 0)
    {
      return 0;
    }
    if ((*(_BYTE *)(a1 + 64) & 0x10) != 0)
    {
      if ((*(_BYTE *)(a2 + 64) & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
        return 0;
    }
    else if ((*(_BYTE *)(a2 + 64) & 0x10) != 0)
    {
      return 0;
    }
    if ((*(_BYTE *)(a1 + 64) & 4) != 0)
    {
      if ((*(_BYTE *)(a2 + 64) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
        return 0;
    }
    else if ((*(_BYTE *)(a2 + 64) & 4) != 0)
    {
      return 0;
    }
    if ((*(_BYTE *)(a1 + 64) & 1) != 0)
    {
      if ((*(_BYTE *)(a2 + 64) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(a2 + 64) & 1) != 0)
    {
      return 0;
    }
    if ((*(_BYTE *)(a1 + 64) & 2) != 0)
    {
      if ((*(_BYTE *)(a2 + 64) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
        return 0;
    }
    else if ((*(_BYTE *)(a2 + 64) & 2) != 0)
    {
      return 0;
    }
    v2 = *(_QWORD *)(a1 + 48);
    v3 = *(_QWORD *)(a2 + 48);
    result = v3 == 0;
    if (!v2)
      return result;
    if (!v3)
      return 0;
    if ((*(_BYTE *)(v2 + 12) & 1) != 0)
    {
      if ((*(_BYTE *)(v3 + 12) & 1) == 0 || *(_DWORD *)(v2 + 8) != *(_DWORD *)(v3 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v3 + 12) & 1) != 0)
    {
      return 0;
    }
    return 1;
  }
  if ((*(_BYTE *)(a2 + 64) & 0x20) == 0)
    goto LABEL_6;
  return 0;
}

BOOL CMMsl::PTSReconstructedRoute::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::PTSForwardPropagation::operator==(v2, v3);
  return result;
}

BOOL CMMsl::PTSMapMatchedRoute::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::PTSForwardPropagation::operator==(v2, v3);
  return result;
}

BOOL CMMsl::KData1::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

BOOL CMMsl::KData2::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 100);
  v3 = *(_DWORD *)(a2 + 100);
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x80000) == 0;
  if ((v2 & 0x80000) != 0)
    return (v3 & 0x80000) != 0 && *(unsigned __int8 *)(a1 + 96) == *(unsigned __int8 *)(a2 + 96);
  return v4;
}

BOOL CMMsl::KData3::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 2) == 0;
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
    return (*(_BYTE *)(a2 + 28) & 2) != 0 && *(float *)(a1 + 16) == *(float *)(a2 + 16);
  return v2;
}

BOOL CMMsl::SafetyRemoteSample::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 52) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 52) & 0x20) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 52) & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 52) & 0x40) != 0)
  {
    if ((*(_BYTE *)(a2 + 52) & 0x40) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 52) & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 52) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 52) & 0x10) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 52) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 52) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 52) & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 52) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 52) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 52) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 52) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 52) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 52) & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 52) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 52) & 2) == 0;
  if ((*(_BYTE *)(a1 + 52) & 2) != 0)
    return (*(_BYTE *)(a2 + 52) & 2) != 0 && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
  return v2;
}

BOOL CMMsl::SafetyTrustedAudioResult::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;

  v2 = *(_QWORD *)(a1 + 188);
  v3 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_QWORD *)(a1 + 72) != *(_QWORD *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(float *)(a1 + 152) != *(float *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(float *)(a1 + 164) != *(float *)(a2 + 164))
      return 0;
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 148) != *(float *)(a2 + 148))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(float *)(a1 + 160) != *(float *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(float *)(a1 + 156) != *(float *)(a2 + 156))
      return 0;
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v3 & 0x100000000) == 0 || *(float *)(a1 + 172) != *(float *)(a2 + 172))
      return 0;
  }
  else if ((v3 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v3 & 0x400000000) == 0 || *(float *)(a1 + 180) != *(float *)(a2 + 180))
      return 0;
  }
  else if ((v3 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(float *)(a1 + 176) != *(float *)(a2 + 176))
      return 0;
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(float *)(a1 + 168) != *(float *)(a2 + 168))
      return 0;
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000) != 0)
  {
    if ((v3 & 0x800000000) == 0 || *(unsigned __int8 *)(a1 + 184) != *(unsigned __int8 *)(a2 + 184))
      return 0;
  }
  else if ((v3 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000) != 0)
  {
    if ((v3 & 0x1000000000) == 0 || *(unsigned __int8 *)(a1 + 185) != *(unsigned __int8 *)(a2 + 185))
      return 0;
  }
  else if ((v3 & 0x1000000000) != 0)
  {
    return 0;
  }
  v4 = (*(_QWORD *)(a2 + 188) & 0x200) == 0;
  if ((v2 & 0x200) != 0)
    return (v3 & 0x200) != 0 && *(_DWORD *)(a1 + 80) == *(_DWORD *)(a2 + 80);
  return v4;
}

BOOL CMMsl::SPUPlaybackExampleDeviceMotion::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::DeviceMotion::operator==(v2, v3);
  return result;
}

BOOL CMMsl::SPUPlaybackExampleMotionStateUpdate::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::MotionStateUpdate::operator==(v2, v3);
  return result;
}

unint64_t CMMsl::Item::hash_value(CMMsl::Item *this)
{
  double v2;
  unint64_t v3;
  CMMsl::GyroBiasConstraints *v4;
  unint64_t v5;
  CMMsl::GravityConstraints *v6;
  uint64_t v7;
  CMMsl::DeviceMotionCorrection *v8;
  CMMsl::CompassConstraints *v9;
  uint64_t v10;
  CMMsl::DeviceMotionCorrection *v11;
  uint64_t v12;
  char v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  float v17;
  BOOL v18;
  uint64_t v19;
  CMMsl::IntersiloNSCodingData *v20;
  CMMsl::DeviceMotionCovariance *v21;
  CMMsl::AccessoryAccel *v22;
  CMMsl::AccessoryGyro *v23;
  CMMsl::AccessoryProx *v24;
  uint64_t v25;
  CMMsl::Accel *v26;
  uint64_t v27;
  CMMsl::BodyMetrics *v28;
  uint64_t v29;
  CMMsl::ElevationChange *v30;
  uint64_t v31;
  CMMsl::OnsetHeartRateData *v32;
  uint64_t v33;
  CMMsl::RotationRate *v34;
  uint64_t v35;
  CMMsl::OdometerWithAltitude *v36;
  uint64_t v37;
  CMMsl::WorkoutEvent *v38;
  CMMsl::VO2MaxInput *v39;
  uint64_t v40;
  CMMsl::BraveHeartNatalieData *v41;
  uint64_t v42;
  uint64_t v43;
  CMMsl::BraveHeartWorkoutEvent *v44;
  CMMsl::WorkoutRecorderHealthKitInfo *v45;
  CMMsl::PearlAttitude *v46;
  CMMsl::RotationRate *v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  CMMsl::WatchOnWristState *v54;
  CMMsl::CatherineHealthKitData *v55;
  uint64_t v56;
  CMMsl::InEarTransitionEntry *v57;
  CMMsl::InEarSession *v58;
  CMMsl::InEarBaseline *v59;
  CMMsl::AccessoryProxSensorDrop *v60;
  CMMsl::AccessoryProxTempComp *v61;
  CMMsl::AccessoryWake *v62;
  CMMsl::FacePose *v63;
  uint64_t v64;
  uint64_t v65;
  CMMsl::Pressure *v66;
  uint64_t v67;
  CMMsl::AccessoryDeviceMotion *v68;
  CMMsl::VisionCompassBias *v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  CMMsl::VIOEstimation *v73;
  CMMsl::LSLHeadingEstimation *v74;
  CMMsl::FallSnippet *v75;
  CMMsl::AccelerometerPace *v76;
  uint64_t v77;
  float v78;
  BOOL v79;
  uint64_t v80;
  CMMsl::StepCountEntry *v81;
  CMMsl::MobilityBoutMetrics *v82;
  CMMsl::CoprocessorReplyGaitMetrics *v83;
  CMMsl::VIOPose *v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  CMMsl::VIOReplayPose *v88;
  CMMsl::VisualStateMeasurement *v89;
  CMMsl::KappaTriggerDebug *v90;
  CMMsl::KappaDirectionOfTravel *v91;
  uint64_t v92;
  CMMsl::Accel *v93;
  CMMsl::KappaSteps *v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  CMMsl::KappaRoads *v99;
  CMMsl::UserStudyEvent *v100;
  CMMsl::AuxiliaryDeviceMotion *v101;
  CMMsl::TempestPoCAuxiliaryDeviceMotion *v102;
  CMMsl::AudioAccessoryDeviceMotion *v103;
  CMMsl::TempestPoCListenerOrientation *v104;
  uint64_t v105;
  CMMsl::Accel *v106;
  uint64_t v107;
  float v108;
  BOOL v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  float v113;
  BOOL v114;
  uint64_t v115;
  CMMsl::VisualLocalization *v116;
  CMMsl::GyroFactoryCalibrationData *v117;
  uint64_t v118;
  char v119;
  float v120;
  BOOL v121;
  uint64_t v122;
  uint64_t v123;
  CMMsl::FrequencyResponse *v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  CMMsl::Accel *v129;
  CMMsl::MotionLocation *v130;
  CMMsl::MotionActivity *v131;
  CMMsl::BioMotionPose *v132;
  CMMsl::KappaTrigger *v133;
  CMMsl::RelDMInSystemConfig *v134;
  uint64_t v135;
  CMMsl::BioMotionPose *v136;
  uint64_t v137;
  CMMsl::BioMotionPose *v138;
  CMMsl::GyroCalibrationSample *v139;
  CMMsl::GyroCalibrationSampleNonlinear *v140;
  uint64_t v141;
  uint64_t v142;
  CMMsl::BioMotionClassification *v143;
  uint64_t v144;
  CMMsl::BioMotionClassification *v145;
  uint64_t v146;
  CMMsl::BioMotionClassification *v147;
  uint64_t v148;
  CMMsl::BioMotionClassification *v149;
  CMMsl::Pose *v150;
  CMMsl::PoseState *v151;
  CMMsl::BioMotionPredictedPose *v152;
  uint64_t v153;
  CMMsl::BioMotionPredictedPose *v154;
  uint64_t v155;
  CMMsl::BioMotionPredictedPose *v156;
  uint64_t v157;
  CMMsl::Pressure *v158;
  CMMsl::VO2MaxOutput *v159;
  CMMsl::MagneticAccessoryType1 *v160;
  uint64_t v161;
  CMMsl::PressureCalibration *v162;
  uint64_t v163;
  CMMsl::Magnetometer *v164;
  uint64_t v165;
  CMMsl::CompassCalibration *v166;
  uint64_t v167;
  CMMsl::CV3DPredictedPose *v168;
  CMMsl::BioMotionLinkLengthFitParameters *v169;
  CMMsl::BioMotionOnlineLinkLengthUpdate *v170;
  CMMsl::ODTPose *v171;
  uint64_t v172;
  char v173;
  double v174;
  BOOL v175;
  uint64_t v176;
  int v177;
  BOOL v178;
  double v179;
  CMMsl::PencilTouch *v180;
  uint64_t v181;
  char v182;
  BOOL v183;
  uint64_t v184;
  int v185;
  float v186;
  BOOL v187;
  uint64_t v188;
  uint64_t v189;
  char v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  CMMsl::CV3DSLAMState *v194;
  uint64_t v195;
  CMMsl::BioMotionAnchor *v196;
  uint64_t v197;
  CMMsl::PropagatedAnchor *v198;
  CMMsl::WalkingSteadinessClassification *v199;
  CMMsl::SteadinessModelResult *v200;
  CMMsl::SteadinessEvent *v201;
  CMMsl::SteadinessModelGaitBaselineFeatures *v202;
  CMMsl::SteadinessModelContinuousWalkingFeatures *v203;
  CMMsl::SteadinessModelTemporalDispersionFeatures *v204;
  CMMsl::SteadinessModelTemporalEntropyFeatures *v205;
  CMMsl::SteadinessModelBalanceFeatures *v206;
  CMMsl::MagnetometerReset *v207;
  uint64_t v208;
  CMMsl::WatchOnWristState *v209;
  CMMsl::LiftToWakeOnHeadStatus *v210;
  CMMsl::AccessoryMagnetometer *v211;
  CMMsl::StepCountEntryAddition *v212;
  CMMsl::StepDistanceFusionResult *v213;
  uint64_t v214;
  CMMsl::CVWatchCalories *v215;
  uint64_t **v216;
  CMMsl::BatteryStatus *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char v221;
  uint64_t v222;
  CMMsl::FocusModes *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  CMMsl::AltimeterKF *v227;
  CMMsl::LiftToWakeState *v228;
  CMMsl::ViewObstructedState *v229;
  CMMsl::RunningFormMetrics *v230;
  uint64_t v231;
  uint64_t v232;
  CMMsl::ARKitWorldPose *v233;
  uint64_t v234;
  uint64_t v235;
  BOOL v236;
  uint64_t v237;
  CMMsl::PocketDetectionPacket *v238;
  CMMsl::LiftToWakeFeaturesNeo *v239;
  CMMsl::LiftToWakeStatusNeo *v240;
  CMMsl::RunningPower *v241;
  CMMsl::BasebandCompassCoex *v242;
  CMMsl::BasebandCompassCoexConstraints *v243;
  CMMsl::MotionContextActivity *v244;
  uint64_t v245;
  char v246;
  uint64_t v247;
  CMMsl::AccelTNBFrame *v248;
  CMMsl::DoTEstimatorWithTNB *v249;
  CMMsl::PdrMLModelOutput *v250;
  CMMsl::GaitEventsModelOutput *v251;
  CMMsl::GaitEventsStrideAggregation *v252;
  CMMsl::GaitEventsHKResult *v253;
  uint64_t v254;
  int v255;
  BOOL v256;
  uint64_t v257;
  CMMsl::WorkoutRecorderAveragedALSData *v258;
  CMMsl::StrideCalEntry *v259;
  CMMsl::RunningSpeedKFResult *v260;
  CMMsl::ProxPDP *v261;
  CMMsl::KeyboardMotionFeatures *v262;
  uint64_t v263;
  char v264;
  BOOL v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  float v270;
  BOOL v271;
  uint64_t v272;
  uint64_t v273;
  int v274;
  BOOL v275;
  uint64_t v276;
  CMMsl::WakeGestureNotification *v277;
  CMMsl::ProxBaselineEstimatorState *v278;
  CMMsl::BaselineResetCheck *v279;
  CMMsl::RhythmicGnssOperatorStatus *v280;
  uint64_t v281;
  int v282;
  BOOL v283;
  uint64_t v284;
  uint64_t v285;
  int v286;
  BOOL v287;
  uint64_t v288;
  CMMsl::BacklightState *v289;
  unint64_t v290;
  CMMsl::HeartRateReference *v291;
  CMMsl::Skeleton2D *v292;
  CMMsl::Skeleton3DRetargeted *v293;
  CMMsl::Skeleton3DLifted *v294;
  CMMsl::FitnessMachineSample *v295;
  CMMsl::WatchHeartRateData *v296;
  CMMsl::FacePoseSynchronized *v297;
  CMMsl::WatchActiveCalories *v298;
  CMMsl::WatchBasalCalories *v299;
  CMMsl::TrackRunData *v300;
  CMMsl::GnssAvailabilityPredictorData *v301;
  CMMsl::GnssLeechLocationData *v302;
  CMMsl::MapsRouteHintData *v303;
  CMMsl::FitnessMachineData *v304;
  uint64_t v305;
  CMMsl::FitnessMachineData *v306;
  CMMsl::AccessoryActivityStateUpdate *v307;
  CMMsl::PedestrianFenceExit *v308;
  CMMsl::InertialOdometry *v309;
  CMMsl::PhysicalEffortInput *v310;
  CMMsl::PhysicalEffortSample *v311;
  CMMsl::PedestrianCalorieModelDebugging *v312;
  CMMsl::ElevationThreshold *v313;
  CMMsl::InitialHistoricalMeanSeaLevelPressure *v314;
  uint64_t v315;
  char v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  CMMsl::PencilDeviceMotion *v320;
  CMMsl::PencilFusionResult *v321;
  uint64_t v322;
  int v323;
  BOOL v324;
  uint64_t v325;
  CMMsl::SteadinessModelHarmonicFeatures *v326;
  CMMsl::PencilFusionReplayResult *v327;
  CMMsl::MobilitySmoothedGaitMetrics *v328;
  uint64_t v329;
  char v330;
  BOOL v331;
  uint64_t v332;
  uint64_t v333;
  CMMsl::AccessoryHeartRate *v334;
  CMMsl::AccessoryPPG *v335;
  CMMsl::MotionLoiAltitudeData *v336;
  uint64_t v337;
  char v338;
  BOOL v339;
  uint64_t v340;
  uint64_t v341;
  CMMsl::PostureJoint *v342;
  uint64_t v343;
  uint64_t v344;
  int v345;
  BOOL v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  CMMsl::OnsetHeartRateData *v350;
  unint64_t v351;
  CMMsl::Accel *v352;
  CMMsl::AccelBatch *v353;
  uint64_t v354;
  CMMsl::Accel *v355;
  uint64_t v356;
  CMMsl::Accel *v357;
  CMMsl::Gyro *v358;
  CMMsl::GyroOscarEmu *v359;
  uint64_t v360;
  char v361;
  float v362;
  BOOL v363;
  uint64_t v364;
  uint64_t v365;
  CMMsl::GyroBiasAndVariance *v366;
  CMMsl::GyroBiasFit *v367;
  uint64_t v368;
  float v369;
  BOOL v370;
  uint64_t v371;
  CMMsl::Magnetometer *v372;
  CMMsl::Compass *v373;
  uint64_t v374;
  char v375;
  BOOL v376;
  uint64_t v377;
  uint64_t v378;
  CMMsl::GyroCompass *v379;
  CMMsl::CompassCalibration *v380;
  CMMsl::Pressure *v381;
  uint64_t v382;
  CMMsl::Pressure *v383;
  uint64_t v384;
  CMMsl::Pressure *v385;
  uint64_t v386;
  char v387;
  BOOL v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  int v392;
  BOOL v393;
  uint64_t v394;
  CMMsl::DeviceMotion *v395;
  CMMsl::MotionStateUpdate *v396;
  CMMsl::AccelGps *v397;
  CMMsl::GyroGps *v398;
  uint64_t v399;
  CMMsl::Pressure *v400;
  CMMsl::BTConnection *v401;
  uint64_t v402;
  char v403;
  BOOL v404;
  uint64_t v405;
  uint64_t v406;
  CMMsl::LocationOscarEmu *v407;
  CMMsl::MotionHint *v408;
  CMMsl::EnhancedDeviceMotion *v409;
  CMMsl::NonlinearBiasFit *v410;
  CMMsl::NatalieData *v411;
  CMMsl::BodyMetrics *v412;
  CMMsl::WorkoutEvent *v413;
  CMMsl::OnsetHeartRateData *v414;
  uint64_t v415;
  CMMsl::OnsetHeartRateData *v416;
  CMMsl::ElevationChange *v417;
  uint64_t v418;
  char v419;
  BOOL v420;
  uint64_t v421;
  uint64_t v422;
  CMMsl::MotionGPSLocation *v423;
  uint64_t v424;
  CMMsl::MotionGPSLocation *v425;
  CMMsl::StrideCalBin *v426;
  uint64_t v427;
  CMMsl::Odometer *v428;
  CMMsl::MetsInfo *v429;
  CMMsl::FallStats *v430;
  CMMsl::BasebandSpeed *v431;
  uint64_t v432;
  CMMsl::StepCadenceToStrideLengthBin *v433;
  uint64_t v434;
  char v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  CMMsl::MotionLoiData *v440;
  CMMsl::OdometerWithAltitude *v441;
  uint64_t v442;
  uint64_t v443;
  float v444;
  BOOL v445;
  uint64_t v446;
  CMMsl::InEarTransition *v447;
  CMMsl::ClefCalibration *v448;
  CMMsl::AirpodEvent *v449;
  CMMsl::InEarOptical *v450;
  CMMsl::InEarConstraints *v451;
  CMMsl::InEarOpenLid *v452;
  CMMsl::InEarBaselining *v453;
  CMMsl::AccessoryConfig *v454;
  CMMsl::AccessoryAccelConfig *v455;
  CMMsl::AccessoryProximityConfig *v456;
  CMMsl::TapDetect *v457;
  CMMsl::TapAccept *v458;
  CMMsl::DoubleTap *v459;
  CMMsl::AccessoryWakeDebug *v460;
  CMMsl::GeomagneticData *v461;
  CMMsl::RelativeDeviceMotionInternal *v462;
  unint64_t v463;
  CMMsl::RelativeGravityConstraints *v464;
  uint64_t v465;
  CMMsl::DeviceMotionCorrection *v466;
  CMMsl::AnchorCorrection *v467;
  CMMsl::PredictedRelativeDeviceMotion *v468;
  CMMsl::MovementStatsSignal *v469;
  CMMsl::MovementStatsGravityProjection *v470;
  unint64_t v471;
  uint64_t v472;
  CMMsl::AccessoryConfig *v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  CMMsl::GaitCycleSegment *v478;
  CMMsl::GaitCycleSegmentationState *v479;
  CMMsl::CompassCalibrationAttempt *v480;
  uint64_t v481;
  CMMsl::DeviceMotionCorrection *v482;
  CMMsl::VisualLocalizationAttitudeConstraints *v483;
  uint64_t v484;
  CMMsl::AccessoryConfig *v485;
  CMMsl::FallDetectionReferee *v486;
  CMMsl::FallDetectionReplay *v487;
  CMMsl::FallDetectionStateMachine *v488;
  CMMsl::FallDetectionDetector *v489;
  CMMsl::FallFalsePositiveSuppressionFeatures *v490;
  CMMsl::AccessoryDeviceMotionConfig *v491;
  CMMsl::RelativeDeviceMotionCorrelatedMotion *v492;
  CMMsl::RelativeDeviceMotionComplexTransition *v493;
  CMMsl::DeviceMotionAlwaysOn *v494;
  uint64_t v495;
  int v496;
  uint64_t v497;
  CMMsl::WalkingDetectionResult *v498;
  uint64_t v499;
  uint64_t v500;
  float v501;
  BOOL v502;
  uint64_t v503;
  CMMsl::FallDetectionWristStateReplay *v504;
  CMMsl::GyroBiasEstimateError *v505;
  CMMsl::StepLikelihoodFeatures *v506;
  CMMsl::FirstStepFeatures *v507;
  CMMsl::AccessoryStepDetectorDebug *v508;
  CMMsl::SitStandDetectorFeatures *v509;
  uint64_t v510;
  char v511;
  BOOL v512;
  uint64_t v513;
  uint64_t v514;
  CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *v515;
  CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *v516;
  uint64_t v517;
  uint64_t v518;
  BOOL v519;
  uint64_t v520;
  CMMsl::FallDistanceReplay *v521;
  CMMsl::JitterBufferLevel *v522;
  CMMsl::PressureFiltered1HzLowPass *v523;
  CMMsl::MotionActivityReplay *v524;
  CMMsl::FallDetectionActivityClassifierReplay *v525;
  CMMsl::LegacyALS5CHInput *v526;
  uint64_t v527;
  char v528;
  BOOL v529;
  uint64_t v530;
  uint64_t v531;
  CMMsl::DopplerProximityEvent *v532;
  CMMsl::DopplerRawDataInput *v533;
  CMMsl::DopplerDebugRecord *v534;
  uint64_t v535;
  char v536;
  BOOL v537;
  uint64_t v538;
  uint64_t v539;
  CMMsl::KappaAudioResult *v540;
  CMMsl::KappaBaroResult *v541;
  CMMsl::KappaGpsResult *v542;
  CMMsl::KappaPulseResult *v543;
  CMMsl::KappaZgResult *v544;
  uint64_t v545;
  char v546;
  uint64_t v547;
  CMMsl::KappaPulseInertialAccel *v548;
  uint64_t v549;
  char v550;
  uint64_t v551;
  uint64_t v552;
  char v553;
  uint64_t v554;
  CMMsl::KappaAirbagResult *v555;
  CMMsl::KappaCrashResult *v556;
  CMMsl::KappaQuiescenceResult *v557;
  CMMsl::KappaRecoveryResult *v558;
  CMMsl::KappaRolloverCrashResult *v559;
  CMMsl::KappaMildImpactResult *v560;
  CMMsl::KappaLackOfMotionResult *v561;
  CMMsl::KappaSevereCrashResult *v562;
  CMMsl::KappaLocalAudioResult *v563;
  CMMsl::KappaRemoteAudioResult *v564;
  CMMsl::DirectionOfTravelMetrics *v565;
  uint64_t v566;
  int v567;
  uint64_t v568;
  CMMsl::HeadToHeadsetTransformationEstimate *v569;
  CMMsl::ViewObstructedMachineLearningFeatures *v570;
  CMMsl::ViewObstructedMachineLearningProbabilities *v571;
  CMMsl::RunningArmSwingSignals *v572;
  CMMsl::RunningCentripetalAccelSignals *v573;
  CMMsl::RunningRotationAxis *v574;
  CMMsl::RunningVerticalOscillationSignals *v575;
  CMMsl::RunningVerticalOscillation *v576;
  CMMsl::KappaSpinResult *v577;
  CMMsl::KappaPulseDeltaV *v578;
  CMMsl::RunningStrideLength *v579;
  CMMsl::ISPPacket *v580;
  CMMsl::KappaHighSpeedCrashResult *v581;
  CMMsl::KappaPulseInertialHgAccel *v582;
  CMMsl::HarmonicMetrics *v583;
  CMMsl::CalorieControllerMETsConsumed *v584;
  CMMsl::PedometerPathStraightness *v585;
  CMMsl::ComplexHandMotion *v586;
  CMMsl::ElevationGradeEstimator *v587;
  CMMsl::VO2MaxModelInput *v588;
  CMMsl::ProxCalibration *v589;
  CMMsl::KappaStepsResult *v590;
  CMMsl::WakeGestureSample *v591;
  CMMsl::KappaGravityAutocorrelationResult *v592;
  CMMsl::RunningVerticalOscillationGradientBoostedSignals *v593;
  CMMsl::SubStats *v594;
  CMMsl::PedOdomFusionExtendedModeSegment *v595;
  uint64_t v596;
  char v597;
  uint64_t v598;
  uint64_t v599;
  CMMsl::PDRPedestrianClassifierState *v600;
  CMMsl::PDRPlacementClassifierState *v601;
  CMMsl::PDRSpeedEstimatorState *v602;
  CMMsl::PDRDOTEstimatorState *v603;
  CMMsl::PDRVelocityEstimatorState *v604;
  CMMsl::KMVelocityEstimatorState *v605;
  CMMsl::VelocityEstimatorFusionState *v606;
  uint64_t v607;
  char v608;
  BOOL v609;
  uint64_t v610;
  int v611;
  float v612;
  BOOL v613;
  uint64_t v614;
  CMMsl::PDRFenceState *v615;
  CMMsl::UWBRange *v616;
  CMMsl::SwingDoTCandidate *v617;
  CMMsl::DoTEstimatorHandSwing *v618;
  CMMsl::KappaTriggerClustersResult *v619;
  uint64_t v620;
  char v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  char v625;
  CMMsl::PDRFeatures *v626;
  CMMsl::PDRDOTEstimatorStateBody *v627;
  CMMsl::PDRDOTEstimatorStateArmSwing *v628;
  CMMsl::PDRDOTEstimatorStateHeading *v629;
  CMMsl::AccessoryActivityAlseepConfidenceEpoch *v630;
  CMMsl::PDRSpeedEstimatorStateDebug *v631;
  uint64_t v632;
  char v633;
  double v634;
  BOOL v635;
  uint64_t v636;
  int v637;
  BOOL v638;
  double v639;
  CMMsl::PrecisionFindingState *v640;
  CMMsl::KappaRoadsResult *v641;
  CMMsl::PrecisionFindingVelocityEstimate *v642;
  CMMsl::PrecisionFindingRangeFilter *v643;
  CMMsl::PDRDOTMeasurementSelectorState *v644;
  uint64_t v645;
  char v646;
  uint64_t v647;
  uint64_t v648;
  CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *v649;
  uint64_t v650;
  char v651;
  BOOL v652;
  uint64_t v653;
  uint64_t v654;
  CMMsl::MagnetometerCalibratorFilterParameters *v655;
  CMMsl::KappaActivityPhone *v656;
  CMMsl::KappaActivityWatch *v657;
  uint64_t v658;
  int v659;
  BOOL v660;
  uint64_t v661;
  CMMsl::PDRDOTEstimatorStateDebug *v662;
  CMMsl::PDRDOTEstimatorStateBodyDebug *v663;
  CMMsl::KappaPeakDetectorMapResult *v664;
  CMMsl::KappaPeakDetectorMapMagTimestamps *v665;
  CMMsl::PrecisionFindingVerticalState *v666;
  CMMsl::Altimeter *v667;
  CMMsl::FaceDownDetection *v668;
  CMMsl::PencilFusionDMYawAlignmentUpdate *v669;
  CMMsl::PencilFusionRingSensorTrustModelUpdate *v670;
  CMMsl::AccessorySleepStateUpdate *v671;
  CMMsl::AccessorySleepStateConfidenceEpoch *v672;
  uint64_t v673;
  uint64_t v674;
  char v675;
  uint64_t v676;
  uint64_t v677;
  CMMsl::PTSConsumedGNSS *v678;
  CMMsl::PTSForwardPropagation *v679;
  uint64_t v680;
  CMMsl::PTSForwardPropagation *v681;
  CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *v682;
  uint64_t v683;
  CMMsl::PTSForwardPropagation *v684;
  CMMsl::AnchorMotionCorrespondence *v685;
  uint64_t v686;
  char v687;
  uint64_t v688;
  uint64_t v689;
  CMMsl::KData2 *v690;
  uint64_t v691;
  CMMsl::KData3 *v692;
  uint64_t v693;
  CMMsl::SafetyRemoteSample *v694;
  uint64_t v695;
  CMMsl::SafetyTrustedAudioResult *v696;
  uint64_t v697;
  uint64_t v698;
  CMMsl::DeviceMotion *v699;
  uint64_t v700;
  uint64_t v701;
  CMMsl::MotionStateUpdate *v702;
  unint64_t v703;
  uint64_t v704;
  unint64_t v705;
  unint64_t v706;
  unint64_t v707;
  unint64_t v708;
  unint64_t v709;
  uint64_t v711;
  unint64_t v712;
  unint64_t v713;
  uint64_t v714;
  unint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  unint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  unint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  unint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  unint64_t v852;
  uint64_t v853;
  uint64_t v854;
  unint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  unint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  unint64_t v867;
  unint64_t v868;
  unint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  unint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  unint64_t v882;
  unint64_t v883;
  unint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  unint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  unint64_t v905;
  unint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  unint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  unint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  unint64_t v976;
  unint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  unint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  unint64_t v1020;
  uint64_t v1021;
  unint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  unint64_t v1029;
  uint64_t v1030;
  unint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  unint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  unint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  unint64_t v1062;
  unint64_t v1063;
  unint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  unint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  unint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  unint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  unint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  unint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  unint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  uint64_t v1132;
  uint64_t v1133;
  unint64_t v1134;
  double v1135;
  uint64_t v1136;
  unint64_t v1137;
  unint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  unint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  uint64_t v1145;
  uint64_t v1146;
  uint64_t v1147;
  uint64_t v1148;
  unint64_t v1149;
  unint64_t v1150;
  char v1151;
  char v1152;
  char v1153;
  char v1154;
  char v1155;
  char v1156;
  char v1157;
  char v1158;
  char v1159;
  char v1160;
  char v1161;
  char v1162;
  char v1163;
  char v1164;
  char v1165;
  char v1166;
  char v1167;
  _BYTE v1168[9];

  if ((*((_BYTE *)this + 3616) & 1) != 0)
  {
    v2 = *((double *)this + 77);
    if (v2 == 0.0)
      v2 = 0.0;
    v1135 = v2;
  }
  else
  {
    v1135 = 0.0;
  }
  v3 = sub_1001359D4((uint64_t)&v1167, (uint64_t *)this + 146);
  v4 = (CMMsl::GyroBiasConstraints *)*((_QWORD *)this + 145);
  v1150 = v3;
  if (v4)
    v719 = CMMsl::GyroBiasConstraints::hash_value(v4);
  else
    v719 = 0;
  v5 = sub_100135A1C((uint64_t)&v1166, (uint64_t *)this + 142);
  v6 = (CMMsl::GravityConstraints *)*((_QWORD *)this + 141);
  v1149 = v5;
  if (v6)
    v718 = CMMsl::GravityConstraints::hash_value(v6);
  else
    v718 = 0;
  v7 = *((_QWORD *)this + 85);
  if (v7 && (v8 = *(CMMsl::DeviceMotionCorrection **)(v7 + 8)) != 0)
    v726 = CMMsl::DeviceMotionCorrection::hash_value(v8);
  else
    v726 = 0;
  v9 = (CMMsl::CompassConstraints *)*((_QWORD *)this + 84);
  if (v9)
    v717 = CMMsl::CompassConstraints::hash_value(v9);
  else
    v717 = 0;
  v10 = *((_QWORD *)this + 91);
  if (v10 && (v11 = *(CMMsl::DeviceMotionCorrection **)(v10 + 8)) != 0)
    v725 = CMMsl::DeviceMotionCorrection::hash_value(v11);
  else
    v725 = 0;
  v12 = *((_QWORD *)this + 90);
  if (v12)
  {
    v13 = *(_BYTE *)(v12 + 20);
    v14 = *(double *)(v12 + 8) == 0.0 || (v13 & 1) == 0;
    v15 = *(_QWORD *)(v12 + 8);
    if (v14)
      v15 = 0;
    v16 = v13 & 2;
    v17 = *(float *)(v12 + 16);
    v18 = v17 == 0.0 || v16 == 0;
    v19 = LODWORD(v17);
    if (v18)
      v19 = 0;
    v716 = v19 ^ v15;
  }
  else
  {
    v716 = 0;
  }
  v20 = (CMMsl::IntersiloNSCodingData *)*((_QWORD *)this + 180);
  if (v20)
    v715 = CMMsl::IntersiloNSCodingData::hash_value(v20);
  else
    v715 = 0;
  v21 = (CMMsl::DeviceMotionCovariance *)*((_QWORD *)this + 95);
  if (v21)
    v714 = CMMsl::DeviceMotionCovariance::hash_value(v21);
  else
    v714 = 0;
  v22 = (CMMsl::AccessoryAccel *)*((_QWORD *)this + 11);
  if (v22)
    v713 = CMMsl::AccessoryAccel::hash_value(v22);
  else
    v713 = 0;
  v23 = (CMMsl::AccessoryGyro *)*((_QWORD *)this + 18);
  if (v23)
    v712 = CMMsl::AccessoryGyro::hash_value(v23);
  else
    v712 = 0;
  v24 = (CMMsl::AccessoryProx *)*((_QWORD *)this + 27);
  if (v24)
    v711 = CMMsl::AccessoryProx::hash_value(v24);
  else
    v711 = 0;
  v25 = *((_QWORD *)this + 431);
  if (v25 && (v26 = *(CMMsl::Accel **)(v25 + 8)) != 0)
    v724 = CMMsl::Accel::hash_value(v26);
  else
    v724 = 0;
  v27 = *((_QWORD *)this + 434);
  if (v27 && (v28 = *(CMMsl::BodyMetrics **)(v27 + 8)) != 0)
    v723 = CMMsl::BodyMetrics::hash_value(v28);
  else
    v723 = 0;
  v29 = *((_QWORD *)this + 436);
  if (v29 && (v30 = *(CMMsl::ElevationChange **)(v29 + 8)) != 0)
    v722 = CMMsl::ElevationChange::hash_value(v30);
  else
    v722 = 0;
  v31 = *((_QWORD *)this + 440);
  if (v31 && (v32 = *(CMMsl::OnsetHeartRateData **)(v31 + 8)) != 0)
    v721 = CMMsl::OnsetHeartRateData::hash_value(v32);
  else
    v721 = 0;
  v33 = *((_QWORD *)this + 444);
  if (v33 && (v34 = *(CMMsl::RotationRate **)(v33 + 8)) != 0)
    v720 = CMMsl::RotationRate::hash_value(v34);
  else
    v720 = 0;
  v35 = *((_QWORD *)this + 442);
  if (v35 && (v36 = *(CMMsl::OdometerWithAltitude **)(v35 + 8)) != 0)
    v1134 = CMMsl::OdometerWithAltitude::hash_value(v36);
  else
    v1134 = 0;
  v37 = *((_QWORD *)this + 448);
  if (v37 && (v38 = *(CMMsl::WorkoutEvent **)(v37 + 8)) != 0)
    v1133 = CMMsl::WorkoutEvent::hash_value(v38);
  else
    v1133 = 0;
  v39 = (CMMsl::VO2MaxInput *)*((_QWORD *)this + 415);
  if (v39)
    v1132 = CMMsl::VO2MaxInput::hash_value(v39);
  else
    v1132 = 0;
  v40 = sub_100135A68((uint64_t)&v1165, (uint64_t *)this + 68);
  v41 = (CMMsl::BraveHeartNatalieData *)*((_QWORD *)this + 69);
  v1148 = v40;
  if (v41)
    v1131 = CMMsl::BraveHeartNatalieData::hash_value(v41);
  else
    v1131 = 0;
  v42 = sub_100135AC0((uint64_t)&v1164, (uint64_t *)this + 70);
  v43 = sub_100135B18((uint64_t)&v1163, (uint64_t *)this + 67);
  v44 = (CMMsl::BraveHeartWorkoutEvent *)*((_QWORD *)this + 71);
  v1147 = v43;
  if (v44)
    v1130 = CMMsl::BraveHeartWorkoutEvent::hash_value(v44);
  else
    v1130 = 0;
  v45 = (CMMsl::WorkoutRecorderHealthKitInfo *)*((_QWORD *)this + 439);
  if (v45)
    v1129 = CMMsl::WorkoutRecorderHealthKitInfo::hash_value(v45);
  else
    v1129 = 0;
  v46 = (CMMsl::PearlAttitude *)*((_QWORD *)this + 288);
  if (v46)
    v1128 = CMMsl::PearlAttitude::hash_value(v46);
  else
    v1128 = 0;
  v47 = (CMMsl::RotationRate *)*((_QWORD *)this + 340);
  if (v47)
    v1127 = CMMsl::RotationRate::hash_value(v47);
  else
    v1127 = 0;
  v48 = *((_QWORD *)this + 446);
  if (v48 && (v49 = *(_QWORD *)(v48 + 8)) != 0)
  {
    v50 = *(_BYTE *)(v49 + 16);
    v53 = v49 + 8;
    v51 = *(unsigned int *)(v49 + 8);
    v52 = *(unsigned int *)(v53 + 4);
    if ((v50 & 2) == 0)
      v52 = 0;
    if ((v50 & 1) == 0)
      v51 = 0;
    v1126 = v51 ^ v52;
  }
  else
  {
    v1126 = 0;
  }
  v54 = (CMMsl::WatchOnWristState *)*((_QWORD *)this + 425);
  if (v54)
    v1125 = CMMsl::WatchOnWristState::hash_value(v54);
  else
    v1125 = 0;
  v55 = (CMMsl::CatherineHealthKitData *)*((_QWORD *)this + 76);
  if (v55)
    v1124 = CMMsl::CatherineHealthKitData::hash_value(v55);
  else
    v1124 = 0;
  v56 = sub_100135B70((uint64_t)&v1162, (uint64_t *)this + 427);
  v57 = (CMMsl::InEarTransitionEntry *)*((_QWORD *)this + 176);
  v1146 = v56;
  if (v57)
    v1123 = CMMsl::InEarTransitionEntry::hash_value(v57);
  else
    v1123 = 0;
  v58 = (CMMsl::InEarSession *)*((_QWORD *)this + 174);
  if (v58)
    v1122 = CMMsl::InEarSession::hash_value(v58);
  else
    v1122 = 0;
  v59 = (CMMsl::InEarBaseline *)*((_QWORD *)this + 169);
  if (v59)
    v1121 = CMMsl::InEarBaseline::hash_value(v59);
  else
    v1121 = 0;
  v60 = (CMMsl::AccessoryProxSensorDrop *)*((_QWORD *)this + 28);
  if (v60)
    v1120 = CMMsl::AccessoryProxSensorDrop::hash_value(v60);
  else
    v1120 = 0;
  v61 = (CMMsl::AccessoryProxTempComp *)*((_QWORD *)this + 29);
  if (v61)
    v1119 = CMMsl::AccessoryProxTempComp::hash_value(v61);
  else
    v1119 = 0;
  v62 = (CMMsl::AccessoryWake *)*((_QWORD *)this + 34);
  if (v62)
    v1118 = CMMsl::AccessoryWake::hash_value(v62);
  else
    v1118 = 0;
  v63 = (CMMsl::FacePose *)*((_QWORD *)this + 114);
  if (v63)
    v1117 = CMMsl::FacePose::hash_value(v63);
  else
    v1117 = 0;
  v64 = *((_QWORD *)this + 447);
  if (v64)
    v1116 = sub_100135B70((uint64_t)v1168, (uint64_t *)(v64 + 8));
  else
    v1116 = 0;
  v65 = *((_QWORD *)this + 443);
  if (v65 && (v66 = *(CMMsl::Pressure **)(v65 + 8)) != 0)
    v1115 = CMMsl::Pressure::hash_value(v66);
  else
    v1115 = 0;
  v67 = sub_100135BC8((uint64_t)&v1161, (uint64_t *)this + 168);
  v68 = (CMMsl::AccessoryDeviceMotion *)*((_QWORD *)this + 16);
  v1145 = v67;
  if (v68)
    v1114 = CMMsl::AccessoryDeviceMotion::hash_value(v68);
  else
    v1114 = 0;
  v69 = (CMMsl::VisionCompassBias *)*((_QWORD *)this + 410);
  if (v69)
    v1113 = CMMsl::VisionCompassBias::hash_value(v69);
  else
    v1113 = 0;
  v70 = *((_QWORD *)this + 44);
  if (v70)
  {
    v71 = *(_BYTE *)(v70 + 12);
    v72 = *(int *)(v70 + 8);
    if ((v71 & 1) == 0)
      v72 = 0;
    v1112 = v72;
  }
  else
  {
    v1112 = 0;
  }
  v73 = (CMMsl::VIOEstimation *)*((_QWORD *)this + 407);
  if (v73)
    v1111 = CMMsl::VIOEstimation::hash_value(v73);
  else
    v1111 = 0;
  v74 = (CMMsl::LSLHeadingEstimation *)*((_QWORD *)this + 235);
  if (v74)
    v1110 = CMMsl::LSLHeadingEstimation::hash_value(v74);
  else
    v1110 = 0;
  v75 = (CMMsl::FallSnippet *)*((_QWORD *)this + 125);
  if (v75)
    v1109 = CMMsl::FallSnippet::hash_value(v75);
  else
    v1109 = 0;
  v76 = (CMMsl::AccelerometerPace *)*((_QWORD *)this + 10);
  if (v76)
    v1108 = CMMsl::AccelerometerPace::hash_value(v76);
  else
    v1108 = 0;
  v77 = *((_QWORD *)this + 259);
  if (v77)
  {
    v78 = *(float *)(v77 + 8);
    v79 = v78 == 0.0 || (*(_BYTE *)(v77 + 12) & 1) == 0;
    v80 = LODWORD(v78);
    if (v79)
      v80 = 0;
    v1107 = v80;
  }
  else
  {
    v1107 = 0;
  }
  v81 = (CMMsl::StepCountEntry *)*((_QWORD *)this + 379);
  if (v81)
    v1106 = CMMsl::StepCountEntry::hash_value(v81);
  else
    v1106 = 0;
  v82 = (CMMsl::MobilityBoutMetrics *)*((_QWORD *)this + 245);
  if (v82)
    v1105 = CMMsl::MobilityBoutMetrics::hash_value(v82);
  else
    v1105 = 0;
  v83 = (CMMsl::CoprocessorReplyGaitMetrics *)*((_QWORD *)this + 89);
  if (v83)
    v1104 = CMMsl::CoprocessorReplyGaitMetrics::hash_value(v83);
  else
    v1104 = 0;
  v84 = (CMMsl::VIOPose *)*((_QWORD *)this + 408);
  if (v84)
    v1103 = CMMsl::VIOPose::hash_value(v84);
  else
    v1103 = 0;
  v85 = *((_QWORD *)this + 356);
  if (v85)
  {
    v86 = *(_BYTE *)(v85 + 12);
    v87 = *(int *)(v85 + 8);
    if ((v86 & 1) == 0)
      v87 = 0;
    v1102 = v87;
  }
  else
  {
    v1102 = 0;
  }
  v88 = (CMMsl::VIOReplayPose *)*((_QWORD *)this + 409);
  if (v88)
    v1101 = CMMsl::VIOReplayPose::hash_value(v88);
  else
    v1101 = 0;
  v89 = (CMMsl::VisualStateMeasurement *)*((_QWORD *)this + 414);
  if (v89)
    v1100 = CMMsl::VisualStateMeasurement::hash_value(v89);
  else
    v1100 = 0;
  v90 = (CMMsl::KappaTriggerDebug *)*((_QWORD *)this + 219);
  if (v90)
    v1099 = CMMsl::KappaTriggerDebug::hash_value(v90);
  else
    v1099 = 0;
  v91 = (CMMsl::KappaDirectionOfTravel *)*((_QWORD *)this + 194);
  if (v91)
    v1098 = CMMsl::KappaDirectionOfTravel::hash_value(v91);
  else
    v1098 = 0;
  v92 = *((_QWORD *)this + 166);
  if (v92 && (v93 = *(CMMsl::Accel **)(v92 + 8)) != 0)
    v1097 = CMMsl::Accel::hash_value(v93);
  else
    v1097 = 0;
  v94 = (CMMsl::KappaSteps *)*((_QWORD *)this + 215);
  if (v94)
    v1096 = CMMsl::KappaSteps::hash_value(v94);
  else
    v1096 = 0;
  v95 = *((_QWORD *)this + 397);
  if (v95)
  {
    v96 = *(_BYTE *)(v95 + 20);
    v97 = *(_QWORD *)(v95 + 8);
    if ((v96 & 1) == 0)
      v97 = 0;
    v98 = *(int *)(v95 + 16);
    if ((v96 & 2) == 0)
      v98 = 0;
    v1095 = v98 ^ v97;
  }
  else
  {
    v1095 = 0;
  }
  v99 = (CMMsl::KappaRoads *)*((_QWORD *)this + 210);
  if (v99)
    v1094 = CMMsl::KappaRoads::hash_value(v99);
  else
    v1094 = 0;
  v100 = (CMMsl::UserStudyEvent *)*((_QWORD *)this + 398);
  if (v100)
    v1093 = CMMsl::UserStudyEvent::hash_value(v100);
  else
    v1093 = 0;
  v101 = (CMMsl::AuxiliaryDeviceMotion *)*((_QWORD *)this + 47);
  if (v101)
    v1092 = CMMsl::AuxiliaryDeviceMotion::hash_value(v101);
  else
    v1092 = 0;
  v102 = (CMMsl::TempestPoCAuxiliaryDeviceMotion *)*((_QWORD *)this + 391);
  if (v102)
    v1091 = CMMsl::TempestPoCAuxiliaryDeviceMotion::hash_value(v102);
  else
    v1091 = 0;
  v103 = (CMMsl::AudioAccessoryDeviceMotion *)*((_QWORD *)this + 46);
  if (v103)
    v1090 = CMMsl::AudioAccessoryDeviceMotion::hash_value(v103);
  else
    v1090 = 0;
  v104 = (CMMsl::TempestPoCListenerOrientation *)*((_QWORD *)this + 392);
  if (v104)
    v1089 = CMMsl::TempestPoCListenerOrientation::hash_value(v104);
  else
    v1089 = 0;
  v105 = *((_QWORD *)this + 432);
  if (v105 && (v106 = *(CMMsl::Accel **)(v105 + 8)) != 0)
    v1088 = CMMsl::Accel::hash_value(v106);
  else
    v1088 = 0;
  v107 = *((_QWORD *)this + 37);
  if (v107)
  {
    v108 = *(float *)(v107 + 8);
    v109 = v108 == 0.0 || (*(_BYTE *)(v107 + 12) & 1) == 0;
    v110 = LODWORD(v108);
    if (v109)
      v110 = 0;
    v1087 = v110;
  }
  else
  {
    v1087 = 0;
  }
  v111 = *((_QWORD *)this + 430);
  if (v111 && (v112 = *(_QWORD *)(v111 + 8)) != 0)
  {
    v113 = *(float *)(v112 + 8);
    v114 = v113 == 0.0 || (*(_BYTE *)(v112 + 12) & 1) == 0;
    v115 = LODWORD(v113);
    if (v114)
      v115 = 0;
    v1086 = v115;
  }
  else
  {
    v1086 = 0;
  }
  v116 = (CMMsl::VisualLocalization *)*((_QWORD *)this + 411);
  if (v116)
    v1085 = CMMsl::VisualLocalization::hash_value(v116);
  else
    v1085 = 0;
  v117 = (CMMsl::GyroFactoryCalibrationData *)*((_QWORD *)this + 155);
  if (v117)
    v1084 = CMMsl::GyroFactoryCalibrationData::hash_value(v117);
  else
    v1084 = 0;
  v118 = *((_QWORD *)this + 367);
  if (v118)
  {
    v119 = *(_BYTE *)(v118 + 20);
    v120 = *(float *)(v118 + 16);
    v121 = v120 == 0.0 || (v119 & 2) == 0;
    v122 = LODWORD(v120);
    if (v121)
      v122 = 0;
    v123 = *(_QWORD *)(v118 + 8);
    if ((v119 & 1) == 0)
      v123 = 0;
    v1083 = v122 ^ v123;
  }
  else
  {
    v1083 = 0;
  }
  v124 = (CMMsl::FrequencyResponse *)*((_QWORD *)this + 131);
  if (v124)
    v1082 = CMMsl::FrequencyResponse::hash_value(v124);
  else
    v1082 = 0;
  v125 = *((_QWORD *)this + 109);
  if (v125)
  {
    v126 = *(_BYTE *)(v125 + 12);
    v127 = *(unsigned int *)(v125 + 8);
    if ((v126 & 1) == 0)
      v127 = 0;
    v1081 = v127;
  }
  else
  {
    v1081 = 0;
  }
  v128 = *((_QWORD *)this + 4);
  if (v128 && (v129 = *(CMMsl::Accel **)(v128 + 8)) != 0)
    v1080 = CMMsl::Accel::hash_value(v129);
  else
    v1080 = 0;
  v130 = (CMMsl::MotionLocation *)*((_QWORD *)this + 253);
  if (v130)
    v1079 = CMMsl::MotionLocation::hash_value(v130);
  else
    v1079 = 0;
  v131 = (CMMsl::MotionActivity *)*((_QWORD *)this + 248);
  if (v131)
    v1078 = CMMsl::MotionActivity::hash_value(v131);
  else
    v1078 = 0;
  v132 = (CMMsl::BioMotionPose *)*((_QWORD *)this + 62);
  if (v132)
    v1077 = CMMsl::BioMotionPose::hash_value(v132);
  else
    v1077 = 0;
  v133 = (CMMsl::KappaTrigger *)*((_QWORD *)this + 217);
  if (v133)
    v1076 = CMMsl::KappaTrigger::hash_value(v133);
  else
    v1076 = 0;
  v134 = (CMMsl::RelDMInSystemConfig *)*((_QWORD *)this + 333);
  if (v134)
    v1075 = CMMsl::RelDMInSystemConfig::hash_value(v134);
  else
    v1075 = 0;
  v135 = *((_QWORD *)this + 183);
  if (v135 && (v136 = *(CMMsl::BioMotionPose **)(v135 + 8)) != 0)
    v1074 = CMMsl::BioMotionPose::hash_value(v136);
  else
    v1074 = 0;
  v137 = *((_QWORD *)this + 88);
  if (v137 && (v138 = *(CMMsl::BioMotionPose **)(v137 + 8)) != 0)
    v1073 = CMMsl::BioMotionPose::hash_value(v138);
  else
    v1073 = 0;
  v139 = (CMMsl::GyroCalibrationSample *)*((_QWORD *)this + 151);
  if (v139)
    v1072 = CMMsl::GyroCalibrationSample::hash_value(v139);
  else
    v1072 = 0;
  v140 = (CMMsl::GyroCalibrationSampleNonlinear *)*((_QWORD *)this + 152);
  if (v140)
    v1071 = CMMsl::GyroCalibrationSampleNonlinear::hash_value(v140);
  else
    v1071 = 0;
  v141 = sub_100135C18((uint64_t)&v1160, (uint64_t *)this + 150);
  v142 = sub_100135C70((uint64_t)&v1159, (uint64_t *)this + 149);
  v143 = (CMMsl::BioMotionClassification *)*((_QWORD *)this + 59);
  v1144 = v142;
  if (v143)
    v1070 = CMMsl::BioMotionClassification::hash_value(v143);
  else
    v1070 = 0;
  v144 = *((_QWORD *)this + 132);
  if (v144 && (v145 = *(CMMsl::BioMotionClassification **)(v144 + 8)) != 0)
    v1069 = CMMsl::BioMotionClassification::hash_value(v145);
  else
    v1069 = 0;
  v146 = *((_QWORD *)this + 247);
  if (v146 && (v147 = *(CMMsl::BioMotionClassification **)(v146 + 8)) != 0)
    v1068 = CMMsl::BioMotionClassification::hash_value(v147);
  else
    v1068 = 0;
  v148 = *((_QWORD *)this + 236);
  if (v148 && (v149 = *(CMMsl::BioMotionClassification **)(v148 + 8)) != 0)
    v1067 = CMMsl::BioMotionClassification::hash_value(v149);
  else
    v1067 = 0;
  v150 = (CMMsl::Pose *)*((_QWORD *)this + 304);
  if (v150)
    v1066 = CMMsl::Pose::hash_value(v150);
  else
    v1066 = 0;
  v151 = (CMMsl::PoseState *)*((_QWORD *)this + 305);
  if (v151)
    v1065 = CMMsl::PoseState::hash_value(v151);
  else
    v1065 = 0;
  v152 = (CMMsl::BioMotionPredictedPose *)*((_QWORD *)this + 63);
  if (v152)
    v1064 = CMMsl::BioMotionPredictedPose::hash_value(v152);
  else
    v1064 = 0;
  v153 = *((_QWORD *)this + 184);
  if (v153 && (v154 = *(CMMsl::BioMotionPredictedPose **)(v153 + 8)) != 0)
    v1063 = CMMsl::BioMotionPredictedPose::hash_value(v154);
  else
    v1063 = 0;
  v155 = *((_QWORD *)this + 87);
  if (v155 && (v156 = *(CMMsl::BioMotionPredictedPose **)(v155 + 8)) != 0)
    v1062 = CMMsl::BioMotionPredictedPose::hash_value(v156);
  else
    v1062 = 0;
  v157 = *((_QWORD *)this + 318);
  if (v157 && (v158 = *(CMMsl::Pressure **)(v157 + 8)) != 0)
    v1061 = CMMsl::Pressure::hash_value(v158);
  else
    v1061 = 0;
  v159 = (CMMsl::VO2MaxOutput *)*((_QWORD *)this + 416);
  if (v159)
    v1060 = CMMsl::VO2MaxOutput::hash_value(v159);
  else
    v1060 = 0;
  v160 = (CMMsl::MagneticAccessoryType1 *)*((_QWORD *)this + 238);
  if (v160)
    v1059 = CMMsl::MagneticAccessoryType1::hash_value(v160);
  else
    v1059 = 0;
  v161 = *((_QWORD *)this + 239);
  if (v161)
    v1058 = ((*(unsigned __int8 *)(v161 + 12) << 31 >> 31) & *(_BYTE *)(v161 + 8));
  else
    v1058 = 0;
  v162 = (CMMsl::PressureCalibration *)*((_QWORD *)this + 317);
  if (v162)
    v1057 = CMMsl::PressureCalibration::hash_value(v162);
  else
    v1057 = 0;
  v163 = *((_QWORD *)this + 441);
  if (v163 && (v164 = *(CMMsl::Magnetometer **)(v163 + 8)) != 0)
    v1056 = CMMsl::Magnetometer::hash_value(v164);
  else
    v1056 = 0;
  v165 = *((_QWORD *)this + 435);
  if (v165 && (v166 = *(CMMsl::CompassCalibration **)(v165 + 8)) != 0)
    v1055 = CMMsl::CompassCalibration::hash_value(v166);
  else
    v1055 = 0;
  v167 = *((_QWORD *)this + 332);
  if (v167)
    v1054 = PBHashBytes(*(_QWORD *)(v167 + 8), *(_QWORD *)(v167 + 16) - *(_QWORD *)(v167 + 8));
  else
    v1054 = 0;
  v168 = (CMMsl::CV3DPredictedPose *)*((_QWORD *)this + 73);
  if (v168)
    v1053 = CMMsl::CV3DPredictedPose::hash_value(v168);
  else
    v1053 = 0;
  v169 = (CMMsl::BioMotionLinkLengthFitParameters *)*((_QWORD *)this + 60);
  if (v169)
    v1052 = CMMsl::BioMotionLinkLengthFitParameters::hash_value(v169);
  else
    v1052 = 0;
  v170 = (CMMsl::BioMotionOnlineLinkLengthUpdate *)*((_QWORD *)this + 61);
  if (v170)
    v1051 = CMMsl::BioMotionOnlineLinkLengthUpdate::hash_value(v170);
  else
    v1051 = 0;
  v171 = (CMMsl::ODTPose *)*((_QWORD *)this + 266);
  if (v171)
    v1050 = CMMsl::ODTPose::hash_value(v171);
  else
    v1050 = 0;
  v172 = *((_QWORD *)this + 299);
  if (v172)
  {
    v173 = *(_BYTE *)(v172 + 24);
    v174 = *(double *)(v172 + 16);
    v175 = *(double *)(v172 + 8) == 0.0 || (v173 & 1) == 0;
    v176 = *(_QWORD *)(v172 + 8);
    if (v175)
      v176 = 0;
    v177 = v173 & 2;
    v178 = v174 == 0.0 || v177 == 0;
    v179 = v174;
    if (v178)
      v179 = 0.0;
    v1049 = *(_QWORD *)&v179 ^ v176;
  }
  else
  {
    v1049 = 0;
  }
  v180 = (CMMsl::PencilTouch *)*((_QWORD *)this + 300);
  if (v180)
    v1048 = CMMsl::PencilTouch::hash_value(v180);
  else
    v1048 = 0;
  v181 = *((_QWORD *)this + 48);
  if (v181)
  {
    v182 = *(_BYTE *)(v181 + 20);
    v183 = *(double *)(v181 + 8) == 0.0 || (v182 & 1) == 0;
    v184 = *(_QWORD *)(v181 + 8);
    if (v183)
      v184 = 0;
    v185 = v182 & 2;
    v186 = *(float *)(v181 + 16);
    v187 = v186 == 0.0 || v185 == 0;
    v188 = LODWORD(v186);
    if (v187)
      v188 = 0;
    v1047 = v188 ^ v184;
  }
  else
  {
    v1047 = 0;
  }
  v189 = *((_QWORD *)this + 393);
  if (v189)
  {
    v190 = *(_BYTE *)(v189 + 20);
    v191 = *(int *)(v189 + 16);
    if ((v190 & 2) == 0)
      v191 = 0;
    v192 = *(_QWORD *)(v189 + 8);
    if ((v190 & 1) == 0)
      v192 = 0;
    v1046 = v192 ^ v191;
  }
  else
  {
    v1046 = 0;
  }
  v193 = *((_QWORD *)this + 43);
  if (v193 && (v194 = *(CMMsl::CV3DSLAMState **)(v193 + 8)) != 0)
    v1045 = CMMsl::CV3DSLAMState::hash_value(v194);
  else
    v1045 = 0;
  v195 = *((_QWORD *)this + 58);
  if (v195 && (v196 = *(CMMsl::BioMotionAnchor **)(v195 + 8)) != 0)
    v1044 = CMMsl::BioMotionAnchor::hash_value(v196);
  else
    v1044 = 0;
  v197 = *((_QWORD *)this + 64);
  if (v197 && (v198 = *(CMMsl::PropagatedAnchor **)(v197 + 8)) != 0)
    v1043 = CMMsl::PropagatedAnchor::hash_value(v198);
  else
    v1043 = 0;
  v199 = (CMMsl::WalkingSteadinessClassification *)*((_QWORD *)this + 420);
  if (v199)
    v1042 = CMMsl::WalkingSteadinessClassification::hash_value(v199);
  else
    v1042 = 0;
  v200 = (CMMsl::SteadinessModelResult *)*((_QWORD *)this + 375);
  if (v200)
    v1041 = CMMsl::SteadinessModelResult::hash_value(v200);
  else
    v1041 = 0;
  v201 = (CMMsl::SteadinessEvent *)*((_QWORD *)this + 370);
  if (v201)
    v1040 = CMMsl::SteadinessEvent::hash_value(v201);
  else
    v1040 = 0;
  v202 = (CMMsl::SteadinessModelGaitBaselineFeatures *)*((_QWORD *)this + 373);
  if (v202)
    v1039 = CMMsl::SteadinessModelGaitBaselineFeatures::hash_value(v202);
  else
    v1039 = 0;
  v203 = (CMMsl::SteadinessModelContinuousWalkingFeatures *)*((_QWORD *)this + 372);
  if (v203)
    v1038 = CMMsl::SteadinessModelContinuousWalkingFeatures::hash_value(v203);
  else
    v1038 = 0;
  v204 = (CMMsl::SteadinessModelTemporalDispersionFeatures *)*((_QWORD *)this + 376);
  if (v204)
    v1037 = CMMsl::SteadinessModelTemporalDispersionFeatures::hash_value(v204);
  else
    v1037 = 0;
  v205 = (CMMsl::SteadinessModelTemporalEntropyFeatures *)*((_QWORD *)this + 377);
  if (v205)
    v1036 = CMMsl::SteadinessModelTemporalEntropyFeatures::hash_value(v205);
  else
    v1036 = 0;
  v206 = (CMMsl::SteadinessModelBalanceFeatures *)*((_QWORD *)this + 371);
  if (v206)
    v1035 = CMMsl::SteadinessModelBalanceFeatures::hash_value(v206);
  else
    v1035 = 0;
  v207 = (CMMsl::MagnetometerReset *)*((_QWORD *)this + 242);
  if (v207)
    v1034 = CMMsl::MagnetometerReset::hash_value(v207);
  else
    v1034 = 0;
  v208 = *((_QWORD *)this + 445);
  if (v208 && (v209 = *(CMMsl::WatchOnWristState **)(v208 + 8)) != 0)
    v1033 = CMMsl::WatchOnWristState::hash_value(v209);
  else
    v1033 = 0;
  v210 = (CMMsl::LiftToWakeOnHeadStatus *)*((_QWORD *)this + 230);
  if (v210)
    v1032 = CMMsl::LiftToWakeOnHeadStatus::hash_value(v210);
  else
    v1032 = 0;
  v211 = (CMMsl::AccessoryMagnetometer *)*((_QWORD *)this + 24);
  if (v211)
    v1031 = CMMsl::AccessoryMagnetometer::hash_value(v211);
  else
    v1031 = 0;
  v212 = (CMMsl::StepCountEntryAddition *)*((_QWORD *)this + 380);
  if (v212)
    v1030 = CMMsl::StepCountEntryAddition::hash_value(v212);
  else
    v1030 = 0;
  v213 = (CMMsl::StepDistanceFusionResult *)*((_QWORD *)this + 381);
  if (v213)
    v1029 = CMMsl::StepDistanceFusionResult::hash_value(v213);
  else
    v1029 = 0;
  v214 = sub_100135CC8((uint64_t)&v1158, (uint64_t *)this + 363);
  v215 = (CMMsl::CVWatchCalories *)*((_QWORD *)this + 92);
  v1143 = v214;
  if (v215)
    v1028 = CMMsl::CVWatchCalories::hash_value(v215);
  else
    v1028 = 0;
  v216 = (uint64_t **)*((_QWORD *)this + 111);
  if (v216)
    v1027 = CMMsl::FaceBlendShapeCoefficientsSample::hash_value(v216);
  else
    v1027 = 0;
  v217 = (CMMsl::BatteryStatus *)*((_QWORD *)this + 57);
  if (v217)
    v1026 = CMMsl::BatteryStatus::hash_value(v217);
  else
    v1026 = 0;
  v218 = *((_QWORD *)this + 234);
  if (v218)
    v1025 = ((*(unsigned __int8 *)(v218 + 12) << 31 >> 31) & *(_BYTE *)(v218 + 8));
  else
    v1025 = 0;
  v219 = *((_QWORD *)this + 56);
  if (v219)
    v1024 = ((*(unsigned __int8 *)(v219 + 12) << 31 >> 31) & *(_BYTE *)(v219 + 8));
  else
    v1024 = 0;
  v220 = *((_QWORD *)this + 308);
  if (v220)
  {
    v221 = *(_BYTE *)(v220 + 16);
    v222 = *(_QWORD *)(v220 + 8);
    if ((v221 & 1) == 0)
      v222 = 0;
    v1023 = v222;
  }
  else
  {
    v1023 = 0;
  }
  v223 = (CMMsl::FocusModes *)*((_QWORD *)this + 130);
  if (v223)
    v1022 = CMMsl::FocusModes::hash_value(v223);
  else
    v1022 = 0;
  v224 = *((_QWORD *)this + 98);
  if (v224)
    v1021 = ((*(unsigned __int8 *)(v224 + 12) << 31 >> 31) & *(_BYTE *)(v224 + 8));
  else
    v1021 = 0;
  v225 = *((_QWORD *)this + 2);
  if (v225 && (v226 = *(_QWORD *)(v225 + 8)) != 0)
    v1020 = sub_1000112DC((uint64_t)v1168, v226);
  else
    v1020 = 0;
  v227 = (CMMsl::AltimeterKF *)*((_QWORD *)this + 40);
  if (v227)
    v1019 = CMMsl::AltimeterKF::hash_value(v227);
  else
    v1019 = 0;
  v228 = (CMMsl::LiftToWakeState *)*((_QWORD *)this + 231);
  if (v228)
    v1018 = CMMsl::LiftToWakeState::hash_value(v228);
  else
    v1018 = 0;
  v229 = (CMMsl::ViewObstructedState *)*((_QWORD *)this + 406);
  if (v229)
    v1017 = CMMsl::ViewObstructedState::hash_value(v229);
  else
    v1017 = 0;
  v230 = (CMMsl::RunningFormMetrics *)*((_QWORD *)this + 343);
  if (v230)
    v1016 = CMMsl::RunningFormMetrics::hash_value(v230);
  else
    v1016 = 0;
  v231 = sub_100135D20((uint64_t)&v1157, (uint64_t *)this + 450);
  v232 = *((_QWORD *)this + 449);
  v1142 = v231;
  if (v232)
    v1015 = sub_100135D20((uint64_t)v1168, (uint64_t *)(v232 + 8));
  else
    v1015 = 0;
  v233 = (CMMsl::ARKitWorldPose *)*((_QWORD *)this + 45);
  if (v233)
    v1014 = CMMsl::ARKitWorldPose::hash_value(v233);
  else
    v1014 = 0;
  v234 = *((_QWORD *)this + 281);
  if (v234)
  {
    v235 = *(int *)(v234 + 16);
    if ((*(_BYTE *)(v234 + 20) & 2) == 0)
      v235 = 0;
    v236 = *(double *)(v234 + 8) == 0.0 || (*(_BYTE *)(v234 + 20) & 1) == 0;
    v237 = *(_QWORD *)(v234 + 8);
    if (v236)
      v237 = 0;
    v1013 = v237 ^ v235;
  }
  else
  {
    v1013 = 0;
  }
  v238 = (CMMsl::PocketDetectionPacket *)*((_QWORD *)this + 303);
  if (v238)
    v1012 = CMMsl::PocketDetectionPacket::hash_value(v238);
  else
    v1012 = 0;
  v239 = (CMMsl::LiftToWakeFeaturesNeo *)*((_QWORD *)this + 229);
  if (v239)
    v1011 = CMMsl::LiftToWakeFeaturesNeo::hash_value(v239);
  else
    v1011 = 0;
  v240 = (CMMsl::LiftToWakeStatusNeo *)*((_QWORD *)this + 232);
  if (v240)
    v1010 = CMMsl::LiftToWakeStatusNeo::hash_value(v240);
  else
    v1010 = 0;
  v241 = (CMMsl::RunningPower *)*((_QWORD *)this + 344);
  if (v241)
    v1009 = CMMsl::RunningPower::hash_value(v241);
  else
    v1009 = 0;
  v242 = (CMMsl::BasebandCompassCoex *)*((_QWORD *)this + 51);
  if (v242)
    v1008 = CMMsl::BasebandCompassCoex::hash_value(v242);
  else
    v1008 = 0;
  v243 = (CMMsl::BasebandCompassCoexConstraints *)*((_QWORD *)this + 52);
  if (v243)
    v1007 = CMMsl::BasebandCompassCoexConstraints::hash_value(v243);
  else
    v1007 = 0;
  v244 = (CMMsl::MotionContextActivity *)*((_QWORD *)this + 250);
  if (v244)
    v1006 = CMMsl::MotionContextActivity::hash_value(v244);
  else
    v1006 = 0;
  v245 = *((_QWORD *)this + 269);
  if (v245)
  {
    v246 = *(_BYTE *)(v245 + 12);
    v247 = *(int *)(v245 + 8);
    if ((v246 & 1) == 0)
      v247 = 0;
    v1005 = v247;
  }
  else
  {
    v1005 = 0;
  }
  v248 = (CMMsl::AccelTNBFrame *)*((_QWORD *)this + 9);
  if (v248)
    v1004 = CMMsl::AccelTNBFrame::hash_value(v248);
  else
    v1004 = 0;
  v249 = (CMMsl::DoTEstimatorWithTNB *)*((_QWORD *)this + 104);
  if (v249)
    v1003 = CMMsl::DoTEstimatorWithTNB::hash_value(v249);
  else
    v1003 = 0;
  v250 = (CMMsl::PdrMLModelOutput *)*((_QWORD *)this + 282);
  if (v250)
    v1002 = CMMsl::PdrMLModelOutput::hash_value(v250);
  else
    v1002 = 0;
  v251 = (CMMsl::GaitEventsModelOutput *)*((_QWORD *)this + 136);
  if (v251)
    v1001 = CMMsl::GaitEventsModelOutput::hash_value(v251);
  else
    v1001 = 0;
  v252 = (CMMsl::GaitEventsStrideAggregation *)*((_QWORD *)this + 137);
  if (v252)
    v1000 = CMMsl::GaitEventsStrideAggregation::hash_value(v252);
  else
    v1000 = 0;
  v253 = (CMMsl::GaitEventsHKResult *)*((_QWORD *)this + 135);
  if (v253)
    v999 = CMMsl::GaitEventsHKResult::hash_value(v253);
  else
    v999 = 0;
  v254 = *((_QWORD *)this + 112);
  if (v254)
  {
    v255 = *(unsigned __int8 *)(v254 + 20);
    v256 = *(double *)(v254 + 8) == 0.0 || (v255 & 1) == 0;
    v257 = *(_QWORD *)(v254 + 8);
    if (v256)
      v257 = 0;
    v998 = v257 ^ (*(_BYTE *)(v254 + 16) & (v255 << 30 >> 31));
  }
  else
  {
    v998 = 0;
  }
  v258 = (CMMsl::WorkoutRecorderAveragedALSData *)*((_QWORD *)this + 433);
  if (v258)
    v997 = CMMsl::WorkoutRecorderAveragedALSData::hash_value(v258);
  else
    v997 = 0;
  v259 = (CMMsl::StrideCalEntry *)*((_QWORD *)this + 386);
  if (v259)
    v996 = CMMsl::StrideCalEntry::hash_value(v259);
  else
    v996 = 0;
  v260 = (CMMsl::RunningSpeedKFResult *)*((_QWORD *)this + 346);
  if (v260)
    v995 = CMMsl::RunningSpeedKFResult::hash_value(v260);
  else
    v995 = 0;
  v261 = (CMMsl::ProxPDP *)*((_QWORD *)this + 327);
  if (v261)
    v994 = CMMsl::ProxPDP::hash_value(v261);
  else
    v994 = 0;
  v262 = (CMMsl::KeyboardMotionFeatures *)*((_QWORD *)this + 224);
  if (v262)
    v993 = CMMsl::KeyboardMotionFeatures::hash_value(v262);
  else
    v993 = 0;
  v263 = *((_QWORD *)this + 225);
  if (v263)
  {
    v264 = *(_BYTE *)(v263 + 20);
    v265 = *(double *)(v263 + 8) == 0.0 || (v264 & 1) == 0;
    v266 = *(_QWORD *)(v263 + 8);
    if (v265)
      v266 = 0;
    v267 = *(unsigned int *)(v263 + 16);
    if ((v264 & 2) == 0)
      v267 = 0;
    v992 = v267 ^ v266;
  }
  else
  {
    v992 = 0;
  }
  v268 = *((_QWORD *)this + 38);
  if (v268)
  {
    v269 = *(_QWORD *)(v268 + 8);
    if ((*(_BYTE *)(v268 + 20) & 1) == 0)
      v269 = 0;
    v270 = *(float *)(v268 + 16);
    v271 = v270 == 0.0 || (*(_BYTE *)(v268 + 20) & 2) == 0;
    v272 = LODWORD(v270);
    if (v271)
      v272 = 0;
    v991 = v272 ^ v269;
  }
  else
  {
    v991 = 0;
  }
  v273 = *((_QWORD *)this + 223);
  if (v273)
  {
    v274 = *(unsigned __int8 *)(v273 + 20);
    v275 = *(double *)(v273 + 8) == 0.0 || (v274 & 1) == 0;
    v276 = *(_QWORD *)(v273 + 8);
    if (v275)
      v276 = 0;
    v990 = v276 ^ (*(_BYTE *)(v273 + 16) & (v274 << 30 >> 31));
  }
  else
  {
    v990 = 0;
  }
  v277 = (CMMsl::WakeGestureNotification *)*((_QWORD *)this + 417);
  if (v277)
    v989 = CMMsl::WakeGestureNotification::hash_value(v277);
  else
    v989 = 0;
  v278 = (CMMsl::ProxBaselineEstimatorState *)*((_QWORD *)this + 325);
  if (v278)
    v988 = CMMsl::ProxBaselineEstimatorState::hash_value(v278);
  else
    v988 = 0;
  v279 = (CMMsl::BaselineResetCheck *)*((_QWORD *)this + 54);
  if (v279)
    v987 = CMMsl::BaselineResetCheck::hash_value(v279);
  else
    v987 = 0;
  v280 = (CMMsl::RhythmicGnssOperatorStatus *)*((_QWORD *)this + 339);
  if (v280)
    v986 = CMMsl::RhythmicGnssOperatorStatus::hash_value(v280);
  else
    v986 = 0;
  v281 = *((_QWORD *)this + 226);
  if (v281)
  {
    v282 = *(unsigned __int8 *)(v281 + 20);
    v283 = *(double *)(v281 + 8) == 0.0 || (v282 & 1) == 0;
    v284 = *(_QWORD *)(v281 + 8);
    if (v283)
      v284 = 0;
    v985 = v284 ^ (*(_BYTE *)(v281 + 16) & (v282 << 30 >> 31));
  }
  else
  {
    v985 = 0;
  }
  v285 = *((_QWORD *)this + 222);
  if (v285)
  {
    v286 = *(unsigned __int8 *)(v285 + 20);
    v287 = *(double *)(v285 + 8) == 0.0 || (v286 & 1) == 0;
    v288 = *(_QWORD *)(v285 + 8);
    if (v287)
      v288 = 0;
    v984 = v288 ^ (*(_BYTE *)(v285 + 16) & (v286 << 30 >> 31));
  }
  else
  {
    v984 = 0;
  }
  v289 = (CMMsl::BacklightState *)*((_QWORD *)this + 50);
  if (v289)
    v983 = CMMsl::BacklightState::hash_value(v289);
  else
    v983 = 0;
  v290 = sub_100135D78((uint64_t)&v1156, (uint64_t *)this + 55);
  v291 = (CMMsl::HeartRateReference *)*((_QWORD *)this + 165);
  v1141 = v290;
  if (v291)
    v982 = CMMsl::HeartRateReference::hash_value(v291);
  else
    v982 = 0;
  v292 = (CMMsl::Skeleton2D *)*((_QWORD *)this + 362);
  if (v292)
    v981 = CMMsl::Skeleton2D::hash_value(v292);
  else
    v981 = 0;
  v293 = (CMMsl::Skeleton3DRetargeted *)*((_QWORD *)this + 365);
  if (v293)
    v980 = CMMsl::Skeleton3DRetargeted::hash_value(v293);
  else
    v980 = 0;
  v294 = (CMMsl::Skeleton3DLifted *)*((_QWORD *)this + 364);
  if (v294)
    v979 = CMMsl::Skeleton3DLifted::hash_value(v294);
  else
    v979 = 0;
  v295 = (CMMsl::FitnessMachineSample *)*((_QWORD *)this + 129);
  if (v295)
    v978 = CMMsl::FitnessMachineSample::hash_value(v295);
  else
    v978 = 0;
  v296 = (CMMsl::WatchHeartRateData *)*((_QWORD *)this + 424);
  if (v296)
    v977 = CMMsl::WatchHeartRateData::hash_value(v296);
  else
    v977 = 0;
  v297 = (CMMsl::FacePoseSynchronized *)*((_QWORD *)this + 115);
  if (v297)
    v976 = CMMsl::FacePoseSynchronized::hash_value(v297);
  else
    v976 = 0;
  v298 = (CMMsl::WatchActiveCalories *)*((_QWORD *)this + 421);
  if (v298)
    v975 = CMMsl::WatchActiveCalories::hash_value(v298);
  else
    v975 = 0;
  v299 = (CMMsl::WatchBasalCalories *)*((_QWORD *)this + 422);
  if (v299)
    v974 = CMMsl::WatchBasalCalories::hash_value(v299);
  else
    v974 = 0;
  v300 = (CMMsl::TrackRunData *)*((_QWORD *)this + 395);
  if (v300)
    v973 = CMMsl::TrackRunData::hash_value(v300);
  else
    v973 = 0;
  v301 = (CMMsl::GnssAvailabilityPredictorData *)*((_QWORD *)this + 139);
  if (v301)
    v972 = CMMsl::GnssAvailabilityPredictorData::hash_value(v301);
  else
    v972 = 0;
  v302 = (CMMsl::GnssLeechLocationData *)*((_QWORD *)this + 140);
  if (v302)
    v971 = CMMsl::GnssLeechLocationData::hash_value(v302);
  else
    v971 = 0;
  v303 = (CMMsl::MapsRouteHintData *)*((_QWORD *)this + 243);
  if (v303)
    v970 = CMMsl::MapsRouteHintData::hash_value(v303);
  else
    v970 = 0;
  v304 = (CMMsl::FitnessMachineData *)*((_QWORD *)this + 128);
  if (v304)
    v969 = CMMsl::FitnessMachineData::hash_value(v304);
  else
    v969 = 0;
  v305 = *((_QWORD *)this + 438);
  if (v305 && (v306 = *(CMMsl::FitnessMachineData **)(v305 + 8)) != 0)
    v968 = CMMsl::FitnessMachineData::hash_value(v306);
  else
    v968 = 0;
  v307 = (CMMsl::AccessoryActivityStateUpdate *)*((_QWORD *)this + 14);
  if (v307)
    v967 = CMMsl::AccessoryActivityStateUpdate::hash_value(v307);
  else
    v967 = 0;
  v308 = (CMMsl::PedestrianFenceExit *)*((_QWORD *)this + 291);
  if (v308)
    v966 = CMMsl::PedestrianFenceExit::hash_value(v308);
  else
    v966 = 0;
  v309 = (CMMsl::InertialOdometry *)*((_QWORD *)this + 177);
  if (v309)
    v965 = CMMsl::InertialOdometry::hash_value(v309);
  else
    v965 = 0;
  v310 = (CMMsl::PhysicalEffortInput *)*((_QWORD *)this + 301);
  if (v310)
    v964 = CMMsl::PhysicalEffortInput::hash_value(v310);
  else
    v964 = 0;
  v311 = (CMMsl::PhysicalEffortSample *)*((_QWORD *)this + 302);
  if (v311)
    v963 = CMMsl::PhysicalEffortSample::hash_value(v311);
  else
    v963 = 0;
  v312 = (CMMsl::PedestrianCalorieModelDebugging *)*((_QWORD *)this + 290);
  if (v312)
    v962 = CMMsl::PedestrianCalorieModelDebugging::hash_value(v312);
  else
    v962 = 0;
  v313 = (CMMsl::ElevationThreshold *)*((_QWORD *)this + 108);
  if (v313)
    v961 = CMMsl::ElevationThreshold::hash_value(v313);
  else
    v961 = 0;
  v314 = (CMMsl::InitialHistoricalMeanSeaLevelPressure *)*((_QWORD *)this + 178);
  if (v314)
    v960 = CMMsl::InitialHistoricalMeanSeaLevelPressure::hash_value(v314);
  else
    v960 = 0;
  v315 = *((_QWORD *)this + 428);
  if (v315)
  {
    v316 = *(_BYTE *)(v315 + 16);
    v319 = v315 + 8;
    v317 = *(unsigned int *)(v315 + 8);
    v318 = *(unsigned int *)(v319 + 4);
    if ((v316 & 2) == 0)
      v318 = 0;
    if ((v316 & 1) == 0)
      v317 = 0;
    v959 = v317 ^ v318;
  }
  else
  {
    v959 = 0;
  }
  v320 = (CMMsl::PencilDeviceMotion *)*((_QWORD *)this + 294);
  if (v320)
    v958 = CMMsl::PencilDeviceMotion::hash_value(v320);
  else
    v958 = 0;
  v321 = (CMMsl::PencilFusionResult *)*((_QWORD *)this + 297);
  if (v321)
    v957 = CMMsl::PencilFusionResult::hash_value(v321);
  else
    v957 = 0;
  v322 = *((_QWORD *)this + 159);
  if (v322)
  {
    v323 = *(unsigned __int8 *)(v322 + 20);
    v324 = *(double *)(v322 + 8) == 0.0 || (v323 & 1) == 0;
    v325 = *(_QWORD *)(v322 + 8);
    if (v324)
      v325 = 0;
    v956 = v325 ^ (*(_BYTE *)(v322 + 16) & (v323 << 30 >> 31));
  }
  else
  {
    v956 = 0;
  }
  v326 = (CMMsl::SteadinessModelHarmonicFeatures *)*((_QWORD *)this + 374);
  if (v326)
    v955 = CMMsl::SteadinessModelHarmonicFeatures::hash_value(v326);
  else
    v955 = 0;
  v327 = (CMMsl::PencilFusionReplayResult *)*((_QWORD *)this + 296);
  if (v327)
    v954 = CMMsl::PencilFusionReplayResult::hash_value(v327);
  else
    v954 = 0;
  v328 = (CMMsl::MobilitySmoothedGaitMetrics *)*((_QWORD *)this + 246);
  if (v328)
    v953 = CMMsl::MobilitySmoothedGaitMetrics::hash_value(v328);
  else
    v953 = 0;
  v329 = *((_QWORD *)this + 423);
  if (v329)
  {
    v330 = *(_BYTE *)(v329 + 24);
    v331 = *(double *)(v329 + 16) == 0.0 || (v330 & 2) == 0;
    v332 = *(_QWORD *)(v329 + 16);
    if (v331)
      v332 = 0;
    v333 = *(_QWORD *)(v329 + 8);
    if ((v330 & 1) == 0)
      v333 = 0;
    v952 = v332 ^ v333;
  }
  else
  {
    v952 = 0;
  }
  v334 = (CMMsl::AccessoryHeartRate *)*((_QWORD *)this + 22);
  if (v334)
    v951 = CMMsl::AccessoryHeartRate::hash_value(v334);
  else
    v951 = 0;
  v335 = (CMMsl::AccessoryPPG *)*((_QWORD *)this + 26);
  if (v335)
    v950 = CMMsl::AccessoryPPG::hash_value(v335);
  else
    v950 = 0;
  v336 = (CMMsl::MotionLoiAltitudeData *)*((_QWORD *)this + 254);
  if (v336)
    v949 = CMMsl::MotionLoiAltitudeData::hash_value(v336);
  else
    v949 = 0;
  v337 = *((_QWORD *)this + 97);
  if (v337)
  {
    v338 = *(_BYTE *)(v337 + 20);
    v339 = *(double *)(v337 + 8) == 0.0 || (v338 & 1) == 0;
    v340 = *(_QWORD *)(v337 + 8);
    if (v339)
      v340 = 0;
    v341 = *(unsigned int *)(v337 + 16);
    if ((v338 & 2) == 0)
      v341 = 0;
    v948 = v341 ^ v340;
  }
  else
  {
    v948 = 0;
  }
  v342 = (CMMsl::PostureJoint *)*((_QWORD *)this + 306);
  if (v342)
    v947 = CMMsl::PostureJoint::hash_value(v342);
  else
    v947 = 0;
  v343 = sub_100135DC0((uint64_t)&v1155, (uint64_t *)this + 307);
  v344 = *((_QWORD *)this + 167);
  v1140 = v343;
  if (v344)
  {
    v345 = *(unsigned __int8 *)(v344 + 20);
    v346 = *(double *)(v344 + 8) == 0.0 || (v345 & 1) == 0;
    v347 = *(_QWORD *)(v344 + 8);
    if (v346)
      v347 = 0;
    v946 = v347 ^ (*(_BYTE *)(v344 + 16) & (v345 << 30 >> 31));
  }
  else
  {
    v946 = 0;
  }
  v348 = sub_100135E18((uint64_t)&v1154, (uint64_t)this + 3496);
  v349 = *((_QWORD *)this + 384);
  v1139 = v348;
  if (v349 && (v350 = *(CMMsl::OnsetHeartRateData **)(v349 + 8)) != 0)
    v945 = CMMsl::OnsetHeartRateData::hash_value(v350);
  else
    v945 = 0;
  v351 = sub_100135E64((uint64_t)&v1153, (uint64_t *)this + 396);
  v352 = (CMMsl::Accel *)*((_QWORD *)this + 3);
  v1138 = v351;
  if (v352)
    v944 = CMMsl::Accel::hash_value(v352);
  else
    v944 = 0;
  v353 = (CMMsl::AccelBatch *)*((_QWORD *)this + 5);
  if (v353)
    v943 = CMMsl::AccelBatch::hash_value(v353);
  else
    v943 = 0;
  v354 = *((_QWORD *)this + 8);
  if (v354 && (v355 = *(CMMsl::Accel **)(v354 + 8)) != 0)
    v942 = CMMsl::Accel::hash_value(v355);
  else
    v942 = 0;
  v356 = *((_QWORD *)this + 6);
  if (v356 && (v357 = *(CMMsl::Accel **)(v356 + 8)) != 0)
    v941 = CMMsl::Accel::hash_value(v357);
  else
    v941 = 0;
  v358 = (CMMsl::Gyro *)*((_QWORD *)this + 143);
  if (v358)
    v940 = CMMsl::Gyro::hash_value(v358);
  else
    v940 = 0;
  v359 = (CMMsl::GyroOscarEmu *)*((_QWORD *)this + 157);
  if (v359)
    v939 = CMMsl::GyroOscarEmu::hash_value(v359);
  else
    v939 = 0;
  v360 = *((_QWORD *)this + 158);
  if (v360)
  {
    v361 = *(_BYTE *)(v360 + 16);
    v362 = *(float *)(v360 + 12);
    v363 = v362 == 0.0 || (v361 & 2) == 0;
    v364 = LODWORD(v362);
    if (v363)
      v364 = 0;
    v365 = *(int *)(v360 + 8);
    if ((v361 & 1) == 0)
      v365 = 0;
    v938 = v365 ^ v364;
  }
  else
  {
    v938 = 0;
  }
  v366 = (CMMsl::GyroBiasAndVariance *)*((_QWORD *)this + 144);
  if (v366)
    v937 = CMMsl::GyroBiasAndVariance::hash_value(v366);
  else
    v937 = 0;
  v367 = (CMMsl::GyroBiasFit *)*((_QWORD *)this + 148);
  if (v367)
    v936 = CMMsl::GyroBiasFit::hash_value(v367);
  else
    v936 = 0;
  v368 = *((_QWORD *)this + 154);
  if (v368)
  {
    v369 = *(float *)(v368 + 8);
    v370 = v369 == 0.0 || (*(_BYTE *)(v368 + 12) & 1) == 0;
    v371 = LODWORD(v369);
    if (v370)
      v371 = 0;
    v935 = v371;
  }
  else
  {
    v935 = 0;
  }
  v372 = (CMMsl::Magnetometer *)*((_QWORD *)this + 240);
  if (v372)
    v934 = CMMsl::Magnetometer::hash_value(v372);
  else
    v934 = 0;
  v373 = (CMMsl::Compass *)*((_QWORD *)this + 80);
  if (v373)
    v933 = CMMsl::Compass::hash_value(v373);
  else
    v933 = 0;
  v374 = *((_QWORD *)this + 81);
  if (v374)
  {
    v375 = *(_BYTE *)(v374 + 20);
    v376 = *(double *)(v374 + 8) == 0.0 || (v375 & 1) == 0;
    v377 = *(_QWORD *)(v374 + 8);
    if (v376)
      v377 = 0;
    v378 = *(int *)(v374 + 16);
    if ((v375 & 2) == 0)
      v378 = 0;
    v932 = v378 ^ v377;
  }
  else
  {
    v932 = 0;
  }
  v379 = (CMMsl::GyroCompass *)*((_QWORD *)this + 153);
  if (v379)
    v931 = CMMsl::GyroCompass::hash_value(v379);
  else
    v931 = 0;
  v380 = (CMMsl::CompassCalibration *)*((_QWORD *)this + 82);
  if (v380)
    v930 = CMMsl::CompassCalibration::hash_value(v380);
  else
    v930 = 0;
  v381 = (CMMsl::Pressure *)*((_QWORD *)this + 316);
  if (v381)
    v929 = CMMsl::Pressure::hash_value(v381);
  else
    v929 = 0;
  v382 = *((_QWORD *)this + 323);
  if (v382 && (v383 = *(CMMsl::Pressure **)(v382 + 8)) != 0)
    v928 = CMMsl::Pressure::hash_value(v383);
  else
    v928 = 0;
  v384 = *((_QWORD *)this + 319);
  if (v384 && (v385 = *(CMMsl::Pressure **)(v384 + 8)) != 0)
    v927 = CMMsl::Pressure::hash_value(v385);
  else
    v927 = 0;
  v386 = *((_QWORD *)this + 324);
  if (v386)
  {
    v387 = *(_BYTE *)(v386 + 20);
    v388 = *(double *)(v386 + 8) == 0.0 || (v387 & 1) == 0;
    v389 = *(_QWORD *)(v386 + 8);
    if (v388)
      v389 = 0;
    v390 = *(unsigned int *)(v386 + 16);
    if ((v387 & 2) == 0)
      v390 = 0;
    v926 = v390 ^ v389;
  }
  else
  {
    v926 = 0;
  }
  v391 = *((_QWORD *)this + 394);
  if (v391)
  {
    v392 = *(unsigned __int8 *)(v391 + 20);
    v393 = *(double *)(v391 + 8) == 0.0 || (v392 & 1) == 0;
    v394 = *(_QWORD *)(v391 + 8);
    if (v393)
      v394 = 0;
    v925 = v394 ^ (*(_BYTE *)(v391 + 16) & (v392 << 30 >> 31));
  }
  else
  {
    v925 = 0;
  }
  v395 = (CMMsl::DeviceMotion *)*((_QWORD *)this + 93);
  if (v395)
    v924 = CMMsl::DeviceMotion::hash_value(v395);
  else
    v924 = 0;
  v396 = (CMMsl::MotionStateUpdate *)*((_QWORD *)this + 256);
  if (v396)
    v923 = CMMsl::MotionStateUpdate::hash_value(v396);
  else
    v923 = 0;
  v397 = (CMMsl::AccelGps *)*((_QWORD *)this + 7);
  if (v397)
    v922 = CMMsl::AccelGps::hash_value(v397);
  else
    v922 = 0;
  v398 = (CMMsl::GyroGps *)*((_QWORD *)this + 156);
  if (v398)
    v921 = CMMsl::GyroGps::hash_value(v398);
  else
    v921 = 0;
  v399 = *((_QWORD *)this + 322);
  if (v399 && (v400 = *(CMMsl::Pressure **)(v399 + 8)) != 0)
    v920 = CMMsl::Pressure::hash_value(v400);
  else
    v920 = 0;
  v401 = (CMMsl::BTConnection *)*((_QWORD *)this + 49);
  if (v401)
    v919 = CMMsl::BTConnection::hash_value(v401);
  else
    v919 = 0;
  v402 = *((_QWORD *)this + 355);
  if (v402)
  {
    v403 = *(_BYTE *)(v402 + 20);
    v404 = *(double *)(v402 + 8) == 0.0 || (v403 & 1) == 0;
    v405 = *(_QWORD *)(v402 + 8);
    if (v404)
      v405 = 0;
    v406 = *(unsigned int *)(v402 + 16);
    if ((v403 & 2) == 0)
      v406 = 0;
    v918 = v406 ^ v405;
  }
  else
  {
    v918 = 0;
  }
  v407 = (CMMsl::LocationOscarEmu *)*((_QWORD *)this + 233);
  if (v407)
    v917 = CMMsl::LocationOscarEmu::hash_value(v407);
  else
    v917 = 0;
  v408 = (CMMsl::MotionHint *)*((_QWORD *)this + 252);
  if (v408)
    v916 = CMMsl::MotionHint::hash_value(v408);
  else
    v916 = 0;
  v409 = (CMMsl::EnhancedDeviceMotion *)*((_QWORD *)this + 110);
  if (v409)
    v915 = CMMsl::EnhancedDeviceMotion::hash_value(v409);
  else
    v915 = 0;
  v410 = (CMMsl::NonlinearBiasFit *)*((_QWORD *)this + 263);
  if (v410)
    v914 = CMMsl::NonlinearBiasFit::hash_value(v410);
  else
    v914 = 0;
  v411 = (CMMsl::NatalieData *)*((_QWORD *)this + 262);
  if (v411)
    v913 = CMMsl::NatalieData::hash_value(v411);
  else
    v913 = 0;
  v412 = (CMMsl::BodyMetrics *)*((_QWORD *)this + 66);
  if (v412)
    v912 = CMMsl::BodyMetrics::hash_value(v412);
  else
    v912 = 0;
  v413 = (CMMsl::WorkoutEvent *)*((_QWORD *)this + 429);
  if (v413)
    v911 = CMMsl::WorkoutEvent::hash_value(v413);
  else
    v911 = 0;
  v414 = (CMMsl::OnsetHeartRateData *)*((_QWORD *)this + 267);
  if (v414)
    v910 = CMMsl::OnsetHeartRateData::hash_value(v414);
  else
    v910 = 0;
  v415 = *((_QWORD *)this + 383);
  if (v415 && (v416 = *(CMMsl::OnsetHeartRateData **)(v415 + 8)) != 0)
    v909 = CMMsl::OnsetHeartRateData::hash_value(v416);
  else
    v909 = 0;
  v417 = (CMMsl::ElevationChange *)*((_QWORD *)this + 106);
  if (v417)
    v908 = CMMsl::ElevationChange::hash_value(v417);
  else
    v908 = 0;
  v418 = *((_QWORD *)this + 79);
  if (v418)
  {
    v419 = *(_BYTE *)(v418 + 20);
    v420 = *(double *)(v418 + 8) == 0.0 || (v419 & 1) == 0;
    v421 = *(_QWORD *)(v418 + 8);
    if (v420)
      v421 = 0;
    v422 = *(unsigned int *)(v418 + 16);
    if ((v419 & 2) == 0)
      v422 = 0;
    v907 = v422 ^ v421;
  }
  else
  {
    v907 = 0;
  }
  v423 = (CMMsl::MotionGPSLocation *)*((_QWORD *)this + 251);
  if (v423)
    v906 = CMMsl::MotionGPSLocation::hash_value(v423);
  else
    v906 = 0;
  v424 = *((_QWORD *)this + 258);
  if (v424 && (v425 = *(CMMsl::MotionGPSLocation **)(v424 + 8)) != 0)
    v905 = CMMsl::MotionGPSLocation::hash_value(v425);
  else
    v905 = 0;
  v426 = (CMMsl::StrideCalBin *)*((_QWORD *)this + 385);
  if (v426)
    v904 = CMMsl::StrideCalBin::hash_value(v426);
  else
    v904 = 0;
  v427 = *((_QWORD *)this + 75);
  if (v427)
    v903 = ((*(unsigned __int8 *)(v427 + 12) << 31 >> 31) & *(_BYTE *)(v427 + 8));
  else
    v903 = 0;
  v428 = (CMMsl::Odometer *)*((_QWORD *)this + 264);
  if (v428)
    v902 = CMMsl::Odometer::hash_value(v428);
  else
    v902 = 0;
  v429 = (CMMsl::MetsInfo *)*((_QWORD *)this + 244);
  if (v429)
    v901 = CMMsl::MetsInfo::hash_value(v429);
  else
    v901 = 0;
  v430 = (CMMsl::FallStats *)*((_QWORD *)this + 126);
  if (v430)
    v900 = CMMsl::FallStats::hash_value(v430);
  else
    v900 = 0;
  v431 = (CMMsl::BasebandSpeed *)*((_QWORD *)this + 53);
  if (v431)
    v899 = CMMsl::BasebandSpeed::hash_value(v431);
  else
    v899 = 0;
  v432 = *((_QWORD *)this + 402);
  if (v432)
    v898 = ((*(unsigned __int8 *)(v432 + 12) << 31 >> 31) & *(_BYTE *)(v432 + 8));
  else
    v898 = 0;
  v433 = (CMMsl::StepCadenceToStrideLengthBin *)*((_QWORD *)this + 378);
  if (v433)
    v897 = CMMsl::StepCadenceToStrideLengthBin::hash_value(v433);
  else
    v897 = 0;
  v434 = *((_QWORD *)this + 426);
  if (v434)
  {
    v435 = *(_BYTE *)(v434 + 16);
    v438 = v434 + 8;
    v436 = *(unsigned int *)(v434 + 8);
    v437 = *(unsigned int *)(v438 + 4);
    if ((v435 & 2) == 0)
      v437 = 0;
    if ((v435 & 1) == 0)
      v436 = 0;
    v896 = v436 ^ v437;
  }
  else
  {
    v896 = 0;
  }
  v439 = *((_QWORD *)this + 257);
  if (v439)
    v895 = ((*(unsigned __int8 *)(v439 + 12) << 31 >> 31) & *(_BYTE *)(v439 + 8));
  else
    v895 = 0;
  v440 = (CMMsl::MotionLoiData *)*((_QWORD *)this + 255);
  if (v440)
    v894 = CMMsl::MotionLoiData::hash_value(v440);
  else
    v894 = 0;
  v441 = (CMMsl::OdometerWithAltitude *)*((_QWORD *)this + 265);
  if (v441)
    v893 = CMMsl::OdometerWithAltitude::hash_value(v441);
  else
    v893 = 0;
  v442 = *((_QWORD *)this + 321);
  if (v442)
  {
    v443 = *(_QWORD *)(v442 + 8);
    if ((*(_BYTE *)(v442 + 20) & 1) == 0)
      v443 = 0;
    v444 = *(float *)(v442 + 16);
    v445 = v444 == 0.0 || (*(_BYTE *)(v442 + 20) & 2) == 0;
    v446 = LODWORD(v444);
    if (v445)
      v446 = 0;
    v892 = v446 ^ v443;
  }
  else
  {
    v892 = 0;
  }
  v447 = (CMMsl::InEarTransition *)*((_QWORD *)this + 175);
  if (v447)
    v891 = CMMsl::InEarTransition::hash_value(v447);
  else
    v891 = 0;
  v448 = (CMMsl::ClefCalibration *)*((_QWORD *)this + 78);
  if (v448)
    v890 = CMMsl::ClefCalibration::hash_value(v448);
  else
    v890 = 0;
  v449 = (CMMsl::AirpodEvent *)*((_QWORD *)this + 36);
  if (v449)
    v889 = CMMsl::AirpodEvent::hash_value(v449);
  else
    v889 = 0;
  v450 = (CMMsl::InEarOptical *)*((_QWORD *)this + 173);
  if (v450)
    v888 = CMMsl::InEarOptical::hash_value(v450);
  else
    v888 = 0;
  v451 = (CMMsl::InEarConstraints *)*((_QWORD *)this + 171);
  if (v451)
    v887 = CMMsl::InEarConstraints::hash_value(v451);
  else
    v887 = 0;
  v452 = (CMMsl::InEarOpenLid *)*((_QWORD *)this + 172);
  if (v452)
    v886 = CMMsl::InEarOpenLid::hash_value(v452);
  else
    v886 = 0;
  v453 = (CMMsl::InEarBaselining *)*((_QWORD *)this + 170);
  if (v453)
    v885 = CMMsl::InEarBaselining::hash_value(v453);
  else
    v885 = 0;
  v454 = (CMMsl::AccessoryConfig *)*((_QWORD *)this + 15);
  if (v454)
    v884 = CMMsl::AccessoryConfig::hash_value(v454);
  else
    v884 = 0;
  v455 = (CMMsl::AccessoryAccelConfig *)*((_QWORD *)this + 12);
  if (v455)
    v883 = CMMsl::AccessoryAccelConfig::hash_value(v455);
  else
    v883 = 0;
  v456 = (CMMsl::AccessoryProximityConfig *)*((_QWORD *)this + 30);
  if (v456)
    v882 = CMMsl::AccessoryProximityConfig::hash_value(v456);
  else
    v882 = 0;
  v457 = (CMMsl::TapDetect *)*((_QWORD *)this + 390);
  if (v457)
    v881 = CMMsl::TapDetect::hash_value(v457);
  else
    v881 = 0;
  v458 = (CMMsl::TapAccept *)*((_QWORD *)this + 389);
  if (v458)
    v880 = CMMsl::TapAccept::hash_value(v458);
  else
    v880 = 0;
  v459 = (CMMsl::DoubleTap *)*((_QWORD *)this + 105);
  if (v459)
    v879 = CMMsl::DoubleTap::hash_value(v459);
  else
    v879 = 0;
  v460 = (CMMsl::AccessoryWakeDebug *)*((_QWORD *)this + 35);
  if (v460)
    v878 = CMMsl::AccessoryWakeDebug::hash_value(v460);
  else
    v878 = 0;
  v461 = (CMMsl::GeomagneticData *)*((_QWORD *)this + 138);
  if (v461)
    v877 = CMMsl::GeomagneticData::hash_value(v461);
  else
    v877 = 0;
  v462 = (CMMsl::RelativeDeviceMotionInternal *)*((_QWORD *)this + 336);
  if (v462)
    v876 = CMMsl::RelativeDeviceMotionInternal::hash_value(v462);
  else
    v876 = 0;
  v463 = sub_100135A1C((uint64_t)&v1152, (uint64_t *)this + 338);
  v464 = (CMMsl::RelativeGravityConstraints *)*((_QWORD *)this + 337);
  v1137 = v463;
  if (v464)
    v875 = CMMsl::RelativeGravityConstraints::hash_value(v464);
  else
    v875 = 0;
  v465 = *((_QWORD *)this + 451);
  if (v465 && (v466 = *(CMMsl::DeviceMotionCorrection **)(v465 + 8)) != 0)
    v874 = CMMsl::DeviceMotionCorrection::hash_value(v466);
  else
    v874 = 0;
  v467 = (CMMsl::AnchorCorrection *)*((_QWORD *)this + 41);
  if (v467)
    v873 = CMMsl::AnchorCorrection::hash_value(v467);
  else
    v873 = 0;
  v468 = (CMMsl::PredictedRelativeDeviceMotion *)*((_QWORD *)this + 315);
  if (v468)
    v872 = CMMsl::PredictedRelativeDeviceMotion::hash_value(v468);
  else
    v872 = 0;
  v469 = (CMMsl::MovementStatsSignal *)*((_QWORD *)this + 261);
  if (v469)
    v871 = CMMsl::MovementStatsSignal::hash_value(v469);
  else
    v871 = 0;
  v470 = (CMMsl::MovementStatsGravityProjection *)*((_QWORD *)this + 260);
  if (v470)
    v870 = CMMsl::MovementStatsGravityProjection::hash_value(v470);
  else
    v870 = 0;
  v471 = sub_100135A1C((uint64_t)&v1151, (uint64_t *)this + 65);
  v472 = *((_QWORD *)this + 20);
  if (v472 && (v473 = *(CMMsl::AccessoryConfig **)(v472 + 8)) != 0)
    v869 = CMMsl::AccessoryConfig::hash_value(v473);
  else
    v869 = 0;
  v474 = *((_QWORD *)this + 21);
  if (v474 && (v475 = *(_QWORD *)(v474 + 8)) != 0)
    v868 = sub_1000112DC((uint64_t)v1168, v475);
  else
    v868 = 0;
  v476 = *((_QWORD *)this + 19);
  if (v476 && (v477 = *(_QWORD *)(v476 + 8)) != 0)
    v867 = sub_1000112DC((uint64_t)v1168, v477);
  else
    v867 = 0;
  v478 = (CMMsl::GaitCycleSegment *)*((_QWORD *)this + 133);
  if (v478)
    v866 = CMMsl::GaitCycleSegment::hash_value(v478);
  else
    v866 = 0;
  v479 = (CMMsl::GaitCycleSegmentationState *)*((_QWORD *)this + 134);
  if (v479)
    v865 = CMMsl::GaitCycleSegmentationState::hash_value(v479);
  else
    v865 = 0;
  v480 = (CMMsl::CompassCalibrationAttempt *)*((_QWORD *)this + 83);
  if (v480)
    v864 = CMMsl::CompassCalibrationAttempt::hash_value(v480);
  else
    v864 = 0;
  v481 = *((_QWORD *)this + 413);
  if (v481 && (v482 = *(CMMsl::DeviceMotionCorrection **)(v481 + 8)) != 0)
    v863 = CMMsl::DeviceMotionCorrection::hash_value(v482);
  else
    v863 = 0;
  v483 = (CMMsl::VisualLocalizationAttitudeConstraints *)*((_QWORD *)this + 412);
  if (v483)
    v862 = CMMsl::VisualLocalizationAttitudeConstraints::hash_value(v483);
  else
    v862 = 0;
  v484 = *((_QWORD *)this + 25);
  if (v484 && (v485 = *(CMMsl::AccessoryConfig **)(v484 + 8)) != 0)
    v861 = CMMsl::AccessoryConfig::hash_value(v485);
  else
    v861 = 0;
  v486 = (CMMsl::FallDetectionReferee *)*((_QWORD *)this + 119);
  if (v486)
    v860 = CMMsl::FallDetectionReferee::hash_value(v486);
  else
    v860 = 0;
  v487 = (CMMsl::FallDetectionReplay *)*((_QWORD *)this + 120);
  if (v487)
    v859 = CMMsl::FallDetectionReplay::hash_value(v487);
  else
    v859 = 0;
  v488 = (CMMsl::FallDetectionStateMachine *)*((_QWORD *)this + 121);
  if (v488)
    v858 = CMMsl::FallDetectionStateMachine::hash_value(v488);
  else
    v858 = 0;
  v489 = (CMMsl::FallDetectionDetector *)*((_QWORD *)this + 117);
  if (v489)
    v857 = CMMsl::FallDetectionDetector::hash_value(v489);
  else
    v857 = 0;
  v490 = (CMMsl::FallFalsePositiveSuppressionFeatures *)*((_QWORD *)this + 124);
  if (v490)
    v856 = CMMsl::FallFalsePositiveSuppressionFeatures::hash_value(v490);
  else
    v856 = 0;
  v491 = (CMMsl::AccessoryDeviceMotionConfig *)*((_QWORD *)this + 17);
  if (v491)
    v855 = CMMsl::AccessoryDeviceMotionConfig::hash_value(v491);
  else
    v855 = 0;
  v492 = (CMMsl::RelativeDeviceMotionCorrelatedMotion *)*((_QWORD *)this + 335);
  if (v492)
    v854 = CMMsl::RelativeDeviceMotionCorrelatedMotion::hash_value(v492);
  else
    v854 = 0;
  v493 = (CMMsl::RelativeDeviceMotionComplexTransition *)*((_QWORD *)this + 334);
  if (v493)
    v853 = CMMsl::RelativeDeviceMotionComplexTransition::hash_value(v493);
  else
    v853 = 0;
  v494 = (CMMsl::DeviceMotionAlwaysOn *)*((_QWORD *)this + 94);
  if (v494)
    v852 = CMMsl::DeviceMotionAlwaysOn::hash_value(v494);
  else
    v852 = 0;
  v495 = *((_QWORD *)this + 118);
  if (v495)
  {
    v496 = *(unsigned __int8 *)(v495 + 20);
    v497 = *(_QWORD *)(v495 + 8);
    if ((v496 & 1) == 0)
      v497 = 0;
    v851 = v497 ^ (*(_BYTE *)(v495 + 16) & (v496 << 30 >> 31));
  }
  else
  {
    v851 = 0;
  }
  v498 = (CMMsl::WalkingDetectionResult *)*((_QWORD *)this + 419);
  if (v498)
    v850 = CMMsl::WalkingDetectionResult::hash_value(v498);
  else
    v850 = 0;
  v499 = *((_QWORD *)this + 23);
  if (v499)
  {
    v500 = *(int *)(v499 + 8);
    if ((*(_BYTE *)(v499 + 16) & 1) == 0)
      v500 = 0;
    v501 = *(float *)(v499 + 12);
    v502 = v501 == 0.0 || (*(_BYTE *)(v499 + 16) & 2) == 0;
    v503 = LODWORD(v501);
    if (v502)
      v503 = 0;
    v849 = v503 ^ v500;
  }
  else
  {
    v849 = 0;
  }
  v504 = (CMMsl::FallDetectionWristStateReplay *)*((_QWORD *)this + 122);
  if (v504)
    v848 = CMMsl::FallDetectionWristStateReplay::hash_value(v504);
  else
    v848 = 0;
  v505 = (CMMsl::GyroBiasEstimateError *)*((_QWORD *)this + 147);
  if (v505)
    v847 = CMMsl::GyroBiasEstimateError::hash_value(v505);
  else
    v847 = 0;
  v506 = (CMMsl::StepLikelihoodFeatures *)*((_QWORD *)this + 382);
  if (v506)
    v846 = CMMsl::StepLikelihoodFeatures::hash_value(v506);
  else
    v846 = 0;
  v507 = (CMMsl::FirstStepFeatures *)*((_QWORD *)this + 127);
  if (v507)
    v845 = CMMsl::FirstStepFeatures::hash_value(v507);
  else
    v845 = 0;
  v508 = (CMMsl::AccessoryStepDetectorDebug *)*((_QWORD *)this + 33);
  if (v508)
    v844 = CMMsl::AccessoryStepDetectorDebug::hash_value(v508);
  else
    v844 = 0;
  v509 = (CMMsl::SitStandDetectorFeatures *)*((_QWORD *)this + 358);
  if (v509)
    v843 = CMMsl::SitStandDetectorFeatures::hash_value(v509);
  else
    v843 = 0;
  v510 = *((_QWORD *)this + 361);
  if (v510)
  {
    v511 = *(_BYTE *)(v510 + 20);
    v512 = *(double *)(v510 + 8) == 0.0 || (v511 & 1) == 0;
    v513 = *(_QWORD *)(v510 + 8);
    if (v512)
      v513 = 0;
    v514 = *(int *)(v510 + 16);
    if ((v511 & 2) == 0)
      v514 = 0;
    v842 = v514 ^ v513;
  }
  else
  {
    v842 = 0;
  }
  v515 = (CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *)*((_QWORD *)this + 359);
  if (v515)
    v841 = CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::hash_value(v515);
  else
    v841 = 0;
  v516 = (CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *)*((_QWORD *)this + 360);
  if (v516)
    v840 = CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::hash_value(v516);
  else
    v840 = 0;
  v517 = *((_QWORD *)this + 366);
  if (v517)
  {
    v518 = *(int *)(v517 + 16);
    if ((*(_BYTE *)(v517 + 20) & 2) == 0)
      v518 = 0;
    v519 = *(double *)(v517 + 8) == 0.0 || (*(_BYTE *)(v517 + 20) & 1) == 0;
    v520 = *(_QWORD *)(v517 + 8);
    if (v519)
      v520 = 0;
    v839 = v520 ^ v518;
  }
  else
  {
    v839 = 0;
  }
  v521 = (CMMsl::FallDistanceReplay *)*((_QWORD *)this + 123);
  if (v521)
    v838 = CMMsl::FallDistanceReplay::hash_value(v521);
  else
    v838 = 0;
  v522 = (CMMsl::JitterBufferLevel *)*((_QWORD *)this + 182);
  if (v522)
    v837 = CMMsl::JitterBufferLevel::hash_value(v522);
  else
    v837 = 0;
  v523 = (CMMsl::PressureFiltered1HzLowPass *)*((_QWORD *)this + 320);
  if (v523)
    v836 = CMMsl::PressureFiltered1HzLowPass::hash_value(v523);
  else
    v836 = 0;
  v524 = (CMMsl::MotionActivityReplay *)*((_QWORD *)this + 249);
  if (v524)
    v835 = CMMsl::MotionActivityReplay::hash_value(v524);
  else
    v835 = 0;
  v525 = (CMMsl::FallDetectionActivityClassifierReplay *)*((_QWORD *)this + 116);
  if (v525)
    v834 = CMMsl::FallDetectionActivityClassifierReplay::hash_value(v525);
  else
    v834 = 0;
  v526 = (CMMsl::LegacyALS5CHInput *)*((_QWORD *)this + 228);
  if (v526)
    v833 = CMMsl::LegacyALS5CHInput::hash_value(v526);
  else
    v833 = 0;
  v527 = *((_QWORD *)this + 102);
  if (v527)
  {
    v528 = *(_BYTE *)(v527 + 20);
    v529 = *(double *)(v527 + 8) == 0.0 || (v528 & 1) == 0;
    v530 = *(_QWORD *)(v527 + 8);
    if (v529)
      v530 = 0;
    v531 = *(unsigned int *)(v527 + 16);
    if ((v528 & 2) == 0)
      v531 = 0;
    v832 = v531 ^ v530;
  }
  else
  {
    v832 = 0;
  }
  v532 = (CMMsl::DopplerProximityEvent *)*((_QWORD *)this + 100);
  if (v532)
    v831 = CMMsl::DopplerProximityEvent::hash_value(v532);
  else
    v831 = 0;
  v533 = (CMMsl::DopplerRawDataInput *)*((_QWORD *)this + 101);
  if (v533)
    v830 = CMMsl::DopplerRawDataInput::hash_value(v533);
  else
    v830 = 0;
  v534 = (CMMsl::DopplerDebugRecord *)*((_QWORD *)this + 99);
  if (v534)
    v829 = CMMsl::DopplerDebugRecord::hash_value(v534);
  else
    v829 = 0;
  v535 = *((_QWORD *)this + 268);
  if (v535)
  {
    v536 = *(_BYTE *)(v535 + 20);
    v537 = *(double *)(v535 + 8) == 0.0 || (v536 & 1) == 0;
    v538 = *(_QWORD *)(v535 + 8);
    if (v537)
      v538 = 0;
    v539 = *(unsigned int *)(v535 + 16);
    if ((v536 & 2) == 0)
      v539 = 0;
    v828 = v539 ^ v538;
  }
  else
  {
    v828 = 0;
  }
  v540 = (CMMsl::KappaAudioResult *)*((_QWORD *)this + 191);
  if (v540)
    v827 = CMMsl::KappaAudioResult::hash_value(v540);
  else
    v827 = 0;
  v541 = (CMMsl::KappaBaroResult *)*((_QWORD *)this + 192);
  if (v541)
    v826 = CMMsl::KappaBaroResult::hash_value(v541);
  else
    v826 = 0;
  v542 = (CMMsl::KappaGpsResult *)*((_QWORD *)this + 195);
  if (v542)
    v825 = CMMsl::KappaGpsResult::hash_value(v542);
  else
    v825 = 0;
  v543 = (CMMsl::KappaPulseResult *)*((_QWORD *)this + 206);
  if (v543)
    v824 = CMMsl::KappaPulseResult::hash_value(v543);
  else
    v824 = 0;
  v544 = (CMMsl::KappaZgResult *)*((_QWORD *)this + 221);
  if (v544)
    v823 = CMMsl::KappaZgResult::hash_value(v544);
  else
    v823 = 0;
  v545 = *((_QWORD *)this + 220);
  if (v545)
  {
    v546 = *(_BYTE *)(v545 + 16);
    v547 = *(_QWORD *)(v545 + 8);
    if ((v546 & 1) == 0)
      v547 = 0;
    v822 = v547;
  }
  else
  {
    v822 = 0;
  }
  v548 = (CMMsl::KappaPulseInertialAccel *)*((_QWORD *)this + 204);
  if (v548)
    v821 = CMMsl::KappaPulseInertialAccel::hash_value(v548);
  else
    v821 = 0;
  v549 = *((_QWORD *)this + 164);
  if (v549)
  {
    v550 = *(_BYTE *)(v549 + 12);
    v551 = *(int *)(v549 + 8);
    if ((v550 & 1) == 0)
      v551 = 0;
    v820 = v551;
  }
  else
  {
    v820 = 0;
  }
  v552 = *((_QWORD *)this + 163);
  if (v552)
  {
    v553 = *(_BYTE *)(v552 + 12);
    v554 = *(int *)(v552 + 8);
    if ((v553 & 1) == 0)
      v554 = 0;
    v819 = v554;
  }
  else
  {
    v819 = 0;
  }
  v555 = (CMMsl::KappaAirbagResult *)*((_QWORD *)this + 190);
  if (v555)
    v818 = CMMsl::KappaAirbagResult::hash_value(v555);
  else
    v818 = 0;
  v556 = (CMMsl::KappaCrashResult *)*((_QWORD *)this + 193);
  if (v556)
    v817 = CMMsl::KappaCrashResult::hash_value(v556);
  else
    v817 = 0;
  v557 = (CMMsl::KappaQuiescenceResult *)*((_QWORD *)this + 207);
  if (v557)
    v816 = CMMsl::KappaQuiescenceResult::hash_value(v557);
  else
    v816 = 0;
  v558 = (CMMsl::KappaRecoveryResult *)*((_QWORD *)this + 208);
  if (v558)
    v815 = CMMsl::KappaRecoveryResult::hash_value(v558);
  else
    v815 = 0;
  v559 = (CMMsl::KappaRolloverCrashResult *)*((_QWORD *)this + 212);
  if (v559)
    v814 = CMMsl::KappaRolloverCrashResult::hash_value(v559);
  else
    v814 = 0;
  v560 = (CMMsl::KappaMildImpactResult *)*((_QWORD *)this + 200);
  if (v560)
    v813 = CMMsl::KappaMildImpactResult::hash_value(v560);
  else
    v813 = 0;
  v561 = (CMMsl::KappaLackOfMotionResult *)*((_QWORD *)this + 198);
  if (v561)
    v812 = CMMsl::KappaLackOfMotionResult::hash_value(v561);
  else
    v812 = 0;
  v562 = (CMMsl::KappaSevereCrashResult *)*((_QWORD *)this + 213);
  if (v562)
    v811 = CMMsl::KappaSevereCrashResult::hash_value(v562);
  else
    v811 = 0;
  v563 = (CMMsl::KappaLocalAudioResult *)*((_QWORD *)this + 199);
  if (v563)
    v810 = CMMsl::KappaLocalAudioResult::hash_value(v563);
  else
    v810 = 0;
  v564 = (CMMsl::KappaRemoteAudioResult *)*((_QWORD *)this + 209);
  if (v564)
    v809 = CMMsl::KappaRemoteAudioResult::hash_value(v564);
  else
    v809 = 0;
  v565 = (CMMsl::DirectionOfTravelMetrics *)*((_QWORD *)this + 96);
  if (v565)
    v808 = CMMsl::DirectionOfTravelMetrics::hash_value(v565);
  else
    v808 = 0;
  v566 = *((_QWORD *)this + 403);
  if (v566)
  {
    v567 = *(unsigned __int8 *)(v566 + 20);
    v568 = *(_QWORD *)(v566 + 8);
    if ((v567 & 1) == 0)
      v568 = 0;
    v807 = v568 ^ (*(_BYTE *)(v566 + 16) & (v567 << 30 >> 31));
  }
  else
  {
    v807 = 0;
  }
  v569 = (CMMsl::HeadToHeadsetTransformationEstimate *)*((_QWORD *)this + 162);
  if (v569)
    v806 = CMMsl::HeadToHeadsetTransformationEstimate::hash_value(v569);
  else
    v806 = 0;
  v570 = (CMMsl::ViewObstructedMachineLearningFeatures *)*((_QWORD *)this + 404);
  if (v570)
    v805 = CMMsl::ViewObstructedMachineLearningFeatures::hash_value(v570);
  else
    v805 = 0;
  v571 = (CMMsl::ViewObstructedMachineLearningProbabilities *)*((_QWORD *)this + 405);
  if (v571)
    v804 = CMMsl::ViewObstructedMachineLearningProbabilities::hash_value(v571);
  else
    v804 = 0;
  v572 = (CMMsl::RunningArmSwingSignals *)*((_QWORD *)this + 341);
  if (v572)
    v803 = CMMsl::RunningArmSwingSignals::hash_value(v572);
  else
    v803 = 0;
  v573 = (CMMsl::RunningCentripetalAccelSignals *)*((_QWORD *)this + 342);
  if (v573)
    v802 = CMMsl::RunningCentripetalAccelSignals::hash_value(v573);
  else
    v802 = 0;
  v574 = (CMMsl::RunningRotationAxis *)*((_QWORD *)this + 345);
  if (v574)
    v801 = CMMsl::RunningRotationAxis::hash_value(v574);
  else
    v801 = 0;
  v575 = (CMMsl::RunningVerticalOscillationSignals *)*((_QWORD *)this + 350);
  if (v575)
    v800 = CMMsl::RunningVerticalOscillationSignals::hash_value(v575);
  else
    v800 = 0;
  v576 = (CMMsl::RunningVerticalOscillation *)*((_QWORD *)this + 348);
  if (v576)
    v799 = CMMsl::RunningVerticalOscillation::hash_value(v576);
  else
    v799 = 0;
  v577 = (CMMsl::KappaSpinResult *)*((_QWORD *)this + 214);
  if (v577)
    v798 = CMMsl::KappaSpinResult::hash_value(v577);
  else
    v798 = 0;
  v578 = (CMMsl::KappaPulseDeltaV *)*((_QWORD *)this + 203);
  if (v578)
    v797 = CMMsl::KappaPulseDeltaV::hash_value(v578);
  else
    v797 = 0;
  v579 = (CMMsl::RunningStrideLength *)*((_QWORD *)this + 347);
  if (v579)
    v796 = CMMsl::RunningStrideLength::hash_value(v579);
  else
    v796 = 0;
  v580 = (CMMsl::ISPPacket *)*((_QWORD *)this + 181);
  if (v580)
    v795 = CMMsl::ISPPacket::hash_value(v580);
  else
    v795 = 0;
  v581 = (CMMsl::KappaHighSpeedCrashResult *)*((_QWORD *)this + 197);
  if (v581)
    v794 = CMMsl::KappaHighSpeedCrashResult::hash_value(v581);
  else
    v794 = 0;
  v582 = (CMMsl::KappaPulseInertialHgAccel *)*((_QWORD *)this + 205);
  if (v582)
    v793 = CMMsl::KappaPulseInertialHgAccel::hash_value(v582);
  else
    v793 = 0;
  v583 = (CMMsl::HarmonicMetrics *)*((_QWORD *)this + 160);
  if (v583)
    v792 = CMMsl::HarmonicMetrics::hash_value(v583);
  else
    v792 = 0;
  v584 = (CMMsl::CalorieControllerMETsConsumed *)*((_QWORD *)this + 74);
  if (v584)
    v791 = CMMsl::CalorieControllerMETsConsumed::hash_value(v584);
  else
    v791 = 0;
  v585 = (CMMsl::PedometerPathStraightness *)*((_QWORD *)this + 292);
  if (v585)
    v790 = CMMsl::PedometerPathStraightness::hash_value(v585);
  else
    v790 = 0;
  v586 = (CMMsl::ComplexHandMotion *)*((_QWORD *)this + 86);
  if (v586)
    v789 = CMMsl::ComplexHandMotion::hash_value(v586);
  else
    v789 = 0;
  v587 = (CMMsl::ElevationGradeEstimator *)*((_QWORD *)this + 107);
  if (v587)
    v788 = CMMsl::ElevationGradeEstimator::hash_value(v587);
  else
    v788 = 0;
  v588 = (CMMsl::VO2MaxModelInput *)*((_QWORD *)this + 400);
  if (v588)
    v787 = CMMsl::VO2MaxModelInput::hash_value(v588);
  else
    v787 = 0;
  v589 = (CMMsl::ProxCalibration *)*((_QWORD *)this + 326);
  if (v589)
    v786 = CMMsl::ProxCalibration::hash_value(v589);
  else
    v786 = 0;
  v590 = (CMMsl::KappaStepsResult *)*((_QWORD *)this + 216);
  if (v590)
    v785 = CMMsl::KappaStepsResult::hash_value(v590);
  else
    v785 = 0;
  v591 = (CMMsl::WakeGestureSample *)*((_QWORD *)this + 418);
  if (v591)
    v784 = CMMsl::WakeGestureSample::hash_value(v591);
  else
    v784 = 0;
  v592 = (CMMsl::KappaGravityAutocorrelationResult *)*((_QWORD *)this + 196);
  if (v592)
    v783 = CMMsl::KappaGravityAutocorrelationResult::hash_value(v592);
  else
    v783 = 0;
  v593 = (CMMsl::RunningVerticalOscillationGradientBoostedSignals *)*((_QWORD *)this + 349);
  if (v593)
    v782 = CMMsl::RunningVerticalOscillationGradientBoostedSignals::hash_value(v593);
  else
    v782 = 0;
  v594 = (CMMsl::SubStats *)*((_QWORD *)this + 387);
  if (v594)
    v781 = CMMsl::SubStats::hash_value(v594);
  else
    v781 = 0;
  v595 = (CMMsl::PedOdomFusionExtendedModeSegment *)*((_QWORD *)this + 289);
  if (v595)
    v780 = CMMsl::PedOdomFusionExtendedModeSegment::hash_value(v595);
  else
    v780 = 0;
  v596 = *((_QWORD *)this + 237);
  if (v596)
  {
    v597 = *(_BYTE *)(v596 + 20);
    v598 = *(_QWORD *)(v596 + 8);
    if ((v597 & 1) == 0)
      v598 = 0;
    v599 = *(unsigned int *)(v596 + 16);
    if ((v597 & 2) == 0)
      v599 = 0;
    v779 = v599 ^ v598;
  }
  else
  {
    v779 = 0;
  }
  v600 = (CMMsl::PDRPedestrianClassifierState *)*((_QWORD *)this + 283);
  if (v600)
    v778 = CMMsl::PDRPedestrianClassifierState::hash_value(v600);
  else
    v778 = 0;
  v601 = (CMMsl::PDRPlacementClassifierState *)*((_QWORD *)this + 284);
  if (v601)
    v777 = CMMsl::PDRPlacementClassifierState::hash_value(v601);
  else
    v777 = 0;
  v602 = (CMMsl::PDRSpeedEstimatorState *)*((_QWORD *)this + 285);
  if (v602)
    v776 = CMMsl::PDRSpeedEstimatorState::hash_value(v602);
  else
    v776 = 0;
  v603 = (CMMsl::PDRDOTEstimatorState *)*((_QWORD *)this + 270);
  if (v603)
    v775 = CMMsl::PDRDOTEstimatorState::hash_value(v603);
  else
    v775 = 0;
  v604 = (CMMsl::PDRVelocityEstimatorState *)*((_QWORD *)this + 287);
  if (v604)
    v774 = CMMsl::PDRVelocityEstimatorState::hash_value(v604);
  else
    v774 = 0;
  v605 = (CMMsl::KMVelocityEstimatorState *)*((_QWORD *)this + 227);
  if (v605)
    v773 = CMMsl::KMVelocityEstimatorState::hash_value(v605);
  else
    v773 = 0;
  v606 = (CMMsl::VelocityEstimatorFusionState *)*((_QWORD *)this + 401);
  if (v606)
    v772 = CMMsl::VelocityEstimatorFusionState::hash_value(v606);
  else
    v772 = 0;
  v607 = *((_QWORD *)this + 279);
  if (v607)
  {
    v608 = *(_BYTE *)(v607 + 20);
    v609 = *(double *)(v607 + 8) == 0.0 || (v608 & 1) == 0;
    v610 = *(_QWORD *)(v607 + 8);
    if (v609)
      v610 = 0;
    v611 = v608 & 2;
    v612 = *(float *)(v607 + 16);
    v613 = v612 == 0.0 || v611 == 0;
    v614 = LODWORD(v612);
    if (v613)
      v614 = 0;
    v771 = v614 ^ v610;
  }
  else
  {
    v771 = 0;
  }
  v615 = (CMMsl::PDRFenceState *)*((_QWORD *)this + 280);
  if (v615)
    v770 = CMMsl::PDRFenceState::hash_value(v615);
  else
    v770 = 0;
  v616 = (CMMsl::UWBRange *)*((_QWORD *)this + 399);
  if (v616)
    v769 = CMMsl::UWBRange::hash_value(v616);
  else
    v769 = 0;
  v617 = (CMMsl::SwingDoTCandidate *)*((_QWORD *)this + 388);
  if (v617)
    v768 = CMMsl::SwingDoTCandidate::hash_value(v617);
  else
    v768 = 0;
  v618 = (CMMsl::DoTEstimatorHandSwing *)*((_QWORD *)this + 103);
  if (v618)
    v767 = CMMsl::DoTEstimatorHandSwing::hash_value(v618);
  else
    v767 = 0;
  v619 = (CMMsl::KappaTriggerClustersResult *)*((_QWORD *)this + 218);
  if (v619)
    v766 = CMMsl::KappaTriggerClustersResult::hash_value(v619);
  else
    v766 = 0;
  v620 = *((_QWORD *)this + 357);
  if (v620)
  {
    v621 = *(_BYTE *)(v620 + 24);
    v624 = v620 + 8;
    v623 = *(_QWORD *)(v620 + 8);
    v622 = *(_QWORD *)(v624 + 8);
    if (v623)
    {
      v625 = *(_BYTE *)(v623 + 12);
      v623 = *(unsigned int *)(v623 + 8);
      if ((v625 & 1) == 0)
        v623 = 0;
    }
    if ((v621 & 1) == 0)
      v622 = 0;
    v765 = v623 ^ v622;
  }
  else
  {
    v765 = 0;
  }
  v626 = (CMMsl::PDRFeatures *)*((_QWORD *)this + 278);
  if (v626)
    v764 = CMMsl::PDRFeatures::hash_value(v626);
  else
    v764 = 0;
  v627 = (CMMsl::PDRDOTEstimatorStateBody *)*((_QWORD *)this + 272);
  if (v627)
    v763 = CMMsl::PDRDOTEstimatorStateBody::hash_value(v627);
  else
    v763 = 0;
  v628 = (CMMsl::PDRDOTEstimatorStateArmSwing *)*((_QWORD *)this + 271);
  if (v628)
    v762 = CMMsl::PDRDOTEstimatorStateArmSwing::hash_value(v628);
  else
    v762 = 0;
  v629 = (CMMsl::PDRDOTEstimatorStateHeading *)*((_QWORD *)this + 275);
  if (v629)
    v761 = CMMsl::PDRDOTEstimatorStateHeading::hash_value(v629);
  else
    v761 = 0;
  v630 = (CMMsl::AccessoryActivityAlseepConfidenceEpoch *)*((_QWORD *)this + 13);
  if (v630)
    v760 = CMMsl::AccessoryActivityAlseepConfidenceEpoch::hash_value(v630);
  else
    v760 = 0;
  v631 = (CMMsl::PDRSpeedEstimatorStateDebug *)*((_QWORD *)this + 286);
  if (v631)
    v759 = CMMsl::PDRSpeedEstimatorStateDebug::hash_value(v631);
  else
    v759 = 0;
  v632 = *((_QWORD *)this + 309);
  if (v632)
  {
    v633 = *(_BYTE *)(v632 + 24);
    v634 = *(double *)(v632 + 8);
    v635 = *(double *)(v632 + 16) == 0.0 || (v633 & 2) == 0;
    v636 = *(_QWORD *)(v632 + 16);
    if (v635)
      v636 = 0;
    v637 = v633 & 1;
    v638 = v634 == 0.0 || v637 == 0;
    v639 = v634;
    if (v638)
      v639 = 0.0;
    v758 = *(_QWORD *)&v639 ^ v636;
  }
  else
  {
    v758 = 0;
  }
  v640 = (CMMsl::PrecisionFindingState *)*((_QWORD *)this + 312);
  if (v640)
    v757 = CMMsl::PrecisionFindingState::hash_value(v640);
  else
    v757 = 0;
  v641 = (CMMsl::KappaRoadsResult *)*((_QWORD *)this + 211);
  if (v641)
    v756 = CMMsl::KappaRoadsResult::hash_value(v641);
  else
    v756 = 0;
  v642 = (CMMsl::PrecisionFindingVelocityEstimate *)*((_QWORD *)this + 313);
  if (v642)
    v755 = CMMsl::PrecisionFindingVelocityEstimate::hash_value(v642);
  else
    v755 = 0;
  v643 = (CMMsl::PrecisionFindingRangeFilter *)*((_QWORD *)this + 310);
  if (v643)
    v754 = CMMsl::PrecisionFindingRangeFilter::hash_value(v643);
  else
    v754 = 0;
  v644 = (CMMsl::PDRDOTMeasurementSelectorState *)*((_QWORD *)this + 277);
  if (v644)
    v753 = CMMsl::PDRDOTMeasurementSelectorState::hash_value(v644);
  else
    v753 = 0;
  v645 = *((_QWORD *)this + 72);
  if (v645)
  {
    v646 = *(_BYTE *)(v645 + 20);
    v647 = *(_QWORD *)(v645 + 8);
    if ((v646 & 1) == 0)
      v647 = 0;
    v648 = *(unsigned int *)(v645 + 16);
    if ((v646 & 2) == 0)
      v648 = 0;
    v752 = v648 ^ v647;
  }
  else
  {
    v752 = 0;
  }
  v649 = (CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *)*((_QWORD *)this + 276);
  if (v649)
    v751 = CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::hash_value(v649);
  else
    v751 = 0;
  v650 = *((_QWORD *)this + 293);
  if (v650)
  {
    v651 = *(_BYTE *)(v650 + 20);
    v652 = *(double *)(v650 + 8) == 0.0 || (v651 & 1) == 0;
    v653 = *(_QWORD *)(v650 + 8);
    if (v652)
      v653 = 0;
    v654 = *(unsigned int *)(v650 + 16);
    if ((v651 & 2) == 0)
      v654 = 0;
    v750 = v654 ^ v653;
  }
  else
  {
    v750 = 0;
  }
  v655 = (CMMsl::MagnetometerCalibratorFilterParameters *)*((_QWORD *)this + 241);
  if (v655)
    v749 = CMMsl::MagnetometerCalibratorFilterParameters::hash_value(v655);
  else
    v749 = 0;
  v656 = (CMMsl::KappaActivityPhone *)*((_QWORD *)this + 188);
  if (v656)
    v748 = CMMsl::KappaActivityPhone::hash_value(v656);
  else
    v748 = 0;
  v657 = (CMMsl::KappaActivityWatch *)*((_QWORD *)this + 189);
  if (v657)
    v747 = CMMsl::KappaActivityWatch::hash_value(v657);
  else
    v747 = 0;
  v658 = *((_QWORD *)this + 311);
  if (v658)
  {
    v659 = *(unsigned __int8 *)(v658 + 20);
    v660 = *(double *)(v658 + 8) == 0.0 || (v659 & 1) == 0;
    v661 = *(_QWORD *)(v658 + 8);
    if (v660)
      v661 = 0;
    v746 = v661 ^ (*(_BYTE *)(v658 + 16) & (v659 << 30 >> 31));
  }
  else
  {
    v746 = 0;
  }
  v662 = (CMMsl::PDRDOTEstimatorStateDebug *)*((_QWORD *)this + 274);
  if (v662)
    v745 = CMMsl::PDRDOTEstimatorStateDebug::hash_value(v662);
  else
    v745 = 0;
  v663 = (CMMsl::PDRDOTEstimatorStateBodyDebug *)*((_QWORD *)this + 273);
  if (v663)
    v744 = CMMsl::PDRDOTEstimatorStateBodyDebug::hash_value(v663);
  else
    v744 = 0;
  v664 = (CMMsl::KappaPeakDetectorMapResult *)*((_QWORD *)this + 202);
  if (v664)
    v743 = CMMsl::KappaPeakDetectorMapResult::hash_value(v664);
  else
    v743 = 0;
  v665 = (CMMsl::KappaPeakDetectorMapMagTimestamps *)*((_QWORD *)this + 201);
  if (v665)
    v742 = CMMsl::KappaPeakDetectorMapMagTimestamps::hash_value(v665);
  else
    v742 = 0;
  v666 = (CMMsl::PrecisionFindingVerticalState *)*((_QWORD *)this + 314);
  if (v666)
    v741 = CMMsl::PrecisionFindingVerticalState::hash_value(v666);
  else
    v741 = 0;
  v667 = (CMMsl::Altimeter *)*((_QWORD *)this + 39);
  if (v667)
    v740 = CMMsl::Altimeter::hash_value(v667);
  else
    v740 = 0;
  v668 = (CMMsl::FaceDownDetection *)*((_QWORD *)this + 113);
  if (v668)
    v739 = CMMsl::FaceDownDetection::hash_value(v668);
  else
    v739 = 0;
  v669 = (CMMsl::PencilFusionDMYawAlignmentUpdate *)*((_QWORD *)this + 295);
  if (v669)
    v738 = CMMsl::PencilFusionDMYawAlignmentUpdate::hash_value(v669);
  else
    v738 = 0;
  v670 = (CMMsl::PencilFusionRingSensorTrustModelUpdate *)*((_QWORD *)this + 298);
  if (v670)
    v737 = CMMsl::PencilFusionRingSensorTrustModelUpdate::hash_value(v670);
  else
    v737 = 0;
  v671 = (CMMsl::AccessorySleepStateUpdate *)*((_QWORD *)this + 32);
  if (v671)
    v736 = CMMsl::AccessorySleepStateUpdate::hash_value(v671);
  else
    v736 = 0;
  v672 = (CMMsl::AccessorySleepStateConfidenceEpoch *)*((_QWORD *)this + 31);
  if (v672)
    v735 = CMMsl::AccessorySleepStateConfidenceEpoch::hash_value(v672);
  else
    v735 = 0;
  v673 = sub_100135EAC((uint64_t)v1168, (uint64_t *)this + 352);
  v674 = *((_QWORD *)this + 351);
  v1136 = v673;
  if (v674)
  {
    v675 = *(_BYTE *)(v674 + 20);
    v676 = *(_QWORD *)(v674 + 8);
    if ((v675 & 1) == 0)
      v676 = 0;
    v677 = *(int *)(v674 + 16);
    if ((v675 & 2) == 0)
      v677 = 0;
    v734 = v677 ^ v676;
  }
  else
  {
    v734 = 0;
  }
  v678 = (CMMsl::PTSConsumedGNSS *)*((_QWORD *)this + 328);
  if (v678)
    v733 = CMMsl::PTSConsumedGNSS::hash_value(v678);
  else
    v733 = 0;
  v679 = (CMMsl::PTSForwardPropagation *)*((_QWORD *)this + 329);
  if (v679)
    v732 = CMMsl::PTSForwardPropagation::hash_value(v679);
  else
    v732 = 0;
  v680 = *((_QWORD *)this + 331);
  if (v680 && (v681 = *(CMMsl::PTSForwardPropagation **)(v680 + 8)) != 0)
    v731 = CMMsl::PTSForwardPropagation::hash_value(v681);
  else
    v731 = 0;
  v682 = (CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *)*((_QWORD *)this + 161);
  if (v682)
    v730 = CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::hash_value(v682);
  else
    v730 = 0;
  v683 = *((_QWORD *)this + 330);
  if (v683 && (v684 = *(CMMsl::PTSForwardPropagation **)(v683 + 8)) != 0)
    v729 = CMMsl::PTSForwardPropagation::hash_value(v684);
  else
    v729 = 0;
  v685 = (CMMsl::AnchorMotionCorrespondence *)*((_QWORD *)this + 42);
  if (v685)
    v728 = CMMsl::AnchorMotionCorrespondence::hash_value(v685);
  else
    v728 = 0;
  v686 = *((_QWORD *)this + 185);
  if (v686)
  {
    v687 = *(_BYTE *)(v686 + 20);
    v688 = *(_QWORD *)(v686 + 8);
    if ((v687 & 1) == 0)
      v688 = 0;
    v689 = *(unsigned int *)(v686 + 16);
    if ((v687 & 2) == 0)
      v689 = 0;
    v727 = v689 ^ v688;
  }
  else
  {
    v727 = 0;
  }
  v690 = (CMMsl::KData2 *)*((_QWORD *)this + 186);
  if (v690)
    v691 = CMMsl::KData2::hash_value(v690);
  else
    v691 = 0;
  v692 = (CMMsl::KData3 *)*((_QWORD *)this + 187);
  if (v692)
    v693 = CMMsl::KData3::hash_value(v692);
  else
    v693 = 0;
  v694 = (CMMsl::SafetyRemoteSample *)*((_QWORD *)this + 353);
  if (v694)
    v695 = CMMsl::SafetyRemoteSample::hash_value(v694);
  else
    v695 = 0;
  v696 = (CMMsl::SafetyTrustedAudioResult *)*((_QWORD *)this + 354);
  if (v696)
    v697 = CMMsl::SafetyTrustedAudioResult::hash_value(v696);
  else
    v697 = 0;
  v698 = *((_QWORD *)this + 368);
  if (v698 && (v699 = *(CMMsl::DeviceMotion **)(v698 + 8)) != 0)
    v700 = CMMsl::DeviceMotion::hash_value(v699);
  else
    v700 = 0;
  v701 = *((_QWORD *)this + 369);
  if (v701 && (v702 = *(CMMsl::MotionStateUpdate **)(v701 + 8)) != 0)
    v703 = CMMsl::MotionStateUpdate::hash_value(v702);
  else
    v703 = 0;
  v704 = *((_QWORD *)this + 179);
  if (v704)
  {
    v705 = *(_QWORD *)(v704 + 8);
    if (v705)
      v705 = CMMsl::AccessoryAccel::hash_value((CMMsl::AccessoryAccel *)v705);
  }
  else
  {
    v705 = 0;
  }
  v706 = v1150 ^ *(_QWORD *)&v1135 ^ v719 ^ v1149 ^ v718 ^ v726 ^ v717 ^ v725 ^ v716 ^ v715 ^ v714 ^ v713 ^ v712 ^ v711 ^ v724 ^ v723 ^ v722 ^ v721 ^ v720 ^ v1134 ^ v1133 ^ v1132 ^ v1148 ^ v1131 ^ v42 ^ v1147 ^ v1130 ^ v1129 ^ v1128 ^ v1127 ^ v1126 ^ v1125 ^ v1124 ^ v1146 ^ v1123 ^ v1122 ^ v1121 ^ v1120 ^ v1119 ^ v1118 ^ v1117 ^ v1116 ^ v1115 ^ v1145 ^ v1114 ^ v1113 ^ v1112 ^ v1111 ^ v1110 ^ v1109 ^ v1108 ^ v1107 ^ v1106 ^ v1105 ^ v1104 ^ v1103 ^ v1102 ^ v1101 ^ v1100 ^ v1099 ^ v1098 ^ v1097 ^ v1096 ^ v1095 ^ v1094 ^ v1093 ^ v1092 ^ v1091 ^ v1090 ^ v1089 ^ v1088 ^ v1087 ^ v1086 ^ v1085 ^ v1084 ^ v1083 ^ v1082 ^ v1081 ^ v1080 ^ v1079 ^ v1078 ^ v1077 ^ v1076 ^ v1075 ^ v1074 ^ v1073 ^ v1072 ^ v1071 ^ v141 ^ v1144 ^ v1070 ^ v1069 ^ v1068 ^ v1067 ^ v1066 ^ v1065 ^ v1064;
  v707 = v706 ^ v1063 ^ v1062 ^ v1061 ^ v1060 ^ v1059 ^ v1058 ^ v1057 ^ v1056 ^ v1055 ^ v1054 ^ v1053 ^ v1052 ^ v1051 ^ v1050 ^ v1049 ^ v1048 ^ v1047 ^ v1046 ^ v1045 ^ v1044 ^ v1043 ^ v1042 ^ v1041 ^ v1040 ^ v1039 ^ v1038 ^ v1037 ^ v1036 ^ v1035 ^ v1034 ^ v1033 ^ v1032 ^ v1031 ^ v1030 ^ v1029 ^ v1143 ^ v1028 ^ v1027 ^ v1026 ^ v1025 ^ v1024 ^ v1023 ^ v1022 ^ v1021 ^ v1020 ^ v1019 ^ v1018 ^ v1017 ^ v1016 ^ v1142 ^ v1015 ^ v1014 ^ v1013 ^ v1012 ^ v1011 ^ v1010 ^ v1009 ^ v1008 ^ v1007 ^ v1006 ^ v1005 ^ v1004 ^ v1003 ^ v1002 ^ v1001 ^ v1000 ^ v999 ^ v998 ^ v997 ^ v996 ^ v995 ^ v994 ^ v993 ^ v992 ^ v991 ^ v990 ^ v989 ^ v988 ^ v987 ^ v986 ^ v985 ^ v984 ^ v983 ^ v1141 ^ v982 ^ v981 ^ v980 ^ v979 ^ v978 ^ v977 ^ v976 ^ v975 ^ v974 ^ v973 ^ v972 ^ v971 ^ v970 ^ v969 ^ v968 ^ v967 ^ v966;
  v708 = v707 ^ v965 ^ v964 ^ v963 ^ v962 ^ v961 ^ v960 ^ v959 ^ v958 ^ v957 ^ v956 ^ v955 ^ v954 ^ v953 ^ v952 ^ v951 ^ v950 ^ v949 ^ v948 ^ v947 ^ v1140 ^ v946 ^ v1139 ^ v945 ^ v1138 ^ v944 ^ v943 ^ v942 ^ v941 ^ v940 ^ v939 ^ v938 ^ v937 ^ v936 ^ v935 ^ v934 ^ v933 ^ v932 ^ v931 ^ v930 ^ v929 ^ v928 ^ v927 ^ v926 ^ v925 ^ v924 ^ v923 ^ v922 ^ v921 ^ v920 ^ v919 ^ v918 ^ v917 ^ v916 ^ v915 ^ v914 ^ v913 ^ v912 ^ v911 ^ v910 ^ v909 ^ v908 ^ v907 ^ v906 ^ v905 ^ v904 ^ v903 ^ v902 ^ v901 ^ v900 ^ v899 ^ v898 ^ v897 ^ v896 ^ v895 ^ v894 ^ v893 ^ v892 ^ v891 ^ v890 ^ v889 ^ v888 ^ v887 ^ v886 ^ v885 ^ v884 ^ v883 ^ v882 ^ v881 ^ v880 ^ v879 ^ v878 ^ v877 ^ v876 ^ v1137 ^ v875 ^ v874 ^ v873 ^ v872 ^ v871 ^ v870 ^ v471 ^ v869 ^ v868 ^ v867 ^ v866 ^ v865 ^ v864 ^ v863 ^ v862 ^ v861 ^ v860 ^ v859 ^ v858;
  v709 = v708 ^ v857 ^ v856 ^ v855 ^ v854 ^ v853 ^ v852 ^ v851 ^ v850 ^ v849 ^ v848 ^ v847 ^ v846 ^ v845 ^ v844 ^ v843 ^ v842 ^ v841 ^ v840 ^ v839 ^ v838 ^ v837 ^ v836 ^ v835 ^ v834 ^ v833 ^ v832 ^ v831 ^ v830 ^ v829 ^ v828 ^ v827 ^ v826 ^ v825 ^ v824 ^ v823 ^ v822 ^ v821 ^ v820 ^ v819 ^ v818 ^ v817 ^ v816 ^ v815 ^ v814 ^ v813 ^ v812 ^ v811 ^ v810 ^ v809 ^ v808 ^ v807 ^ v806 ^ v805 ^ v804 ^ v803 ^ v802 ^ v801 ^ v800 ^ v799 ^ v798 ^ v797 ^ v796 ^ v795 ^ v794 ^ v793 ^ v792 ^ v791 ^ v790 ^ v789 ^ v788 ^ v787 ^ v786 ^ v785 ^ v784 ^ v783 ^ v782 ^ v781 ^ v780 ^ v779 ^ v778 ^ v777 ^ v776 ^ v775 ^ v774 ^ v773 ^ v772 ^ v771 ^ v770 ^ v769 ^ v768 ^ v767 ^ v766 ^ v765 ^ v764 ^ v763 ^ v762 ^ v761 ^ v760 ^ v759 ^ v758 ^ v757 ^ v756 ^ v755 ^ v754 ^ v753 ^ v752 ^ v751 ^ v750 ^ v749 ^ v748;
  return v709 ^ v747 ^ v746 ^ v745 ^ v744 ^ v743 ^ v742 ^ v741 ^ v740 ^ v739 ^ v738 ^ v737 ^ v736 ^ v735 ^ v1136 ^ v734 ^ v733 ^ v732 ^ v731 ^ v730 ^ v729 ^ v728 ^ v727 ^ v691 ^ v693 ^ v695 ^ v697 ^ v700 ^ v703 ^ v705;
}

unint64_t sub_1001359D4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = *a2;
  if (!*a2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (v3)
    v3 = CMMsl::DeviceMotionCorrection::hash_value((CMMsl::DeviceMotionCorrection *)v3);
  if ((*(_BYTE *)(v2 + 20) & 1) != 0)
    v4 = *(int *)(v2 + 16);
  else
    v4 = 0;
  return v4 ^ v3;
}

unint64_t sub_100135A1C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *a2;
  if (!*a2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (v3)
    v3 = CMMsl::DeviceMotionCorrection::hash_value((CMMsl::DeviceMotionCorrection *)v3);
  return v3 ^ ((*(unsigned __int8 *)(v2 + 20) << 31 >> 31) & *(_BYTE *)(v2 + 16));
}

uint64_t sub_100135A68(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  CMMsl::DeviceMotion **v3;
  CMMsl::DeviceMotion **v4;
  uint64_t v5;
  CMMsl::DeviceMotion *v6;

  v2 = *a2;
  if (!*a2)
    return 0;
  v3 = *(CMMsl::DeviceMotion ***)(v2 + 8);
  v4 = *(CMMsl::DeviceMotion ***)(v2 + 16);
  if (v3 == v4)
    return 0;
  v5 = 0;
  do
  {
    v6 = *v3++;
    v5 ^= CMMsl::DeviceMotion::hash_value(v6);
  }
  while (v3 != v4);
  return v5;
}

uint64_t sub_100135AC0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  CMMsl::VO2MaxInput **v3;
  CMMsl::VO2MaxInput **v4;
  uint64_t v5;
  CMMsl::VO2MaxInput *v6;

  v2 = *a2;
  if (!*a2)
    return 0;
  v3 = *(CMMsl::VO2MaxInput ***)(v2 + 8);
  v4 = *(CMMsl::VO2MaxInput ***)(v2 + 16);
  if (v3 == v4)
    return 0;
  v5 = 0;
  do
  {
    v6 = *v3++;
    v5 ^= CMMsl::VO2MaxInput::hash_value(v6);
  }
  while (v3 != v4);
  return v5;
}

uint64_t sub_100135B18(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  CMMsl::Accel **v3;
  CMMsl::Accel **v4;
  uint64_t v5;
  CMMsl::Accel *v6;

  v2 = *a2;
  if (!*a2)
    return 0;
  v3 = *(CMMsl::Accel ***)(v2 + 8);
  v4 = *(CMMsl::Accel ***)(v2 + 16);
  if (v3 == v4)
    return 0;
  v5 = 0;
  do
  {
    v6 = *v3++;
    v5 ^= CMMsl::Accel::hash_value(v6);
  }
  while (v3 != v4);
  return v5;
}

uint64_t sub_100135B70(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  CMMsl::WifiScanEntry **v3;
  CMMsl::WifiScanEntry **v4;
  uint64_t v5;
  CMMsl::WifiScanEntry *v6;

  v2 = *a2;
  if (!*a2)
    return 0;
  v3 = *(CMMsl::WifiScanEntry ***)(v2 + 8);
  v4 = *(CMMsl::WifiScanEntry ***)(v2 + 16);
  if (v3 == v4)
    return 0;
  v5 = 0;
  do
  {
    v6 = *v3++;
    v5 ^= CMMsl::WifiScanEntry::hash_value(v6);
  }
  while (v3 != v4);
  return v5;
}

uint64_t sub_100135BC8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;

  v2 = *a2;
  if (!*a2)
    return 0;
  v3 = sub_1000640C0((uint64_t)&v6, (uint64_t **)(v2 + 8));
  if ((*(_BYTE *)(v2 + 36) & 1) != 0)
    v4 = *(unsigned int *)(v2 + 32);
  else
    v4 = 0;
  return v4 ^ v3;
}

uint64_t sub_100135C18(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  CMMsl::GyroCalibrationSampleNonlinear **v3;
  CMMsl::GyroCalibrationSampleNonlinear **v4;
  uint64_t v5;
  CMMsl::GyroCalibrationSampleNonlinear *v6;

  v2 = *a2;
  if (!*a2)
    return 0;
  v3 = *(CMMsl::GyroCalibrationSampleNonlinear ***)(v2 + 8);
  v4 = *(CMMsl::GyroCalibrationSampleNonlinear ***)(v2 + 16);
  if (v3 == v4)
    return 0;
  v5 = 0;
  do
  {
    v6 = *v3++;
    v5 ^= CMMsl::GyroCalibrationSampleNonlinear::hash_value(v6);
  }
  while (v3 != v4);
  return v5;
}

uint64_t sub_100135C70(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  CMMsl::GyroCalibrationSample **v3;
  CMMsl::GyroCalibrationSample **v4;
  uint64_t v5;
  CMMsl::GyroCalibrationSample *v6;

  v2 = *a2;
  if (!*a2)
    return 0;
  v3 = *(CMMsl::GyroCalibrationSample ***)(v2 + 8);
  v4 = *(CMMsl::GyroCalibrationSample ***)(v2 + 16);
  if (v3 == v4)
    return 0;
  v5 = 0;
  do
  {
    v6 = *v3++;
    v5 ^= CMMsl::GyroCalibrationSample::hash_value(v6);
  }
  while (v3 != v4);
  return v5;
}

uint64_t sub_100135CC8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  CMMsl::SkeletonJoint **v3;
  CMMsl::SkeletonJoint **v4;
  uint64_t v5;
  CMMsl::SkeletonJoint *v6;

  v2 = *a2;
  if (!*a2)
    return 0;
  v3 = *(CMMsl::SkeletonJoint ***)(v2 + 8);
  v4 = *(CMMsl::SkeletonJoint ***)(v2 + 16);
  if (v3 == v4)
    return 0;
  v5 = 0;
  do
  {
    v6 = *v3++;
    v5 ^= CMMsl::SkeletonJoint::hash_value(v6);
  }
  while (v3 != v4);
  return v5;
}

uint64_t sub_100135D20(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  CMMsl::WorkoutPriorInformation **v3;
  CMMsl::WorkoutPriorInformation **v4;
  uint64_t v5;
  CMMsl::WorkoutPriorInformation *v6;

  v2 = *a2;
  if (!*a2)
    return 0;
  v3 = *(CMMsl::WorkoutPriorInformation ***)(v2 + 8);
  v4 = *(CMMsl::WorkoutPriorInformation ***)(v2 + 16);
  if (v3 == v4)
    return 0;
  v5 = 0;
  do
  {
    v6 = *v3++;
    v5 ^= CMMsl::WorkoutPriorInformation::hash_value(v6);
  }
  while (v3 != v4);
  return v5;
}

unint64_t sub_100135D78(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = *a2;
  if (!*a2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (v3)
    v3 = CMMsl::MotionGPSLocation::hash_value((CMMsl::MotionGPSLocation *)v3);
  if ((*(_BYTE *)(v2 + 20) & 1) != 0)
    v4 = *(unsigned int *)(v2 + 16);
  else
    v4 = 0;
  return v4 ^ v3;
}

uint64_t sub_100135DC0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  CMMsl::PostureJoint **v3;
  CMMsl::PostureJoint **v4;
  uint64_t v5;
  CMMsl::PostureJoint *v6;

  v2 = *a2;
  if (!*a2)
    return 0;
  v3 = *(CMMsl::PostureJoint ***)(v2 + 8);
  v4 = *(CMMsl::PostureJoint ***)(v2 + 16);
  if (v3 == v4)
    return 0;
  v5 = 0;
  do
  {
    v6 = *v3++;
    v5 ^= CMMsl::PostureJoint::hash_value(v6);
  }
  while (v3 != v4);
  return v5;
}

uint64_t sub_100135E18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  if (!*(_QWORD *)a2)
    return 0;
  v2 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  if (!v2)
    return 0;
  v3 = *(unsigned __int8 *)(v2 + 20);
  v4 = *(double *)(v2 + 8) == 0.0 || (v3 & 1) == 0;
  v5 = *(_QWORD *)(v2 + 8);
  if (v4)
    v5 = 0;
  return v5 ^ (*(_BYTE *)(v2 + 16) & (v3 << 30 >> 31));
}

unint64_t sub_100135E64(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = *a2;
  if (!*a2)
    return 0;
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
    v3 = CMMsl::Accel::hash_value((CMMsl::Accel *)v3);
  if ((*(_BYTE *)(v2 + 24) & 1) != 0)
    v4 = *(_QWORD *)(v2 + 8);
  else
    v4 = 0;
  return v4 ^ v3;
}

uint64_t sub_100135EAC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a2;
  if (!*a2)
    return 0;
  v3 = *(_BYTE *)(v2 + 24);
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 1) == 0)
    v4 = 0;
  v7 = v2 + 16;
  v5 = *(unsigned int *)(v2 + 16);
  v6 = *(unsigned int *)(v7 + 4);
  if ((v3 & 4) == 0)
    v6 = 0;
  if ((v3 & 2) == 0)
    v5 = 0;
  return v6 ^ v4 ^ v5;
}

uint64_t CMMsl::Item::makeGyroBiasCorrection(uint64_t this)
{
  if (!*(_QWORD *)(this + 1168))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeGyroBiasConstraints(uint64_t this)
{
  if (!*(_QWORD *)(this + 1160))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeGravityCorrection(uint64_t this)
{
  if (!*(_QWORD *)(this + 1136))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeGravityConstraints(uint64_t this)
{
  if (!*(_QWORD *)(this + 1128))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeCompassCorrection(uint64_t this)
{
  if (!*(_QWORD *)(this + 680))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeCompassConstraints(uint64_t this)
{
  if (!*(_QWORD *)(this + 672))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeCourseCorrection(uint64_t this)
{
  if (!*(_QWORD *)(this + 728))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeCourseConstraints(uint64_t this)
{
  if (!*(_QWORD *)(this + 720))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeIntersiloNSCodingData(uint64_t this)
{
  if (!*(_QWORD *)(this + 1440))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeDeviceMotionCovariance(uint64_t this)
{
  if (!*(_QWORD *)(this + 760))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAccessoryAccel(uint64_t this)
{
  if (!*(_QWORD *)(this + 88))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAccessoryGyro(uint64_t this)
{
  if (!*(_QWORD *)(this + 144))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAccessoryProx(uint64_t this)
{
  if (!*(_QWORD *)(this + 216))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeWorkoutRecorderAccel(uint64_t this)
{
  if (!*(_QWORD *)(this + 3448))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeWorkoutRecorderBodyMetrics(uint64_t this)
{
  if (!*(_QWORD *)(this + 3472))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeWorkoutRecorderElevation(uint64_t this)
{
  if (!*(_QWORD *)(this + 3488))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeWorkoutRecorderHeartRate(uint64_t this)
{
  if (!*(_QWORD *)(this + 3520))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeWorkoutRecorderRotationRate(uint64_t this)
{
  if (!*(_QWORD *)(this + 3552))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeWorkoutRecorderOdometer(uint64_t this)
{
  if (!*(_QWORD *)(this + 3536))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeWorkoutRecorderWorkoutEvent(uint64_t this)
{
  if (!*(_QWORD *)(this + 3584))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeVo2MaxInput(uint64_t this)
{
  if (!*(_QWORD *)(this + 3320))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeBraveHeartDeviceMotion(uint64_t this)
{
  if (!*(_QWORD *)(this + 544))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeBraveHeartNatalieData(uint64_t this)
{
  if (!*(_QWORD *)(this + 552))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeBraveHeartVO2MaxInput(uint64_t this)
{
  if (!*(_QWORD *)(this + 560))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeBraveHeartAccel(uint64_t this)
{
  if (!*(_QWORD *)(this + 536))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeBraveHeartWorkoutEvent(uint64_t this)
{
  if (!*(_QWORD *)(this + 568))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeWorkoutRecorderHealthKitInfo(uint64_t this)
{
  if (!*(_QWORD *)(this + 3512))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePearlAttitude(uint64_t this)
{
  if (!*(_QWORD *)(this + 2304))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeRotationRate(uint64_t this)
{
  if (!*(_QWORD *)(this + 2720))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeWorkoutRecorderWatchOrientationSettings(uint64_t this)
{
  if (!*(_QWORD *)(this + 3568))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeWatchOnWristState(uint64_t this)
{
  if (!*(_QWORD *)(this + 3400))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeCatherineHealthKitData(uint64_t this)
{
  if (!*(_QWORD *)(this + 608))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeWifiScanResults(uint64_t this)
{
  if (!*(_QWORD *)(this + 3416))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeInEarTransitionEntry(uint64_t this)
{
  if (!*(_QWORD *)(this + 1408))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeInEarSession(uint64_t this)
{
  if (!*(_QWORD *)(this + 1392))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeInEarBaseline(uint64_t this)
{
  if (!*(_QWORD *)(this + 1352))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAccessoryProxSensorDrop(uint64_t this)
{
  if (!*(_QWORD *)(this + 224))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAccessoryProxTempComp(uint64_t this)
{
  if (!*(_QWORD *)(this + 232))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAccessoryWake(uint64_t this)
{
  if (!*(_QWORD *)(this + 272))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeFacePose(uint64_t this)
{
  if (!*(_QWORD *)(this + 912))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeWorkoutRecorderWifiScanResults(uint64_t this)
{
  if (!*(_QWORD *)(this + 3576))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeWorkoutRecorderPressure(uint64_t this)
{
  if (!*(_QWORD *)(this + 3544))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeInEarAdditionalState(uint64_t this)
{
  if (!*(_QWORD *)(this + 1344))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAccessoryDeviceMotion(uint64_t this)
{
  if (!*(_QWORD *)(this + 128))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeVisionCompassBias(uint64_t this)
{
  if (!*(_QWORD *)(this + 3280))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeArSessionState(uint64_t this)
{
  if (!*(_QWORD *)(this + 352))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeVioEstimation(uint64_t this)
{
  if (!*(_QWORD *)(this + 3256))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeLslHeadingEstimation(uint64_t this)
{
  if (!*(_QWORD *)(this + 1880))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeFallSnippet(uint64_t this)
{
  if (!*(_QWORD *)(this + 1000))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAccelerometerPace(uint64_t this)
{
  if (!*(_QWORD *)(this + 80))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeMovementStats(uint64_t this)
{
  if (!*(_QWORD *)(this + 2072))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeStepCountEntry(uint64_t this)
{
  if (!*(_QWORD *)(this + 3032))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeMobilityBoutMetrics(uint64_t this)
{
  if (!*(_QWORD *)(this + 1960))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeCoprocessorReplyGaitMetrics(uint64_t this)
{
  if (!*(_QWORD *)(this + 712))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeVioPose(uint64_t this)
{
  if (!*(_QWORD *)(this + 3264))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeSignalEnvironment(uint64_t this)
{
  if (!*(_QWORD *)(this + 2848))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeVioReplayPose(uint64_t this)
{
  if (!*(_QWORD *)(this + 3272))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeVisualStateMeasurement(uint64_t this)
{
  if (!*(_QWORD *)(this + 3312))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeKappaTriggerDebug(uint64_t this)
{
  if (!*(_QWORD *)(this + 1752))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeKappaDirectionOfTravel(uint64_t this)
{
  if (!*(_QWORD *)(this + 1552))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeHgAccel(uint64_t this)
{
  if (!*(_QWORD *)(this + 1328))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeKappaSteps(uint64_t this)
{
  if (!*(_QWORD *)(this + 1720))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeUserInteraction(uint64_t this)
{
  if (!*(_QWORD *)(this + 3176))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeKappaRoads(uint64_t this)
{
  if (!*(_QWORD *)(this + 1680))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeUserStudyEvent(uint64_t this)
{
  if (!*(_QWORD *)(this + 3184))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAuxiliaryDeviceMotion(uint64_t this)
{
  if (!*(_QWORD *)(this + 376))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeTempestPoCAuxiliaryDeviceMotion(uint64_t this)
{
  if (!*(_QWORD *)(this + 3128))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAudioAccessoryDeviceMotion(uint64_t this)
{
  if (!*(_QWORD *)(this + 368))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeTempestPoCListenerOrientation(uint64_t this)
{
  if (!*(_QWORD *)(this + 3136))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeWorkoutRecorderAccel800(uint64_t this)
{
  if (!*(_QWORD *)(this + 3456))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAlsData(uint64_t this)
{
  if (!*(_QWORD *)(this + 296))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeWorkoutRecorderALSData(uint64_t this)
{
  if (!*(_QWORD *)(this + 3440))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeVisualLocalization(uint64_t this)
{
  if (!*(_QWORD *)(this + 3288))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeGyroFactoryCalibrationData(uint64_t this)
{
  if (!*(_QWORD *)(this + 1240))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeSpl(uint64_t this)
{
  if (!*(_QWORD *)(this + 2936))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeFrequencyResponse(uint64_t this)
{
  if (!*(_QWORD *)(this + 1048))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeEmergencyState(uint64_t this)
{
  if (!*(_QWORD *)(this + 872))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAccel800(uint64_t this)
{
  if (!*(_QWORD *)(this + 32))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeMotionLocation(uint64_t this)
{
  if (!*(_QWORD *)(this + 2024))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeMotionActivity(uint64_t this)
{
  if (!*(_QWORD *)(this + 1984))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeBioMotionPose(uint64_t this)
{
  if (!*(_QWORD *)(this + 496))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeKappaTrigger(uint64_t this)
{
  if (!*(_QWORD *)(this + 1736))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeRelDMInSystemConfig(uint64_t this)
{
  if (!*(_QWORD *)(this + 2664))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeJointLinkModelPose(uint64_t this)
{
  if (!*(_QWORD *)(this + 1464))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeConstrainedIntegratorPose(uint64_t this)
{
  if (!*(_QWORD *)(this + 704))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeGyroCalibrationSample(uint64_t this)
{
  if (!*(_QWORD *)(this + 1208))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeGyroCalibrationSampleNonlinear(uint64_t this)
{
  if (!*(_QWORD *)(this + 1216))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeGyroCalibrationDataNonlinearNonFactory(uint64_t this)
{
  if (!*(_QWORD *)(this + 1200))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeGyroCalibrationDataFactory(uint64_t this)
{
  if (!*(_QWORD *)(this + 1192))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeBioMotionClassification(uint64_t this)
{
  if (!*(_QWORD *)(this + 472))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeFusedBioMotionClassification(uint64_t this)
{
  if (!*(_QWORD *)(this + 1056))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeModelBasedBioMotionClassification(uint64_t this)
{
  if (!*(_QWORD *)(this + 1976))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeMLBasedBioMotionClassification(uint64_t this)
{
  if (!*(_QWORD *)(this + 1888))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePose(uint64_t this)
{
  if (!*(_QWORD *)(this + 2432))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePoseState(uint64_t this)
{
  if (!*(_QWORD *)(this + 2440))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeBioMotionPredictedPose(uint64_t this)
{
  if (!*(_QWORD *)(this + 504))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeJointLinkModelPredictedPose(uint64_t this)
{
  if (!*(_QWORD *)(this + 1472))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeConstrainedIntegratorModelPredictedPose(uint64_t this)
{
  if (!*(_QWORD *)(this + 696))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePressureCompensated(uint64_t this)
{
  if (!*(_QWORD *)(this + 2544))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeVo2MaxOutput(uint64_t this)
{
  if (!*(_QWORD *)(this + 3328))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeMagneticAccessoryType1(uint64_t this)
{
  if (!*(_QWORD *)(this + 1904))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeMagneticAccessoryType2(uint64_t this)
{
  if (!*(_QWORD *)(this + 1912))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePressureCalibration(uint64_t this)
{
  if (!*(_QWORD *)(this + 2536))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeWorkoutRecorderMagnetometer(uint64_t this)
{
  if (!*(_QWORD *)(this + 3528))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeWorkoutRecorderCompassCalibration(uint64_t this)
{
  if (!*(_QWORD *)(this + 3480))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeRawAudio(uint64_t this)
{
  if (!*(_QWORD *)(this + 2656))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeCV3DPredictedPose(uint64_t this)
{
  if (!*(_QWORD *)(this + 584))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeBioMotionLinkLengthFitParameters(uint64_t this)
{
  if (!*(_QWORD *)(this + 480))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeBioMotionOnlineLinkLengthUpdate(uint64_t this)
{
  if (!*(_QWORD *)(this + 488))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeOdtPose(uint64_t this)
{
  if (!*(_QWORD *)(this + 2128))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePencilTipForce(uint64_t this)
{
  if (!*(_QWORD *)(this + 2392))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePencilTouch(uint64_t this)
{
  if (!*(_QWORD *)(this + 2400))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAveragedALSData(uint64_t this)
{
  if (!*(_QWORD *)(this + 384))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeTimestamp(uint64_t this)
{
  if (!*(_QWORD *)(this + 3144))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAppleCV3DSLAMState(uint64_t this)
{
  if (!*(_QWORD *)(this + 344))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeBioMotionAnchorPose(uint64_t this)
{
  if (!*(_QWORD *)(this + 464))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeBioMotionPropagatedAnchor(uint64_t this)
{
  if (!*(_QWORD *)(this + 512))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeWalkingSteadinessClassification(uint64_t this)
{
  if (!*(_QWORD *)(this + 3360))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeSteadinessModelResult(uint64_t this)
{
  if (!*(_QWORD *)(this + 3000))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeSteadinessEvent(uint64_t this)
{
  if (!*(_QWORD *)(this + 2960))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeSteadinessModelGaitBaselineFeatures(uint64_t this)
{
  if (!*(_QWORD *)(this + 2984))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeSteadinessModelContinuousWalkingFeatures(uint64_t this)
{
  if (!*(_QWORD *)(this + 2976))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeSteadinessModelTemporalDispersionFeatures(uint64_t this)
{
  if (!*(_QWORD *)(this + 3008))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeSteadinessModelTemporalEntropyFeatures(uint64_t this)
{
  if (!*(_QWORD *)(this + 3016))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeSteadinessModelBalanceFeatures(uint64_t this)
{
  if (!*(_QWORD *)(this + 2968))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeMagnetometerReset(uint64_t this)
{
  if (!*(_QWORD *)(this + 1936))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeWorkoutRecorderWatchOnWristStatus(uint64_t this)
{
  if (!*(_QWORD *)(this + 3560))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeLiftToWakeOnHeadStatus(uint64_t this)
{
  if (!*(_QWORD *)(this + 1840))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAccessoryMagnetometer(uint64_t this)
{
  if (!*(_QWORD *)(this + 192))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeStepCountEntryAddition(uint64_t this)
{
  if (!*(_QWORD *)(this + 3040))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeStepDistanceFusionResult(uint64_t this)
{
  if (!*(_QWORD *)(this + 3048))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeSkeleton3D(uint64_t this)
{
  if (!*(_QWORD *)(this + 2904))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeCvWatchCalories(uint64_t this)
{
  if (!*(_QWORD *)(this + 736))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeFaceBlendShapeCoefficientsSample(uint64_t this)
{
  if (!*(_QWORD *)(this + 888))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeBatteryStatus(uint64_t this)
{
  if (!*(_QWORD *)(this + 456))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeLockScreenStatus(uint64_t this)
{
  if (!*(_QWORD *)(this + 1872))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeBatterySaverModeStatus(uint64_t this)
{
  if (!*(_QWORD *)(this + 448))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePowerManagementUserActivity(uint64_t this)
{
  if (!*(_QWORD *)(this + 2464))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeFocusModes(uint64_t this)
{
  if (!*(_QWORD *)(this + 1040))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeDisplayStatus(uint64_t this)
{
  if (!*(_QWORD *)(this + 784))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAPSleep(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAPWake(uint64_t this)
{
  if (!*(_QWORD *)(this + 16))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAltimeterKF(uint64_t this)
{
  if (!*(_QWORD *)(this + 320))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeLiftToWakeState(uint64_t this)
{
  if (!*(_QWORD *)(this + 1848))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeViewObstructedState(uint64_t this)
{
  if (!*(_QWORD *)(this + 3248))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeRunningFormMetrics(uint64_t this)
{
  if (!*(_QWORD *)(this + 2744))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeWorkoutSessionPriors(uint64_t this)
{
  if (!*(_QWORD *)(this + 3600))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeWorkoutRecorderWorkoutSessionPriors(uint64_t this)
{
  if (!*(_QWORD *)(this + 3592))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeArkitWorldPose(uint64_t this)
{
  if (!*(_QWORD *)(this + 360))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePdrImpulse(uint64_t this)
{
  if (!*(_QWORD *)(this + 2248))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePocketDetectionPacket(uint64_t this)
{
  if (!*(_QWORD *)(this + 2424))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeLiftToWakeFeaturesNeo(uint64_t this)
{
  if (!*(_QWORD *)(this + 1832))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeLiftToWakeStatusNeo(uint64_t this)
{
  if (!*(_QWORD *)(this + 1856))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeRunningPower(uint64_t this)
{
  if (!*(_QWORD *)(this + 2752))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeBasebandCompassCoex(uint64_t this)
{
  if (!*(_QWORD *)(this + 408))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeBasebandCompassCoexConstraints(uint64_t this)
{
  if (!*(_QWORD *)(this + 416))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeMotionContextActivity(uint64_t this)
{
  if (!*(_QWORD *)(this + 2000))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePdrAlgType(uint64_t this)
{
  if (!*(_QWORD *)(this + 2152))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAccelTNBFrame(uint64_t this)
{
  if (!*(_QWORD *)(this + 72))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeDotEstimatorWithTNB(uint64_t this)
{
  if (!*(_QWORD *)(this + 832))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePdrMLModelOutput(uint64_t this)
{
  if (!*(_QWORD *)(this + 2256))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeGaitEventsModelOutput(uint64_t this)
{
  if (!*(_QWORD *)(this + 1088))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeGaitEventsStrideAggregation(uint64_t this)
{
  if (!*(_QWORD *)(this + 1096))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeGaitEventsHKResult(uint64_t this)
{
  if (!*(_QWORD *)(this + 1080))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeFaceCovered(uint64_t this)
{
  if (!*(_QWORD *)(this + 896))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeWorkoutRecorderAveragedALSData(uint64_t this)
{
  if (!*(_QWORD *)(this + 3464))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeStrideCalEntry(uint64_t this)
{
  if (!*(_QWORD *)(this + 3088))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeRunningSpeedKFResult(uint64_t this)
{
  if (!*(_QWORD *)(this + 2768))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeProxPDP(uint64_t this)
{
  if (!*(_QWORD *)(this + 2616))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeKeyboardMotionFeatures(uint64_t this)
{
  if (!*(_QWORD *)(this + 1792))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeKeyboardMotionState(uint64_t this)
{
  if (!*(_QWORD *)(this + 1800))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAlsPhone(uint64_t this)
{
  if (!*(_QWORD *)(this + 304))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeKeyboardKeyPress(uint64_t this)
{
  if (!*(_QWORD *)(this + 1784))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeWakeGestureNotification(uint64_t this)
{
  if (!*(_QWORD *)(this + 3336))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeProxBaselineEstimatorState(uint64_t this)
{
  if (!*(_QWORD *)(this + 2600))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeBaselineResetCheck(uint64_t this)
{
  if (!*(_QWORD *)(this + 432))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeRhythmicGnssOperatorStatus(uint64_t this)
{
  if (!*(_QWORD *)(this + 2712))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeKeyboardMotionTrackpad(uint64_t this)
{
  if (!*(_QWORD *)(this + 1808))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeKeyboardAttached(uint64_t this)
{
  if (!*(_QWORD *)(this + 1776))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeBacklightState(uint64_t this)
{
  if (!*(_QWORD *)(this + 400))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeBatchedLocationFromOdometer(uint64_t this)
{
  if (!*(_QWORD *)(this + 440))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeHeartRateReference(uint64_t this)
{
  if (!*(_QWORD *)(this + 1320))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeSkeleton2D(uint64_t this)
{
  if (!*(_QWORD *)(this + 2896))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeSkeleton3DRetargeted(uint64_t this)
{
  if (!*(_QWORD *)(this + 2920))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeSkeleton3DLifted(uint64_t this)
{
  if (!*(_QWORD *)(this + 2912))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeFitnessMachineSample(uint64_t this)
{
  if (!*(_QWORD *)(this + 1032))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeWatchHeartRateData(uint64_t this)
{
  if (!*(_QWORD *)(this + 3392))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeFacePoseSynchronized(uint64_t this)
{
  if (!*(_QWORD *)(this + 920))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeWatchActiveCalories(uint64_t this)
{
  if (!*(_QWORD *)(this + 3368))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeWatchBasalCalories(uint64_t this)
{
  if (!*(_QWORD *)(this + 3376))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeTrackRunData(uint64_t this)
{
  if (!*(_QWORD *)(this + 3160))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeGnssAvailabilityPredictorData(uint64_t this)
{
  if (!*(_QWORD *)(this + 1112))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeGnssLeechLocationData(uint64_t this)
{
  if (!*(_QWORD *)(this + 1120))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeMapsRouteHintData(uint64_t this)
{
  if (!*(_QWORD *)(this + 1944))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeFitnessMachineData(uint64_t this)
{
  if (!*(_QWORD *)(this + 1024))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeWorkoutRecorderFitnessMachineData(uint64_t this)
{
  if (!*(_QWORD *)(this + 3504))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAccessoryActivityStateUpdate(uint64_t this)
{
  if (!*(_QWORD *)(this + 112))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePedestrianFenceExit(uint64_t this)
{
  if (!*(_QWORD *)(this + 2328))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeInertialOdometry(uint64_t this)
{
  if (!*(_QWORD *)(this + 1416))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePhysicalEffortInput(uint64_t this)
{
  if (!*(_QWORD *)(this + 2408))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePhysicalEffortSample(uint64_t this)
{
  if (!*(_QWORD *)(this + 2416))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePedestrianCalorieModelDebugging(uint64_t this)
{
  if (!*(_QWORD *)(this + 2320))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeElevationThreshold(uint64_t this)
{
  if (!*(_QWORD *)(this + 864))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeInitialHistoricalMeanSeaLevelPressure(uint64_t this)
{
  if (!*(_QWORD *)(this + 1424))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeWorkoutActivity(uint64_t this)
{
  if (!*(_QWORD *)(this + 3424))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePencilDeviceMotion(uint64_t this)
{
  if (!*(_QWORD *)(this + 2352))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePencilFusionResult(uint64_t this)
{
  if (!*(_QWORD *)(this + 2376))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeHapticModuleState(uint64_t this)
{
  if (!*(_QWORD *)(this + 1272))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeSteadinessModelHarmonicFeatures(uint64_t this)
{
  if (!*(_QWORD *)(this + 2992))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePencilFusionReplayResult(uint64_t this)
{
  if (!*(_QWORD *)(this + 2368))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeMobilitySmoothedGaitMetrics(uint64_t this)
{
  if (!*(_QWORD *)(this + 1968))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeWatchEnclosureMaterial(uint64_t this)
{
  if (!*(_QWORD *)(this + 3384))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAccessoryHeartRate(uint64_t this)
{
  if (!*(_QWORD *)(this + 176))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAccessoryPPG(uint64_t this)
{
  if (!*(_QWORD *)(this + 208))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeMotionLoiAltitudeData(uint64_t this)
{
  if (!*(_QWORD *)(this + 2032))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeDisplacingState(uint64_t this)
{
  if (!*(_QWORD *)(this + 776))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePostureJoint(uint64_t this)
{
  if (!*(_QWORD *)(this + 2448))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePostureSkeleton(uint64_t this)
{
  if (!*(_QWORD *)(this + 2456))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeHidShower(uint64_t this)
{
  if (!*(_QWORD *)(this + 1336))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeWorkoutRecorderFaceCovered(uint64_t this)
{
  if (!*(_QWORD *)(this + 3496))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeStreamingHighFrequencyHeartRateData(uint64_t this)
{
  if (!*(_QWORD *)(this + 3072))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeUltraFastAccel(uint64_t this)
{
  if (!*(_QWORD *)(this + 3168))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAccel(uint64_t this)
{
  if (!*(_QWORD *)(this + 24))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAccelBatch(uint64_t this)
{
  if (!*(_QWORD *)(this + 40))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAccelOscarEmu(uint64_t this)
{
  if (!*(_QWORD *)(this + 64))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAccelGesture(uint64_t this)
{
  if (!*(_QWORD *)(this + 48))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeGyro(uint64_t this)
{
  if (!*(_QWORD *)(this + 1144))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeGyroOscarEmu(uint64_t this)
{
  if (!*(_QWORD *)(this + 1256))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeGyroTemperature(uint64_t this)
{
  if (!*(_QWORD *)(this + 1264))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeGyroBiasAndVariance(uint64_t this)
{
  if (!*(_QWORD *)(this + 1152))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeGyroBiasFit(uint64_t this)
{
  if (!*(_QWORD *)(this + 1184))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeGyroDt(uint64_t this)
{
  if (!*(_QWORD *)(this + 1232))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeMagnetometer(uint64_t this)
{
  if (!*(_QWORD *)(this + 1920))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeCompass(uint64_t this)
{
  if (!*(_QWORD *)(this + 640))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeCompassAlignment(uint64_t this)
{
  if (!*(_QWORD *)(this + 648))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeGyroCompass(uint64_t this)
{
  if (!*(_QWORD *)(this + 1224))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeCompassCalibration(uint64_t this)
{
  if (!*(_QWORD *)(this + 656))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePressure(uint64_t this)
{
  if (!*(_QWORD *)(this + 2528))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePressureOscarEmu(uint64_t this)
{
  if (!*(_QWORD *)(this + 2584))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePressureFiltered(uint64_t this)
{
  if (!*(_QWORD *)(this + 2552))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeProx(uint64_t this)
{
  if (!*(_QWORD *)(this + 2592))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeTouchOscarEmu(uint64_t this)
{
  if (!*(_QWORD *)(this + 3152))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeDeviceMotion(uint64_t this)
{
  if (!*(_QWORD *)(this + 744))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeMotionStateUpdate(uint64_t this)
{
  if (!*(_QWORD *)(this + 2048))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAccelGps(uint64_t this)
{
  if (!*(_QWORD *)(this + 56))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeGyroGps(uint64_t this)
{
  if (!*(_QWORD *)(this + 1248))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePressureGps(uint64_t this)
{
  if (!*(_QWORD *)(this + 2576))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeBTConnection(uint64_t this)
{
  if (!*(_QWORD *)(this + 392))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeSessionOverride(uint64_t this)
{
  if (!*(_QWORD *)(this + 2840))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeLocationOscarEmu(uint64_t this)
{
  if (!*(_QWORD *)(this + 1864))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeMotionHint(uint64_t this)
{
  if (!*(_QWORD *)(this + 2016))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeEnhancedDeviceMotion(uint64_t this)
{
  if (!*(_QWORD *)(this + 880))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeNonlinearBiasFit(uint64_t this)
{
  if (!*(_QWORD *)(this + 2104))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeNatalieData(uint64_t this)
{
  if (!*(_QWORD *)(this + 2096))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeBodyMetrics(uint64_t this)
{
  if (!*(_QWORD *)(this + 528))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeWorkoutEvent(uint64_t this)
{
  if (!*(_QWORD *)(this + 3432))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeOnsetHeartRateData(uint64_t this)
{
  if (!*(_QWORD *)(this + 2136))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeStreamingHeartRateData(uint64_t this)
{
  if (!*(_QWORD *)(this + 3064))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeElevationChange(uint64_t this)
{
  if (!*(_QWORD *)(this + 848))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeCoarseElevationChange(uint64_t this)
{
  if (!*(_QWORD *)(this + 632))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeMotionGPSLocation(uint64_t this)
{
  if (!*(_QWORD *)(this + 2008))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeMotionWifiLocation(uint64_t this)
{
  if (!*(_QWORD *)(this + 2064))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeStrideCalBin(uint64_t this)
{
  if (!*(_QWORD *)(this + 3080))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeCalorimetryPauseEvent(uint64_t this)
{
  if (!*(_QWORD *)(this + 600))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeOdometer(uint64_t this)
{
  if (!*(_QWORD *)(this + 2112))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeMetsInfo(uint64_t this)
{
  if (!*(_QWORD *)(this + 1952))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeFallStats(uint64_t this)
{
  if (!*(_QWORD *)(this + 1008))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeBasebandSpeed(uint64_t this)
{
  if (!*(_QWORD *)(this + 424))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeVibrationEvent(uint64_t this)
{
  if (!*(_QWORD *)(this + 3216))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeStepCadenceToStrideLengthBin(uint64_t this)
{
  if (!*(_QWORD *)(this + 3024))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeWatchOrientationSettings(uint64_t this)
{
  if (!*(_QWORD *)(this + 3408))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeMotionWifiAssociation(uint64_t this)
{
  if (!*(_QWORD *)(this + 2056))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeMotionLoiData(uint64_t this)
{
  if (!*(_QWORD *)(this + 2040))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeOdometerWithAltitude(uint64_t this)
{
  if (!*(_QWORD *)(this + 2120))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePressureFilteredNoTemperature(uint64_t this)
{
  if (!*(_QWORD *)(this + 2568))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeInEarTransition(uint64_t this)
{
  if (!*(_QWORD *)(this + 1400))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeClefCalibration(uint64_t this)
{
  if (!*(_QWORD *)(this + 624))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAirpodEvent(uint64_t this)
{
  if (!*(_QWORD *)(this + 288))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeInEarOptical(uint64_t this)
{
  if (!*(_QWORD *)(this + 1384))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeInEarConstraints(uint64_t this)
{
  if (!*(_QWORD *)(this + 1368))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeInEarOpenLid(uint64_t this)
{
  if (!*(_QWORD *)(this + 1376))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeInEarBaselining(uint64_t this)
{
  if (!*(_QWORD *)(this + 1360))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAccessoryConfig(uint64_t this)
{
  if (!*(_QWORD *)(this + 120))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAccessoryAccelConfig(uint64_t this)
{
  if (!*(_QWORD *)(this + 96))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAccessoryProximityConfig(uint64_t this)
{
  if (!*(_QWORD *)(this + 240))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeTapDetect(uint64_t this)
{
  if (!*(_QWORD *)(this + 3120))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeTapAccept(uint64_t this)
{
  if (!*(_QWORD *)(this + 3112))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeDoubleTap(uint64_t this)
{
  if (!*(_QWORD *)(this + 840))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAccessoryWakeDebug(uint64_t this)
{
  if (!*(_QWORD *)(this + 280))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeGeomagneticData(uint64_t this)
{
  if (!*(_QWORD *)(this + 1104))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeRelativeDeviceMotionInternal(uint64_t this)
{
  if (!*(_QWORD *)(this + 2688))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeRelativeGravityCorrection(uint64_t this)
{
  if (!*(_QWORD *)(this + 2704))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeRelativeGravityConstraints(uint64_t this)
{
  if (!*(_QWORD *)(this + 2696))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeZeroVelocityCorrection(uint64_t this)
{
  if (!*(_QWORD *)(this + 3608))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAnchorCorrection(uint64_t this)
{
  if (!*(_QWORD *)(this + 328))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePredictedRelativeDeviceMotion(uint64_t this)
{
  if (!*(_QWORD *)(this + 2520))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeMovementStatsSignal(uint64_t this)
{
  if (!*(_QWORD *)(this + 2088))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeMovementStatsGravityProjection(uint64_t this)
{
  if (!*(_QWORD *)(this + 2080))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeBleedToZeroCorrection(uint64_t this)
{
  if (!*(_QWORD *)(this + 520))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAccessoryGyroConfig(uint64_t this)
{
  if (!*(_QWORD *)(this + 160))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAccessoryGyroGYTT(uint64_t this)
{
  if (!*(_QWORD *)(this + 168))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAccessoryGyroCachedBias(uint64_t this)
{
  if (!*(_QWORD *)(this + 152))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeGaitCycleSegment(uint64_t this)
{
  if (!*(_QWORD *)(this + 1064))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeGaitCycleSegmentationState(uint64_t this)
{
  if (!*(_QWORD *)(this + 1072))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeCompassCalibrationAttempt(uint64_t this)
{
  if (!*(_QWORD *)(this + 664))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeVisualLocalizationAttitudeCorrection(uint64_t this)
{
  if (!*(_QWORD *)(this + 3304))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeVisualLocalizationAttitudeConstraints(uint64_t this)
{
  if (!*(_QWORD *)(this + 3296))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAccessoryMagnetometerConfig(uint64_t this)
{
  if (!*(_QWORD *)(this + 200))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeFallDetectionReferee(uint64_t this)
{
  if (!*(_QWORD *)(this + 952))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeFallDetectionReplay(uint64_t this)
{
  if (!*(_QWORD *)(this + 960))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeFallDetectionStateMachine(uint64_t this)
{
  if (!*(_QWORD *)(this + 968))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeFallDetectionDetector(uint64_t this)
{
  if (!*(_QWORD *)(this + 936))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeFallFalsePositiveSuppressionFeatures(uint64_t this)
{
  if (!*(_QWORD *)(this + 992))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAccessoryDeviceMotionConfig(uint64_t this)
{
  if (!*(_QWORD *)(this + 136))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeRelativeDeviceMotionCorrelatedMotion(uint64_t this)
{
  if (!*(_QWORD *)(this + 2680))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeRelativeDeviceMotionComplexTransition(uint64_t this)
{
  if (!*(_QWORD *)(this + 2672))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeDeviceMotionAlwaysOn(uint64_t this)
{
  if (!*(_QWORD *)(this + 752))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeFallDetectionGyroControllerReplay(uint64_t this)
{
  if (!*(_QWORD *)(this + 944))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeWalkingDetectionResult(uint64_t this)
{
  if (!*(_QWORD *)(this + 3352))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAccessoryInEarStatus(uint64_t this)
{
  if (!*(_QWORD *)(this + 184))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeFallDetectionWristStateReplay(uint64_t this)
{
  if (!*(_QWORD *)(this + 976))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeGyroBiasEstimateError(uint64_t this)
{
  if (!*(_QWORD *)(this + 1176))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeStepLikelihoodFeatures(uint64_t this)
{
  if (!*(_QWORD *)(this + 3056))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeFirstStepFeatures(uint64_t this)
{
  if (!*(_QWORD *)(this + 1016))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAccessoryStepDetectorDebug(uint64_t this)
{
  if (!*(_QWORD *)(this + 264))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeSitStandDetectorFeatures(uint64_t this)
{
  if (!*(_QWORD *)(this + 2864))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeSitStandDetectorTransitions(uint64_t this)
{
  if (!*(_QWORD *)(this + 2888))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeSitStandDetectorPosteriorBufferStatsForSitToStand(uint64_t this)
{
  if (!*(_QWORD *)(this + 2872))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeSitStandDetectorPosteriorBufferStatsForStandToSit(uint64_t this)
{
  if (!*(_QWORD *)(this + 2880))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeSpatialEvent(uint64_t this)
{
  if (!*(_QWORD *)(this + 2928))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeFallDistanceReplay(uint64_t this)
{
  if (!*(_QWORD *)(this + 984))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeJitterBufferLevel(uint64_t this)
{
  if (!*(_QWORD *)(this + 1456))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePressureFiltered1HzLowPass(uint64_t this)
{
  if (!*(_QWORD *)(this + 2560))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeMotionActivityReplay(uint64_t this)
{
  if (!*(_QWORD *)(this + 1992))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeFallDetectionActivityClassifierReplay(uint64_t this)
{
  if (!*(_QWORD *)(this + 928))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeLegacyALS5CHInput(uint64_t this)
{
  if (!*(_QWORD *)(this + 1824))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeDopplerSample(uint64_t this)
{
  if (!*(_QWORD *)(this + 816))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeDopplerProximityEvent(uint64_t this)
{
  if (!*(_QWORD *)(this + 800))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeDopplerRawDataInput(uint64_t this)
{
  if (!*(_QWORD *)(this + 808))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeDopplerDebugRecord(uint64_t this)
{
  if (!*(_QWORD *)(this + 792))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeOrientation(uint64_t this)
{
  if (!*(_QWORD *)(this + 2144))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeKappaAudioResult(uint64_t this)
{
  if (!*(_QWORD *)(this + 1528))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeKappaBaroResult(uint64_t this)
{
  if (!*(_QWORD *)(this + 1536))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeKappaGpsResult(uint64_t this)
{
  if (!*(_QWORD *)(this + 1560))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeKappaPulseResult(uint64_t this)
{
  if (!*(_QWORD *)(this + 1648))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeKappaZgResult(uint64_t this)
{
  if (!*(_QWORD *)(this + 1768))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeKappaZgDetected(uint64_t this)
{
  if (!*(_QWORD *)(this + 1760))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeKappaPulseInertialAccel(uint64_t this)
{
  if (!*(_QWORD *)(this + 1632))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeHeadTrackingClientModeUpdate(uint64_t this)
{
  if (!*(_QWORD *)(this + 1312))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeHeadTrackingBehaviorUpdate(uint64_t this)
{
  if (!*(_QWORD *)(this + 1304))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeKappaAirbagResult(uint64_t this)
{
  if (!*(_QWORD *)(this + 1520))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeKappaCrashResult(uint64_t this)
{
  if (!*(_QWORD *)(this + 1544))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeKappaQuiescenceResult(uint64_t this)
{
  if (!*(_QWORD *)(this + 1656))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeKappaRecoveryResult(uint64_t this)
{
  if (!*(_QWORD *)(this + 1664))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeKappaRolloverCrashResult(uint64_t this)
{
  if (!*(_QWORD *)(this + 1696))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeKappaMildImpactResult(uint64_t this)
{
  if (!*(_QWORD *)(this + 1600))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeKappaLackOfMotionResult(uint64_t this)
{
  if (!*(_QWORD *)(this + 1584))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeKappaSevereCrashResult(uint64_t this)
{
  if (!*(_QWORD *)(this + 1704))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeKappaLocalAudioResult(uint64_t this)
{
  if (!*(_QWORD *)(this + 1592))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeKappaRemoteAudioResult(uint64_t this)
{
  if (!*(_QWORD *)(this + 1672))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeDirectionOfTravelMetrics(uint64_t this)
{
  if (!*(_QWORD *)(this + 768))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeViewObstructedMachineLearningDecision(uint64_t this)
{
  if (!*(_QWORD *)(this + 3224))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeHeadToHeadsetTransformationEstimate(uint64_t this)
{
  if (!*(_QWORD *)(this + 1296))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeViewObstructedMachineLearningFeatures(uint64_t this)
{
  if (!*(_QWORD *)(this + 3232))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeViewObstructedMachineLearningProbabilities(uint64_t this)
{
  if (!*(_QWORD *)(this + 3240))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeRunningArmSwingSignals(uint64_t this)
{
  if (!*(_QWORD *)(this + 2728))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeRunningCentripetalAccelSignals(uint64_t this)
{
  if (!*(_QWORD *)(this + 2736))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeRunningRotationAxis(uint64_t this)
{
  if (!*(_QWORD *)(this + 2760))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeRunningVerticalOscillationSignals(uint64_t this)
{
  if (!*(_QWORD *)(this + 2800))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeRunningVerticalOscillation(uint64_t this)
{
  if (!*(_QWORD *)(this + 2784))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeKappaSpinResult(uint64_t this)
{
  if (!*(_QWORD *)(this + 1712))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeKappaPulseDeltaV(uint64_t this)
{
  if (!*(_QWORD *)(this + 1624))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeRunningStrideLength(uint64_t this)
{
  if (!*(_QWORD *)(this + 2776))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeIspPacket(uint64_t this)
{
  if (!*(_QWORD *)(this + 1448))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeKappaHighSpeedCrashResult(uint64_t this)
{
  if (!*(_QWORD *)(this + 1576))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeKappaPulseInertialHgAccel(uint64_t this)
{
  if (!*(_QWORD *)(this + 1640))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeHarmonicMetrics(uint64_t this)
{
  if (!*(_QWORD *)(this + 1280))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeCalorimetryMETsConsumed(uint64_t this)
{
  if (!*(_QWORD *)(this + 592))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePedometerPathStraightness(uint64_t this)
{
  if (!*(_QWORD *)(this + 2336))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeComplexHandMotion(uint64_t this)
{
  if (!*(_QWORD *)(this + 688))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeElevationGradeEstimator(uint64_t this)
{
  if (!*(_QWORD *)(this + 856))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeVO2MaxModelInput(uint64_t this)
{
  if (!*(_QWORD *)(this + 3200))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeProxCalibration(uint64_t this)
{
  if (!*(_QWORD *)(this + 2608))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeKappaStepsResult(uint64_t this)
{
  if (!*(_QWORD *)(this + 1728))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeWakeGestureSample(uint64_t this)
{
  if (!*(_QWORD *)(this + 3344))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeKappaGravityAutocorrelationResult(uint64_t this)
{
  if (!*(_QWORD *)(this + 1568))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeRunningVerticalOscillationGradientBoostedSignals(uint64_t this)
{
  if (!*(_QWORD *)(this + 2792))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeSubStats(uint64_t this)
{
  if (!*(_QWORD *)(this + 3096))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePedOdomFusionExtendedModeSegment(uint64_t this)
{
  if (!*(_QWORD *)(this + 2312))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeMagicMountState(uint64_t this)
{
  if (!*(_QWORD *)(this + 1896))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePdrPedestrianClassifierState(uint64_t this)
{
  if (!*(_QWORD *)(this + 2264))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePdrPlacementClassifierState(uint64_t this)
{
  if (!*(_QWORD *)(this + 2272))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePdrSpeedEstimatorState(uint64_t this)
{
  if (!*(_QWORD *)(this + 2280))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePdrDOTEstimatorState(uint64_t this)
{
  if (!*(_QWORD *)(this + 2160))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePdrVelocityEstimatorState(uint64_t this)
{
  if (!*(_QWORD *)(this + 2296))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeKmVelocityEstimatorState(uint64_t this)
{
  if (!*(_QWORD *)(this + 1816))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeVelocityEstimatorFusionState(uint64_t this)
{
  if (!*(_QWORD *)(this + 3208))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePdrFenceReference(uint64_t this)
{
  if (!*(_QWORD *)(this + 2232))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePdrFenceState(uint64_t this)
{
  if (!*(_QWORD *)(this + 2240))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeUwbRange(uint64_t this)
{
  if (!*(_QWORD *)(this + 3192))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeSwingDoTCandidate(uint64_t this)
{
  if (!*(_QWORD *)(this + 3104))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeDotEstimatorHandSwing(uint64_t this)
{
  if (!*(_QWORD *)(this + 824))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeKappaTriggerClustersResult(uint64_t this)
{
  if (!*(_QWORD *)(this + 1744))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeSimActivityEvent(uint64_t this)
{
  if (!*(_QWORD *)(this + 2856))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePdrFeatures(uint64_t this)
{
  if (!*(_QWORD *)(this + 2224))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePdrDOTEstimatorStateBody(uint64_t this)
{
  if (!*(_QWORD *)(this + 2176))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePdrDOTEstimatorStateArmSwing(uint64_t this)
{
  if (!*(_QWORD *)(this + 2168))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePdrDOTEstimatorStateHeading(uint64_t this)
{
  if (!*(_QWORD *)(this + 2200))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAccessoryActivityAsleepConfidenceEpoch(uint64_t this)
{
  if (!*(_QWORD *)(this + 104))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePdrSpeedEstimatorStateDebug(uint64_t this)
{
  if (!*(_QWORD *)(this + 2288))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePrecisionFindingDOTEstimate(uint64_t this)
{
  if (!*(_QWORD *)(this + 2472))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePrecisionFindingState(uint64_t this)
{
  if (!*(_QWORD *)(this + 2496))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeKappaRoadsResult(uint64_t this)
{
  if (!*(_QWORD *)(this + 1688))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePrecisionFindingVelocityEstimate(uint64_t this)
{
  if (!*(_QWORD *)(this + 2504))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePrecisionFindingRangeFilter(uint64_t this)
{
  if (!*(_QWORD *)(this + 2480))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePdrDOTMeasurementSelectorState(uint64_t this)
{
  if (!*(_QWORD *)(this + 2216))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeBumpToWakeState(uint64_t this)
{
  if (!*(_QWORD *)(this + 576))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePdrDOTEstimatorUncertaintyModelOnBody(uint64_t this)
{
  if (!*(_QWORD *)(this + 2208))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePeerState(uint64_t this)
{
  if (!*(_QWORD *)(this + 2344))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeMagnetometerCalibratorFilterParameters(uint64_t this)
{
  if (!*(_QWORD *)(this + 1928))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeKappaActivityPhone(uint64_t this)
{
  if (!*(_QWORD *)(this + 1504))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeKappaActivityWatch(uint64_t this)
{
  if (!*(_QWORD *)(this + 1512))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePrecisionFindingSessionStartStop(uint64_t this)
{
  if (!*(_QWORD *)(this + 2488))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePdrDOTEstimatorStateDebug(uint64_t this)
{
  if (!*(_QWORD *)(this + 2192))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePdrDOTEstimatorStateBodyDebug(uint64_t this)
{
  if (!*(_QWORD *)(this + 2184))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeKappaPeakDetectorMapResult(uint64_t this)
{
  if (!*(_QWORD *)(this + 1616))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeKappaPeakDetectorMapMagTimestamps(uint64_t this)
{
  if (!*(_QWORD *)(this + 1608))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePrecisionFindingVerticalState(uint64_t this)
{
  if (!*(_QWORD *)(this + 2512))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAltimeter(uint64_t this)
{
  if (!*(_QWORD *)(this + 312))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeFaceDownDetection(uint64_t this)
{
  if (!*(_QWORD *)(this + 904))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePencilFusionDMYawAlignmentUpdate(uint64_t this)
{
  if (!*(_QWORD *)(this + 2360))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePencilFusionRingSensorTrustModelUpdate(uint64_t this)
{
  if (!*(_QWORD *)(this + 2384))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAccessorySleepStateUpdate(uint64_t this)
{
  if (!*(_QWORD *)(this + 256))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAccessorySleepStateConfidenceEpoch(uint64_t this)
{
  if (!*(_QWORD *)(this + 248))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeSafetyHertzSample(uint64_t this)
{
  if (!*(_QWORD *)(this + 2816))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeSafetyCompanionStatus(uint64_t this)
{
  if (!*(_QWORD *)(this + 2808))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePtsConsumedGNSS(uint64_t this)
{
  if (!*(_QWORD *)(this + 2624))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePtsForwardPropagation(uint64_t this)
{
  if (!*(_QWORD *)(this + 2632))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePtsReconstructedRoute(uint64_t this)
{
  if (!*(_QWORD *)(this + 2648))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeHeadToHeadsetAttitudeEstimatorMeasurementUpdate(uint64_t this)
{
  if (!*(_QWORD *)(this + 1288))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makePtsMapMatchedRoute(uint64_t this)
{
  if (!*(_QWORD *)(this + 2640))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeAnchorMotionCorrespondence(uint64_t this)
{
  if (!*(_QWORD *)(this + 336))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeKData1(uint64_t this)
{
  if (!*(_QWORD *)(this + 1480))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeKData2(uint64_t this)
{
  if (!*(_QWORD *)(this + 1488))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeKData3(uint64_t this)
{
  if (!*(_QWORD *)(this + 1496))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeSafetyRemoteSample(uint64_t this)
{
  if (!*(_QWORD *)(this + 2824))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeSafetyTrustedAudioResult(uint64_t this)
{
  if (!*(_QWORD *)(this + 2832))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeSpuPlaybackExampleDeviceMotion(uint64_t this)
{
  if (!*(_QWORD *)(this + 2944))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeSpuPlaybackExampleMotionStateUpdate(uint64_t this)
{
  if (!*(_QWORD *)(this + 2952))
    operator new();
  return this;
}

uint64_t CMMsl::Item::makeInterpolatedAccessoryAccel(uint64_t this)
{
  if (!*(_QWORD *)(this + 1432))
    operator new();
  return this;
}

void CMMsl::JitterBufferLevel::~JitterBufferLevel(CMMsl::JitterBufferLevel *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::JitterBufferLevel::JitterBufferLevel(uint64_t this, const CMMsl::JitterBufferLevel *a2)
{
  char v2;
  char v3;
  int v4;
  int v5;
  int v6;

  *(_QWORD *)this = off_100351CC8;
  *(_DWORD *)(this + 20) = 0;
  v2 = *((_BYTE *)a2 + 20);
  if ((v2 & 4) != 0)
  {
    v4 = *((_DWORD *)a2 + 4);
    v3 = 4;
    *(_BYTE *)(this + 20) = 4;
    *(_DWORD *)(this + 16) = v4;
    v2 = *((_BYTE *)a2 + 20);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 2);
    v3 |= 1u;
    *(_BYTE *)(this + 20) = v3;
    *(_DWORD *)(this + 8) = v5;
    v2 = *((_BYTE *)a2 + 20);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *((_DWORD *)a2 + 3);
    *(_BYTE *)(this + 20) = v3 | 2;
    *(_DWORD *)(this + 12) = v6;
  }
  return this;
}

uint64_t CMMsl::JitterBufferLevel::operator=(uint64_t a1, uint64_t a2, float a3)
{
  int v3;
  int v4;
  char v6;
  char v7;
  int v8;
  int v9;
  uint64_t v10;
  _QWORD v12[2];
  int v13;
  int v14;

  if (a1 != a2)
  {
    v12[0] = off_100351CC8;
    v14 = 0;
    v6 = *(_BYTE *)(a2 + 20);
    if ((v6 & 4) != 0)
    {
      a3 = *(float *)(a2 + 16);
      v7 = 4;
      LOBYTE(v14) = 4;
      if ((v6 & 1) != 0)
      {
LABEL_4:
        v3 = *(_DWORD *)(a2 + 8);
        v7 |= 1u;
        LOBYTE(v14) = v7;
        if ((v6 & 2) != 0)
          goto LABEL_8;
        goto LABEL_9;
      }
    }
    else
    {
      v7 = 0;
      if ((*(_BYTE *)(a2 + 20) & 1) != 0)
        goto LABEL_4;
    }
    if ((v6 & 2) != 0)
    {
LABEL_8:
      v4 = *(_DWORD *)(a2 + 12);
      LOBYTE(v14) = v7 | 2;
    }
LABEL_9:
    v8 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v14;
    v14 = v8;
    v9 = *(_DWORD *)(a1 + 16);
    *(float *)(a1 + 16) = a3;
    v13 = v9;
    v10 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v3;
    *(_DWORD *)(a1 + 12) = v4;
    v12[1] = v10;
    PB::Base::~Base((PB::Base *)v12);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::JitterBufferLevel *a2, CMMsl::JitterBufferLevel *a3)
{
  int v3;
  float result;
  int v5;
  int v6;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  v5 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v5;
  v6 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v6;
  return result;
}

float CMMsl::JitterBufferLevel::JitterBufferLevel(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100351CC8;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_100351CC8;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  return result;
}

uint64_t CMMsl::JitterBufferLevel::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  int v10;
  int v11;

  if (a1 != a2)
  {
    v9[0] = off_100351CC8;
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_DWORD *)(a2 + 16);
    v11 = *(_DWORD *)(a1 + 20);
    v5 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v4;
    v10 = v5;
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 20) = v3;
    *(_QWORD *)(a1 + 8) = v7;
    v9[1] = v6;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::JitterBufferLevel::formatText(CMMsl::JitterBufferLevel *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 1) == 0)
  {
    if ((*((_BYTE *)this + 20) & 2) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(a2, "threshold", *((_DWORD *)this + 3));
    if ((*((_BYTE *)this + 20) & 4) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_4;
  }
  PB::TextFormatter::format(a2, "level", *((_DWORD *)this + 2));
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "timestamp", *((float *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::JitterBufferLevel::readFrom(CMMsl::JitterBufferLevel *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t result;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((_BYTE *)this + 20) |= 2u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v34 = 0;
          v35 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_62;
            }
            v36 = v21++;
            v37 = *(_BYTE *)(v22 + v36);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0)
              break;
            v34 += 7;
            v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_61;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v25) = 0;
LABEL_61:
          v2 = v36 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_62:
        *((_DWORD *)this + 3) = v25;
      }
      else if ((_DWORD)v20 == 2)
      {
        *((_BYTE *)this + 20) |= 1u;
        v27 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v28 = *(_QWORD *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v31 = 0;
          if (v2 <= v27)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_67;
            }
            v40 = v27++;
            v41 = *(_BYTE *)(v28 + v40);
            *((_QWORD *)a2 + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_66;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v31) = 0;
LABEL_66:
          v2 = v40 + 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v2 = v27 + 1;
            *((_QWORD *)a2 + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v2;
            v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_67:
        *((_DWORD *)this + 2) = v31;
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 20) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::JitterBufferLevel::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 16), 1u);
    v4 = *(_BYTE *)(v3 + 20);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        return this;
      return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 12), 3u);
    }
  }
  else if ((*(_BYTE *)(this + 20) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 8), 2u);
  if ((*(_BYTE *)(v3 + 20) & 2) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 12), 3u);
  return this;
}

uint64_t CMMsl::JitterBufferLevel::hash_value(CMMsl::JitterBufferLevel *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float v4;

  if ((*((_BYTE *)this + 20) & 4) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 20) & 1) != 0)
      goto LABEL_3;
LABEL_8:
    v2 = 0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_4;
LABEL_9:
    v3 = 0;
    return v2 ^ v1 ^ v3;
  }
  v4 = *((float *)this + 4);
  v1 = LODWORD(v4);
  if (v4 == 0.0)
    v1 = 0;
  if ((*((_BYTE *)this + 20) & 1) == 0)
    goto LABEL_8;
LABEL_3:
  v2 = *((unsigned int *)this + 2);
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_9;
LABEL_4:
  v3 = *((unsigned int *)this + 3);
  return v2 ^ v1 ^ v3;
}

void CMMsl::JointLinkModelPose::~JointLinkModelPose(CMMsl::JointLinkModelPose *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100351D00;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100351D00;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100351D00;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::JointLinkModelPose::JointLinkModelPose(_QWORD *this, const CMMsl::JointLinkModelPose *a2)
{
  *this = off_100351D00;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::JointLinkModelPose *CMMsl::JointLinkModelPose::operator=(const CMMsl::JointLinkModelPose *a1, const CMMsl::JointLinkModelPose *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::JointLinkModelPose *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::JointLinkModelPose::JointLinkModelPose(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_100351D00;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::JointLinkModelPose *a2, CMMsl::JointLinkModelPose *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::JointLinkModelPose::JointLinkModelPose(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100351D00;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100351D00;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::JointLinkModelPose::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_100351D00;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::JointLinkModelPose::formatText(CMMsl::JointLinkModelPose *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::JointLinkModelPose::readFrom(CMMsl::JointLinkModelPose *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::JointLinkModelPose::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

CMMsl::BioMotionPose *CMMsl::JointLinkModelPose::hash_value(CMMsl::JointLinkModelPose *this)
{
  CMMsl::BioMotionPose *result;

  result = (CMMsl::BioMotionPose *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::BioMotionPose *)CMMsl::BioMotionPose::hash_value(result);
  return result;
}

uint64_t CMMsl::JointLinkModelPose::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

void CMMsl::JointLinkModelPredictedPose::~JointLinkModelPredictedPose(CMMsl::JointLinkModelPredictedPose *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100351D38;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100351D38;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100351D38;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::JointLinkModelPredictedPose::JointLinkModelPredictedPose(_QWORD *this, const CMMsl::JointLinkModelPredictedPose *a2)
{
  *this = off_100351D38;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::JointLinkModelPredictedPose *CMMsl::JointLinkModelPredictedPose::operator=(const CMMsl::JointLinkModelPredictedPose *a1, const CMMsl::JointLinkModelPredictedPose *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::JointLinkModelPredictedPose *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::JointLinkModelPredictedPose::JointLinkModelPredictedPose(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_100351D38;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::JointLinkModelPredictedPose *a2, CMMsl::JointLinkModelPredictedPose *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::JointLinkModelPredictedPose::JointLinkModelPredictedPose(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100351D38;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100351D38;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::JointLinkModelPredictedPose::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_100351D38;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::JointLinkModelPredictedPose::formatText(CMMsl::JointLinkModelPredictedPose *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::JointLinkModelPredictedPose::readFrom(CMMsl::JointLinkModelPredictedPose *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::JointLinkModelPredictedPose::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

CMMsl::BioMotionPredictedPose *CMMsl::JointLinkModelPredictedPose::hash_value(CMMsl::JointLinkModelPredictedPose *this)
{
  CMMsl::BioMotionPredictedPose *result;

  result = (CMMsl::BioMotionPredictedPose *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::BioMotionPredictedPose *)CMMsl::BioMotionPredictedPose::hash_value(result);
  return result;
}

uint64_t CMMsl::JointLinkModelPredictedPose::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

void CMMsl::KData1::~KData1(CMMsl::KData1 *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::KData1::KData1(uint64_t this, const CMMsl::KData1 *a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)this = off_100351D70;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::KData1::operator=(uint64_t a1, uint64_t a2)
{
  int v2;
  void (**v4)(CMMsl::KData1 *__hidden);
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;

  if (a1 != a2)
  {
    v4 = off_100351D70;
    v11[0] = off_100351D70;
    HIDWORD(v12) = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      v4 = *(void (***)(CMMsl::KData1 *__hidden))(a2 + 8);
      BYTE4(v12) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v2 = *(_DWORD *)(a2 + 16);
        BYTE4(v12) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = HIDWORD(v12);
    v8 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v11[1] = v8;
    v9 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v2;
    *(_DWORD *)(a1 + 20) = v7;
    v12 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v8[0] = off_100351D70;
    v8[1] = v5;
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v4;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::KData1 *a2, CMMsl::KData1 *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  return this;
}

uint64_t CMMsl::KData1::formatText(CMMsl::KData1 *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 4));
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KData1::readFrom(CMMsl::KData1 *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t result;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)a2 + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v27 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v28 = *(_QWORD *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v31 = 0;
          if (v2 <= v27)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_64;
            }
            v40 = v27++;
            v41 = *(_BYTE *)(v28 + v40);
            *((_QWORD *)a2 + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_63;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v31) = 0;
LABEL_63:
          v3 = v40 + 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v3 = v27 + 1;
            *((_QWORD *)a2 + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v3;
            v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_64:
        *((_DWORD *)this + 4) = v31;
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v34 = 0;
          v35 = 0;
          v25 = 0;
          if (v2 <= v21)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v21)
            {
              v25 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_60;
            }
            v36 = v21++;
            v37 = *(_BYTE *)(v22 + v36);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0)
              break;
            v34 += 7;
            v14 = v35++ > 8;
            if (v14)
            {
              v25 = 0;
              goto LABEL_59;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v25 = 0;
LABEL_59:
          v3 = v36 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v3 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v3;
            v14 = v24++ > 8;
            if (v14)
            {
              v25 = 0;
              break;
            }
          }
        }
LABEL_60:
        *((_QWORD *)this + 1) = v25;
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KData1::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 2u);
  return this;
}

uint64_t CMMsl::KData1::hash_value(CMMsl::KData1 *this)
{
  uint64_t v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((_QWORD *)this + 1);
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_5:
    v2 = 0;
    return v2 ^ v1;
  }
  v1 = 0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_5;
LABEL_3:
  v2 = *((unsigned int *)this + 4);
  return v2 ^ v1;
}

void CMMsl::KData2::~KData2(CMMsl::KData2 *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::KData2::KData2(uint64_t this, const CMMsl::KData2 *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  char v23;

  *(_QWORD *)this = off_100351DA8;
  *(_DWORD *)(this + 100) = 0;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 4) != 0)
  {
    v4 = *((_QWORD *)a2 + 3);
    v3 = 4;
    *(_DWORD *)(this + 100) = 4;
    *(_QWORD *)(this + 24) = v4;
    v2 = *((_DWORD *)a2 + 25);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 8) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 8);
    v3 |= 8u;
    *(_DWORD *)(this + 100) = v3;
    *(_DWORD *)(this + 32) = v5;
    v2 = *((_DWORD *)a2 + 25);
  }
LABEL_6:
  if ((v2 & 0x400) != 0)
  {
    v6 = *((_DWORD *)a2 + 15);
    v3 |= 0x400u;
    *(_DWORD *)(this + 100) = v3;
    *(_DWORD *)(this + 60) = v6;
    v2 = *((_DWORD *)a2 + 25);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_27;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 100) = v3;
  *(_QWORD *)(this + 16) = v7;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0)
      goto LABEL_10;
    goto LABEL_28;
  }
LABEL_27:
  v8 = *((_DWORD *)a2 + 10);
  v3 |= 0x20u;
  *(_DWORD *)(this + 100) = v3;
  *(_DWORD *)(this + 40) = v8;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 1) == 0)
  {
LABEL_10:
    if ((v2 & 0x1000) == 0)
      goto LABEL_11;
    goto LABEL_29;
  }
LABEL_28:
  v9 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 100) = v3;
  *(_QWORD *)(this + 8) = v9;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x1000) == 0)
  {
LABEL_11:
    if ((v2 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_30;
  }
LABEL_29:
  v10 = *((_DWORD *)a2 + 17);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 100) = v3;
  *(_DWORD *)(this + 68) = v10;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x800) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_31;
  }
LABEL_30:
  v11 = *((_DWORD *)a2 + 16);
  v3 |= 0x800u;
  *(_DWORD *)(this + 100) = v3;
  *(_DWORD *)(this + 64) = v11;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_32;
  }
LABEL_31:
  v12 = *((_DWORD *)a2 + 12);
  v3 |= 0x80u;
  *(_DWORD *)(this + 100) = v3;
  *(_DWORD *)(this + 48) = v12;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x40) == 0)
  {
LABEL_14:
    if ((v2 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_33;
  }
LABEL_32:
  v13 = *((_DWORD *)a2 + 11);
  v3 |= 0x40u;
  *(_DWORD *)(this + 100) = v3;
  *(_DWORD *)(this + 44) = v13;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x2000) == 0)
  {
LABEL_15:
    if ((v2 & 0x100) == 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_33:
  v14 = *((_DWORD *)a2 + 18);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 100) = v3;
  *(_DWORD *)(this + 72) = v14;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x100) == 0)
  {
LABEL_16:
    if ((v2 & 0x40000) == 0)
      goto LABEL_17;
    goto LABEL_35;
  }
LABEL_34:
  v15 = *((_DWORD *)a2 + 13);
  v3 |= 0x100u;
  *(_DWORD *)(this + 100) = v3;
  *(_DWORD *)(this + 52) = v15;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x40000) == 0)
  {
LABEL_17:
    if ((v2 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_36;
  }
LABEL_35:
  v16 = *((_DWORD *)a2 + 23);
  v3 |= 0x40000u;
  *(_DWORD *)(this + 100) = v3;
  *(_DWORD *)(this + 92) = v16;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x20000) == 0)
  {
LABEL_18:
    if ((v2 & 0x200) == 0)
      goto LABEL_19;
    goto LABEL_37;
  }
LABEL_36:
  v17 = *((_DWORD *)a2 + 22);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 100) = v3;
  *(_DWORD *)(this + 88) = v17;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x200) == 0)
  {
LABEL_19:
    if ((v2 & 0x10) == 0)
      goto LABEL_20;
    goto LABEL_38;
  }
LABEL_37:
  v18 = *((_DWORD *)a2 + 14);
  v3 |= 0x200u;
  *(_DWORD *)(this + 100) = v3;
  *(_DWORD *)(this + 56) = v18;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x10) == 0)
  {
LABEL_20:
    if ((v2 & 0x10000) == 0)
      goto LABEL_21;
    goto LABEL_39;
  }
LABEL_38:
  v19 = *((_DWORD *)a2 + 9);
  v3 |= 0x10u;
  *(_DWORD *)(this + 100) = v3;
  *(_DWORD *)(this + 36) = v19;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x10000) == 0)
  {
LABEL_21:
    if ((v2 & 0x8000) == 0)
      goto LABEL_22;
    goto LABEL_40;
  }
LABEL_39:
  v20 = *((_DWORD *)a2 + 21);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 100) = v3;
  *(_DWORD *)(this + 84) = v20;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x8000) == 0)
  {
LABEL_22:
    if ((v2 & 0x4000) == 0)
      goto LABEL_23;
    goto LABEL_41;
  }
LABEL_40:
  v21 = *((_DWORD *)a2 + 20);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 100) = v3;
  *(_DWORD *)(this + 80) = v21;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x4000) == 0)
  {
LABEL_23:
    if ((v2 & 0x80000) == 0)
      return this;
LABEL_42:
    v23 = *((_BYTE *)a2 + 96);
    *(_DWORD *)(this + 100) = v3 | 0x80000;
    *(_BYTE *)(this + 96) = v23;
    return this;
  }
LABEL_41:
  v22 = *((_DWORD *)a2 + 19);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 100) = v3;
  *(_DWORD *)(this + 76) = v22;
  if ((*((_DWORD *)a2 + 25) & 0x80000) != 0)
    goto LABEL_42;
  return this;
}

CMMsl *CMMsl::KData2::operator=(CMMsl *a1, const CMMsl::KData2 *a2)
{
  CMMsl::KData2 *v3;
  _BYTE v5[104];

  if (a1 != a2)
  {
    CMMsl::KData2::KData2((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KData2 *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KData2 *a2, CMMsl::KData2 *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  float result;

  v3 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v3;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  v5 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v7;
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  LODWORD(v8) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v8;
  LODWORD(v8) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v8;
  LODWORD(v8) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v8;
  LODWORD(v8) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v8;
  v9 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v9;
  v10 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v10;
  v11 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v11;
  v12 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v12;
  v13 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v13;
  v14 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v14;
  v15 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v15;
  v16 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v16;
  result = *((float *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((float *)a2 + 19) = result;
  LOBYTE(v8) = *((_BYTE *)this + 96);
  *((_BYTE *)this + 96) = *((_BYTE *)a2 + 96);
  *((_BYTE *)a2 + 96) = v8;
  return result;
}

float CMMsl::KData2::KData2(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100351DA8;
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a2 + 100) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  result = *(float *)(a2 + 76);
  *(float *)(a1 + 76) = result;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  return result;
}

CMMsl *CMMsl::KData2::operator=(CMMsl *this, uint64_t a2, CMMsl::KData2 *a3)
{
  void (**v5)(CMMsl::KData2 *__hidden);
  __int128 v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  int v17;

  if (this != (CMMsl *)a2)
  {
    v5 = off_100351DA8;
    v17 = *(_DWORD *)(a2 + 100);
    *(_DWORD *)(a2 + 100) = 0;
    v7 = *(_QWORD *)(a2 + 24);
    v8 = *(_DWORD *)(a2 + 32);
    v12 = *(_DWORD *)(a2 + 60);
    v6 = *(_OWORD *)(a2 + 8);
    v13 = *(_QWORD *)(a2 + 64);
    v10 = *(_QWORD *)(a2 + 44);
    v15 = *(_QWORD *)(a2 + 88);
    v11 = *(_QWORD *)(a2 + 52);
    v9 = *(_QWORD *)(a2 + 36);
    v14 = *(_OWORD *)(a2 + 72);
    v16 = *(_BYTE *)(a2 + 96);
    CMMsl::swap(this, (CMMsl::KData2 *)&v5, a3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return this;
}

uint64_t CMMsl::KData2::formatText(CMMsl::KData2 *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "dataBufferSize", *((_DWORD *)this + 8));
    v5 = *((_DWORD *)this + 25);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x80000) == 0)
        goto LABEL_4;
      goto LABEL_25;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "gestureLengthSeconds", *((float *)this + 9));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x80000) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "isWristLooselyLevel", *((_BYTE *)this + 96));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "negPeakHeight", *((float *)this + 10));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "negPeakLeftHalfWidth", *((_DWORD *)this + 11));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0)
      goto LABEL_8;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "negPeakRightHalfWidth", *((_DWORD *)this + 12));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "negPeakTimestampUs", *((_QWORD *)this + 1));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "negPeakTotalAngleDegrees", *((float *)this + 13));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "pauseBtwPeaksSeconds", *((float *)this + 14));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "posPeakHeight", *((float *)this + 15));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "posPeakLeftHalfWidth", *((_DWORD *)this + 16));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 2) == 0)
      goto LABEL_14;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "posPeakRightHalfWidth", *((_DWORD *)this + 17));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 2) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "posPeakTimestampUs", *((_QWORD *)this + 2));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "posPeakTotalAngleDegrees", *((float *)this + 18));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "rotZRangeDuringGestureRad", *((float *)this + 19));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "screenTiltAtEndDegrees", *((float *)this + 20));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 4) == 0)
      goto LABEL_19;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "screenTiltAtStartDegrees", *((float *)this + 21));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 4) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000) == 0)
      goto LABEL_20;
LABEL_41:
    PB::TextFormatter::format(a2, "wristAngleDiffBtwPeaksDegrees", *((float *)this + 22));
    if ((*((_DWORD *)this + 25) & 0x40000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_21;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "timestampUs", *((_QWORD *)this + 3));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x20000) != 0)
    goto LABEL_41;
LABEL_20:
  if ((v5 & 0x40000) != 0)
LABEL_21:
    PB::TextFormatter::format(a2, "wristAngleToHorizontalDegrees", *((float *)this + 23));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KData2::readFrom(CMMsl::KData2 *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  char v68;
  int v69;
  BOOL v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  unint64_t v81;
  char v82;
  char v83;
  unsigned int v84;
  unint64_t v85;
  char v86;
  char v87;
  unsigned int v88;
  unint64_t v89;
  char v90;
  char v91;
  unsigned int v92;
  unint64_t v93;
  char v94;
  char v95;
  unsigned int v96;
  unint64_t v97;
  char v98;
  char v99;
  unsigned int v100;
  unint64_t v101;
  char v102;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 25) |= 4u;
              v20 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v21 = *(_QWORD *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v71 = 0;
                v72 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_179;
                  }
                  v73 = v20++;
                  v74 = *(_BYTE *)(v21 + v73);
                  *((_QWORD *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0)
                    break;
                  v71 += 7;
                  v14 = v72++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_178;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v24 = 0;
LABEL_178:
                v2 = v73 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)a2 + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_179;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_179:
              *((_QWORD *)this + 3) = v24;
              goto LABEL_215;
            case 2u:
              *((_DWORD *)this + 25) |= 8u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v75 = 0;
                v76 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_184;
                  }
                  v77 = v27++;
                  v78 = *(_BYTE *)(v28 + v77);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0)
                    break;
                  v75 += 7;
                  v14 = v76++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_183:
                    v2 = v77 + 1;
                    goto LABEL_184;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_183;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_184;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_184:
              *((_DWORD *)this + 8) = v31;
              goto LABEL_215;
            case 3u:
              *((_DWORD *)this + 25) |= 0x400u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_112;
              *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_174;
            case 4u:
              *((_DWORD *)this + 25) |= 2u;
              v33 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v79 = 0;
                v80 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    v37 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_189;
                  }
                  v81 = v33++;
                  v82 = *(_BYTE *)(v34 + v81);
                  *((_QWORD *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0)
                    break;
                  v79 += 7;
                  v14 = v80++ > 8;
                  if (v14)
                  {
                    v37 = 0;
LABEL_188:
                    v2 = v81 + 1;
                    goto LABEL_189;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v37 = 0;
                goto LABEL_188;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)a2 + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_189;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              v37 = 0;
LABEL_189:
              *((_QWORD *)this + 2) = v37;
              goto LABEL_215;
            case 5u:
              *((_DWORD *)this + 25) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_112;
              *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_174;
            case 6u:
              *((_DWORD *)this + 25) |= 1u;
              v39 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v40 = *(_QWORD *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v83 = 0;
                v84 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    v43 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_194;
                  }
                  v85 = v39++;
                  v86 = *(_BYTE *)(v40 + v85);
                  *((_QWORD *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v86 & 0x7F) << v83;
                  if ((v86 & 0x80) == 0)
                    break;
                  v83 += 7;
                  v14 = v84++ > 8;
                  if (v14)
                  {
                    v43 = 0;
LABEL_193:
                    v2 = v85 + 1;
                    goto LABEL_194;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v43 = 0;
                goto LABEL_193;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)a2 + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_194;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              v43 = 0;
LABEL_194:
              *((_QWORD *)this + 1) = v43;
              goto LABEL_215;
            case 7u:
              *((_DWORD *)this + 25) |= 0x1000u;
              v45 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v46 = *(_QWORD *)a2;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v87 = 0;
                v88 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_199;
                  }
                  v89 = v45++;
                  v90 = *(_BYTE *)(v46 + v89);
                  *((_QWORD *)a2 + 1) = v45;
                  v49 |= (unint64_t)(v90 & 0x7F) << v87;
                  if ((v90 & 0x80) == 0)
                    break;
                  v87 += 7;
                  v14 = v88++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_198:
                    v2 = v89 + 1;
                    goto LABEL_199;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v49) = 0;
                goto LABEL_198;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)a2 + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_199;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_199:
              *((_DWORD *)this + 17) = v49;
              goto LABEL_215;
            case 8u:
              *((_DWORD *)this + 25) |= 0x800u;
              v51 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v52 = *(_QWORD *)a2;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                v91 = 0;
                v92 = 0;
                v55 = 0;
                if (v2 <= v51)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_204;
                  }
                  v93 = v51++;
                  v94 = *(_BYTE *)(v52 + v93);
                  *((_QWORD *)a2 + 1) = v51;
                  v55 |= (unint64_t)(v94 & 0x7F) << v91;
                  if ((v94 & 0x80) == 0)
                    break;
                  v91 += 7;
                  v14 = v92++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_203:
                    v2 = v93 + 1;
                    goto LABEL_204;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v55) = 0;
                goto LABEL_203;
              }
              v53 = 0;
              v54 = 0;
              v55 = 0;
              do
              {
                v2 = v51 + 1;
                *((_QWORD *)a2 + 1) = v51 + 1;
                v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0)
                  goto LABEL_204;
                v53 += 7;
                v51 = v2;
                v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_204:
              *((_DWORD *)this + 16) = v55;
              goto LABEL_215;
            case 9u:
              *((_DWORD *)this + 25) |= 0x80u;
              v57 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v58 = *(_QWORD *)a2;
              if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
              {
                v95 = 0;
                v96 = 0;
                v61 = 0;
                if (v2 <= v57)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v57)
                  {
                    LODWORD(v61) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_209;
                  }
                  v97 = v57++;
                  v98 = *(_BYTE *)(v58 + v97);
                  *((_QWORD *)a2 + 1) = v57;
                  v61 |= (unint64_t)(v98 & 0x7F) << v95;
                  if ((v98 & 0x80) == 0)
                    break;
                  v95 += 7;
                  v14 = v96++ > 8;
                  if (v14)
                  {
                    LODWORD(v61) = 0;
LABEL_208:
                    v2 = v97 + 1;
                    goto LABEL_209;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v61) = 0;
                goto LABEL_208;
              }
              v59 = 0;
              v60 = 0;
              v61 = 0;
              do
              {
                v2 = v57 + 1;
                *((_QWORD *)a2 + 1) = v57 + 1;
                v62 = *(_BYTE *)(v58 + v57);
                v61 |= (unint64_t)(v62 & 0x7F) << v59;
                if ((v62 & 0x80) == 0)
                  goto LABEL_209;
                v59 += 7;
                v57 = v2;
                v14 = v60++ > 8;
              }
              while (!v14);
              LODWORD(v61) = 0;
LABEL_209:
              *((_DWORD *)this + 12) = v61;
              goto LABEL_215;
            case 0xAu:
              *((_DWORD *)this + 25) |= 0x40u;
              v63 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v64 = *(_QWORD *)a2;
              if (v63 > 0xFFFFFFFFFFFFFFF5 || v63 + 10 > v2)
              {
                v99 = 0;
                v100 = 0;
                v67 = 0;
                if (v2 <= v63)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v63)
                  {
                    LODWORD(v67) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_214;
                  }
                  v101 = v63++;
                  v102 = *(_BYTE *)(v64 + v101);
                  *((_QWORD *)a2 + 1) = v63;
                  v67 |= (unint64_t)(v102 & 0x7F) << v99;
                  if ((v102 & 0x80) == 0)
                    break;
                  v99 += 7;
                  v14 = v100++ > 8;
                  if (v14)
                  {
                    LODWORD(v67) = 0;
LABEL_213:
                    v2 = v101 + 1;
                    goto LABEL_214;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v67) = 0;
                goto LABEL_213;
              }
              v65 = 0;
              v66 = 0;
              v67 = 0;
              do
              {
                v2 = v63 + 1;
                *((_QWORD *)a2 + 1) = v63 + 1;
                v68 = *(_BYTE *)(v64 + v63);
                v67 |= (unint64_t)(v68 & 0x7F) << v65;
                if ((v68 & 0x80) == 0)
                  goto LABEL_214;
                v65 += 7;
                v63 = v2;
                v14 = v66++ > 8;
              }
              while (!v14);
              LODWORD(v67) = 0;
LABEL_214:
              *((_DWORD *)this + 11) = v67;
LABEL_215:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xBu:
              *((_DWORD *)this + 25) |= 0x2000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_112;
              *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_174;
            case 0xCu:
              *((_DWORD *)this + 25) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_112;
              *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_174;
            case 0xDu:
              *((_DWORD *)this + 25) |= 0x40000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_112;
              *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_174;
            case 0xEu:
              *((_DWORD *)this + 25) |= 0x20000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_112;
              *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_174;
            case 0xFu:
              *((_DWORD *)this + 25) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_112;
              *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_174;
            case 0x10u:
              *((_DWORD *)this + 25) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_112;
              *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_174;
            case 0x11u:
              *((_DWORD *)this + 25) |= 0x10000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_112;
              *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_174;
            case 0x12u:
              *((_DWORD *)this + 25) |= 0x8000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_112;
              *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_174;
            case 0x13u:
              *((_DWORD *)this + 25) |= 0x4000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_174:
                v2 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_112:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_215;
            case 0x14u:
              *((_DWORD *)this + 25) |= 0x80000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v70 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v69 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v70 = v69 != 0;
              }
              *((_BYTE *)this + 96) = v70;
              goto LABEL_215;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_215;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::KData2::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 100);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 24), 1u);
    v4 = *(_DWORD *)(v3 + 100);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0)
        goto LABEL_4;
      goto LABEL_24;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 2u);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 3u);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 16), 4u);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0)
      goto LABEL_7;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 5u);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 1) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000) == 0)
      goto LABEL_8;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 8), 6u);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x1000) == 0)
  {
LABEL_8:
    if ((v4 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 68), 7u);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x800) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 64), 8u);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 9u);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x40) == 0)
  {
LABEL_11:
    if ((v4 & 0x2000) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 44), 0xAu);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x2000) == 0)
  {
LABEL_12:
    if ((v4 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0xBu);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x100) == 0)
  {
LABEL_13:
    if ((v4 & 0x40000) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0xCu);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x40000) == 0)
  {
LABEL_14:
    if ((v4 & 0x20000) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 92), 0xDu);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x20000) == 0)
  {
LABEL_15:
    if ((v4 & 0x200) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 0xEu);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x200) == 0)
  {
LABEL_16:
    if ((v4 & 0x10) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 0xFu);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x10) == 0)
  {
LABEL_17:
    if ((v4 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 0x10u);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x10000) == 0)
  {
LABEL_18:
    if ((v4 & 0x8000) == 0)
      goto LABEL_19;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 0x11u);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x8000) == 0)
  {
LABEL_19:
    if ((v4 & 0x4000) == 0)
      goto LABEL_20;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0x12u);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x4000) == 0)
  {
LABEL_20:
    if ((v4 & 0x80000) == 0)
      return this;
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 96), 0x14u);
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 0x13u);
  if ((*(_DWORD *)(v3 + 100) & 0x80000) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 96), 0x14u);
  return this;
}

uint64_t CMMsl::KData2::hash_value(CMMsl::KData2 *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *((_DWORD *)this + 25);
  if ((v1 & 4) != 0)
  {
    v2 = *((_QWORD *)this + 3);
    if ((v1 & 8) != 0)
    {
LABEL_3:
      v3 = *((int *)this + 8);
      if ((v1 & 0x400) != 0)
        goto LABEL_4;
LABEL_46:
      v5 = 0;
      if ((v1 & 2) != 0)
        goto LABEL_7;
      goto LABEL_47;
    }
  }
  else
  {
    v2 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((v1 & 0x400) == 0)
    goto LABEL_46;
LABEL_4:
  v4 = *((float *)this + 15);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_7:
    v6 = *((_QWORD *)this + 2);
    if ((v1 & 0x20) != 0)
      goto LABEL_8;
LABEL_48:
    v8 = 0;
    if ((v1 & 1) != 0)
      goto LABEL_11;
    goto LABEL_49;
  }
LABEL_47:
  v6 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_48;
LABEL_8:
  v7 = *((float *)this + 10);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 1) != 0)
  {
LABEL_11:
    v9 = *((_QWORD *)this + 1);
    if ((v1 & 0x1000) != 0)
      goto LABEL_12;
    goto LABEL_50;
  }
LABEL_49:
  v9 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_12:
    v10 = *((unsigned int *)this + 17);
    if ((v1 & 0x800) != 0)
      goto LABEL_13;
    goto LABEL_51;
  }
LABEL_50:
  v10 = 0;
  if ((v1 & 0x800) != 0)
  {
LABEL_13:
    v11 = *((unsigned int *)this + 16);
    if ((v1 & 0x80) != 0)
      goto LABEL_14;
    goto LABEL_52;
  }
LABEL_51:
  v11 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_14:
    v12 = *((unsigned int *)this + 12);
    if ((v1 & 0x40) != 0)
      goto LABEL_15;
    goto LABEL_53;
  }
LABEL_52:
  v12 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_15:
    v13 = *((unsigned int *)this + 11);
    if ((v1 & 0x2000) != 0)
      goto LABEL_16;
LABEL_54:
    v15 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_19;
LABEL_55:
    v17 = 0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_22;
LABEL_56:
    v19 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_25;
LABEL_57:
    v21 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_28;
LABEL_58:
    v23 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_31;
LABEL_59:
    v25 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_34;
LABEL_60:
    v27 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_37;
LABEL_61:
    v29 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_40;
    goto LABEL_62;
  }
LABEL_53:
  v13 = 0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_54;
LABEL_16:
  v14 = *((float *)this + 18);
  v15 = LODWORD(v14);
  if (v14 == 0.0)
    v15 = 0;
  if ((v1 & 0x100) == 0)
    goto LABEL_55;
LABEL_19:
  v16 = *((float *)this + 13);
  v17 = LODWORD(v16);
  if (v16 == 0.0)
    v17 = 0;
  if ((v1 & 0x40000) == 0)
    goto LABEL_56;
LABEL_22:
  v18 = *((float *)this + 23);
  v19 = LODWORD(v18);
  if (v18 == 0.0)
    v19 = 0;
  if ((v1 & 0x20000) == 0)
    goto LABEL_57;
LABEL_25:
  v20 = *((float *)this + 22);
  v21 = LODWORD(v20);
  if (v20 == 0.0)
    v21 = 0;
  if ((v1 & 0x200) == 0)
    goto LABEL_58;
LABEL_28:
  v22 = *((float *)this + 14);
  v23 = LODWORD(v22);
  if (v22 == 0.0)
    v23 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_59;
LABEL_31:
  v24 = *((float *)this + 9);
  v25 = LODWORD(v24);
  if (v24 == 0.0)
    v25 = 0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_60;
LABEL_34:
  v26 = *((float *)this + 21);
  v27 = LODWORD(v26);
  if (v26 == 0.0)
    v27 = 0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_61;
LABEL_37:
  v28 = *((float *)this + 20);
  v29 = LODWORD(v28);
  if (v28 == 0.0)
    v29 = 0;
  if ((v1 & 0x4000) != 0)
  {
LABEL_40:
    v30 = *((float *)this + 19);
    v31 = LODWORD(v30);
    if (v30 == 0.0)
      v31 = 0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_43;
LABEL_63:
    v32 = 0;
    return v3 ^ v2 ^ v5 ^ v6 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v25 ^ v27 ^ v29 ^ v31 ^ v32;
  }
LABEL_62:
  v31 = 0;
  if ((v1 & 0x80000) == 0)
    goto LABEL_63;
LABEL_43:
  v32 = *((unsigned __int8 *)this + 96);
  return v3 ^ v2 ^ v5 ^ v6 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v25 ^ v27 ^ v29 ^ v31 ^ v32;
}

void CMMsl::KData3::~KData3(CMMsl::KData3 *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::KData3::KData3(CMMsl::KData3 *this, const CMMsl::KData3 *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  float result;

  *(_QWORD *)this = off_100351DE0;
  *((_DWORD *)this + 7) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 28) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 8) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 6);
    v3 |= 8u;
    *((_BYTE *)this + 28) = v3;
    *((float *)this + 6) = result;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 2) == 0)
      return result;
LABEL_10:
    result = *((float *)a2 + 4);
    *((_BYTE *)this + 28) = v3 | 2;
    *((float *)this + 4) = result;
    return result;
  }
  result = *((float *)a2 + 5);
  v3 |= 4u;
  *((_BYTE *)this + 28) = v3;
  *((float *)this + 5) = result;
  if ((*((_BYTE *)a2 + 28) & 2) != 0)
    goto LABEL_10;
  return result;
}

uint64_t CMMsl::KData3::operator=(uint64_t a1, const CMMsl::KData3 *a2)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  if ((const CMMsl::KData3 *)a1 != a2)
  {
    CMMsl::KData3::KData3((CMMsl::KData3 *)&v8, a2);
    v3 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v12;
    v12 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v9 = v4;
    v5 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v11;
    v11 = v5;
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v10;
    v10 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KData3 *a2, CMMsl::KData3 *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  float result;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  v6 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v6;
  result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

float CMMsl::KData3::KData3(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100351DE0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_100351DE0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::KData3::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  int v11;
  int v12;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a2 + 24);
    v12 = *(_DWORD *)(a1 + 28);
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v10[0] = off_100351DE0;
    v10[1] = v6;
    v11 = *(_DWORD *)(a1 + 24);
    v7 = *(_QWORD *)(a1 + 16);
    v8 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 28) = v3;
    *(_DWORD *)(a1 + 24) = v5;
    *(_QWORD *)(a1 + 16) = v8;
    v10[2] = v7;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::KData3::formatText(CMMsl::KData3 *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "maxSymmetryAllowanceFactor", *((float *)this + 4));
    v5 = *((_BYTE *)this + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "minTwistAngleThresholdDeg", *((float *)this + 6));
      if ((*((_BYTE *)this + 28) & 1) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "minPeakRotationRateThresholdRps", *((float *)this + 5));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 8) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 1) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "timestampUs", *((_QWORD *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KData3::readFrom(CMMsl::KData3 *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 28) |= 1u;
              v20 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v21 = *(_QWORD *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_53;
                  }
                  v29 = v20++;
                  v30 = *(_BYTE *)(v21 + v29);
                  *((_QWORD *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_52;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v24 = 0;
LABEL_52:
                v2 = v29 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)a2 + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_53;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_53:
              *((_QWORD *)this + 1) = v24;
              goto LABEL_54;
            case 2u:
              *((_BYTE *)this + 28) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_39;
              *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_48;
            case 3u:
              *((_BYTE *)this + 28) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_39;
              *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_48;
            case 4u:
              *((_BYTE *)this + 28) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_48:
                v2 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_39:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_54;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
LABEL_54:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::KData3::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 16), 4u);
  }
LABEL_8:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 3u);
  if ((*(_BYTE *)(v3 + 28) & 2) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 16), 4u);
  return this;
}

uint64_t CMMsl::KData3::hash_value(CMMsl::KData3 *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;

  if ((*((_BYTE *)this + 28) & 1) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 28) & 8) != 0)
      goto LABEL_3;
LABEL_13:
    v3 = 0;
    if ((*((_BYTE *)this + 28) & 4) != 0)
      goto LABEL_6;
    goto LABEL_14;
  }
  v1 = *((_QWORD *)this + 1);
  if ((*((_BYTE *)this + 28) & 8) == 0)
    goto LABEL_13;
LABEL_3:
  v2 = *((float *)this + 6);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 28) & 4) != 0)
  {
LABEL_6:
    v4 = *((float *)this + 5);
    v5 = LODWORD(v4);
    if (v4 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 28) & 2) != 0)
      goto LABEL_9;
LABEL_15:
    v7 = 0;
    return v3 ^ v1 ^ v5 ^ v7;
  }
LABEL_14:
  v5 = 0;
  if ((*((_BYTE *)this + 28) & 2) == 0)
    goto LABEL_15;
LABEL_9:
  v6 = *((float *)this + 4);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  return v3 ^ v1 ^ v5 ^ v7;
}

void CMMsl::KMVelocityEstimatorState::~KMVelocityEstimatorState(CMMsl::KMVelocityEstimatorState *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::KMVelocityEstimatorState::KMVelocityEstimatorState(CMMsl::KMVelocityEstimatorState *this, const CMMsl::KMVelocityEstimatorState *a2)
{
  __int16 v2;
  __int16 v3;
  double result;
  char v5;
  char v6;
  char v7;

  *(_QWORD *)this = off_100351E18;
  *((_DWORD *)this + 13) = 0;
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    v3 = 1;
    *((_WORD *)this + 26) = 1;
    *((double *)this + 1) = result;
    v2 = *((_WORD *)a2 + 26);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 9);
    v3 |= 0x20u;
    *((_WORD *)this + 26) = v3;
    *((_DWORD *)this + 9) = LODWORD(result);
    v2 = *((_WORD *)a2 + 26);
  }
LABEL_6:
  if ((v2 & 0x40) != 0)
  {
    LODWORD(result) = *((_DWORD *)a2 + 10);
    v3 |= 0x40u;
    *((_WORD *)this + 26) = v3;
    *((_DWORD *)this + 10) = LODWORD(result);
    v2 = *((_WORD *)a2 + 26);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(result) = *((_DWORD *)a2 + 11);
  v3 |= 0x80u;
  *((_WORD *)this + 26) = v3;
  *((_DWORD *)this + 11) = LODWORD(result);
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  LODWORD(result) = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *((_WORD *)this + 26) = v3;
  *((_DWORD *)this + 6) = LODWORD(result);
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  LODWORD(result) = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((_WORD *)this + 26) = v3;
  *((_DWORD *)this + 7) = LODWORD(result);
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x10) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  LODWORD(result) = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *((_WORD *)this + 26) = v3;
  *((_DWORD *)this + 8) = LODWORD(result);
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  v5 = *((_BYTE *)a2 + 48);
  v3 |= 0x100u;
  *((_WORD *)this + 26) = v3;
  *((_BYTE *)this + 48) = v5;
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  v6 = *((_BYTE *)a2 + 49);
  v3 |= 0x200u;
  *((_WORD *)this + 26) = v3;
  *((_BYTE *)this + 49) = v6;
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x400) == 0)
  {
LABEL_14:
    if ((v2 & 2) == 0)
      return result;
LABEL_24:
    result = *((double *)a2 + 2);
    *((_WORD *)this + 26) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
LABEL_23:
  v7 = *((_BYTE *)a2 + 50);
  v3 |= 0x400u;
  *((_WORD *)this + 26) = v3;
  *((_BYTE *)this + 50) = v7;
  if ((*((_WORD *)a2 + 26) & 2) != 0)
    goto LABEL_24;
  return result;
}

CMMsl *CMMsl::KMVelocityEstimatorState::operator=(CMMsl *a1, const CMMsl::KMVelocityEstimatorState *a2)
{
  CMMsl::KMVelocityEstimatorState *v3;
  _BYTE v5[56];

  if (a1 != a2)
  {
    CMMsl::KMVelocityEstimatorState::KMVelocityEstimatorState((CMMsl::KMVelocityEstimatorState *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KMVelocityEstimatorState *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::KMVelocityEstimatorState *a2, CMMsl::KMVelocityEstimatorState *a3)
{
  int v3;
  uint64_t v4;
  double result;

  v3 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LOBYTE(v3) = *((_BYTE *)this + 48);
  *((_BYTE *)this + 48) = *((_BYTE *)a2 + 48);
  *((_BYTE *)a2 + 48) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 49);
  *((_BYTE *)this + 49) = *((_BYTE *)a2 + 49);
  *((_BYTE *)a2 + 49) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 50);
  *((_BYTE *)this + 50) = *((_BYTE *)a2 + 50);
  *((_BYTE *)a2 + 50) = v3;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::KMVelocityEstimatorState::KMVelocityEstimatorState(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100351E18;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 50);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

CMMsl *CMMsl::KMVelocityEstimatorState::operator=(CMMsl *this, uint64_t a2, CMMsl::KMVelocityEstimatorState *a3)
{
  __int128 v4;
  void (**v6)(CMMsl::KMVelocityEstimatorState *__hidden);
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  char v10;
  __int16 v11;
  int v12;

  if (this != (CMMsl *)a2)
  {
    v6 = off_100351E18;
    v12 = *(_DWORD *)(a2 + 52);
    *(_DWORD *)(a2 + 52) = 0;
    v9 = *(_QWORD *)(a2 + 40);
    v4 = *(_OWORD *)(a2 + 24);
    v10 = *(_BYTE *)(a2 + 48);
    v11 = *(_WORD *)(a2 + 49);
    v7 = *(_OWORD *)(a2 + 8);
    v8 = v4;
    CMMsl::swap(this, (CMMsl::KMVelocityEstimatorState *)&v6, a3);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return this;
}

uint64_t CMMsl::KMVelocityEstimatorState::formatText(CMMsl::KMVelocityEstimatorState *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 26);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    v5 = *((_WORD *)this + 26);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
  v5 = *((_WORD *)this + 26);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "validX", *((_BYTE *)this + 48));
  v5 = *((_WORD *)this + 26);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "validY", *((_BYTE *)this + 49));
  v5 = *((_WORD *)this + 26);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "validZ", *((_BYTE *)this + 50));
  v5 = *((_WORD *)this + 26);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "velocityUncX", *((float *)this + 6));
  v5 = *((_WORD *)this + 26);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "velocityUncY", *((float *)this + 7));
  v5 = *((_WORD *)this + 26);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "velocityUncZ", *((float *)this + 8));
  v5 = *((_WORD *)this + 26);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(a2, "velocityY", *((float *)this + 10));
    if ((*((_WORD *)this + 26) & 0x80) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "velocityX", *((float *)this + 9));
  v5 = *((_WORD *)this + 26);
  if ((v5 & 0x40) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x80) != 0)
LABEL_12:
    PB::TextFormatter::format(a2, "velocityZ", *((float *)this + 11));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KMVelocityEstimatorState::readFrom(CMMsl::KMVelocityEstimatorState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  int v22;
  BOOL v23;
  uint64_t result;
  int v25;
  BOOL v26;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_WORD *)this + 26) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_50;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_62;
        case 2u:
          *((_WORD *)this + 26) |= 0x20u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_50;
          *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_43;
        case 3u:
          *((_WORD *)this + 26) |= 0x40u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_50;
          *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_43;
        case 4u:
          *((_WORD *)this + 26) |= 0x80u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_50;
          *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_43;
        case 5u:
          *((_WORD *)this + 26) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_50;
          *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_43;
        case 6u:
          *((_WORD *)this + 26) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_50;
          *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_43;
        case 7u:
          *((_WORD *)this + 26) |= 0x10u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_50;
          *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_43:
          v2 = *((_QWORD *)a2 + 1) + 4;
          goto LABEL_63;
        case 8u:
          *((_WORD *)this + 26) |= 0x100u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 >= *((_QWORD *)a2 + 2))
          {
            v21 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v21 = v20 != 0;
          }
          *((_BYTE *)this + 48) = v21;
          break;
        case 9u:
          *((_WORD *)this + 26) |= 0x200u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 >= *((_QWORD *)a2 + 2))
          {
            v26 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v25 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v26 = v25 != 0;
          }
          *((_BYTE *)this + 49) = v26;
          break;
        case 0xAu:
          *((_WORD *)this + 26) |= 0x400u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 >= *((_QWORD *)a2 + 2))
          {
            v23 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v22 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v23 = v22 != 0;
          }
          *((_BYTE *)this + 50) = v23;
          break;
        case 0xBu:
          *((_WORD *)this + 26) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_62:
            v2 = *((_QWORD *)a2 + 1) + 8;
LABEL_63:
            *((_QWORD *)a2 + 1) = v2;
          }
          else
          {
LABEL_50:
            *((_BYTE *)a2 + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KMVelocityEstimatorState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 52);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_WORD *)(v3 + 52);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 2u);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 3u);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 4u);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 5u);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 6u);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 7u);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 48), 8u);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 49), 9u);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 16), 0xBu);
  }
LABEL_22:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 50), 0xAu);
  if ((*(_WORD *)(v3 + 52) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16), 0xBu);
  return this;
}

uint64_t CMMsl::KMVelocityEstimatorState::hash_value(CMMsl::KMVelocityEstimatorState *this)
{
  __int16 v1;
  double v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;

  v1 = *((_WORD *)this + 26);
  if ((v1 & 1) == 0)
  {
    v2 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_3;
LABEL_30:
    v4 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_6;
LABEL_31:
    v6 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_9;
LABEL_32:
    v8 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_12;
LABEL_33:
    v10 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_15;
LABEL_34:
    v12 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_18;
LABEL_35:
    v14 = 0;
    if ((*((_WORD *)this + 26) & 0x100) != 0)
      goto LABEL_21;
    goto LABEL_36;
  }
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_30;
LABEL_3:
  v3 = *((float *)this + 9);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_31;
LABEL_6:
  v5 = *((float *)this + 10);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_32;
LABEL_9:
  v7 = *((float *)this + 11);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_33;
LABEL_12:
  v9 = *((float *)this + 6);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_34;
LABEL_15:
  v11 = *((float *)this + 7);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_35;
LABEL_18:
  v13 = *((float *)this + 8);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((*((_WORD *)this + 26) & 0x100) != 0)
  {
LABEL_21:
    v15 = *((unsigned __int8 *)this + 48);
    if ((*((_WORD *)this + 26) & 0x200) != 0)
      goto LABEL_22;
    goto LABEL_37;
  }
LABEL_36:
  v15 = 0;
  if ((*((_WORD *)this + 26) & 0x200) != 0)
  {
LABEL_22:
    v16 = *((unsigned __int8 *)this + 49);
    if ((*((_WORD *)this + 26) & 0x400) != 0)
      goto LABEL_23;
    goto LABEL_38;
  }
LABEL_37:
  v16 = 0;
  if ((*((_WORD *)this + 26) & 0x400) != 0)
  {
LABEL_23:
    v17 = *((unsigned __int8 *)this + 50);
    if ((v1 & 2) != 0)
      goto LABEL_24;
LABEL_39:
    v18 = 0.0;
    return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v15 ^ v16 ^ v17 ^ *(_QWORD *)&v18;
  }
LABEL_38:
  v17 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_39;
LABEL_24:
  v18 = *((double *)this + 2);
  if (v18 == 0.0)
    v18 = 0.0;
  return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v15 ^ v16 ^ v17 ^ *(_QWORD *)&v18;
}

void CMMsl::KappaActivityPhone::~KappaActivityPhone(CMMsl::KappaActivityPhone *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = off_100351E50;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 2) = v5;
    operator delete(v5);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::KappaActivityPhone::~KappaActivityPhone(this);
  operator delete();
}

CMMsl::KappaActivityPhone *CMMsl::KappaActivityPhone::KappaActivityPhone(CMMsl::KappaActivityPhone *this, const CMMsl::KappaActivityPhone *a2)
{
  char *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  int v9;
  int v11;
  int v12;
  int v13;

  *(_QWORD *)this = off_100351E50;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 35) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  if ((*((_BYTE *)a2 + 140) & 1) != 0)
  {
    v5 = *((_QWORD *)a2 + 13);
    *((_BYTE *)this + 140) = 1;
    *((_QWORD *)this + 13) = v5;
  }
  if (this != a2)
    sub_100020CE4(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  if ((*((_BYTE *)a2 + 140) & 4) != 0)
  {
    v6 = *((_DWORD *)a2 + 30);
    *((_BYTE *)this + 140) |= 4u;
    *((_DWORD *)this + 30) = v6;
  }
  if (this != a2)
    sub_100020CE4((char *)this + 80, *((char **)a2 + 10), *((_QWORD *)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 2);
  if ((*((_BYTE *)a2 + 140) & 2) != 0)
  {
    v7 = *((_QWORD *)a2 + 14);
    *((_BYTE *)this + 140) |= 2u;
    *((_QWORD *)this + 14) = v7;
  }
  if (this != a2)
  {
    sub_100020CE4((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
    sub_100020CE4((char *)this + 56, *((char **)a2 + 7), *((_QWORD *)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 2);
  }
  v8 = *((_BYTE *)a2 + 140);
  if ((v8 & 0x20) != 0)
  {
    v11 = *((_DWORD *)a2 + 33);
    *((_BYTE *)this + 140) |= 0x20u;
    *((_DWORD *)this + 33) = v11;
    v8 = *((_BYTE *)a2 + 140);
    if ((v8 & 8) == 0)
    {
LABEL_15:
      if ((v8 & 0x10) == 0)
        goto LABEL_16;
LABEL_21:
      v13 = *((_DWORD *)a2 + 32);
      *((_BYTE *)this + 140) |= 0x10u;
      *((_DWORD *)this + 32) = v13;
      if ((*((_BYTE *)a2 + 140) & 0x40) == 0)
        return this;
      goto LABEL_17;
    }
  }
  else if ((*((_BYTE *)a2 + 140) & 8) == 0)
  {
    goto LABEL_15;
  }
  v12 = *((_DWORD *)a2 + 31);
  *((_BYTE *)this + 140) |= 8u;
  *((_DWORD *)this + 31) = v12;
  v8 = *((_BYTE *)a2 + 140);
  if ((v8 & 0x10) != 0)
    goto LABEL_21;
LABEL_16:
  if ((v8 & 0x40) != 0)
  {
LABEL_17:
    v9 = *((_DWORD *)a2 + 34);
    *((_BYTE *)this + 140) |= 0x40u;
    *((_DWORD *)this + 34) = v9;
  }
  return this;
}

CMMsl *CMMsl::KappaActivityPhone::operator=(CMMsl *a1, const CMMsl::KappaActivityPhone *a2)
{
  CMMsl::KappaActivityPhone *v3;
  _BYTE v5[144];

  if (a1 != a2)
  {
    CMMsl::KappaActivityPhone::KappaActivityPhone((CMMsl::KappaActivityPhone *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaActivityPhone *)v5, v3);
    CMMsl::KappaActivityPhone::~KappaActivityPhone((CMMsl::KappaActivityPhone *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaActivityPhone *a2, CMMsl::KappaActivityPhone *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  float result;

  v3 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  LODWORD(v6) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v6;
  v7 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v7;
  v8 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v8;
  v10 = *((_QWORD *)this + 12);
  v9 = *((_QWORD *)this + 13);
  v11 = *((_QWORD *)a2 + 13);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)this + 13) = v11;
  *((_QWORD *)a2 + 12) = v10;
  *((_QWORD *)a2 + 13) = v9;
  v12 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v12;
  v13 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v13;
  v14 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v14;
  v15 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v15;
  v16 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v16;
  v17 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v17;
  v18 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v18;
  v19 = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v19;
  v20 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v20;
  v21 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v21;
  result = *((float *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((float *)a2 + 34) = result;
  return result;
}

uint64_t CMMsl::KappaActivityPhone::KappaActivityPhone(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = off_100351E50;
  v4 = a1 + 32;
  v5 = a1 + 80;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v6 = a1 + 56;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a2 + 140) = 0;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  sub_100239458(v5, (__n128 *)(a2 + 80));
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  sub_100239458(v4, (__n128 *)(a2 + 32));
  sub_100239458(v6, (__n128 *)(a2 + 56));
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  return a1;
}

CMMsl *CMMsl::KappaActivityPhone::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::KappaActivityPhone *v3;
  _BYTE v5[144];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaActivityPhone::KappaActivityPhone((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaActivityPhone *)v5, v3);
    CMMsl::KappaActivityPhone::~KappaActivityPhone((CMMsl::KappaActivityPhone *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaActivityPhone::formatText(CMMsl::KappaActivityPhone *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;
  char v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  char v15;
  float *v16;
  float *v17;
  float v18;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 140) & 4) != 0)
    PB::TextFormatter::format(a2, "armTimeActivityHints", *((_DWORD *)this + 30));
  v5 = (float *)*((_QWORD *)this + 1);
  v6 = (float *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "armTimeImuConfidences", v7);
  }
  v8 = *((_BYTE *)this + 140);
  if ((v8 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "sessionBtHintPercentage", *((float *)this + 31));
    v8 = *((_BYTE *)this + 140);
    if ((v8 & 0x10) == 0)
    {
LABEL_7:
      if ((v8 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  else if ((*((_BYTE *)this + 140) & 0x10) == 0)
  {
    goto LABEL_7;
  }
  PB::TextFormatter::format(a2, "sessionGpsHintPercentage", *((float *)this + 32));
  if ((*((_BYTE *)this + 140) & 0x20) != 0)
LABEL_8:
    PB::TextFormatter::format(a2, "sessionImuHintPercentage", *((float *)this + 33));
LABEL_9:
  v9 = (unsigned int *)*((_QWORD *)this + 4);
  v10 = (unsigned int *)*((_QWORD *)this + 5);
  while (v9 != v10)
  {
    v11 = *v9++;
    PB::TextFormatter::format(a2, "sessionSwivelAngleDegHistogram", v11);
  }
  v12 = (unsigned int *)*((_QWORD *)this + 7);
  v13 = (unsigned int *)*((_QWORD *)this + 8);
  while (v12 != v13)
  {
    v14 = *v12++;
    PB::TextFormatter::format(a2, "sessionTiltAngleDegHistogram", v14);
  }
  v15 = *((_BYTE *)this + 140);
  if ((v15 & 0x40) != 0)
  {
    PB::TextFormatter::format(a2, "sessionWifiHintPercentage", *((float *)this + 34));
    v15 = *((_BYTE *)this + 140);
    if ((v15 & 1) == 0)
    {
LABEL_15:
      if ((v15 & 2) == 0)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  else if ((*((_BYTE *)this + 140) & 1) == 0)
  {
    goto LABEL_15;
  }
  PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 13));
  if ((*((_BYTE *)this + 140) & 2) != 0)
LABEL_16:
    PB::TextFormatter::format(a2, "triggerTimeLastHighImuDrivingConfidenceTimestamp", *((_QWORD *)this + 14));
LABEL_17:
  v16 = (float *)*((_QWORD *)this + 10);
  v17 = (float *)*((_QWORD *)this + 11);
  while (v16 != v17)
  {
    v18 = *v16++;
    PB::TextFormatter::format(a2, "windowAfterArmImuConfidences", v18);
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::KappaActivityPhone::readFrom(CMMsl::KappaActivityPhone *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  _QWORD *v8;
  _QWORD *v9;
  void **v10;
  char *v11;
  void **v12;
  char *v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  char v23;
  int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  _DWORD *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  _DWORD *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  char *v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  int v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  BOOL v91;
  char v92;
  unsigned int v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  char v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  char *v108;
  char *v109;
  int v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  char v115;
  unsigned int v116;
  uint64_t v117;
  unint64_t v118;
  char v119;
  char v120;
  unsigned int v121;
  uint64_t v122;
  unint64_t v123;
  char v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  char v129;
  unsigned int v130;
  unint64_t v131;
  char v132;
  unint64_t v133;
  char *v134;
  _DWORD *v135;
  char v136;
  unsigned int v137;
  unint64_t v138;
  char v139;
  unint64_t v140;
  char *v141;
  char v142;
  unsigned int v143;
  unint64_t v144;
  char v145;
  unint64_t v146;
  char *v147;
  _DWORD *v148;
  unint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  char *v174;
  char *v175;
  int v176;
  char *v177;
  int v178;
  unint64_t v179;
  char *v180;
  int v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  char v185;
  unsigned int v186;
  unint64_t v188;
  char v189;
  uint64_t v190;
  unint64_t v191;
  char v192;
  char *v193;
  int v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t v197;
  char v198;
  unsigned int v199;
  unint64_t v201;
  char v202;
  unint64_t v203;
  char v204;
  void **v207;
  void **v208;
  _BYTE v209[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (_QWORD *)((char *)this + 72);
    v207 = (void **)((char *)this + 32);
    v208 = (void **)((char *)this + 56);
    v9 = (_QWORD *)((char *)this + 48);
    v10 = (void **)((char *)this + 80);
    v11 = (char *)this + 96;
    v12 = (void **)((char *)this + 8);
    v13 = (char *)this + 24;
    while (1)
    {
      v14 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v19 = *(_BYTE *)(v14 + v2);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0)
          break;
        v15 += 7;
        v2 = v18;
        v91 = v16++ > 8;
        if (v91)
          goto LABEL_20;
      }
LABEL_21:
      v25 = v17 & 7;
      if (v25 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v17 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 140) |= 1u;
          v26 = *((_QWORD *)a2 + 1);
          v27 = *((_QWORD *)a2 + 2);
          v28 = *(_QWORD *)a2;
          if (v26 <= 0xFFFFFFFFFFFFFFF5 && v26 + 10 <= v27)
          {
            v29 = 0;
            v30 = 0;
            v31 = 0;
            do
            {
              v32 = v26 + 1;
              *((_QWORD *)a2 + 1) = v26 + 1;
              v33 = *(_BYTE *)(v28 + v26);
              v31 |= (unint64_t)(v33 & 0x7F) << v29;
              if ((v33 & 0x80) == 0)
                goto LABEL_265;
              v29 += 7;
              v26 = v32;
              v91 = v30++ > 8;
            }
            while (!v91);
LABEL_202:
            v31 = 0;
            goto LABEL_265;
          }
          v129 = 0;
          v130 = 0;
          v31 = 0;
          if (v27 <= v26)
            v27 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v27 == v26)
            {
              v31 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v131 = v26 + 1;
              v132 = *(_BYTE *)(v28 + v26);
              *((_QWORD *)a2 + 1) = v131;
              v31 |= (unint64_t)(v132 & 0x7F) << v129;
              if (v132 < 0)
              {
                v129 += 7;
                v26 = v131;
                v91 = v130++ > 8;
                if (v91)
                  goto LABEL_202;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v31 = 0;
            }
            break;
          }
LABEL_265:
          *((_QWORD *)this + 13) = v31;
          goto LABEL_339;
        case 2u:
          if (v25 != 2)
          {
            v134 = (char *)*((_QWORD *)this + 2);
            v133 = *((_QWORD *)this + 3);
            if ((unint64_t)v134 >= v133)
            {
              v151 = (char *)*v12;
              v152 = (v134 - (_BYTE *)*v12) >> 2;
              v153 = v152 + 1;
              if ((unint64_t)(v152 + 1) >> 62)
LABEL_349:
                sub_10000D5F8();
              v154 = v133 - (_QWORD)v151;
              if (v154 >> 1 > v153)
                v153 = v154 >> 1;
              if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFFCLL)
                v155 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v155 = v153;
              if (v155)
              {
                v156 = (char *)sub_100020E2C((uint64_t)v13, v155);
                v151 = (char *)*((_QWORD *)this + 1);
                v134 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v156 = 0;
              }
              v175 = &v156[4 * v152];
              *(_DWORD *)v175 = 0;
              v135 = v175 + 4;
              while (v134 != v151)
              {
                v176 = *((_DWORD *)v134 - 1);
                v134 -= 4;
                *((_DWORD *)v175 - 1) = v176;
                v175 -= 4;
              }
              *((_QWORD *)this + 1) = v175;
              *((_QWORD *)this + 2) = v135;
              *((_QWORD *)this + 3) = &v156[4 * v155];
              if (v151)
                operator delete(v151);
            }
            else
            {
              *(_DWORD *)v134 = 0;
              v135 = v134 + 4;
            }
            *((_QWORD *)this + 2) = v135;
            goto LABEL_286;
          }
          if ((PB::Reader::placeMark(a2, v209) & 1) != 0)
            return 0;
          v34 = *((_QWORD *)a2 + 1);
          v35 = *((_QWORD *)a2 + 2);
          while (v34 < v35 && !*((_BYTE *)a2 + 24))
          {
            v37 = (char *)*((_QWORD *)this + 2);
            v36 = *((_QWORD *)this + 3);
            if ((unint64_t)v37 >= v36)
            {
              v39 = (char *)*v12;
              v40 = (v37 - (_BYTE *)*v12) >> 2;
              v41 = v40 + 1;
              if ((unint64_t)(v40 + 1) >> 62)
                goto LABEL_349;
              v42 = v36 - (_QWORD)v39;
              if (v42 >> 1 > v41)
                v41 = v42 >> 1;
              if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
                v43 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v43 = v41;
              if (v43)
              {
                v44 = (char *)sub_100020E2C((uint64_t)v13, v43);
                v39 = (char *)*((_QWORD *)this + 1);
                v37 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v44 = 0;
              }
              v45 = &v44[4 * v40];
              *(_DWORD *)v45 = 0;
              v38 = v45 + 4;
              while (v37 != v39)
              {
                v46 = *((_DWORD *)v37 - 1);
                v37 -= 4;
                *((_DWORD *)v45 - 1) = v46;
                v45 -= 4;
              }
              *((_QWORD *)this + 1) = v45;
              *((_QWORD *)this + 2) = v38;
              *((_QWORD *)this + 3) = &v44[4 * v43];
              if (v39)
                operator delete(v39);
            }
            else
            {
              *(_DWORD *)v37 = 0;
              v38 = v37 + 4;
            }
            *((_QWORD *)this + 2) = v38;
            v47 = *((_QWORD *)a2 + 1);
            if (v47 > 0xFFFFFFFFFFFFFFFBLL || v47 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_226;
            *(v38 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v47);
            v35 = *((_QWORD *)a2 + 2);
            v34 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v34;
          }
          goto LABEL_227;
        case 3u:
          *((_BYTE *)this + 140) |= 4u;
          v48 = *((_QWORD *)a2 + 1);
          v49 = *((_QWORD *)a2 + 2);
          v50 = *(_QWORD *)a2;
          if (v48 <= 0xFFFFFFFFFFFFFFF5 && v48 + 10 <= v49)
          {
            v51 = 0;
            v52 = 0;
            v53 = 0;
            do
            {
              v54 = v48 + 1;
              *((_QWORD *)a2 + 1) = v48 + 1;
              v55 = *(_BYTE *)(v50 + v48);
              v53 |= (unint64_t)(v55 & 0x7F) << v51;
              if ((v55 & 0x80) == 0)
                goto LABEL_268;
              v51 += 7;
              v48 = v54;
              v91 = v52++ > 8;
            }
            while (!v91);
LABEL_211:
            LODWORD(v53) = 0;
            goto LABEL_268;
          }
          v136 = 0;
          v137 = 0;
          v53 = 0;
          if (v49 <= v48)
            v49 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v49 == v48)
            {
              LODWORD(v53) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v138 = v48 + 1;
              v139 = *(_BYTE *)(v50 + v48);
              *((_QWORD *)a2 + 1) = v138;
              v53 |= (unint64_t)(v139 & 0x7F) << v136;
              if (v139 < 0)
              {
                v136 += 7;
                v48 = v138;
                v91 = v137++ > 8;
                if (v91)
                  goto LABEL_211;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v53) = 0;
            }
            break;
          }
LABEL_268:
          *((_DWORD *)this + 30) = v53;
          goto LABEL_339;
        case 4u:
          if (v25 != 2)
          {
            v141 = (char *)*((_QWORD *)this + 11);
            v140 = *((_QWORD *)this + 12);
            if ((unint64_t)v141 >= v140)
            {
              v157 = (char *)*v10;
              v158 = (v141 - (_BYTE *)*v10) >> 2;
              v159 = v158 + 1;
              if ((unint64_t)(v158 + 1) >> 62)
LABEL_350:
                sub_10000D5F8();
              v160 = v140 - (_QWORD)v157;
              if (v160 >> 1 > v159)
                v159 = v160 >> 1;
              if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFFCLL)
                v161 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v161 = v159;
              if (v161)
              {
                v162 = (char *)sub_100020E2C((uint64_t)v11, v161);
                v157 = (char *)*((_QWORD *)this + 10);
                v141 = (char *)*((_QWORD *)this + 11);
              }
              else
              {
                v162 = 0;
              }
              v177 = &v162[4 * v158];
              *(_DWORD *)v177 = 0;
              v135 = v177 + 4;
              while (v141 != v157)
              {
                v178 = *((_DWORD *)v141 - 1);
                v141 -= 4;
                *((_DWORD *)v177 - 1) = v178;
                v177 -= 4;
              }
              *((_QWORD *)this + 10) = v177;
              *((_QWORD *)this + 11) = v135;
              *((_QWORD *)this + 12) = &v162[4 * v161];
              if (v157)
                operator delete(v157);
            }
            else
            {
              *(_DWORD *)v141 = 0;
              v135 = v141 + 4;
            }
            *((_QWORD *)this + 11) = v135;
LABEL_286:
            v179 = *((_QWORD *)a2 + 1);
            if (v179 <= 0xFFFFFFFFFFFFFFFBLL && v179 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v135 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v179);
LABEL_290:
              *((_QWORD *)a2 + 1) += 4;
            }
            else
            {
LABEL_288:
              *((_BYTE *)a2 + 24) = 1;
            }
            goto LABEL_339;
          }
          if ((PB::Reader::placeMark(a2, v209) & 1) != 0)
            return 0;
          v56 = *((_QWORD *)a2 + 1);
          v57 = *((_QWORD *)a2 + 2);
          while (v56 < v57 && !*((_BYTE *)a2 + 24))
          {
            v59 = (char *)*((_QWORD *)this + 11);
            v58 = *((_QWORD *)this + 12);
            if ((unint64_t)v59 >= v58)
            {
              v61 = (char *)*v10;
              v62 = (v59 - (_BYTE *)*v10) >> 2;
              v63 = v62 + 1;
              if ((unint64_t)(v62 + 1) >> 62)
                goto LABEL_350;
              v64 = v58 - (_QWORD)v61;
              if (v64 >> 1 > v63)
                v63 = v64 >> 1;
              if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL)
                v65 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v65 = v63;
              if (v65)
              {
                v66 = (char *)sub_100020E2C((uint64_t)v11, v65);
                v61 = (char *)*((_QWORD *)this + 10);
                v59 = (char *)*((_QWORD *)this + 11);
              }
              else
              {
                v66 = 0;
              }
              v67 = &v66[4 * v62];
              *(_DWORD *)v67 = 0;
              v60 = v67 + 4;
              while (v59 != v61)
              {
                v68 = *((_DWORD *)v59 - 1);
                v59 -= 4;
                *((_DWORD *)v67 - 1) = v68;
                v67 -= 4;
              }
              *((_QWORD *)this + 10) = v67;
              *((_QWORD *)this + 11) = v60;
              *((_QWORD *)this + 12) = &v66[4 * v65];
              if (v61)
                operator delete(v61);
            }
            else
            {
              *(_DWORD *)v59 = 0;
              v60 = v59 + 4;
            }
            *((_QWORD *)this + 11) = v60;
            v69 = *((_QWORD *)a2 + 1);
            if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((_QWORD *)a2 + 2))
            {
LABEL_226:
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_227;
            }
            *(v60 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v69);
            v57 = *((_QWORD *)a2 + 2);
            v56 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v56;
          }
          goto LABEL_227;
        case 5u:
          *((_BYTE *)this + 140) |= 2u;
          v70 = *((_QWORD *)a2 + 1);
          v71 = *((_QWORD *)a2 + 2);
          v72 = *(_QWORD *)a2;
          if (v70 <= 0xFFFFFFFFFFFFFFF5 && v70 + 10 <= v71)
          {
            v73 = 0;
            v74 = 0;
            v75 = 0;
            do
            {
              v76 = v70 + 1;
              *((_QWORD *)a2 + 1) = v70 + 1;
              v77 = *(_BYTE *)(v72 + v70);
              v75 |= (unint64_t)(v77 & 0x7F) << v73;
              if ((v77 & 0x80) == 0)
                goto LABEL_271;
              v73 += 7;
              v70 = v76;
              v91 = v74++ > 8;
            }
            while (!v91);
LABEL_220:
            v75 = 0;
            goto LABEL_271;
          }
          v142 = 0;
          v143 = 0;
          v75 = 0;
          if (v71 <= v70)
            v71 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v71 == v70)
            {
              v75 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v144 = v70 + 1;
              v145 = *(_BYTE *)(v72 + v70);
              *((_QWORD *)a2 + 1) = v144;
              v75 |= (unint64_t)(v145 & 0x7F) << v142;
              if (v145 < 0)
              {
                v142 += 7;
                v70 = v144;
                v91 = v143++ > 8;
                if (v91)
                  goto LABEL_220;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v75 = 0;
            }
            break;
          }
LABEL_271:
          *((_QWORD *)this + 14) = v75;
          goto LABEL_339;
        case 6u:
          if (v25 == 2)
          {
            if ((PB::Reader::placeMark(a2, v209) & 1) != 0)
              return 0;
            if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
            {
              v78 = (char *)*((_QWORD *)this + 5);
              do
              {
                if ((unint64_t)v78 >= *v9)
                {
                  v79 = (char *)*v207;
                  v80 = (v78 - (_BYTE *)*v207) >> 2;
                  v81 = v80 + 1;
                  if ((unint64_t)(v80 + 1) >> 62)
                    goto LABEL_351;
                  v82 = *v9 - (_QWORD)v79;
                  if (v82 >> 1 > v81)
                    v81 = v82 >> 1;
                  if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL)
                    v83 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v83 = v81;
                  if (v83)
                  {
                    v84 = (char *)sub_100020E2C((uint64_t)v9, v83);
                    v79 = (char *)*((_QWORD *)this + 4);
                    v78 = (char *)*((_QWORD *)this + 5);
                  }
                  else
                  {
                    v84 = 0;
                  }
                  v85 = &v84[4 * v80];
                  *(_DWORD *)v85 = 0;
                  v86 = v85 + 4;
                  while (v78 != v79)
                  {
                    v87 = *((_DWORD *)v78 - 1);
                    v78 -= 4;
                    *((_DWORD *)v85 - 1) = v87;
                    v85 -= 4;
                  }
                  *((_QWORD *)this + 4) = v85;
                  *((_QWORD *)this + 5) = v86;
                  *((_QWORD *)this + 6) = &v84[4 * v83];
                  if (v79)
                    operator delete(v79);
                  v78 = v86;
                }
                else
                {
                  *(_DWORD *)v78 = 0;
                  v78 += 4;
                }
                *((_QWORD *)this + 5) = v78;
                v89 = *((_QWORD *)a2 + 1);
                v88 = *((_QWORD *)a2 + 2);
                v90 = *(_QWORD *)a2;
                v91 = v89 > 0xFFFFFFFFFFFFFFF5 || v89 + 10 > v88;
                if (v91)
                {
                  v92 = 0;
                  v93 = 0;
                  v99 = 0;
                  if (v88 <= v89)
                    v94 = *((_QWORD *)a2 + 1);
                  else
                    v94 = *((_QWORD *)a2 + 2);
                  while (1)
                  {
                    if (v94 == v89)
                      goto LABEL_225;
                    v95 = v89++;
                    v96 = *(_BYTE *)(v90 + v95);
                    *((_QWORD *)a2 + 1) = v89;
                    v99 |= (unint64_t)(v96 & 0x7F) << v92;
                    if ((v96 & 0x80) == 0)
                      break;
                    v92 += 7;
                    v91 = v93++ > 8;
                    if (v91)
                    {
                      LODWORD(v99) = 0;
                      goto LABEL_135;
                    }
                  }
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v99) = 0;
LABEL_135:
                  v100 = v95 + 1;
                }
                else
                {
                  v97 = 0;
                  v98 = 0;
                  v99 = 0;
                  while (1)
                  {
                    v100 = v89 + 1;
                    *((_QWORD *)a2 + 1) = v89 + 1;
                    v101 = *(_BYTE *)(v90 + v89);
                    v99 |= (unint64_t)(v101 & 0x7F) << v97;
                    if ((v101 & 0x80) == 0)
                      break;
                    v97 += 7;
                    v89 = v100;
                    v91 = v98++ > 8;
                    if (v91)
                    {
                      LODWORD(v99) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v78 - 1) = v99;
              }
              while (v100 < v88 && !*((_BYTE *)a2 + 24));
            }
            goto LABEL_227;
          }
          v147 = (char *)*((_QWORD *)this + 5);
          v146 = *((_QWORD *)this + 6);
          if ((unint64_t)v147 >= v146)
          {
            v163 = (char *)*v207;
            v164 = (v147 - (_BYTE *)*v207) >> 2;
            v165 = v164 + 1;
            if ((unint64_t)(v164 + 1) >> 62)
LABEL_351:
              sub_10000D5F8();
            v166 = v146 - (_QWORD)v163;
            if (v166 >> 1 > v165)
              v165 = v166 >> 1;
            if ((unint64_t)v166 >= 0x7FFFFFFFFFFFFFFCLL)
              v167 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v167 = v165;
            if (v167)
            {
              v168 = (char *)sub_100020E2C((uint64_t)v9, v167);
              v163 = (char *)*((_QWORD *)this + 4);
              v147 = (char *)*((_QWORD *)this + 5);
            }
            else
            {
              v168 = 0;
            }
            v180 = &v168[4 * v164];
            *(_DWORD *)v180 = 0;
            v148 = v180 + 4;
            while (v147 != v163)
            {
              v181 = *((_DWORD *)v147 - 1);
              v147 -= 4;
              *((_DWORD *)v180 - 1) = v181;
              v180 -= 4;
            }
            *((_QWORD *)this + 4) = v180;
            *((_QWORD *)this + 5) = v148;
            *((_QWORD *)this + 6) = &v168[4 * v167];
            if (v163)
              operator delete(v163);
          }
          else
          {
            *(_DWORD *)v147 = 0;
            v148 = v147 + 4;
          }
          *((_QWORD *)this + 5) = v148;
          v182 = *((_QWORD *)a2 + 1);
          v183 = *((_QWORD *)a2 + 2);
          v184 = *(_QWORD *)a2;
          v185 = 0;
          v186 = 0;
          if (v182 <= 0xFFFFFFFFFFFFFFF5 && v182 + 10 <= v183)
          {
            v190 = 0;
            while (1)
            {
              v191 = v182 + 1;
              *((_QWORD *)a2 + 1) = v182 + 1;
              v192 = *(_BYTE *)(v184 + v182);
              v190 |= (unint64_t)(v192 & 0x7F) << v185;
              if ((v192 & 0x80) == 0)
                goto LABEL_338;
              v185 += 7;
              v182 = v191;
              v91 = v186++ > 8;
              if (v91)
                goto LABEL_334;
            }
          }
          v190 = 0;
          if (v183 <= v182)
            v183 = *((_QWORD *)a2 + 1);
          while (v183 != v182)
          {
            v188 = v182 + 1;
            v189 = *(_BYTE *)(v184 + v182);
            *((_QWORD *)a2 + 1) = v188;
            v190 |= (unint64_t)(v189 & 0x7F) << v185;
            if ((v189 & 0x80) == 0)
              goto LABEL_336;
            v185 += 7;
            v182 = v188;
            v91 = v186++ > 8;
            if (v91)
              goto LABEL_334;
          }
          goto LABEL_335;
        case 7u:
          if (v25 == 2)
          {
            if ((PB::Reader::placeMark(a2, v209) & 1) != 0)
              return 0;
            if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
            {
              v78 = (char *)*((_QWORD *)this + 8);
              do
              {
                if ((unint64_t)v78 >= *v8)
                {
                  v102 = (char *)*v208;
                  v103 = (v78 - (_BYTE *)*v208) >> 2;
                  v104 = v103 + 1;
                  if ((unint64_t)(v103 + 1) >> 62)
                    goto LABEL_352;
                  v105 = *v8 - (_QWORD)v102;
                  if (v105 >> 1 > v104)
                    v104 = v105 >> 1;
                  if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFFCLL)
                    v106 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v106 = v104;
                  if (v106)
                  {
                    v107 = (char *)sub_100020E2C((uint64_t)v8, v106);
                    v102 = (char *)*((_QWORD *)this + 7);
                    v78 = (char *)*((_QWORD *)this + 8);
                  }
                  else
                  {
                    v107 = 0;
                  }
                  v108 = &v107[4 * v103];
                  *(_DWORD *)v108 = 0;
                  v109 = v108 + 4;
                  while (v78 != v102)
                  {
                    v110 = *((_DWORD *)v78 - 1);
                    v78 -= 4;
                    *((_DWORD *)v108 - 1) = v110;
                    v108 -= 4;
                  }
                  *((_QWORD *)this + 7) = v108;
                  *((_QWORD *)this + 8) = v109;
                  *((_QWORD *)this + 9) = &v107[4 * v106];
                  if (v102)
                    operator delete(v102);
                  v78 = v109;
                }
                else
                {
                  *(_DWORD *)v78 = 0;
                  v78 += 4;
                }
                *((_QWORD *)this + 8) = v78;
                v112 = *((_QWORD *)a2 + 1);
                v111 = *((_QWORD *)a2 + 2);
                v113 = *(_QWORD *)a2;
                if (v112 <= 0xFFFFFFFFFFFFFFF5 && v112 + 10 <= v111)
                {
                  v120 = 0;
                  v121 = 0;
                  v122 = 0;
                  while (1)
                  {
                    v123 = v112 + 1;
                    *((_QWORD *)a2 + 1) = v112 + 1;
                    v124 = *(_BYTE *)(v113 + v112);
                    v122 |= (unint64_t)(v124 & 0x7F) << v120;
                    if ((v124 & 0x80) == 0)
                      goto LABEL_181;
                    v120 += 7;
                    v112 = v123;
                    v91 = v121++ > 8;
                    if (v91)
                    {
                      LODWORD(v122) = 0;
                      goto LABEL_181;
                    }
                  }
                }
                v115 = 0;
                v116 = 0;
                v122 = 0;
                if (v111 <= v112)
                  v117 = *((_QWORD *)a2 + 1);
                else
                  v117 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v117 == v112)
                  {
LABEL_225:
                    *((_BYTE *)a2 + 24) = 1;
                    *((_DWORD *)v78 - 1) = 0;
                    goto LABEL_227;
                  }
                  v118 = v112++;
                  v119 = *(_BYTE *)(v113 + v118);
                  *((_QWORD *)a2 + 1) = v112;
                  v122 |= (unint64_t)(v119 & 0x7F) << v115;
                  if ((v119 & 0x80) == 0)
                    break;
                  v115 += 7;
                  v91 = v116++ > 8;
                  if (v91)
                  {
                    LODWORD(v122) = 0;
                    goto LABEL_180;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v122) = 0;
LABEL_180:
                v123 = v118 + 1;
LABEL_181:
                *((_DWORD *)v78 - 1) = v122;
              }
              while (v123 < v111 && !*((_BYTE *)a2 + 24));
            }
LABEL_227:
            PB::Reader::recallMark(a2, v209);
          }
          else
          {
            v150 = (char *)*((_QWORD *)this + 8);
            v149 = *((_QWORD *)this + 9);
            if ((unint64_t)v150 >= v149)
            {
              v169 = (char *)*v208;
              v170 = (v150 - (_BYTE *)*v208) >> 2;
              v171 = v170 + 1;
              if ((unint64_t)(v170 + 1) >> 62)
LABEL_352:
                sub_10000D5F8();
              v172 = v149 - (_QWORD)v169;
              if (v172 >> 1 > v171)
                v171 = v172 >> 1;
              if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFFCLL)
                v173 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v173 = v171;
              if (v173)
              {
                v174 = (char *)sub_100020E2C((uint64_t)v8, v173);
                v169 = (char *)*((_QWORD *)this + 7);
                v150 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v174 = 0;
              }
              v193 = &v174[4 * v170];
              *(_DWORD *)v193 = 0;
              v148 = v193 + 4;
              while (v150 != v169)
              {
                v194 = *((_DWORD *)v150 - 1);
                v150 -= 4;
                *((_DWORD *)v193 - 1) = v194;
                v193 -= 4;
              }
              *((_QWORD *)this + 7) = v193;
              *((_QWORD *)this + 8) = v148;
              *((_QWORD *)this + 9) = &v174[4 * v173];
              if (v169)
                operator delete(v169);
            }
            else
            {
              *(_DWORD *)v150 = 0;
              v148 = v150 + 4;
            }
            *((_QWORD *)this + 8) = v148;
            v195 = *((_QWORD *)a2 + 1);
            v196 = *((_QWORD *)a2 + 2);
            v197 = *(_QWORD *)a2;
            v198 = 0;
            v199 = 0;
            if (v195 > 0xFFFFFFFFFFFFFFF5 || v195 + 10 > v196)
            {
              v190 = 0;
              if (v196 <= v195)
                v196 = *((_QWORD *)a2 + 1);
              while (v196 != v195)
              {
                v201 = v195 + 1;
                v202 = *(_BYTE *)(v197 + v195);
                *((_QWORD *)a2 + 1) = v201;
                v190 |= (unint64_t)(v202 & 0x7F) << v198;
                if ((v202 & 0x80) == 0)
                {
LABEL_336:
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v190) = 0;
                  goto LABEL_338;
                }
                v198 += 7;
                v195 = v201;
                v91 = v199++ > 8;
                if (v91)
                {
LABEL_334:
                  LODWORD(v190) = 0;
                  goto LABEL_338;
                }
              }
LABEL_335:
              LODWORD(v190) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v190 = 0;
              while (1)
              {
                v203 = v195 + 1;
                *((_QWORD *)a2 + 1) = v195 + 1;
                v204 = *(_BYTE *)(v197 + v195);
                v190 |= (unint64_t)(v204 & 0x7F) << v198;
                if ((v204 & 0x80) == 0)
                  break;
                v198 += 7;
                v195 = v203;
                v91 = v199++ > 8;
                if (v91)
                  goto LABEL_334;
              }
            }
LABEL_338:
            *(v148 - 1) = v190;
          }
LABEL_339:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 8u:
          *((_BYTE *)this + 140) |= 0x20u;
          v125 = *((_QWORD *)a2 + 1);
          if (v125 > 0xFFFFFFFFFFFFFFFBLL || v125 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_288;
          *((_DWORD *)this + 33) = *(_DWORD *)(*(_QWORD *)a2 + v125);
          goto LABEL_290;
        case 9u:
          *((_BYTE *)this + 140) |= 8u;
          v126 = *((_QWORD *)a2 + 1);
          if (v126 > 0xFFFFFFFFFFFFFFFBLL || v126 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_288;
          *((_DWORD *)this + 31) = *(_DWORD *)(*(_QWORD *)a2 + v126);
          goto LABEL_290;
        case 0xAu:
          *((_BYTE *)this + 140) |= 0x10u;
          v127 = *((_QWORD *)a2 + 1);
          if (v127 > 0xFFFFFFFFFFFFFFFBLL || v127 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_288;
          *((_DWORD *)this + 32) = *(_DWORD *)(*(_QWORD *)a2 + v127);
          goto LABEL_290;
        case 0xBu:
          *((_BYTE *)this + 140) |= 0x40u;
          v128 = *((_QWORD *)a2 + 1);
          if (v128 > 0xFFFFFFFFFFFFFFFBLL || v128 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_288;
          *((_DWORD *)this + 34) = *(_DWORD *)(*(_QWORD *)a2 + v128);
          goto LABEL_290;
        default:
          if ((PB::Reader::skip(a2, v17 >> 3, v25, 0) & 1) == 0)
            return 0;
          goto LABEL_339;
      }
    }
    v20 = 0;
    v21 = 0;
    v17 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v22 = v2 + 1;
      v23 = *(_BYTE *)(v14 + v2);
      *((_QWORD *)a2 + 1) = v22;
      v17 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0)
        goto LABEL_21;
      v20 += 7;
      v2 = v22;
      if (v21++ >= 9)
      {
LABEL_20:
        v17 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaActivityPhone::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  char v16;

  v3 = this;
  if ((*(_BYTE *)(this + 140) & 1) != 0)
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 104), 1u);
  v4 = *(float **)(v3 + 8);
  v5 = *(float **)(v3 + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  if ((*(_BYTE *)(v3 + 140) & 4) != 0)
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 120), 3u);
  v7 = *(float **)(v3 + 80);
  v8 = *(float **)(v3 + 88);
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::write(a2, v9, 4u);
  }
  if ((*(_BYTE *)(v3 + 140) & 2) != 0)
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 112), 5u);
  v10 = *(unsigned int **)(v3 + 32);
  v11 = *(unsigned int **)(v3 + 40);
  while (v10 != v11)
  {
    v12 = *v10++;
    this = PB::Writer::writeVarInt(a2, v12, 6u);
  }
  v13 = *(unsigned int **)(v3 + 56);
  v14 = *(unsigned int **)(v3 + 64);
  while (v13 != v14)
  {
    v15 = *v13++;
    this = PB::Writer::writeVarInt(a2, v15, 7u);
  }
  v16 = *(_BYTE *)(v3 + 140);
  if ((v16 & 0x20) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 132), 8u);
    v16 = *(_BYTE *)(v3 + 140);
    if ((v16 & 8) == 0)
    {
LABEL_21:
      if ((v16 & 0x10) == 0)
        goto LABEL_22;
      goto LABEL_26;
    }
  }
  else if ((*(_BYTE *)(v3 + 140) & 8) == 0)
  {
    goto LABEL_21;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 124), 9u);
  v16 = *(_BYTE *)(v3 + 140);
  if ((v16 & 0x10) == 0)
  {
LABEL_22:
    if ((v16 & 0x40) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 136), 0xBu);
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 128), 0xAu);
  if ((*(_BYTE *)(v3 + 140) & 0x40) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 136), 0xBu);
  return this;
}

uint64_t CMMsl::KappaActivityPhone::hash_value(CMMsl::KappaActivityPhone *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;

  if ((*((_BYTE *)this + 140) & 1) != 0)
    v2 = *((_QWORD *)this + 13);
  else
    v2 = 0;
  v3 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  if ((*((_BYTE *)this + 140) & 4) != 0)
    v4 = *((unsigned int *)this + 30);
  else
    v4 = 0;
  v5 = PBHashBytes(*((_QWORD *)this + 10), *((_QWORD *)this + 11) - *((_QWORD *)this + 10));
  if ((*((_BYTE *)this + 140) & 2) != 0)
    v6 = *((_QWORD *)this + 14);
  else
    v6 = 0;
  v7 = PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
  v8 = PBHashBytes(*((_QWORD *)this + 7), *((_QWORD *)this + 8) - *((_QWORD *)this + 7));
  if ((*((_BYTE *)this + 140) & 0x20) == 0)
  {
    v9 = 0;
    if ((*((_BYTE *)this + 140) & 8) != 0)
      goto LABEL_12;
LABEL_24:
    v11 = 0;
    if ((*((_BYTE *)this + 140) & 0x10) != 0)
      goto LABEL_15;
    goto LABEL_25;
  }
  v16 = *((float *)this + 33);
  v9 = LODWORD(v16);
  if (v16 == 0.0)
    v9 = 0;
  if ((*((_BYTE *)this + 140) & 8) == 0)
    goto LABEL_24;
LABEL_12:
  v10 = *((float *)this + 31);
  v11 = LODWORD(v10);
  if (v10 == 0.0)
    v11 = 0;
  if ((*((_BYTE *)this + 140) & 0x10) != 0)
  {
LABEL_15:
    v12 = *((float *)this + 32);
    v13 = LODWORD(v12);
    if (v12 == 0.0)
      v13 = 0;
    if ((*((_BYTE *)this + 140) & 0x40) != 0)
      goto LABEL_18;
LABEL_26:
    v15 = 0;
    return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v11 ^ v13 ^ v15;
  }
LABEL_25:
  v13 = 0;
  if ((*((_BYTE *)this + 140) & 0x40) == 0)
    goto LABEL_26;
LABEL_18:
  v14 = *((float *)this + 34);
  v15 = LODWORD(v14);
  if (v14 == 0.0)
    v15 = 0;
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v11 ^ v13 ^ v15;
}

void CMMsl::KappaActivityWatch::~KappaActivityWatch(CMMsl::KappaActivityWatch *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_100351E88;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::KappaActivityWatch::~KappaActivityWatch(this);
  operator delete();
}

CMMsl::KappaActivityWatch *CMMsl::KappaActivityWatch::KappaActivityWatch(CMMsl::KappaActivityWatch *this, const CMMsl::KappaActivityWatch *a2)
{
  char *v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  __int16 v8;
  int v9;
  int v10;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;

  *(_QWORD *)this = off_100351E88;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *((_DWORD *)this + 26) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if ((*((_WORD *)a2 + 52) & 1) != 0)
  {
    v5 = *((_QWORD *)a2 + 7);
    *((_WORD *)this + 52) = 1;
    *((_QWORD *)this + 7) = v5;
  }
  if (this != a2)
    sub_100020CE4((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
  v6 = *((_WORD *)a2 + 52);
  if ((v6 & 0x100) != 0)
  {
    v12 = *((_DWORD *)a2 + 25);
    *((_WORD *)this + 52) |= 0x100u;
    *((_DWORD *)this + 25) = v12;
    v6 = *((_WORD *)a2 + 52);
    if ((v6 & 0x40) == 0)
    {
LABEL_7:
      if ((v6 & 0x80) == 0)
        goto LABEL_8;
      goto LABEL_21;
    }
  }
  else if ((v6 & 0x40) == 0)
  {
    goto LABEL_7;
  }
  v13 = *((_DWORD *)a2 + 23);
  *((_WORD *)this + 52) |= 0x40u;
  *((_DWORD *)this + 23) = v13;
  v6 = *((_WORD *)a2 + 52);
  if ((v6 & 0x80) == 0)
  {
LABEL_8:
    if ((v6 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  v14 = *((_DWORD *)a2 + 24);
  *((_WORD *)this + 52) |= 0x80u;
  *((_DWORD *)this + 24) = v14;
  v6 = *((_WORD *)a2 + 52);
  if ((v6 & 0x20) == 0)
  {
LABEL_9:
    if ((v6 & 2) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  v15 = *((_DWORD *)a2 + 22);
  *((_WORD *)this + 52) |= 0x20u;
  *((_DWORD *)this + 22) = v15;
  v6 = *((_WORD *)a2 + 52);
  if ((v6 & 2) == 0)
  {
LABEL_10:
    if ((v6 & 4) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_23:
  v16 = *((_QWORD *)a2 + 8);
  *((_WORD *)this + 52) |= 2u;
  *((_QWORD *)this + 8) = v16;
  if ((*((_WORD *)a2 + 52) & 4) != 0)
  {
LABEL_11:
    v7 = *((_QWORD *)a2 + 9);
    *((_WORD *)this + 52) |= 4u;
    *((_QWORD *)this + 9) = v7;
  }
LABEL_12:
  if (this != a2)
    sub_100020CE4(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  v8 = *((_WORD *)a2 + 52);
  if ((v8 & 0x10) != 0)
  {
    v9 = *((_DWORD *)a2 + 21);
    *((_WORD *)this + 52) |= 0x10u;
    *((_DWORD *)this + 21) = v9;
    v8 = *((_WORD *)a2 + 52);
  }
  if ((v8 & 8) != 0)
  {
    v10 = *((_DWORD *)a2 + 20);
    *((_WORD *)this + 52) |= 8u;
    *((_DWORD *)this + 20) = v10;
  }
  return this;
}

CMMsl *CMMsl::KappaActivityWatch::operator=(CMMsl *a1, const CMMsl::KappaActivityWatch *a2)
{
  CMMsl::KappaActivityWatch *v3;
  _BYTE v5[112];

  if (a1 != a2)
  {
    CMMsl::KappaActivityWatch::KappaActivityWatch((CMMsl::KappaActivityWatch *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaActivityWatch *)v5, v3);
    CMMsl::KappaActivityWatch::~KappaActivityWatch((CMMsl::KappaActivityWatch *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaActivityWatch *a2, CMMsl::KappaActivityWatch *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  float result;

  v3 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v5;
  v7 = *((_QWORD *)this + 6);
  v6 = *((_QWORD *)this + 7);
  v8 = *((_QWORD *)a2 + 7);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)this + 7) = v8;
  *((_QWORD *)a2 + 6) = v7;
  *((_QWORD *)a2 + 7) = v6;
  v9 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v9;
  v10 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v10;
  v11 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v11;
  LODWORD(v6) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v6;
  v12 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v12;
  v13 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v13;
  v14 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v14;
  v15 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v15;
  v16 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v16;
  v17 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v17;
  result = *((float *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((float *)a2 + 20) = result;
  return result;
}

uint64_t CMMsl::KappaActivityWatch::KappaActivityWatch(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_100351E88;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  sub_100239458(a1 + 32, (__n128 *)(a2 + 32));
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  return a1;
}

CMMsl *CMMsl::KappaActivityWatch::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::KappaActivityWatch *v3;
  _BYTE v5[112];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaActivityWatch::KappaActivityWatch((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaActivityWatch *)v5, v3);
    CMMsl::KappaActivityWatch::~KappaActivityWatch((CMMsl::KappaActivityWatch *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaActivityWatch::formatText(CMMsl::KappaActivityWatch *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  __int16 v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 52);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "sessionGreenFieldPercentage", *((float *)this + 20));
    v5 = *((_WORD *)this + 52);
  }
  if ((v5 & 0x10) != 0)
    PB::TextFormatter::format(a2, "sessionHighRotationPercentage", *((float *)this + 21));
  v6 = (unsigned int *)*((_QWORD *)this + 1);
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "sessionMeanPoseAngleXHistogram", v8);
  }
  v9 = *((_WORD *)this + 52);
  if ((v9 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 7));
    v9 = *((_WORD *)this + 52);
    if ((v9 & 0x20) == 0)
    {
LABEL_9:
      if ((v9 & 2) == 0)
        goto LABEL_10;
      goto LABEL_20;
    }
  }
  else if ((v9 & 0x20) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(a2, "triggerTimeInternalDrivingState", *((_DWORD *)this + 22));
  v9 = *((_WORD *)this + 52);
  if ((v9 & 2) == 0)
  {
LABEL_10:
    if ((v9 & 4) == 0)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "triggerTimeLastHighElevationGainTimestamp", *((_QWORD *)this + 8));
  v9 = *((_WORD *)this + 52);
  if ((v9 & 4) == 0)
  {
LABEL_11:
    if ((v9 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "triggerTimeLastHighImuDrivingConfidenceTimestamp", *((_QWORD *)this + 9));
  v9 = *((_WORD *)this + 52);
  if ((v9 & 0x40) == 0)
  {
LABEL_12:
    if ((v9 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "windowAfterArmGreenFieldPercentage", *((float *)this + 23));
  v9 = *((_WORD *)this + 52);
  if ((v9 & 0x80) == 0)
  {
LABEL_13:
    if ((v9 & 0x100) == 0)
      goto LABEL_15;
    goto LABEL_14;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "windowAfterArmHighImuDrivingConfidencePercentage", *((float *)this + 24));
  if ((*((_WORD *)this + 52) & 0x100) != 0)
LABEL_14:
    PB::TextFormatter::format(a2, "windowAfterArmHighRotationPercentage", *((float *)this + 25));
LABEL_15:
  v10 = (unsigned int *)*((_QWORD *)this + 4);
  v11 = (unsigned int *)*((_QWORD *)this + 5);
  while (v10 != v11)
  {
    v12 = *v10++;
    PB::TextFormatter::format(a2, "windowAfterArmMeanPoseAngleXHistogram", v12);
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::KappaActivityWatch::readFrom(CMMsl::KappaActivityWatch *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  _QWORD *v9;
  void **v10;
  _QWORD *v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  BOOL v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char v62;
  unsigned int v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char v70;
  unsigned int v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char v78;
  unsigned int v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  int v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  char v102;
  unsigned int v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  unint64_t v107;
  char v108;
  unsigned int v109;
  unint64_t v110;
  char v111;
  unint64_t v112;
  char *v113;
  _DWORD *v114;
  char v115;
  unsigned int v116;
  unint64_t v117;
  char v118;
  char v119;
  unsigned int v120;
  unint64_t v121;
  char v122;
  char v123;
  unsigned int v124;
  unint64_t v125;
  char v126;
  unint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char *v140;
  char *v141;
  int v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  char v146;
  unsigned int v147;
  unint64_t v149;
  char v150;
  uint64_t v151;
  unint64_t v152;
  char v153;
  char *v154;
  int v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  char v159;
  unsigned int v160;
  unint64_t v162;
  char v163;
  unint64_t v164;
  char v165;
  _BYTE v168[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 8);
    v9 = (_QWORD *)((char *)this + 24);
    v10 = (void **)((char *)this + 32);
    v11 = (_QWORD *)((char *)this + 48);
    while (1)
    {
      v12 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v45 = v14++ > 8;
        if (v45)
          goto LABEL_20;
      }
LABEL_21:
      v23 = v15 & 7;
      if (v23 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *((_WORD *)this + 52) |= 1u;
          v24 = *((_QWORD *)a2 + 1);
          v25 = *((_QWORD *)a2 + 2);
          v26 = *(_QWORD *)a2;
          if (v24 <= 0xFFFFFFFFFFFFFFF5 && v24 + 10 <= v25)
          {
            v27 = 0;
            v28 = 0;
            v29 = 0;
            do
            {
              v30 = v24 + 1;
              *((_QWORD *)a2 + 1) = v24 + 1;
              v31 = *(_BYTE *)(v26 + v24);
              v29 |= (unint64_t)(v31 & 0x7F) << v27;
              if ((v31 & 0x80) == 0)
                goto LABEL_216;
              v27 += 7;
              v24 = v30;
              v45 = v28++ > 8;
            }
            while (!v45);
LABEL_164:
            v29 = 0;
            goto LABEL_216;
          }
          v108 = 0;
          v109 = 0;
          v29 = 0;
          if (v25 <= v24)
            v25 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v25 == v24)
            {
              v29 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v110 = v24 + 1;
              v111 = *(_BYTE *)(v26 + v24);
              *((_QWORD *)a2 + 1) = v110;
              v29 |= (unint64_t)(v111 & 0x7F) << v108;
              if (v111 < 0)
              {
                v108 += 7;
                v24 = v110;
                v45 = v109++ > 8;
                if (v45)
                  goto LABEL_164;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v29 = 0;
            }
            break;
          }
LABEL_216:
          *((_QWORD *)this + 7) = v29;
          goto LABEL_274;
        case 2u:
          if (v23 == 2)
          {
            if ((PB::Reader::placeMark(a2, v168) & 1) != 0)
              return 0;
            if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
            {
              v32 = (char *)*((_QWORD *)this + 5);
              do
              {
                if ((unint64_t)v32 >= *v11)
                {
                  v33 = (char *)*v10;
                  v34 = (v32 - (_BYTE *)*v10) >> 2;
                  v35 = v34 + 1;
                  if ((unint64_t)(v34 + 1) >> 62)
                    goto LABEL_284;
                  v36 = *v11 - (_QWORD)v33;
                  if (v36 >> 1 > v35)
                    v35 = v36 >> 1;
                  if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
                    v37 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v37 = v35;
                  if (v37)
                  {
                    v38 = (char *)sub_100020E2C((uint64_t)v11, v37);
                    v33 = (char *)*((_QWORD *)this + 4);
                    v32 = (char *)*((_QWORD *)this + 5);
                  }
                  else
                  {
                    v38 = 0;
                  }
                  v39 = &v38[4 * v34];
                  *(_DWORD *)v39 = 0;
                  v40 = v39 + 4;
                  while (v32 != v33)
                  {
                    v41 = *((_DWORD *)v32 - 1);
                    v32 -= 4;
                    *((_DWORD *)v39 - 1) = v41;
                    v39 -= 4;
                  }
                  *((_QWORD *)this + 4) = v39;
                  *((_QWORD *)this + 5) = v40;
                  *((_QWORD *)this + 6) = &v38[4 * v37];
                  if (v33)
                    operator delete(v33);
                  v32 = v40;
                }
                else
                {
                  *(_DWORD *)v32 = 0;
                  v32 += 4;
                }
                *((_QWORD *)this + 5) = v32;
                v43 = *((_QWORD *)a2 + 1);
                v42 = *((_QWORD *)a2 + 2);
                v44 = *(_QWORD *)a2;
                v45 = v43 > 0xFFFFFFFFFFFFFFF5 || v43 + 10 > v42;
                if (v45)
                {
                  v46 = 0;
                  v47 = 0;
                  v53 = 0;
                  if (v42 <= v43)
                    v48 = *((_QWORD *)a2 + 1);
                  else
                    v48 = *((_QWORD *)a2 + 2);
                  while (1)
                  {
                    if (v48 == v43)
                      goto LABEL_190;
                    v49 = v43++;
                    v50 = *(_BYTE *)(v44 + v49);
                    *((_QWORD *)a2 + 1) = v43;
                    v53 |= (unint64_t)(v50 & 0x7F) << v46;
                    if ((v50 & 0x80) == 0)
                      break;
                    v46 += 7;
                    v45 = v47++ > 8;
                    if (v45)
                    {
                      LODWORD(v53) = 0;
                      goto LABEL_71;
                    }
                  }
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v53) = 0;
LABEL_71:
                  v54 = v49 + 1;
                }
                else
                {
                  v51 = 0;
                  v52 = 0;
                  v53 = 0;
                  while (1)
                  {
                    v54 = v43 + 1;
                    *((_QWORD *)a2 + 1) = v43 + 1;
                    v55 = *(_BYTE *)(v44 + v43);
                    v53 |= (unint64_t)(v55 & 0x7F) << v51;
                    if ((v55 & 0x80) == 0)
                      break;
                    v51 += 7;
                    v43 = v54;
                    v45 = v52++ > 8;
                    if (v45)
                    {
                      LODWORD(v53) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v32 - 1) = v53;
              }
              while (v54 < v42 && !*((_BYTE *)a2 + 24));
            }
            goto LABEL_191;
          }
          v113 = (char *)*((_QWORD *)this + 5);
          v112 = *((_QWORD *)this + 6);
          if ((unint64_t)v113 >= v112)
          {
            v129 = (char *)*v10;
            v130 = (v113 - (_BYTE *)*v10) >> 2;
            v131 = v130 + 1;
            if ((unint64_t)(v130 + 1) >> 62)
LABEL_284:
              sub_10000D5F8();
            v132 = v112 - (_QWORD)v129;
            if (v132 >> 1 > v131)
              v131 = v132 >> 1;
            if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFFCLL)
              v133 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v133 = v131;
            if (v133)
            {
              v134 = (char *)sub_100020E2C((uint64_t)v11, v133);
              v129 = (char *)*((_QWORD *)this + 4);
              v113 = (char *)*((_QWORD *)this + 5);
            }
            else
            {
              v134 = 0;
            }
            v141 = &v134[4 * v130];
            *(_DWORD *)v141 = 0;
            v114 = v141 + 4;
            while (v113 != v129)
            {
              v142 = *((_DWORD *)v113 - 1);
              v113 -= 4;
              *((_DWORD *)v141 - 1) = v142;
              v141 -= 4;
            }
            *((_QWORD *)this + 4) = v141;
            *((_QWORD *)this + 5) = v114;
            *((_QWORD *)this + 6) = &v134[4 * v133];
            if (v129)
              operator delete(v129);
          }
          else
          {
            *(_DWORD *)v113 = 0;
            v114 = v113 + 4;
          }
          *((_QWORD *)this + 5) = v114;
          v143 = *((_QWORD *)a2 + 1);
          v144 = *((_QWORD *)a2 + 2);
          v145 = *(_QWORD *)a2;
          v146 = 0;
          v147 = 0;
          if (v143 <= 0xFFFFFFFFFFFFFFF5 && v143 + 10 <= v144)
          {
            v151 = 0;
            while (1)
            {
              v152 = v143 + 1;
              *((_QWORD *)a2 + 1) = v143 + 1;
              v153 = *(_BYTE *)(v145 + v143);
              v151 |= (unint64_t)(v153 & 0x7F) << v146;
              if ((v153 & 0x80) == 0)
                goto LABEL_273;
              v146 += 7;
              v143 = v152;
              v45 = v147++ > 8;
              if (v45)
                goto LABEL_269;
            }
          }
          v151 = 0;
          if (v144 <= v143)
            v144 = *((_QWORD *)a2 + 1);
          while (v144 != v143)
          {
            v149 = v143 + 1;
            v150 = *(_BYTE *)(v145 + v143);
            *((_QWORD *)a2 + 1) = v149;
            v151 |= (unint64_t)(v150 & 0x7F) << v146;
            if ((v150 & 0x80) == 0)
              goto LABEL_271;
            v146 += 7;
            v143 = v149;
            v45 = v147++ > 8;
            if (v45)
              goto LABEL_269;
          }
          goto LABEL_270;
        case 3u:
          *((_WORD *)this + 52) |= 0x100u;
          v56 = *((_QWORD *)a2 + 1);
          if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_157;
          *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v56);
          goto LABEL_193;
        case 4u:
          *((_WORD *)this + 52) |= 0x40u;
          v57 = *((_QWORD *)a2 + 1);
          if (v57 > 0xFFFFFFFFFFFFFFFBLL || v57 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_157;
          *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v57);
          goto LABEL_193;
        case 5u:
          *((_WORD *)this + 52) |= 0x80u;
          v58 = *((_QWORD *)a2 + 1);
          if (v58 > 0xFFFFFFFFFFFFFFFBLL || v58 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_157;
          *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v58);
          goto LABEL_193;
        case 6u:
          *((_WORD *)this + 52) |= 0x20u;
          v59 = *((_QWORD *)a2 + 1);
          v60 = *((_QWORD *)a2 + 2);
          v61 = *(_QWORD *)a2;
          if (v59 <= 0xFFFFFFFFFFFFFFF5 && v59 + 10 <= v60)
          {
            v62 = 0;
            v63 = 0;
            v64 = 0;
            do
            {
              v65 = v59 + 1;
              *((_QWORD *)a2 + 1) = v59 + 1;
              v66 = *(_BYTE *)(v61 + v59);
              v64 |= (unint64_t)(v66 & 0x7F) << v62;
              if ((v66 & 0x80) == 0)
                goto LABEL_219;
              v62 += 7;
              v59 = v65;
              v45 = v63++ > 8;
            }
            while (!v45);
LABEL_173:
            LODWORD(v64) = 0;
            goto LABEL_219;
          }
          v115 = 0;
          v116 = 0;
          v64 = 0;
          if (v60 <= v59)
            v60 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v60 == v59)
            {
              LODWORD(v64) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v117 = v59 + 1;
              v118 = *(_BYTE *)(v61 + v59);
              *((_QWORD *)a2 + 1) = v117;
              v64 |= (unint64_t)(v118 & 0x7F) << v115;
              if (v118 < 0)
              {
                v115 += 7;
                v59 = v117;
                v45 = v116++ > 8;
                if (v45)
                  goto LABEL_173;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v64) = 0;
            }
            break;
          }
LABEL_219:
          *((_DWORD *)this + 22) = v64;
          goto LABEL_274;
        case 7u:
          *((_WORD *)this + 52) |= 2u;
          v67 = *((_QWORD *)a2 + 1);
          v68 = *((_QWORD *)a2 + 2);
          v69 = *(_QWORD *)a2;
          if (v67 <= 0xFFFFFFFFFFFFFFF5 && v67 + 10 <= v68)
          {
            v70 = 0;
            v71 = 0;
            v72 = 0;
            do
            {
              v73 = v67 + 1;
              *((_QWORD *)a2 + 1) = v67 + 1;
              v74 = *(_BYTE *)(v69 + v67);
              v72 |= (unint64_t)(v74 & 0x7F) << v70;
              if ((v74 & 0x80) == 0)
                goto LABEL_222;
              v70 += 7;
              v67 = v73;
              v45 = v71++ > 8;
            }
            while (!v45);
LABEL_180:
            v72 = 0;
            goto LABEL_222;
          }
          v119 = 0;
          v120 = 0;
          v72 = 0;
          if (v68 <= v67)
            v68 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v68 == v67)
            {
              v72 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v121 = v67 + 1;
              v122 = *(_BYTE *)(v69 + v67);
              *((_QWORD *)a2 + 1) = v121;
              v72 |= (unint64_t)(v122 & 0x7F) << v119;
              if (v122 < 0)
              {
                v119 += 7;
                v67 = v121;
                v45 = v120++ > 8;
                if (v45)
                  goto LABEL_180;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v72 = 0;
            }
            break;
          }
LABEL_222:
          *((_QWORD *)this + 8) = v72;
          goto LABEL_274;
        case 8u:
          *((_WORD *)this + 52) |= 4u;
          v75 = *((_QWORD *)a2 + 1);
          v76 = *((_QWORD *)a2 + 2);
          v77 = *(_QWORD *)a2;
          if (v75 <= 0xFFFFFFFFFFFFFFF5 && v75 + 10 <= v76)
          {
            v78 = 0;
            v79 = 0;
            v80 = 0;
            do
            {
              v81 = v75 + 1;
              *((_QWORD *)a2 + 1) = v75 + 1;
              v82 = *(_BYTE *)(v77 + v75);
              v80 |= (unint64_t)(v82 & 0x7F) << v78;
              if ((v82 & 0x80) == 0)
                goto LABEL_225;
              v78 += 7;
              v75 = v81;
              v45 = v79++ > 8;
            }
            while (!v45);
LABEL_187:
            v80 = 0;
            goto LABEL_225;
          }
          v123 = 0;
          v124 = 0;
          v80 = 0;
          if (v76 <= v75)
            v76 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v76 == v75)
            {
              v80 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v125 = v75 + 1;
              v126 = *(_BYTE *)(v77 + v75);
              *((_QWORD *)a2 + 1) = v125;
              v80 |= (unint64_t)(v126 & 0x7F) << v123;
              if (v126 < 0)
              {
                v123 += 7;
                v75 = v125;
                v45 = v124++ > 8;
                if (v45)
                  goto LABEL_187;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v80 = 0;
            }
            break;
          }
LABEL_225:
          *((_QWORD *)this + 9) = v80;
          goto LABEL_274;
        case 9u:
          if (v23 == 2)
          {
            if ((PB::Reader::placeMark(a2, v168) & 1) != 0)
              return 0;
            if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
            {
              v32 = (char *)*((_QWORD *)this + 2);
              do
              {
                if ((unint64_t)v32 >= *v9)
                {
                  v84 = (char *)*v8;
                  v85 = (v32 - (_BYTE *)*v8) >> 2;
                  v86 = v85 + 1;
                  if ((unint64_t)(v85 + 1) >> 62)
                    goto LABEL_285;
                  v87 = *v9 - (_QWORD)v84;
                  if (v87 >> 1 > v86)
                    v86 = v87 >> 1;
                  if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL)
                    v88 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v88 = v86;
                  if (v88)
                  {
                    v89 = (char *)sub_100020E2C((uint64_t)v9, v88);
                    v84 = (char *)*((_QWORD *)this + 1);
                    v32 = (char *)*((_QWORD *)this + 2);
                  }
                  else
                  {
                    v89 = 0;
                  }
                  v90 = &v89[4 * v85];
                  *(_DWORD *)v90 = 0;
                  v91 = v90 + 4;
                  while (v32 != v84)
                  {
                    v92 = *((_DWORD *)v32 - 1);
                    v32 -= 4;
                    *((_DWORD *)v90 - 1) = v92;
                    v90 -= 4;
                  }
                  *((_QWORD *)this + 1) = v90;
                  *((_QWORD *)this + 2) = v91;
                  *((_QWORD *)this + 3) = &v89[4 * v88];
                  if (v84)
                    operator delete(v84);
                  v32 = v91;
                }
                else
                {
                  *(_DWORD *)v32 = 0;
                  v32 += 4;
                }
                *((_QWORD *)this + 2) = v32;
                v94 = *((_QWORD *)a2 + 1);
                v93 = *((_QWORD *)a2 + 2);
                v95 = *(_QWORD *)a2;
                if (v94 <= 0xFFFFFFFFFFFFFFF5 && v94 + 10 <= v93)
                {
                  v102 = 0;
                  v103 = 0;
                  v104 = 0;
                  while (1)
                  {
                    v105 = v94 + 1;
                    *((_QWORD *)a2 + 1) = v94 + 1;
                    v106 = *(_BYTE *)(v95 + v94);
                    v104 |= (unint64_t)(v106 & 0x7F) << v102;
                    if ((v106 & 0x80) == 0)
                      goto LABEL_152;
                    v102 += 7;
                    v94 = v105;
                    v45 = v103++ > 8;
                    if (v45)
                    {
                      LODWORD(v104) = 0;
                      goto LABEL_152;
                    }
                  }
                }
                v97 = 0;
                v98 = 0;
                v104 = 0;
                if (v93 <= v94)
                  v99 = *((_QWORD *)a2 + 1);
                else
                  v99 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v99 == v94)
                  {
LABEL_190:
                    *((_BYTE *)a2 + 24) = 1;
                    *((_DWORD *)v32 - 1) = 0;
                    goto LABEL_191;
                  }
                  v100 = v94++;
                  v101 = *(_BYTE *)(v95 + v100);
                  *((_QWORD *)a2 + 1) = v94;
                  v104 |= (unint64_t)(v101 & 0x7F) << v97;
                  if ((v101 & 0x80) == 0)
                    break;
                  v97 += 7;
                  v45 = v98++ > 8;
                  if (v45)
                  {
                    LODWORD(v104) = 0;
                    goto LABEL_151;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v104) = 0;
LABEL_151:
                v105 = v100 + 1;
LABEL_152:
                *((_DWORD *)v32 - 1) = v104;
              }
              while (v105 < v93 && !*((_BYTE *)a2 + 24));
            }
LABEL_191:
            PB::Reader::recallMark(a2, v168);
          }
          else
          {
            v128 = (char *)*((_QWORD *)this + 2);
            v127 = *((_QWORD *)this + 3);
            if ((unint64_t)v128 >= v127)
            {
              v135 = (char *)*v8;
              v136 = (v128 - (_BYTE *)*v8) >> 2;
              v137 = v136 + 1;
              if ((unint64_t)(v136 + 1) >> 62)
LABEL_285:
                sub_10000D5F8();
              v138 = v127 - (_QWORD)v135;
              if (v138 >> 1 > v137)
                v137 = v138 >> 1;
              if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFFCLL)
                v139 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v139 = v137;
              if (v139)
              {
                v140 = (char *)sub_100020E2C((uint64_t)v9, v139);
                v135 = (char *)*((_QWORD *)this + 1);
                v128 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v140 = 0;
              }
              v154 = &v140[4 * v136];
              *(_DWORD *)v154 = 0;
              v114 = v154 + 4;
              while (v128 != v135)
              {
                v155 = *((_DWORD *)v128 - 1);
                v128 -= 4;
                *((_DWORD *)v154 - 1) = v155;
                v154 -= 4;
              }
              *((_QWORD *)this + 1) = v154;
              *((_QWORD *)this + 2) = v114;
              *((_QWORD *)this + 3) = &v140[4 * v139];
              if (v135)
                operator delete(v135);
            }
            else
            {
              *(_DWORD *)v128 = 0;
              v114 = v128 + 4;
            }
            *((_QWORD *)this + 2) = v114;
            v156 = *((_QWORD *)a2 + 1);
            v157 = *((_QWORD *)a2 + 2);
            v158 = *(_QWORD *)a2;
            v159 = 0;
            v160 = 0;
            if (v156 > 0xFFFFFFFFFFFFFFF5 || v156 + 10 > v157)
            {
              v151 = 0;
              if (v157 <= v156)
                v157 = *((_QWORD *)a2 + 1);
              while (v157 != v156)
              {
                v162 = v156 + 1;
                v163 = *(_BYTE *)(v158 + v156);
                *((_QWORD *)a2 + 1) = v162;
                v151 |= (unint64_t)(v163 & 0x7F) << v159;
                if ((v163 & 0x80) == 0)
                {
LABEL_271:
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v151) = 0;
                  goto LABEL_273;
                }
                v159 += 7;
                v156 = v162;
                v45 = v160++ > 8;
                if (v45)
                {
LABEL_269:
                  LODWORD(v151) = 0;
                  goto LABEL_273;
                }
              }
LABEL_270:
              LODWORD(v151) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v151 = 0;
              while (1)
              {
                v164 = v156 + 1;
                *((_QWORD *)a2 + 1) = v156 + 1;
                v165 = *(_BYTE *)(v158 + v156);
                v151 |= (unint64_t)(v165 & 0x7F) << v159;
                if ((v165 & 0x80) == 0)
                  break;
                v159 += 7;
                v156 = v164;
                v45 = v160++ > 8;
                if (v45)
                  goto LABEL_269;
              }
            }
LABEL_273:
            *(v114 - 1) = v151;
          }
LABEL_274:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 0xAu:
          *((_WORD *)this + 52) |= 0x10u;
          v83 = *((_QWORD *)a2 + 1);
          if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_157;
          *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v83);
          goto LABEL_193;
        case 0xBu:
          *((_WORD *)this + 52) |= 8u;
          v107 = *((_QWORD *)a2 + 1);
          if (v107 <= 0xFFFFFFFFFFFFFFFBLL && v107 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v107);
LABEL_193:
            *((_QWORD *)a2 + 1) += 4;
          }
          else
          {
LABEL_157:
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_274;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v23, 0) & 1) == 0)
            return 0;
          goto LABEL_274;
      }
    }
    v18 = 0;
    v19 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v20 = v2 + 1;
      v21 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)a2 + 1) = v20;
      v15 |= (unint64_t)(v21 & 0x7F) << v18;
      if ((v21 & 0x80) == 0)
        goto LABEL_21;
      v18 += 7;
      v2 = v20;
      if (v19++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaActivityWatch::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  __int16 v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  __int16 v11;

  v3 = this;
  if ((*(_WORD *)(this + 104) & 1) != 0)
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 56), 1u);
  v4 = *(unsigned int **)(v3 + 32);
  v5 = *(unsigned int **)(v3 + 40);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::writeVarInt(a2, v6, 2u);
  }
  v7 = *(_WORD *)(v3 + 104);
  if ((v7 & 0x100) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 100), 3u);
    v7 = *(_WORD *)(v3 + 104);
    if ((v7 & 0x40) == 0)
    {
LABEL_8:
      if ((v7 & 0x80) == 0)
        goto LABEL_9;
      goto LABEL_22;
    }
  }
  else if ((v7 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 92), 4u);
  v7 = *(_WORD *)(v3 + 104);
  if ((v7 & 0x80) == 0)
  {
LABEL_9:
    if ((v7 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 5u);
  v7 = *(_WORD *)(v3 + 104);
  if ((v7 & 0x20) == 0)
  {
LABEL_10:
    if ((v7 & 2) == 0)
      goto LABEL_11;
LABEL_24:
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 64), 7u);
    if ((*(_WORD *)(v3 + 104) & 4) == 0)
      goto LABEL_13;
    goto LABEL_12;
  }
LABEL_23:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 88), 6u);
  v7 = *(_WORD *)(v3 + 104);
  if ((v7 & 2) != 0)
    goto LABEL_24;
LABEL_11:
  if ((v7 & 4) != 0)
LABEL_12:
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 72), 8u);
LABEL_13:
  v8 = *(unsigned int **)(v3 + 8);
  v9 = *(unsigned int **)(v3 + 16);
  while (v8 != v9)
  {
    v10 = *v8++;
    this = PB::Writer::writeVarInt(a2, v10, 9u);
  }
  v11 = *(_WORD *)(v3 + 104);
  if ((v11 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 84), 0xAu);
    v11 = *(_WORD *)(v3 + 104);
  }
  if ((v11 & 8) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 80), 0xBu);
  return this;
}

uint64_t CMMsl::KappaActivityWatch::hash_value(CMMsl::KappaActivityWatch *this)
{
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;

  if ((*((_WORD *)this + 52) & 1) != 0)
    v2 = *((_QWORD *)this + 7);
  else
    v2 = 0;
  v3 = PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
  v4 = *((_WORD *)this + 52);
  if ((v4 & 0x100) == 0)
  {
    v5 = 0;
    if ((v4 & 0x40) != 0)
      goto LABEL_6;
LABEL_21:
    v7 = 0;
    if ((v4 & 0x80) != 0)
      goto LABEL_10;
LABEL_22:
    v9 = 0;
    if ((v4 & 0x20) != 0)
      goto LABEL_14;
    goto LABEL_23;
  }
  v13 = *((float *)this + 25);
  if (v13 == 0.0)
    v5 = 0;
  else
    v5 = LODWORD(v13);
  if ((v4 & 0x40) == 0)
    goto LABEL_21;
LABEL_6:
  v6 = *((float *)this + 23);
  if (v6 == 0.0)
    v7 = 0;
  else
    v7 = LODWORD(v6);
  if ((v4 & 0x80) == 0)
    goto LABEL_22;
LABEL_10:
  v8 = *((float *)this + 24);
  if (v8 == 0.0)
    v9 = 0;
  else
    v9 = LODWORD(v8);
  if ((v4 & 0x20) != 0)
  {
LABEL_14:
    v10 = *((unsigned int *)this + 22);
    if ((v4 & 2) != 0)
      goto LABEL_15;
LABEL_24:
    v11 = 0;
    if ((v4 & 4) != 0)
      goto LABEL_16;
    goto LABEL_25;
  }
LABEL_23:
  v10 = 0;
  if ((v4 & 2) == 0)
    goto LABEL_24;
LABEL_15:
  v11 = *((_QWORD *)this + 8);
  if ((v4 & 4) != 0)
  {
LABEL_16:
    v12 = *((_QWORD *)this + 9);
    goto LABEL_26;
  }
LABEL_25:
  v12 = 0;
LABEL_26:
  v14 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  v15 = *((_WORD *)this + 52);
  if ((v15 & 0x10) != 0)
  {
    v19 = *((float *)this + 21);
    v16 = LODWORD(v19);
    if (v19 == 0.0)
      v16 = 0;
    if ((v15 & 8) != 0)
      goto LABEL_28;
LABEL_34:
    v18 = 0;
    return v3 ^ v2 ^ v5 ^ v7 ^ v9 ^ v10 ^ v11 ^ v12 ^ v14 ^ v16 ^ v18;
  }
  v16 = 0;
  if ((v15 & 8) == 0)
    goto LABEL_34;
LABEL_28:
  v17 = *((float *)this + 20);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  return v3 ^ v2 ^ v5 ^ v7 ^ v9 ^ v10 ^ v11 ^ v12 ^ v14 ^ v16 ^ v18;
}

void CMMsl::KappaAirbagResult::~KappaAirbagResult(CMMsl::KappaAirbagResult *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::KappaAirbagResult::KappaAirbagResult(uint64_t this, const CMMsl::KappaAirbagResult *a2)
{
  __int16 v2;
  __int16 v3;
  char v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  *(_QWORD *)this = off_100351EC0;
  *(_DWORD *)(this + 68) = 0;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x400) != 0)
  {
    v4 = *((_BYTE *)a2 + 64);
    v3 = 1024;
    *(_WORD *)(this + 68) = 1024;
    *(_BYTE *)(this + 64) = v4;
    v2 = *((_WORD *)a2 + 34);
    if ((v2 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 13);
    v3 |= 0x80u;
    *(_WORD *)(this + 68) = v3;
    *(_DWORD *)(this + 52) = v5;
    v2 = *((_WORD *)a2 + 34);
  }
LABEL_6:
  if ((v2 & 0x40) != 0)
  {
    v6 = *((_DWORD *)a2 + 12);
    v3 |= 0x40u;
    *(_WORD *)(this + 68) = v3;
    *(_DWORD *)(this + 48) = v6;
    v2 = *((_WORD *)a2 + 34);
    if ((v2 & 0x200) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 15);
  v3 |= 0x200u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 60) = v7;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x100) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  v8 = *((_DWORD *)a2 + 14);
  v3 |= 0x100u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 56) = v8;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  v9 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *(_WORD *)(this + 68) = v3;
  *(_QWORD *)(this + 24) = v9;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x10) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  v10 = *((_DWORD *)a2 + 10);
  v3 |= 0x10u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 40) = v10;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  v11 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 68) = v3;
  *(_QWORD *)(this + 8) = v11;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 0x20) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  v12 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 68) = v3;
  *(_QWORD *)(this + 16) = v12;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x20) == 0)
  {
LABEL_14:
    if ((v2 & 8) == 0)
      return this;
LABEL_24:
    v14 = *((_QWORD *)a2 + 4);
    *(_WORD *)(this + 68) = v3 | 8;
    *(_QWORD *)(this + 32) = v14;
    return this;
  }
LABEL_23:
  v13 = *((_DWORD *)a2 + 11);
  v3 |= 0x20u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 44) = v13;
  if ((*((_WORD *)a2 + 34) & 8) != 0)
    goto LABEL_24;
  return this;
}

CMMsl *CMMsl::KappaAirbagResult::operator=(CMMsl *a1, const CMMsl::KappaAirbagResult *a2)
{
  CMMsl::KappaAirbagResult *v3;
  _BYTE v5[72];

  if (a1 != a2)
  {
    CMMsl::KappaAirbagResult::KappaAirbagResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaAirbagResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaAirbagResult *a2, CMMsl::KappaAirbagResult *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float result;
  uint64_t v12;

  v3 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 64);
  *((_BYTE *)this + 64) = *((_BYTE *)a2 + 64);
  *((_BYTE *)a2 + 64) = v3;
  v4 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  v5 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  v6 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v6;
  v7 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v7;
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  LODWORD(v8) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v8;
  v9 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v9;
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v10;
  result = *((float *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((float *)a2 + 11) = result;
  v12 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v12;
  return result;
}

float CMMsl::KappaAirbagResult::KappaAirbagResult(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100351EC0;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a2 + 68) = 0;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(float *)(a2 + 44);
  *(float *)(a1 + 44) = result;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

CMMsl *CMMsl::KappaAirbagResult::operator=(CMMsl *this, uint64_t a2, CMMsl::KappaAirbagResult *a3)
{
  __int128 v4;
  __int128 v5;
  void (**v7)(CMMsl::KappaAirbagResult *__hidden);
  __int128 v8;
  __int128 v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  int v15;

  if (this != (CMMsl *)a2)
  {
    v7 = off_100351EC0;
    v15 = *(_DWORD *)(a2 + 68);
    *(_DWORD *)(a2 + 68) = 0;
    v14 = *(_BYTE *)(a2 + 64);
    v12 = *(_DWORD *)(a2 + 52);
    v13 = *(_QWORD *)(a2 + 56);
    v10 = *(_DWORD *)(a2 + 40);
    v4 = *(_OWORD *)(a2 + 8);
    v11 = *(_QWORD *)(a2 + 44);
    v5 = *(_OWORD *)(a2 + 24);
    v8 = v4;
    v9 = v5;
    CMMsl::swap(this, (CMMsl::KappaAirbagResult *)&v7, a3);
    PB::Base::~Base((PB::Base *)&v7);
  }
  return this;
}

uint64_t CMMsl::KappaAirbagResult::formatText(CMMsl::KappaAirbagResult *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "diffPeakTimestampTrigger", *((_DWORD *)this + 10));
    v5 = *((_WORD *)this + 34);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "epochFirstTimestamp", *((_QWORD *)this + 1));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "epochLastTimestamp", *((_QWORD *)this + 2));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "maxAccelNormInWindow", *((float *)this + 11));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "pass", *((_BYTE *)this + 64));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 4) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "peakPressure", *((float *)this + 12));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 4) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "peakTimestamp", *((_QWORD *)this + 3));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "pressureODR", *((_DWORD *)this + 13));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 8) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 4));
    if ((*((_WORD *)this + 34) & 0x200) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "riseTime", *((float *)this + 14));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 8) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x200) != 0)
LABEL_12:
    PB::TextFormatter::format(a2, "width", *((float *)this + 15));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaAirbagResult::readFrom(CMMsl::KappaAirbagResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  unint64_t v81;
  char v82;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 34) |= 0x400u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v21 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v21 = v20 != 0;
              }
              *((_BYTE *)this + 64) = v21;
              goto LABEL_156;
            case 2u:
              *((_WORD *)this + 34) |= 0x80u;
              v23 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v24 = *(_QWORD *)a2;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v27 = 0;
                if (v2 <= v23)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_130;
                  }
                  v61 = v23++;
                  v62 = *(_BYTE *)(v24 + v61);
                  *((_QWORD *)a2 + 1) = v23;
                  v27 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_129:
                    v2 = v61 + 1;
                    goto LABEL_130;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v27) = 0;
                goto LABEL_129;
              }
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v2 = v23 + 1;
                *((_QWORD *)a2 + 1) = v23 + 1;
                v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0)
                  goto LABEL_130;
                v25 += 7;
                v23 = v2;
                v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_130:
              *((_DWORD *)this + 13) = v27;
              goto LABEL_156;
            case 3u:
              *((_WORD *)this + 34) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_72;
              *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_125;
            case 4u:
              *((_WORD *)this + 34) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_72;
              *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_125;
            case 5u:
              *((_WORD *)this + 34) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_72;
              *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_125;
            case 6u:
              *((_WORD *)this + 34) |= 4u;
              v29 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v30 = *(_QWORD *)a2;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v33 = 0;
                if (v2 <= v29)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v29)
                  {
                    v33 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_135;
                  }
                  v65 = v29++;
                  v66 = *(_BYTE *)(v30 + v65);
                  *((_QWORD *)a2 + 1) = v29;
                  v33 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    v33 = 0;
LABEL_134:
                    v2 = v65 + 1;
                    goto LABEL_135;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v33 = 0;
                goto LABEL_134;
              }
              v31 = 0;
              v32 = 0;
              v33 = 0;
              do
              {
                v2 = v29 + 1;
                *((_QWORD *)a2 + 1) = v29 + 1;
                v34 = *(_BYTE *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0)
                  goto LABEL_135;
                v31 += 7;
                v29 = v2;
                v14 = v32++ > 8;
              }
              while (!v14);
              v33 = 0;
LABEL_135:
              *((_QWORD *)this + 3) = v33;
              goto LABEL_156;
            case 7u:
              *((_WORD *)this + 34) |= 0x10u;
              v35 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v36 = *(_QWORD *)a2;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                v67 = 0;
                v68 = 0;
                v39 = 0;
                if (v2 <= v35)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_140;
                  }
                  v69 = v35++;
                  v70 = *(_BYTE *)(v36 + v69);
                  *((_QWORD *)a2 + 1) = v35;
                  v39 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0)
                    break;
                  v67 += 7;
                  v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_139:
                    v2 = v69 + 1;
                    goto LABEL_140;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v39) = 0;
                goto LABEL_139;
              }
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v2 = v35 + 1;
                *((_QWORD *)a2 + 1) = v35 + 1;
                v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0)
                  goto LABEL_140;
                v37 += 7;
                v35 = v2;
                v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_140:
              *((_DWORD *)this + 10) = v39;
              goto LABEL_156;
            case 8u:
              *((_WORD *)this + 34) |= 1u;
              v41 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v42 = *(_QWORD *)a2;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                v71 = 0;
                v72 = 0;
                v45 = 0;
                if (v2 <= v41)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v41)
                  {
                    v45 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_145;
                  }
                  v73 = v41++;
                  v74 = *(_BYTE *)(v42 + v73);
                  *((_QWORD *)a2 + 1) = v41;
                  v45 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0)
                    break;
                  v71 += 7;
                  v14 = v72++ > 8;
                  if (v14)
                  {
                    v45 = 0;
LABEL_144:
                    v2 = v73 + 1;
                    goto LABEL_145;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v45 = 0;
                goto LABEL_144;
              }
              v43 = 0;
              v44 = 0;
              v45 = 0;
              do
              {
                v2 = v41 + 1;
                *((_QWORD *)a2 + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0)
                  goto LABEL_145;
                v43 += 7;
                v41 = v2;
                v14 = v44++ > 8;
              }
              while (!v14);
              v45 = 0;
LABEL_145:
              *((_QWORD *)this + 1) = v45;
              goto LABEL_156;
            case 9u:
              *((_WORD *)this + 34) |= 2u;
              v47 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v48 = *(_QWORD *)a2;
              if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
              {
                v75 = 0;
                v76 = 0;
                v51 = 0;
                if (v2 <= v47)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v47)
                  {
                    v51 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_150;
                  }
                  v77 = v47++;
                  v78 = *(_BYTE *)(v48 + v77);
                  *((_QWORD *)a2 + 1) = v47;
                  v51 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0)
                    break;
                  v75 += 7;
                  v14 = v76++ > 8;
                  if (v14)
                  {
                    v51 = 0;
LABEL_149:
                    v2 = v77 + 1;
                    goto LABEL_150;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v51 = 0;
                goto LABEL_149;
              }
              v49 = 0;
              v50 = 0;
              v51 = 0;
              do
              {
                v2 = v47 + 1;
                *((_QWORD *)a2 + 1) = v47 + 1;
                v52 = *(_BYTE *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0)
                  goto LABEL_150;
                v49 += 7;
                v47 = v2;
                v14 = v50++ > 8;
              }
              while (!v14);
              v51 = 0;
LABEL_150:
              *((_QWORD *)this + 2) = v51;
              goto LABEL_156;
            case 0xAu:
              *((_WORD *)this + 34) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_125:
                v2 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_72:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_156;
            case 0xBu:
              *((_WORD *)this + 34) |= 8u;
              v53 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v54 = *(_QWORD *)a2;
              if (v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v2)
              {
                v79 = 0;
                v80 = 0;
                v57 = 0;
                if (v2 <= v53)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v53)
                  {
                    v57 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_155;
                  }
                  v81 = v53++;
                  v82 = *(_BYTE *)(v54 + v81);
                  *((_QWORD *)a2 + 1) = v53;
                  v57 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0)
                    break;
                  v79 += 7;
                  v14 = v80++ > 8;
                  if (v14)
                  {
                    v57 = 0;
LABEL_154:
                    v2 = v81 + 1;
                    goto LABEL_155;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v57 = 0;
                goto LABEL_154;
              }
              v55 = 0;
              v56 = 0;
              v57 = 0;
              do
              {
                v2 = v53 + 1;
                *((_QWORD *)a2 + 1) = v53 + 1;
                v58 = *(_BYTE *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0)
                  goto LABEL_155;
                v55 += 7;
                v53 = v2;
                v14 = v56++ > 8;
              }
              while (!v14);
              v57 = 0;
LABEL_155:
              *((_QWORD *)this + 4) = v57;
LABEL_156:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_156;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaAirbagResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 68);
  if ((v4 & 0x400) != 0)
  {
    this = PB::Writer::write(a2, *(_BYTE *)(this + 64), 1u);
    v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 52), 2u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 3u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 4u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 5u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 24), 6u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 7u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 8), 8u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 16), 9u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x20) == 0)
  {
LABEL_11:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 32), 0xBu);
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 0xAu);
  if ((*(_WORD *)(v3 + 68) & 8) != 0)
    return PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 32), 0xBu);
  return this;
}

uint64_t CMMsl::KappaAirbagResult::hash_value(CMMsl::KappaAirbagResult *this)
{
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *((_WORD *)this + 34);
  if ((v1 & 0x400) != 0)
  {
    v2 = *((unsigned __int8 *)this + 64);
    if ((v1 & 0x80) != 0)
    {
LABEL_3:
      v3 = *((int *)this + 13);
      if ((v1 & 0x40) != 0)
        goto LABEL_4;
LABEL_23:
      v5 = 0;
      if ((*((_WORD *)this + 34) & 0x200) != 0)
        goto LABEL_7;
LABEL_24:
      v7 = 0;
      if ((*((_WORD *)this + 34) & 0x100) != 0)
        goto LABEL_10;
LABEL_25:
      v9 = 0;
      if ((v1 & 4) != 0)
        goto LABEL_13;
      goto LABEL_26;
    }
  }
  else
  {
    v2 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_23;
LABEL_4:
  v4 = *((float *)this + 12);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((*((_WORD *)this + 34) & 0x200) == 0)
    goto LABEL_24;
LABEL_7:
  v6 = *((float *)this + 15);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((*((_WORD *)this + 34) & 0x100) == 0)
    goto LABEL_25;
LABEL_10:
  v8 = *((float *)this + 14);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_13:
    v10 = *((_QWORD *)this + 3);
    if ((v1 & 0x10) != 0)
      goto LABEL_14;
    goto LABEL_27;
  }
LABEL_26:
  v10 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_14:
    v11 = *((int *)this + 10);
    if ((v1 & 1) != 0)
      goto LABEL_15;
    goto LABEL_28;
  }
LABEL_27:
  v11 = 0;
  if ((v1 & 1) != 0)
  {
LABEL_15:
    v12 = *((_QWORD *)this + 1);
    if ((v1 & 2) != 0)
      goto LABEL_16;
    goto LABEL_29;
  }
LABEL_28:
  v12 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_16:
    v13 = *((_QWORD *)this + 2);
    if ((v1 & 0x20) != 0)
      goto LABEL_17;
    goto LABEL_30;
  }
LABEL_29:
  v13 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_17:
    v14 = *((float *)this + 11);
    v15 = LODWORD(v14);
    if (v14 == 0.0)
      v15 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_20;
LABEL_31:
    v16 = 0;
    return v3 ^ v2 ^ v5 ^ v7 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v15 ^ v16;
  }
LABEL_30:
  v15 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_31;
LABEL_20:
  v16 = *((_QWORD *)this + 4);
  return v3 ^ v2 ^ v5 ^ v7 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v15 ^ v16;
}

void CMMsl::KappaAudioResult::~KappaAudioResult(CMMsl::KappaAudioResult *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::KappaAudioResult::KappaAudioResult(CMMsl::KappaAudioResult *this, const CMMsl::KappaAudioResult *a2)
{
  int v2;
  int v3;
  char v4;
  int v5;
  float result;
  char v7;
  char v8;
  char v9;
  char v10;
  int v11;
  int v12;
  int v13;

  *(_QWORD *)this = off_100351EF8;
  *((_DWORD *)this + 27) = 0;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x800000) != 0)
  {
    v4 = *((_BYTE *)a2 + 100);
    v3 = 0x800000;
    *((_DWORD *)this + 27) = 0x800000;
    *((_BYTE *)this + 100) = v4;
    v2 = *((_DWORD *)a2 + 27);
    if ((v2 & 0x80000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x80000) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 21);
    v3 |= 0x80000u;
    *((_DWORD *)this + 27) = v3;
    *((_DWORD *)this + 21) = v5;
    v2 = *((_DWORD *)a2 + 27);
  }
LABEL_6:
  if ((v2 & 0x20000) != 0)
  {
    result = *((float *)a2 + 19);
    v3 |= 0x20000u;
    *((_DWORD *)this + 27) = v3;
    *((float *)this + 19) = result;
    v2 = *((_DWORD *)a2 + 27);
    if ((v2 & 0x10000) == 0)
    {
LABEL_8:
      if ((v2 & 0x8000) == 0)
        goto LABEL_9;
      goto LABEL_35;
    }
  }
  else if ((v2 & 0x10000) == 0)
  {
    goto LABEL_8;
  }
  result = *((float *)a2 + 18);
  v3 |= 0x10000u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 18) = result;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x8000) == 0)
  {
LABEL_9:
    if ((v2 & 0x200000) == 0)
      goto LABEL_10;
    goto LABEL_36;
  }
LABEL_35:
  result = *((float *)a2 + 17);
  v3 |= 0x8000u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 17) = result;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x200000) == 0)
  {
LABEL_10:
    if ((v2 & 0x40000) == 0)
      goto LABEL_11;
    goto LABEL_37;
  }
LABEL_36:
  result = *((float *)a2 + 23);
  v3 |= 0x200000u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 23) = result;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x40000) == 0)
  {
LABEL_11:
    if ((v2 & 0x400000) == 0)
      goto LABEL_12;
    goto LABEL_38;
  }
LABEL_37:
  result = *((float *)a2 + 20);
  v3 |= 0x40000u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 20) = result;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x400000) == 0)
  {
LABEL_12:
    if ((v2 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_39;
  }
LABEL_38:
  result = *((float *)a2 + 24);
  v3 |= 0x400000u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 24) = result;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x1000) == 0)
  {
LABEL_13:
    if ((v2 & 0x100000) == 0)
      goto LABEL_14;
    goto LABEL_40;
  }
LABEL_39:
  result = *((float *)a2 + 14);
  v3 |= 0x1000u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 14) = result;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x100000) == 0)
  {
LABEL_14:
    if ((v2 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_41;
  }
LABEL_40:
  result = *((float *)a2 + 22);
  v3 |= 0x100000u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 22) = result;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x4000) == 0)
  {
LABEL_15:
    if ((v2 & 0x2000) == 0)
      goto LABEL_16;
    goto LABEL_42;
  }
LABEL_41:
  result = *((float *)a2 + 16);
  v3 |= 0x4000u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 16) = result;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x2000) == 0)
  {
LABEL_16:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_17;
    goto LABEL_43;
  }
LABEL_42:
  result = *((float *)a2 + 15);
  v3 |= 0x2000u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 15) = result;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_18;
    goto LABEL_44;
  }
LABEL_43:
  v7 = *((_BYTE *)a2 + 103);
  v3 |= 0x4000000u;
  *((_DWORD *)this + 27) = v3;
  *((_BYTE *)this + 103) = v7;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_19;
    goto LABEL_45;
  }
LABEL_44:
  v8 = *((_BYTE *)a2 + 102);
  v3 |= 0x2000000u;
  *((_DWORD *)this + 27) = v3;
  *((_BYTE *)this + 102) = v8;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_20;
    goto LABEL_46;
  }
LABEL_45:
  v9 = *((_BYTE *)a2 + 101);
  v3 |= 0x1000000u;
  *((_DWORD *)this + 27) = v3;
  *((_BYTE *)this + 101) = v9;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_20:
    if ((v2 & 2) == 0)
      goto LABEL_21;
    goto LABEL_47;
  }
LABEL_46:
  v10 = *((_BYTE *)a2 + 104);
  v3 |= 0x8000000u;
  *((_DWORD *)this + 27) = v3;
  *((_BYTE *)this + 104) = v10;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 2) == 0)
  {
LABEL_21:
    if ((v2 & 0x800) == 0)
      goto LABEL_22;
    goto LABEL_48;
  }
LABEL_47:
  v11 = *((_DWORD *)a2 + 3);
  v3 |= 2u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 3) = v11;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x800) == 0)
  {
LABEL_22:
    if ((v2 & 0x100) == 0)
      goto LABEL_23;
    goto LABEL_49;
  }
LABEL_48:
  result = *((float *)a2 + 13);
  v3 |= 0x800u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 13) = result;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x100) == 0)
  {
LABEL_23:
    if ((v2 & 0x80) == 0)
      goto LABEL_24;
    goto LABEL_50;
  }
LABEL_49:
  v12 = *((_DWORD *)a2 + 10);
  v3 |= 0x100u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 10) = v12;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x80) == 0)
  {
LABEL_24:
    if ((v2 & 0x40) == 0)
      goto LABEL_25;
    goto LABEL_51;
  }
LABEL_50:
  v13 = *((_DWORD *)a2 + 9);
  v3 |= 0x80u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 9) = v13;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x40) == 0)
  {
LABEL_25:
    if ((v2 & 0x20) == 0)
      goto LABEL_26;
    goto LABEL_52;
  }
LABEL_51:
  result = *((float *)a2 + 8);
  v3 |= 0x40u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 8) = result;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x20) == 0)
  {
LABEL_26:
    if ((v2 & 8) == 0)
      goto LABEL_27;
    goto LABEL_53;
  }
LABEL_52:
  result = *((float *)a2 + 7);
  v3 |= 0x20u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 7) = result;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 8) == 0)
  {
LABEL_27:
    if ((v2 & 4) == 0)
      goto LABEL_28;
    goto LABEL_54;
  }
LABEL_53:
  result = *((float *)a2 + 5);
  v3 |= 8u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 5) = result;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 4) == 0)
  {
LABEL_28:
    if ((v2 & 1) == 0)
      goto LABEL_29;
    goto LABEL_55;
  }
LABEL_54:
  result = *((float *)a2 + 4);
  v3 |= 4u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 4) = result;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 1) == 0)
  {
LABEL_29:
    if ((v2 & 0x10) == 0)
      goto LABEL_30;
    goto LABEL_56;
  }
LABEL_55:
  result = *((float *)a2 + 2);
  v3 |= 1u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 2) = result;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x10) == 0)
  {
LABEL_30:
    if ((v2 & 0x400) == 0)
      goto LABEL_31;
    goto LABEL_57;
  }
LABEL_56:
  result = *((float *)a2 + 6);
  v3 |= 0x10u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 6) = result;
  v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x400) == 0)
  {
LABEL_31:
    if ((v2 & 0x200) == 0)
      return result;
LABEL_58:
    result = *((float *)a2 + 11);
    *((_DWORD *)this + 27) = v3 | 0x200;
    *((float *)this + 11) = result;
    return result;
  }
LABEL_57:
  result = *((float *)a2 + 12);
  v3 |= 0x400u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 12) = result;
  if ((*((_DWORD *)a2 + 27) & 0x200) != 0)
    goto LABEL_58;
  return result;
}

CMMsl *CMMsl::KappaAudioResult::operator=(CMMsl *a1, const CMMsl::KappaAudioResult *a2)
{
  CMMsl::KappaAudioResult *v3;
  _BYTE v5[112];

  if (a1 != a2)
  {
    CMMsl::KappaAudioResult::KappaAudioResult((CMMsl::KappaAudioResult *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaAudioResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaAudioResult *a2, CMMsl::KappaAudioResult *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  float result;

  v3 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 100);
  *((_BYTE *)this + 100) = *((_BYTE *)a2 + 100);
  *((_BYTE *)a2 + 100) = v3;
  v4 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  v5 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v5;
  v6 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v6;
  v7 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v7;
  v8 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v8;
  v9 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v9;
  v10 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v10;
  v11 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v11;
  v12 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v12;
  v13 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v13;
  v14 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v14;
  LOBYTE(v4) = *((_BYTE *)this + 103);
  *((_BYTE *)this + 103) = *((_BYTE *)a2 + 103);
  *((_BYTE *)a2 + 103) = v4;
  LOBYTE(v4) = *((_BYTE *)this + 102);
  *((_BYTE *)this + 102) = *((_BYTE *)a2 + 102);
  *((_BYTE *)a2 + 102) = v4;
  LOBYTE(v4) = *((_BYTE *)this + 101);
  *((_BYTE *)this + 101) = *((_BYTE *)a2 + 101);
  *((_BYTE *)a2 + 101) = v4;
  LOBYTE(v4) = *((_BYTE *)this + 104);
  *((_BYTE *)this + 104) = *((_BYTE *)a2 + 104);
  *((_BYTE *)a2 + 104) = v4;
  v15 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v15;
  v16 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v16;
  v17 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v17;
  v18 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v18;
  v19 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v19;
  v20 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v20;
  v21 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v21;
  v22 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v22;
  v23 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v23;
  v24 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v24;
  v25 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v25;
  result = *((float *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((float *)a2 + 11) = result;
  return result;
}

float CMMsl::KappaAudioResult::KappaAudioResult(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100351EF8;
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a2 + 108) = 0;
  *(_BYTE *)(a1 + 100) = *(_BYTE *)(a2 + 100);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 103) = *(_BYTE *)(a2 + 103);
  *(_BYTE *)(a1 + 102) = *(_BYTE *)(a2 + 102);
  *(_BYTE *)(a1 + 101) = *(_BYTE *)(a2 + 101);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  result = *(float *)(a2 + 44);
  *(float *)(a1 + 44) = result;
  return result;
}

CMMsl *CMMsl::KappaAudioResult::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::KappaAudioResult *v3;
  _BYTE v5[112];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaAudioResult::KappaAudioResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaAudioResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaAudioResult::formatText(CMMsl::KappaAudioResult *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "configDelaySpreadFpThreshold", *((float *)this + 2));
    v5 = *((_DWORD *)this + 27);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_33;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "configFeatureSamples", *((_DWORD *)this + 3));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "configNonPlanarDelaySpreadThreshold", *((float *)this + 4));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "configNonPlanarPaprThreshold", *((float *)this + 5));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "configPeakEnergyFpThreshold", *((float *)this + 6));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "configPlanarDelaySpreadThreshold", *((float *)this + 7));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "configPlanarPaprThreshold", *((float *)this + 8));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "configPostTriggerLimitTime", *((_DWORD *)this + 9));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "configPreTriggerLimitTime", *((_DWORD *)this + 10));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "configRawRmsMaxFpThreshold", *((float *)this + 11));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "configRawRmsMeanFpThreshold", *((float *)this + 12));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "configRmsClipMinAmp", *((float *)this + 13));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x800000) == 0)
      goto LABEL_15;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "delaySpread", *((float *)this + 14));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x800000) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_16;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "isAudioTPQ", *((_BYTE *)this + 100));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_17;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "isFpThresholdsMet", *((_BYTE *)this + 101));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_17:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_18;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "isNonPlanarTp", *((_BYTE *)this + 102));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_19;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "isPlanarTp", *((_BYTE *)this + 103));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_19:
    if ((v5 & 0x2000) == 0)
      goto LABEL_20;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "isTauBarWithinRange", *((_BYTE *)this + 104));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x2000) == 0)
  {
LABEL_20:
    if ((v5 & 0x4000) == 0)
      goto LABEL_21;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "papr", *((float *)this + 15));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x4000) == 0)
  {
LABEL_21:
    if ((v5 & 0x8000) == 0)
      goto LABEL_22;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "peakEnergy", *((float *)this + 16));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x8000) == 0)
  {
LABEL_22:
    if ((v5 & 0x10000) == 0)
      goto LABEL_23;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "rawRmsMax", *((float *)this + 17));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x10000) == 0)
  {
LABEL_23:
    if ((v5 & 0x20000) == 0)
      goto LABEL_24;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "rawRmsMean", *((float *)this + 18));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x20000) == 0)
  {
LABEL_24:
    if ((v5 & 0x40000) == 0)
      goto LABEL_25;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "rawRmsSum", *((float *)this + 19));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x40000) == 0)
  {
LABEL_25:
    if ((v5 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "rmsClipSum", *((float *)this + 20));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x80000) == 0)
  {
LABEL_26:
    if ((v5 & 0x100000) == 0)
      goto LABEL_27;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "sampleCount", *((_DWORD *)this + 21));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x100000) == 0)
  {
LABEL_27:
    if ((v5 & 0x200000) == 0)
      goto LABEL_28;
LABEL_57:
    PB::TextFormatter::format(a2, "tTimesRmsClipSum", *((float *)this + 23));
    if ((*((_DWORD *)this + 27) & 0x400000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_29;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "t2TimesRmsClipSum", *((float *)this + 22));
  v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x200000) != 0)
    goto LABEL_57;
LABEL_28:
  if ((v5 & 0x400000) != 0)
LABEL_29:
    PB::TextFormatter::format(a2, "tauBar", *((float *)this + 24));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaAudioResult::readFrom(CMMsl::KappaAudioResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  int v29;
  BOOL v30;
  int v31;
  BOOL v32;
  int v33;
  BOOL v34;
  int v35;
  BOOL v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 27) |= 0x800000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v21 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v21 = v20 != 0;
              }
              *((_BYTE *)this + 100) = v21;
              goto LABEL_159;
            case 2u:
              *((_DWORD *)this + 27) |= 0x80000u;
              v23 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v24 = *(_QWORD *)a2;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                v55 = 0;
                v56 = 0;
                v27 = 0;
                if (v2 <= v23)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_168;
                  }
                  v57 = v23++;
                  v58 = *(_BYTE *)(v24 + v57);
                  *((_QWORD *)a2 + 1) = v23;
                  v27 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0)
                    break;
                  v55 += 7;
                  v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_167:
                    v2 = v57 + 1;
                    goto LABEL_168;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v27) = 0;
                goto LABEL_167;
              }
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v2 = v23 + 1;
                *((_QWORD *)a2 + 1) = v23 + 1;
                v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0)
                  goto LABEL_168;
                v25 += 7;
                v23 = v2;
                v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_168:
              *((_DWORD *)this + 21) = v27;
              goto LABEL_159;
            case 3u:
              *((_DWORD *)this + 27) |= 0x20000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_118;
              *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_158;
            case 4u:
              *((_DWORD *)this + 27) |= 0x10000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_118;
              *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_158;
            case 5u:
              *((_DWORD *)this + 27) |= 0x8000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_118;
              *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_158;
            case 6u:
              *((_DWORD *)this + 27) |= 0x200000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_118;
              *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_158;
            case 7u:
              *((_DWORD *)this + 27) |= 0x40000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_118;
              *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_158;
            case 8u:
              *((_DWORD *)this + 27) |= 0x400000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_118;
              *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_158;
            case 9u:
              *((_DWORD *)this + 27) |= 0x1000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_118;
              *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_158;
            case 0xAu:
              *((_DWORD *)this + 27) |= 0x100000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_118;
              *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_158;
            case 0xBu:
              *((_DWORD *)this + 27) |= 0x4000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_118;
              *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_158;
            case 0xCu:
              *((_DWORD *)this + 27) |= 0x2000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_118;
              *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_158;
            case 0xDu:
              *((_DWORD *)this + 27) |= 0x4000000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v30 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v30 = v29 != 0;
              }
              *((_BYTE *)this + 103) = v30;
              goto LABEL_159;
            case 0xEu:
              *((_DWORD *)this + 27) |= 0x2000000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v32 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v31 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v32 = v31 != 0;
              }
              *((_BYTE *)this + 102) = v32;
              goto LABEL_159;
            case 0xFu:
              *((_DWORD *)this + 27) |= 0x1000000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v34 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v34 = v33 != 0;
              }
              *((_BYTE *)this + 101) = v34;
              goto LABEL_159;
            case 0x10u:
              *((_DWORD *)this + 27) |= 0x8000000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v36 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v35 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v36 = v35 != 0;
              }
              *((_BYTE *)this + 104) = v36;
              goto LABEL_159;
            case 0x11u:
              *((_DWORD *)this + 27) |= 2u;
              v37 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v38 = *(_QWORD *)a2;
              if (v37 > 0xFFFFFFFFFFFFFFF5 || v37 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v41 = 0;
                if (v2 <= v37)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v37)
                  {
                    LODWORD(v41) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_173;
                  }
                  v61 = v37++;
                  v62 = *(_BYTE *)(v38 + v61);
                  *((_QWORD *)a2 + 1) = v37;
                  v41 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v41) = 0;
LABEL_172:
                    v2 = v61 + 1;
                    goto LABEL_173;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v41) = 0;
                goto LABEL_172;
              }
              v39 = 0;
              v40 = 0;
              v41 = 0;
              do
              {
                v2 = v37 + 1;
                *((_QWORD *)a2 + 1) = v37 + 1;
                v42 = *(_BYTE *)(v38 + v37);
                v41 |= (unint64_t)(v42 & 0x7F) << v39;
                if ((v42 & 0x80) == 0)
                  goto LABEL_173;
                v39 += 7;
                v37 = v2;
                v14 = v40++ > 8;
              }
              while (!v14);
              LODWORD(v41) = 0;
LABEL_173:
              *((_DWORD *)this + 3) = v41;
              goto LABEL_159;
            case 0x12u:
              *((_DWORD *)this + 27) |= 0x800u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_118;
              *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_158;
            case 0x13u:
              *((_DWORD *)this + 27) |= 0x100u;
              v43 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v44 = *(_QWORD *)a2;
              if (v43 > 0xFFFFFFFFFFFFFFF5 || v43 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v47 = 0;
                if (v2 <= v43)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v43)
                  {
                    LODWORD(v47) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_178;
                  }
                  v65 = v43++;
                  v66 = *(_BYTE *)(v44 + v65);
                  *((_QWORD *)a2 + 1) = v43;
                  v47 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v47) = 0;
LABEL_177:
                    v2 = v65 + 1;
                    goto LABEL_178;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v47) = 0;
                goto LABEL_177;
              }
              v45 = 0;
              v46 = 0;
              v47 = 0;
              do
              {
                v2 = v43 + 1;
                *((_QWORD *)a2 + 1) = v43 + 1;
                v48 = *(_BYTE *)(v44 + v43);
                v47 |= (unint64_t)(v48 & 0x7F) << v45;
                if ((v48 & 0x80) == 0)
                  goto LABEL_178;
                v45 += 7;
                v43 = v2;
                v14 = v46++ > 8;
              }
              while (!v14);
              LODWORD(v47) = 0;
LABEL_178:
              *((_DWORD *)this + 10) = v47;
              goto LABEL_159;
            case 0x14u:
              *((_DWORD *)this + 27) |= 0x80u;
              v49 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v50 = *(_QWORD *)a2;
              if (v49 > 0xFFFFFFFFFFFFFFF5 || v49 + 10 > v2)
              {
                v67 = 0;
                v68 = 0;
                v53 = 0;
                if (v2 <= v49)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v49)
                  {
                    LODWORD(v53) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_183;
                  }
                  v69 = v49++;
                  v70 = *(_BYTE *)(v50 + v69);
                  *((_QWORD *)a2 + 1) = v49;
                  v53 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0)
                    break;
                  v67 += 7;
                  v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v53) = 0;
LABEL_182:
                    v2 = v69 + 1;
                    goto LABEL_183;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v53) = 0;
                goto LABEL_182;
              }
              v51 = 0;
              v52 = 0;
              v53 = 0;
              do
              {
                v2 = v49 + 1;
                *((_QWORD *)a2 + 1) = v49 + 1;
                v54 = *(_BYTE *)(v50 + v49);
                v53 |= (unint64_t)(v54 & 0x7F) << v51;
                if ((v54 & 0x80) == 0)
                  goto LABEL_183;
                v51 += 7;
                v49 = v2;
                v14 = v52++ > 8;
              }
              while (!v14);
              LODWORD(v53) = 0;
LABEL_183:
              *((_DWORD *)this + 9) = v53;
LABEL_159:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0x15u:
              *((_DWORD *)this + 27) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_118;
              *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_158;
            case 0x16u:
              *((_DWORD *)this + 27) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_118;
              *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_158;
            case 0x17u:
              *((_DWORD *)this + 27) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_118;
              *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_158;
            case 0x18u:
              *((_DWORD *)this + 27) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_118;
              *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_158;
            case 0x19u:
              *((_DWORD *)this + 27) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_118;
              *((_DWORD *)this + 2) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_158;
            case 0x1Au:
              *((_DWORD *)this + 27) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_118;
              *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_158;
            case 0x1Bu:
              *((_DWORD *)this + 27) |= 0x400u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_118;
              *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_158;
            case 0x1Cu:
              *((_DWORD *)this + 27) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_158:
                v2 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_118:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_159;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_159;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaAudioResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 108);
  if ((v4 & 0x800000) != 0)
  {
    this = PB::Writer::write(a2, *(_BYTE *)(this + 100), 1u);
    v4 = *(_DWORD *)(v3 + 108);
    if ((v4 & 0x80000) == 0)
    {
LABEL_3:
      if ((v4 & 0x20000) == 0)
        goto LABEL_4;
      goto LABEL_32;
    }
  }
  else if ((v4 & 0x80000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 84), 2u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x20000) == 0)
  {
LABEL_4:
    if ((v4 & 0x10000) == 0)
      goto LABEL_5;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 3u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x10000) == 0)
  {
LABEL_5:
    if ((v4 & 0x8000) == 0)
      goto LABEL_6;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 4u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x8000) == 0)
  {
LABEL_6:
    if ((v4 & 0x200000) == 0)
      goto LABEL_7;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 5u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x200000) == 0)
  {
LABEL_7:
    if ((v4 & 0x40000) == 0)
      goto LABEL_8;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 92), 6u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x40000) == 0)
  {
LABEL_8:
    if ((v4 & 0x400000) == 0)
      goto LABEL_9;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 7u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x400000) == 0)
  {
LABEL_9:
    if ((v4 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 8u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x1000) == 0)
  {
LABEL_10:
    if ((v4 & 0x100000) == 0)
      goto LABEL_11;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 9u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x100000) == 0)
  {
LABEL_11:
    if ((v4 & 0x4000) == 0)
      goto LABEL_12;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 0xAu);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x4000) == 0)
  {
LABEL_12:
    if ((v4 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 0xBu);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x2000) == 0)
  {
LABEL_13:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_14;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 0xCu);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_15;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 103), 0xDu);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_16;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 102), 0xEu);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_17;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 101), 0xFu);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_17:
    if ((v4 & 2) == 0)
      goto LABEL_18;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 104), 0x10u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 2) == 0)
  {
LABEL_18:
    if ((v4 & 0x800) == 0)
      goto LABEL_19;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 12), 0x11u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x800) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0x12u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x80) == 0)
      goto LABEL_21;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 0x13u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x80) == 0)
  {
LABEL_21:
    if ((v4 & 0x40) == 0)
      goto LABEL_22;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 36), 0x14u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x40) == 0)
  {
LABEL_22:
    if ((v4 & 0x20) == 0)
      goto LABEL_23;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 0x15u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x20) == 0)
  {
LABEL_23:
    if ((v4 & 8) == 0)
      goto LABEL_24;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 0x16u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 8) == 0)
  {
LABEL_24:
    if ((v4 & 4) == 0)
      goto LABEL_25;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 0x17u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 4) == 0)
  {
LABEL_25:
    if ((v4 & 1) == 0)
      goto LABEL_26;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 0x18u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 1) == 0)
  {
LABEL_26:
    if ((v4 & 0x10) == 0)
      goto LABEL_27;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(float *)(v3 + 8), 0x19u);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x10) == 0)
  {
LABEL_27:
    if ((v4 & 0x400) == 0)
      goto LABEL_28;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 0x1Au);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x400) == 0)
  {
LABEL_28:
    if ((v4 & 0x200) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 44), 0x1Cu);
  }
LABEL_56:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 0x1Bu);
  if ((*(_DWORD *)(v3 + 108) & 0x200) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 44), 0x1Cu);
  return this;
}

uint64_t CMMsl::KappaAudioResult::hash_value(CMMsl::KappaAudioResult *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  float v47;
  uint64_t v48;

  v1 = *((_DWORD *)this + 27);
  if ((v1 & 0x800000) != 0)
  {
    v2 = *((unsigned __int8 *)this + 100);
    if ((v1 & 0x80000) != 0)
    {
LABEL_3:
      v3 = *((unsigned int *)this + 21);
      if ((v1 & 0x20000) != 0)
        goto LABEL_4;
LABEL_70:
      v5 = 0;
      if ((v1 & 0x10000) != 0)
        goto LABEL_7;
LABEL_71:
      v7 = 0;
      if ((v1 & 0x8000) != 0)
        goto LABEL_10;
LABEL_72:
      v9 = 0;
      if ((v1 & 0x200000) != 0)
        goto LABEL_13;
LABEL_73:
      v11 = 0;
      if ((v1 & 0x40000) != 0)
        goto LABEL_16;
LABEL_74:
      v13 = 0;
      if ((v1 & 0x400000) != 0)
        goto LABEL_19;
LABEL_75:
      v15 = 0;
      if ((v1 & 0x1000) != 0)
        goto LABEL_22;
LABEL_76:
      v17 = 0;
      if ((v1 & 0x100000) != 0)
        goto LABEL_25;
LABEL_77:
      v19 = 0;
      if ((v1 & 0x4000) != 0)
        goto LABEL_28;
LABEL_78:
      v21 = 0;
      if ((v1 & 0x2000) != 0)
        goto LABEL_31;
LABEL_79:
      v23 = 0;
      if ((v1 & 0x4000000) != 0)
        goto LABEL_34;
      goto LABEL_80;
    }
  }
  else
  {
    v2 = 0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((v1 & 0x20000) == 0)
    goto LABEL_70;
LABEL_4:
  v4 = *((float *)this + 19);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_71;
LABEL_7:
  v6 = *((float *)this + 18);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_72;
LABEL_10:
  v8 = *((float *)this + 17);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  if ((v1 & 0x200000) == 0)
    goto LABEL_73;
LABEL_13:
  v10 = *((float *)this + 23);
  v11 = LODWORD(v10);
  if (v10 == 0.0)
    v11 = 0;
  if ((v1 & 0x40000) == 0)
    goto LABEL_74;
LABEL_16:
  v12 = *((float *)this + 20);
  v13 = LODWORD(v12);
  if (v12 == 0.0)
    v13 = 0;
  if ((v1 & 0x400000) == 0)
    goto LABEL_75;
LABEL_19:
  v14 = *((float *)this + 24);
  v15 = LODWORD(v14);
  if (v14 == 0.0)
    v15 = 0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_76;
LABEL_22:
  v16 = *((float *)this + 14);
  v17 = LODWORD(v16);
  if (v16 == 0.0)
    v17 = 0;
  if ((v1 & 0x100000) == 0)
    goto LABEL_77;
LABEL_25:
  v18 = *((float *)this + 22);
  v19 = LODWORD(v18);
  if (v18 == 0.0)
    v19 = 0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_78;
LABEL_28:
  v20 = *((float *)this + 16);
  v21 = LODWORD(v20);
  if (v20 == 0.0)
    v21 = 0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_79;
LABEL_31:
  v22 = *((float *)this + 15);
  v23 = LODWORD(v22);
  if (v22 == 0.0)
    v23 = 0;
  if ((v1 & 0x4000000) != 0)
  {
LABEL_34:
    v24 = *((unsigned __int8 *)this + 103);
    if ((v1 & 0x2000000) != 0)
      goto LABEL_35;
    goto LABEL_81;
  }
LABEL_80:
  v24 = 0;
  if ((v1 & 0x2000000) != 0)
  {
LABEL_35:
    v25 = *((unsigned __int8 *)this + 102);
    if ((v1 & 0x1000000) != 0)
      goto LABEL_36;
    goto LABEL_82;
  }
LABEL_81:
  v25 = 0;
  if ((v1 & 0x1000000) != 0)
  {
LABEL_36:
    v26 = *((unsigned __int8 *)this + 101);
    if ((v1 & 0x8000000) != 0)
      goto LABEL_37;
    goto LABEL_83;
  }
LABEL_82:
  v26 = 0;
  if ((v1 & 0x8000000) != 0)
  {
LABEL_37:
    v27 = *((unsigned __int8 *)this + 104);
    if ((v1 & 2) != 0)
      goto LABEL_38;
    goto LABEL_84;
  }
LABEL_83:
  v27 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_38:
    v28 = *((int *)this + 3);
    if ((v1 & 0x800) != 0)
      goto LABEL_39;
LABEL_85:
    v30 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_42;
    goto LABEL_86;
  }
LABEL_84:
  v28 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_85;
LABEL_39:
  v29 = *((float *)this + 13);
  v30 = LODWORD(v29);
  if (v29 == 0.0)
    v30 = 0;
  if ((v1 & 0x100) != 0)
  {
LABEL_42:
    v31 = *((int *)this + 10);
    if ((v1 & 0x80) != 0)
      goto LABEL_43;
    goto LABEL_87;
  }
LABEL_86:
  v31 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_43:
    v32 = *((int *)this + 9);
    if ((v1 & 0x40) != 0)
      goto LABEL_44;
LABEL_88:
    v34 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_47;
LABEL_89:
    v36 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_50;
LABEL_90:
    v38 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_53;
LABEL_91:
    v40 = 0;
    if ((v1 & 1) != 0)
      goto LABEL_56;
LABEL_92:
    v42 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_59;
LABEL_93:
    v44 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_62;
    goto LABEL_94;
  }
LABEL_87:
  v32 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_88;
LABEL_44:
  v33 = *((float *)this + 8);
  v34 = LODWORD(v33);
  if (v33 == 0.0)
    v34 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_89;
LABEL_47:
  v35 = *((float *)this + 7);
  v36 = LODWORD(v35);
  if (v35 == 0.0)
    v36 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_90;
LABEL_50:
  v37 = *((float *)this + 5);
  v38 = LODWORD(v37);
  if (v37 == 0.0)
    v38 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_91;
LABEL_53:
  v39 = *((float *)this + 4);
  v40 = LODWORD(v39);
  if (v39 == 0.0)
    v40 = 0;
  if ((v1 & 1) == 0)
    goto LABEL_92;
LABEL_56:
  v41 = *((float *)this + 2);
  v42 = LODWORD(v41);
  if (v41 == 0.0)
    v42 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_93;
LABEL_59:
  v43 = *((float *)this + 6);
  v44 = LODWORD(v43);
  if (v43 == 0.0)
    v44 = 0;
  if ((v1 & 0x400) != 0)
  {
LABEL_62:
    v45 = *((float *)this + 12);
    v46 = LODWORD(v45);
    if (v45 == 0.0)
      v46 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_65;
LABEL_95:
    v48 = 0;
    return v3 ^ v2 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v30 ^ v31 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v42 ^ v44 ^ v46 ^ v48;
  }
LABEL_94:
  v46 = 0;
  if ((v1 & 0x200) == 0)
    goto LABEL_95;
LABEL_65:
  v47 = *((float *)this + 11);
  v48 = LODWORD(v47);
  if (v47 == 0.0)
    v48 = 0;
  return v3 ^ v2 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v30 ^ v31 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v42 ^ v44 ^ v46 ^ v48;
}

void CMMsl::KappaBaroResult::~KappaBaroResult(CMMsl::KappaBaroResult *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::KappaBaroResult::KappaBaroResult(CMMsl::KappaBaroResult *this, const CMMsl::KappaBaroResult *a2)
{
  int v2;
  int v3;
  char v4;
  float result;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  *(_QWORD *)this = off_100351F30;
  *((_DWORD *)this + 38) = 0;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x20000000) != 0)
  {
    v4 = *((_BYTE *)a2 + 148);
    v3 = 0x20000000;
    *((_DWORD *)this + 38) = 0x20000000;
    *((_BYTE *)this + 148) = v4;
    v2 = *((_DWORD *)a2 + 38);
    if ((v2 & 0x200000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x200000) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 29);
    v3 |= 0x200000u;
    *((_DWORD *)this + 38) = v3;
    *((float *)this + 29) = result;
    v2 = *((_DWORD *)a2 + 38);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *((_QWORD *)a2 + 3);
    v3 |= 4u;
    *((_DWORD *)this + 38) = v3;
    *((_QWORD *)this + 3) = v6;
    v2 = *((_DWORD *)a2 + 38);
    if ((v2 & 0x10000000) == 0)
    {
LABEL_8:
      if ((v2 & 0x4000000) == 0)
        goto LABEL_9;
      goto LABEL_37;
    }
  }
  else if ((v2 & 0x10000000) == 0)
  {
    goto LABEL_8;
  }
  result = *((float *)a2 + 36);
  v3 |= 0x10000000u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 36) = result;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_9:
    if ((v2 & 0x100000) == 0)
      goto LABEL_10;
    goto LABEL_38;
  }
LABEL_37:
  result = *((float *)a2 + 34);
  v3 |= 0x4000000u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 34) = result;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x100000) == 0)
  {
LABEL_10:
    if ((v2 & 0x40000) == 0)
      goto LABEL_11;
    goto LABEL_39;
  }
LABEL_38:
  v7 = *((_DWORD *)a2 + 28);
  v3 |= 0x100000u;
  *((_DWORD *)this + 38) = v3;
  *((_DWORD *)this + 28) = v7;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x40000) == 0)
  {
LABEL_11:
    if ((v2 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_40;
  }
LABEL_39:
  v8 = *((_DWORD *)a2 + 26);
  v3 |= 0x40000u;
  *((_DWORD *)this + 38) = v3;
  *((_DWORD *)this + 26) = v8;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x10) == 0)
  {
LABEL_12:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_13;
    goto LABEL_41;
  }
LABEL_40:
  v9 = *((_QWORD *)a2 + 5);
  v3 |= 0x10u;
  *((_DWORD *)this + 38) = v3;
  *((_QWORD *)this + 5) = v9;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_13:
    if ((v2 & 0x8000) == 0)
      goto LABEL_14;
    goto LABEL_42;
  }
LABEL_41:
  result = *((float *)a2 + 35);
  v3 |= 0x8000000u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 35) = result;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x8000) == 0)
  {
LABEL_14:
    if ((v2 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_43;
  }
LABEL_42:
  v10 = *((_DWORD *)a2 + 23);
  v3 |= 0x8000u;
  *((_DWORD *)this + 38) = v3;
  *((_DWORD *)this + 23) = v10;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x4000) == 0)
  {
LABEL_15:
    if ((v2 & 0x800000) == 0)
      goto LABEL_16;
    goto LABEL_44;
  }
LABEL_43:
  v11 = *((_DWORD *)a2 + 22);
  v3 |= 0x4000u;
  *((_DWORD *)this + 38) = v3;
  *((_DWORD *)this + 22) = v11;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x800000) == 0)
  {
LABEL_16:
    if ((v2 & 0x400000) == 0)
      goto LABEL_17;
    goto LABEL_45;
  }
LABEL_44:
  result = *((float *)a2 + 31);
  v3 |= 0x800000u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 31) = result;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x400000) == 0)
  {
LABEL_17:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_18;
    goto LABEL_46;
  }
LABEL_45:
  result = *((float *)a2 + 30);
  v3 |= 0x400000u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 30) = result;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_47;
  }
LABEL_46:
  result = *((float *)a2 + 32);
  v3 |= 0x1000000u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 32) = result;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x2000) == 0)
  {
LABEL_19:
    if ((v2 & 0x1000) == 0)
      goto LABEL_20;
    goto LABEL_48;
  }
LABEL_47:
  result = *((float *)a2 + 21);
  v3 |= 0x2000u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 21) = result;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x1000) == 0)
  {
LABEL_20:
    if ((v2 & 0x800) == 0)
      goto LABEL_21;
    goto LABEL_49;
  }
LABEL_48:
  result = *((float *)a2 + 20);
  v3 |= 0x1000u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 20) = result;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x800) == 0)
  {
LABEL_21:
    if ((v2 & 0x400) == 0)
      goto LABEL_22;
    goto LABEL_50;
  }
LABEL_49:
  result = *((float *)a2 + 19);
  v3 |= 0x800u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 19) = result;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x400) == 0)
  {
LABEL_22:
    if ((v2 & 0x200) == 0)
      goto LABEL_23;
    goto LABEL_51;
  }
LABEL_50:
  result = *((float *)a2 + 18);
  v3 |= 0x400u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 18) = result;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x200) == 0)
  {
LABEL_23:
    if ((v2 & 1) == 0)
      goto LABEL_24;
    goto LABEL_52;
  }
LABEL_51:
  result = *((float *)a2 + 17);
  v3 |= 0x200u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 17) = result;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 1) == 0)
  {
LABEL_24:
    if ((v2 & 2) == 0)
      goto LABEL_25;
    goto LABEL_53;
  }
LABEL_52:
  v12 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *((_DWORD *)this + 38) = v3;
  *((_QWORD *)this + 1) = v12;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 2) == 0)
  {
LABEL_25:
    if ((v2 & 0x10000) == 0)
      goto LABEL_26;
    goto LABEL_54;
  }
LABEL_53:
  v13 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *((_DWORD *)this + 38) = v3;
  *((_QWORD *)this + 2) = v13;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x10000) == 0)
  {
LABEL_26:
    if ((v2 & 0x20) == 0)
      goto LABEL_27;
    goto LABEL_55;
  }
LABEL_54:
  result = *((float *)a2 + 24);
  v3 |= 0x10000u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 24) = result;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x20) == 0)
  {
LABEL_27:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_28;
    goto LABEL_56;
  }
LABEL_55:
  v14 = *((_QWORD *)a2 + 6);
  v3 |= 0x20u;
  *((_DWORD *)this + 38) = v3;
  *((_QWORD *)this + 6) = v14;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_28:
    if ((v2 & 0x20000) == 0)
      goto LABEL_29;
    goto LABEL_57;
  }
LABEL_56:
  result = *((float *)a2 + 33);
  v3 |= 0x2000000u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 33) = result;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x20000) == 0)
  {
LABEL_29:
    if ((v2 & 0x100) == 0)
      goto LABEL_30;
    goto LABEL_58;
  }
LABEL_57:
  result = *((float *)a2 + 25);
  v3 |= 0x20000u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 25) = result;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x100) == 0)
  {
LABEL_30:
    if ((v2 & 0x80000) == 0)
      goto LABEL_31;
    goto LABEL_59;
  }
LABEL_58:
  result = *((float *)a2 + 16);
  v3 |= 0x100u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 16) = result;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x80000) == 0)
  {
LABEL_31:
    if ((v2 & 0x40) == 0)
      goto LABEL_32;
    goto LABEL_60;
  }
LABEL_59:
  v15 = *((_DWORD *)a2 + 27);
  v3 |= 0x80000u;
  *((_DWORD *)this + 38) = v3;
  *((_DWORD *)this + 27) = v15;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x40) == 0)
  {
LABEL_32:
    if ((v2 & 8) == 0)
      goto LABEL_33;
    goto LABEL_61;
  }
LABEL_60:
  result = *((float *)a2 + 14);
  v3 |= 0x40u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 14) = result;
  v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 8) == 0)
  {
LABEL_33:
    if ((v2 & 0x80) == 0)
      return result;
LABEL_62:
    result = *((float *)a2 + 15);
    *((_DWORD *)this + 38) = v3 | 0x80;
    *((float *)this + 15) = result;
    return result;
  }
LABEL_61:
  v16 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *((_DWORD *)this + 38) = v3;
  *((_QWORD *)this + 4) = v16;
  if ((*((_DWORD *)a2 + 38) & 0x80) != 0)
    goto LABEL_62;
  return result;
}

CMMsl *CMMsl::KappaBaroResult::operator=(CMMsl *a1, const CMMsl::KappaBaroResult *a2)
{
  CMMsl::KappaBaroResult *v3;
  _BYTE v5[160];

  if (a1 != a2)
  {
    CMMsl::KappaBaroResult::KappaBaroResult((CMMsl::KappaBaroResult *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaBaroResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaBaroResult *a2, CMMsl::KappaBaroResult *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  float result;

  v3 = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 148);
  *((_BYTE *)this + 148) = *((_BYTE *)a2 + 148);
  *((_BYTE *)a2 + 148) = v3;
  v4 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v4;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v6;
  v7 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v7;
  LODWORD(v5) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v5;
  LODWORD(v5) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v5;
  v8 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  v9 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v9;
  LODWORD(v8) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v8;
  LODWORD(v8) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v8;
  v10 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v10;
  v11 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v11;
  v12 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v12;
  v13 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v13;
  v14 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v14;
  v15 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v15;
  v16 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v16;
  v17 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v17;
  v18 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v18;
  v19 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v19;
  v20 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v20;
  v21 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v21;
  v22 = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v22;
  v23 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v23;
  v24 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v24;
  LODWORD(v21) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v21;
  v25 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v25;
  v26 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v26;
  result = *((float *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((float *)a2 + 15) = result;
  return result;
}

float CMMsl::KappaBaroResult::KappaBaroResult(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100351F30;
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a2 + 152) = 0;
  *(_BYTE *)(a1 + 148) = *(_BYTE *)(a2 + 148);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  result = *(float *)(a2 + 60);
  *(float *)(a1 + 60) = result;
  return result;
}

CMMsl *CMMsl::KappaBaroResult::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::KappaBaroResult *v3;
  _BYTE v5[160];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaBaroResult::KappaBaroResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaBaroResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaBaroResult::formatText(CMMsl::KappaBaroResult *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x20000000) != 0)
  {
    PB::TextFormatter::format(a2, "airbagDetected", *((_BYTE *)this + 148));
    v5 = *((_DWORD *)this + 38);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_35;
    }
  }
  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "configMaximumAccelBaroTimeDifferenceThreshold", *((float *)this + 14));
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 0x100) == 0)
      goto LABEL_5;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "configMinimumAccelNormInWindowThreshold", *((float *)this + 15));
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x100) == 0)
  {
LABEL_5:
    if ((v5 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "configMinimumAccelNormOverEpochThreshold", *((float *)this + 16));
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x200) == 0)
  {
LABEL_6:
    if ((v5 & 0x400) == 0)
      goto LABEL_7;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "configMinimumAccelNormThreshold", *((float *)this + 17));
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x400) == 0)
  {
LABEL_7:
    if ((v5 & 0x800) == 0)
      goto LABEL_8;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "configMinimumWidthThreshold", *((float *)this + 18));
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x800) == 0)
  {
LABEL_8:
    if ((v5 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "configPeakPressureThreshold", *((float *)this + 19));
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x1000) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "configRiseTimeThreshold", *((float *)this + 20));
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000) == 0)
      goto LABEL_11;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "configWidthThreshold", *((float *)this + 21));
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x4000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "diffPeakTimeTrigger", *((_DWORD *)this + 22));
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x8000) == 0)
  {
LABEL_12:
    if ((v5 & 1) == 0)
      goto LABEL_13;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "diffTimeTrigger", *((_DWORD *)this + 23));
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 1) == 0)
  {
LABEL_13:
    if ((v5 & 2) == 0)
      goto LABEL_14;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "epochFirstTimestamp", *((_QWORD *)this + 1));
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 2) == 0)
  {
LABEL_14:
    if ((v5 & 4) == 0)
      goto LABEL_15;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "epochLastTimestamp", *((_QWORD *)this + 2));
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 4) == 0)
  {
LABEL_15:
    if ((v5 & 0x10000) == 0)
      goto LABEL_16;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "eventStartTime", *((_QWORD *)this + 3));
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x10000) == 0)
  {
LABEL_16:
    if ((v5 & 0x20000) == 0)
      goto LABEL_17;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "maxAccelNormInWindow", *((float *)this + 24));
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x20000) == 0)
  {
LABEL_17:
    if ((v5 & 8) == 0)
      goto LABEL_18;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "maxAccelNormOverEpoch", *((float *)this + 25));
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 8) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "maxAccelNormOverEpochTimestamp", *((_QWORD *)this + 4));
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 0x80000) == 0)
      goto LABEL_20;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "numAirbags", *((_DWORD *)this + 26));
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x80000) == 0)
  {
LABEL_20:
    if ((v5 & 0x100000) == 0)
      goto LABEL_21;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "numBarosInEpoch", *((_DWORD *)this + 27));
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x100000) == 0)
  {
LABEL_21:
    if ((v5 & 0x200000) == 0)
      goto LABEL_22;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "odr", *((_DWORD *)this + 28));
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x200000) == 0)
  {
LABEL_22:
    if ((v5 & 0x10) == 0)
      goto LABEL_23;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "peakPressure", *((float *)this + 29));
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x10) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "peakTimestamp", *((_QWORD *)this + 5));
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v5 & 0x800000) == 0)
      goto LABEL_25;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "postEventPressureMedian", *((float *)this + 30));
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x800000) == 0)
  {
LABEL_25:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_26;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "preEventPressureMedian", *((float *)this + 31));
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_27;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "prePostEventPressureMedian", *((float *)this + 32));
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_28;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "pressureMedian", *((float *)this + 33));
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_29;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "riseTime", *((float *)this + 34));
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x20) == 0)
      goto LABEL_30;
LABEL_61:
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 6));
    if ((*((_DWORD *)this + 38) & 0x10000000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_31;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "riseTimeTo80", *((float *)this + 35));
  v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x20) != 0)
    goto LABEL_61;
LABEL_30:
  if ((v5 & 0x10000000) != 0)
LABEL_31:
    PB::TextFormatter::format(a2, "width", *((float *)this + 36));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaBaroResult::readFrom(CMMsl::KappaBaroResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  int v22;
  BOOL v23;
  uint64_t result;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char v105;
  unsigned int v106;
  uint64_t v107;
  unint64_t v108;
  char v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  char v116;
  unsigned int v117;
  uint64_t v118;
  unint64_t v119;
  char v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  char v125;
  unsigned int v126;
  uint64_t v127;
  unint64_t v128;
  char v129;
  unint64_t v130;
  char v131;
  unsigned int v132;
  unint64_t v133;
  char v134;
  char v135;
  unsigned int v136;
  unint64_t v137;
  char v138;
  char v139;
  unsigned int v140;
  unint64_t v141;
  char v142;
  char v143;
  unsigned int v144;
  unint64_t v145;
  char v146;
  char v147;
  unsigned int v148;
  unint64_t v149;
  char v150;
  char v151;
  unsigned int v152;
  unint64_t v153;
  char v154;
  char v155;
  unsigned int v156;
  unint64_t v157;
  char v158;
  char v159;
  unsigned int v160;
  unint64_t v161;
  char v162;
  char v163;
  unsigned int v164;
  unint64_t v165;
  char v166;
  char v167;
  unsigned int v168;
  unint64_t v169;
  char v170;
  char v171;
  unsigned int v172;
  unint64_t v173;
  char v174;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_DWORD *)this + 38) |= 0x20000000u;
          v20 = *((_QWORD *)a2 + 1);
          if (v20 >= *((_QWORD *)a2 + 2))
          {
            v23 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v21 = v20 + 1;
            v22 = *(unsigned __int8 *)(*(_QWORD *)a2 + v20);
            *((_QWORD *)a2 + 1) = v21;
            v23 = v22 != 0;
          }
          *((_BYTE *)this + 148) = v23;
          goto LABEL_238;
        case 2u:
          *((_DWORD *)this + 38) |= 0x200000u;
          v25 = *((_QWORD *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_156;
          *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v25);
          goto LABEL_237;
        case 3u:
          *((_DWORD *)this + 38) |= 4u;
          v26 = *((_QWORD *)a2 + 1);
          v27 = *((_QWORD *)a2 + 2);
          v28 = *(_QWORD *)a2;
          if (v26 <= 0xFFFFFFFFFFFFFFF5 && v26 + 10 <= v27)
          {
            v29 = 0;
            v30 = 0;
            v31 = 0;
            do
            {
              v32 = v26 + 1;
              *((_QWORD *)a2 + 1) = v26 + 1;
              v33 = *(_BYTE *)(v28 + v26);
              v31 |= (unint64_t)(v33 & 0x7F) << v29;
              if ((v33 & 0x80) == 0)
                goto LABEL_246;
              v29 += 7;
              v26 = v32;
              v14 = v30++ > 8;
            }
            while (!v14);
LABEL_165:
            v31 = 0;
            goto LABEL_246;
          }
          v131 = 0;
          v132 = 0;
          v31 = 0;
          if (v27 <= v26)
            v27 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v27 == v26)
            {
              v31 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v133 = v26 + 1;
              v134 = *(_BYTE *)(v28 + v26);
              *((_QWORD *)a2 + 1) = v133;
              v31 |= (unint64_t)(v134 & 0x7F) << v131;
              if (v134 < 0)
              {
                v131 += 7;
                v26 = v133;
                v14 = v132++ > 8;
                if (v14)
                  goto LABEL_165;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v31 = 0;
            }
            break;
          }
LABEL_246:
          *((_QWORD *)this + 3) = v31;
          goto LABEL_238;
        case 4u:
          *((_DWORD *)this + 38) |= 0x10000000u;
          v34 = *((_QWORD *)a2 + 1);
          if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_156;
          *((_DWORD *)this + 36) = *(_DWORD *)(*(_QWORD *)a2 + v34);
          goto LABEL_237;
        case 5u:
          *((_DWORD *)this + 38) |= 0x4000000u;
          v35 = *((_QWORD *)a2 + 1);
          if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_156;
          *((_DWORD *)this + 34) = *(_DWORD *)(*(_QWORD *)a2 + v35);
          goto LABEL_237;
        case 6u:
          *((_DWORD *)this + 38) |= 0x100000u;
          v36 = *((_QWORD *)a2 + 1);
          v37 = *((_QWORD *)a2 + 2);
          v38 = *(_QWORD *)a2;
          if (v36 <= 0xFFFFFFFFFFFFFFF5 && v36 + 10 <= v37)
          {
            v39 = 0;
            v40 = 0;
            v41 = 0;
            do
            {
              v42 = v36 + 1;
              *((_QWORD *)a2 + 1) = v36 + 1;
              v43 = *(_BYTE *)(v38 + v36);
              v41 |= (unint64_t)(v43 & 0x7F) << v39;
              if ((v43 & 0x80) == 0)
                goto LABEL_250;
              v39 += 7;
              v36 = v42;
              v14 = v40++ > 8;
            }
            while (!v14);
LABEL_172:
            LODWORD(v41) = 0;
            goto LABEL_250;
          }
          v135 = 0;
          v136 = 0;
          v41 = 0;
          if (v37 <= v36)
            v37 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v37 == v36)
            {
              LODWORD(v41) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v137 = v36 + 1;
              v138 = *(_BYTE *)(v38 + v36);
              *((_QWORD *)a2 + 1) = v137;
              v41 |= (unint64_t)(v138 & 0x7F) << v135;
              if (v138 < 0)
              {
                v135 += 7;
                v36 = v137;
                v14 = v136++ > 8;
                if (v14)
                  goto LABEL_172;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v41) = 0;
            }
            break;
          }
LABEL_250:
          *((_DWORD *)this + 28) = v41;
          goto LABEL_238;
        case 7u:
          *((_DWORD *)this + 38) |= 0x40000u;
          v44 = *((_QWORD *)a2 + 1);
          v45 = *((_QWORD *)a2 + 2);
          v46 = *(_QWORD *)a2;
          if (v44 <= 0xFFFFFFFFFFFFFFF5 && v44 + 10 <= v45)
          {
            v47 = 0;
            v48 = 0;
            v49 = 0;
            do
            {
              v50 = v44 + 1;
              *((_QWORD *)a2 + 1) = v44 + 1;
              v51 = *(_BYTE *)(v46 + v44);
              v49 |= (unint64_t)(v51 & 0x7F) << v47;
              if ((v51 & 0x80) == 0)
                goto LABEL_254;
              v47 += 7;
              v44 = v50;
              v14 = v48++ > 8;
            }
            while (!v14);
LABEL_179:
            LODWORD(v49) = 0;
            goto LABEL_254;
          }
          v139 = 0;
          v140 = 0;
          v49 = 0;
          if (v45 <= v44)
            v45 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v45 == v44)
            {
              LODWORD(v49) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v141 = v44 + 1;
              v142 = *(_BYTE *)(v46 + v44);
              *((_QWORD *)a2 + 1) = v141;
              v49 |= (unint64_t)(v142 & 0x7F) << v139;
              if (v142 < 0)
              {
                v139 += 7;
                v44 = v141;
                v14 = v140++ > 8;
                if (v14)
                  goto LABEL_179;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v49) = 0;
            }
            break;
          }
LABEL_254:
          *((_DWORD *)this + 26) = v49;
          goto LABEL_238;
        case 8u:
          *((_DWORD *)this + 38) |= 0x10u;
          v52 = *((_QWORD *)a2 + 1);
          v53 = *((_QWORD *)a2 + 2);
          v54 = *(_QWORD *)a2;
          if (v52 <= 0xFFFFFFFFFFFFFFF5 && v52 + 10 <= v53)
          {
            v55 = 0;
            v56 = 0;
            v57 = 0;
            do
            {
              v58 = v52 + 1;
              *((_QWORD *)a2 + 1) = v52 + 1;
              v59 = *(_BYTE *)(v54 + v52);
              v57 |= (unint64_t)(v59 & 0x7F) << v55;
              if ((v59 & 0x80) == 0)
                goto LABEL_258;
              v55 += 7;
              v52 = v58;
              v14 = v56++ > 8;
            }
            while (!v14);
LABEL_186:
            v57 = 0;
            goto LABEL_258;
          }
          v143 = 0;
          v144 = 0;
          v57 = 0;
          if (v53 <= v52)
            v53 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v53 == v52)
            {
              v57 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v145 = v52 + 1;
              v146 = *(_BYTE *)(v54 + v52);
              *((_QWORD *)a2 + 1) = v145;
              v57 |= (unint64_t)(v146 & 0x7F) << v143;
              if (v146 < 0)
              {
                v143 += 7;
                v52 = v145;
                v14 = v144++ > 8;
                if (v14)
                  goto LABEL_186;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v57 = 0;
            }
            break;
          }
LABEL_258:
          *((_QWORD *)this + 5) = v57;
          goto LABEL_238;
        case 9u:
          *((_DWORD *)this + 38) |= 0x8000000u;
          v60 = *((_QWORD *)a2 + 1);
          if (v60 > 0xFFFFFFFFFFFFFFFBLL || v60 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_156;
          *((_DWORD *)this + 35) = *(_DWORD *)(*(_QWORD *)a2 + v60);
          goto LABEL_237;
        case 0xAu:
          *((_DWORD *)this + 38) |= 0x8000u;
          v61 = *((_QWORD *)a2 + 1);
          v62 = *((_QWORD *)a2 + 2);
          v63 = *(_QWORD *)a2;
          if (v61 <= 0xFFFFFFFFFFFFFFF5 && v61 + 10 <= v62)
          {
            v64 = 0;
            v65 = 0;
            v66 = 0;
            do
            {
              v67 = v61 + 1;
              *((_QWORD *)a2 + 1) = v61 + 1;
              v68 = *(_BYTE *)(v63 + v61);
              v66 |= (unint64_t)(v68 & 0x7F) << v64;
              if ((v68 & 0x80) == 0)
                goto LABEL_262;
              v64 += 7;
              v61 = v67;
              v14 = v65++ > 8;
            }
            while (!v14);
LABEL_193:
            LODWORD(v66) = 0;
            goto LABEL_262;
          }
          v147 = 0;
          v148 = 0;
          v66 = 0;
          if (v62 <= v61)
            v62 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v62 == v61)
            {
              LODWORD(v66) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v149 = v61 + 1;
              v150 = *(_BYTE *)(v63 + v61);
              *((_QWORD *)a2 + 1) = v149;
              v66 |= (unint64_t)(v150 & 0x7F) << v147;
              if (v150 < 0)
              {
                v147 += 7;
                v61 = v149;
                v14 = v148++ > 8;
                if (v14)
                  goto LABEL_193;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v66) = 0;
            }
            break;
          }
LABEL_262:
          *((_DWORD *)this + 23) = v66;
          goto LABEL_238;
        case 0xBu:
          *((_DWORD *)this + 38) |= 0x4000u;
          v69 = *((_QWORD *)a2 + 1);
          v70 = *((_QWORD *)a2 + 2);
          v71 = *(_QWORD *)a2;
          if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
          {
            v72 = 0;
            v73 = 0;
            v74 = 0;
            do
            {
              v75 = v69 + 1;
              *((_QWORD *)a2 + 1) = v69 + 1;
              v76 = *(_BYTE *)(v71 + v69);
              v74 |= (unint64_t)(v76 & 0x7F) << v72;
              if ((v76 & 0x80) == 0)
                goto LABEL_266;
              v72 += 7;
              v69 = v75;
              v14 = v73++ > 8;
            }
            while (!v14);
LABEL_200:
            LODWORD(v74) = 0;
            goto LABEL_266;
          }
          v151 = 0;
          v152 = 0;
          v74 = 0;
          if (v70 <= v69)
            v70 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v70 == v69)
            {
              LODWORD(v74) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v153 = v69 + 1;
              v154 = *(_BYTE *)(v71 + v69);
              *((_QWORD *)a2 + 1) = v153;
              v74 |= (unint64_t)(v154 & 0x7F) << v151;
              if (v154 < 0)
              {
                v151 += 7;
                v69 = v153;
                v14 = v152++ > 8;
                if (v14)
                  goto LABEL_200;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v74) = 0;
            }
            break;
          }
LABEL_266:
          *((_DWORD *)this + 22) = v74;
          goto LABEL_238;
        case 0xCu:
          *((_DWORD *)this + 38) |= 0x800000u;
          v77 = *((_QWORD *)a2 + 1);
          if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_156;
          *((_DWORD *)this + 31) = *(_DWORD *)(*(_QWORD *)a2 + v77);
          goto LABEL_237;
        case 0xDu:
          *((_DWORD *)this + 38) |= 0x400000u;
          v78 = *((_QWORD *)a2 + 1);
          if (v78 > 0xFFFFFFFFFFFFFFFBLL || v78 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_156;
          *((_DWORD *)this + 30) = *(_DWORD *)(*(_QWORD *)a2 + v78);
          goto LABEL_237;
        case 0xEu:
          *((_DWORD *)this + 38) |= 0x1000000u;
          v79 = *((_QWORD *)a2 + 1);
          if (v79 > 0xFFFFFFFFFFFFFFFBLL || v79 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_156;
          *((_DWORD *)this + 32) = *(_DWORD *)(*(_QWORD *)a2 + v79);
          goto LABEL_237;
        case 0xFu:
          *((_DWORD *)this + 38) |= 0x2000u;
          v80 = *((_QWORD *)a2 + 1);
          if (v80 > 0xFFFFFFFFFFFFFFFBLL || v80 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_156;
          *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v80);
          goto LABEL_237;
        case 0x10u:
          *((_DWORD *)this + 38) |= 0x1000u;
          v81 = *((_QWORD *)a2 + 1);
          if (v81 > 0xFFFFFFFFFFFFFFFBLL || v81 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_156;
          *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v81);
          goto LABEL_237;
        case 0x11u:
          *((_DWORD *)this + 38) |= 0x800u;
          v82 = *((_QWORD *)a2 + 1);
          if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_156;
          *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v82);
          goto LABEL_237;
        case 0x12u:
          *((_DWORD *)this + 38) |= 0x400u;
          v83 = *((_QWORD *)a2 + 1);
          if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_156;
          *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v83);
          goto LABEL_237;
        case 0x13u:
          *((_DWORD *)this + 38) |= 0x200u;
          v84 = *((_QWORD *)a2 + 1);
          if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_156;
          *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v84);
          goto LABEL_237;
        case 0x14u:
          *((_DWORD *)this + 38) |= 1u;
          v85 = *((_QWORD *)a2 + 1);
          v86 = *((_QWORD *)a2 + 2);
          v87 = *(_QWORD *)a2;
          if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
          {
            v88 = 0;
            v89 = 0;
            v90 = 0;
            do
            {
              v91 = v85 + 1;
              *((_QWORD *)a2 + 1) = v85 + 1;
              v92 = *(_BYTE *)(v87 + v85);
              v90 |= (unint64_t)(v92 & 0x7F) << v88;
              if ((v92 & 0x80) == 0)
                goto LABEL_270;
              v88 += 7;
              v85 = v91;
              v14 = v89++ > 8;
            }
            while (!v14);
LABEL_207:
            v90 = 0;
            goto LABEL_270;
          }
          v155 = 0;
          v156 = 0;
          v90 = 0;
          if (v86 <= v85)
            v86 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v86 == v85)
            {
              v90 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v157 = v85 + 1;
              v158 = *(_BYTE *)(v87 + v85);
              *((_QWORD *)a2 + 1) = v157;
              v90 |= (unint64_t)(v158 & 0x7F) << v155;
              if (v158 < 0)
              {
                v155 += 7;
                v85 = v157;
                v14 = v156++ > 8;
                if (v14)
                  goto LABEL_207;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v90 = 0;
            }
            break;
          }
LABEL_270:
          *((_QWORD *)this + 1) = v90;
          goto LABEL_238;
        case 0x15u:
          *((_DWORD *)this + 38) |= 2u;
          v93 = *((_QWORD *)a2 + 1);
          v94 = *((_QWORD *)a2 + 2);
          v95 = *(_QWORD *)a2;
          if (v93 <= 0xFFFFFFFFFFFFFFF5 && v93 + 10 <= v94)
          {
            v96 = 0;
            v97 = 0;
            v98 = 0;
            do
            {
              v99 = v93 + 1;
              *((_QWORD *)a2 + 1) = v93 + 1;
              v100 = *(_BYTE *)(v95 + v93);
              v98 |= (unint64_t)(v100 & 0x7F) << v96;
              if ((v100 & 0x80) == 0)
                goto LABEL_274;
              v96 += 7;
              v93 = v99;
              v14 = v97++ > 8;
            }
            while (!v14);
LABEL_214:
            v98 = 0;
            goto LABEL_274;
          }
          v159 = 0;
          v160 = 0;
          v98 = 0;
          if (v94 <= v93)
            v94 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v94 == v93)
            {
              v98 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v161 = v93 + 1;
              v162 = *(_BYTE *)(v95 + v93);
              *((_QWORD *)a2 + 1) = v161;
              v98 |= (unint64_t)(v162 & 0x7F) << v159;
              if (v162 < 0)
              {
                v159 += 7;
                v93 = v161;
                v14 = v160++ > 8;
                if (v14)
                  goto LABEL_214;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v98 = 0;
            }
            break;
          }
LABEL_274:
          *((_QWORD *)this + 2) = v98;
          goto LABEL_238;
        case 0x16u:
          *((_DWORD *)this + 38) |= 0x10000u;
          v101 = *((_QWORD *)a2 + 1);
          if (v101 > 0xFFFFFFFFFFFFFFFBLL || v101 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_156;
          *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v101);
          goto LABEL_237;
        case 0x17u:
          *((_DWORD *)this + 38) |= 0x20u;
          v102 = *((_QWORD *)a2 + 1);
          v103 = *((_QWORD *)a2 + 2);
          v104 = *(_QWORD *)a2;
          if (v102 <= 0xFFFFFFFFFFFFFFF5 && v102 + 10 <= v103)
          {
            v105 = 0;
            v106 = 0;
            v107 = 0;
            do
            {
              v108 = v102 + 1;
              *((_QWORD *)a2 + 1) = v102 + 1;
              v109 = *(_BYTE *)(v104 + v102);
              v107 |= (unint64_t)(v109 & 0x7F) << v105;
              if ((v109 & 0x80) == 0)
                goto LABEL_278;
              v105 += 7;
              v102 = v108;
              v14 = v106++ > 8;
            }
            while (!v14);
LABEL_221:
            v107 = 0;
            goto LABEL_278;
          }
          v163 = 0;
          v164 = 0;
          v107 = 0;
          if (v103 <= v102)
            v103 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v103 == v102)
            {
              v107 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v165 = v102 + 1;
              v166 = *(_BYTE *)(v104 + v102);
              *((_QWORD *)a2 + 1) = v165;
              v107 |= (unint64_t)(v166 & 0x7F) << v163;
              if (v166 < 0)
              {
                v163 += 7;
                v102 = v165;
                v14 = v164++ > 8;
                if (v14)
                  goto LABEL_221;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v107 = 0;
            }
            break;
          }
LABEL_278:
          *((_QWORD *)this + 6) = v107;
          goto LABEL_238;
        case 0x18u:
          *((_DWORD *)this + 38) |= 0x2000000u;
          v110 = *((_QWORD *)a2 + 1);
          if (v110 > 0xFFFFFFFFFFFFFFFBLL || v110 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_156;
          *((_DWORD *)this + 33) = *(_DWORD *)(*(_QWORD *)a2 + v110);
          goto LABEL_237;
        case 0x19u:
          *((_DWORD *)this + 38) |= 0x20000u;
          v111 = *((_QWORD *)a2 + 1);
          if (v111 > 0xFFFFFFFFFFFFFFFBLL || v111 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_156;
          *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v111);
          goto LABEL_237;
        case 0x1Au:
          *((_DWORD *)this + 38) |= 0x100u;
          v112 = *((_QWORD *)a2 + 1);
          if (v112 > 0xFFFFFFFFFFFFFFFBLL || v112 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_156;
          *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v112);
          goto LABEL_237;
        case 0x1Bu:
          *((_DWORD *)this + 38) |= 0x80000u;
          v113 = *((_QWORD *)a2 + 1);
          v114 = *((_QWORD *)a2 + 2);
          v115 = *(_QWORD *)a2;
          if (v113 <= 0xFFFFFFFFFFFFFFF5 && v113 + 10 <= v114)
          {
            v116 = 0;
            v117 = 0;
            v118 = 0;
            do
            {
              v119 = v113 + 1;
              *((_QWORD *)a2 + 1) = v113 + 1;
              v120 = *(_BYTE *)(v115 + v113);
              v118 |= (unint64_t)(v120 & 0x7F) << v116;
              if ((v120 & 0x80) == 0)
                goto LABEL_282;
              v116 += 7;
              v113 = v119;
              v14 = v117++ > 8;
            }
            while (!v14);
LABEL_228:
            LODWORD(v118) = 0;
            goto LABEL_282;
          }
          v167 = 0;
          v168 = 0;
          v118 = 0;
          if (v114 <= v113)
            v114 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v114 == v113)
            {
              LODWORD(v118) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v169 = v113 + 1;
              v170 = *(_BYTE *)(v115 + v113);
              *((_QWORD *)a2 + 1) = v169;
              v118 |= (unint64_t)(v170 & 0x7F) << v167;
              if (v170 < 0)
              {
                v167 += 7;
                v113 = v169;
                v14 = v168++ > 8;
                if (v14)
                  goto LABEL_228;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v118) = 0;
            }
            break;
          }
LABEL_282:
          *((_DWORD *)this + 27) = v118;
          goto LABEL_238;
        case 0x1Cu:
          *((_DWORD *)this + 38) |= 0x40u;
          v121 = *((_QWORD *)a2 + 1);
          if (v121 > 0xFFFFFFFFFFFFFFFBLL || v121 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_156;
          *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v121);
          goto LABEL_237;
        case 0x1Du:
          *((_DWORD *)this + 38) |= 8u;
          v122 = *((_QWORD *)a2 + 1);
          v123 = *((_QWORD *)a2 + 2);
          v124 = *(_QWORD *)a2;
          if (v122 <= 0xFFFFFFFFFFFFFFF5 && v122 + 10 <= v123)
          {
            v125 = 0;
            v126 = 0;
            v127 = 0;
            do
            {
              v128 = v122 + 1;
              *((_QWORD *)a2 + 1) = v122 + 1;
              v129 = *(_BYTE *)(v124 + v122);
              v127 |= (unint64_t)(v129 & 0x7F) << v125;
              if ((v129 & 0x80) == 0)
                goto LABEL_286;
              v125 += 7;
              v122 = v128;
              v14 = v126++ > 8;
            }
            while (!v14);
LABEL_235:
            v127 = 0;
            goto LABEL_286;
          }
          v171 = 0;
          v172 = 0;
          v127 = 0;
          if (v123 <= v122)
            v123 = *((_QWORD *)a2 + 1);
          break;
        case 0x1Eu:
          *((_DWORD *)this + 38) |= 0x80u;
          v130 = *((_QWORD *)a2 + 1);
          if (v130 <= 0xFFFFFFFFFFFFFFFBLL && v130 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v130);
LABEL_237:
            *((_QWORD *)a2 + 1) += 4;
          }
          else
          {
LABEL_156:
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_238;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_238;
      }
      while (1)
      {
        if (v123 == v122)
        {
          v127 = 0;
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_286;
        }
        v173 = v122 + 1;
        v174 = *(_BYTE *)(v124 + v122);
        *((_QWORD *)a2 + 1) = v173;
        v127 |= (unint64_t)(v174 & 0x7F) << v171;
        if ((v174 & 0x80) == 0)
          break;
        v171 += 7;
        v122 = v173;
        v14 = v172++ > 8;
        if (v14)
          goto LABEL_235;
      }
      if (*((_BYTE *)a2 + 24))
        v127 = 0;
LABEL_286:
      *((_QWORD *)this + 4) = v127;
LABEL_238:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaBaroResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 152);
  if ((v4 & 0x20000000) != 0)
  {
    this = PB::Writer::write(a2, *(_BYTE *)(this + 148), 1u);
    v4 = *(_DWORD *)(v3 + 152);
    if ((v4 & 0x200000) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_34;
    }
  }
  else if ((v4 & 0x200000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 116), 2u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_5;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 24), 3u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_5:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_6;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 144), 4u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x100000) == 0)
      goto LABEL_7;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 136), 5u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x100000) == 0)
  {
LABEL_7:
    if ((v4 & 0x40000) == 0)
      goto LABEL_8;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 112), 6u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x40000) == 0)
  {
LABEL_8:
    if ((v4 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 104), 7u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x10) == 0)
  {
LABEL_9:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_10;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 40), 8u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x8000) == 0)
      goto LABEL_11;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 140), 9u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x8000) == 0)
  {
LABEL_11:
    if ((v4 & 0x4000) == 0)
      goto LABEL_12;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 92), 0xAu);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x4000) == 0)
  {
LABEL_12:
    if ((v4 & 0x800000) == 0)
      goto LABEL_13;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 88), 0xBu);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x800000) == 0)
  {
LABEL_13:
    if ((v4 & 0x400000) == 0)
      goto LABEL_14;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 124), 0xCu);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x400000) == 0)
  {
LABEL_14:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_15;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(float *)(v3 + 120), 0xDu);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x2000) == 0)
      goto LABEL_16;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 128), 0xEu);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x2000) == 0)
  {
LABEL_16:
    if ((v4 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 0xFu);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x1000) == 0)
  {
LABEL_17:
    if ((v4 & 0x800) == 0)
      goto LABEL_18;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0x10u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x800) == 0)
  {
LABEL_18:
    if ((v4 & 0x400) == 0)
      goto LABEL_19;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 0x11u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x400) == 0)
  {
LABEL_19:
    if ((v4 & 0x200) == 0)
      goto LABEL_20;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0x12u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x200) == 0)
  {
LABEL_20:
    if ((v4 & 1) == 0)
      goto LABEL_21;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 0x13u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 1) == 0)
  {
LABEL_21:
    if ((v4 & 2) == 0)
      goto LABEL_22;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 8), 0x14u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 2) == 0)
  {
LABEL_22:
    if ((v4 & 0x10000) == 0)
      goto LABEL_23;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 16), 0x15u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x10000) == 0)
  {
LABEL_23:
    if ((v4 & 0x20) == 0)
      goto LABEL_24;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 0x16u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x20) == 0)
  {
LABEL_24:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_25;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 48), 0x17u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x20000) == 0)
      goto LABEL_26;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(float *)(v3 + 132), 0x18u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x20000) == 0)
  {
LABEL_26:
    if ((v4 & 0x100) == 0)
      goto LABEL_27;
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 0x19u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x100) == 0)
  {
LABEL_27:
    if ((v4 & 0x80000) == 0)
      goto LABEL_28;
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 0x1Au);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x80000) == 0)
  {
LABEL_28:
    if ((v4 & 0x40) == 0)
      goto LABEL_29;
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 108), 0x1Bu);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x40) == 0)
  {
LABEL_29:
    if ((v4 & 8) == 0)
      goto LABEL_30;
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 0x1Cu);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 8) == 0)
  {
LABEL_30:
    if ((v4 & 0x80) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 60), 0x1Eu);
  }
LABEL_60:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 32), 0x1Du);
  if ((*(_DWORD *)(v3 + 152) & 0x80) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 60), 0x1Eu);
  return this;
}

uint64_t CMMsl::KappaBaroResult::hash_value(CMMsl::KappaBaroResult *this)
{
  int v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v1 = *((_DWORD *)this + 38);
  if ((v1 & 0x20000000) == 0)
  {
    v51 = 0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_3;
LABEL_84:
    v50 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_6;
    goto LABEL_85;
  }
  v51 = *((unsigned __int8 *)this + 148);
  if ((v1 & 0x200000) == 0)
    goto LABEL_84;
LABEL_3:
  v2 = *((float *)this + 29);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  v50 = v3;
  if ((v1 & 4) != 0)
  {
LABEL_6:
    v49 = *((_QWORD *)this + 3);
    if ((v1 & 0x10000000) != 0)
      goto LABEL_7;
LABEL_86:
    v5 = 0;
    if ((v1 & 0x4000000) != 0)
      goto LABEL_11;
LABEL_87:
    v7 = 0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_15;
    goto LABEL_88;
  }
LABEL_85:
  v49 = 0;
  if ((v1 & 0x10000000) == 0)
    goto LABEL_86;
LABEL_7:
  v4 = *((float *)this + 36);
  if (v4 == 0.0)
    v5 = 0;
  else
    v5 = LODWORD(v4);
  if ((v1 & 0x4000000) == 0)
    goto LABEL_87;
LABEL_11:
  v6 = *((float *)this + 34);
  if (v6 == 0.0)
    v7 = 0;
  else
    v7 = LODWORD(v6);
  if ((v1 & 0x100000) != 0)
  {
LABEL_15:
    v8 = *((int *)this + 28);
    if ((v1 & 0x40000) != 0)
      goto LABEL_16;
    goto LABEL_89;
  }
LABEL_88:
  v8 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_16:
    v9 = *((unsigned int *)this + 26);
    if ((v1 & 0x10) != 0)
      goto LABEL_17;
    goto LABEL_90;
  }
LABEL_89:
  v9 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_17:
    v10 = *((_QWORD *)this + 5);
    if ((v1 & 0x8000000) != 0)
      goto LABEL_18;
LABEL_91:
    v12 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_22;
    goto LABEL_92;
  }
LABEL_90:
  v10 = 0;
  if ((v1 & 0x8000000) == 0)
    goto LABEL_91;
LABEL_18:
  v11 = *((float *)this + 35);
  if (v11 == 0.0)
    v12 = 0;
  else
    v12 = LODWORD(v11);
  if ((v1 & 0x8000) != 0)
  {
LABEL_22:
    v13 = *((int *)this + 23);
    if ((v1 & 0x4000) != 0)
      goto LABEL_23;
    goto LABEL_93;
  }
LABEL_92:
  v13 = 0;
  if ((v1 & 0x4000) != 0)
  {
LABEL_23:
    v14 = *((int *)this + 22);
    if ((v1 & 0x800000) != 0)
      goto LABEL_24;
LABEL_94:
    v16 = 0;
    if ((v1 & 0x400000) != 0)
      goto LABEL_28;
LABEL_95:
    v18 = 0;
    if ((v1 & 0x1000000) != 0)
      goto LABEL_32;
LABEL_96:
    v20 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_36;
LABEL_97:
    v22 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_40;
LABEL_98:
    v24 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_44;
LABEL_99:
    v26 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_48;
LABEL_100:
    v28 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_52;
LABEL_101:
    v30 = 0;
    if ((v1 & 1) != 0)
      goto LABEL_56;
    goto LABEL_102;
  }
LABEL_93:
  v14 = 0;
  if ((v1 & 0x800000) == 0)
    goto LABEL_94;
LABEL_24:
  v15 = *((float *)this + 31);
  if (v15 == 0.0)
    v16 = 0;
  else
    v16 = LODWORD(v15);
  if ((v1 & 0x400000) == 0)
    goto LABEL_95;
LABEL_28:
  v17 = *((float *)this + 30);
  if (v17 == 0.0)
    v18 = 0;
  else
    v18 = LODWORD(v17);
  if ((v1 & 0x1000000) == 0)
    goto LABEL_96;
LABEL_32:
  v19 = *((float *)this + 32);
  if (v19 == 0.0)
    v20 = 0;
  else
    v20 = LODWORD(v19);
  if ((v1 & 0x2000) == 0)
    goto LABEL_97;
LABEL_36:
  v21 = *((float *)this + 21);
  if (v21 == 0.0)
    v22 = 0;
  else
    v22 = LODWORD(v21);
  if ((v1 & 0x1000) == 0)
    goto LABEL_98;
LABEL_40:
  v23 = *((float *)this + 20);
  if (v23 == 0.0)
    v24 = 0;
  else
    v24 = LODWORD(v23);
  if ((v1 & 0x800) == 0)
    goto LABEL_99;
LABEL_44:
  v25 = *((float *)this + 19);
  if (v25 == 0.0)
    v26 = 0;
  else
    v26 = LODWORD(v25);
  if ((v1 & 0x400) == 0)
    goto LABEL_100;
LABEL_48:
  v27 = *((float *)this + 18);
  if (v27 == 0.0)
    v28 = 0;
  else
    v28 = LODWORD(v27);
  if ((v1 & 0x200) == 0)
    goto LABEL_101;
LABEL_52:
  v29 = *((float *)this + 17);
  if (v29 == 0.0)
    v30 = 0;
  else
    v30 = LODWORD(v29);
  if ((v1 & 1) != 0)
  {
LABEL_56:
    v31 = *((_QWORD *)this + 1);
    if ((v1 & 2) != 0)
      goto LABEL_57;
    goto LABEL_103;
  }
LABEL_102:
  v31 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_57:
    v32 = *((_QWORD *)this + 2);
    if ((v1 & 0x10000) != 0)
      goto LABEL_58;
LABEL_104:
    v34 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_62;
    goto LABEL_105;
  }
LABEL_103:
  v32 = 0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_104;
LABEL_58:
  v33 = *((float *)this + 24);
  if (v33 == 0.0)
    v34 = 0;
  else
    v34 = LODWORD(v33);
  if ((v1 & 0x20) != 0)
  {
LABEL_62:
    v35 = *((_QWORD *)this + 6);
    if ((v1 & 0x2000000) != 0)
      goto LABEL_63;
LABEL_106:
    v37 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_67;
LABEL_107:
    v39 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_71;
LABEL_108:
    v41 = 0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_75;
    goto LABEL_109;
  }
LABEL_105:
  v35 = 0;
  if ((v1 & 0x2000000) == 0)
    goto LABEL_106;
LABEL_63:
  v36 = *((float *)this + 33);
  if (v36 == 0.0)
    v37 = 0;
  else
    v37 = LODWORD(v36);
  if ((v1 & 0x20000) == 0)
    goto LABEL_107;
LABEL_67:
  v38 = *((float *)this + 25);
  if (v38 == 0.0)
    v39 = 0;
  else
    v39 = LODWORD(v38);
  if ((v1 & 0x100) == 0)
    goto LABEL_108;
LABEL_71:
  v40 = *((float *)this + 16);
  if (v40 == 0.0)
    v41 = 0;
  else
    v41 = LODWORD(v40);
  if ((v1 & 0x80000) != 0)
  {
LABEL_75:
    v42 = *((unsigned int *)this + 27);
    if ((v1 & 0x40) != 0)
      goto LABEL_76;
LABEL_110:
    v44 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_79;
    goto LABEL_111;
  }
LABEL_109:
  v42 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_110;
LABEL_76:
  v43 = *((float *)this + 14);
  v44 = LODWORD(v43);
  if (v43 == 0.0)
    v44 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_79:
    v45 = *((_QWORD *)this + 4);
    if ((v1 & 0x80) != 0)
      goto LABEL_80;
LABEL_112:
    v47 = 0;
    return v50 ^ v51 ^ v49 ^ v5 ^ v7 ^ v8 ^ v9 ^ v10 ^ v12 ^ v13 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v31 ^ v32 ^ v34 ^ v35 ^ v37 ^ v39 ^ v41 ^ v42 ^ v44 ^ v45 ^ v47;
  }
LABEL_111:
  v45 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_112;
LABEL_80:
  v46 = *((float *)this + 15);
  v47 = LODWORD(v46);
  if (v46 == 0.0)
    v47 = 0;
  return v50 ^ v51 ^ v49 ^ v5 ^ v7 ^ v8 ^ v9 ^ v10 ^ v12 ^ v13 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v31 ^ v32 ^ v34 ^ v35 ^ v37 ^ v39 ^ v41 ^ v42 ^ v44 ^ v45 ^ v47;
}

void CMMsl::KappaCrashResult::~KappaCrashResult(CMMsl::KappaCrashResult *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::KappaCrashResult::KappaCrashResult(CMMsl::KappaCrashResult *this, const CMMsl::KappaCrashResult *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  __int16 v7;
  uint64_t v8;
  float result;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  int v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  int v22;
  char v23;

  *(_QWORD *)this = off_100351F68;
  v2 = (uint64_t *)((char *)this + 280);
  *((_QWORD *)this + 35) = 0;
  *((_DWORD *)this + 72) = 0;
  v3 = (uint64_t *)((char *)a2 + 280);
  v4 = *((_QWORD *)a2 + 35);
  if ((v4 & 1) != 0)
  {
    v6 = 0;
    v8 = *((_QWORD *)a2 + 1);
    *((_WORD *)this + 144) = 0;
    v5 = 1;
    *v2 = 1;
    *((_QWORD *)this + 1) = v8;
    v4 = *v3;
    v7 = *((_WORD *)a2 + 144);
    if ((*v3 & 0x2000000000000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 0;
  v6 = 0;
  v7 = *((_WORD *)a2 + 144);
  if ((v4 & 0x2000000000000) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 52);
    v5 |= 0x2000000000000uLL;
    *v2 = v5;
    *((_WORD *)this + 144) = 0;
    *((float *)this + 52) = result;
    v4 = *v3;
    v7 = *((_WORD *)a2 + 144);
  }
LABEL_6:
  if ((v7 & 0x100) != 0)
  {
    v10 = *((_BYTE *)a2 + 276);
    v6 = 256;
    *v2 = v5;
    *((_WORD *)this + 144) = 256;
    *((_BYTE *)this + 276) = v10;
    v4 = *v3;
    v7 = *((_WORD *)a2 + 144);
    if ((v7 & 0x80) == 0)
    {
LABEL_8:
      if ((v7 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_83;
    }
  }
  else if ((v7 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  v11 = *((_BYTE *)a2 + 275);
  v6 |= 0x80u;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((_BYTE *)this + 275) = v11;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((v7 & 0x20) == 0)
  {
LABEL_9:
    if ((v7 & 4) == 0)
      goto LABEL_10;
    goto LABEL_84;
  }
LABEL_83:
  v12 = *((_BYTE *)a2 + 273);
  v6 |= 0x20u;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((_BYTE *)this + 273) = v12;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((v7 & 4) == 0)
  {
LABEL_10:
    if ((v7 & 2) == 0)
      goto LABEL_11;
    goto LABEL_85;
  }
LABEL_84:
  v13 = *((_BYTE *)a2 + 270);
  v6 |= 4u;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((_BYTE *)this + 270) = v13;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((v7 & 2) == 0)
  {
LABEL_11:
    if ((v4 & 0x40000) == 0)
      goto LABEL_12;
    goto LABEL_86;
  }
LABEL_85:
  v14 = *((_BYTE *)a2 + 269);
  v6 |= 2u;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((_BYTE *)this + 269) = v14;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x40000) == 0)
  {
LABEL_12:
    if ((v7 & 1) == 0)
      goto LABEL_13;
    goto LABEL_87;
  }
LABEL_86:
  v15 = *((_DWORD *)a2 + 21);
  v5 |= 0x40000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((_DWORD *)this + 21) = v15;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((v7 & 1) == 0)
  {
LABEL_13:
    if ((v7 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_88;
  }
LABEL_87:
  v16 = *((_BYTE *)a2 + 268);
  v6 |= 1u;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((_BYTE *)this + 268) = v16;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((v7 & 0x10) == 0)
  {
LABEL_14:
    if ((v4 & 0x20000) == 0)
      goto LABEL_15;
    goto LABEL_89;
  }
LABEL_88:
  v17 = *((_BYTE *)a2 + 272);
  v6 |= 0x10u;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((_BYTE *)this + 272) = v17;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x20000) == 0)
  {
LABEL_15:
    if ((v4 & 0x10000) == 0)
      goto LABEL_16;
    goto LABEL_90;
  }
LABEL_89:
  result = *((float *)a2 + 20);
  v5 |= 0x20000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 20) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x10000) == 0)
  {
LABEL_16:
    if ((v4 & 0x400000) == 0)
      goto LABEL_17;
    goto LABEL_91;
  }
LABEL_90:
  result = *((float *)a2 + 19);
  v5 |= 0x10000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 19) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x400000) == 0)
  {
LABEL_17:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_18;
    goto LABEL_92;
  }
LABEL_91:
  result = *((float *)a2 + 25);
  v5 |= 0x400000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 25) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x8000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_19;
    goto LABEL_93;
  }
LABEL_92:
  result = *((float *)a2 + 30);
  v5 |= 0x8000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 30) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x100000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x4000000000000) == 0)
      goto LABEL_20;
    goto LABEL_94;
  }
LABEL_93:
  result = *((float *)a2 + 35);
  v5 |= (unint64_t)&_mh_execute_header;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 35) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x4000000000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x800000) == 0)
      goto LABEL_21;
    goto LABEL_95;
  }
LABEL_94:
  result = *((float *)a2 + 53);
  v5 |= 0x4000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 53) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x800000) == 0)
  {
LABEL_21:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_22;
    goto LABEL_96;
  }
LABEL_95:
  result = *((float *)a2 + 26);
  v5 |= 0x800000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 26) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x10000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_23;
    goto LABEL_97;
  }
LABEL_96:
  result = *((float *)a2 + 31);
  v5 |= 0x10000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 31) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x200000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x8000000000000) == 0)
      goto LABEL_24;
    goto LABEL_98;
  }
LABEL_97:
  result = *((float *)a2 + 36);
  v5 |= 0x200000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 36) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x8000000000000) == 0)
  {
LABEL_24:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_25;
    goto LABEL_99;
  }
LABEL_98:
  result = *((float *)a2 + 54);
  v5 |= 0x8000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 54) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_26;
    goto LABEL_100;
  }
LABEL_99:
  result = *((float *)a2 + 27);
  v5 |= 0x1000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 27) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x20000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_27;
    goto LABEL_101;
  }
LABEL_100:
  result = *((float *)a2 + 32);
  v5 |= 0x20000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 32) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x400000000) == 0)
  {
LABEL_27:
    if ((v4 & 0x10000000000000) == 0)
      goto LABEL_28;
    goto LABEL_102;
  }
LABEL_101:
  result = *((float *)a2 + 37);
  v5 |= 0x400000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 37) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x10000000000000) == 0)
  {
LABEL_28:
    if ((v4 & 0x80000) == 0)
      goto LABEL_29;
    goto LABEL_103;
  }
LABEL_102:
  result = *((float *)a2 + 55);
  v5 |= 0x10000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 55) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x80000) == 0)
  {
LABEL_29:
    if ((v4 & 0x100000) == 0)
      goto LABEL_30;
    goto LABEL_104;
  }
LABEL_103:
  result = *((float *)a2 + 22);
  v5 |= 0x80000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 22) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x100000) == 0)
  {
LABEL_30:
    if ((v4 & 0x200000) == 0)
      goto LABEL_31;
    goto LABEL_105;
  }
LABEL_104:
  result = *((float *)a2 + 23);
  v5 |= 0x100000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 23) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x200000) == 0)
  {
LABEL_31:
    if ((v4 & 0x100000000000000) == 0)
      goto LABEL_32;
    goto LABEL_106;
  }
LABEL_105:
  result = *((float *)a2 + 24);
  v5 |= 0x200000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 24) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x100000000000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x80000000000000) == 0)
      goto LABEL_33;
    goto LABEL_107;
  }
LABEL_106:
  result = *((float *)a2 + 59);
  v5 |= 0x100000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 59) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x80000000000000) == 0)
  {
LABEL_33:
    if ((v4 & 0x200000000000000) == 0)
      goto LABEL_34;
    goto LABEL_108;
  }
LABEL_107:
  result = *((float *)a2 + 58);
  v5 |= 0x80000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 58) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x200000000000000) == 0)
  {
LABEL_34:
    if ((v4 & 0x40) == 0)
      goto LABEL_35;
    goto LABEL_109;
  }
LABEL_108:
  result = *((float *)a2 + 60);
  v5 |= 0x200000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 60) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x40) == 0)
  {
LABEL_35:
    if ((v4 & 2) == 0)
      goto LABEL_36;
    goto LABEL_110;
  }
LABEL_109:
  result = *((float *)a2 + 9);
  v5 |= 0x40uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 9) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 2) == 0)
  {
LABEL_36:
    if ((v4 & 0x8000) == 0)
      goto LABEL_37;
    goto LABEL_111;
  }
LABEL_110:
  result = *((float *)a2 + 4);
  v5 |= 2uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 4) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x8000) == 0)
  {
LABEL_37:
    if ((v7 & 0x800) == 0)
      goto LABEL_38;
    goto LABEL_112;
  }
LABEL_111:
  result = *((float *)a2 + 18);
  v5 |= 0x8000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 18) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((v7 & 0x800) == 0)
  {
LABEL_38:
    if ((v7 & 8) == 0)
      goto LABEL_39;
    goto LABEL_113;
  }
LABEL_112:
  v18 = *((_BYTE *)a2 + 279);
  v6 |= 0x800u;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((_BYTE *)this + 279) = v18;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((v7 & 8) == 0)
  {
LABEL_39:
    if ((v4 & 0x80) == 0)
      goto LABEL_40;
    goto LABEL_114;
  }
LABEL_113:
  v19 = *((_BYTE *)a2 + 271);
  v6 |= 8u;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((_BYTE *)this + 271) = v19;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x80) == 0)
  {
LABEL_40:
    if ((v4 & 0x400) == 0)
      goto LABEL_41;
    goto LABEL_115;
  }
LABEL_114:
  result = *((float *)a2 + 10);
  v5 |= 0x80uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 10) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x400) == 0)
  {
LABEL_41:
    if ((v4 & 0x200) == 0)
      goto LABEL_42;
    goto LABEL_116;
  }
LABEL_115:
  result = *((float *)a2 + 13);
  v5 |= 0x400uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 13) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x200) == 0)
  {
LABEL_42:
    if ((v4 & 0x100) == 0)
      goto LABEL_43;
    goto LABEL_117;
  }
LABEL_116:
  result = *((float *)a2 + 12);
  v5 |= 0x200uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 12) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x100) == 0)
  {
LABEL_43:
    if ((v4 & 4) == 0)
      goto LABEL_44;
    goto LABEL_118;
  }
LABEL_117:
  result = *((float *)a2 + 11);
  v5 |= 0x100uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 11) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 4) == 0)
  {
LABEL_44:
    if ((v4 & 0x20) == 0)
      goto LABEL_45;
    goto LABEL_119;
  }
LABEL_118:
  result = *((float *)a2 + 5);
  v5 |= 4uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 5) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x20) == 0)
  {
LABEL_45:
    if ((v4 & 0x10) == 0)
      goto LABEL_46;
    goto LABEL_120;
  }
LABEL_119:
  result = *((float *)a2 + 8);
  v5 |= 0x20uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 8) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x10) == 0)
  {
LABEL_46:
    if ((v4 & 8) == 0)
      goto LABEL_47;
    goto LABEL_121;
  }
LABEL_120:
  result = *((float *)a2 + 7);
  v5 |= 0x10uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 7) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 8) == 0)
  {
LABEL_47:
    if ((v4 & 0x800) == 0)
      goto LABEL_48;
    goto LABEL_122;
  }
LABEL_121:
  result = *((float *)a2 + 6);
  v5 |= 8uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 6) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x800) == 0)
  {
LABEL_48:
    if ((v4 & 0x4000) == 0)
      goto LABEL_49;
    goto LABEL_123;
  }
LABEL_122:
  result = *((float *)a2 + 14);
  v5 |= 0x800uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 14) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x4000) == 0)
  {
LABEL_49:
    if ((v4 & 0x2000) == 0)
      goto LABEL_50;
    goto LABEL_124;
  }
LABEL_123:
  result = *((float *)a2 + 17);
  v5 |= 0x4000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 17) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x2000) == 0)
  {
LABEL_50:
    if ((v4 & 0x1000) == 0)
      goto LABEL_51;
    goto LABEL_125;
  }
LABEL_124:
  result = *((float *)a2 + 16);
  v5 |= 0x2000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 16) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x1000) == 0)
  {
LABEL_51:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_52;
    goto LABEL_126;
  }
LABEL_125:
  result = *((float *)a2 + 15);
  v5 |= 0x1000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 15) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x2000000) == 0)
  {
LABEL_52:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_53;
    goto LABEL_127;
  }
LABEL_126:
  result = *((float *)a2 + 28);
  v5 |= 0x2000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 28) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x40000000) == 0)
  {
LABEL_53:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_54;
    goto LABEL_128;
  }
LABEL_127:
  result = *((float *)a2 + 33);
  v5 |= 0x40000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 33) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x800000000) == 0)
  {
LABEL_54:
    if ((v4 & 0x20000000000000) == 0)
      goto LABEL_55;
    goto LABEL_129;
  }
LABEL_128:
  result = *((float *)a2 + 38);
  v5 |= 0x800000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 38) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x20000000000000) == 0)
  {
LABEL_55:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_56;
    goto LABEL_130;
  }
LABEL_129:
  result = *((float *)a2 + 56);
  v5 |= 0x20000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 56) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x4000000) == 0)
  {
LABEL_56:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_57;
    goto LABEL_131;
  }
LABEL_130:
  result = *((float *)a2 + 29);
  v5 |= 0x4000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 29) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x80000000) == 0)
  {
LABEL_57:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_58;
    goto LABEL_132;
  }
LABEL_131:
  result = *((float *)a2 + 34);
  v5 |= 0x80000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 34) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x1000000000) == 0)
  {
LABEL_58:
    if ((v4 & 0x40000000000000) == 0)
      goto LABEL_59;
    goto LABEL_133;
  }
LABEL_132:
  result = *((float *)a2 + 39);
  v5 |= 0x1000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 39) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x40000000000000) == 0)
  {
LABEL_59:
    if ((v7 & 0x40) == 0)
      goto LABEL_60;
    goto LABEL_134;
  }
LABEL_133:
  result = *((float *)a2 + 57);
  v5 |= 0x40000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 57) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((v7 & 0x40) == 0)
  {
LABEL_60:
    if ((v4 & 0x1000000000000000) == 0)
      goto LABEL_61;
    goto LABEL_135;
  }
LABEL_134:
  v20 = *((_BYTE *)a2 + 274);
  v6 |= 0x40u;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((_BYTE *)this + 274) = v20;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x1000000000000000) == 0)
  {
LABEL_61:
    if ((v4 & 0x400000000000000) == 0)
      goto LABEL_62;
    goto LABEL_136;
  }
LABEL_135:
  result = *((float *)a2 + 63);
  v5 |= 0x1000000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 63) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x400000000000000) == 0)
  {
LABEL_62:
    if ((v7 & 0x200) == 0)
      goto LABEL_63;
    goto LABEL_137;
  }
LABEL_136:
  result = *((float *)a2 + 61);
  v5 |= 0x400000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 61) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((v7 & 0x200) == 0)
  {
LABEL_63:
    if ((v4 & 0x2000000000) == 0)
      goto LABEL_64;
    goto LABEL_138;
  }
LABEL_137:
  v21 = *((_BYTE *)a2 + 277);
  v6 |= 0x200u;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((_BYTE *)this + 277) = v21;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x2000000000) == 0)
  {
LABEL_64:
    if ((v4 & 0x4000000000) == 0)
      goto LABEL_65;
    goto LABEL_139;
  }
LABEL_138:
  result = *((float *)a2 + 40);
  v5 |= 0x2000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 40) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x4000000000) == 0)
  {
LABEL_65:
    if ((v4 & 0x8000000000) == 0)
      goto LABEL_66;
    goto LABEL_140;
  }
LABEL_139:
  result = *((float *)a2 + 41);
  v5 |= 0x4000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 41) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x8000000000) == 0)
  {
LABEL_66:
    if ((v4 & 0x20000000000) == 0)
      goto LABEL_67;
    goto LABEL_141;
  }
LABEL_140:
  result = *((float *)a2 + 42);
  v5 |= 0x8000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 42) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x20000000000) == 0)
  {
LABEL_67:
    if ((v4 & 0x10000000000) == 0)
      goto LABEL_68;
    goto LABEL_142;
  }
LABEL_141:
  result = *((float *)a2 + 44);
  v5 |= 0x20000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 44) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x10000000000) == 0)
  {
LABEL_68:
    if ((v4 & 0x40000000000) == 0)
      goto LABEL_69;
    goto LABEL_143;
  }
LABEL_142:
  result = *((float *)a2 + 43);
  v5 |= 0x10000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 43) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x40000000000) == 0)
  {
LABEL_69:
    if ((v4 & 0x80000000000) == 0)
      goto LABEL_70;
    goto LABEL_144;
  }
LABEL_143:
  result = *((float *)a2 + 45);
  v5 |= 0x40000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 45) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x80000000000) == 0)
  {
LABEL_70:
    if ((v4 & 0x100000000000) == 0)
      goto LABEL_71;
    goto LABEL_145;
  }
LABEL_144:
  result = *((float *)a2 + 46);
  v5 |= 0x80000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 46) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x100000000000) == 0)
  {
LABEL_71:
    if ((v4 & 0x200000000000) == 0)
      goto LABEL_72;
    goto LABEL_146;
  }
LABEL_145:
  result = *((float *)a2 + 47);
  v5 |= 0x100000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 47) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x200000000000) == 0)
  {
LABEL_72:
    if ((v4 & 0x800000000000) == 0)
      goto LABEL_73;
    goto LABEL_147;
  }
LABEL_146:
  result = *((float *)a2 + 48);
  v5 |= 0x200000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 48) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x800000000000) == 0)
  {
LABEL_73:
    if ((v4 & 0x400000000000) == 0)
      goto LABEL_74;
    goto LABEL_148;
  }
LABEL_147:
  result = *((float *)a2 + 50);
  v5 |= 0x800000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 50) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x400000000000) == 0)
  {
LABEL_74:
    if ((v4 & 0x1000000000000) == 0)
      goto LABEL_75;
    goto LABEL_149;
  }
LABEL_148:
  result = *((float *)a2 + 49);
  v5 |= 0x400000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 49) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x1000000000000) == 0)
  {
LABEL_75:
    if ((v4 & 0x800000000000000) == 0)
      goto LABEL_76;
    goto LABEL_150;
  }
LABEL_149:
  result = *((float *)a2 + 51);
  v5 |= 0x1000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 51) = result;
  v4 = *v3;
  v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x800000000000000) == 0)
  {
LABEL_76:
    if ((v7 & 0x400) == 0)
      goto LABEL_77;
    goto LABEL_151;
  }
LABEL_150:
  v22 = *((_DWORD *)a2 + 62);
  v5 |= 0x800000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((_DWORD *)this + 62) = v22;
  v4 = *v3;
  if ((*((_WORD *)a2 + 144) & 0x400) == 0)
  {
LABEL_77:
    if ((v4 & 0x4000000000000000) == 0)
      goto LABEL_78;
    goto LABEL_152;
  }
LABEL_151:
  v23 = *((_BYTE *)a2 + 278);
  v6 |= 0x400u;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((_BYTE *)this + 278) = v23;
  v4 = *v3;
  if ((*v3 & 0x4000000000000000) == 0)
  {
LABEL_78:
    if ((v4 & 0x8000000000000000) == 0)
      goto LABEL_79;
    goto LABEL_153;
  }
LABEL_152:
  result = *((float *)a2 + 65);
  v5 |= 0x4000000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 65) = result;
  v4 = *v3;
  if ((*v3 & 0x8000000000000000) == 0)
  {
LABEL_79:
    if ((v4 & 0x2000000000000000) == 0)
      return result;
LABEL_154:
    result = *((float *)a2 + 64);
    *v2 = v5 | 0x2000000000000000;
    *((_WORD *)this + 144) = v6;
    *((float *)this + 64) = result;
    return result;
  }
LABEL_153:
  result = *((float *)a2 + 66);
  v5 |= 0x8000000000000000;
  *v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 66) = result;
  if ((*v3 & 0x2000000000000000) != 0)
    goto LABEL_154;
  return result;
}

CMMsl *CMMsl::KappaCrashResult::operator=(CMMsl *a1, const CMMsl::KappaCrashResult *a2)
{
  CMMsl::KappaCrashResult *v3;
  _BYTE v5[296];

  if (a1 != a2)
  {
    CMMsl::KappaCrashResult::KappaCrashResult((CMMsl::KappaCrashResult *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaCrashResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaCrashResult *a2, CMMsl::KappaCrashResult *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  float result;

  v3 = *((_DWORD *)this + 72);
  v4 = *((_QWORD *)this + 35);
  v5 = *((_DWORD *)a2 + 72);
  *((_QWORD *)this + 35) = *((_QWORD *)a2 + 35);
  *((_DWORD *)this + 72) = v5;
  *((_QWORD *)a2 + 35) = v4;
  *((_DWORD *)a2 + 72) = v3;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  v7 = *((_DWORD *)this + 52);
  *((_DWORD *)this + 52) = *((_DWORD *)a2 + 52);
  *((_DWORD *)a2 + 52) = v7;
  LOBYTE(v6) = *((_BYTE *)this + 276);
  *((_BYTE *)this + 276) = *((_BYTE *)a2 + 276);
  *((_BYTE *)a2 + 276) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 275);
  *((_BYTE *)this + 275) = *((_BYTE *)a2 + 275);
  *((_BYTE *)a2 + 275) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 273);
  *((_BYTE *)this + 273) = *((_BYTE *)a2 + 273);
  *((_BYTE *)a2 + 273) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 270);
  *((_BYTE *)this + 270) = *((_BYTE *)a2 + 270);
  *((_BYTE *)a2 + 270) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 269);
  *((_BYTE *)this + 269) = *((_BYTE *)a2 + 269);
  *((_BYTE *)a2 + 269) = v6;
  LODWORD(v6) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 268);
  *((_BYTE *)this + 268) = *((_BYTE *)a2 + 268);
  *((_BYTE *)a2 + 268) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 272);
  *((_BYTE *)this + 272) = *((_BYTE *)a2 + 272);
  *((_BYTE *)a2 + 272) = v6;
  v8 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v8;
  v9 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v9;
  v10 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v10;
  v11 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v11;
  v12 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v12;
  v13 = *((_DWORD *)this + 53);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 53);
  *((_DWORD *)a2 + 53) = v13;
  v14 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v14;
  v15 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v15;
  v16 = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v16;
  v17 = *((_DWORD *)this + 54);
  *((_DWORD *)this + 54) = *((_DWORD *)a2 + 54);
  *((_DWORD *)a2 + 54) = v17;
  v18 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v18;
  v19 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v19;
  v20 = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v20;
  v21 = *((_DWORD *)this + 55);
  *((_DWORD *)this + 55) = *((_DWORD *)a2 + 55);
  *((_DWORD *)a2 + 55) = v21;
  v22 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v22;
  v23 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v23;
  v24 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v24;
  v25 = *((_DWORD *)this + 59);
  *((_DWORD *)this + 59) = *((_DWORD *)a2 + 59);
  *((_DWORD *)a2 + 59) = v25;
  v26 = *((_DWORD *)this + 58);
  *((_DWORD *)this + 58) = *((_DWORD *)a2 + 58);
  *((_DWORD *)a2 + 58) = v26;
  v27 = *((_DWORD *)this + 60);
  *((_DWORD *)this + 60) = *((_DWORD *)a2 + 60);
  *((_DWORD *)a2 + 60) = v27;
  v28 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v28;
  v29 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v29;
  v30 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v30;
  LOBYTE(v6) = *((_BYTE *)this + 279);
  *((_BYTE *)this + 279) = *((_BYTE *)a2 + 279);
  *((_BYTE *)a2 + 279) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 271);
  *((_BYTE *)this + 271) = *((_BYTE *)a2 + 271);
  *((_BYTE *)a2 + 271) = v6;
  v31 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v31;
  v32 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v32;
  v33 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v33;
  v34 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v34;
  v35 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v35;
  v36 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v36;
  v37 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v37;
  v38 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v38;
  v39 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v39;
  v40 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v40;
  v41 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v41;
  v42 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v42;
  v43 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v43;
  v44 = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v44;
  v45 = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v45;
  v46 = *((_DWORD *)this + 56);
  *((_DWORD *)this + 56) = *((_DWORD *)a2 + 56);
  *((_DWORD *)a2 + 56) = v46;
  v47 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v47;
  v48 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v48;
  v49 = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v49;
  v50 = *((_DWORD *)this + 57);
  *((_DWORD *)this + 57) = *((_DWORD *)a2 + 57);
  *((_DWORD *)a2 + 57) = v50;
  LOBYTE(v6) = *((_BYTE *)this + 274);
  *((_BYTE *)this + 274) = *((_BYTE *)a2 + 274);
  *((_BYTE *)a2 + 274) = v6;
  v51 = *((_DWORD *)this + 63);
  *((_DWORD *)this + 63) = *((_DWORD *)a2 + 63);
  *((_DWORD *)a2 + 63) = v51;
  v52 = *((_DWORD *)this + 61);
  *((_DWORD *)this + 61) = *((_DWORD *)a2 + 61);
  *((_DWORD *)a2 + 61) = v52;
  LOBYTE(v6) = *((_BYTE *)this + 277);
  *((_BYTE *)this + 277) = *((_BYTE *)a2 + 277);
  *((_BYTE *)a2 + 277) = v6;
  v53 = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v53;
  v54 = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v54;
  v55 = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v55;
  v56 = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v56;
  v57 = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v57;
  v58 = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v58;
  v59 = *((_DWORD *)this + 46);
  *((_DWORD *)this + 46) = *((_DWORD *)a2 + 46);
  *((_DWORD *)a2 + 46) = v59;
  v60 = *((_DWORD *)this + 47);
  *((_DWORD *)this + 47) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = v60;
  v61 = *((_DWORD *)this + 48);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_DWORD *)a2 + 48) = v61;
  v62 = *((_DWORD *)this + 50);
  *((_DWORD *)this + 50) = *((_DWORD *)a2 + 50);
  *((_DWORD *)a2 + 50) = v62;
  v63 = *((_DWORD *)this + 49);
  *((_DWORD *)this + 49) = *((_DWORD *)a2 + 49);
  *((_DWORD *)a2 + 49) = v63;
  v64 = *((_DWORD *)this + 51);
  *((_DWORD *)this + 51) = *((_DWORD *)a2 + 51);
  *((_DWORD *)a2 + 51) = v64;
  LODWORD(v6) = *((_DWORD *)this + 62);
  *((_DWORD *)this + 62) = *((_DWORD *)a2 + 62);
  *((_DWORD *)a2 + 62) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 278);
  *((_BYTE *)this + 278) = *((_BYTE *)a2 + 278);
  *((_BYTE *)a2 + 278) = v6;
  v65 = *((_DWORD *)this + 65);
  *((_DWORD *)this + 65) = *((_DWORD *)a2 + 65);
  *((_DWORD *)a2 + 65) = v65;
  v66 = *((_DWORD *)this + 66);
  *((_DWORD *)this + 66) = *((_DWORD *)a2 + 66);
  *((_DWORD *)a2 + 66) = v66;
  result = *((float *)this + 64);
  *((_DWORD *)this + 64) = *((_DWORD *)a2 + 64);
  *((float *)a2 + 64) = result;
  return result;
}

float CMMsl::KappaCrashResult::KappaCrashResult(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float result;

  *(_QWORD *)a1 = off_100351F68;
  v2 = *(_QWORD *)(a2 + 280);
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 280) = v2;
  *(_DWORD *)(a2 + 288) = 0;
  *(_QWORD *)(a2 + 280) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 276) = *(_BYTE *)(a2 + 276);
  *(_BYTE *)(a1 + 275) = *(_BYTE *)(a2 + 275);
  *(_BYTE *)(a1 + 273) = *(_BYTE *)(a2 + 273);
  *(_BYTE *)(a1 + 270) = *(_BYTE *)(a2 + 270);
  *(_BYTE *)(a1 + 269) = *(_BYTE *)(a2 + 269);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_BYTE *)(a1 + 268) = *(_BYTE *)(a2 + 268);
  *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 236) = *(_DWORD *)(a2 + 236);
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 279) = *(_BYTE *)(a2 + 279);
  *(_BYTE *)(a1 + 271) = *(_BYTE *)(a2 + 271);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
  *(_BYTE *)(a1 + 274) = *(_BYTE *)(a2 + 274);
  *(_DWORD *)(a1 + 252) = *(_DWORD *)(a2 + 252);
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
  *(_BYTE *)(a1 + 277) = *(_BYTE *)(a2 + 277);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(_BYTE *)(a1 + 278) = *(_BYTE *)(a2 + 278);
  *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 260);
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
  result = *(float *)(a2 + 256);
  *(float *)(a1 + 256) = result;
  return result;
}

CMMsl *CMMsl::KappaCrashResult::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::KappaCrashResult *v3;
  _BYTE v5[296];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaCrashResult::KappaCrashResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaCrashResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaCrashResult::formatText(CMMsl::KappaCrashResult *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t v6;
  __int16 v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)((char *)this + 280);
  v6 = *((_QWORD *)this + 35);
  if ((v6 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "audioDvChaosThreshold", *((float *)this + 4));
    v6 = *v5;
    v7 = *((_WORD *)this + 144);
    if ((*v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = *((_WORD *)this + 144);
  if ((v6 & 4) != 0)
  {
LABEL_5:
    PB::TextFormatter::format(a2, "audioDvChaosThresholdCenter", *((float *)this + 5));
    v6 = *v5;
    v7 = *((_WORD *)this + 144);
  }
LABEL_6:
  if ((v6 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "audioDvChaosThresholdMax", *((float *)this + 6));
    v6 = *v5;
    v7 = *((_WORD *)this + 144);
    if ((*v5 & 0x10) == 0)
    {
LABEL_8:
      if ((v6 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_84;
    }
  }
  else if ((v6 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  PB::TextFormatter::format(a2, "audioDvChaosThresholdMin", *((float *)this + 7));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v6 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(a2, "audioDvChaosThresholdStretch", *((float *)this + 8));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v6 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(a2, "audioDvEnergyThreshold", *((float *)this + 9));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v6 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(a2, "audioDvEnergyThresholdCenter", *((float *)this + 10));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x100) == 0)
  {
LABEL_12:
    if ((v6 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(a2, "audioDvEnergyThresholdMax", *((float *)this + 11));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v6 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(a2, "audioDvEnergyThresholdMin", *((float *)this + 12));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v6 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(a2, "audioDvEnergyThresholdStretch", *((float *)this + 13));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x800) == 0)
  {
LABEL_15:
    if ((v6 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_91;
  }
LABEL_90:
  PB::TextFormatter::format(a2, "audioDvMaxRmsThresholdCenter", *((float *)this + 14));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v6 & 0x2000) == 0)
      goto LABEL_17;
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(a2, "audioDvMaxRmsThresholdMax", *((float *)this + 15));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x2000) == 0)
  {
LABEL_17:
    if ((v6 & 0x4000) == 0)
      goto LABEL_18;
    goto LABEL_93;
  }
LABEL_92:
  PB::TextFormatter::format(a2, "audioDvMaxRmsThresholdMin", *((float *)this + 16));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x4000) == 0)
  {
LABEL_18:
    if ((v6 & 0x8000) == 0)
      goto LABEL_19;
    goto LABEL_94;
  }
LABEL_93:
  PB::TextFormatter::format(a2, "audioDvMaxRmsThresholdStretch", *((float *)this + 17));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x8000) == 0)
  {
LABEL_19:
    if ((v7 & 1) == 0)
      goto LABEL_20;
    goto LABEL_95;
  }
LABEL_94:
  PB::TextFormatter::format(a2, "audioDvRmsThreshold", *((float *)this + 18));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((v7 & 1) == 0)
  {
LABEL_20:
    if ((v6 & 0x10000) == 0)
      goto LABEL_21;
    goto LABEL_96;
  }
LABEL_95:
  PB::TextFormatter::format(a2, "crashDetectorDecision", *((_BYTE *)this + 268));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x10000) == 0)
  {
LABEL_21:
    if ((v6 & 0x20000) == 0)
      goto LABEL_22;
    goto LABEL_97;
  }
LABEL_96:
  PB::TextFormatter::format(a2, "deltaVXYBiggestImpact", *((float *)this + 19));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x20000) == 0)
  {
LABEL_22:
    if ((v6 & 0x40000) == 0)
      goto LABEL_23;
    goto LABEL_98;
  }
LABEL_97:
  PB::TextFormatter::format(a2, "deltaVXYOverEpoch", *((float *)this + 20));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x40000) == 0)
  {
LABEL_23:
    if ((v6 & 0x80000) == 0)
      goto LABEL_24;
    goto LABEL_99;
  }
LABEL_98:
  PB::TextFormatter::format(a2, "detectorRegime", *((_DWORD *)this + 21));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x80000) == 0)
  {
LABEL_24:
    if ((v6 & 0x100000) == 0)
      goto LABEL_25;
    goto LABEL_100;
  }
LABEL_99:
  PB::TextFormatter::format(a2, "detectorRegimeAccelnormThreshold1", *((float *)this + 22));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x100000) == 0)
  {
LABEL_25:
    if ((v6 & 0x200000) == 0)
      goto LABEL_26;
    goto LABEL_101;
  }
LABEL_100:
  PB::TextFormatter::format(a2, "detectorRegimeAccelnormThreshold2", *((float *)this + 23));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x200000) == 0)
  {
LABEL_26:
    if ((v6 & 0x400000) == 0)
      goto LABEL_27;
    goto LABEL_102;
  }
LABEL_101:
  PB::TextFormatter::format(a2, "detectorRegimeAccelnormThreshold3", *((float *)this + 24));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x400000) == 0)
  {
LABEL_27:
    if ((v6 & 0x800000) == 0)
      goto LABEL_28;
    goto LABEL_103;
  }
LABEL_102:
  PB::TextFormatter::format(a2, "detectorRegimeDeltaVThreshold1", *((float *)this + 25));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x800000) == 0)
  {
LABEL_28:
    if ((v6 & 0x1000000) == 0)
      goto LABEL_29;
    goto LABEL_104;
  }
LABEL_103:
  PB::TextFormatter::format(a2, "detectorRegimeDeltaVThreshold1WithAudio", *((float *)this + 26));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x1000000) == 0)
  {
LABEL_29:
    if ((v6 & 0x2000000) == 0)
      goto LABEL_30;
    goto LABEL_105;
  }
LABEL_104:
  PB::TextFormatter::format(a2, "detectorRegimeDeltaVThreshold1WithoutAudio", *((float *)this + 27));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x2000000) == 0)
  {
LABEL_30:
    if ((v6 & 0x4000000) == 0)
      goto LABEL_31;
    goto LABEL_106;
  }
LABEL_105:
  PB::TextFormatter::format(a2, "detectorRegimeDeltaVThreshold1WithoutAudioStandaloneBaroNeeded", *((float *)this + 28));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x4000000) == 0)
  {
LABEL_31:
    if ((v6 & 0x8000000) == 0)
      goto LABEL_32;
    goto LABEL_107;
  }
LABEL_106:
  PB::TextFormatter::format(a2, "detectorRegimeDeltaVThreshold1WithoutAudioStandaloneFull", *((float *)this + 29));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x8000000) == 0)
  {
LABEL_32:
    if ((v6 & 0x10000000) == 0)
      goto LABEL_33;
    goto LABEL_108;
  }
LABEL_107:
  PB::TextFormatter::format(a2, "detectorRegimeDeltaVThreshold2", *((float *)this + 30));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x10000000) == 0)
  {
LABEL_33:
    if ((v6 & 0x20000000) == 0)
      goto LABEL_34;
    goto LABEL_109;
  }
LABEL_108:
  PB::TextFormatter::format(a2, "detectorRegimeDeltaVThreshold2WithAudio", *((float *)this + 31));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x20000000) == 0)
  {
LABEL_34:
    if ((v6 & 0x40000000) == 0)
      goto LABEL_35;
    goto LABEL_110;
  }
LABEL_109:
  PB::TextFormatter::format(a2, "detectorRegimeDeltaVThreshold2WithoutAudio", *((float *)this + 32));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x40000000) == 0)
  {
LABEL_35:
    if ((v6 & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_111;
  }
LABEL_110:
  PB::TextFormatter::format(a2, "detectorRegimeDeltaVThreshold2WithoutAudioStandaloneBaroNeeded", *((float *)this + 33));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x80000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x100000000) == 0)
      goto LABEL_37;
    goto LABEL_112;
  }
LABEL_111:
  PB::TextFormatter::format(a2, "detectorRegimeDeltaVThreshold2WithoutAudioStandaloneFull", *((float *)this + 34));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x100000000) == 0)
  {
LABEL_37:
    if ((v6 & 0x200000000) == 0)
      goto LABEL_38;
    goto LABEL_113;
  }
LABEL_112:
  PB::TextFormatter::format(a2, "detectorRegimeDeltaVThreshold3", *((float *)this + 35));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x200000000) == 0)
  {
LABEL_38:
    if ((v6 & 0x400000000) == 0)
      goto LABEL_39;
    goto LABEL_114;
  }
LABEL_113:
  PB::TextFormatter::format(a2, "detectorRegimeDeltaVThreshold3WithAudio", *((float *)this + 36));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x400000000) == 0)
  {
LABEL_39:
    if ((v6 & 0x800000000) == 0)
      goto LABEL_40;
    goto LABEL_115;
  }
LABEL_114:
  PB::TextFormatter::format(a2, "detectorRegimeDeltaVThreshold3WithoutAudio", *((float *)this + 37));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x800000000) == 0)
  {
LABEL_40:
    if ((v6 & 0x1000000000) == 0)
      goto LABEL_41;
    goto LABEL_116;
  }
LABEL_115:
  PB::TextFormatter::format(a2, "detectorRegimeDeltaVThreshold3WithoutAudioStandaloneBaroNeeded", *((float *)this + 38));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x1000000000) == 0)
  {
LABEL_41:
    if ((v7 & 2) == 0)
      goto LABEL_42;
    goto LABEL_117;
  }
LABEL_116:
  PB::TextFormatter::format(a2, "detectorRegimeDeltaVThreshold3WithoutAudioStandaloneFull", *((float *)this + 39));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((v7 & 2) == 0)
  {
LABEL_42:
    if ((v7 & 4) == 0)
      goto LABEL_43;
    goto LABEL_118;
  }
LABEL_117:
  PB::TextFormatter::format(a2, "hasAudioInEpoch", *((_BYTE *)this + 269));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((v7 & 4) == 0)
  {
LABEL_43:
    if ((v7 & 8) == 0)
      goto LABEL_44;
    goto LABEL_119;
  }
LABEL_118:
  PB::TextFormatter::format(a2, "isAudio", *((_BYTE *)this + 270));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((v7 & 8) == 0)
  {
LABEL_44:
    if ((v7 & 0x10) == 0)
      goto LABEL_45;
    goto LABEL_120;
  }
LABEL_119:
  PB::TextFormatter::format(a2, "isAudioDv", *((_BYTE *)this + 271));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((v7 & 0x10) == 0)
  {
LABEL_45:
    if ((v7 & 0x20) == 0)
      goto LABEL_46;
    goto LABEL_121;
  }
LABEL_120:
  PB::TextFormatter::format(a2, "isAudioSupported", *((_BYTE *)this + 272));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((v7 & 0x20) == 0)
  {
LABEL_46:
    if ((v7 & 0x40) == 0)
      goto LABEL_47;
    goto LABEL_122;
  }
LABEL_121:
  PB::TextFormatter::format(a2, "isBaro", *((_BYTE *)this + 273));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((v7 & 0x40) == 0)
  {
LABEL_47:
    if ((v7 & 0x80) == 0)
      goto LABEL_48;
    goto LABEL_123;
  }
LABEL_122:
  PB::TextFormatter::format(a2, "isCompanionConnected", *((_BYTE *)this + 274));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((v7 & 0x80) == 0)
  {
LABEL_48:
    if ((v7 & 0x100) == 0)
      goto LABEL_49;
    goto LABEL_124;
  }
LABEL_123:
  PB::TextFormatter::format(a2, "isFreeFall", *((_BYTE *)this + 275));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((v7 & 0x100) == 0)
  {
LABEL_49:
    if ((v7 & 0x200) == 0)
      goto LABEL_50;
    goto LABEL_125;
  }
LABEL_124:
  PB::TextFormatter::format(a2, "isPulse", *((_BYTE *)this + 276));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((v7 & 0x200) == 0)
  {
LABEL_50:
    if ((v6 & 0x2000000000) == 0)
      goto LABEL_51;
    goto LABEL_126;
  }
LABEL_125:
  PB::TextFormatter::format(a2, "lowSenseCrashDetectorDecision", *((_BYTE *)this + 277));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x2000000000) == 0)
  {
LABEL_51:
    if ((v6 & 0x4000000000) == 0)
      goto LABEL_52;
    goto LABEL_127;
  }
LABEL_126:
  PB::TextFormatter::format(a2, "lowSenseWithAudioDeltaVThreshold1", *((float *)this + 40));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x4000000000) == 0)
  {
LABEL_52:
    if ((v6 & 0x8000000000) == 0)
      goto LABEL_53;
    goto LABEL_128;
  }
LABEL_127:
  PB::TextFormatter::format(a2, "lowSenseWithAudioDeltaVThreshold2", *((float *)this + 41));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x8000000000) == 0)
  {
LABEL_53:
    if ((v6 & 0x10000000000) == 0)
      goto LABEL_54;
    goto LABEL_129;
  }
LABEL_128:
  PB::TextFormatter::format(a2, "lowSenseWithAudioDeltaVThreshold3", *((float *)this + 42));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x10000000000) == 0)
  {
LABEL_54:
    if ((v6 & 0x20000000000) == 0)
      goto LABEL_55;
    goto LABEL_130;
  }
LABEL_129:
  PB::TextFormatter::format(a2, "lowSenseWithAudioMaxPulseThreshold", *((float *)this + 43));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x20000000000) == 0)
  {
LABEL_55:
    if ((v6 & 0x40000000000) == 0)
      goto LABEL_56;
    goto LABEL_131;
  }
LABEL_130:
  PB::TextFormatter::format(a2, "lowSenseWithAudioMaxaccelnormThreshold", *((float *)this + 44));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x40000000000) == 0)
  {
LABEL_56:
    if ((v6 & 0x80000000000) == 0)
      goto LABEL_57;
    goto LABEL_132;
  }
LABEL_131:
  PB::TextFormatter::format(a2, "lowSenseWithAudioPeakPressureThreshold", *((float *)this + 45));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x80000000000) == 0)
  {
LABEL_57:
    if ((v6 & 0x100000000000) == 0)
      goto LABEL_58;
    goto LABEL_133;
  }
LABEL_132:
  PB::TextFormatter::format(a2, "lowSenseWithoutAudioDeltaVThreshold1", *((float *)this + 46));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x100000000000) == 0)
  {
LABEL_58:
    if ((v6 & 0x200000000000) == 0)
      goto LABEL_59;
    goto LABEL_134;
  }
LABEL_133:
  PB::TextFormatter::format(a2, "lowSenseWithoutAudioDeltaVThreshold2", *((float *)this + 47));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x200000000000) == 0)
  {
LABEL_59:
    if ((v6 & 0x400000000000) == 0)
      goto LABEL_60;
    goto LABEL_135;
  }
LABEL_134:
  PB::TextFormatter::format(a2, "lowSenseWithoutAudioDeltaVThreshold3", *((float *)this + 48));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x400000000000) == 0)
  {
LABEL_60:
    if ((v6 & 0x800000000000) == 0)
      goto LABEL_61;
    goto LABEL_136;
  }
LABEL_135:
  PB::TextFormatter::format(a2, "lowSenseWithoutAudioMaxPulseThreshold", *((float *)this + 49));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x800000000000) == 0)
  {
LABEL_61:
    if ((v6 & 0x1000000000000) == 0)
      goto LABEL_62;
    goto LABEL_137;
  }
LABEL_136:
  PB::TextFormatter::format(a2, "lowSenseWithoutAudioMaxaccelnormThreshold", *((float *)this + 50));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x1000000000000) == 0)
  {
LABEL_62:
    if ((v6 & 0x2000000000000) == 0)
      goto LABEL_63;
    goto LABEL_138;
  }
LABEL_137:
  PB::TextFormatter::format(a2, "lowSenseWithoutAudioPeakPressureThreshold", *((float *)this + 51));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x2000000000000) == 0)
  {
LABEL_63:
    if ((v6 & 0x4000000000000) == 0)
      goto LABEL_64;
    goto LABEL_139;
  }
LABEL_138:
  PB::TextFormatter::format(a2, "maxAccelNorm", *((float *)this + 52));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x4000000000000) == 0)
  {
LABEL_64:
    if ((v6 & 0x8000000000000) == 0)
      goto LABEL_65;
    goto LABEL_140;
  }
LABEL_139:
  PB::TextFormatter::format(a2, "maxAccelNormThreshold", *((float *)this + 53));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x8000000000000) == 0)
  {
LABEL_65:
    if ((v6 & 0x10000000000000) == 0)
      goto LABEL_66;
    goto LABEL_141;
  }
LABEL_140:
  PB::TextFormatter::format(a2, "maxAccelNormThresholdWithAudio", *((float *)this + 54));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x10000000000000) == 0)
  {
LABEL_66:
    if ((v6 & 0x20000000000000) == 0)
      goto LABEL_67;
    goto LABEL_142;
  }
LABEL_141:
  PB::TextFormatter::format(a2, "maxAccelNormThresholdWithoutAudio", *((float *)this + 55));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x20000000000000) == 0)
  {
LABEL_67:
    if ((v6 & 0x40000000000000) == 0)
      goto LABEL_68;
    goto LABEL_143;
  }
LABEL_142:
  PB::TextFormatter::format(a2, "maxAccelNormThresholdWithoutAudioStandaloneBaroNeeded", *((float *)this + 56));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x40000000000000) == 0)
  {
LABEL_68:
    if ((v6 & 0x80000000000000) == 0)
      goto LABEL_69;
    goto LABEL_144;
  }
LABEL_143:
  PB::TextFormatter::format(a2, "maxAccelNormThresholdWithoutAudioStandaloneFull", *((float *)this + 57));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x80000000000000) == 0)
  {
LABEL_69:
    if ((v6 & 0x100000000000000) == 0)
      goto LABEL_70;
    goto LABEL_145;
  }
LABEL_144:
  PB::TextFormatter::format(a2, "maxAudioChaos", *((float *)this + 58));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x100000000000000) == 0)
  {
LABEL_70:
    if ((v6 & 0x200000000000000) == 0)
      goto LABEL_71;
    goto LABEL_146;
  }
LABEL_145:
  PB::TextFormatter::format(a2, "maxAudioEnergy", *((float *)this + 59));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x200000000000000) == 0)
  {
LABEL_71:
    if ((v6 & 0x400000000000000) == 0)
      goto LABEL_72;
    goto LABEL_147;
  }
LABEL_146:
  PB::TextFormatter::format(a2, "maxAudioRms", *((float *)this + 60));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x400000000000000) == 0)
  {
LABEL_72:
    if ((v6 & 0x800000000000000) == 0)
      goto LABEL_73;
    goto LABEL_148;
  }
LABEL_147:
  PB::TextFormatter::format(a2, "maxPulse", *((float *)this + 61));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x800000000000000) == 0)
  {
LABEL_73:
    if ((v6 & 0x1000000000000000) == 0)
      goto LABEL_74;
    goto LABEL_149;
  }
LABEL_148:
  PB::TextFormatter::format(a2, "numShortAudio", *((_DWORD *)this + 62));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x1000000000000000) == 0)
  {
LABEL_74:
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_75;
    goto LABEL_150;
  }
LABEL_149:
  PB::TextFormatter::format(a2, "peakPressure", *((float *)this + 63));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x2000000000000000) == 0)
  {
LABEL_75:
    if ((v7 & 0x400) == 0)
      goto LABEL_76;
    goto LABEL_151;
  }
LABEL_150:
  PB::TextFormatter::format(a2, "shortAudioMaxPulseThreshold", *((float *)this + 64));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((v7 & 0x400) == 0)
  {
LABEL_76:
    if ((v6 & 0x4000000000000000) == 0)
      goto LABEL_77;
    goto LABEL_152;
  }
LABEL_151:
  PB::TextFormatter::format(a2, "shortAudioMet", *((_BYTE *)this + 278));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x4000000000000000) == 0)
  {
LABEL_77:
    if ((v6 & 0x8000000000000000) == 0)
      goto LABEL_78;
    goto LABEL_153;
  }
LABEL_152:
  PB::TextFormatter::format(a2, "shortAudioNumThreshold", *((float *)this + 65));
  v6 = *v5;
  v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x8000000000000000) == 0)
  {
LABEL_78:
    if ((v7 & 0x800) == 0)
      goto LABEL_79;
LABEL_154:
    PB::TextFormatter::format(a2, "strongerAudio", *((_BYTE *)this + 279));
    if ((*v5 & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_80;
  }
LABEL_153:
  PB::TextFormatter::format(a2, "shortAudioPeakPressureThreshold", *((float *)this + 66));
  v6 = *v5;
  if ((*((_WORD *)this + 144) & 0x800) != 0)
    goto LABEL_154;
LABEL_79:
  if ((v6 & 1) != 0)
LABEL_80:
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaCrashResult::readFrom(CMMsl::KappaCrashResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  char *v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  BOOL v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  BOOL v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  BOOL v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  BOOL v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  int v90;
  BOOL v91;
  unint64_t v92;
  unint64_t v93;
  int v94;
  BOOL v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  int v118;
  BOOL v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  int v124;
  BOOL v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  char v141;
  unsigned int v142;
  uint64_t v143;
  unint64_t v144;
  char v145;
  unint64_t v146;
  unint64_t v147;
  int v148;
  BOOL v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t result;
  char v156;
  unsigned int v157;
  unint64_t v158;
  char v159;
  char v160;
  unsigned int v161;
  unint64_t v162;
  char v163;
  char v164;
  unsigned int v165;
  unint64_t v166;
  char v167;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (char *)this + 280;
    do
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v16 = 0;
        v17 = 0;
        v12 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v18 = v2 + 1;
          v19 = *(_BYTE *)(v9 + v2);
          *((_QWORD *)a2 + 1) = v18;
          v12 |= (unint64_t)(v19 & 0x7F) << v16;
          if ((v19 & 0x80) == 0)
            goto LABEL_21;
          v16 += 7;
          v2 = v18;
          if (v17++ >= 9)
          {
LABEL_20:
            v12 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_20;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v21 = v12 >> 3;
      if ((int)(v12 >> 3) <= 100000)
      {
        switch((int)v21)
        {
          case 1:
            *(_QWORD *)v8 |= 1uLL;
            v22 = *((_QWORD *)a2 + 1);
            v23 = *((_QWORD *)a2 + 2);
            v24 = *(_QWORD *)a2;
            if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
            {
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v28 = v22 + 1;
                *((_QWORD *)a2 + 1) = v22 + 1;
                v29 = *(_BYTE *)(v24 + v22);
                v27 |= (unint64_t)(v29 & 0x7F) << v25;
                if ((v29 & 0x80) == 0)
                  goto LABEL_313;
                v25 += 7;
                v22 = v28;
                v15 = v26++ > 8;
              }
              while (!v15);
LABEL_263:
              v27 = 0;
              goto LABEL_313;
            }
            v156 = 0;
            v157 = 0;
            v27 = 0;
            if (v23 <= v22)
              v23 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v23 == v22)
              {
                v27 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v158 = v22 + 1;
                v159 = *(_BYTE *)(v24 + v22);
                *((_QWORD *)a2 + 1) = v158;
                v27 |= (unint64_t)(v159 & 0x7F) << v156;
                if (v159 < 0)
                {
                  v156 += 7;
                  v22 = v158;
                  v15 = v157++ > 8;
                  if (v15)
                    goto LABEL_263;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v27 = 0;
              }
              break;
            }
LABEL_313:
            *((_QWORD *)this + 1) = v27;
            goto LABEL_305;
          case 2:
            *(_QWORD *)v8 |= 0x2000000000000uLL;
            v31 = *((_QWORD *)a2 + 1);
            if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 52) = *(_DWORD *)(*(_QWORD *)a2 + v31);
            goto LABEL_304;
          case 3:
            *((_WORD *)v8 + 4) |= 0x100u;
            v32 = *((_QWORD *)a2 + 1);
            if (v32 >= *((_QWORD *)a2 + 2))
            {
              v35 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v33 = v32 + 1;
              v34 = *(unsigned __int8 *)(*(_QWORD *)a2 + v32);
              *((_QWORD *)a2 + 1) = v33;
              v35 = v34 != 0;
            }
            *((_BYTE *)this + 276) = v35;
            goto LABEL_305;
          case 4:
            *((_WORD *)v8 + 4) |= 0x80u;
            v36 = *((_QWORD *)a2 + 1);
            if (v36 >= *((_QWORD *)a2 + 2))
            {
              v39 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v37 = v36 + 1;
              v38 = *(unsigned __int8 *)(*(_QWORD *)a2 + v36);
              *((_QWORD *)a2 + 1) = v37;
              v39 = v38 != 0;
            }
            *((_BYTE *)this + 275) = v39;
            goto LABEL_305;
          case 5:
            *((_WORD *)v8 + 4) |= 0x20u;
            v40 = *((_QWORD *)a2 + 1);
            if (v40 >= *((_QWORD *)a2 + 2))
            {
              v43 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v41 = v40 + 1;
              v42 = *(unsigned __int8 *)(*(_QWORD *)a2 + v40);
              *((_QWORD *)a2 + 1) = v41;
              v43 = v42 != 0;
            }
            *((_BYTE *)this + 273) = v43;
            goto LABEL_305;
          case 6:
            *((_WORD *)v8 + 4) |= 4u;
            v44 = *((_QWORD *)a2 + 1);
            if (v44 >= *((_QWORD *)a2 + 2))
            {
              v47 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v45 = v44 + 1;
              v46 = *(unsigned __int8 *)(*(_QWORD *)a2 + v44);
              *((_QWORD *)a2 + 1) = v45;
              v47 = v46 != 0;
            }
            *((_BYTE *)this + 270) = v47;
            goto LABEL_305;
          case 7:
            *((_WORD *)v8 + 4) |= 2u;
            v48 = *((_QWORD *)a2 + 1);
            if (v48 >= *((_QWORD *)a2 + 2))
            {
              v51 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v49 = v48 + 1;
              v50 = *(unsigned __int8 *)(*(_QWORD *)a2 + v48);
              *((_QWORD *)a2 + 1) = v49;
              v51 = v50 != 0;
            }
            *((_BYTE *)this + 269) = v51;
            goto LABEL_305;
          case 8:
            *(_QWORD *)v8 |= 0x40000uLL;
            v52 = *((_QWORD *)a2 + 1);
            v53 = *((_QWORD *)a2 + 2);
            v54 = *(_QWORD *)a2;
            if (v52 <= 0xFFFFFFFFFFFFFFF5 && v52 + 10 <= v53)
            {
              v55 = 0;
              v56 = 0;
              v57 = 0;
              do
              {
                v58 = v52 + 1;
                *((_QWORD *)a2 + 1) = v52 + 1;
                v59 = *(_BYTE *)(v54 + v52);
                v57 |= (unint64_t)(v59 & 0x7F) << v55;
                if ((v59 & 0x80) == 0)
                  goto LABEL_317;
                v55 += 7;
                v52 = v58;
                v15 = v56++ > 8;
              }
              while (!v15);
LABEL_280:
              LODWORD(v57) = 0;
              goto LABEL_317;
            }
            v160 = 0;
            v161 = 0;
            v57 = 0;
            if (v53 <= v52)
              v53 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v53 == v52)
              {
                LODWORD(v57) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v162 = v52 + 1;
                v163 = *(_BYTE *)(v54 + v52);
                *((_QWORD *)a2 + 1) = v162;
                v57 |= (unint64_t)(v163 & 0x7F) << v160;
                if (v163 < 0)
                {
                  v160 += 7;
                  v52 = v162;
                  v15 = v161++ > 8;
                  if (v15)
                    goto LABEL_280;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v57) = 0;
              }
              break;
            }
LABEL_317:
            *((_DWORD *)this + 21) = v57;
            goto LABEL_305;
          case 9:
            *((_WORD *)v8 + 4) |= 1u;
            v60 = *((_QWORD *)a2 + 1);
            if (v60 >= *((_QWORD *)a2 + 2))
            {
              v63 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v61 = v60 + 1;
              v62 = *(unsigned __int8 *)(*(_QWORD *)a2 + v60);
              *((_QWORD *)a2 + 1) = v61;
              v63 = v62 != 0;
            }
            *((_BYTE *)this + 268) = v63;
            goto LABEL_305;
          case 10:
            *((_WORD *)v8 + 4) |= 0x10u;
            v64 = *((_QWORD *)a2 + 1);
            if (v64 >= *((_QWORD *)a2 + 2))
            {
              v67 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v65 = v64 + 1;
              v66 = *(unsigned __int8 *)(*(_QWORD *)a2 + v64);
              *((_QWORD *)a2 + 1) = v65;
              v67 = v66 != 0;
            }
            *((_BYTE *)this + 272) = v67;
            goto LABEL_305;
          case 11:
            *(_QWORD *)v8 |= 0x20000uLL;
            v68 = *((_QWORD *)a2 + 1);
            if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v68);
            goto LABEL_304;
          case 12:
            *(_QWORD *)v8 |= 0x10000uLL;
            v69 = *((_QWORD *)a2 + 1);
            if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v69);
            goto LABEL_304;
          case 13:
            *(_QWORD *)v8 |= 0x400000uLL;
            v70 = *((_QWORD *)a2 + 1);
            if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v70);
            goto LABEL_304;
          case 14:
            *(_QWORD *)v8 |= 0x8000000uLL;
            v71 = *((_QWORD *)a2 + 1);
            if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 30) = *(_DWORD *)(*(_QWORD *)a2 + v71);
            goto LABEL_304;
          case 15:
            *(_QWORD *)v8 |= (unint64_t)&_mh_execute_header;
            v72 = *((_QWORD *)a2 + 1);
            if (v72 > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 35) = *(_DWORD *)(*(_QWORD *)a2 + v72);
            goto LABEL_304;
          case 16:
            *(_QWORD *)v8 |= 0x4000000000000uLL;
            v73 = *((_QWORD *)a2 + 1);
            if (v73 > 0xFFFFFFFFFFFFFFFBLL || v73 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 53) = *(_DWORD *)(*(_QWORD *)a2 + v73);
            goto LABEL_304;
          case 17:
            *(_QWORD *)v8 |= 0x800000uLL;
            v74 = *((_QWORD *)a2 + 1);
            if (v74 > 0xFFFFFFFFFFFFFFFBLL || v74 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v74);
            goto LABEL_304;
          case 18:
            *(_QWORD *)v8 |= 0x10000000uLL;
            v75 = *((_QWORD *)a2 + 1);
            if (v75 > 0xFFFFFFFFFFFFFFFBLL || v75 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 31) = *(_DWORD *)(*(_QWORD *)a2 + v75);
            goto LABEL_304;
          case 19:
            *(_QWORD *)v8 |= 0x200000000uLL;
            v76 = *((_QWORD *)a2 + 1);
            if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 36) = *(_DWORD *)(*(_QWORD *)a2 + v76);
            goto LABEL_304;
          case 20:
            *(_QWORD *)v8 |= 0x8000000000000uLL;
            v77 = *((_QWORD *)a2 + 1);
            if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 54) = *(_DWORD *)(*(_QWORD *)a2 + v77);
            goto LABEL_304;
          case 21:
            *(_QWORD *)v8 |= 0x1000000uLL;
            v78 = *((_QWORD *)a2 + 1);
            if (v78 > 0xFFFFFFFFFFFFFFFBLL || v78 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v78);
            goto LABEL_304;
          case 22:
            *(_QWORD *)v8 |= 0x20000000uLL;
            v79 = *((_QWORD *)a2 + 1);
            if (v79 > 0xFFFFFFFFFFFFFFFBLL || v79 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 32) = *(_DWORD *)(*(_QWORD *)a2 + v79);
            goto LABEL_304;
          case 23:
            *(_QWORD *)v8 |= 0x400000000uLL;
            v80 = *((_QWORD *)a2 + 1);
            if (v80 > 0xFFFFFFFFFFFFFFFBLL || v80 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 37) = *(_DWORD *)(*(_QWORD *)a2 + v80);
            goto LABEL_304;
          case 24:
            *(_QWORD *)v8 |= 0x10000000000000uLL;
            v81 = *((_QWORD *)a2 + 1);
            if (v81 > 0xFFFFFFFFFFFFFFFBLL || v81 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 55) = *(_DWORD *)(*(_QWORD *)a2 + v81);
            goto LABEL_304;
          case 25:
            *(_QWORD *)v8 |= 0x100000000000000uLL;
            v82 = *((_QWORD *)a2 + 1);
            if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 59) = *(_DWORD *)(*(_QWORD *)a2 + v82);
            goto LABEL_304;
          case 26:
            *(_QWORD *)v8 |= 0x80000000000000uLL;
            v83 = *((_QWORD *)a2 + 1);
            if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 58) = *(_DWORD *)(*(_QWORD *)a2 + v83);
            goto LABEL_304;
          case 27:
            *(_QWORD *)v8 |= 0x200000000000000uLL;
            v84 = *((_QWORD *)a2 + 1);
            if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 60) = *(_DWORD *)(*(_QWORD *)a2 + v84);
            goto LABEL_304;
          case 28:
            *(_QWORD *)v8 |= 0x40uLL;
            v85 = *((_QWORD *)a2 + 1);
            if (v85 > 0xFFFFFFFFFFFFFFFBLL || v85 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v85);
            goto LABEL_304;
          case 29:
            *(_QWORD *)v8 |= 2uLL;
            v86 = *((_QWORD *)a2 + 1);
            if (v86 > 0xFFFFFFFFFFFFFFFBLL || v86 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v86);
            goto LABEL_304;
          case 30:
            *(_QWORD *)v8 |= 0x8000uLL;
            v87 = *((_QWORD *)a2 + 1);
            if (v87 > 0xFFFFFFFFFFFFFFFBLL || v87 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v87);
            goto LABEL_304;
          case 31:
            *((_WORD *)v8 + 4) |= 0x800u;
            v88 = *((_QWORD *)a2 + 1);
            if (v88 >= *((_QWORD *)a2 + 2))
            {
              v91 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v89 = v88 + 1;
              v90 = *(unsigned __int8 *)(*(_QWORD *)a2 + v88);
              *((_QWORD *)a2 + 1) = v89;
              v91 = v90 != 0;
            }
            *((_BYTE *)this + 279) = v91;
            goto LABEL_305;
          case 32:
            *((_WORD *)v8 + 4) |= 8u;
            v92 = *((_QWORD *)a2 + 1);
            if (v92 >= *((_QWORD *)a2 + 2))
            {
              v95 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v93 = v92 + 1;
              v94 = *(unsigned __int8 *)(*(_QWORD *)a2 + v92);
              *((_QWORD *)a2 + 1) = v93;
              v95 = v94 != 0;
            }
            *((_BYTE *)this + 271) = v95;
            goto LABEL_305;
          case 33:
            *(_QWORD *)v8 |= 0x80uLL;
            v96 = *((_QWORD *)a2 + 1);
            if (v96 > 0xFFFFFFFFFFFFFFFBLL || v96 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v96);
            goto LABEL_304;
          case 34:
            *(_QWORD *)v8 |= 0x400uLL;
            v97 = *((_QWORD *)a2 + 1);
            if (v97 > 0xFFFFFFFFFFFFFFFBLL || v97 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v97);
            goto LABEL_304;
          case 35:
            *(_QWORD *)v8 |= 0x200uLL;
            v98 = *((_QWORD *)a2 + 1);
            if (v98 > 0xFFFFFFFFFFFFFFFBLL || v98 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v98);
            goto LABEL_304;
          case 36:
            *(_QWORD *)v8 |= 0x100uLL;
            v99 = *((_QWORD *)a2 + 1);
            if (v99 > 0xFFFFFFFFFFFFFFFBLL || v99 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v99);
            goto LABEL_304;
          case 37:
            *(_QWORD *)v8 |= 4uLL;
            v100 = *((_QWORD *)a2 + 1);
            if (v100 > 0xFFFFFFFFFFFFFFFBLL || v100 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v100);
            goto LABEL_304;
          case 38:
            *(_QWORD *)v8 |= 0x20uLL;
            v101 = *((_QWORD *)a2 + 1);
            if (v101 > 0xFFFFFFFFFFFFFFFBLL || v101 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v101);
            goto LABEL_304;
          case 39:
            *(_QWORD *)v8 |= 0x10uLL;
            v102 = *((_QWORD *)a2 + 1);
            if (v102 > 0xFFFFFFFFFFFFFFFBLL || v102 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v102);
            goto LABEL_304;
          case 40:
            *(_QWORD *)v8 |= 8uLL;
            v103 = *((_QWORD *)a2 + 1);
            if (v103 > 0xFFFFFFFFFFFFFFFBLL || v103 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v103);
            goto LABEL_304;
          case 41:
            *(_QWORD *)v8 |= 0x800uLL;
            v104 = *((_QWORD *)a2 + 1);
            if (v104 > 0xFFFFFFFFFFFFFFFBLL || v104 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v104);
            goto LABEL_304;
          case 42:
            *(_QWORD *)v8 |= 0x4000uLL;
            v105 = *((_QWORD *)a2 + 1);
            if (v105 > 0xFFFFFFFFFFFFFFFBLL || v105 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v105);
            goto LABEL_304;
          case 43:
            *(_QWORD *)v8 |= 0x2000uLL;
            v106 = *((_QWORD *)a2 + 1);
            if (v106 > 0xFFFFFFFFFFFFFFFBLL || v106 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v106);
            goto LABEL_304;
          case 44:
            *(_QWORD *)v8 |= 0x1000uLL;
            v107 = *((_QWORD *)a2 + 1);
            if (v107 > 0xFFFFFFFFFFFFFFFBLL || v107 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v107);
            goto LABEL_304;
          case 45:
            *(_QWORD *)v8 |= 0x2000000uLL;
            v108 = *((_QWORD *)a2 + 1);
            if (v108 > 0xFFFFFFFFFFFFFFFBLL || v108 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 28) = *(_DWORD *)(*(_QWORD *)a2 + v108);
            goto LABEL_304;
          case 46:
            *(_QWORD *)v8 |= 0x40000000uLL;
            v109 = *((_QWORD *)a2 + 1);
            if (v109 > 0xFFFFFFFFFFFFFFFBLL || v109 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 33) = *(_DWORD *)(*(_QWORD *)a2 + v109);
            goto LABEL_304;
          case 47:
            *(_QWORD *)v8 |= 0x800000000uLL;
            v110 = *((_QWORD *)a2 + 1);
            if (v110 > 0xFFFFFFFFFFFFFFFBLL || v110 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 38) = *(_DWORD *)(*(_QWORD *)a2 + v110);
            goto LABEL_304;
          case 48:
            *(_QWORD *)v8 |= 0x20000000000000uLL;
            v111 = *((_QWORD *)a2 + 1);
            if (v111 > 0xFFFFFFFFFFFFFFFBLL || v111 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 56) = *(_DWORD *)(*(_QWORD *)a2 + v111);
            goto LABEL_304;
          case 49:
            *(_QWORD *)v8 |= 0x4000000uLL;
            v112 = *((_QWORD *)a2 + 1);
            if (v112 > 0xFFFFFFFFFFFFFFFBLL || v112 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v112);
            goto LABEL_304;
          case 50:
            *(_QWORD *)v8 |= 0x80000000uLL;
            v113 = *((_QWORD *)a2 + 1);
            if (v113 > 0xFFFFFFFFFFFFFFFBLL || v113 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 34) = *(_DWORD *)(*(_QWORD *)a2 + v113);
            goto LABEL_304;
          case 51:
            *(_QWORD *)v8 |= 0x1000000000uLL;
            v114 = *((_QWORD *)a2 + 1);
            if (v114 > 0xFFFFFFFFFFFFFFFBLL || v114 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 39) = *(_DWORD *)(*(_QWORD *)a2 + v114);
            goto LABEL_304;
          case 52:
            *(_QWORD *)v8 |= 0x40000000000000uLL;
            v115 = *((_QWORD *)a2 + 1);
            if (v115 > 0xFFFFFFFFFFFFFFFBLL || v115 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 57) = *(_DWORD *)(*(_QWORD *)a2 + v115);
            goto LABEL_304;
          case 53:
            *((_WORD *)v8 + 4) |= 0x40u;
            v116 = *((_QWORD *)a2 + 1);
            if (v116 >= *((_QWORD *)a2 + 2))
            {
              v119 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v117 = v116 + 1;
              v118 = *(unsigned __int8 *)(*(_QWORD *)a2 + v116);
              *((_QWORD *)a2 + 1) = v117;
              v119 = v118 != 0;
            }
            *((_BYTE *)this + 274) = v119;
            goto LABEL_305;
          case 54:
            *(_QWORD *)v8 |= 0x1000000000000000uLL;
            v120 = *((_QWORD *)a2 + 1);
            if (v120 > 0xFFFFFFFFFFFFFFFBLL || v120 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 63) = *(_DWORD *)(*(_QWORD *)a2 + v120);
            goto LABEL_304;
          case 55:
            *(_QWORD *)v8 |= 0x400000000000000uLL;
            v121 = *((_QWORD *)a2 + 1);
            if (v121 > 0xFFFFFFFFFFFFFFFBLL || v121 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 61) = *(_DWORD *)(*(_QWORD *)a2 + v121);
            goto LABEL_304;
          case 56:
            *((_WORD *)v8 + 4) |= 0x200u;
            v122 = *((_QWORD *)a2 + 1);
            if (v122 >= *((_QWORD *)a2 + 2))
            {
              v125 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v123 = v122 + 1;
              v124 = *(unsigned __int8 *)(*(_QWORD *)a2 + v122);
              *((_QWORD *)a2 + 1) = v123;
              v125 = v124 != 0;
            }
            *((_BYTE *)this + 277) = v125;
            goto LABEL_305;
          case 57:
            *(_QWORD *)v8 |= 0x2000000000uLL;
            v126 = *((_QWORD *)a2 + 1);
            if (v126 > 0xFFFFFFFFFFFFFFFBLL || v126 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 40) = *(_DWORD *)(*(_QWORD *)a2 + v126);
            goto LABEL_304;
          case 58:
            *(_QWORD *)v8 |= 0x4000000000uLL;
            v127 = *((_QWORD *)a2 + 1);
            if (v127 > 0xFFFFFFFFFFFFFFFBLL || v127 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 41) = *(_DWORD *)(*(_QWORD *)a2 + v127);
            goto LABEL_304;
          case 59:
            *(_QWORD *)v8 |= 0x8000000000uLL;
            v128 = *((_QWORD *)a2 + 1);
            if (v128 > 0xFFFFFFFFFFFFFFFBLL || v128 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 42) = *(_DWORD *)(*(_QWORD *)a2 + v128);
            goto LABEL_304;
          case 60:
            *(_QWORD *)v8 |= 0x20000000000uLL;
            v129 = *((_QWORD *)a2 + 1);
            if (v129 > 0xFFFFFFFFFFFFFFFBLL || v129 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 44) = *(_DWORD *)(*(_QWORD *)a2 + v129);
            goto LABEL_304;
          case 61:
            *(_QWORD *)v8 |= 0x10000000000uLL;
            v130 = *((_QWORD *)a2 + 1);
            if (v130 > 0xFFFFFFFFFFFFFFFBLL || v130 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 43) = *(_DWORD *)(*(_QWORD *)a2 + v130);
            goto LABEL_304;
          case 62:
            *(_QWORD *)v8 |= 0x40000000000uLL;
            v131 = *((_QWORD *)a2 + 1);
            if (v131 > 0xFFFFFFFFFFFFFFFBLL || v131 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 45) = *(_DWORD *)(*(_QWORD *)a2 + v131);
            goto LABEL_304;
          case 63:
            *(_QWORD *)v8 |= 0x80000000000uLL;
            v132 = *((_QWORD *)a2 + 1);
            if (v132 > 0xFFFFFFFFFFFFFFFBLL || v132 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 46) = *(_DWORD *)(*(_QWORD *)a2 + v132);
            goto LABEL_304;
          case 64:
            *(_QWORD *)v8 |= 0x100000000000uLL;
            v133 = *((_QWORD *)a2 + 1);
            if (v133 > 0xFFFFFFFFFFFFFFFBLL || v133 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 47) = *(_DWORD *)(*(_QWORD *)a2 + v133);
            goto LABEL_304;
          case 65:
            *(_QWORD *)v8 |= 0x200000000000uLL;
            v134 = *((_QWORD *)a2 + 1);
            if (v134 > 0xFFFFFFFFFFFFFFFBLL || v134 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 48) = *(_DWORD *)(*(_QWORD *)a2 + v134);
            goto LABEL_304;
          case 66:
            *(_QWORD *)v8 |= 0x800000000000uLL;
            v135 = *((_QWORD *)a2 + 1);
            if (v135 > 0xFFFFFFFFFFFFFFFBLL || v135 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 50) = *(_DWORD *)(*(_QWORD *)a2 + v135);
            goto LABEL_304;
          case 67:
            *(_QWORD *)v8 |= 0x400000000000uLL;
            v136 = *((_QWORD *)a2 + 1);
            if (v136 > 0xFFFFFFFFFFFFFFFBLL || v136 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 49) = *(_DWORD *)(*(_QWORD *)a2 + v136);
            goto LABEL_304;
          case 68:
            *(_QWORD *)v8 |= 0x1000000000000uLL;
            v137 = *((_QWORD *)a2 + 1);
            if (v137 > 0xFFFFFFFFFFFFFFFBLL || v137 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 51) = *(_DWORD *)(*(_QWORD *)a2 + v137);
            goto LABEL_304;
          case 69:
            *(_QWORD *)v8 |= 0x800000000000000uLL;
            v138 = *((_QWORD *)a2 + 1);
            v139 = *((_QWORD *)a2 + 2);
            v140 = *(_QWORD *)a2;
            if (v138 <= 0xFFFFFFFFFFFFFFF5 && v138 + 10 <= v139)
            {
              v141 = 0;
              v142 = 0;
              v143 = 0;
              do
              {
                v144 = v138 + 1;
                *((_QWORD *)a2 + 1) = v138 + 1;
                v145 = *(_BYTE *)(v140 + v138);
                v143 |= (unint64_t)(v145 & 0x7F) << v141;
                if ((v145 & 0x80) == 0)
                  goto LABEL_321;
                v141 += 7;
                v138 = v144;
                v15 = v142++ > 8;
              }
              while (!v15);
LABEL_299:
              LODWORD(v143) = 0;
              goto LABEL_321;
            }
            v164 = 0;
            v165 = 0;
            v143 = 0;
            if (v139 <= v138)
              v139 = *((_QWORD *)a2 + 1);
            break;
          case 70:
            *((_WORD *)v8 + 4) |= 0x400u;
            v146 = *((_QWORD *)a2 + 1);
            if (v146 >= *((_QWORD *)a2 + 2))
            {
              v149 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v147 = v146 + 1;
              v148 = *(unsigned __int8 *)(*(_QWORD *)a2 + v146);
              *((_QWORD *)a2 + 1) = v147;
              v149 = v148 != 0;
            }
            *((_BYTE *)this + 278) = v149;
            goto LABEL_305;
          case 71:
            *(_QWORD *)v8 |= 0x4000000000000000uLL;
            v150 = *((_QWORD *)a2 + 1);
            if (v150 > 0xFFFFFFFFFFFFFFFBLL || v150 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 65) = *(_DWORD *)(*(_QWORD *)a2 + v150);
            goto LABEL_304;
          case 72:
            *(_QWORD *)v8 |= 0x8000000000000000;
            v151 = *((_QWORD *)a2 + 1);
            if (v151 > 0xFFFFFFFFFFFFFFFBLL || v151 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_248;
            *((_DWORD *)this + 66) = *(_DWORD *)(*(_QWORD *)a2 + v151);
            goto LABEL_304;
          case 73:
            *(_QWORD *)v8 |= 0x2000000000000000uLL;
            v152 = *((_QWORD *)a2 + 1);
            if (v152 > 0xFFFFFFFFFFFFFFFBLL || v152 + 4 > *((_QWORD *)a2 + 2))
            {
LABEL_248:
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_305;
            }
            *((_DWORD *)this + 64) = *(_DWORD *)(*(_QWORD *)a2 + v152);
            goto LABEL_304;
          default:
            goto LABEL_255;
        }
        while (1)
        {
          if (v139 == v138)
          {
            LODWORD(v143) = 0;
            *((_BYTE *)a2 + 24) = 1;
            goto LABEL_321;
          }
          v166 = v138 + 1;
          v167 = *(_BYTE *)(v140 + v138);
          *((_QWORD *)a2 + 1) = v166;
          v143 |= (unint64_t)(v167 & 0x7F) << v164;
          if ((v167 & 0x80) == 0)
            break;
          v164 += 7;
          v138 = v166;
          v15 = v165++ > 8;
          if (v15)
            goto LABEL_299;
        }
        if (*((_BYTE *)a2 + 24))
          LODWORD(v143) = 0;
LABEL_321:
        *((_DWORD *)this + 62) = v143;
        goto LABEL_305;
      }
      switch((_DWORD)v21)
      {
        case 0x186A1:
          *(_QWORD *)v8 |= 0x80000uLL;
          v153 = *((_QWORD *)a2 + 1);
          if (v153 <= 0xFFFFFFFFFFFFFFFBLL && v153 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v153);
            goto LABEL_304;
          }
          break;
        case 0x186A2:
          *(_QWORD *)v8 |= 0x100000uLL;
          v154 = *((_QWORD *)a2 + 1);
          if (v154 <= 0xFFFFFFFFFFFFFFFBLL && v154 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v154);
            goto LABEL_304;
          }
          break;
        case 0x186A3:
          *(_QWORD *)v8 |= 0x200000uLL;
          v30 = *((_QWORD *)a2 + 1);
          if (v30 <= 0xFFFFFFFFFFFFFFFBLL && v30 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v30);
LABEL_304:
            *((_QWORD *)a2 + 1) += 4;
            goto LABEL_305;
          }
          break;
        default:
LABEL_255:
          result = PB::Reader::skip(a2, v21, v12 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_305;
      }
      *((_BYTE *)a2 + 24) = 1;
LABEL_305:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && v4 == 0);
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaCrashResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  __int16 v6;

  v3 = this;
  v4 = (uint64_t *)(this + 280);
  v5 = *(_QWORD *)(this + 280);
  if ((v5 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 8), 1u);
    v5 = *v4;
    v6 = *((_WORD *)v4 + 4);
    if ((*v4 & 0x2000000000000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = *(_WORD *)(this + 288);
  if ((v5 & 0x2000000000000) != 0)
  {
LABEL_5:
    this = PB::Writer::write(a2, *(float *)(v3 + 208), 2u);
    v5 = *v4;
    v6 = *((_WORD *)v4 + 4);
  }
LABEL_6:
  if ((v6 & 0x100) != 0)
  {
    this = PB::Writer::write(a2, *(_BYTE *)(v3 + 276), 3u);
    v5 = *v4;
    v6 = *((_WORD *)v4 + 4);
    if ((v6 & 0x80) == 0)
    {
LABEL_8:
      if ((v6 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_84;
    }
  }
  else if ((v6 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 275), 4u);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((v6 & 0x20) == 0)
  {
LABEL_9:
    if ((v6 & 4) == 0)
      goto LABEL_10;
    goto LABEL_85;
  }
LABEL_84:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 273), 5u);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((v6 & 4) == 0)
  {
LABEL_10:
    if ((v6 & 2) == 0)
      goto LABEL_11;
    goto LABEL_86;
  }
LABEL_85:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 270), 6u);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((v6 & 2) == 0)
  {
LABEL_11:
    if ((v5 & 0x40000) == 0)
      goto LABEL_12;
    goto LABEL_87;
  }
LABEL_86:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 269), 7u);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x40000) == 0)
  {
LABEL_12:
    if ((v6 & 1) == 0)
      goto LABEL_13;
    goto LABEL_88;
  }
LABEL_87:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 84), 8u);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((v6 & 1) == 0)
  {
LABEL_13:
    if ((v6 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_89;
  }
LABEL_88:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 268), 9u);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((v6 & 0x10) == 0)
  {
LABEL_14:
    if ((v5 & 0x20000) == 0)
      goto LABEL_15;
    goto LABEL_90;
  }
LABEL_89:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 272), 0xAu);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x20000) == 0)
  {
LABEL_15:
    if ((v5 & 0x10000) == 0)
      goto LABEL_16;
    goto LABEL_91;
  }
LABEL_90:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0xBu);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x10000) == 0)
  {
LABEL_16:
    if ((v5 & 0x400000) == 0)
      goto LABEL_17;
    goto LABEL_92;
  }
LABEL_91:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 0xCu);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x400000) == 0)
  {
LABEL_17:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_18;
    goto LABEL_93;
  }
LABEL_92:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 0xDu);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x8000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_19;
    goto LABEL_94;
  }
LABEL_93:
  this = PB::Writer::write(a2, *(float *)(v3 + 120), 0xEu);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x100000000) == 0)
  {
LABEL_19:
    if ((v5 & 0x4000000000000) == 0)
      goto LABEL_20;
    goto LABEL_95;
  }
LABEL_94:
  this = PB::Writer::write(a2, *(float *)(v3 + 140), 0xFu);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x4000000000000) == 0)
  {
LABEL_20:
    if ((v5 & 0x800000) == 0)
      goto LABEL_21;
    goto LABEL_96;
  }
LABEL_95:
  this = PB::Writer::write(a2, *(float *)(v3 + 212), 0x10u);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x800000) == 0)
  {
LABEL_21:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_22;
    goto LABEL_97;
  }
LABEL_96:
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 0x11u);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x10000000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_23;
    goto LABEL_98;
  }
LABEL_97:
  this = PB::Writer::write(a2, *(float *)(v3 + 124), 0x12u);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x200000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x8000000000000) == 0)
      goto LABEL_24;
    goto LABEL_99;
  }
LABEL_98:
  this = PB::Writer::write(a2, *(float *)(v3 + 144), 0x13u);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x8000000000000) == 0)
  {
LABEL_24:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_25;
    goto LABEL_100;
  }
LABEL_99:
  this = PB::Writer::write(a2, *(float *)(v3 + 216), 0x14u);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_26;
    goto LABEL_101;
  }
LABEL_100:
  this = PB::Writer::write(a2, *(float *)(v3 + 108), 0x15u);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x20000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_27;
    goto LABEL_102;
  }
LABEL_101:
  this = PB::Writer::write(a2, *(float *)(v3 + 128), 0x16u);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x400000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x10000000000000) == 0)
      goto LABEL_28;
    goto LABEL_103;
  }
LABEL_102:
  this = PB::Writer::write(a2, *(float *)(v3 + 148), 0x17u);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x10000000000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x100000000000000) == 0)
      goto LABEL_29;
    goto LABEL_104;
  }
LABEL_103:
  this = PB::Writer::write(a2, *(float *)(v3 + 220), 0x18u);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x100000000000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x80000000000000) == 0)
      goto LABEL_30;
    goto LABEL_105;
  }
LABEL_104:
  this = PB::Writer::write(a2, *(float *)(v3 + 236), 0x19u);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x80000000000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x200000000000000) == 0)
      goto LABEL_31;
    goto LABEL_106;
  }
LABEL_105:
  this = PB::Writer::write(a2, *(float *)(v3 + 232), 0x1Au);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x200000000000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x40) == 0)
      goto LABEL_32;
    goto LABEL_107;
  }
LABEL_106:
  this = PB::Writer::write(a2, *(float *)(v3 + 240), 0x1Bu);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x40) == 0)
  {
LABEL_32:
    if ((v5 & 2) == 0)
      goto LABEL_33;
    goto LABEL_108;
  }
LABEL_107:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 0x1Cu);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 2) == 0)
  {
LABEL_33:
    if ((v5 & 0x8000) == 0)
      goto LABEL_34;
    goto LABEL_109;
  }
LABEL_108:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 0x1Du);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x8000) == 0)
  {
LABEL_34:
    if ((v6 & 0x800) == 0)
      goto LABEL_35;
    goto LABEL_110;
  }
LABEL_109:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0x1Eu);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((v6 & 0x800) == 0)
  {
LABEL_35:
    if ((v6 & 8) == 0)
      goto LABEL_36;
    goto LABEL_111;
  }
LABEL_110:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 279), 0x1Fu);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((v6 & 8) == 0)
  {
LABEL_36:
    if ((v5 & 0x80) == 0)
      goto LABEL_37;
    goto LABEL_112;
  }
LABEL_111:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 271), 0x20u);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x80) == 0)
  {
LABEL_37:
    if ((v5 & 0x400) == 0)
      goto LABEL_38;
    goto LABEL_113;
  }
LABEL_112:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 0x21u);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x400) == 0)
  {
LABEL_38:
    if ((v5 & 0x200) == 0)
      goto LABEL_39;
    goto LABEL_114;
  }
LABEL_113:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0x22u);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x200) == 0)
  {
LABEL_39:
    if ((v5 & 0x100) == 0)
      goto LABEL_40;
    goto LABEL_115;
  }
LABEL_114:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 0x23u);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x100) == 0)
  {
LABEL_40:
    if ((v5 & 4) == 0)
      goto LABEL_41;
    goto LABEL_116;
  }
LABEL_115:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 0x24u);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 4) == 0)
  {
LABEL_41:
    if ((v5 & 0x20) == 0)
      goto LABEL_42;
    goto LABEL_117;
  }
LABEL_116:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 0x25u);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x20) == 0)
  {
LABEL_42:
    if ((v5 & 0x10) == 0)
      goto LABEL_43;
    goto LABEL_118;
  }
LABEL_117:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 0x26u);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x10) == 0)
  {
LABEL_43:
    if ((v5 & 8) == 0)
      goto LABEL_44;
    goto LABEL_119;
  }
LABEL_118:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 0x27u);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 8) == 0)
  {
LABEL_44:
    if ((v5 & 0x800) == 0)
      goto LABEL_45;
    goto LABEL_120;
  }
LABEL_119:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 0x28u);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x800) == 0)
  {
LABEL_45:
    if ((v5 & 0x4000) == 0)
      goto LABEL_46;
    goto LABEL_121;
  }
LABEL_120:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 0x29u);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x4000) == 0)
  {
LABEL_46:
    if ((v5 & 0x2000) == 0)
      goto LABEL_47;
    goto LABEL_122;
  }
LABEL_121:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 0x2Au);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x2000) == 0)
  {
LABEL_47:
    if ((v5 & 0x1000) == 0)
      goto LABEL_48;
    goto LABEL_123;
  }
LABEL_122:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 0x2Bu);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x1000) == 0)
  {
LABEL_48:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_49;
    goto LABEL_124;
  }
LABEL_123:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 0x2Cu);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x2000000) == 0)
  {
LABEL_49:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_50;
    goto LABEL_125;
  }
LABEL_124:
  this = PB::Writer::write(a2, *(float *)(v3 + 112), 0x2Du);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x40000000) == 0)
  {
LABEL_50:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_51;
    goto LABEL_126;
  }
LABEL_125:
  this = PB::Writer::write(a2, *(float *)(v3 + 132), 0x2Eu);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x800000000) == 0)
  {
LABEL_51:
    if ((v5 & 0x20000000000000) == 0)
      goto LABEL_52;
    goto LABEL_127;
  }
LABEL_126:
  this = PB::Writer::write(a2, *(float *)(v3 + 152), 0x2Fu);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x20000000000000) == 0)
  {
LABEL_52:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_53;
    goto LABEL_128;
  }
LABEL_127:
  this = PB::Writer::write(a2, *(float *)(v3 + 224), 0x30u);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x4000000) == 0)
  {
LABEL_53:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_54;
    goto LABEL_129;
  }
LABEL_128:
  this = PB::Writer::write(a2, *(float *)(v3 + 116), 0x31u);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x80000000) == 0)
  {
LABEL_54:
    if ((v5 & 0x1000000000) == 0)
      goto LABEL_55;
    goto LABEL_130;
  }
LABEL_129:
  this = PB::Writer::write(a2, *(float *)(v3 + 136), 0x32u);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x1000000000) == 0)
  {
LABEL_55:
    if ((v5 & 0x40000000000000) == 0)
      goto LABEL_56;
    goto LABEL_131;
  }
LABEL_130:
  this = PB::Writer::write(a2, *(float *)(v3 + 156), 0x33u);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x40000000000000) == 0)
  {
LABEL_56:
    if ((v6 & 0x40) == 0)
      goto LABEL_57;
    goto LABEL_132;
  }
LABEL_131:
  this = PB::Writer::write(a2, *(float *)(v3 + 228), 0x34u);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((v6 & 0x40) == 0)
  {
LABEL_57:
    if ((v5 & 0x1000000000000000) == 0)
      goto LABEL_58;
    goto LABEL_133;
  }
LABEL_132:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 274), 0x35u);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x1000000000000000) == 0)
  {
LABEL_58:
    if ((v5 & 0x400000000000000) == 0)
      goto LABEL_59;
    goto LABEL_134;
  }
LABEL_133:
  this = PB::Writer::write(a2, *(float *)(v3 + 252), 0x36u);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x400000000000000) == 0)
  {
LABEL_59:
    if ((v6 & 0x200) == 0)
      goto LABEL_60;
    goto LABEL_135;
  }
LABEL_134:
  this = PB::Writer::write(a2, *(float *)(v3 + 244), 0x37u);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((v6 & 0x200) == 0)
  {
LABEL_60:
    if ((v5 & 0x2000000000) == 0)
      goto LABEL_61;
    goto LABEL_136;
  }
LABEL_135:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 277), 0x38u);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x2000000000) == 0)
  {
LABEL_61:
    if ((v5 & 0x4000000000) == 0)
      goto LABEL_62;
    goto LABEL_137;
  }
LABEL_136:
  this = PB::Writer::write(a2, *(float *)(v3 + 160), 0x39u);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x4000000000) == 0)
  {
LABEL_62:
    if ((v5 & 0x8000000000) == 0)
      goto LABEL_63;
    goto LABEL_138;
  }
LABEL_137:
  this = PB::Writer::write(a2, *(float *)(v3 + 164), 0x3Au);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x8000000000) == 0)
  {
LABEL_63:
    if ((v5 & 0x20000000000) == 0)
      goto LABEL_64;
    goto LABEL_139;
  }
LABEL_138:
  this = PB::Writer::write(a2, *(float *)(v3 + 168), 0x3Bu);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x20000000000) == 0)
  {
LABEL_64:
    if ((v5 & 0x10000000000) == 0)
      goto LABEL_65;
    goto LABEL_140;
  }
LABEL_139:
  this = PB::Writer::write(a2, *(float *)(v3 + 176), 0x3Cu);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x10000000000) == 0)
  {
LABEL_65:
    if ((v5 & 0x40000000000) == 0)
      goto LABEL_66;
    goto LABEL_141;
  }
LABEL_140:
  this = PB::Writer::write(a2, *(float *)(v3 + 172), 0x3Du);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x40000000000) == 0)
  {
LABEL_66:
    if ((v5 & 0x80000000000) == 0)
      goto LABEL_67;
    goto LABEL_142;
  }
LABEL_141:
  this = PB::Writer::write(a2, *(float *)(v3 + 180), 0x3Eu);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x80000000000) == 0)
  {
LABEL_67:
    if ((v5 & 0x100000000000) == 0)
      goto LABEL_68;
    goto LABEL_143;
  }
LABEL_142:
  this = PB::Writer::write(a2, *(float *)(v3 + 184), 0x3Fu);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x100000000000) == 0)
  {
LABEL_68:
    if ((v5 & 0x200000000000) == 0)
      goto LABEL_69;
    goto LABEL_144;
  }
LABEL_143:
  this = PB::Writer::write(a2, *(float *)(v3 + 188), 0x40u);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x200000000000) == 0)
  {
LABEL_69:
    if ((v5 & 0x800000000000) == 0)
      goto LABEL_70;
    goto LABEL_145;
  }
LABEL_144:
  this = PB::Writer::write(a2, *(float *)(v3 + 192), 0x41u);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x800000000000) == 0)
  {
LABEL_70:
    if ((v5 & 0x400000000000) == 0)
      goto LABEL_71;
    goto LABEL_146;
  }
LABEL_145:
  this = PB::Writer::write(a2, *(float *)(v3 + 200), 0x42u);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x400000000000) == 0)
  {
LABEL_71:
    if ((v5 & 0x1000000000000) == 0)
      goto LABEL_72;
    goto LABEL_147;
  }
LABEL_146:
  this = PB::Writer::write(a2, *(float *)(v3 + 196), 0x43u);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x1000000000000) == 0)
  {
LABEL_72:
    if ((v5 & 0x800000000000000) == 0)
      goto LABEL_73;
    goto LABEL_148;
  }
LABEL_147:
  this = PB::Writer::write(a2, *(float *)(v3 + 204), 0x44u);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x800000000000000) == 0)
  {
LABEL_73:
    if ((v6 & 0x400) == 0)
      goto LABEL_74;
    goto LABEL_149;
  }
LABEL_148:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 248), 0x45u);
  v5 = *v4;
  if ((v4[1] & 0x400) == 0)
  {
LABEL_74:
    if ((v5 & 0x4000000000000000) == 0)
      goto LABEL_75;
    goto LABEL_150;
  }
LABEL_149:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 278), 0x46u);
  v5 = *v4;
  if ((*v4 & 0x4000000000000000) == 0)
  {
LABEL_75:
    if ((v5 & 0x8000000000000000) == 0)
      goto LABEL_76;
    goto LABEL_151;
  }
LABEL_150:
  this = PB::Writer::write(a2, *(float *)(v3 + 260), 0x47u);
  v5 = *v4;
  if ((*v4 & 0x8000000000000000) == 0)
  {
LABEL_76:
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_78;
    goto LABEL_77;
  }
LABEL_151:
  this = PB::Writer::write(a2, *(float *)(v3 + 264), 0x48u);
  v5 = *v4;
  if ((*v4 & 0x2000000000000000) != 0)
  {
LABEL_77:
    this = PB::Writer::write(a2, *(float *)(v3 + 256), 0x49u);
    v5 = *v4;
  }
LABEL_78:
  if ((v5 & 0x80000) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 88), 0x186A1u);
    v5 = *v4;
    if ((*v4 & 0x100000) == 0)
    {
LABEL_80:
      if ((v5 & 0x200000) == 0)
        return this;
      return PB::Writer::write(a2, *(float *)(v3 + 96), 0x186A3u);
    }
  }
  else if ((v5 & 0x100000) == 0)
  {
    goto LABEL_80;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 92), 0x186A2u);
  if ((*v4 & 0x200000) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 96), 0x186A3u);
  return this;
}

uint64_t CMMsl::KappaCrashResult::hash_value(CMMsl::KappaCrashResult *this)
{
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  float v46;
  uint64_t v47;
  float v48;
  uint64_t v49;
  float v50;
  uint64_t v51;
  float v52;
  uint64_t v53;
  float v54;
  uint64_t v55;
  float v56;
  uint64_t v57;
  float v58;
  uint64_t v59;
  float v60;
  uint64_t v61;
  float v62;
  uint64_t v63;
  float v64;
  uint64_t v65;
  float v66;
  uint64_t v67;
  float v68;
  uint64_t v69;
  float v70;
  uint64_t v71;
  float v72;
  uint64_t v73;
  float v74;
  uint64_t v75;
  float v76;
  uint64_t v77;
  float v78;
  uint64_t v79;
  float v80;
  uint64_t v81;
  float v82;
  uint64_t v83;
  float v84;
  uint64_t v85;
  float v86;
  uint64_t v87;
  float v88;
  uint64_t v89;
  float v90;
  uint64_t v91;
  uint64_t v92;
  float v93;
  uint64_t v94;
  float v95;
  uint64_t v96;
  uint64_t v97;
  float v98;
  uint64_t v99;
  float v100;
  uint64_t v101;
  float v102;
  uint64_t v103;
  float v104;
  uint64_t v105;
  float v106;
  uint64_t v107;
  float v108;
  uint64_t v109;
  float v110;
  uint64_t v111;
  float v112;
  uint64_t v113;
  float v114;
  uint64_t v115;
  float v116;
  uint64_t v117;
  float v118;
  uint64_t v119;
  float v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  float v124;
  uint64_t v125;
  float v126;
  uint64_t v127;
  float v128;
  uint64_t v129;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;

  v1 = *((_WORD *)this + 144);
  v2 = *((_QWORD *)this + 35);
  if ((v2 & 1) == 0)
  {
    v3 = 0;
    if ((v2 & 0x2000000000000) != 0)
      goto LABEL_3;
LABEL_203:
    v179 = 0;
    if ((*((_WORD *)this + 144) & 0x100) != 0)
      goto LABEL_6;
    goto LABEL_204;
  }
  v3 = *((_QWORD *)this + 1);
  if ((v2 & 0x2000000000000) == 0)
    goto LABEL_203;
LABEL_3:
  v4 = *((float *)this + 52);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  v179 = v5;
  if ((*((_WORD *)this + 144) & 0x100) != 0)
  {
LABEL_6:
    v178 = *((unsigned __int8 *)this + 276);
    if ((v1 & 0x80) != 0)
      goto LABEL_7;
    goto LABEL_205;
  }
LABEL_204:
  v178 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_7:
    v177 = *((unsigned __int8 *)this + 275);
    if ((v1 & 0x20) != 0)
      goto LABEL_8;
    goto LABEL_206;
  }
LABEL_205:
  v177 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_8:
    v176 = *((unsigned __int8 *)this + 273);
    if ((v1 & 4) != 0)
      goto LABEL_9;
    goto LABEL_207;
  }
LABEL_206:
  v176 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_9:
    v175 = *((unsigned __int8 *)this + 270);
    if ((v1 & 2) != 0)
      goto LABEL_10;
    goto LABEL_208;
  }
LABEL_207:
  v175 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_10:
    v174 = *((unsigned __int8 *)this + 269);
    if ((v2 & 0x40000) != 0)
      goto LABEL_11;
    goto LABEL_209;
  }
LABEL_208:
  v174 = 0;
  if ((v2 & 0x40000) != 0)
  {
LABEL_11:
    v173 = *((int *)this + 21);
    if ((v1 & 1) != 0)
      goto LABEL_12;
    goto LABEL_210;
  }
LABEL_209:
  v173 = 0;
  if ((v1 & 1) != 0)
  {
LABEL_12:
    v172 = *((unsigned __int8 *)this + 268);
    if ((v1 & 0x10) != 0)
      goto LABEL_13;
    goto LABEL_211;
  }
LABEL_210:
  v172 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_13:
    v171 = *((unsigned __int8 *)this + 272);
    if ((v2 & 0x20000) != 0)
      goto LABEL_14;
LABEL_212:
    v170 = 0;
    if ((v2 & 0x10000) != 0)
      goto LABEL_17;
LABEL_213:
    v169 = 0;
    if ((v2 & 0x400000) != 0)
      goto LABEL_20;
LABEL_214:
    v168 = 0;
    if ((v2 & 0x8000000) != 0)
      goto LABEL_23;
LABEL_215:
    v167 = 0;
    if ((v2 & 0x100000000) != 0)
      goto LABEL_26;
LABEL_216:
    v166 = 0;
    if ((v2 & 0x4000000000000) != 0)
      goto LABEL_29;
LABEL_217:
    v165 = 0;
    if ((v2 & 0x800000) != 0)
      goto LABEL_32;
LABEL_218:
    v164 = 0;
    if ((v2 & 0x10000000) != 0)
      goto LABEL_35;
LABEL_219:
    v163 = 0;
    if ((v2 & 0x200000000) != 0)
      goto LABEL_38;
LABEL_220:
    v162 = 0;
    if ((v2 & 0x8000000000000) != 0)
      goto LABEL_41;
LABEL_221:
    v161 = 0;
    if ((v2 & 0x1000000) != 0)
      goto LABEL_44;
LABEL_222:
    v160 = 0;
    if ((v2 & 0x20000000) != 0)
      goto LABEL_47;
LABEL_223:
    v159 = 0;
    if ((v2 & 0x400000000) != 0)
      goto LABEL_50;
LABEL_224:
    v158 = 0;
    if ((v2 & 0x10000000000000) != 0)
      goto LABEL_53;
LABEL_225:
    v157 = 0;
    if ((v2 & 0x80000) != 0)
      goto LABEL_56;
LABEL_226:
    v156 = 0;
    if ((v2 & 0x100000) != 0)
      goto LABEL_59;
LABEL_227:
    v155 = 0;
    if ((v2 & 0x200000) != 0)
      goto LABEL_62;
LABEL_228:
    v154 = 0;
    if ((v2 & 0x100000000000000) != 0)
      goto LABEL_65;
LABEL_229:
    v153 = 0;
    if ((v2 & 0x80000000000000) != 0)
      goto LABEL_68;
LABEL_230:
    v152 = 0;
    if ((v2 & 0x200000000000000) != 0)
      goto LABEL_71;
LABEL_231:
    v151 = 0;
    if ((v2 & 0x40) != 0)
      goto LABEL_74;
LABEL_232:
    v150 = 0;
    if ((v2 & 2) != 0)
      goto LABEL_77;
LABEL_233:
    v149 = 0;
    if ((v2 & 0x8000) != 0)
      goto LABEL_80;
LABEL_234:
    v148 = 0;
    if ((*((_WORD *)this + 144) & 0x800) != 0)
      goto LABEL_83;
    goto LABEL_235;
  }
LABEL_211:
  v171 = 0;
  if ((v2 & 0x20000) == 0)
    goto LABEL_212;
LABEL_14:
  v6 = *((float *)this + 20);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  v170 = v7;
  if ((v2 & 0x10000) == 0)
    goto LABEL_213;
LABEL_17:
  v8 = *((float *)this + 19);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  v169 = v9;
  if ((v2 & 0x400000) == 0)
    goto LABEL_214;
LABEL_20:
  v10 = *((float *)this + 25);
  v11 = LODWORD(v10);
  if (v10 == 0.0)
    v11 = 0;
  v168 = v11;
  if ((v2 & 0x8000000) == 0)
    goto LABEL_215;
LABEL_23:
  v12 = *((float *)this + 30);
  v13 = LODWORD(v12);
  if (v12 == 0.0)
    v13 = 0;
  v167 = v13;
  if ((v2 & 0x100000000) == 0)
    goto LABEL_216;
LABEL_26:
  v14 = *((float *)this + 35);
  v15 = LODWORD(v14);
  if (v14 == 0.0)
    v15 = 0;
  v166 = v15;
  if ((v2 & 0x4000000000000) == 0)
    goto LABEL_217;
LABEL_29:
  v16 = *((float *)this + 53);
  v17 = LODWORD(v16);
  if (v16 == 0.0)
    v17 = 0;
  v165 = v17;
  if ((v2 & 0x800000) == 0)
    goto LABEL_218;
LABEL_32:
  v18 = *((float *)this + 26);
  v19 = LODWORD(v18);
  if (v18 == 0.0)
    v19 = 0;
  v164 = v19;
  if ((v2 & 0x10000000) == 0)
    goto LABEL_219;
LABEL_35:
  v20 = *((float *)this + 31);
  v21 = LODWORD(v20);
  if (v20 == 0.0)
    v21 = 0;
  v163 = v21;
  if ((v2 & 0x200000000) == 0)
    goto LABEL_220;
LABEL_38:
  v22 = *((float *)this + 36);
  v23 = LODWORD(v22);
  if (v22 == 0.0)
    v23 = 0;
  v162 = v23;
  if ((v2 & 0x8000000000000) == 0)
    goto LABEL_221;
LABEL_41:
  v24 = *((float *)this + 54);
  v25 = LODWORD(v24);
  if (v24 == 0.0)
    v25 = 0;
  v161 = v25;
  if ((v2 & 0x1000000) == 0)
    goto LABEL_222;
LABEL_44:
  v26 = *((float *)this + 27);
  v27 = LODWORD(v26);
  if (v26 == 0.0)
    v27 = 0;
  v160 = v27;
  if ((v2 & 0x20000000) == 0)
    goto LABEL_223;
LABEL_47:
  v28 = *((float *)this + 32);
  v29 = LODWORD(v28);
  if (v28 == 0.0)
    v29 = 0;
  v159 = v29;
  if ((v2 & 0x400000000) == 0)
    goto LABEL_224;
LABEL_50:
  v30 = *((float *)this + 37);
  v31 = LODWORD(v30);
  if (v30 == 0.0)
    v31 = 0;
  v158 = v31;
  if ((v2 & 0x10000000000000) == 0)
    goto LABEL_225;
LABEL_53:
  v32 = *((float *)this + 55);
  v33 = LODWORD(v32);
  if (v32 == 0.0)
    v33 = 0;
  v157 = v33;
  if ((v2 & 0x80000) == 0)
    goto LABEL_226;
LABEL_56:
  v34 = *((float *)this + 22);
  v35 = LODWORD(v34);
  if (v34 == 0.0)
    v35 = 0;
  v156 = v35;
  if ((v2 & 0x100000) == 0)
    goto LABEL_227;
LABEL_59:
  v36 = *((float *)this + 23);
  v37 = LODWORD(v36);
  if (v36 == 0.0)
    v37 = 0;
  v155 = v37;
  if ((v2 & 0x200000) == 0)
    goto LABEL_228;
LABEL_62:
  v38 = *((float *)this + 24);
  v39 = LODWORD(v38);
  if (v38 == 0.0)
    v39 = 0;
  v154 = v39;
  if ((v2 & 0x100000000000000) == 0)
    goto LABEL_229;
LABEL_65:
  v40 = *((float *)this + 59);
  v41 = LODWORD(v40);
  if (v40 == 0.0)
    v41 = 0;
  v153 = v41;
  if ((v2 & 0x80000000000000) == 0)
    goto LABEL_230;
LABEL_68:
  v42 = *((float *)this + 58);
  v43 = LODWORD(v42);
  if (v42 == 0.0)
    v43 = 0;
  v152 = v43;
  if ((v2 & 0x200000000000000) == 0)
    goto LABEL_231;
LABEL_71:
  v44 = *((float *)this + 60);
  v45 = LODWORD(v44);
  if (v44 == 0.0)
    v45 = 0;
  v151 = v45;
  if ((v2 & 0x40) == 0)
    goto LABEL_232;
LABEL_74:
  v46 = *((float *)this + 9);
  v47 = LODWORD(v46);
  if (v46 == 0.0)
    v47 = 0;
  v150 = v47;
  if ((v2 & 2) == 0)
    goto LABEL_233;
LABEL_77:
  v48 = *((float *)this + 4);
  v49 = LODWORD(v48);
  if (v48 == 0.0)
    v49 = 0;
  v149 = v49;
  if ((v2 & 0x8000) == 0)
    goto LABEL_234;
LABEL_80:
  v50 = *((float *)this + 18);
  v51 = LODWORD(v50);
  if (v50 == 0.0)
    v51 = 0;
  v148 = v51;
  if ((*((_WORD *)this + 144) & 0x800) != 0)
  {
LABEL_83:
    v147 = *((unsigned __int8 *)this + 279);
    if ((v1 & 8) != 0)
      goto LABEL_84;
    goto LABEL_236;
  }
LABEL_235:
  v147 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_84:
    v146 = *((unsigned __int8 *)this + 271);
    if ((v2 & 0x80) != 0)
      goto LABEL_85;
LABEL_237:
    v145 = 0;
    if ((v2 & 0x400) != 0)
      goto LABEL_88;
LABEL_238:
    v144 = 0;
    if ((v2 & 0x200) != 0)
      goto LABEL_91;
LABEL_239:
    v143 = 0;
    if ((v2 & 0x100) != 0)
      goto LABEL_94;
LABEL_240:
    v142 = 0;
    if ((v2 & 4) != 0)
      goto LABEL_97;
LABEL_241:
    v141 = 0;
    if ((v2 & 0x20) != 0)
      goto LABEL_100;
LABEL_242:
    v140 = 0;
    if ((v2 & 0x10) != 0)
      goto LABEL_103;
LABEL_243:
    v139 = 0;
    if ((v2 & 8) != 0)
      goto LABEL_106;
LABEL_244:
    v138 = 0;
    if ((v2 & 0x800) != 0)
      goto LABEL_109;
LABEL_245:
    v137 = 0;
    if ((v2 & 0x4000) != 0)
      goto LABEL_112;
LABEL_246:
    v136 = 0;
    if ((v2 & 0x2000) != 0)
      goto LABEL_115;
LABEL_247:
    v135 = 0;
    if ((v2 & 0x1000) != 0)
      goto LABEL_118;
LABEL_248:
    v134 = 0;
    if ((v2 & 0x2000000) != 0)
      goto LABEL_121;
LABEL_249:
    v133 = 0;
    if ((v2 & 0x40000000) != 0)
      goto LABEL_124;
LABEL_250:
    v132 = 0;
    if ((v2 & 0x800000000) != 0)
      goto LABEL_127;
LABEL_251:
    v131 = 0;
    if ((v2 & 0x20000000000000) != 0)
      goto LABEL_130;
LABEL_252:
    v83 = 0;
    if ((v2 & 0x4000000) != 0)
      goto LABEL_134;
LABEL_253:
    v85 = 0;
    if ((v2 & 0x80000000) != 0)
      goto LABEL_138;
LABEL_254:
    v87 = 0;
    if ((v2 & 0x1000000000) != 0)
      goto LABEL_141;
LABEL_255:
    v89 = 0;
    if ((v2 & 0x40000000000000) != 0)
      goto LABEL_144;
LABEL_256:
    v91 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_147;
    goto LABEL_257;
  }
LABEL_236:
  v146 = 0;
  if ((v2 & 0x80) == 0)
    goto LABEL_237;
LABEL_85:
  v52 = *((float *)this + 10);
  v53 = LODWORD(v52);
  if (v52 == 0.0)
    v53 = 0;
  v145 = v53;
  if ((v2 & 0x400) == 0)
    goto LABEL_238;
LABEL_88:
  v54 = *((float *)this + 13);
  v55 = LODWORD(v54);
  if (v54 == 0.0)
    v55 = 0;
  v144 = v55;
  if ((v2 & 0x200) == 0)
    goto LABEL_239;
LABEL_91:
  v56 = *((float *)this + 12);
  v57 = LODWORD(v56);
  if (v56 == 0.0)
    v57 = 0;
  v143 = v57;
  if ((v2 & 0x100) == 0)
    goto LABEL_240;
LABEL_94:
  v58 = *((float *)this + 11);
  v59 = LODWORD(v58);
  if (v58 == 0.0)
    v59 = 0;
  v142 = v59;
  if ((v2 & 4) == 0)
    goto LABEL_241;
LABEL_97:
  v60 = *((float *)this + 5);
  v61 = LODWORD(v60);
  if (v60 == 0.0)
    v61 = 0;
  v141 = v61;
  if ((v2 & 0x20) == 0)
    goto LABEL_242;
LABEL_100:
  v62 = *((float *)this + 8);
  v63 = LODWORD(v62);
  if (v62 == 0.0)
    v63 = 0;
  v140 = v63;
  if ((v2 & 0x10) == 0)
    goto LABEL_243;
LABEL_103:
  v64 = *((float *)this + 7);
  v65 = LODWORD(v64);
  if (v64 == 0.0)
    v65 = 0;
  v139 = v65;
  if ((v2 & 8) == 0)
    goto LABEL_244;
LABEL_106:
  v66 = *((float *)this + 6);
  v67 = LODWORD(v66);
  if (v66 == 0.0)
    v67 = 0;
  v138 = v67;
  if ((v2 & 0x800) == 0)
    goto LABEL_245;
LABEL_109:
  v68 = *((float *)this + 14);
  v69 = LODWORD(v68);
  if (v68 == 0.0)
    v69 = 0;
  v137 = v69;
  if ((v2 & 0x4000) == 0)
    goto LABEL_246;
LABEL_112:
  v70 = *((float *)this + 17);
  v71 = LODWORD(v70);
  if (v70 == 0.0)
    v71 = 0;
  v136 = v71;
  if ((v2 & 0x2000) == 0)
    goto LABEL_247;
LABEL_115:
  v72 = *((float *)this + 16);
  v73 = LODWORD(v72);
  if (v72 == 0.0)
    v73 = 0;
  v135 = v73;
  if ((v2 & 0x1000) == 0)
    goto LABEL_248;
LABEL_118:
  v74 = *((float *)this + 15);
  v75 = LODWORD(v74);
  if (v74 == 0.0)
    v75 = 0;
  v134 = v75;
  if ((v2 & 0x2000000) == 0)
    goto LABEL_249;
LABEL_121:
  v76 = *((float *)this + 28);
  v77 = LODWORD(v76);
  if (v76 == 0.0)
    v77 = 0;
  v133 = v77;
  if ((v2 & 0x40000000) == 0)
    goto LABEL_250;
LABEL_124:
  v78 = *((float *)this + 33);
  v79 = LODWORD(v78);
  if (v78 == 0.0)
    v79 = 0;
  v132 = v79;
  if ((v2 & 0x800000000) == 0)
    goto LABEL_251;
LABEL_127:
  v80 = *((float *)this + 38);
  v81 = LODWORD(v80);
  if (v80 == 0.0)
    v81 = 0;
  v131 = v81;
  if ((v2 & 0x20000000000000) == 0)
    goto LABEL_252;
LABEL_130:
  v82 = *((float *)this + 56);
  if (v82 == 0.0)
    v83 = 0;
  else
    v83 = LODWORD(v82);
  if ((v2 & 0x4000000) == 0)
    goto LABEL_253;
LABEL_134:
  v84 = *((float *)this + 29);
  if (v84 == 0.0)
    v85 = 0;
  else
    v85 = LODWORD(v84);
  if ((v2 & 0x80000000) == 0)
    goto LABEL_254;
LABEL_138:
  v86 = *((float *)this + 34);
  v87 = LODWORD(v86);
  if (v86 == 0.0)
    v87 = 0;
  if ((v2 & 0x1000000000) == 0)
    goto LABEL_255;
LABEL_141:
  v88 = *((float *)this + 39);
  v89 = LODWORD(v88);
  if (v88 == 0.0)
    v89 = 0;
  if ((v2 & 0x40000000000000) == 0)
    goto LABEL_256;
LABEL_144:
  v90 = *((float *)this + 57);
  v91 = LODWORD(v90);
  if (v90 == 0.0)
    v91 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_147:
    v92 = *((unsigned __int8 *)this + 274);
    if ((v2 & 0x1000000000000000) != 0)
      goto LABEL_148;
LABEL_258:
    v94 = 0;
    if ((v2 & 0x400000000000000) != 0)
      goto LABEL_151;
LABEL_259:
    v96 = 0;
    if ((*((_WORD *)this + 144) & 0x200) != 0)
      goto LABEL_154;
    goto LABEL_260;
  }
LABEL_257:
  v92 = 0;
  if ((v2 & 0x1000000000000000) == 0)
    goto LABEL_258;
LABEL_148:
  v93 = *((float *)this + 63);
  v94 = LODWORD(v93);
  if (v93 == 0.0)
    v94 = 0;
  if ((v2 & 0x400000000000000) == 0)
    goto LABEL_259;
LABEL_151:
  v95 = *((float *)this + 61);
  v96 = LODWORD(v95);
  if (v95 == 0.0)
    v96 = 0;
  if ((*((_WORD *)this + 144) & 0x200) != 0)
  {
LABEL_154:
    v97 = *((unsigned __int8 *)this + 277);
    if ((v2 & 0x2000000000) != 0)
      goto LABEL_155;
LABEL_261:
    v99 = 0;
    if ((v2 & 0x4000000000) != 0)
      goto LABEL_158;
LABEL_262:
    v101 = 0;
    if ((v2 & 0x8000000000) != 0)
      goto LABEL_161;
LABEL_263:
    v103 = 0;
    if ((v2 & 0x20000000000) != 0)
      goto LABEL_164;
LABEL_264:
    v105 = 0;
    if ((v2 & 0x10000000000) != 0)
      goto LABEL_167;
LABEL_265:
    v107 = 0;
    if ((v2 & 0x40000000000) != 0)
      goto LABEL_170;
LABEL_266:
    v109 = 0;
    if ((v2 & 0x80000000000) != 0)
      goto LABEL_173;
LABEL_267:
    v111 = 0;
    if ((v2 & 0x100000000000) != 0)
      goto LABEL_176;
LABEL_268:
    v113 = 0;
    if ((v2 & 0x200000000000) != 0)
      goto LABEL_179;
LABEL_269:
    v115 = 0;
    if ((v2 & 0x800000000000) != 0)
      goto LABEL_182;
LABEL_270:
    v117 = 0;
    if ((v2 & 0x400000000000) != 0)
      goto LABEL_185;
LABEL_271:
    v119 = 0;
    if ((v2 & 0x1000000000000) != 0)
      goto LABEL_188;
LABEL_272:
    v121 = 0;
    if ((v2 & 0x800000000000000) != 0)
      goto LABEL_191;
    goto LABEL_273;
  }
LABEL_260:
  v97 = 0;
  if ((v2 & 0x2000000000) == 0)
    goto LABEL_261;
LABEL_155:
  v98 = *((float *)this + 40);
  v99 = LODWORD(v98);
  if (v98 == 0.0)
    v99 = 0;
  if ((v2 & 0x4000000000) == 0)
    goto LABEL_262;
LABEL_158:
  v100 = *((float *)this + 41);
  v101 = LODWORD(v100);
  if (v100 == 0.0)
    v101 = 0;
  if ((v2 & 0x8000000000) == 0)
    goto LABEL_263;
LABEL_161:
  v102 = *((float *)this + 42);
  v103 = LODWORD(v102);
  if (v102 == 0.0)
    v103 = 0;
  if ((v2 & 0x20000000000) == 0)
    goto LABEL_264;
LABEL_164:
  v104 = *((float *)this + 44);
  v105 = LODWORD(v104);
  if (v104 == 0.0)
    v105 = 0;
  if ((v2 & 0x10000000000) == 0)
    goto LABEL_265;
LABEL_167:
  v106 = *((float *)this + 43);
  v107 = LODWORD(v106);
  if (v106 == 0.0)
    v107 = 0;
  if ((v2 & 0x40000000000) == 0)
    goto LABEL_266;
LABEL_170:
  v108 = *((float *)this + 45);
  v109 = LODWORD(v108);
  if (v108 == 0.0)
    v109 = 0;
  if ((v2 & 0x80000000000) == 0)
    goto LABEL_267;
LABEL_173:
  v110 = *((float *)this + 46);
  v111 = LODWORD(v110);
  if (v110 == 0.0)
    v111 = 0;
  if ((v2 & 0x100000000000) == 0)
    goto LABEL_268;
LABEL_176:
  v112 = *((float *)this + 47);
  v113 = LODWORD(v112);
  if (v112 == 0.0)
    v113 = 0;
  if ((v2 & 0x200000000000) == 0)
    goto LABEL_269;
LABEL_179:
  v114 = *((float *)this + 48);
  v115 = LODWORD(v114);
  if (v114 == 0.0)
    v115 = 0;
  if ((v2 & 0x800000000000) == 0)
    goto LABEL_270;
LABEL_182:
  v116 = *((float *)this + 50);
  v117 = LODWORD(v116);
  if (v116 == 0.0)
    v117 = 0;
  if ((v2 & 0x400000000000) == 0)
    goto LABEL_271;
LABEL_185:
  v118 = *((float *)this + 49);
  v119 = LODWORD(v118);
  if (v118 == 0.0)
    v119 = 0;
  if ((v2 & 0x1000000000000) == 0)
    goto LABEL_272;
LABEL_188:
  v120 = *((float *)this + 51);
  v121 = LODWORD(v120);
  if (v120 == 0.0)
    v121 = 0;
  if ((v2 & 0x800000000000000) != 0)
  {
LABEL_191:
    v122 = *((int *)this + 62);
    if ((*((_WORD *)this + 144) & 0x400) != 0)
      goto LABEL_192;
    goto LABEL_274;
  }
LABEL_273:
  v122 = 0;
  if ((*((_WORD *)this + 144) & 0x400) != 0)
  {
LABEL_192:
    v123 = *((unsigned __int8 *)this + 278);
    if ((v2 & 0x4000000000000000) != 0)
      goto LABEL_193;
LABEL_275:
    v125 = 0;
    if (v2 < 0)
      goto LABEL_196;
    goto LABEL_276;
  }
LABEL_274:
  v123 = 0;
  if ((v2 & 0x4000000000000000) == 0)
    goto LABEL_275;
LABEL_193:
  v124 = *((float *)this + 65);
  v125 = LODWORD(v124);
  if (v124 == 0.0)
    v125 = 0;
  if (v2 < 0)
  {
LABEL_196:
    v126 = *((float *)this + 66);
    v127 = LODWORD(v126);
    if (v126 == 0.0)
      v127 = 0;
    if ((v2 & 0x2000000000000000) != 0)
      goto LABEL_199;
LABEL_277:
    v129 = 0;
    return v179 ^ v3 ^ v178 ^ v177 ^ v176 ^ v175 ^ v174 ^ v173 ^ v172 ^ v171 ^ v170 ^ v169 ^ v168 ^ v167 ^ v166 ^ v165 ^ v164 ^ v163 ^ v162 ^ v161 ^ v160 ^ v159 ^ v158 ^ v157 ^ v156 ^ v155 ^ v154 ^ v153 ^ v152 ^ v151 ^ v150 ^ v149 ^ v148 ^ v147 ^ v146 ^ v145 ^ v144 ^ v143 ^ v142 ^ v141 ^ v140 ^ v139 ^ v138 ^ v137 ^ v136 ^ v135 ^ v134 ^ v133 ^ v132 ^ v131 ^ v83 ^ v85 ^ v87 ^ v89 ^ v91 ^ v92 ^ v94 ^ v96 ^ v97 ^ v99 ^ v101 ^ v103 ^ v105 ^ v107 ^ v109 ^ v111 ^ v113 ^ v115 ^ v117 ^ v119 ^ v121 ^ v122 ^ v123 ^ v125 ^ v127 ^ v129;
  }
LABEL_276:
  v127 = 0;
  if ((v2 & 0x2000000000000000) == 0)
    goto LABEL_277;
LABEL_199:
  v128 = *((float *)this + 64);
  v129 = LODWORD(v128);
  if (v128 == 0.0)
    v129 = 0;
  return v179 ^ v3 ^ v178 ^ v177 ^ v176 ^ v175 ^ v174 ^ v173 ^ v172 ^ v171 ^ v170 ^ v169 ^ v168 ^ v167 ^ v166 ^ v165 ^ v164 ^ v163 ^ v162 ^ v161 ^ v160 ^ v159 ^ v158 ^ v157 ^ v156 ^ v155 ^ v154 ^ v153 ^ v152 ^ v151 ^ v150 ^ v149 ^ v148 ^ v147 ^ v146 ^ v145 ^ v144 ^ v143 ^ v142 ^ v141 ^ v140 ^ v139 ^ v138 ^ v137 ^ v136 ^ v135 ^ v134 ^ v133 ^ v132 ^ v131 ^ v83 ^ v85 ^ v87 ^ v89 ^ v91 ^ v92 ^ v94 ^ v96 ^ v97 ^ v99 ^ v101 ^ v103 ^ v105 ^ v107 ^ v109 ^ v111 ^ v113 ^ v115 ^ v117 ^ v119 ^ v121 ^ v122 ^ v123 ^ v125 ^ v127 ^ v129;
}

void CMMsl::KappaDirectionOfTravel::~KappaDirectionOfTravel(CMMsl::KappaDirectionOfTravel *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_100351FA0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::KappaDirectionOfTravel::~KappaDirectionOfTravel(this);
  operator delete();
}

CMMsl::KappaDirectionOfTravel *CMMsl::KappaDirectionOfTravel::KappaDirectionOfTravel(CMMsl::KappaDirectionOfTravel *this, const CMMsl::KappaDirectionOfTravel *a2)
{
  char *v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)this = off_100351FA0;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *((_DWORD *)this + 36) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  v5 = *((_DWORD *)a2 + 36);
  if ((v5 & 8) != 0)
  {
    v7 = *((_QWORD *)a2 + 10);
    v6 = 8;
    *((_DWORD *)this + 36) = 8;
    *((_QWORD *)this + 10) = v7;
    v5 = *((_DWORD *)a2 + 36);
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((v5 & 0x20) != 0)
  {
LABEL_5:
    v8 = *((_DWORD *)a2 + 23);
    v6 |= 0x20u;
    *((_DWORD *)this + 36) = v6;
    *((_DWORD *)this + 23) = v8;
    v5 = *((_DWORD *)a2 + 36);
  }
LABEL_6:
  if ((v5 & 0x40) != 0)
  {
    v11 = *((_DWORD *)a2 + 24);
    v6 |= 0x40u;
    *((_DWORD *)this + 36) = v6;
    *((_DWORD *)this + 24) = v11;
    v5 = *((_DWORD *)a2 + 36);
    if ((v5 & 0x80) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_28;
    }
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  v12 = *((_DWORD *)a2 + 25);
  v6 |= 0x80u;
  *((_DWORD *)this + 36) = v6;
  *((_DWORD *)this + 25) = v12;
  v5 = *((_DWORD *)a2 + 36);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  v13 = *((_DWORD *)a2 + 22);
  v6 |= 0x10u;
  *((_DWORD *)this + 36) = v6;
  *((_DWORD *)this + 22) = v13;
  v5 = *((_DWORD *)a2 + 36);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  v14 = *((_DWORD *)a2 + 28);
  v6 |= 0x400u;
  *((_DWORD *)this + 36) = v6;
  *((_DWORD *)this + 28) = v14;
  v5 = *((_DWORD *)a2 + 36);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  v15 = *((_DWORD *)a2 + 29);
  v6 |= 0x800u;
  *((_DWORD *)this + 36) = v6;
  *((_DWORD *)this + 29) = v15;
  v5 = *((_DWORD *)a2 + 36);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  v16 = *((_DWORD *)a2 + 30);
  v6 |= 0x1000u;
  *((_DWORD *)this + 36) = v6;
  *((_DWORD *)this + 30) = v16;
  v5 = *((_DWORD *)a2 + 36);
  if ((v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  v17 = *((_DWORD *)a2 + 27);
  v6 |= 0x200u;
  *((_DWORD *)this + 36) = v6;
  *((_DWORD *)this + 27) = v17;
  v5 = *((_DWORD *)a2 + 36);
  if ((v5 & 0x100) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  v18 = *((_DWORD *)a2 + 26);
  v6 |= 0x100u;
  *((_DWORD *)this + 36) = v6;
  *((_DWORD *)this + 26) = v18;
  v5 = *((_DWORD *)a2 + 36);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  v19 = *((_DWORD *)a2 + 32);
  v6 |= 0x4000u;
  *((_DWORD *)this + 36) = v6;
  *((_DWORD *)this + 32) = v19;
  v5 = *((_DWORD *)a2 + 36);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  v20 = *((_DWORD *)a2 + 33);
  v6 |= 0x8000u;
  *((_DWORD *)this + 36) = v6;
  *((_DWORD *)this + 33) = v20;
  v5 = *((_DWORD *)a2 + 36);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_37;
  }
LABEL_36:
  v21 = *((_DWORD *)a2 + 34);
  v6 |= 0x10000u;
  *((_DWORD *)this + 36) = v6;
  *((_DWORD *)this + 34) = v21;
  v5 = *((_DWORD *)a2 + 36);
  if ((v5 & 0x2000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_38;
  }
LABEL_37:
  v22 = *((_DWORD *)a2 + 31);
  v6 |= 0x2000u;
  *((_DWORD *)this + 36) = v6;
  *((_DWORD *)this + 31) = v22;
  v5 = *((_DWORD *)a2 + 36);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 4) == 0)
      goto LABEL_20;
    goto LABEL_39;
  }
LABEL_38:
  v6 |= 0x20000u;
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)this + 36) = v6;
  v5 = *((_DWORD *)a2 + 36);
  if ((v5 & 4) == 0)
  {
LABEL_20:
    if ((v5 & 1) == 0)
      goto LABEL_21;
    goto LABEL_40;
  }
LABEL_39:
  v23 = *((_QWORD *)a2 + 9);
  v6 |= 4u;
  *((_DWORD *)this + 36) = v6;
  *((_QWORD *)this + 9) = v23;
  v5 = *((_DWORD *)a2 + 36);
  if ((v5 & 1) == 0)
  {
LABEL_21:
    if ((v5 & 2) == 0)
      goto LABEL_23;
    goto LABEL_22;
  }
LABEL_40:
  v24 = *((_QWORD *)a2 + 7);
  v6 |= 1u;
  *((_DWORD *)this + 36) = v6;
  *((_QWORD *)this + 7) = v24;
  if ((*((_DWORD *)a2 + 36) & 2) != 0)
  {
LABEL_22:
    v9 = *((_QWORD *)a2 + 8);
    *((_DWORD *)this + 36) = v6 | 2;
    *((_QWORD *)this + 8) = v9;
  }
LABEL_23:
  if (this != a2)
  {
    sub_100020CE4((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
    sub_100020CE4(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  }
  return this;
}

CMMsl *CMMsl::KappaDirectionOfTravel::operator=(CMMsl *a1, const CMMsl::KappaDirectionOfTravel *a2)
{
  CMMsl::KappaDirectionOfTravel *v3;
  _BYTE v5[152];

  if (a1 != a2)
  {
    CMMsl::KappaDirectionOfTravel::KappaDirectionOfTravel((CMMsl::KappaDirectionOfTravel *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaDirectionOfTravel *)v5, v3);
    CMMsl::KappaDirectionOfTravel::~KappaDirectionOfTravel((CMMsl::KappaDirectionOfTravel *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaDirectionOfTravel *a2, CMMsl::KappaDirectionOfTravel *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  float result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v3;
  v4 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LODWORD(v4) = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v4;
  v5 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v5;
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  v7 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  v9 = *((_QWORD *)this + 6);
  v8 = *((_QWORD *)this + 7);
  v10 = *((_QWORD *)a2 + 7);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)this + 7) = v10;
  *((_QWORD *)a2 + 7) = v8;
  v11 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  v12 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v12;
  v13 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v13;
  v14 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v14;
  v15 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v15;
  v16 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v16;
  v17 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v17;
  v18 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v18;
  v19 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v19;
  v20 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v20;
  v21 = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v21;
  v22 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v22;
  result = *((float *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((float *)a2 + 31) = result;
  *((_QWORD *)a2 + 8) = v11;
  *((_QWORD *)a2 + 6) = v9;
  v24 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v24;
  v25 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v25;
  v26 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v26;
  return result;
}

uint64_t CMMsl::KappaDirectionOfTravel::KappaDirectionOfTravel(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_100351FA0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  sub_100239458(a1 + 32, (__n128 *)(a2 + 32));
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  return a1;
}

CMMsl *CMMsl::KappaDirectionOfTravel::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::KappaDirectionOfTravel *v3;
  _BYTE v5[152];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaDirectionOfTravel::KappaDirectionOfTravel((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaDirectionOfTravel *)v5, v3);
    CMMsl::KappaDirectionOfTravel::~KappaDirectionOfTravel((CMMsl::KappaDirectionOfTravel *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaDirectionOfTravel::formatText(CMMsl::KappaDirectionOfTravel *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;
  float *v6;
  float *v7;
  float v8;
  int v9;
  float *v10;
  float *v11;
  float v12;
  int v13;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 36);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "combinedUnc", *((float *)this + 22));
    v5 = *((_DWORD *)this + 36);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_29;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "combinedX", *((float *)this + 23));
  v5 = *((_DWORD *)this + 36);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "combinedY", *((float *)this + 24));
  if ((*((_DWORD *)this + 36) & 0x80) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "combinedZ", *((float *)this + 25));
LABEL_6:
  v6 = (float *)*((_QWORD *)this + 1);
  v7 = (float *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "inerAccelApproachMx", v8);
  }
  v9 = *((_DWORD *)this + 36);
  if ((v9 & 0x100) != 0)
  {
    PB::TextFormatter::format(a2, "inerAccelCount", *((_DWORD *)this + 26));
    v9 = *((_DWORD *)this + 36);
    if ((v9 & 0x200) == 0)
    {
LABEL_10:
      if ((v9 & 0x400) == 0)
        goto LABEL_11;
      goto LABEL_33;
    }
  }
  else if ((v9 & 0x200) == 0)
  {
    goto LABEL_10;
  }
  PB::TextFormatter::format(a2, "inertialApproachUnc", *((float *)this + 27));
  v9 = *((_DWORD *)this + 36);
  if ((v9 & 0x400) == 0)
  {
LABEL_11:
    if ((v9 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "inertialApproachX", *((float *)this + 28));
  v9 = *((_DWORD *)this + 36);
  if ((v9 & 0x800) == 0)
  {
LABEL_12:
    if ((v9 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "inertialApproachY", *((float *)this + 29));
  v9 = *((_DWORD *)this + 36);
  if ((v9 & 0x1000) == 0)
  {
LABEL_13:
    if ((v9 & 1) == 0)
      goto LABEL_14;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "inertialApproachZ", *((float *)this + 30));
  v9 = *((_DWORD *)this + 36);
  if ((v9 & 1) == 0)
  {
LABEL_14:
    if ((v9 & 2) == 0)
      goto LABEL_15;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "previousTimeAccel", *((_QWORD *)this + 7));
  v9 = *((_DWORD *)this + 36);
  if ((v9 & 2) == 0)
  {
LABEL_15:
    if ((v9 & 4) == 0)
      goto LABEL_17;
    goto LABEL_16;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "previousTimeSag", *((_QWORD *)this + 8));
  if ((*((_DWORD *)this + 36) & 4) != 0)
LABEL_16:
    PB::TextFormatter::format(a2, "previousTimestamp", *((_QWORD *)this + 9));
LABEL_17:
  v10 = (float *)*((_QWORD *)this + 4);
  v11 = (float *)*((_QWORD *)this + 5);
  while (v10 != v11)
  {
    v12 = *v10++;
    PB::TextFormatter::format(a2, "sagittalApproachMx", v12);
  }
  v13 = *((_DWORD *)this + 36);
  if ((v13 & 0x2000) != 0)
  {
    PB::TextFormatter::format(a2, "sagittalApproachUnc", *((float *)this + 31));
    v13 = *((_DWORD *)this + 36);
    if ((v13 & 0x4000) == 0)
    {
LABEL_21:
      if ((v13 & 0x8000) == 0)
        goto LABEL_22;
      goto LABEL_41;
    }
  }
  else if ((v13 & 0x4000) == 0)
  {
    goto LABEL_21;
  }
  PB::TextFormatter::format(a2, "sagittalApproachX", *((float *)this + 32));
  v13 = *((_DWORD *)this + 36);
  if ((v13 & 0x8000) == 0)
  {
LABEL_22:
    if ((v13 & 0x10000) == 0)
      goto LABEL_23;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "sagittalApproachY", *((float *)this + 33));
  v13 = *((_DWORD *)this + 36);
  if ((v13 & 0x10000) == 0)
  {
LABEL_23:
    if ((v13 & 0x20000) == 0)
      goto LABEL_24;
LABEL_43:
    PB::TextFormatter::format(a2, "sagittalCount", *((_DWORD *)this + 35));
    if ((*((_DWORD *)this + 36) & 8) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_25;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "sagittalApproachZ", *((float *)this + 34));
  v13 = *((_DWORD *)this + 36);
  if ((v13 & 0x20000) != 0)
    goto LABEL_43;
LABEL_24:
  if ((v13 & 8) != 0)
LABEL_25:
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 10));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::KappaDirectionOfTravel::readFrom(CMMsl::KappaDirectionOfTravel *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  char *v9;
  void **v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  _DWORD *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  int v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  _DWORD *v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  int v111;
  unint64_t v112;
  char v113;
  unsigned int v114;
  unint64_t v115;
  char v116;
  char v117;
  unsigned int v118;
  unint64_t v119;
  char v120;
  char v121;
  unsigned int v122;
  unint64_t v123;
  char v124;
  char v125;
  unsigned int v126;
  unint64_t v127;
  char v128;
  char v129;
  unsigned int v130;
  unint64_t v131;
  char v132;
  char v133;
  unsigned int v134;
  unint64_t v135;
  char v136;
  unint64_t v137;
  char *v138;
  _DWORD *v139;
  unint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  char *v153;
  char *v154;
  int v155;
  char *v156;
  int v157;
  unint64_t v158;
  _BYTE v161[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 8);
    v9 = (char *)this + 24;
    v10 = (void **)((char *)this + 32);
    v11 = (char *)this + 48;
    while (1)
    {
      v12 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *((_DWORD *)this + 36) |= 8u;
          v25 = *((_QWORD *)a2 + 1);
          v26 = *((_QWORD *)a2 + 2);
          v27 = *(_QWORD *)a2;
          if (v25 <= 0xFFFFFFFFFFFFFFF5 && v25 + 10 <= v26)
          {
            v28 = 0;
            v29 = 0;
            v30 = 0;
            do
            {
              v31 = v25 + 1;
              *((_QWORD *)a2 + 1) = v25 + 1;
              v32 = *(_BYTE *)(v27 + v25);
              v30 |= (unint64_t)(v32 & 0x7F) << v28;
              if ((v32 & 0x80) == 0)
                goto LABEL_223;
              v28 += 7;
              v25 = v31;
              v18 = v29++ > 8;
            }
            while (!v18);
LABEL_157:
            v30 = 0;
            goto LABEL_223;
          }
          v113 = 0;
          v114 = 0;
          v30 = 0;
          if (v26 <= v25)
            v26 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v26 == v25)
            {
              v30 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v115 = v25 + 1;
              v116 = *(_BYTE *)(v27 + v25);
              *((_QWORD *)a2 + 1) = v115;
              v30 |= (unint64_t)(v116 & 0x7F) << v113;
              if (v116 < 0)
              {
                v113 += 7;
                v25 = v115;
                v18 = v114++ > 8;
                if (v18)
                  goto LABEL_157;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v30 = 0;
            }
            break;
          }
LABEL_223:
          *((_QWORD *)this + 10) = v30;
          goto LABEL_258;
        case 2u:
          *((_DWORD *)this + 36) |= 0x20u;
          v33 = *((_QWORD *)a2 + 1);
          if (v33 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_255;
          *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v33);
          goto LABEL_257;
        case 3u:
          *((_DWORD *)this + 36) |= 0x40u;
          v34 = *((_QWORD *)a2 + 1);
          if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_255;
          *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v34);
          goto LABEL_257;
        case 4u:
          *((_DWORD *)this + 36) |= 0x80u;
          v35 = *((_QWORD *)a2 + 1);
          if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_255;
          *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v35);
          goto LABEL_257;
        case 5u:
          *((_DWORD *)this + 36) |= 0x10u;
          v36 = *((_QWORD *)a2 + 1);
          if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_255;
          *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v36);
          goto LABEL_257;
        case 6u:
          *((_DWORD *)this + 36) |= 0x400u;
          v37 = *((_QWORD *)a2 + 1);
          if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_255;
          *((_DWORD *)this + 28) = *(_DWORD *)(*(_QWORD *)a2 + v37);
          goto LABEL_257;
        case 7u:
          *((_DWORD *)this + 36) |= 0x800u;
          v38 = *((_QWORD *)a2 + 1);
          if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_255;
          *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v38);
          goto LABEL_257;
        case 8u:
          *((_DWORD *)this + 36) |= 0x1000u;
          v39 = *((_QWORD *)a2 + 1);
          if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_255;
          *((_DWORD *)this + 30) = *(_DWORD *)(*(_QWORD *)a2 + v39);
          goto LABEL_257;
        case 9u:
          *((_DWORD *)this + 36) |= 0x200u;
          v40 = *((_QWORD *)a2 + 1);
          if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_255;
          *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v40);
          goto LABEL_257;
        case 0xAu:
          *((_DWORD *)this + 36) |= 0x100u;
          v41 = *((_QWORD *)a2 + 1);
          v42 = *((_QWORD *)a2 + 2);
          v43 = *(_QWORD *)a2;
          if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
          {
            v44 = 0;
            v45 = 0;
            v46 = 0;
            do
            {
              v47 = v41 + 1;
              *((_QWORD *)a2 + 1) = v41 + 1;
              v48 = *(_BYTE *)(v43 + v41);
              v46 |= (unint64_t)(v48 & 0x7F) << v44;
              if ((v48 & 0x80) == 0)
                goto LABEL_226;
              v44 += 7;
              v41 = v47;
              v18 = v45++ > 8;
            }
            while (!v18);
LABEL_164:
            LODWORD(v46) = 0;
            goto LABEL_226;
          }
          v117 = 0;
          v118 = 0;
          v46 = 0;
          if (v42 <= v41)
            v42 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v42 == v41)
            {
              LODWORD(v46) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v119 = v41 + 1;
              v120 = *(_BYTE *)(v43 + v41);
              *((_QWORD *)a2 + 1) = v119;
              v46 |= (unint64_t)(v120 & 0x7F) << v117;
              if (v120 < 0)
              {
                v117 += 7;
                v41 = v119;
                v18 = v118++ > 8;
                if (v18)
                  goto LABEL_164;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v46) = 0;
            }
            break;
          }
LABEL_226:
          *((_DWORD *)this + 26) = v46;
          goto LABEL_258;
        case 0xBu:
          *((_DWORD *)this + 36) |= 0x4000u;
          v49 = *((_QWORD *)a2 + 1);
          if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_255;
          *((_DWORD *)this + 32) = *(_DWORD *)(*(_QWORD *)a2 + v49);
          goto LABEL_257;
        case 0xCu:
          *((_DWORD *)this + 36) |= 0x8000u;
          v50 = *((_QWORD *)a2 + 1);
          if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_255;
          *((_DWORD *)this + 33) = *(_DWORD *)(*(_QWORD *)a2 + v50);
          goto LABEL_257;
        case 0xDu:
          *((_DWORD *)this + 36) |= 0x10000u;
          v51 = *((_QWORD *)a2 + 1);
          if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_255;
          *((_DWORD *)this + 34) = *(_DWORD *)(*(_QWORD *)a2 + v51);
          goto LABEL_257;
        case 0xEu:
          *((_DWORD *)this + 36) |= 0x2000u;
          v52 = *((_QWORD *)a2 + 1);
          if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_255;
          *((_DWORD *)this + 31) = *(_DWORD *)(*(_QWORD *)a2 + v52);
          goto LABEL_257;
        case 0xFu:
          *((_DWORD *)this + 36) |= 0x20000u;
          v53 = *((_QWORD *)a2 + 1);
          v54 = *((_QWORD *)a2 + 2);
          v55 = *(_QWORD *)a2;
          if (v53 <= 0xFFFFFFFFFFFFFFF5 && v53 + 10 <= v54)
          {
            v56 = 0;
            v57 = 0;
            v58 = 0;
            do
            {
              v59 = v53 + 1;
              *((_QWORD *)a2 + 1) = v53 + 1;
              v60 = *(_BYTE *)(v55 + v53);
              v58 |= (unint64_t)(v60 & 0x7F) << v56;
              if ((v60 & 0x80) == 0)
                goto LABEL_229;
              v56 += 7;
              v53 = v59;
              v18 = v57++ > 8;
            }
            while (!v18);
LABEL_171:
            LODWORD(v58) = 0;
            goto LABEL_229;
          }
          v121 = 0;
          v122 = 0;
          v58 = 0;
          if (v54 <= v53)
            v54 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v54 == v53)
            {
              LODWORD(v58) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v123 = v53 + 1;
              v124 = *(_BYTE *)(v55 + v53);
              *((_QWORD *)a2 + 1) = v123;
              v58 |= (unint64_t)(v124 & 0x7F) << v121;
              if (v124 < 0)
              {
                v121 += 7;
                v53 = v123;
                v18 = v122++ > 8;
                if (v18)
                  goto LABEL_171;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v58) = 0;
            }
            break;
          }
LABEL_229:
          *((_DWORD *)this + 35) = v58;
          goto LABEL_258;
        case 0x10u:
          *((_DWORD *)this + 36) |= 4u;
          v61 = *((_QWORD *)a2 + 1);
          v62 = *((_QWORD *)a2 + 2);
          v63 = *(_QWORD *)a2;
          if (v61 <= 0xFFFFFFFFFFFFFFF5 && v61 + 10 <= v62)
          {
            v64 = 0;
            v65 = 0;
            v66 = 0;
            do
            {
              v67 = v61 + 1;
              *((_QWORD *)a2 + 1) = v61 + 1;
              v68 = *(_BYTE *)(v63 + v61);
              v66 |= (unint64_t)(v68 & 0x7F) << v64;
              if ((v68 & 0x80) == 0)
                goto LABEL_232;
              v64 += 7;
              v61 = v67;
              v18 = v65++ > 8;
            }
            while (!v18);
LABEL_178:
            v66 = 0;
            goto LABEL_232;
          }
          v125 = 0;
          v126 = 0;
          v66 = 0;
          if (v62 <= v61)
            v62 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v62 == v61)
            {
              v66 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v127 = v61 + 1;
              v128 = *(_BYTE *)(v63 + v61);
              *((_QWORD *)a2 + 1) = v127;
              v66 |= (unint64_t)(v128 & 0x7F) << v125;
              if (v128 < 0)
              {
                v125 += 7;
                v61 = v127;
                v18 = v126++ > 8;
                if (v18)
                  goto LABEL_178;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v66 = 0;
            }
            break;
          }
LABEL_232:
          *((_QWORD *)this + 9) = v66;
          goto LABEL_258;
        case 0x11u:
          *((_DWORD *)this + 36) |= 1u;
          v69 = *((_QWORD *)a2 + 1);
          v70 = *((_QWORD *)a2 + 2);
          v71 = *(_QWORD *)a2;
          if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
          {
            v72 = 0;
            v73 = 0;
            v74 = 0;
            do
            {
              v75 = v69 + 1;
              *((_QWORD *)a2 + 1) = v69 + 1;
              v76 = *(_BYTE *)(v71 + v69);
              v74 |= (unint64_t)(v76 & 0x7F) << v72;
              if ((v76 & 0x80) == 0)
                goto LABEL_235;
              v72 += 7;
              v69 = v75;
              v18 = v73++ > 8;
            }
            while (!v18);
LABEL_185:
            v74 = 0;
            goto LABEL_235;
          }
          v129 = 0;
          v130 = 0;
          v74 = 0;
          if (v70 <= v69)
            v70 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v70 == v69)
            {
              v74 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v131 = v69 + 1;
              v132 = *(_BYTE *)(v71 + v69);
              *((_QWORD *)a2 + 1) = v131;
              v74 |= (unint64_t)(v132 & 0x7F) << v129;
              if (v132 < 0)
              {
                v129 += 7;
                v69 = v131;
                v18 = v130++ > 8;
                if (v18)
                  goto LABEL_185;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v74 = 0;
            }
            break;
          }
LABEL_235:
          *((_QWORD *)this + 7) = v74;
          goto LABEL_258;
        case 0x12u:
          *((_DWORD *)this + 36) |= 2u;
          v77 = *((_QWORD *)a2 + 1);
          v78 = *((_QWORD *)a2 + 2);
          v79 = *(_QWORD *)a2;
          if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
          {
            v80 = 0;
            v81 = 0;
            v82 = 0;
            do
            {
              v83 = v77 + 1;
              *((_QWORD *)a2 + 1) = v77 + 1;
              v84 = *(_BYTE *)(v79 + v77);
              v82 |= (unint64_t)(v84 & 0x7F) << v80;
              if ((v84 & 0x80) == 0)
                goto LABEL_238;
              v80 += 7;
              v77 = v83;
              v18 = v81++ > 8;
            }
            while (!v18);
LABEL_192:
            v82 = 0;
            goto LABEL_238;
          }
          v133 = 0;
          v134 = 0;
          v82 = 0;
          if (v78 <= v77)
            v78 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v78 == v77)
            {
              v82 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v135 = v77 + 1;
              v136 = *(_BYTE *)(v79 + v77);
              *((_QWORD *)a2 + 1) = v135;
              v82 |= (unint64_t)(v136 & 0x7F) << v133;
              if (v136 < 0)
              {
                v133 += 7;
                v77 = v135;
                v18 = v134++ > 8;
                if (v18)
                  goto LABEL_192;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v82 = 0;
            }
            break;
          }
LABEL_238:
          *((_QWORD *)this + 8) = v82;
          goto LABEL_258;
        case 0x13u:
          if (v24 != 2)
          {
            v138 = (char *)*((_QWORD *)this + 5);
            v137 = *((_QWORD *)this + 6);
            if ((unint64_t)v138 >= v137)
            {
              v142 = (char *)*v10;
              v143 = (v138 - (_BYTE *)*v10) >> 2;
              v144 = v143 + 1;
              if ((unint64_t)(v143 + 1) >> 62)
LABEL_268:
                sub_10000D5F8();
              v145 = v137 - (_QWORD)v142;
              if (v145 >> 1 > v144)
                v144 = v145 >> 1;
              if ((unint64_t)v145 >= 0x7FFFFFFFFFFFFFFCLL)
                v146 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v146 = v144;
              if (v146)
              {
                v147 = (char *)sub_100020E2C((uint64_t)v11, v146);
                v142 = (char *)*((_QWORD *)this + 4);
                v138 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v147 = 0;
              }
              v154 = &v147[4 * v143];
              *(_DWORD *)v154 = 0;
              v139 = v154 + 4;
              while (v138 != v142)
              {
                v155 = *((_DWORD *)v138 - 1);
                v138 -= 4;
                *((_DWORD *)v154 - 1) = v155;
                v154 -= 4;
              }
              *((_QWORD *)this + 4) = v154;
              *((_QWORD *)this + 5) = v139;
              *((_QWORD *)this + 6) = &v147[4 * v146];
              if (v142)
                operator delete(v142);
            }
            else
            {
              *(_DWORD *)v138 = 0;
              v139 = v138 + 4;
            }
            *((_QWORD *)this + 5) = v139;
            goto LABEL_253;
          }
          if ((PB::Reader::placeMark(a2, v161) & 1) != 0)
            return 0;
          v85 = *((_QWORD *)a2 + 1);
          v86 = *((_QWORD *)a2 + 2);
          while (v85 < v86 && !*((_BYTE *)a2 + 24))
          {
            v88 = (char *)*((_QWORD *)this + 5);
            v87 = *((_QWORD *)this + 6);
            if ((unint64_t)v88 >= v87)
            {
              v90 = (char *)*v10;
              v91 = (v88 - (_BYTE *)*v10) >> 2;
              v92 = v91 + 1;
              if ((unint64_t)(v91 + 1) >> 62)
                goto LABEL_268;
              v93 = v87 - (_QWORD)v90;
              if (v93 >> 1 > v92)
                v92 = v93 >> 1;
              if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL)
                v94 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v94 = v92;
              if (v94)
              {
                v95 = (char *)sub_100020E2C((uint64_t)v11, v94);
                v90 = (char *)*((_QWORD *)this + 4);
                v88 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v95 = 0;
              }
              v96 = &v95[4 * v91];
              *(_DWORD *)v96 = 0;
              v89 = v96 + 4;
              while (v88 != v90)
              {
                v97 = *((_DWORD *)v88 - 1);
                v88 -= 4;
                *((_DWORD *)v96 - 1) = v97;
                v96 -= 4;
              }
              *((_QWORD *)this + 4) = v96;
              *((_QWORD *)this + 5) = v89;
              *((_QWORD *)this + 6) = &v95[4 * v94];
              if (v90)
                operator delete(v90);
            }
            else
            {
              *(_DWORD *)v88 = 0;
              v89 = v88 + 4;
            }
            *((_QWORD *)this + 5) = v89;
            v98 = *((_QWORD *)a2 + 1);
            if (v98 > 0xFFFFFFFFFFFFFFFBLL || v98 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_197;
            *(v89 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v98);
            v86 = *((_QWORD *)a2 + 2);
            v85 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v85;
          }
          goto LABEL_198;
        case 0x14u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark(a2, v161) & 1) != 0)
              return 0;
            v99 = *((_QWORD *)a2 + 1);
            v100 = *((_QWORD *)a2 + 2);
            while (v99 < v100 && !*((_BYTE *)a2 + 24))
            {
              v102 = (char *)*((_QWORD *)this + 2);
              v101 = *((_QWORD *)this + 3);
              if ((unint64_t)v102 >= v101)
              {
                v104 = (char *)*v8;
                v105 = (v102 - (_BYTE *)*v8) >> 2;
                v106 = v105 + 1;
                if ((unint64_t)(v105 + 1) >> 62)
                  goto LABEL_269;
                v107 = v101 - (_QWORD)v104;
                if (v107 >> 1 > v106)
                  v106 = v107 >> 1;
                if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFFCLL)
                  v108 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v108 = v106;
                if (v108)
                {
                  v109 = (char *)sub_100020E2C((uint64_t)v9, v108);
                  v104 = (char *)*((_QWORD *)this + 1);
                  v102 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v109 = 0;
                }
                v110 = &v109[4 * v105];
                *(_DWORD *)v110 = 0;
                v103 = v110 + 4;
                while (v102 != v104)
                {
                  v111 = *((_DWORD *)v102 - 1);
                  v102 -= 4;
                  *((_DWORD *)v110 - 1) = v111;
                  v110 -= 4;
                }
                *((_QWORD *)this + 1) = v110;
                *((_QWORD *)this + 2) = v103;
                *((_QWORD *)this + 3) = &v109[4 * v108];
                if (v104)
                  operator delete(v104);
              }
              else
              {
                *(_DWORD *)v102 = 0;
                v103 = v102 + 4;
              }
              *((_QWORD *)this + 2) = v103;
              v112 = *((_QWORD *)a2 + 1);
              if (v112 > 0xFFFFFFFFFFFFFFFBLL || v112 + 4 > *((_QWORD *)a2 + 2))
              {
LABEL_197:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v103 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v112);
              v100 = *((_QWORD *)a2 + 2);
              v99 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v99;
            }
LABEL_198:
            PB::Reader::recallMark(a2, v161);
          }
          else
          {
            v141 = (char *)*((_QWORD *)this + 2);
            v140 = *((_QWORD *)this + 3);
            if ((unint64_t)v141 >= v140)
            {
              v148 = (char *)*v8;
              v149 = (v141 - (_BYTE *)*v8) >> 2;
              v150 = v149 + 1;
              if ((unint64_t)(v149 + 1) >> 62)
LABEL_269:
                sub_10000D5F8();
              v151 = v140 - (_QWORD)v148;
              if (v151 >> 1 > v150)
                v150 = v151 >> 1;
              if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFFCLL)
                v152 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v152 = v150;
              if (v152)
              {
                v153 = (char *)sub_100020E2C((uint64_t)v9, v152);
                v148 = (char *)*((_QWORD *)this + 1);
                v141 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v153 = 0;
              }
              v156 = &v153[4 * v149];
              *(_DWORD *)v156 = 0;
              v139 = v156 + 4;
              while (v141 != v148)
              {
                v157 = *((_DWORD *)v141 - 1);
                v141 -= 4;
                *((_DWORD *)v156 - 1) = v157;
                v156 -= 4;
              }
              *((_QWORD *)this + 1) = v156;
              *((_QWORD *)this + 2) = v139;
              *((_QWORD *)this + 3) = &v153[4 * v152];
              if (v148)
                operator delete(v148);
            }
            else
            {
              *(_DWORD *)v141 = 0;
              v139 = v141 + 4;
            }
            *((_QWORD *)this + 2) = v139;
LABEL_253:
            v158 = *((_QWORD *)a2 + 1);
            if (v158 <= 0xFFFFFFFFFFFFFFFBLL && v158 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v139 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v158);
LABEL_257:
              *((_QWORD *)a2 + 1) += 4;
            }
            else
            {
LABEL_255:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_258:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v24, 0) & 1) == 0)
            return 0;
          goto LABEL_258;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaDirectionOfTravel::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;

  v3 = this;
  v4 = *(_DWORD *)(this + 144);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 80), 1u);
    v4 = *(_DWORD *)(v3 + 144);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_29;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 92), 2u);
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 3u);
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 4u);
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x400) == 0)
      goto LABEL_7;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 5u);
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x400) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0)
      goto LABEL_8;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 112), 6u);
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 116), 7u);
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 120), 8u);
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 108), 9u);
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x4000) == 0)
      goto LABEL_12;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 104), 0xAu);
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x4000) == 0)
  {
LABEL_12:
    if ((v4 & 0x8000) == 0)
      goto LABEL_13;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 128), 0xBu);
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x8000) == 0)
  {
LABEL_13:
    if ((v4 & 0x10000) == 0)
      goto LABEL_14;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 132), 0xCu);
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x10000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 136), 0xDu);
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x2000) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000) == 0)
      goto LABEL_16;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 124), 0xEu);
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x20000) == 0)
  {
LABEL_16:
    if ((v4 & 4) == 0)
      goto LABEL_17;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 140), 0xFu);
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 4) == 0)
  {
LABEL_17:
    if ((v4 & 1) == 0)
      goto LABEL_18;
LABEL_43:
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 56), 0x11u);
    if ((*(_DWORD *)(v3 + 144) & 2) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_42:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 72), 0x10u);
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 1) != 0)
    goto LABEL_43;
LABEL_18:
  if ((v4 & 2) != 0)
LABEL_19:
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 64), 0x12u);
LABEL_20:
  v5 = *(float **)(v3 + 32);
  v6 = *(float **)(v3 + 40);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7, 0x13u);
  }
  v9 = *(float **)(v3 + 8);
  v8 = *(float **)(v3 + 16);
  while (v9 != v8)
  {
    v10 = *v9++;
    this = PB::Writer::write(a2, v10, 0x14u);
  }
  return this;
}

uint64_t CMMsl::KappaDirectionOfTravel::hash_value(CMMsl::KappaDirectionOfTravel *this)
{
  int v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v2 = *((_DWORD *)this + 36);
  if ((v2 & 8) == 0)
  {
    v3 = 0;
    if ((v2 & 0x20) != 0)
      goto LABEL_3;
LABEL_45:
    v5 = 0;
    if ((v2 & 0x40) != 0)
      goto LABEL_6;
LABEL_46:
    v7 = 0;
    if ((v2 & 0x80) != 0)
      goto LABEL_9;
LABEL_47:
    v9 = 0;
    if ((v2 & 0x10) != 0)
      goto LABEL_12;
LABEL_48:
    v11 = 0;
    if ((v2 & 0x400) != 0)
      goto LABEL_15;
LABEL_49:
    v13 = 0;
    if ((v2 & 0x800) != 0)
      goto LABEL_18;
LABEL_50:
    v15 = 0;
    if ((v2 & 0x1000) != 0)
      goto LABEL_21;
LABEL_51:
    v17 = 0;
    if ((v2 & 0x200) != 0)
      goto LABEL_24;
LABEL_52:
    v19 = 0;
    if ((v2 & 0x100) != 0)
      goto LABEL_27;
    goto LABEL_53;
  }
  v3 = *((_QWORD *)this + 10);
  if ((v2 & 0x20) == 0)
    goto LABEL_45;
LABEL_3:
  v4 = *((float *)this + 23);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((v2 & 0x40) == 0)
    goto LABEL_46;
LABEL_6:
  v6 = *((float *)this + 24);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((v2 & 0x80) == 0)
    goto LABEL_47;
LABEL_9:
  v8 = *((float *)this + 25);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  if ((v2 & 0x10) == 0)
    goto LABEL_48;
LABEL_12:
  v10 = *((float *)this + 22);
  v11 = LODWORD(v10);
  if (v10 == 0.0)
    v11 = 0;
  if ((v2 & 0x400) == 0)
    goto LABEL_49;
LABEL_15:
  v12 = *((float *)this + 28);
  v13 = LODWORD(v12);
  if (v12 == 0.0)
    v13 = 0;
  if ((v2 & 0x800) == 0)
    goto LABEL_50;
LABEL_18:
  v14 = *((float *)this + 29);
  v15 = LODWORD(v14);
  if (v14 == 0.0)
    v15 = 0;
  if ((v2 & 0x1000) == 0)
    goto LABEL_51;
LABEL_21:
  v16 = *((float *)this + 30);
  v17 = LODWORD(v16);
  if (v16 == 0.0)
    v17 = 0;
  if ((v2 & 0x200) == 0)
    goto LABEL_52;
LABEL_24:
  v18 = *((float *)this + 27);
  v19 = LODWORD(v18);
  if (v18 == 0.0)
    v19 = 0;
  if ((v2 & 0x100) != 0)
  {
LABEL_27:
    v20 = *((unsigned int *)this + 26);
    if ((v2 & 0x4000) != 0)
      goto LABEL_28;
LABEL_54:
    v22 = 0;
    if ((v2 & 0x8000) != 0)
      goto LABEL_31;
LABEL_55:
    v24 = 0;
    if ((v2 & 0x10000) != 0)
      goto LABEL_34;
LABEL_56:
    v26 = 0;
    if ((v2 & 0x2000) != 0)
      goto LABEL_37;
LABEL_57:
    v28 = 0;
    if ((v2 & 0x20000) != 0)
      goto LABEL_40;
    goto LABEL_58;
  }
LABEL_53:
  v20 = 0;
  if ((v2 & 0x4000) == 0)
    goto LABEL_54;
LABEL_28:
  v21 = *((float *)this + 32);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  if ((v2 & 0x8000) == 0)
    goto LABEL_55;
LABEL_31:
  v23 = *((float *)this + 33);
  v24 = LODWORD(v23);
  if (v23 == 0.0)
    v24 = 0;
  if ((v2 & 0x10000) == 0)
    goto LABEL_56;
LABEL_34:
  v25 = *((float *)this + 34);
  v26 = LODWORD(v25);
  if (v25 == 0.0)
    v26 = 0;
  if ((v2 & 0x2000) == 0)
    goto LABEL_57;
LABEL_37:
  v27 = *((float *)this + 31);
  v28 = LODWORD(v27);
  if (v27 == 0.0)
    v28 = 0;
  if ((v2 & 0x20000) != 0)
  {
LABEL_40:
    v29 = *((unsigned int *)this + 35);
    if ((v2 & 4) != 0)
      goto LABEL_41;
    goto LABEL_59;
  }
LABEL_58:
  v29 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_41:
    v30 = *((_QWORD *)this + 9);
    if ((v2 & 1) != 0)
      goto LABEL_42;
LABEL_60:
    v31 = 0;
    if ((v2 & 2) != 0)
      goto LABEL_43;
LABEL_61:
    v32 = 0;
    goto LABEL_62;
  }
LABEL_59:
  v30 = 0;
  if ((v2 & 1) == 0)
    goto LABEL_60;
LABEL_42:
  v31 = *((_QWORD *)this + 7);
  if ((v2 & 2) == 0)
    goto LABEL_61;
LABEL_43:
  v32 = *((_QWORD *)this + 8);
LABEL_62:
  v33 = v5 ^ v3 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15 ^ v17 ^ v19 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v29 ^ v30 ^ v31 ^ v32 ^ PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
  return v33 ^ PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
}

void CMMsl::KappaGpsResult::~KappaGpsResult(CMMsl::KappaGpsResult *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::KappaGpsResult::KappaGpsResult(uint64_t this, const CMMsl::KappaGpsResult *a2)
{
  int v2;
  int v3;
  char v4;
  char v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  char v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  char v31;
  char v32;

  *(_QWORD *)this = off_100351FD8;
  *(_DWORD *)(this + 132) = 0;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x4000000) != 0)
  {
    v4 = *((_BYTE *)a2 + 126);
    v3 = 0x4000000;
    *(_DWORD *)(this + 132) = 0x4000000;
    *(_BYTE *)(this + 126) = v4;
    v2 = *((_DWORD *)a2 + 33);
    if ((v2 & 0x8000000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x8000000) != 0)
  {
LABEL_5:
    v5 = *((_BYTE *)a2 + 127);
    v3 |= 0x8000000u;
    *(_DWORD *)(this + 132) = v3;
    *(_BYTE *)(this + 127) = v5;
    v2 = *((_DWORD *)a2 + 33);
  }
LABEL_6:
  if ((v2 & 0x80000) != 0)
  {
    v6 = *((_DWORD *)a2 + 26);
    v3 |= 0x80000u;
    *(_DWORD *)(this + 132) = v3;
    *(_DWORD *)(this + 104) = v6;
    v2 = *((_DWORD *)a2 + 33);
    if ((v2 & 0x800000) == 0)
    {
LABEL_8:
      if ((v2 & 0x100000) == 0)
        goto LABEL_9;
      goto LABEL_36;
    }
  }
  else if ((v2 & 0x800000) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 30);
  v3 |= 0x800000u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 120) = v7;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x100000) == 0)
  {
LABEL_9:
    if ((v2 & 0x20000) == 0)
      goto LABEL_10;
    goto LABEL_37;
  }
LABEL_36:
  v8 = *((_DWORD *)a2 + 27);
  v3 |= 0x100000u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 108) = v8;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x20000) == 0)
  {
LABEL_10:
    if ((v2 & 0x10000) == 0)
      goto LABEL_11;
    goto LABEL_38;
  }
LABEL_37:
  v9 = *((_DWORD *)a2 + 24);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 96) = v9;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x10000) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_39;
  }
LABEL_38:
  v10 = *((_DWORD *)a2 + 23);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 92) = v10;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_40;
  }
LABEL_39:
  v11 = *((_DWORD *)a2 + 15);
  v3 |= 0x100u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 60) = v11;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_41;
  }
LABEL_40:
  v12 = *((_DWORD *)a2 + 14);
  v3 |= 0x80u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 56) = v12;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x40) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_42;
  }
LABEL_41:
  v13 = *((_DWORD *)a2 + 13);
  v3 |= 0x40u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 52) = v13;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_43;
  }
LABEL_42:
  v14 = *((_DWORD *)a2 + 12);
  v3 |= 0x20u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 48) = v14;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x800) == 0)
  {
LABEL_16:
    if ((v2 & 0x4000) == 0)
      goto LABEL_17;
    goto LABEL_44;
  }
LABEL_43:
  v15 = *((_DWORD *)a2 + 18);
  v3 |= 0x800u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 72) = v15;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x4000) == 0)
  {
LABEL_17:
    if ((v2 & 0x200000) == 0)
      goto LABEL_18;
    goto LABEL_45;
  }
LABEL_44:
  v16 = *((_DWORD *)a2 + 21);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 84) = v16;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x200000) == 0)
  {
LABEL_18:
    if ((v2 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_46;
  }
LABEL_45:
  v17 = *((_DWORD *)a2 + 28);
  v3 |= 0x200000u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 112) = v17;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x40000) == 0)
  {
LABEL_19:
    if ((v2 & 8) == 0)
      goto LABEL_20;
    goto LABEL_47;
  }
LABEL_46:
  v18 = *((_DWORD *)a2 + 25);
  v3 |= 0x40000u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 100) = v18;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 8) == 0)
  {
LABEL_20:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_21;
    goto LABEL_48;
  }
LABEL_47:
  v19 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_DWORD *)(this + 132) = v3;
  *(_QWORD *)(this + 32) = v19;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_21:
    if ((v2 & 0x8000) == 0)
      goto LABEL_22;
    goto LABEL_49;
  }
LABEL_48:
  v20 = *((_BYTE *)a2 + 124);
  v3 |= 0x1000000u;
  *(_DWORD *)(this + 132) = v3;
  *(_BYTE *)(this + 124) = v20;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x8000) == 0)
  {
LABEL_22:
    if ((v2 & 0x10) == 0)
      goto LABEL_23;
    goto LABEL_50;
  }
LABEL_49:
  v21 = *((_DWORD *)a2 + 22);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 88) = v21;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x10) == 0)
  {
LABEL_23:
    if ((v2 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_51;
  }
LABEL_50:
  v22 = *((_QWORD *)a2 + 5);
  v3 |= 0x10u;
  *(_DWORD *)(this + 132) = v3;
  *(_QWORD *)(this + 40) = v22;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x400000) == 0)
  {
LABEL_24:
    if ((v2 & 4) == 0)
      goto LABEL_25;
    goto LABEL_52;
  }
LABEL_51:
  v23 = *((_DWORD *)a2 + 29);
  v3 |= 0x400000u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 116) = v23;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 4) == 0)
  {
LABEL_25:
    if ((v2 & 0x2000) == 0)
      goto LABEL_26;
    goto LABEL_53;
  }
LABEL_52:
  v24 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *(_DWORD *)(this + 132) = v3;
  *(_QWORD *)(this + 24) = v24;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x2000) == 0)
  {
LABEL_26:
    if ((v2 & 2) == 0)
      goto LABEL_27;
    goto LABEL_54;
  }
LABEL_53:
  v25 = *((_DWORD *)a2 + 20);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 80) = v25;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 2) == 0)
  {
LABEL_27:
    if ((v2 & 0x1000) == 0)
      goto LABEL_28;
    goto LABEL_55;
  }
LABEL_54:
  v26 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 132) = v3;
  *(_QWORD *)(this + 16) = v26;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x1000) == 0)
  {
LABEL_28:
    if ((v2 & 1) == 0)
      goto LABEL_29;
    goto LABEL_56;
  }
LABEL_55:
  v27 = *((_DWORD *)a2 + 19);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 76) = v27;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 1) == 0)
  {
LABEL_29:
    if ((v2 & 0x200) == 0)
      goto LABEL_30;
    goto LABEL_57;
  }
LABEL_56:
  v28 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 132) = v3;
  *(_QWORD *)(this + 8) = v28;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x200) == 0)
  {
LABEL_30:
    if ((v2 & 0x400) == 0)
      goto LABEL_31;
    goto LABEL_58;
  }
LABEL_57:
  v29 = *((_DWORD *)a2 + 16);
  v3 |= 0x200u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 64) = v29;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x400) == 0)
  {
LABEL_31:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_32;
    goto LABEL_59;
  }
LABEL_58:
  v30 = *((_DWORD *)a2 + 17);
  v3 |= 0x400u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 68) = v30;
  v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x2000000) == 0)
      return this;
LABEL_60:
    v32 = *((_BYTE *)a2 + 125);
    *(_DWORD *)(this + 132) = v3 | 0x2000000;
    *(_BYTE *)(this + 125) = v32;
    return this;
  }
LABEL_59:
  v31 = *((_BYTE *)a2 + 128);
  v3 |= 0x10000000u;
  *(_DWORD *)(this + 132) = v3;
  *(_BYTE *)(this + 128) = v31;
  if ((*((_DWORD *)a2 + 33) & 0x2000000) != 0)
    goto LABEL_60;
  return this;
}

CMMsl *CMMsl::KappaGpsResult::operator=(CMMsl *a1, const CMMsl::KappaGpsResult *a2)
{
  CMMsl::KappaGpsResult *v3;
  _BYTE v5[136];

  if (a1 != a2)
  {
    CMMsl::KappaGpsResult::KappaGpsResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaGpsResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaGpsResult *a2, CMMsl::KappaGpsResult *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  float result;

  v3 = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 126);
  *((_BYTE *)this + 126) = *((_BYTE *)a2 + 126);
  *((_BYTE *)a2 + 126) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 127);
  *((_BYTE *)this + 127) = *((_BYTE *)a2 + 127);
  *((_BYTE *)a2 + 127) = v3;
  v4 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  v5 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v5;
  v6 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v6;
  v7 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v7;
  v8 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v8;
  v9 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v9;
  v10 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v10;
  v11 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v11;
  v12 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v12;
  v13 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v13;
  v14 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v14;
  v15 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v15;
  v16 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v16;
  v17 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v17;
  LOBYTE(v17) = *((_BYTE *)this + 124);
  *((_BYTE *)this + 124) = *((_BYTE *)a2 + 124);
  *((_BYTE *)a2 + 124) = v17;
  LODWORD(v17) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v17;
  v18 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v18;
  v19 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v19;
  v20 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v20;
  v21 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v21;
  v22 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v22;
  v23 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v23;
  v24 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v24;
  v25 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v25;
  result = *((float *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((float *)a2 + 17) = result;
  LOBYTE(v24) = *((_BYTE *)this + 128);
  *((_BYTE *)this + 128) = *((_BYTE *)a2 + 128);
  *((_BYTE *)a2 + 128) = v24;
  LOBYTE(v24) = *((_BYTE *)this + 125);
  *((_BYTE *)this + 125) = *((_BYTE *)a2 + 125);
  *((_BYTE *)a2 + 125) = v24;
  return result;
}

float CMMsl::KappaGpsResult::KappaGpsResult(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100351FD8;
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a2 + 132) = 0;
  *(_BYTE *)(a1 + 126) = *(_BYTE *)(a2 + 126);
  *(_BYTE *)(a1 + 127) = *(_BYTE *)(a2 + 127);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  result = *(float *)(a2 + 68);
  *(float *)(a1 + 68) = result;
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_BYTE *)(a1 + 125) = *(_BYTE *)(a2 + 125);
  return result;
}

CMMsl *CMMsl::KappaGpsResult::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::KappaGpsResult *v3;
  _BYTE v5[136];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaGpsResult::KappaGpsResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaGpsResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaGpsResult::formatText(CMMsl::KappaGpsResult *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(a2, "configSuddenTransitionDurationThreshold", *((float *)this + 12));
    v5 = *((_DWORD *)this + 33);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_34;
    }
  }
  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "configTransitionEndSpeedThreshold", *((float *)this + 13));
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 0x100) == 0)
      goto LABEL_5;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "configTransitionStartSpeedThreshold", *((float *)this + 14));
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x100) == 0)
  {
LABEL_5:
    if ((v5 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "deltaTriggerTime", *((_DWORD *)this + 15));
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x200) == 0)
  {
LABEL_6:
    if ((v5 & 0x400) == 0)
      goto LABEL_7;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "gpsSpeedMetersPerSecond", *((float *)this + 16));
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x400) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0)
      goto LABEL_8;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "gpsSpeedMilesPerHour", *((float *)this + 17));
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "gpsTimestamp", *((_QWORD *)this + 1));
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_10;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "highSpeedMetersPerSecondThreshold", *((float *)this + 18));
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_11;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "isGPSDetected", *((_BYTE *)this + 124));
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_12;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "isGPSDetectedDebug", *((_BYTE *)this + 125));
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_13;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "isSuddenTransitionDetected", *((_BYTE *)this + 126));
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "isTransitionDetected", *((_BYTE *)this + 127));
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "lastDetectedTransitionSpeedEnd", *((float *)this + 19));
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 2) == 0)
      goto LABEL_16;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "lastDetectedTransitionSpeedStart", *((float *)this + 20));
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 2) == 0)
  {
LABEL_16:
    if ((v5 & 4) == 0)
      goto LABEL_17;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "lastDetectedTransitionTimeEnd", *((_QWORD *)this + 2));
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 4) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_18;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "lastDetectedTransitionTimeStart", *((_QWORD *)this + 3));
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "loggedAtEpoch", *((_BYTE *)this + 128));
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x4000) == 0)
  {
LABEL_19:
    if ((v5 & 0x8000) == 0)
      goto LABEL_20;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "lowSpeedMetersPerSecondThresold", *((float *)this + 21));
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x8000) == 0)
  {
LABEL_20:
    if ((v5 & 0x10000) == 0)
      goto LABEL_21;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 22));
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x10000) == 0)
  {
LABEL_21:
    if ((v5 & 0x20000) == 0)
      goto LABEL_22;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "streamEndSpeed", *((float *)this + 23));
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x20000) == 0)
  {
LABEL_22:
    if ((v5 & 8) == 0)
      goto LABEL_23;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "streamStartSpeed", *((float *)this + 24));
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 8) == 0)
  {
LABEL_23:
    if ((v5 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 4));
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x40000) == 0)
  {
LABEL_24:
    if ((v5 & 0x80000) == 0)
      goto LABEL_25;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "transitionBaseDuration", *((float *)this + 25));
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x80000) == 0)
  {
LABEL_25:
    if ((v5 & 0x100000) == 0)
      goto LABEL_26;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "transitionDuration", *((float *)this + 26));
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x100000) == 0)
  {
LABEL_26:
    if ((v5 & 0x200000) == 0)
      goto LABEL_27;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "transitionEndSpeed", *((float *)this + 27));
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x200000) == 0)
  {
LABEL_27:
    if ((v5 & 0x400000) == 0)
      goto LABEL_28;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "transitionEpsilonDuration", *((float *)this + 28));
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x400000) == 0)
  {
LABEL_28:
    if ((v5 & 0x800000) == 0)
      goto LABEL_29;
LABEL_59:
    PB::TextFormatter::format(a2, "transitionStartSpeed", *((float *)this + 30));
    if ((*((_DWORD *)this + 33) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_30;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "transitionSpeedStart", *((float *)this + 29));
  v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x800000) != 0)
    goto LABEL_59;
LABEL_29:
  if ((v5 & 0x10) != 0)
LABEL_30:
    PB::TextFormatter::format(a2, "transitionTimeStart", *((_QWORD *)this + 5));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaGpsResult::readFrom(CMMsl::KappaGpsResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  int v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  int v35;
  BOOL v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  char v42;
  int v43;
  BOOL v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  char v68;
  int v69;
  BOOL v70;
  int v71;
  BOOL v72;
  uint64_t result;
  char v74;
  unsigned int v75;
  unint64_t v76;
  char v77;
  char v78;
  unsigned int v79;
  unint64_t v80;
  char v81;
  char v82;
  unsigned int v83;
  unint64_t v84;
  char v85;
  char v86;
  unsigned int v87;
  unint64_t v88;
  char v89;
  char v90;
  unsigned int v91;
  unint64_t v92;
  char v93;
  char v94;
  unsigned int v95;
  unint64_t v96;
  char v97;
  char v98;
  unsigned int v99;
  unint64_t v100;
  char v101;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((int)(v11 >> 3) > 200)
      {
        switch((int)v20)
        {
          case 201:
            *((_DWORD *)this + 33) |= 8u;
            v23 = *((_QWORD *)a2 + 1);
            v2 = *((_QWORD *)a2 + 2);
            v24 = *(_QWORD *)a2;
            if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
            {
              v74 = 0;
              v75 = 0;
              v27 = 0;
              if (v2 <= v23)
                v2 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v2 == v23)
                {
                  v27 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_208;
                }
                v76 = v23++;
                v77 = *(_BYTE *)(v24 + v76);
                *((_QWORD *)a2 + 1) = v23;
                v27 |= (unint64_t)(v77 & 0x7F) << v74;
                if ((v77 & 0x80) == 0)
                  break;
                v74 += 7;
                v14 = v75++ > 8;
                if (v14)
                {
                  v27 = 0;
LABEL_207:
                  v2 = v76 + 1;
                  goto LABEL_208;
                }
              }
              if (*((_BYTE *)a2 + 24))
                v27 = 0;
              goto LABEL_207;
            }
            v25 = 0;
            v26 = 0;
            v27 = 0;
            do
            {
              v2 = v23 + 1;
              *((_QWORD *)a2 + 1) = v23 + 1;
              v28 = *(_BYTE *)(v24 + v23);
              v27 |= (unint64_t)(v28 & 0x7F) << v25;
              if ((v28 & 0x80) == 0)
                goto LABEL_208;
              v25 += 7;
              v23 = v2;
              v14 = v26++ > 8;
            }
            while (!v14);
            v27 = 0;
LABEL_208:
            *((_QWORD *)this + 4) = v27;
            break;
          case 202:
            *((_DWORD *)this + 33) |= 0x1000000u;
            v2 = *((_QWORD *)a2 + 1);
            if (v2 >= *((_QWORD *)a2 + 2))
            {
              v44 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v43 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
              *((_QWORD *)a2 + 1) = v2;
              v44 = v43 != 0;
            }
            *((_BYTE *)this + 124) = v44;
            break;
          case 203:
            *((_DWORD *)this + 33) |= 0x8000u;
            v45 = *((_QWORD *)a2 + 1);
            v2 = *((_QWORD *)a2 + 2);
            v46 = *(_QWORD *)a2;
            if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
            {
              v86 = 0;
              v87 = 0;
              v49 = 0;
              if (v2 <= v45)
                v2 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v2 == v45)
                {
                  LODWORD(v49) = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_223;
                }
                v88 = v45++;
                v89 = *(_BYTE *)(v46 + v88);
                *((_QWORD *)a2 + 1) = v45;
                v49 |= (unint64_t)(v89 & 0x7F) << v86;
                if ((v89 & 0x80) == 0)
                  break;
                v86 += 7;
                v14 = v87++ > 8;
                if (v14)
                {
                  LODWORD(v49) = 0;
LABEL_222:
                  v2 = v88 + 1;
                  goto LABEL_223;
                }
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v49) = 0;
              goto LABEL_222;
            }
            v47 = 0;
            v48 = 0;
            v49 = 0;
            do
            {
              v2 = v45 + 1;
              *((_QWORD *)a2 + 1) = v45 + 1;
              v50 = *(_BYTE *)(v46 + v45);
              v49 |= (unint64_t)(v50 & 0x7F) << v47;
              if ((v50 & 0x80) == 0)
                goto LABEL_223;
              v47 += 7;
              v45 = v2;
              v14 = v48++ > 8;
            }
            while (!v14);
            LODWORD(v49) = 0;
LABEL_223:
            *((_DWORD *)this + 22) = v49;
            break;
          case 204:
            *((_DWORD *)this + 33) |= 0x10u;
            v51 = *((_QWORD *)a2 + 1);
            v2 = *((_QWORD *)a2 + 2);
            v52 = *(_QWORD *)a2;
            if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
            {
              v90 = 0;
              v91 = 0;
              v55 = 0;
              if (v2 <= v51)
                v2 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v2 == v51)
                {
                  v55 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_228;
                }
                v92 = v51++;
                v93 = *(_BYTE *)(v52 + v92);
                *((_QWORD *)a2 + 1) = v51;
                v55 |= (unint64_t)(v93 & 0x7F) << v90;
                if ((v93 & 0x80) == 0)
                  break;
                v90 += 7;
                v14 = v91++ > 8;
                if (v14)
                {
                  v55 = 0;
LABEL_227:
                  v2 = v92 + 1;
                  goto LABEL_228;
                }
              }
              if (*((_BYTE *)a2 + 24))
                v55 = 0;
              goto LABEL_227;
            }
            v53 = 0;
            v54 = 0;
            v55 = 0;
            do
            {
              v2 = v51 + 1;
              *((_QWORD *)a2 + 1) = v51 + 1;
              v56 = *(_BYTE *)(v52 + v51);
              v55 |= (unint64_t)(v56 & 0x7F) << v53;
              if ((v56 & 0x80) == 0)
                goto LABEL_228;
              v53 += 7;
              v51 = v2;
              v14 = v54++ > 8;
            }
            while (!v14);
            v55 = 0;
LABEL_228:
            *((_QWORD *)this + 5) = v55;
            break;
          case 205:
            *((_DWORD *)this + 33) |= 0x400000u;
            v2 = *((_QWORD *)a2 + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_137;
            *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v2);
            goto LABEL_198;
          case 206:
            *((_DWORD *)this + 33) |= 4u;
            v57 = *((_QWORD *)a2 + 1);
            v2 = *((_QWORD *)a2 + 2);
            v58 = *(_QWORD *)a2;
            if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
            {
              v94 = 0;
              v95 = 0;
              v61 = 0;
              if (v2 <= v57)
                v2 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v2 == v57)
                {
                  v61 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_233;
                }
                v96 = v57++;
                v97 = *(_BYTE *)(v58 + v96);
                *((_QWORD *)a2 + 1) = v57;
                v61 |= (unint64_t)(v97 & 0x7F) << v94;
                if ((v97 & 0x80) == 0)
                  break;
                v94 += 7;
                v14 = v95++ > 8;
                if (v14)
                {
                  v61 = 0;
LABEL_232:
                  v2 = v96 + 1;
                  goto LABEL_233;
                }
              }
              if (*((_BYTE *)a2 + 24))
                v61 = 0;
              goto LABEL_232;
            }
            v59 = 0;
            v60 = 0;
            v61 = 0;
            do
            {
              v2 = v57 + 1;
              *((_QWORD *)a2 + 1) = v57 + 1;
              v62 = *(_BYTE *)(v58 + v57);
              v61 |= (unint64_t)(v62 & 0x7F) << v59;
              if ((v62 & 0x80) == 0)
                goto LABEL_233;
              v59 += 7;
              v57 = v2;
              v14 = v60++ > 8;
            }
            while (!v14);
            v61 = 0;
LABEL_233:
            *((_QWORD *)this + 3) = v61;
            break;
          case 207:
            *((_DWORD *)this + 33) |= 0x2000u;
            v2 = *((_QWORD *)a2 + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_137;
            *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v2);
            goto LABEL_198;
          case 208:
            *((_DWORD *)this + 33) |= 2u;
            v63 = *((_QWORD *)a2 + 1);
            v2 = *((_QWORD *)a2 + 2);
            v64 = *(_QWORD *)a2;
            if (v63 > 0xFFFFFFFFFFFFFFF5 || v63 + 10 > v2)
            {
              v98 = 0;
              v99 = 0;
              v67 = 0;
              if (v2 <= v63)
                v2 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v2 == v63)
                {
                  v67 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_238;
                }
                v100 = v63++;
                v101 = *(_BYTE *)(v64 + v100);
                *((_QWORD *)a2 + 1) = v63;
                v67 |= (unint64_t)(v101 & 0x7F) << v98;
                if ((v101 & 0x80) == 0)
                  break;
                v98 += 7;
                v14 = v99++ > 8;
                if (v14)
                {
                  v67 = 0;
LABEL_237:
                  v2 = v100 + 1;
                  goto LABEL_238;
                }
              }
              if (*((_BYTE *)a2 + 24))
                v67 = 0;
              goto LABEL_237;
            }
            v65 = 0;
            v66 = 0;
            v67 = 0;
            do
            {
              v2 = v63 + 1;
              *((_QWORD *)a2 + 1) = v63 + 1;
              v68 = *(_BYTE *)(v64 + v63);
              v67 |= (unint64_t)(v68 & 0x7F) << v65;
              if ((v68 & 0x80) == 0)
                goto LABEL_238;
              v65 += 7;
              v63 = v2;
              v14 = v66++ > 8;
            }
            while (!v14);
            v67 = 0;
LABEL_238:
            *((_QWORD *)this + 2) = v67;
            break;
          case 209:
            *((_DWORD *)this + 33) |= 0x1000u;
            v2 = *((_QWORD *)a2 + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            {
LABEL_137:
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_198:
              v2 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v2;
            }
            break;
          default:
            switch((int)v20)
            {
              case 301:
                *((_DWORD *)this + 33) |= 1u;
                v29 = *((_QWORD *)a2 + 1);
                v2 = *((_QWORD *)a2 + 2);
                v30 = *(_QWORD *)a2;
                if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
                {
                  v78 = 0;
                  v79 = 0;
                  v33 = 0;
                  if (v2 <= v29)
                    v2 = *((_QWORD *)a2 + 1);
                  while (1)
                  {
                    if (v2 == v29)
                    {
                      v33 = 0;
                      *((_BYTE *)a2 + 24) = 1;
                      goto LABEL_213;
                    }
                    v80 = v29++;
                    v81 = *(_BYTE *)(v30 + v80);
                    *((_QWORD *)a2 + 1) = v29;
                    v33 |= (unint64_t)(v81 & 0x7F) << v78;
                    if ((v81 & 0x80) == 0)
                      break;
                    v78 += 7;
                    v14 = v79++ > 8;
                    if (v14)
                    {
                      v33 = 0;
LABEL_212:
                      v2 = v80 + 1;
                      goto LABEL_213;
                    }
                  }
                  if (*((_BYTE *)a2 + 24))
                    v33 = 0;
                  goto LABEL_212;
                }
                v31 = 0;
                v32 = 0;
                v33 = 0;
                do
                {
                  v2 = v29 + 1;
                  *((_QWORD *)a2 + 1) = v29 + 1;
                  v34 = *(_BYTE *)(v30 + v29);
                  v33 |= (unint64_t)(v34 & 0x7F) << v31;
                  if ((v34 & 0x80) == 0)
                    goto LABEL_213;
                  v31 += 7;
                  v29 = v2;
                  v14 = v32++ > 8;
                }
                while (!v14);
                v33 = 0;
LABEL_213:
                *((_QWORD *)this + 1) = v33;
                break;
              case 302:
                *((_DWORD *)this + 33) |= 0x200u;
                v2 = *((_QWORD *)a2 + 1);
                if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_137;
                *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v2);
                goto LABEL_198;
              case 303:
                *((_DWORD *)this + 33) |= 0x400u;
                v2 = *((_QWORD *)a2 + 1);
                if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_137;
                *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v2);
                goto LABEL_198;
              case 304:
                *((_DWORD *)this + 33) |= 0x10000000u;
                v2 = *((_QWORD *)a2 + 1);
                if (v2 >= *((_QWORD *)a2 + 2))
                {
                  v70 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v69 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                  *((_QWORD *)a2 + 1) = v2;
                  v70 = v69 != 0;
                }
                *((_BYTE *)this + 128) = v70;
                goto LABEL_199;
              case 305:
                *((_DWORD *)this + 33) |= 0x2000000u;
                v2 = *((_QWORD *)a2 + 1);
                if (v2 >= *((_QWORD *)a2 + 2))
                {
                  v72 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v71 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                  *((_QWORD *)a2 + 1) = v2;
                  v72 = v71 != 0;
                }
                *((_BYTE *)this + 125) = v72;
                goto LABEL_199;
              default:
LABEL_127:
                result = PB::Reader::skip(a2, v20, v11 & 7, 0);
                if (!(_DWORD)result)
                  return result;
                v2 = *((_QWORD *)a2 + 1);
                goto LABEL_199;
            }
            break;
        }
      }
      else
      {
        switch((int)v20)
        {
          case 1:
            *((_DWORD *)this + 33) |= 0x4000000u;
            v2 = *((_QWORD *)a2 + 1);
            if (v2 >= *((_QWORD *)a2 + 2))
            {
              v22 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v21 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
              *((_QWORD *)a2 + 1) = v2;
              v22 = v21 != 0;
            }
            *((_BYTE *)this + 126) = v22;
            break;
          case 2:
            *((_DWORD *)this + 33) |= 0x8000000u;
            v2 = *((_QWORD *)a2 + 1);
            if (v2 >= *((_QWORD *)a2 + 2))
            {
              v36 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v35 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
              *((_QWORD *)a2 + 1) = v2;
              v36 = v35 != 0;
            }
            *((_BYTE *)this + 127) = v36;
            break;
          case 3:
            *((_DWORD *)this + 33) |= 0x80000u;
            v2 = *((_QWORD *)a2 + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_137;
            *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v2);
            goto LABEL_198;
          case 4:
            *((_DWORD *)this + 33) |= 0x800000u;
            v2 = *((_QWORD *)a2 + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_137;
            *((_DWORD *)this + 30) = *(_DWORD *)(*(_QWORD *)a2 + v2);
            goto LABEL_198;
          case 5:
            *((_DWORD *)this + 33) |= 0x100000u;
            v2 = *((_QWORD *)a2 + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_137;
            *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v2);
            goto LABEL_198;
          case 6:
            *((_DWORD *)this + 33) |= 0x20000u;
            v2 = *((_QWORD *)a2 + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_137;
            *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v2);
            goto LABEL_198;
          case 7:
            *((_DWORD *)this + 33) |= 0x10000u;
            v2 = *((_QWORD *)a2 + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_137;
            *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v2);
            goto LABEL_198;
          case 8:
            *((_DWORD *)this + 33) |= 0x100u;
            v37 = *((_QWORD *)a2 + 1);
            v2 = *((_QWORD *)a2 + 2);
            v38 = *(_QWORD *)a2;
            if (v37 > 0xFFFFFFFFFFFFFFF5 || v37 + 10 > v2)
            {
              v82 = 0;
              v83 = 0;
              v41 = 0;
              if (v2 <= v37)
                v2 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v2 == v37)
                {
                  LODWORD(v41) = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_218;
                }
                v84 = v37++;
                v85 = *(_BYTE *)(v38 + v84);
                *((_QWORD *)a2 + 1) = v37;
                v41 |= (unint64_t)(v85 & 0x7F) << v82;
                if ((v85 & 0x80) == 0)
                  break;
                v82 += 7;
                v14 = v83++ > 8;
                if (v14)
                {
                  LODWORD(v41) = 0;
LABEL_217:
                  v2 = v84 + 1;
                  goto LABEL_218;
                }
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v41) = 0;
              goto LABEL_217;
            }
            v39 = 0;
            v40 = 0;
            v41 = 0;
            do
            {
              v2 = v37 + 1;
              *((_QWORD *)a2 + 1) = v37 + 1;
              v42 = *(_BYTE *)(v38 + v37);
              v41 |= (unint64_t)(v42 & 0x7F) << v39;
              if ((v42 & 0x80) == 0)
                goto LABEL_218;
              v39 += 7;
              v37 = v2;
              v14 = v40++ > 8;
            }
            while (!v14);
            LODWORD(v41) = 0;
LABEL_218:
            *((_DWORD *)this + 15) = v41;
            break;
          case 9:
            *((_DWORD *)this + 33) |= 0x80u;
            v2 = *((_QWORD *)a2 + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_137;
            *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
            goto LABEL_198;
          case 10:
            *((_DWORD *)this + 33) |= 0x40u;
            v2 = *((_QWORD *)a2 + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_137;
            *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
            goto LABEL_198;
          case 11:
            *((_DWORD *)this + 33) |= 0x20u;
            v2 = *((_QWORD *)a2 + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_137;
            *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
            goto LABEL_198;
          default:
            switch((int)v20)
            {
              case 'e':
                *((_DWORD *)this + 33) |= 0x800u;
                v2 = *((_QWORD *)a2 + 1);
                if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_137;
                *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
                break;
              case 'f':
                *((_DWORD *)this + 33) |= 0x4000u;
                v2 = *((_QWORD *)a2 + 1);
                if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_137;
                *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v2);
                break;
              case 'g':
                *((_DWORD *)this + 33) |= 0x200000u;
                v2 = *((_QWORD *)a2 + 1);
                if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_137;
                *((_DWORD *)this + 28) = *(_DWORD *)(*(_QWORD *)a2 + v2);
                break;
              case 'h':
                *((_DWORD *)this + 33) |= 0x40000u;
                v2 = *((_QWORD *)a2 + 1);
                if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_137;
                *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v2);
                break;
              default:
                goto LABEL_127;
            }
            goto LABEL_198;
        }
      }
LABEL_199:
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaGpsResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 132);
  if ((v4 & 0x4000000) != 0)
  {
    this = PB::Writer::write(a2, *(_BYTE *)(this + 126), 1u);
    v4 = *(_DWORD *)(v3 + 132);
    if ((v4 & 0x8000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80000) == 0)
        goto LABEL_4;
      goto LABEL_33;
    }
  }
  else if ((v4 & 0x8000000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 127), 2u);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x80000) == 0)
  {
LABEL_4:
    if ((v4 & 0x800000) == 0)
      goto LABEL_5;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 3u);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x800000) == 0)
  {
LABEL_5:
    if ((v4 & 0x100000) == 0)
      goto LABEL_6;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 120), 4u);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x100000) == 0)
  {
LABEL_6:
    if ((v4 & 0x20000) == 0)
      goto LABEL_7;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 108), 5u);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x20000) == 0)
  {
LABEL_7:
    if ((v4 & 0x10000) == 0)
      goto LABEL_8;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 6u);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x10000) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 92), 7u);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 60), 8u);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 9u);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x40) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0xAu);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 0xBu);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 0x4000) == 0)
      goto LABEL_14;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0x65u);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x4000) == 0)
  {
LABEL_14:
    if ((v4 & 0x200000) == 0)
      goto LABEL_15;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 0x66u);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x200000) == 0)
  {
LABEL_15:
    if ((v4 & 0x40000) == 0)
      goto LABEL_16;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(float *)(v3 + 112), 0x67u);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x40000) == 0)
  {
LABEL_16:
    if ((v4 & 8) == 0)
      goto LABEL_17;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 0x68u);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 8) == 0)
  {
LABEL_17:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_18;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 32), 0xC9u);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x8000) == 0)
      goto LABEL_19;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 124), 0xCAu);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x8000) == 0)
  {
LABEL_19:
    if ((v4 & 0x10) == 0)
      goto LABEL_20;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 88), 0xCBu);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x10) == 0)
  {
LABEL_20:
    if ((v4 & 0x400000) == 0)
      goto LABEL_21;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 40), 0xCCu);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x400000) == 0)
  {
LABEL_21:
    if ((v4 & 4) == 0)
      goto LABEL_22;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 116), 0xCDu);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 4) == 0)
  {
LABEL_22:
    if ((v4 & 0x2000) == 0)
      goto LABEL_23;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 24), 0xCEu);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x2000) == 0)
  {
LABEL_23:
    if ((v4 & 2) == 0)
      goto LABEL_24;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0xCFu);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 2) == 0)
  {
LABEL_24:
    if ((v4 & 0x1000) == 0)
      goto LABEL_25;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 16), 0xD0u);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x1000) == 0)
  {
LABEL_25:
    if ((v4 & 1) == 0)
      goto LABEL_26;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 0xD1u);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 1) == 0)
  {
LABEL_26:
    if ((v4 & 0x200) == 0)
      goto LABEL_27;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 8), 0x12Du);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x200) == 0)
  {
LABEL_27:
    if ((v4 & 0x400) == 0)
      goto LABEL_28;
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 0x12Eu);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x400) == 0)
  {
LABEL_28:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_29;
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 0x12Fu);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x2000000) == 0)
      return this;
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 125), 0x131u);
  }
LABEL_58:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 128), 0x130u);
  if ((*(_DWORD *)(v3 + 132) & 0x2000000) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 125), 0x131u);
  return this;
}

uint64_t CMMsl::KappaGpsResult::hash_value(CMMsl::KappaGpsResult *this)
{
  int v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;

  v1 = *((_DWORD *)this + 33);
  if ((v1 & 0x4000000) != 0)
  {
    v48 = *((unsigned __int8 *)this + 126);
    if ((v1 & 0x8000000) != 0)
    {
LABEL_3:
      v2 = *((unsigned __int8 *)this + 127);
      if ((v1 & 0x80000) != 0)
        goto LABEL_4;
LABEL_84:
      v4 = 0;
      if ((v1 & 0x800000) != 0)
        goto LABEL_8;
LABEL_85:
      v6 = 0;
      if ((v1 & 0x100000) != 0)
        goto LABEL_12;
LABEL_86:
      v8 = 0;
      if ((v1 & 0x20000) != 0)
        goto LABEL_16;
LABEL_87:
      v10 = 0;
      if ((v1 & 0x10000) != 0)
        goto LABEL_20;
LABEL_88:
      v12 = 0;
      if ((v1 & 0x100) != 0)
        goto LABEL_24;
      goto LABEL_89;
    }
  }
  else
  {
    v48 = 0;
    if ((v1 & 0x8000000) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((v1 & 0x80000) == 0)
    goto LABEL_84;
LABEL_4:
  v3 = *((float *)this + 26);
  if (v3 == 0.0)
    v4 = 0;
  else
    v4 = LODWORD(v3);
  if ((v1 & 0x800000) == 0)
    goto LABEL_85;
LABEL_8:
  v5 = *((float *)this + 30);
  if (v5 == 0.0)
    v6 = 0;
  else
    v6 = LODWORD(v5);
  if ((v1 & 0x100000) == 0)
    goto LABEL_86;
LABEL_12:
  v7 = *((float *)this + 27);
  if (v7 == 0.0)
    v8 = 0;
  else
    v8 = LODWORD(v7);
  if ((v1 & 0x20000) == 0)
    goto LABEL_87;
LABEL_16:
  v9 = *((float *)this + 24);
  if (v9 == 0.0)
    v10 = 0;
  else
    v10 = LODWORD(v9);
  if ((v1 & 0x10000) == 0)
    goto LABEL_88;
LABEL_20:
  v11 = *((float *)this + 23);
  if (v11 == 0.0)
    v12 = 0;
  else
    v12 = LODWORD(v11);
  if ((v1 & 0x100) != 0)
  {
LABEL_24:
    v13 = *((int *)this + 15);
    if ((v1 & 0x80) != 0)
      goto LABEL_25;
LABEL_90:
    v15 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_29;
LABEL_91:
    v17 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_33;
LABEL_92:
    v19 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_37;
LABEL_93:
    v21 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_41;
LABEL_94:
    v23 = 0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_45;
LABEL_95:
    v25 = 0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_49;
LABEL_96:
    v27 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_53;
    goto LABEL_97;
  }
LABEL_89:
  v13 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_90;
LABEL_25:
  v14 = *((float *)this + 14);
  if (v14 == 0.0)
    v15 = 0;
  else
    v15 = LODWORD(v14);
  if ((v1 & 0x40) == 0)
    goto LABEL_91;
LABEL_29:
  v16 = *((float *)this + 13);
  if (v16 == 0.0)
    v17 = 0;
  else
    v17 = LODWORD(v16);
  if ((v1 & 0x20) == 0)
    goto LABEL_92;
LABEL_33:
  v18 = *((float *)this + 12);
  if (v18 == 0.0)
    v19 = 0;
  else
    v19 = LODWORD(v18);
  if ((v1 & 0x800) == 0)
    goto LABEL_93;
LABEL_37:
  v20 = *((float *)this + 18);
  if (v20 == 0.0)
    v21 = 0;
  else
    v21 = LODWORD(v20);
  if ((v1 & 0x4000) == 0)
    goto LABEL_94;
LABEL_41:
  v22 = *((float *)this + 21);
  if (v22 == 0.0)
    v23 = 0;
  else
    v23 = LODWORD(v22);
  if ((v1 & 0x200000) == 0)
    goto LABEL_95;
LABEL_45:
  v24 = *((float *)this + 28);
  if (v24 == 0.0)
    v25 = 0;
  else
    v25 = LODWORD(v24);
  if ((v1 & 0x40000) == 0)
    goto LABEL_96;
LABEL_49:
  v26 = *((float *)this + 25);
  if (v26 == 0.0)
    v27 = 0;
  else
    v27 = LODWORD(v26);
  if ((v1 & 8) != 0)
  {
LABEL_53:
    v28 = *((_QWORD *)this + 4);
    if ((v1 & 0x1000000) != 0)
      goto LABEL_54;
    goto LABEL_98;
  }
LABEL_97:
  v28 = 0;
  if ((v1 & 0x1000000) != 0)
  {
LABEL_54:
    v29 = *((unsigned __int8 *)this + 124);
    if ((v1 & 0x8000) != 0)
      goto LABEL_55;
    goto LABEL_99;
  }
LABEL_98:
  v29 = 0;
  if ((v1 & 0x8000) != 0)
  {
LABEL_55:
    v30 = *((int *)this + 22);
    if ((v1 & 0x10) != 0)
      goto LABEL_56;
    goto LABEL_100;
  }
LABEL_99:
  v30 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_56:
    v31 = *((_QWORD *)this + 5);
    if ((v1 & 0x400000) != 0)
      goto LABEL_57;
LABEL_101:
    v33 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_61;
    goto LABEL_102;
  }
LABEL_100:
  v31 = 0;
  if ((v1 & 0x400000) == 0)
    goto LABEL_101;
LABEL_57:
  v32 = *((float *)this + 29);
  if (v32 == 0.0)
    v33 = 0;
  else
    v33 = LODWORD(v32);
  if ((v1 & 4) != 0)
  {
LABEL_61:
    v34 = *((_QWORD *)this + 3);
    if ((v1 & 0x2000) != 0)
      goto LABEL_62;
LABEL_103:
    v36 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_66;
    goto LABEL_104;
  }
LABEL_102:
  v34 = 0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_103;
LABEL_62:
  v35 = *((float *)this + 20);
  if (v35 == 0.0)
    v36 = 0;
  else
    v36 = LODWORD(v35);
  if ((v1 & 2) != 0)
  {
LABEL_66:
    v37 = *((_QWORD *)this + 2);
    if ((v1 & 0x1000) != 0)
      goto LABEL_67;
LABEL_105:
    v39 = 0;
    if ((v1 & 1) != 0)
      goto LABEL_71;
    goto LABEL_106;
  }
LABEL_104:
  v37 = 0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_105;
LABEL_67:
  v38 = *((float *)this + 19);
  if (v38 == 0.0)
    v39 = 0;
  else
    v39 = LODWORD(v38);
  if ((v1 & 1) != 0)
  {
LABEL_71:
    v40 = *((_QWORD *)this + 1);
    if ((v1 & 0x200) != 0)
      goto LABEL_72;
LABEL_107:
    v42 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_76;
LABEL_108:
    v44 = 0;
    if ((v1 & 0x10000000) != 0)
      goto LABEL_80;
LABEL_109:
    v45 = 0;
    if ((v1 & 0x2000000) != 0)
      goto LABEL_81;
LABEL_110:
    v46 = 0;
    return v2 ^ v48 ^ v4 ^ v6 ^ v8 ^ v10 ^ v12 ^ v13 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v25 ^ v27 ^ v28 ^ v29 ^ v30 ^ v31 ^ v33 ^ v34 ^ v36 ^ v37 ^ v39 ^ v40 ^ v42 ^ v44 ^ v45 ^ v46;
  }
LABEL_106:
  v40 = 0;
  if ((v1 & 0x200) == 0)
    goto LABEL_107;
LABEL_72:
  v41 = *((float *)this + 16);
  if (v41 == 0.0)
    v42 = 0;
  else
    v42 = LODWORD(v41);
  if ((v1 & 0x400) == 0)
    goto LABEL_108;
LABEL_76:
  v43 = *((float *)this + 17);
  if (v43 == 0.0)
    v44 = 0;
  else
    v44 = LODWORD(v43);
  if ((v1 & 0x10000000) == 0)
    goto LABEL_109;
LABEL_80:
  v45 = *((unsigned __int8 *)this + 128);
  if ((v1 & 0x2000000) == 0)
    goto LABEL_110;
LABEL_81:
  v46 = *((unsigned __int8 *)this + 125);
  return v2 ^ v48 ^ v4 ^ v6 ^ v8 ^ v10 ^ v12 ^ v13 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v25 ^ v27 ^ v28 ^ v29 ^ v30 ^ v31 ^ v33 ^ v34 ^ v36 ^ v37 ^ v39 ^ v40 ^ v42 ^ v44 ^ v45 ^ v46;
}

void CMMsl::KappaGravityAutocorrelationResult::~KappaGravityAutocorrelationResult(CMMsl::KappaGravityAutocorrelationResult *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::KappaGravityAutocorrelationResult::KappaGravityAutocorrelationResult(uint64_t this, const CMMsl::KappaGravityAutocorrelationResult *a2)
{
  __int16 v2;
  __int16 v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  *(_QWORD *)this = off_100352010;
  *(_DWORD *)(this + 64) = 0;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x40) != 0)
  {
    v4 = *((_DWORD *)a2 + 11);
    v3 = 64;
    *(_WORD *)(this + 64) = 64;
    *(_DWORD *)(this + 44) = v4;
    v2 = *((_WORD *)a2 + 32);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 9);
    v3 |= 0x10u;
    *(_WORD *)(this + 64) = v3;
    *(_DWORD *)(this + 36) = v5;
    v2 = *((_WORD *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    v6 = *((_DWORD *)a2 + 10);
    v3 |= 0x20u;
    *(_WORD *)(this + 64) = v3;
    *(_DWORD *)(this + 40) = v6;
    v2 = *((_WORD *)a2 + 32);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        goto LABEL_9;
      goto LABEL_19;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 8);
  v3 |= 8u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 32) = v7;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 0x800) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  v8 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *(_WORD *)(this + 64) = v3;
  *(_QWORD *)(this + 24) = v8;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x800) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  v9 = *((_BYTE *)a2 + 61);
  v3 |= 0x800u;
  *(_WORD *)(this + 64) = v3;
  *(_BYTE *)(this + 61) = v9;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0)
      goto LABEL_12;
    goto LABEL_22;
  }
LABEL_21:
  v10 = *((_BYTE *)a2 + 60);
  v3 |= 0x400u;
  *(_WORD *)(this + 64) = v3;
  *(_BYTE *)(this + 60) = v10;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0)
      goto LABEL_13;
    goto LABEL_23;
  }
LABEL_22:
  v11 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 64) = v3;
  *(_QWORD *)(this + 8) = v11;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_24;
  }
LABEL_23:
  v12 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 64) = v3;
  *(_QWORD *)(this + 16) = v12;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x200) == 0)
  {
LABEL_14:
    if ((v2 & 0x100) == 0)
      goto LABEL_15;
    goto LABEL_25;
  }
LABEL_24:
  v13 = *((_DWORD *)a2 + 14);
  v3 |= 0x200u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 56) = v13;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x100) == 0)
  {
LABEL_15:
    if ((v2 & 0x80) == 0)
      return this;
LABEL_26:
    v15 = *((_DWORD *)a2 + 12);
    *(_WORD *)(this + 64) = v3 | 0x80;
    *(_DWORD *)(this + 48) = v15;
    return this;
  }
LABEL_25:
  v14 = *((_DWORD *)a2 + 13);
  v3 |= 0x100u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 52) = v14;
  if ((*((_WORD *)a2 + 32) & 0x80) != 0)
    goto LABEL_26;
  return this;
}

CMMsl *CMMsl::KappaGravityAutocorrelationResult::operator=(CMMsl *a1, const CMMsl::KappaGravityAutocorrelationResult *a2)
{
  CMMsl::KappaGravityAutocorrelationResult *v3;
  _BYTE v5[72];

  if (a1 != a2)
  {
    CMMsl::KappaGravityAutocorrelationResult::KappaGravityAutocorrelationResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaGravityAutocorrelationResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaGravityAutocorrelationResult *a2, CMMsl::KappaGravityAutocorrelationResult *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float result;

  v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  v4 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  v5 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v5;
  v6 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v6;
  v7 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v7;
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  LOBYTE(v8) = *((_BYTE *)this + 61);
  *((_BYTE *)this + 61) = *((_BYTE *)a2 + 61);
  *((_BYTE *)a2 + 61) = v8;
  LOBYTE(v8) = *((_BYTE *)this + 60);
  *((_BYTE *)this + 60) = *((_BYTE *)a2 + 60);
  *((_BYTE *)a2 + 60) = v8;
  v9 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v9;
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v10;
  LODWORD(v10) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v10;
  result = *((float *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((float *)a2 + 13) = result;
  LODWORD(v10) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v10;
  return result;
}

float CMMsl::KappaGravityAutocorrelationResult::KappaGravityAutocorrelationResult(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100352010;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 61) = *(_BYTE *)(a2 + 61);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  result = *(float *)(a2 + 52);
  *(float *)(a1 + 52) = result;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return result;
}

CMMsl *CMMsl::KappaGravityAutocorrelationResult::operator=(CMMsl *this, uint64_t a2, CMMsl::KappaGravityAutocorrelationResult *a3)
{
  uint64_t v4;
  void (**v6)(CMMsl::KappaGravityAutocorrelationResult *__hidden);
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  __int16 v14;
  int v15;

  if (this != (CMMsl *)a2)
  {
    v6 = off_100352010;
    v15 = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(a2 + 64) = 0;
    v4 = *(_QWORD *)(a2 + 40);
    v9 = *(_QWORD *)(a2 + 32);
    v10 = v4;
    v8 = *(_QWORD *)(a2 + 24);
    v14 = *(_WORD *)(a2 + 60);
    v7 = *(_OWORD *)(a2 + 8);
    v13 = *(_DWORD *)(a2 + 56);
    v12 = *(_DWORD *)(a2 + 52);
    v11 = *(_DWORD *)(a2 + 48);
    CMMsl::swap(this, (CMMsl::KappaGravityAutocorrelationResult *)&v6, a3);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return this;
}

uint64_t CMMsl::KappaGravityAutocorrelationResult::formatText(CMMsl::KappaGravityAutocorrelationResult *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 32);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "autocorrelationRangeValCriticalThreshold", *((float *)this + 8));
    v5 = *((_WORD *)this + 32);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "autocorrelationRangeValThreshold", *((float *)this + 9));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "autocorrelationTimeVariationCriticalThreshold", *((_DWORD *)this + 10));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "autocorrelationTimeVariationThreshold", *((_DWORD *)this + 11));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 2) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "epochFirstTimestamp", *((_QWORD *)this + 1));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 2) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "epochLastTimestamp", *((_QWORD *)this + 2));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "isCriticalFP", *((_BYTE *)this + 60));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "isPeriodic", *((_BYTE *)this + 61));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x80) == 0)
  {
LABEL_10:
    if ((v5 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "numDmSamplesEpoch", *((_DWORD *)this + 12));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x100) == 0)
  {
LABEL_11:
    if ((v5 & 0x200) == 0)
      goto LABEL_12;
LABEL_25:
    PB::TextFormatter::format(a2, "timeVariation", *((_DWORD *)this + 14));
    if ((*((_WORD *)this + 32) & 4) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_13;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "rangeVal", *((float *)this + 13));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x200) != 0)
    goto LABEL_25;
LABEL_12:
  if ((v5 & 4) != 0)
LABEL_13:
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 3));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaGravityAutocorrelationResult::readFrom(CMMsl::KappaGravityAutocorrelationResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  int v35;
  BOOL v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  char v60;
  unint64_t v61;
  uint64_t v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  char v66;
  uint64_t result;
  char v68;
  unsigned int v69;
  unint64_t v70;
  char v71;
  char v72;
  unsigned int v73;
  unint64_t v74;
  char v75;
  char v76;
  unsigned int v77;
  unint64_t v78;
  char v79;
  char v80;
  unsigned int v81;
  unint64_t v82;
  char v83;
  char v84;
  unsigned int v85;
  unint64_t v86;
  char v87;
  char v88;
  unsigned int v89;
  unint64_t v90;
  char v91;
  char v92;
  unsigned int v93;
  unint64_t v94;
  char v95;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((int)(v11 >> 3) > 202)
      {
        switch((int)v20)
        {
          case 301:
            *((_WORD *)this + 32) |= 1u;
            v27 = *((_QWORD *)a2 + 1);
            v2 = *((_QWORD *)a2 + 2);
            v28 = *(_QWORD *)a2;
            if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
            {
              v72 = 0;
              v73 = 0;
              v31 = 0;
              if (v2 <= v27)
                v2 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v2 == v27)
                {
                  v31 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_155;
                }
                v74 = v27++;
                v75 = *(_BYTE *)(v28 + v74);
                *((_QWORD *)a2 + 1) = v27;
                v31 |= (unint64_t)(v75 & 0x7F) << v72;
                if ((v75 & 0x80) == 0)
                  break;
                v72 += 7;
                v14 = v73++ > 8;
                if (v14)
                {
                  v31 = 0;
LABEL_154:
                  v2 = v74 + 1;
                  goto LABEL_155;
                }
              }
              if (*((_BYTE *)a2 + 24))
                v31 = 0;
              goto LABEL_154;
            }
            v29 = 0;
            v30 = 0;
            v31 = 0;
            do
            {
              v2 = v27 + 1;
              *((_QWORD *)a2 + 1) = v27 + 1;
              v32 = *(_BYTE *)(v28 + v27);
              v31 |= (unint64_t)(v32 & 0x7F) << v29;
              if ((v32 & 0x80) == 0)
                goto LABEL_155;
              v29 += 7;
              v27 = v2;
              v14 = v30++ > 8;
            }
            while (!v14);
            v31 = 0;
LABEL_155:
            *((_QWORD *)this + 1) = v31;
            break;
          case 302:
            *((_WORD *)this + 32) |= 2u;
            v43 = *((_QWORD *)a2 + 1);
            v2 = *((_QWORD *)a2 + 2);
            v44 = *(_QWORD *)a2;
            if (v43 > 0xFFFFFFFFFFFFFFF5 || v43 + 10 > v2)
            {
              v80 = 0;
              v81 = 0;
              v47 = 0;
              if (v2 <= v43)
                v2 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v2 == v43)
                {
                  v47 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_165;
                }
                v82 = v43++;
                v83 = *(_BYTE *)(v44 + v82);
                *((_QWORD *)a2 + 1) = v43;
                v47 |= (unint64_t)(v83 & 0x7F) << v80;
                if ((v83 & 0x80) == 0)
                  break;
                v80 += 7;
                v14 = v81++ > 8;
                if (v14)
                {
                  v47 = 0;
LABEL_164:
                  v2 = v82 + 1;
                  goto LABEL_165;
                }
              }
              if (*((_BYTE *)a2 + 24))
                v47 = 0;
              goto LABEL_164;
            }
            v45 = 0;
            v46 = 0;
            v47 = 0;
            do
            {
              v2 = v43 + 1;
              *((_QWORD *)a2 + 1) = v43 + 1;
              v48 = *(_BYTE *)(v44 + v43);
              v47 |= (unint64_t)(v48 & 0x7F) << v45;
              if ((v48 & 0x80) == 0)
                goto LABEL_165;
              v45 += 7;
              v43 = v2;
              v14 = v46++ > 8;
            }
            while (!v14);
            v47 = 0;
LABEL_165:
            *((_QWORD *)this + 2) = v47;
            break;
          case 303:
            *((_WORD *)this + 32) |= 0x200u;
            v49 = *((_QWORD *)a2 + 1);
            v2 = *((_QWORD *)a2 + 2);
            v50 = *(_QWORD *)a2;
            if (v49 > 0xFFFFFFFFFFFFFFF5 || v49 + 10 > v2)
            {
              v84 = 0;
              v85 = 0;
              v53 = 0;
              if (v2 <= v49)
                v2 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v2 == v49)
                {
                  LODWORD(v53) = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_170;
                }
                v86 = v49++;
                v87 = *(_BYTE *)(v50 + v86);
                *((_QWORD *)a2 + 1) = v49;
                v53 |= (unint64_t)(v87 & 0x7F) << v84;
                if ((v87 & 0x80) == 0)
                  break;
                v84 += 7;
                v14 = v85++ > 8;
                if (v14)
                {
                  LODWORD(v53) = 0;
LABEL_169:
                  v2 = v86 + 1;
                  goto LABEL_170;
                }
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v53) = 0;
              goto LABEL_169;
            }
            v51 = 0;
            v52 = 0;
            v53 = 0;
            do
            {
              v2 = v49 + 1;
              *((_QWORD *)a2 + 1) = v49 + 1;
              v54 = *(_BYTE *)(v50 + v49);
              v53 |= (unint64_t)(v54 & 0x7F) << v51;
              if ((v54 & 0x80) == 0)
                goto LABEL_170;
              v51 += 7;
              v49 = v2;
              v14 = v52++ > 8;
            }
            while (!v14);
            LODWORD(v53) = 0;
LABEL_170:
            *((_DWORD *)this + 14) = v53;
            break;
          case 304:
            *((_WORD *)this + 32) |= 0x100u;
            v2 = *((_QWORD *)a2 + 1);
            if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
            {
              *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_145:
              v2 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v2;
            }
            else
            {
LABEL_74:
              *((_BYTE *)a2 + 24) = 1;
            }
            break;
          case 305:
            *((_WORD *)this + 32) |= 0x80u;
            v55 = *((_QWORD *)a2 + 1);
            v2 = *((_QWORD *)a2 + 2);
            v56 = *(_QWORD *)a2;
            if (v55 > 0xFFFFFFFFFFFFFFF5 || v55 + 10 > v2)
            {
              v88 = 0;
              v89 = 0;
              v59 = 0;
              if (v2 <= v55)
                v2 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v2 == v55)
                {
                  LODWORD(v59) = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_175;
                }
                v90 = v55++;
                v91 = *(_BYTE *)(v56 + v90);
                *((_QWORD *)a2 + 1) = v55;
                v59 |= (unint64_t)(v91 & 0x7F) << v88;
                if ((v91 & 0x80) == 0)
                  break;
                v88 += 7;
                v14 = v89++ > 8;
                if (v14)
                {
                  LODWORD(v59) = 0;
LABEL_174:
                  v2 = v90 + 1;
                  goto LABEL_175;
                }
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v59) = 0;
              goto LABEL_174;
            }
            v57 = 0;
            v58 = 0;
            v59 = 0;
            do
            {
              v2 = v55 + 1;
              *((_QWORD *)a2 + 1) = v55 + 1;
              v60 = *(_BYTE *)(v56 + v55);
              v59 |= (unint64_t)(v60 & 0x7F) << v57;
              if ((v60 & 0x80) == 0)
                goto LABEL_175;
              v57 += 7;
              v55 = v2;
              v14 = v58++ > 8;
            }
            while (!v14);
            LODWORD(v59) = 0;
LABEL_175:
            *((_DWORD *)this + 12) = v59;
            break;
          default:
            if ((_DWORD)v20 != 203)
              goto LABEL_89;
            *((_WORD *)this + 32) |= 0x400u;
            v2 = *((_QWORD *)a2 + 1);
            if (v2 >= *((_QWORD *)a2 + 2))
            {
              v36 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v35 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
              *((_QWORD *)a2 + 1) = v2;
              v36 = v35 != 0;
            }
            *((_BYTE *)this + 60) = v36;
            break;
        }
      }
      else
      {
        switch((int)v20)
        {
          case 'e':
            *((_WORD *)this + 32) |= 0x40u;
            v21 = *((_QWORD *)a2 + 1);
            v2 = *((_QWORD *)a2 + 2);
            v22 = *(_QWORD *)a2;
            if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
            {
              v68 = 0;
              v69 = 0;
              v25 = 0;
              if (v2 <= v21)
                v2 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v2 == v21)
                {
                  LODWORD(v25) = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_150;
                }
                v70 = v21++;
                v71 = *(_BYTE *)(v22 + v70);
                *((_QWORD *)a2 + 1) = v21;
                v25 |= (unint64_t)(v71 & 0x7F) << v68;
                if ((v71 & 0x80) == 0)
                  break;
                v68 += 7;
                v14 = v69++ > 8;
                if (v14)
                {
                  LODWORD(v25) = 0;
LABEL_149:
                  v2 = v70 + 1;
                  goto LABEL_150;
                }
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v25) = 0;
              goto LABEL_149;
            }
            v23 = 0;
            v24 = 0;
            v25 = 0;
            do
            {
              v2 = v21 + 1;
              *((_QWORD *)a2 + 1) = v21 + 1;
              v26 = *(_BYTE *)(v22 + v21);
              v25 |= (unint64_t)(v26 & 0x7F) << v23;
              if ((v26 & 0x80) == 0)
                goto LABEL_150;
              v23 += 7;
              v21 = v2;
              v14 = v24++ > 8;
            }
            while (!v14);
            LODWORD(v25) = 0;
LABEL_150:
            *((_DWORD *)this + 11) = v25;
            break;
          case 'f':
            *((_WORD *)this + 32) |= 0x10u;
            v2 = *((_QWORD *)a2 + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_74;
            *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
            goto LABEL_145;
          case 'g':
            *((_WORD *)this + 32) |= 0x20u;
            v37 = *((_QWORD *)a2 + 1);
            v2 = *((_QWORD *)a2 + 2);
            v38 = *(_QWORD *)a2;
            if (v37 > 0xFFFFFFFFFFFFFFF5 || v37 + 10 > v2)
            {
              v76 = 0;
              v77 = 0;
              v41 = 0;
              if (v2 <= v37)
                v2 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v2 == v37)
                {
                  LODWORD(v41) = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_160;
                }
                v78 = v37++;
                v79 = *(_BYTE *)(v38 + v78);
                *((_QWORD *)a2 + 1) = v37;
                v41 |= (unint64_t)(v79 & 0x7F) << v76;
                if ((v79 & 0x80) == 0)
                  break;
                v76 += 7;
                v14 = v77++ > 8;
                if (v14)
                {
                  LODWORD(v41) = 0;
LABEL_159:
                  v2 = v78 + 1;
                  goto LABEL_160;
                }
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v41) = 0;
              goto LABEL_159;
            }
            v39 = 0;
            v40 = 0;
            v41 = 0;
            do
            {
              v2 = v37 + 1;
              *((_QWORD *)a2 + 1) = v37 + 1;
              v42 = *(_BYTE *)(v38 + v37);
              v41 |= (unint64_t)(v42 & 0x7F) << v39;
              if ((v42 & 0x80) == 0)
                goto LABEL_160;
              v39 += 7;
              v37 = v2;
              v14 = v40++ > 8;
            }
            while (!v14);
            LODWORD(v41) = 0;
LABEL_160:
            *((_DWORD *)this + 10) = v41;
            break;
          case 'h':
            *((_WORD *)this + 32) |= 8u;
            v2 = *((_QWORD *)a2 + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_74;
            *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
            goto LABEL_145;
          default:
            if ((_DWORD)v20 == 201)
            {
              *((_WORD *)this + 32) |= 4u;
              v61 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v62 = *(_QWORD *)a2;
              if (v61 > 0xFFFFFFFFFFFFFFF5 || v61 + 10 > v2)
              {
                v92 = 0;
                v93 = 0;
                v65 = 0;
                if (v2 <= v61)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v61)
                  {
                    v65 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_180;
                  }
                  v94 = v61++;
                  v95 = *(_BYTE *)(v62 + v94);
                  *((_QWORD *)a2 + 1) = v61;
                  v65 |= (unint64_t)(v95 & 0x7F) << v92;
                  if ((v95 & 0x80) == 0)
                    break;
                  v92 += 7;
                  v14 = v93++ > 8;
                  if (v14)
                  {
                    v65 = 0;
                    goto LABEL_179;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v65 = 0;
LABEL_179:
                v2 = v94 + 1;
              }
              else
              {
                v63 = 0;
                v64 = 0;
                v65 = 0;
                while (1)
                {
                  v2 = v61 + 1;
                  *((_QWORD *)a2 + 1) = v61 + 1;
                  v66 = *(_BYTE *)(v62 + v61);
                  v65 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v61 = v2;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    v65 = 0;
                    break;
                  }
                }
              }
LABEL_180:
              *((_QWORD *)this + 3) = v65;
            }
            else if ((_DWORD)v20 == 202)
            {
              *((_WORD *)this + 32) |= 0x800u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v34 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v34 = v33 != 0;
              }
              *((_BYTE *)this + 61) = v34;
            }
            else
            {
LABEL_89:
              result = PB::Reader::skip(a2, v20, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
            }
            break;
        }
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaGravityAutocorrelationResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 64);
  if ((v4 & 0x40) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 44), 0x65u);
    v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 0x66u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 0x67u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 0x68u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 0x800) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 24), 0xC9u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x800) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 61), 0xCAu);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 60), 0xCBu);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 8), 0x12Du);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 16), 0x12Eu);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 56), 0x12Fu);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_12:
    if ((v4 & 0x80) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 0x131u);
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0x130u);
  if ((*(_WORD *)(v3 + 64) & 0x80) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 0x131u);
  return this;
}

uint64_t CMMsl::KappaGravityAutocorrelationResult::hash_value(CMMsl::KappaGravityAutocorrelationResult *this)
{
  __int16 v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *((_WORD *)this + 32);
  if ((v1 & 0x40) == 0)
  {
    v2 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_3;
LABEL_21:
    v4 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_6;
    goto LABEL_22;
  }
  v2 = *((int *)this + 11);
  if ((v1 & 0x10) == 0)
    goto LABEL_21;
LABEL_3:
  v3 = *((float *)this + 9);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_6:
    v5 = *((int *)this + 10);
    if ((v1 & 8) != 0)
      goto LABEL_7;
LABEL_23:
    v7 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_22:
  v5 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_23;
LABEL_7:
  v6 = *((float *)this + 8);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_10:
    v8 = *((_QWORD *)this + 3);
    if ((*((_WORD *)this + 32) & 0x800) != 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  v8 = 0;
  if ((*((_WORD *)this + 32) & 0x800) != 0)
  {
LABEL_11:
    v9 = *((unsigned __int8 *)this + 61);
    if ((*((_WORD *)this + 32) & 0x400) != 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  v9 = 0;
  if ((*((_WORD *)this + 32) & 0x400) != 0)
  {
LABEL_12:
    v10 = *((unsigned __int8 *)this + 60);
    if ((v1 & 1) != 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  v10 = 0;
  if ((v1 & 1) != 0)
  {
LABEL_13:
    v11 = *((_QWORD *)this + 1);
    if ((v1 & 2) != 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  v11 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_14:
    v12 = *((_QWORD *)this + 2);
    if ((*((_WORD *)this + 32) & 0x200) != 0)
      goto LABEL_15;
    goto LABEL_29;
  }
LABEL_28:
  v12 = 0;
  if ((*((_WORD *)this + 32) & 0x200) != 0)
  {
LABEL_15:
    v13 = *((int *)this + 14);
    if ((*((_WORD *)this + 32) & 0x100) != 0)
      goto LABEL_16;
    goto LABEL_30;
  }
LABEL_29:
  v13 = 0;
  if ((*((_WORD *)this + 32) & 0x100) != 0)
  {
LABEL_16:
    v14 = *((float *)this + 13);
    v15 = LODWORD(v14);
    if (v14 == 0.0)
      v15 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_19;
LABEL_31:
    v16 = 0;
    return v4 ^ v2 ^ v5 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v15 ^ v16;
  }
LABEL_30:
  v15 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_31;
LABEL_19:
  v16 = *((int *)this + 12);
  return v4 ^ v2 ^ v5 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v15 ^ v16;
}

void CMMsl::KappaHighSpeedCrashResult::~KappaHighSpeedCrashResult(CMMsl::KappaHighSpeedCrashResult *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::KappaHighSpeedCrashResult::KappaHighSpeedCrashResult(uint64_t this, const CMMsl::KappaHighSpeedCrashResult *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;

  *(_QWORD *)this = off_100352048;
  *(_DWORD *)(this + 68) = 0;
  v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 4) != 0)
  {
    v4 = *((_DWORD *)a2 + 5);
    v3 = 4;
    *(_DWORD *)(this + 68) = 4;
    *(_DWORD *)(this + 20) = v4;
    v2 = *((_DWORD *)a2 + 17);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *(_DWORD *)(this + 68) = v3;
    *(_DWORD *)(this + 16) = v5;
    v2 = *((_DWORD *)a2 + 17);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *(_DWORD *)(this + 68) = v3;
    *(_DWORD *)(this + 24) = v6;
    v2 = *((_DWORD *)a2 + 17);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x800) == 0)
        goto LABEL_9;
      goto LABEL_28;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 68) = v3;
  *(_QWORD *)(this + 8) = v7;
  v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x800) == 0)
  {
LABEL_9:
    if ((v2 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  v8 = *((_BYTE *)a2 + 56);
  v3 |= 0x800u;
  *(_DWORD *)(this + 68) = v3;
  *(_BYTE *)(this + 56) = v8;
  v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x1000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  v9 = *((_BYTE *)a2 + 57);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 68) = v3;
  *(_BYTE *)(this + 57) = v9;
  v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x100000) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  v10 = *((_BYTE *)a2 + 58);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 68) = v3;
  *(_BYTE *)(this + 58) = v10;
  v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x100000) == 0)
  {
LABEL_12:
    if ((v2 & 0x40000) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  v11 = *((_BYTE *)a2 + 65);
  v3 |= 0x100000u;
  *(_DWORD *)(this + 68) = v3;
  *(_BYTE *)(this + 65) = v11;
  v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x40000) == 0)
  {
LABEL_13:
    if ((v2 & 0x8000) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  v12 = *((_BYTE *)a2 + 63);
  v3 |= 0x40000u;
  *(_DWORD *)(this + 68) = v3;
  *(_BYTE *)(this + 63) = v12;
  v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x8000) == 0)
  {
LABEL_14:
    if ((v2 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  v13 = *((_BYTE *)a2 + 60);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 68) = v3;
  *(_BYTE *)(this + 60) = v13;
  v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x4000) == 0)
  {
LABEL_15:
    if ((v2 & 0x80000) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  v14 = *((_BYTE *)a2 + 59);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 68) = v3;
  *(_BYTE *)(this + 59) = v14;
  v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x80000) == 0)
  {
LABEL_16:
    if ((v2 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  v15 = *((_BYTE *)a2 + 64);
  v3 |= 0x80000u;
  *(_DWORD *)(this + 68) = v3;
  *(_BYTE *)(this + 64) = v15;
  v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x10000) == 0)
  {
LABEL_17:
    if ((v2 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_37;
  }
LABEL_36:
  v16 = *((_BYTE *)a2 + 61);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 68) = v3;
  *(_BYTE *)(this + 61) = v16;
  v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x20000) == 0)
  {
LABEL_18:
    if ((v2 & 0x400) == 0)
      goto LABEL_19;
    goto LABEL_38;
  }
LABEL_37:
  v17 = *((_BYTE *)a2 + 62);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 68) = v3;
  *(_BYTE *)(this + 62) = v17;
  v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x400) == 0)
  {
LABEL_19:
    if ((v2 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_39;
  }
LABEL_38:
  v18 = *((_DWORD *)a2 + 13);
  v3 |= 0x400u;
  *(_DWORD *)(this + 68) = v3;
  *(_DWORD *)(this + 52) = v18;
  v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x100) == 0)
  {
LABEL_20:
    if ((v2 & 0x20) == 0)
      goto LABEL_21;
    goto LABEL_40;
  }
LABEL_39:
  v19 = *((_DWORD *)a2 + 11);
  v3 |= 0x100u;
  *(_DWORD *)(this + 68) = v3;
  *(_DWORD *)(this + 44) = v19;
  v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x20) == 0)
  {
LABEL_21:
    if ((v2 & 0x10) == 0)
      goto LABEL_22;
    goto LABEL_41;
  }
LABEL_40:
  v20 = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *(_DWORD *)(this + 68) = v3;
  *(_DWORD *)(this + 32) = v20;
  v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x10) == 0)
  {
LABEL_22:
    if ((v2 & 0x200) == 0)
      goto LABEL_23;
    goto LABEL_42;
  }
LABEL_41:
  v21 = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *(_DWORD *)(this + 68) = v3;
  *(_DWORD *)(this + 28) = v21;
  v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x200) == 0)
  {
LABEL_23:
    if ((v2 & 0x40) == 0)
      goto LABEL_24;
    goto LABEL_43;
  }
LABEL_42:
  v22 = *((_DWORD *)a2 + 12);
  v3 |= 0x200u;
  *(_DWORD *)(this + 68) = v3;
  *(_DWORD *)(this + 48) = v22;
  v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x40) == 0)
  {
LABEL_24:
    if ((v2 & 0x80) == 0)
      return this;
LABEL_44:
    v24 = *((_DWORD *)a2 + 10);
    *(_DWORD *)(this + 68) = v3 | 0x80;
    *(_DWORD *)(this + 40) = v24;
    return this;
  }
LABEL_43:
  v23 = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *(_DWORD *)(this + 68) = v3;
  *(_DWORD *)(this + 36) = v23;
  if ((*((_DWORD *)a2 + 17) & 0x80) != 0)
    goto LABEL_44;
  return this;
}

CMMsl *CMMsl::KappaHighSpeedCrashResult::operator=(CMMsl *a1, const CMMsl::KappaHighSpeedCrashResult *a2)
{
  CMMsl::KappaHighSpeedCrashResult *v3;
  _BYTE v5[72];

  if (a1 != a2)
  {
    CMMsl::KappaHighSpeedCrashResult::KappaHighSpeedCrashResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaHighSpeedCrashResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaHighSpeedCrashResult *a2, CMMsl::KappaHighSpeedCrashResult *a3)
{
  int v3;
  int v4;
  int v5;
  float result;
  uint64_t v7;

  v3 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v3;
  v4 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 56);
  *((_BYTE *)this + 56) = *((_BYTE *)a2 + 56);
  *((_BYTE *)a2 + 56) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 57);
  *((_BYTE *)this + 57) = *((_BYTE *)a2 + 57);
  *((_BYTE *)a2 + 57) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 58);
  *((_BYTE *)this + 58) = *((_BYTE *)a2 + 58);
  *((_BYTE *)a2 + 58) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 65);
  *((_BYTE *)this + 65) = *((_BYTE *)a2 + 65);
  *((_BYTE *)a2 + 65) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 63);
  *((_BYTE *)this + 63) = *((_BYTE *)a2 + 63);
  *((_BYTE *)a2 + 63) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 60);
  *((_BYTE *)this + 60) = *((_BYTE *)a2 + 60);
  *((_BYTE *)a2 + 60) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 59);
  *((_BYTE *)this + 59) = *((_BYTE *)a2 + 59);
  *((_BYTE *)a2 + 59) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 64);
  *((_BYTE *)this + 64) = *((_BYTE *)a2 + 64);
  *((_BYTE *)a2 + 64) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 61);
  *((_BYTE *)this + 61) = *((_BYTE *)a2 + 61);
  *((_BYTE *)a2 + 61) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 62);
  *((_BYTE *)this + 62) = *((_BYTE *)a2 + 62);
  *((_BYTE *)a2 + 62) = v7;
  LODWORD(v7) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v7;
  LODWORD(v7) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v7;
  LODWORD(v7) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v7;
  LODWORD(v7) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v7;
  LODWORD(v7) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v7;
  LODWORD(v7) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v7;
  LODWORD(v7) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v7;
  return result;
}

float CMMsl::KappaHighSpeedCrashResult::KappaHighSpeedCrashResult(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100352048;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a2 + 68) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(_BYTE *)(a1 + 63) = *(_BYTE *)(a2 + 63);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_BYTE *)(a1 + 59) = *(_BYTE *)(a2 + 59);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 61) = *(_BYTE *)(a2 + 61);
  *(_BYTE *)(a1 + 62) = *(_BYTE *)(a2 + 62);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

CMMsl *CMMsl::KappaHighSpeedCrashResult::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::KappaHighSpeedCrashResult *v3;
  _BYTE v5[72];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaHighSpeedCrashResult::KappaHighSpeedCrashResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaHighSpeedCrashResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaHighSpeedCrashResult::formatText(CMMsl::KappaHighSpeedCrashResult *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x800) != 0)
  {
    PB::TextFormatter::format(a2, "crashDetectorDecision", *((_BYTE *)this + 56));
    v5 = *((_DWORD *)this + 17);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_26;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "detectorPostTriggerTimeOffsetWindow", *((float *)this + 4));
  v5 = *((_DWORD *)this + 17);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x1000) == 0)
      goto LABEL_5;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "detectorPreTriggerTimeOffsetWindow", *((float *)this + 5));
  v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x1000) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "earlyCrashDetectorDecision", *((_BYTE *)this + 57));
  v5 = *((_DWORD *)this + 17);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x2000) == 0)
      goto LABEL_7;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "epochLatchingCount", *((float *)this + 6));
  v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x2000) == 0)
  {
LABEL_7:
    if ((v5 & 0x4000) == 0)
      goto LABEL_8;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "hasAudioInEpoch", *((_BYTE *)this + 58));
  v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x4000) == 0)
  {
LABEL_8:
    if ((v5 & 0x8000) == 0)
      goto LABEL_9;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "isAudio", *((_BYTE *)this + 59));
  v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x8000) == 0)
  {
LABEL_9:
    if ((v5 & 0x10000) == 0)
      goto LABEL_10;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "isBaro", *((_BYTE *)this + 60));
  v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x10000) == 0)
  {
LABEL_10:
    if ((v5 & 0x20000) == 0)
      goto LABEL_11;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "isDescalationDecided", *((_BYTE *)this + 61));
  v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x20000) == 0)
  {
LABEL_11:
    if ((v5 & 0x40000) == 0)
      goto LABEL_12;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "isDescalationRequired", *((_BYTE *)this + 62));
  v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x40000) == 0)
  {
LABEL_12:
    if ((v5 & 0x80000) == 0)
      goto LABEL_13;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "isFreeFall", *((_BYTE *)this + 63));
  v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x80000) == 0)
  {
LABEL_13:
    if ((v5 & 0x100000) == 0)
      goto LABEL_14;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "isGPS", *((_BYTE *)this + 64));
  v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x100000) == 0)
  {
LABEL_14:
    if ((v5 & 0x10) == 0)
      goto LABEL_15;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "isPulse", *((_BYTE *)this + 65));
  v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x10) == 0)
  {
LABEL_15:
    if ((v5 & 0x20) == 0)
      goto LABEL_16;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "latchedIsAudio", *((_DWORD *)this + 7));
  v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x20) == 0)
  {
LABEL_16:
    if ((v5 & 0x40) == 0)
      goto LABEL_17;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "latchedIsBaro", *((_DWORD *)this + 8));
  v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x40) == 0)
  {
LABEL_17:
    if ((v5 & 0x80) == 0)
      goto LABEL_18;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "latchedIsDescalationDecided", *((_DWORD *)this + 9));
  v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x80) == 0)
  {
LABEL_18:
    if ((v5 & 0x100) == 0)
      goto LABEL_19;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "latchedIsDescalationRequired", *((_DWORD *)this + 10));
  v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x100) == 0)
  {
LABEL_19:
    if ((v5 & 0x200) == 0)
      goto LABEL_20;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "latchedIsFreeFall", *((_DWORD *)this + 11));
  v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x200) == 0)
  {
LABEL_20:
    if ((v5 & 0x400) == 0)
      goto LABEL_21;
LABEL_43:
    PB::TextFormatter::format(a2, "latchedIsPulse", *((_DWORD *)this + 13));
    if ((*((_DWORD *)this + 17) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_22;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "latchedIsGPS", *((_DWORD *)this + 12));
  v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x400) != 0)
    goto LABEL_43;
LABEL_21:
  if ((v5 & 1) != 0)
LABEL_22:
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaHighSpeedCrashResult::readFrom(CMMsl::KappaHighSpeedCrashResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int i;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  int v31;
  BOOL v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  int v39;
  BOOL v40;
  uint64_t result;
  unint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  char v53;
  unint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  char v59;
  unint64_t v60;
  uint64_t v61;
  char v62;
  unsigned int v63;
  uint64_t v64;
  char v65;
  unint64_t v66;
  uint64_t v67;
  char v68;
  unsigned int v69;
  uint64_t v70;
  char v71;
  unint64_t v72;
  uint64_t v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  char v77;
  int v78;
  BOOL v79;
  int v80;
  BOOL v81;
  int v82;
  BOOL v83;
  int v84;
  BOOL v85;
  int v86;
  BOOL v87;
  int v88;
  BOOL v89;
  char v90;
  unsigned int v91;
  unint64_t v92;
  char v93;
  char v94;
  unsigned int v95;
  unint64_t v96;
  char v97;
  char v98;
  unsigned int v99;
  unint64_t v100;
  char v101;
  char v102;
  unsigned int v103;
  unint64_t v104;
  char v105;
  char v106;
  unsigned int v107;
  unint64_t v108;
  char v109;
  char v110;
  unsigned int v111;
  unint64_t v112;
  char v113;
  char v114;
  unsigned int v115;
  unint64_t v116;
  char v117;
  char v118;
  unsigned int v119;
  unint64_t v120;
  char v121;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  for (i = *((unsigned __int8 *)a2 + 24); v2 < v3 && i == 0; i = *((unsigned __int8 *)a2 + 24))
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          v11 = 0;
          goto LABEL_20;
        }
      }
      i = 1;
      *((_BYTE *)a2 + 24) = 1;
      return i == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      i = 0;
      return i == 0;
    }
    v20 = v11 >> 3;
    if ((int)(v11 >> 3) > 200)
    {
      switch((int)v20)
      {
        case 301:
          *((_DWORD *)this + 17) |= 0x100000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 >= *((_QWORD *)a2 + 2))
          {
            v28 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v27 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v28 = v27 != 0;
          }
          *((_BYTE *)this + 65) = v28;
          break;
        case 302:
          *((_DWORD *)this + 17) |= 0x40000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 >= *((_QWORD *)a2 + 2))
          {
            v79 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v78 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v79 = v78 != 0;
          }
          *((_BYTE *)this + 63) = v79;
          break;
        case 303:
          *((_DWORD *)this + 17) |= 0x8000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 >= *((_QWORD *)a2 + 2))
          {
            v81 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v80 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v81 = v80 != 0;
          }
          *((_BYTE *)this + 60) = v81;
          break;
        case 304:
          *((_DWORD *)this + 17) |= 0x4000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 >= *((_QWORD *)a2 + 2))
          {
            v83 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v82 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v83 = v82 != 0;
          }
          *((_BYTE *)this + 59) = v83;
          break;
        case 305:
          *((_DWORD *)this + 17) |= 0x80000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 >= *((_QWORD *)a2 + 2))
          {
            v85 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v84 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v85 = v84 != 0;
          }
          *((_BYTE *)this + 64) = v85;
          break;
        case 306:
          *((_DWORD *)this + 17) |= 0x10000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 >= *((_QWORD *)a2 + 2))
          {
            v87 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v86 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v87 = v86 != 0;
          }
          *((_BYTE *)this + 61) = v87;
          break;
        case 307:
          *((_DWORD *)this + 17) |= 0x20000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 >= *((_QWORD *)a2 + 2))
          {
            v89 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v88 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v89 = v88 != 0;
          }
          *((_BYTE *)this + 62) = v89;
          break;
        default:
          switch((int)v20)
          {
            case 401:
              *((_DWORD *)this + 17) |= 0x400u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v94 = 0;
                v95 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_207;
                  }
                  v96 = v21++;
                  v97 = *(_BYTE *)(v22 + v96);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v97 & 0x7F) << v94;
                  if ((v97 & 0x80) == 0)
                    break;
                  v94 += 7;
                  v14 = v95++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
                    goto LABEL_206;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
LABEL_206:
                v2 = v96 + 1;
              }
              else
              {
                v23 = 0;
                v24 = 0;
                v25 = 0;
                while (1)
                {
                  v2 = v21 + 1;
                  *((_QWORD *)a2 + 1) = v21 + 1;
                  v26 = *(_BYTE *)(v22 + v21);
                  v25 |= (unint64_t)(v26 & 0x7F) << v23;
                  if ((v26 & 0x80) == 0)
                    break;
                  v23 += 7;
                  v21 = v2;
                  v14 = v24++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
                    break;
                  }
                }
              }
LABEL_207:
              *((_DWORD *)this + 13) = v25;
              break;
            case 402:
              *((_DWORD *)this + 17) |= 0x100u;
              v42 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v43 = *(_QWORD *)a2;
              if (v42 > 0xFFFFFFFFFFFFFFF5 || v42 + 10 > v2)
              {
                v98 = 0;
                v99 = 0;
                v46 = 0;
                if (v2 <= v42)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v42)
                  {
                    LODWORD(v46) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_212;
                  }
                  v100 = v42++;
                  v101 = *(_BYTE *)(v43 + v100);
                  *((_QWORD *)a2 + 1) = v42;
                  v46 |= (unint64_t)(v101 & 0x7F) << v98;
                  if ((v101 & 0x80) == 0)
                    break;
                  v98 += 7;
                  v14 = v99++ > 8;
                  if (v14)
                  {
                    LODWORD(v46) = 0;
                    goto LABEL_211;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v46) = 0;
LABEL_211:
                v2 = v100 + 1;
              }
              else
              {
                v44 = 0;
                v45 = 0;
                v46 = 0;
                while (1)
                {
                  v2 = v42 + 1;
                  *((_QWORD *)a2 + 1) = v42 + 1;
                  v47 = *(_BYTE *)(v43 + v42);
                  v46 |= (unint64_t)(v47 & 0x7F) << v44;
                  if ((v47 & 0x80) == 0)
                    break;
                  v44 += 7;
                  v42 = v2;
                  v14 = v45++ > 8;
                  if (v14)
                  {
                    LODWORD(v46) = 0;
                    break;
                  }
                }
              }
LABEL_212:
              *((_DWORD *)this + 11) = v46;
              break;
            case 403:
              *((_DWORD *)this + 17) |= 0x20u;
              v48 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v49 = *(_QWORD *)a2;
              if (v48 > 0xFFFFFFFFFFFFFFF5 || v48 + 10 > v2)
              {
                v102 = 0;
                v103 = 0;
                v52 = 0;
                if (v2 <= v48)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v48)
                  {
                    LODWORD(v52) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_217;
                  }
                  v104 = v48++;
                  v105 = *(_BYTE *)(v49 + v104);
                  *((_QWORD *)a2 + 1) = v48;
                  v52 |= (unint64_t)(v105 & 0x7F) << v102;
                  if ((v105 & 0x80) == 0)
                    break;
                  v102 += 7;
                  v14 = v103++ > 8;
                  if (v14)
                  {
                    LODWORD(v52) = 0;
                    goto LABEL_216;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v52) = 0;
LABEL_216:
                v2 = v104 + 1;
              }
              else
              {
                v50 = 0;
                v51 = 0;
                v52 = 0;
                while (1)
                {
                  v2 = v48 + 1;
                  *((_QWORD *)a2 + 1) = v48 + 1;
                  v53 = *(_BYTE *)(v49 + v48);
                  v52 |= (unint64_t)(v53 & 0x7F) << v50;
                  if ((v53 & 0x80) == 0)
                    break;
                  v50 += 7;
                  v48 = v2;
                  v14 = v51++ > 8;
                  if (v14)
                  {
                    LODWORD(v52) = 0;
                    break;
                  }
                }
              }
LABEL_217:
              *((_DWORD *)this + 8) = v52;
              break;
            case 404:
              *((_DWORD *)this + 17) |= 0x10u;
              v54 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v55 = *(_QWORD *)a2;
              if (v54 > 0xFFFFFFFFFFFFFFF5 || v54 + 10 > v2)
              {
                v106 = 0;
                v107 = 0;
                v58 = 0;
                if (v2 <= v54)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v54)
                  {
                    LODWORD(v58) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_222;
                  }
                  v108 = v54++;
                  v109 = *(_BYTE *)(v55 + v108);
                  *((_QWORD *)a2 + 1) = v54;
                  v58 |= (unint64_t)(v109 & 0x7F) << v106;
                  if ((v109 & 0x80) == 0)
                    break;
                  v106 += 7;
                  v14 = v107++ > 8;
                  if (v14)
                  {
                    LODWORD(v58) = 0;
                    goto LABEL_221;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v58) = 0;
LABEL_221:
                v2 = v108 + 1;
              }
              else
              {
                v56 = 0;
                v57 = 0;
                v58 = 0;
                while (1)
                {
                  v2 = v54 + 1;
                  *((_QWORD *)a2 + 1) = v54 + 1;
                  v59 = *(_BYTE *)(v55 + v54);
                  v58 |= (unint64_t)(v59 & 0x7F) << v56;
                  if ((v59 & 0x80) == 0)
                    break;
                  v56 += 7;
                  v54 = v2;
                  v14 = v57++ > 8;
                  if (v14)
                  {
                    LODWORD(v58) = 0;
                    break;
                  }
                }
              }
LABEL_222:
              *((_DWORD *)this + 7) = v58;
              break;
            case 405:
              *((_DWORD *)this + 17) |= 0x200u;
              v60 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v61 = *(_QWORD *)a2;
              if (v60 > 0xFFFFFFFFFFFFFFF5 || v60 + 10 > v2)
              {
                v110 = 0;
                v111 = 0;
                v64 = 0;
                if (v2 <= v60)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v60)
                  {
                    LODWORD(v64) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_227;
                  }
                  v112 = v60++;
                  v113 = *(_BYTE *)(v61 + v112);
                  *((_QWORD *)a2 + 1) = v60;
                  v64 |= (unint64_t)(v113 & 0x7F) << v110;
                  if ((v113 & 0x80) == 0)
                    break;
                  v110 += 7;
                  v14 = v111++ > 8;
                  if (v14)
                  {
                    LODWORD(v64) = 0;
                    goto LABEL_226;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v64) = 0;
LABEL_226:
                v2 = v112 + 1;
              }
              else
              {
                v62 = 0;
                v63 = 0;
                v64 = 0;
                while (1)
                {
                  v2 = v60 + 1;
                  *((_QWORD *)a2 + 1) = v60 + 1;
                  v65 = *(_BYTE *)(v61 + v60);
                  v64 |= (unint64_t)(v65 & 0x7F) << v62;
                  if ((v65 & 0x80) == 0)
                    break;
                  v62 += 7;
                  v60 = v2;
                  v14 = v63++ > 8;
                  if (v14)
                  {
                    LODWORD(v64) = 0;
                    break;
                  }
                }
              }
LABEL_227:
              *((_DWORD *)this + 12) = v64;
              break;
            case 406:
              *((_DWORD *)this + 17) |= 0x40u;
              v66 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v67 = *(_QWORD *)a2;
              if (v66 > 0xFFFFFFFFFFFFFFF5 || v66 + 10 > v2)
              {
                v114 = 0;
                v115 = 0;
                v70 = 0;
                if (v2 <= v66)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v66)
                  {
                    LODWORD(v70) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_232;
                  }
                  v116 = v66++;
                  v117 = *(_BYTE *)(v67 + v116);
                  *((_QWORD *)a2 + 1) = v66;
                  v70 |= (unint64_t)(v117 & 0x7F) << v114;
                  if ((v117 & 0x80) == 0)
                    break;
                  v114 += 7;
                  v14 = v115++ > 8;
                  if (v14)
                  {
                    LODWORD(v70) = 0;
                    goto LABEL_231;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v70) = 0;
LABEL_231:
                v2 = v116 + 1;
              }
              else
              {
                v68 = 0;
                v69 = 0;
                v70 = 0;
                while (1)
                {
                  v2 = v66 + 1;
                  *((_QWORD *)a2 + 1) = v66 + 1;
                  v71 = *(_BYTE *)(v67 + v66);
                  v70 |= (unint64_t)(v71 & 0x7F) << v68;
                  if ((v71 & 0x80) == 0)
                    break;
                  v68 += 7;
                  v66 = v2;
                  v14 = v69++ > 8;
                  if (v14)
                  {
                    LODWORD(v70) = 0;
                    break;
                  }
                }
              }
LABEL_232:
              *((_DWORD *)this + 9) = v70;
              break;
            case 407:
              *((_DWORD *)this + 17) |= 0x80u;
              v72 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v73 = *(_QWORD *)a2;
              if (v72 > 0xFFFFFFFFFFFFFFF5 || v72 + 10 > v2)
              {
                v118 = 0;
                v119 = 0;
                v76 = 0;
                if (v2 <= v72)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v72)
                  {
                    LODWORD(v76) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_237;
                  }
                  v120 = v72++;
                  v121 = *(_BYTE *)(v73 + v120);
                  *((_QWORD *)a2 + 1) = v72;
                  v76 |= (unint64_t)(v121 & 0x7F) << v118;
                  if ((v121 & 0x80) == 0)
                    break;
                  v118 += 7;
                  v14 = v119++ > 8;
                  if (v14)
                  {
                    LODWORD(v76) = 0;
                    goto LABEL_236;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v76) = 0;
LABEL_236:
                v2 = v120 + 1;
              }
              else
              {
                v74 = 0;
                v75 = 0;
                v76 = 0;
                while (1)
                {
                  v2 = v72 + 1;
                  *((_QWORD *)a2 + 1) = v72 + 1;
                  v77 = *(_BYTE *)(v73 + v72);
                  v76 |= (unint64_t)(v77 & 0x7F) << v74;
                  if ((v77 & 0x80) == 0)
                    break;
                  v74 += 7;
                  v72 = v2;
                  v14 = v75++ > 8;
                  if (v14)
                  {
                    LODWORD(v76) = 0;
                    break;
                  }
                }
              }
LABEL_237:
              *((_DWORD *)this + 10) = v76;
              break;
            default:
              if ((_DWORD)v20 != 201)
                goto LABEL_64;
              *((_DWORD *)this + 17) |= 0x2000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v32 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v31 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v32 = v31 != 0;
              }
              *((_BYTE *)this + 58) = v32;
              break;
          }
          break;
      }
      goto LABEL_238;
    }
    if ((int)v20 > 100)
    {
      switch((_DWORD)v20)
      {
        case 'e':
          *((_DWORD *)this + 17) |= 1u;
          v33 = *((_QWORD *)a2 + 1);
          v2 = *((_QWORD *)a2 + 2);
          v34 = *(_QWORD *)a2;
          if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
          {
            v90 = 0;
            v91 = 0;
            v37 = 0;
            if (v2 <= v33)
              v2 = *((_QWORD *)a2 + 1);
            while (1)
            {
              if (v2 == v33)
              {
                v37 = 0;
                *((_BYTE *)a2 + 24) = 1;
                goto LABEL_202;
              }
              v92 = v33++;
              v93 = *(_BYTE *)(v34 + v92);
              *((_QWORD *)a2 + 1) = v33;
              v37 |= (unint64_t)(v93 & 0x7F) << v90;
              if ((v93 & 0x80) == 0)
                break;
              v90 += 7;
              v14 = v91++ > 8;
              if (v14)
              {
                v37 = 0;
                goto LABEL_201;
              }
            }
            if (*((_BYTE *)a2 + 24))
              v37 = 0;
LABEL_201:
            v2 = v92 + 1;
          }
          else
          {
            v35 = 0;
            v36 = 0;
            v37 = 0;
            while (1)
            {
              v2 = v33 + 1;
              *((_QWORD *)a2 + 1) = v33 + 1;
              v38 = *(_BYTE *)(v34 + v33);
              v37 |= (unint64_t)(v38 & 0x7F) << v35;
              if ((v38 & 0x80) == 0)
                break;
              v35 += 7;
              v33 = v2;
              v14 = v36++ > 8;
              if (v14)
              {
                v37 = 0;
                break;
              }
            }
          }
LABEL_202:
          *((_QWORD *)this + 1) = v37;
          break;
        case 'f':
          *((_DWORD *)this + 17) |= 0x800u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 >= *((_QWORD *)a2 + 2))
          {
            v40 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v39 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v40 = v39 != 0;
          }
          *((_BYTE *)this + 56) = v40;
          break;
        case 'g':
          *((_DWORD *)this + 17) |= 0x1000u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 >= *((_QWORD *)a2 + 2))
          {
            v30 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v29 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v30 = v29 != 0;
          }
          *((_BYTE *)this + 57) = v30;
          break;
        default:
LABEL_64:
          result = PB::Reader::skip(a2, v20, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
    }
    else
    {
      switch((_DWORD)v20)
      {
        case 1:
          *((_DWORD *)this + 17) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
            goto LABEL_197;
          }
          break;
        case 2:
          *((_DWORD *)this + 17) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
            goto LABEL_197;
          }
          break;
        case 3:
          *((_DWORD *)this + 17) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_197:
            v2 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v2;
            goto LABEL_238;
          }
          break;
        default:
          goto LABEL_64;
      }
      *((_BYTE *)a2 + 24) = 1;
    }
LABEL_238:
    v3 = *((_QWORD *)a2 + 2);
  }
  return i == 0;
}

uint64_t CMMsl::KappaHighSpeedCrashResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 68);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 20), 1u);
    v4 = *(_DWORD *)(v3 + 68);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_25;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 2u);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 3u);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 8), 0x65u);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x1000) == 0)
      goto LABEL_7;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 56), 0x66u);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x1000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 57), 0x67u);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x100000) == 0)
      goto LABEL_9;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 58), 0xC9u);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x100000) == 0)
  {
LABEL_9:
    if ((v4 & 0x40000) == 0)
      goto LABEL_10;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 65), 0x12Du);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x40000) == 0)
  {
LABEL_10:
    if ((v4 & 0x8000) == 0)
      goto LABEL_11;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 63), 0x12Eu);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x8000) == 0)
  {
LABEL_11:
    if ((v4 & 0x4000) == 0)
      goto LABEL_12;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 60), 0x12Fu);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x4000) == 0)
  {
LABEL_12:
    if ((v4 & 0x80000) == 0)
      goto LABEL_13;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 59), 0x130u);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x80000) == 0)
  {
LABEL_13:
    if ((v4 & 0x10000) == 0)
      goto LABEL_14;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 64), 0x131u);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x10000) == 0)
  {
LABEL_14:
    if ((v4 & 0x20000) == 0)
      goto LABEL_15;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 61), 0x132u);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x20000) == 0)
  {
LABEL_15:
    if ((v4 & 0x400) == 0)
      goto LABEL_16;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 62), 0x133u);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x400) == 0)
  {
LABEL_16:
    if ((v4 & 0x100) == 0)
      goto LABEL_17;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 52), 0x191u);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_17:
    if ((v4 & 0x20) == 0)
      goto LABEL_18;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 44), 0x192u);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x20) == 0)
  {
LABEL_18:
    if ((v4 & 0x10) == 0)
      goto LABEL_19;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 0x193u);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_19:
    if ((v4 & 0x200) == 0)
      goto LABEL_20;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 0x194u);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x200) == 0)
  {
LABEL_20:
    if ((v4 & 0x40) == 0)
      goto LABEL_21;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 0x195u);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x40) == 0)
  {
LABEL_21:
    if ((v4 & 0x80) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 0x197u);
  }
LABEL_42:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 36), 0x196u);
  if ((*(_DWORD *)(v3 + 68) & 0x80) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 0x197u);
  return this;
}

uint64_t CMMsl::KappaHighSpeedCrashResult::hash_value(CMMsl::KappaHighSpeedCrashResult *this)
{
  int v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;

  v1 = *((_DWORD *)this + 17);
  if ((v1 & 4) == 0)
  {
    v2 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_3;
LABEL_30:
    v4 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_6;
LABEL_31:
    v6 = 0;
    if ((v1 & 1) != 0)
      goto LABEL_9;
    goto LABEL_32;
  }
  v25 = *((float *)this + 5);
  v2 = LODWORD(v25);
  if (v25 == 0.0)
    v2 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_30;
LABEL_3:
  v3 = *((float *)this + 4);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_31;
LABEL_6:
  v5 = *((float *)this + 6);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 1) != 0)
  {
LABEL_9:
    v7 = *((_QWORD *)this + 1);
    if ((v1 & 0x800) != 0)
      goto LABEL_10;
    goto LABEL_33;
  }
LABEL_32:
  v7 = 0;
  if ((v1 & 0x800) != 0)
  {
LABEL_10:
    v8 = *((unsigned __int8 *)this + 56);
    if ((v1 & 0x1000) != 0)
      goto LABEL_11;
    goto LABEL_34;
  }
LABEL_33:
  v8 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_11:
    v9 = *((unsigned __int8 *)this + 57);
    if ((v1 & 0x2000) != 0)
      goto LABEL_12;
    goto LABEL_35;
  }
LABEL_34:
  v9 = 0;
  if ((v1 & 0x2000) != 0)
  {
LABEL_12:
    v10 = *((unsigned __int8 *)this + 58);
    if ((v1 & 0x100000) != 0)
      goto LABEL_13;
    goto LABEL_36;
  }
LABEL_35:
  v10 = 0;
  if ((v1 & 0x100000) != 0)
  {
LABEL_13:
    v11 = *((unsigned __int8 *)this + 65);
    if ((v1 & 0x40000) != 0)
      goto LABEL_14;
    goto LABEL_37;
  }
LABEL_36:
  v11 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_14:
    v12 = *((unsigned __int8 *)this + 63);
    if ((v1 & 0x8000) != 0)
      goto LABEL_15;
    goto LABEL_38;
  }
LABEL_37:
  v12 = 0;
  if ((v1 & 0x8000) != 0)
  {
LABEL_15:
    v13 = *((unsigned __int8 *)this + 60);
    if ((v1 & 0x4000) != 0)
      goto LABEL_16;
    goto LABEL_39;
  }
LABEL_38:
  v13 = 0;
  if ((v1 & 0x4000) != 0)
  {
LABEL_16:
    v14 = *((unsigned __int8 *)this + 59);
    if ((v1 & 0x80000) != 0)
      goto LABEL_17;
    goto LABEL_40;
  }
LABEL_39:
  v14 = 0;
  if ((v1 & 0x80000) != 0)
  {
LABEL_17:
    v15 = *((unsigned __int8 *)this + 64);
    if ((v1 & 0x10000) != 0)
      goto LABEL_18;
    goto LABEL_41;
  }
LABEL_40:
  v15 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_18:
    v16 = *((unsigned __int8 *)this + 61);
    if ((v1 & 0x20000) != 0)
      goto LABEL_19;
    goto LABEL_42;
  }
LABEL_41:
  v16 = 0;
  if ((v1 & 0x20000) != 0)
  {
LABEL_19:
    v17 = *((unsigned __int8 *)this + 62);
    if ((v1 & 0x400) != 0)
      goto LABEL_20;
    goto LABEL_43;
  }
LABEL_42:
  v17 = 0;
  if ((v1 & 0x400) != 0)
  {
LABEL_20:
    v18 = *((unsigned int *)this + 13);
    if ((v1 & 0x100) != 0)
      goto LABEL_21;
    goto LABEL_44;
  }
LABEL_43:
  v18 = 0;
  if ((v1 & 0x100) != 0)
  {
LABEL_21:
    v19 = *((unsigned int *)this + 11);
    if ((v1 & 0x20) != 0)
      goto LABEL_22;
    goto LABEL_45;
  }
LABEL_44:
  v19 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_22:
    v20 = *((unsigned int *)this + 8);
    if ((v1 & 0x10) != 0)
      goto LABEL_23;
    goto LABEL_46;
  }
LABEL_45:
  v20 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_23:
    v21 = *((unsigned int *)this + 7);
    if ((v1 & 0x200) != 0)
      goto LABEL_24;
    goto LABEL_47;
  }
LABEL_46:
  v21 = 0;
  if ((v1 & 0x200) != 0)
  {
LABEL_24:
    v22 = *((unsigned int *)this + 12);
    if ((v1 & 0x40) != 0)
      goto LABEL_25;
LABEL_48:
    v23 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_26;
LABEL_49:
    v24 = 0;
    return v4 ^ v2 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24;
  }
LABEL_47:
  v22 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_48;
LABEL_25:
  v23 = *((unsigned int *)this + 9);
  if ((v1 & 0x80) == 0)
    goto LABEL_49;
LABEL_26:
  v24 = *((unsigned int *)this + 10);
  return v4 ^ v2 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24;
}

void CMMsl::KappaLackOfMotionResult::~KappaLackOfMotionResult(CMMsl::KappaLackOfMotionResult *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::KappaLackOfMotionResult::KappaLackOfMotionResult(uint64_t this, const CMMsl::KappaLackOfMotionResult *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  char v12;
  char v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  char v22;

  *(_QWORD *)this = off_100352080;
  *(_DWORD *)(this + 92) = 0;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x200) != 0)
  {
    v4 = *((_DWORD *)a2 + 15);
    v3 = 512;
    *(_DWORD *)(this + 92) = 512;
    *(_DWORD *)(this + 60) = v4;
    v2 = *((_DWORD *)a2 + 23);
    if ((v2 & 0x4000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x4000) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 20);
    v3 |= 0x4000u;
    *(_DWORD *)(this + 92) = v3;
    *(_DWORD *)(this + 80) = v5;
    v2 = *((_DWORD *)a2 + 23);
  }
LABEL_6:
  if ((v2 & 0x400) != 0)
  {
    v6 = *((_DWORD *)a2 + 16);
    v3 |= 0x400u;
    *(_DWORD *)(this + 92) = v3;
    *(_DWORD *)(this + 64) = v6;
    v2 = *((_DWORD *)a2 + 23);
    if ((v2 & 0x8000) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        goto LABEL_9;
      goto LABEL_26;
    }
  }
  else if ((v2 & 0x8000) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 21);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 84) = v7;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  v8 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *(_DWORD *)(this + 92) = v3;
  *(_QWORD *)(this + 24) = v8;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_28;
  }
LABEL_27:
  v9 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_DWORD *)(this + 92) = v3;
  *(_QWORD *)(this + 32) = v9;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_28:
  v10 = *((_DWORD *)a2 + 19);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 76) = v10;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x40000) == 0)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  v11 = *((_DWORD *)a2 + 14);
  v3 |= 0x100u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 56) = v11;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x40000) == 0)
  {
LABEL_13:
    if ((v2 & 0x20000) == 0)
      goto LABEL_14;
    goto LABEL_31;
  }
LABEL_30:
  v12 = *((_BYTE *)a2 + 90);
  v3 |= 0x40000u;
  *(_DWORD *)(this + 92) = v3;
  *(_BYTE *)(this + 90) = v12;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x20000) == 0)
  {
LABEL_14:
    if ((v2 & 0x1000) == 0)
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_31:
  v13 = *((_BYTE *)a2 + 89);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 92) = v3;
  *(_BYTE *)(this + 89) = v13;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x1000) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_33;
  }
LABEL_32:
  v14 = *((_DWORD *)a2 + 18);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 72) = v14;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x800) == 0)
  {
LABEL_16:
    if ((v2 & 2) == 0)
      goto LABEL_17;
    goto LABEL_34;
  }
LABEL_33:
  v15 = *((_DWORD *)a2 + 17);
  v3 |= 0x800u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 68) = v15;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 2) == 0)
  {
LABEL_17:
    if ((v2 & 1) == 0)
      goto LABEL_18;
    goto LABEL_35;
  }
LABEL_34:
  v16 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 92) = v3;
  *(_QWORD *)(this + 16) = v16;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 1) == 0)
  {
LABEL_18:
    if ((v2 & 0x10) == 0)
      goto LABEL_19;
    goto LABEL_36;
  }
LABEL_35:
  v17 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 92) = v3;
  *(_QWORD *)(this + 8) = v17;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x10) == 0)
  {
LABEL_19:
    if ((v2 & 0x40) == 0)
      goto LABEL_20;
    goto LABEL_37;
  }
LABEL_36:
  v18 = *((_DWORD *)a2 + 10);
  v3 |= 0x10u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 40) = v18;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x40) == 0)
  {
LABEL_20:
    if ((v2 & 0x80) == 0)
      goto LABEL_21;
    goto LABEL_38;
  }
LABEL_37:
  v19 = *((_DWORD *)a2 + 12);
  v3 |= 0x40u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 48) = v19;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x80) == 0)
  {
LABEL_21:
    if ((v2 & 0x20) == 0)
      goto LABEL_22;
    goto LABEL_39;
  }
LABEL_38:
  v20 = *((_DWORD *)a2 + 13);
  v3 |= 0x80u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 52) = v20;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x20) == 0)
  {
LABEL_22:
    if ((v2 & 0x10000) == 0)
      return this;
LABEL_40:
    v22 = *((_BYTE *)a2 + 88);
    *(_DWORD *)(this + 92) = v3 | 0x10000;
    *(_BYTE *)(this + 88) = v22;
    return this;
  }
LABEL_39:
  v21 = *((_DWORD *)a2 + 11);
  v3 |= 0x20u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 44) = v21;
  if ((*((_DWORD *)a2 + 23) & 0x10000) != 0)
    goto LABEL_40;
  return this;
}

CMMsl *CMMsl::KappaLackOfMotionResult::operator=(CMMsl *a1, const CMMsl::KappaLackOfMotionResult *a2)
{
  CMMsl::KappaLackOfMotionResult *v3;
  _BYTE v5[96];

  if (a1 != a2)
  {
    CMMsl::KappaLackOfMotionResult::KappaLackOfMotionResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaLackOfMotionResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaLackOfMotionResult *a2, CMMsl::KappaLackOfMotionResult *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  float result;

  v3 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v3;
  v4 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  v5 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v5;
  v6 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v6;
  v7 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v7;
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v9;
  LODWORD(v9) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v9;
  LODWORD(v9) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v9;
  LOBYTE(v9) = *((_BYTE *)this + 90);
  *((_BYTE *)this + 90) = *((_BYTE *)a2 + 90);
  *((_BYTE *)a2 + 90) = v9;
  LOBYTE(v9) = *((_BYTE *)this + 89);
  *((_BYTE *)this + 89) = *((_BYTE *)a2 + 89);
  *((_BYTE *)a2 + 89) = v9;
  LODWORD(v9) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v9;
  LODWORD(v9) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v9;
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v10;
  v11 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v11;
  v12 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v12;
  v13 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v13;
  v14 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v14;
  result = *((float *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((float *)a2 + 11) = result;
  LOBYTE(v11) = *((_BYTE *)this + 88);
  *((_BYTE *)this + 88) = *((_BYTE *)a2 + 88);
  *((_BYTE *)a2 + 88) = v11;
  return result;
}

float CMMsl::KappaLackOfMotionResult::KappaLackOfMotionResult(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100352080;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 92) = 0;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 90) = *(_BYTE *)(a2 + 90);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  result = *(float *)(a2 + 44);
  *(float *)(a1 + 44) = result;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  return result;
}

CMMsl *CMMsl::KappaLackOfMotionResult::operator=(CMMsl *this, uint64_t a2, CMMsl::KappaLackOfMotionResult *a3)
{
  void (**v5)(CMMsl::KappaLackOfMotionResult *__hidden);
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  __int16 v15;
  int v16;

  if (this != (CMMsl *)a2)
  {
    v5 = off_100352080;
    v16 = *(_DWORD *)(a2 + 92);
    *(_DWORD *)(a2 + 92) = 0;
    v10 = *(_QWORD *)(a2 + 60);
    v13 = *(_QWORD *)(a2 + 80);
    v7 = *(_OWORD *)(a2 + 24);
    v12 = *(_DWORD *)(a2 + 76);
    v9 = *(_DWORD *)(a2 + 56);
    v15 = *(_WORD *)(a2 + 89);
    v11 = *(_QWORD *)(a2 + 68);
    v6 = *(_OWORD *)(a2 + 8);
    v8 = *(_OWORD *)(a2 + 40);
    v14 = *(_BYTE *)(a2 + 88);
    CMMsl::swap(this, (CMMsl::KappaLackOfMotionResult *)&v5, a3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return this;
}

uint64_t CMMsl::KappaLackOfMotionResult::formatText(CMMsl::KappaLackOfMotionResult *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "gpsDeltaTimestamp", *((_QWORD *)this + 1));
    v5 = *((_DWORD *)this + 23);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_24;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "gpsDeltaTimestampSeconds", *((float *)this + 10));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "gpsIsRealSample", *((float *)this + 11));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "gpsSpeedMetersPerSecond", *((float *)this + 12));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 2) == 0)
      goto LABEL_7;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "gpsSpeedMilesPerHour", *((float *)this + 13));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 2) == 0)
  {
LABEL_7:
    if ((v5 & 0x10000) == 0)
      goto LABEL_8;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "gpsTimestamp", *((_QWORD *)this + 2));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x10000) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "loggedAtEpoch", *((_BYTE *)this + 88));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x20000) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "movingGpsCount", *((_DWORD *)this + 14));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x20000) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "movingGpsCountResetRequired", *((_BYTE *)this + 89));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "movingSpeedMetersPerSecondThreshold", *((float *)this + 15));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "movingSpeedMetersPerSecondThresholdFromSydneyB", *((float *)this + 16));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "numLowOrFakeSamplesInHistory", *((_DWORD *)this + 17));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "numSamplesInHistory", *((_DWORD *)this + 18));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x40000) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "staticGpsCount", *((_DWORD *)this + 19));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x40000) == 0)
  {
LABEL_16:
    if ((v5 & 0x4000) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "staticGpsCountResetRequired", *((_BYTE *)this + 90));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x4000) == 0)
  {
LABEL_17:
    if ((v5 & 0x8000) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "staticSpeedMetersPerSecondThreshold", *((float *)this + 20));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x8000) == 0)
  {
LABEL_18:
    if ((v5 & 4) == 0)
      goto LABEL_19;
LABEL_39:
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 3));
    if ((*((_DWORD *)this + 23) & 8) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_20;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "staticSpeedMetersPerSecondThresholdFromSydneyB", *((float *)this + 21));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 4) != 0)
    goto LABEL_39;
LABEL_19:
  if ((v5 & 8) != 0)
LABEL_20:
    PB::TextFormatter::format(a2, "triggerTimestamp", *((_QWORD *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaLackOfMotionResult::readFrom(CMMsl::KappaLackOfMotionResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  int v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  char v58;
  int v59;
  BOOL v60;
  int v61;
  BOOL v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  uint64_t v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  char v74;
  uint64_t result;
  char v76;
  unsigned int v77;
  unint64_t v78;
  char v79;
  char v80;
  unsigned int v81;
  unint64_t v82;
  char v83;
  char v84;
  unsigned int v85;
  unint64_t v86;
  char v87;
  char v88;
  unsigned int v89;
  unint64_t v90;
  char v91;
  char v92;
  unsigned int v93;
  unint64_t v94;
  char v95;
  char v96;
  unsigned int v97;
  unint64_t v98;
  char v99;
  char v100;
  unsigned int v101;
  unint64_t v102;
  char v103;
  char v104;
  unsigned int v105;
  unint64_t v106;
  char v107;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          v20 = v11 >> 3;
          switch((v11 >> 3))
          {
            case 'e':
              *((_DWORD *)this + 23) |= 4u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v80 = 0;
                v81 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_186;
                  }
                  v82 = v27++;
                  v83 = *(_BYTE *)(v28 + v82);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v83 & 0x7F) << v80;
                  if ((v83 & 0x80) == 0)
                    break;
                  v80 += 7;
                  v14 = v81++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_185:
                    v2 = v82 + 1;
                    goto LABEL_186;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v31 = 0;
                goto LABEL_185;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_186;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_186:
              *((_QWORD *)this + 3) = v31;
              goto LABEL_217;
            case 'f':
              *((_DWORD *)this + 23) |= 8u;
              v41 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v42 = *(_QWORD *)a2;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                v88 = 0;
                v89 = 0;
                v45 = 0;
                if (v2 <= v41)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v41)
                  {
                    v45 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_196;
                  }
                  v90 = v41++;
                  v91 = *(_BYTE *)(v42 + v90);
                  *((_QWORD *)a2 + 1) = v41;
                  v45 |= (unint64_t)(v91 & 0x7F) << v88;
                  if ((v91 & 0x80) == 0)
                    break;
                  v88 += 7;
                  v14 = v89++ > 8;
                  if (v14)
                  {
                    v45 = 0;
LABEL_195:
                    v2 = v90 + 1;
                    goto LABEL_196;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v45 = 0;
                goto LABEL_195;
              }
              v43 = 0;
              v44 = 0;
              v45 = 0;
              do
              {
                v2 = v41 + 1;
                *((_QWORD *)a2 + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0)
                  goto LABEL_196;
                v43 += 7;
                v41 = v2;
                v14 = v44++ > 8;
              }
              while (!v14);
              v45 = 0;
LABEL_196:
              *((_QWORD *)this + 4) = v45;
              goto LABEL_217;
            case 'g':
              *((_DWORD *)this + 23) |= 0x2000u;
              v47 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v48 = *(_QWORD *)a2;
              if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
              {
                v92 = 0;
                v93 = 0;
                v51 = 0;
                if (v2 <= v47)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v47)
                  {
                    LODWORD(v51) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_201;
                  }
                  v94 = v47++;
                  v95 = *(_BYTE *)(v48 + v94);
                  *((_QWORD *)a2 + 1) = v47;
                  v51 |= (unint64_t)(v95 & 0x7F) << v92;
                  if ((v95 & 0x80) == 0)
                    break;
                  v92 += 7;
                  v14 = v93++ > 8;
                  if (v14)
                  {
                    LODWORD(v51) = 0;
LABEL_200:
                    v2 = v94 + 1;
                    goto LABEL_201;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v51) = 0;
                goto LABEL_200;
              }
              v49 = 0;
              v50 = 0;
              v51 = 0;
              do
              {
                v2 = v47 + 1;
                *((_QWORD *)a2 + 1) = v47 + 1;
                v52 = *(_BYTE *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0)
                  goto LABEL_201;
                v49 += 7;
                v47 = v2;
                v14 = v50++ > 8;
              }
              while (!v14);
              LODWORD(v51) = 0;
LABEL_201:
              *((_DWORD *)this + 19) = v51;
              goto LABEL_217;
            case 'h':
              *((_DWORD *)this + 23) |= 0x100u;
              v53 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v54 = *(_QWORD *)a2;
              if (v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v2)
              {
                v96 = 0;
                v97 = 0;
                v57 = 0;
                if (v2 <= v53)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v53)
                  {
                    LODWORD(v57) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_206;
                  }
                  v98 = v53++;
                  v99 = *(_BYTE *)(v54 + v98);
                  *((_QWORD *)a2 + 1) = v53;
                  v57 |= (unint64_t)(v99 & 0x7F) << v96;
                  if ((v99 & 0x80) == 0)
                    break;
                  v96 += 7;
                  v14 = v97++ > 8;
                  if (v14)
                  {
                    LODWORD(v57) = 0;
LABEL_205:
                    v2 = v98 + 1;
                    goto LABEL_206;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v57) = 0;
                goto LABEL_205;
              }
              v55 = 0;
              v56 = 0;
              v57 = 0;
              do
              {
                v2 = v53 + 1;
                *((_QWORD *)a2 + 1) = v53 + 1;
                v58 = *(_BYTE *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0)
                  goto LABEL_206;
                v55 += 7;
                v53 = v2;
                v14 = v56++ > 8;
              }
              while (!v14);
              LODWORD(v57) = 0;
LABEL_206:
              *((_DWORD *)this + 14) = v57;
              goto LABEL_217;
            case 'i':
              *((_DWORD *)this + 23) |= 0x40000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v60 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v59 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v60 = v59 != 0;
              }
              *((_BYTE *)this + 90) = v60;
              goto LABEL_217;
            case 'j':
              *((_DWORD *)this + 23) |= 0x20000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v62 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v61 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v62 = v61 != 0;
              }
              *((_BYTE *)this + 89) = v62;
              goto LABEL_217;
            case 'k':
              *((_DWORD *)this + 23) |= 0x1000u;
              v63 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v64 = *(_QWORD *)a2;
              if (v63 > 0xFFFFFFFFFFFFFFF5 || v63 + 10 > v2)
              {
                v100 = 0;
                v101 = 0;
                v67 = 0;
                if (v2 <= v63)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v63)
                  {
                    LODWORD(v67) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_211;
                  }
                  v102 = v63++;
                  v103 = *(_BYTE *)(v64 + v102);
                  *((_QWORD *)a2 + 1) = v63;
                  v67 |= (unint64_t)(v103 & 0x7F) << v100;
                  if ((v103 & 0x80) == 0)
                    break;
                  v100 += 7;
                  v14 = v101++ > 8;
                  if (v14)
                  {
                    LODWORD(v67) = 0;
LABEL_210:
                    v2 = v102 + 1;
                    goto LABEL_211;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v67) = 0;
                goto LABEL_210;
              }
              v65 = 0;
              v66 = 0;
              v67 = 0;
              do
              {
                v2 = v63 + 1;
                *((_QWORD *)a2 + 1) = v63 + 1;
                v68 = *(_BYTE *)(v64 + v63);
                v67 |= (unint64_t)(v68 & 0x7F) << v65;
                if ((v68 & 0x80) == 0)
                  goto LABEL_211;
                v65 += 7;
                v63 = v2;
                v14 = v66++ > 8;
              }
              while (!v14);
              LODWORD(v67) = 0;
LABEL_211:
              *((_DWORD *)this + 18) = v67;
              goto LABEL_217;
            case 'l':
              *((_DWORD *)this + 23) |= 0x800u;
              v69 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v70 = *(_QWORD *)a2;
              if (v69 > 0xFFFFFFFFFFFFFFF5 || v69 + 10 > v2)
              {
                v104 = 0;
                v105 = 0;
                v73 = 0;
                if (v2 <= v69)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v69)
                  {
                    LODWORD(v73) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_216;
                  }
                  v106 = v69++;
                  v107 = *(_BYTE *)(v70 + v106);
                  *((_QWORD *)a2 + 1) = v69;
                  v73 |= (unint64_t)(v107 & 0x7F) << v104;
                  if ((v107 & 0x80) == 0)
                    break;
                  v104 += 7;
                  v14 = v105++ > 8;
                  if (v14)
                  {
                    LODWORD(v73) = 0;
LABEL_215:
                    v2 = v106 + 1;
                    goto LABEL_216;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v73) = 0;
                goto LABEL_215;
              }
              v71 = 0;
              v72 = 0;
              v73 = 0;
              do
              {
                v2 = v69 + 1;
                *((_QWORD *)a2 + 1) = v69 + 1;
                v74 = *(_BYTE *)(v70 + v69);
                v73 |= (unint64_t)(v74 & 0x7F) << v71;
                if ((v74 & 0x80) == 0)
                  goto LABEL_216;
                v71 += 7;
                v69 = v2;
                v14 = v72++ > 8;
              }
              while (!v14);
              LODWORD(v73) = 0;
LABEL_216:
              *((_DWORD *)this + 17) = v73;
              goto LABEL_217;
            default:
              switch((int)v20)
              {
                case 201:
                  *((_DWORD *)this + 23) |= 2u;
                  v21 = *((_QWORD *)a2 + 1);
                  v2 = *((_QWORD *)a2 + 2);
                  v22 = *(_QWORD *)a2;
                  if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
                  {
                    v76 = 0;
                    v77 = 0;
                    v25 = 0;
                    if (v2 <= v21)
                      v2 = *((_QWORD *)a2 + 1);
                    while (1)
                    {
                      if (v2 == v21)
                      {
                        v25 = 0;
                        *((_BYTE *)a2 + 24) = 1;
                        goto LABEL_181;
                      }
                      v78 = v21++;
                      v79 = *(_BYTE *)(v22 + v78);
                      *((_QWORD *)a2 + 1) = v21;
                      v25 |= (unint64_t)(v79 & 0x7F) << v76;
                      if ((v79 & 0x80) == 0)
                        break;
                      v76 += 7;
                      v14 = v77++ > 8;
                      if (v14)
                      {
                        v25 = 0;
LABEL_180:
                        v2 = v78 + 1;
                        goto LABEL_181;
                      }
                    }
                    if (*((_BYTE *)a2 + 24))
                      v25 = 0;
                    goto LABEL_180;
                  }
                  v23 = 0;
                  v24 = 0;
                  v25 = 0;
                  do
                  {
                    v2 = v21 + 1;
                    *((_QWORD *)a2 + 1) = v21 + 1;
                    v26 = *(_BYTE *)(v22 + v21);
                    v25 |= (unint64_t)(v26 & 0x7F) << v23;
                    if ((v26 & 0x80) == 0)
                      goto LABEL_181;
                    v23 += 7;
                    v21 = v2;
                    v14 = v24++ > 8;
                  }
                  while (!v14);
                  v25 = 0;
LABEL_181:
                  *((_QWORD *)this + 2) = v25;
                  goto LABEL_217;
                case 202:
                  *((_DWORD *)this + 23) |= 1u;
                  v33 = *((_QWORD *)a2 + 1);
                  v2 = *((_QWORD *)a2 + 2);
                  v34 = *(_QWORD *)a2;
                  if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
                  {
                    v84 = 0;
                    v85 = 0;
                    v37 = 0;
                    if (v2 <= v33)
                      v2 = *((_QWORD *)a2 + 1);
                    while (1)
                    {
                      if (v2 == v33)
                      {
                        v37 = 0;
                        *((_BYTE *)a2 + 24) = 1;
                        goto LABEL_191;
                      }
                      v86 = v33++;
                      v87 = *(_BYTE *)(v34 + v86);
                      *((_QWORD *)a2 + 1) = v33;
                      v37 |= (unint64_t)(v87 & 0x7F) << v84;
                      if ((v87 & 0x80) == 0)
                        break;
                      v84 += 7;
                      v14 = v85++ > 8;
                      if (v14)
                      {
                        v37 = 0;
LABEL_190:
                        v2 = v86 + 1;
                        goto LABEL_191;
                      }
                    }
                    if (*((_BYTE *)a2 + 24))
                      v37 = 0;
                    goto LABEL_190;
                  }
                  v35 = 0;
                  v36 = 0;
                  v37 = 0;
                  do
                  {
                    v2 = v33 + 1;
                    *((_QWORD *)a2 + 1) = v33 + 1;
                    v38 = *(_BYTE *)(v34 + v33);
                    v37 |= (unint64_t)(v38 & 0x7F) << v35;
                    if ((v38 & 0x80) == 0)
                      goto LABEL_191;
                    v35 += 7;
                    v33 = v2;
                    v14 = v36++ > 8;
                  }
                  while (!v14);
                  v37 = 0;
LABEL_191:
                  *((_QWORD *)this + 1) = v37;
LABEL_217:
                  v3 = *((_QWORD *)a2 + 2);
                  v4 = *((unsigned __int8 *)a2 + 24);
                  if (v2 >= v3 || v4 != 0)
                    return v4 == 0;
                  continue;
                case 203:
                  *((_DWORD *)this + 23) |= 0x10u;
                  v2 = *((_QWORD *)a2 + 1);
                  if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                    goto LABEL_112;
                  *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
                  goto LABEL_176;
                case 204:
                  *((_DWORD *)this + 23) |= 0x40u;
                  v2 = *((_QWORD *)a2 + 1);
                  if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                    goto LABEL_112;
                  *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
                  goto LABEL_176;
                case 205:
                  *((_DWORD *)this + 23) |= 0x80u;
                  v2 = *((_QWORD *)a2 + 1);
                  if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                    goto LABEL_112;
                  *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
                  goto LABEL_176;
                case 206:
                  *((_DWORD *)this + 23) |= 0x20u;
                  v2 = *((_QWORD *)a2 + 1);
                  if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                  {
LABEL_112:
                    *((_BYTE *)a2 + 24) = 1;
                  }
                  else
                  {
                    *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_176:
                    v2 = *((_QWORD *)a2 + 1) + 4;
                    *((_QWORD *)a2 + 1) = v2;
                  }
                  goto LABEL_217;
                case 207:
                  *((_DWORD *)this + 23) |= 0x10000u;
                  v2 = *((_QWORD *)a2 + 1);
                  if (v2 >= *((_QWORD *)a2 + 2))
                  {
                    v40 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                  }
                  else
                  {
                    v39 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                    *((_QWORD *)a2 + 1) = v2;
                    v40 = v39 != 0;
                  }
                  *((_BYTE *)this + 88) = v40;
                  goto LABEL_217;
                default:
                  switch((int)v20)
                  {
                    case 1:
                      *((_DWORD *)this + 23) |= 0x200u;
                      v2 = *((_QWORD *)a2 + 1);
                      if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                        goto LABEL_112;
                      *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
                      goto LABEL_176;
                    case 2:
                      *((_DWORD *)this + 23) |= 0x4000u;
                      v2 = *((_QWORD *)a2 + 1);
                      if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                        goto LABEL_112;
                      *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v2);
                      goto LABEL_176;
                    case 3:
                      *((_DWORD *)this + 23) |= 0x400u;
                      v2 = *((_QWORD *)a2 + 1);
                      if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                        goto LABEL_112;
                      *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v2);
                      goto LABEL_176;
                    case 4:
                      *((_DWORD *)this + 23) |= 0x8000u;
                      v2 = *((_QWORD *)a2 + 1);
                      if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                        goto LABEL_112;
                      *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v2);
                      goto LABEL_176;
                    default:
                      result = PB::Reader::skip(a2, v20, v11 & 7, 0);
                      if (!(_DWORD)result)
                        return result;
                      v2 = *((_QWORD *)a2 + 1);
                      break;
                  }
                  goto LABEL_217;
              }
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaLackOfMotionResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 92);
  if ((v4 & 0x200) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 60), 1u);
    v4 = *(_DWORD *)(v3 + 92);
    if ((v4 & 0x4000) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0)
        goto LABEL_4;
      goto LABEL_23;
    }
  }
  else if ((v4 & 0x4000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 2u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 0x8000) == 0)
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 3u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x8000) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      goto LABEL_6;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 4u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0)
      goto LABEL_7;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 24), 0x65u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 32), 0x66u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 76), 0x67u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x40000) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 56), 0x68u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x40000) == 0)
  {
LABEL_10:
    if ((v4 & 0x20000) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 90), 0x69u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x20000) == 0)
  {
LABEL_11:
    if ((v4 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 89), 0x6Au);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x1000) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 72), 0x6Bu);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 2) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 68), 0x6Cu);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 2) == 0)
  {
LABEL_14:
    if ((v4 & 1) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 16), 0xC9u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 1) == 0)
  {
LABEL_15:
    if ((v4 & 0x10) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 8), 0xCAu);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_16:
    if ((v4 & 0x40) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 0xCBu);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x40) == 0)
  {
LABEL_17:
    if ((v4 & 0x80) == 0)
      goto LABEL_18;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 0xCCu);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_18:
    if ((v4 & 0x20) == 0)
      goto LABEL_19;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0xCDu);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x20) == 0)
  {
LABEL_19:
    if ((v4 & 0x10000) == 0)
      return this;
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 88), 0xCFu);
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 0xCEu);
  if ((*(_DWORD *)(v3 + 92) & 0x10000) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 88), 0xCFu);
  return this;
}

uint64_t CMMsl::KappaLackOfMotionResult::hash_value(CMMsl::KappaLackOfMotionResult *this)
{
  int v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  float v28;

  v1 = *((_DWORD *)this + 23);
  if ((v1 & 0x200) == 0)
  {
    v2 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_3;
LABEL_38:
    v4 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_6;
LABEL_39:
    v6 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_9;
LABEL_40:
    v8 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_12;
    goto LABEL_41;
  }
  v28 = *((float *)this + 15);
  v2 = LODWORD(v28);
  if (v28 == 0.0)
    v2 = 0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_38;
LABEL_3:
  v3 = *((float *)this + 20);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((v1 & 0x400) == 0)
    goto LABEL_39;
LABEL_6:
  v5 = *((float *)this + 16);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_40;
LABEL_9:
  v7 = *((float *)this + 21);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_12:
    v9 = *((_QWORD *)this + 3);
    if ((v1 & 8) != 0)
      goto LABEL_13;
    goto LABEL_42;
  }
LABEL_41:
  v9 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_13:
    v10 = *((_QWORD *)this + 4);
    if ((v1 & 0x2000) != 0)
      goto LABEL_14;
    goto LABEL_43;
  }
LABEL_42:
  v10 = 0;
  if ((v1 & 0x2000) != 0)
  {
LABEL_14:
    v11 = *((int *)this + 19);
    if ((v1 & 0x100) != 0)
      goto LABEL_15;
    goto LABEL_44;
  }
LABEL_43:
  v11 = 0;
  if ((v1 & 0x100) != 0)
  {
LABEL_15:
    v12 = *((int *)this + 14);
    if ((v1 & 0x40000) != 0)
      goto LABEL_16;
    goto LABEL_45;
  }
LABEL_44:
  v12 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_16:
    v13 = *((unsigned __int8 *)this + 90);
    if ((v1 & 0x20000) != 0)
      goto LABEL_17;
    goto LABEL_46;
  }
LABEL_45:
  v13 = 0;
  if ((v1 & 0x20000) != 0)
  {
LABEL_17:
    v14 = *((unsigned __int8 *)this + 89);
    if ((v1 & 0x1000) != 0)
      goto LABEL_18;
    goto LABEL_47;
  }
LABEL_46:
  v14 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_18:
    v15 = *((int *)this + 18);
    if ((v1 & 0x800) != 0)
      goto LABEL_19;
    goto LABEL_48;
  }
LABEL_47:
  v15 = 0;
  if ((v1 & 0x800) != 0)
  {
LABEL_19:
    v16 = *((int *)this + 17);
    if ((v1 & 2) != 0)
      goto LABEL_20;
    goto LABEL_49;
  }
LABEL_48:
  v16 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_20:
    v17 = *((_QWORD *)this + 2);
    if ((v1 & 1) != 0)
      goto LABEL_21;
    goto LABEL_50;
  }
LABEL_49:
  v17 = 0;
  if ((v1 & 1) != 0)
  {
LABEL_21:
    v18 = *((_QWORD *)this + 1);
    if ((v1 & 0x10) != 0)
      goto LABEL_22;
LABEL_51:
    v20 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_25;
LABEL_52:
    v22 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_28;
LABEL_53:
    v24 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_31;
    goto LABEL_54;
  }
LABEL_50:
  v18 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_51;
LABEL_22:
  v19 = *((float *)this + 10);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_52;
LABEL_25:
  v21 = *((float *)this + 12);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_53;
LABEL_28:
  v23 = *((float *)this + 13);
  v24 = LODWORD(v23);
  if (v23 == 0.0)
    v24 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_31:
    v25 = *((float *)this + 11);
    v26 = LODWORD(v25);
    if (v25 == 0.0)
      v26 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_34;
LABEL_55:
    v27 = 0;
    return v4 ^ v2 ^ v6 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v27;
  }
LABEL_54:
  v26 = 0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_55;
LABEL_34:
  v27 = *((unsigned __int8 *)this + 88);
  return v4 ^ v2 ^ v6 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v27;
}

void CMMsl::KappaLocalAudioResult::~KappaLocalAudioResult(CMMsl::KappaLocalAudioResult *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::KappaLocalAudioResult::KappaLocalAudioResult(CMMsl::KappaLocalAudioResult *this, const CMMsl::KappaLocalAudioResult *a2)
{
  uint64_t v2;
  uint64_t v3;
  float result;
  int v5;
  int v6;
  int v7;
  int v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)this = off_1003520B8;
  *(_QWORD *)((char *)this + 172) = 0;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x20000000) != 0)
  {
    result = *((float *)a2 + 35);
    v3 = 0x20000000;
    *(_QWORD *)((char *)this + 172) = 0x20000000;
    *((float *)this + 35) = result;
    v2 = *(_QWORD *)((char *)a2 + 172);
    if ((v2 & 0x8000000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x8000000) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 33);
    v3 |= 0x8000000uLL;
    *(_QWORD *)((char *)this + 172) = v3;
    *((float *)this + 33) = result;
    v2 = *(_QWORD *)((char *)a2 + 172);
  }
LABEL_6:
  if ((v2 & 0x2000000) != 0)
  {
    result = *((float *)a2 + 31);
    v3 |= 0x2000000uLL;
    *(_QWORD *)((char *)this + 172) = v3;
    *((float *)this + 31) = result;
    v2 = *(_QWORD *)((char *)a2 + 172);
    if ((v2 & 0x80000000) == 0)
    {
LABEL_8:
      if ((v2 & 0x100000) == 0)
        goto LABEL_9;
      goto LABEL_53;
    }
  }
  else if ((v2 & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  result = *((float *)a2 + 37);
  v3 |= 0x80000000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((float *)this + 37) = result;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x100000) == 0)
  {
LABEL_9:
    if ((v2 & 0x80000) == 0)
      goto LABEL_10;
    goto LABEL_54;
  }
LABEL_53:
  v5 = *((_DWORD *)a2 + 26);
  v3 |= 0x100000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((_DWORD *)this + 26) = v5;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x80000) == 0)
  {
LABEL_10:
    if ((v2 & 0x800000) == 0)
      goto LABEL_11;
    goto LABEL_55;
  }
LABEL_54:
  v6 = *((_DWORD *)a2 + 25);
  v3 |= 0x80000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((_DWORD *)this + 25) = v6;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x800000) == 0)
  {
LABEL_11:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_12;
    goto LABEL_56;
  }
LABEL_55:
  result = *((float *)a2 + 29);
  v3 |= 0x800000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((float *)this + 29) = result;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_13;
    goto LABEL_57;
  }
LABEL_56:
  result = *((float *)a2 + 36);
  v3 |= 0x40000000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((float *)this + 36) = result;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_13:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_14;
    goto LABEL_58;
  }
LABEL_57:
  result = *((float *)a2 + 34);
  v3 |= 0x10000000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((float *)this + 34) = result;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x100000000) == 0)
      goto LABEL_15;
    goto LABEL_59;
  }
LABEL_58:
  result = *((float *)a2 + 32);
  v3 |= 0x4000000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((float *)this + 32) = result;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x200000) == 0)
      goto LABEL_16;
    goto LABEL_60;
  }
LABEL_59:
  result = *((float *)a2 + 38);
  v3 |= (unint64_t)&_mh_execute_header;
  *(_QWORD *)((char *)this + 172) = v3;
  *((float *)this + 38) = result;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x200000) == 0)
  {
LABEL_16:
    if ((v2 & 0x400000) == 0)
      goto LABEL_17;
    goto LABEL_61;
  }
LABEL_60:
  v7 = *((_DWORD *)a2 + 27);
  v3 |= 0x200000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((_DWORD *)this + 27) = v7;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x400000) == 0)
  {
LABEL_17:
    if ((v2 & 0x40000000000) == 0)
      goto LABEL_18;
    goto LABEL_62;
  }
LABEL_61:
  v8 = *((_DWORD *)a2 + 28);
  v3 |= 0x400000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((_DWORD *)this + 28) = v8;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x40000000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x10000) == 0)
      goto LABEL_19;
    goto LABEL_63;
  }
LABEL_62:
  v9 = *((_BYTE *)a2 + 165);
  v3 |= 0x40000000000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((_BYTE *)this + 165) = v9;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x10000) == 0)
  {
LABEL_19:
    if ((v2 & 0x4000) == 0)
      goto LABEL_20;
    goto LABEL_64;
  }
LABEL_63:
  result = *((float *)a2 + 22);
  v3 |= 0x10000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((float *)this + 22) = result;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x4000) == 0)
  {
LABEL_20:
    if ((v2 & 0x1000) == 0)
      goto LABEL_21;
    goto LABEL_65;
  }
LABEL_64:
  result = *((float *)a2 + 20);
  v3 |= 0x4000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((float *)this + 20) = result;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x1000) == 0)
  {
LABEL_21:
    if ((v2 & 0x20000) == 0)
      goto LABEL_22;
    goto LABEL_66;
  }
LABEL_65:
  result = *((float *)a2 + 18);
  v3 |= 0x1000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((float *)this + 18) = result;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x20000) == 0)
  {
LABEL_22:
    if ((v2 & 0x10000000000) == 0)
      goto LABEL_23;
    goto LABEL_67;
  }
LABEL_66:
  result = *((float *)a2 + 23);
  v3 |= 0x20000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((float *)this + 23) = result;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x10000000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x200000000) == 0)
      goto LABEL_24;
    goto LABEL_68;
  }
LABEL_67:
  v10 = *((_BYTE *)a2 + 163);
  v3 |= 0x10000000000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((_BYTE *)this + 163) = v10;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_24:
    if ((v2 & 0x100000000000) == 0)
      goto LABEL_25;
    goto LABEL_69;
  }
LABEL_68:
  v11 = *((_BYTE *)a2 + 156);
  v3 |= 0x200000000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((_BYTE *)this + 156) = v11;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x100000000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x800000000) == 0)
      goto LABEL_26;
    goto LABEL_70;
  }
LABEL_69:
  v12 = *((_BYTE *)a2 + 167);
  v3 |= 0x100000000000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((_BYTE *)this + 167) = v12;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_26:
    if ((v2 & 0x4000000000) == 0)
      goto LABEL_27;
    goto LABEL_71;
  }
LABEL_70:
  v13 = *((_BYTE *)a2 + 158);
  v3 |= 0x800000000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((_BYTE *)this + 158) = v13;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x4000000000) == 0)
  {
LABEL_27:
    if ((v2 & 0x80000000000) == 0)
      goto LABEL_28;
    goto LABEL_72;
  }
LABEL_71:
  v14 = *((_BYTE *)a2 + 161);
  v3 |= 0x4000000000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((_BYTE *)this + 161) = v14;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x80000000000) == 0)
  {
LABEL_28:
    if ((v2 & 0x8000) == 0)
      goto LABEL_29;
    goto LABEL_73;
  }
LABEL_72:
  v15 = *((_BYTE *)a2 + 166);
  v3 |= 0x80000000000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((_BYTE *)this + 166) = v15;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x8000) == 0)
  {
LABEL_29:
    if ((v2 & 0x2000) == 0)
      goto LABEL_30;
    goto LABEL_74;
  }
LABEL_73:
  result = *((float *)a2 + 21);
  v3 |= 0x8000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((float *)this + 21) = result;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x2000) == 0)
  {
LABEL_30:
    if ((v2 & 0x40000) == 0)
      goto LABEL_31;
    goto LABEL_75;
  }
LABEL_74:
  result = *((float *)a2 + 19);
  v3 |= 0x2000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((float *)this + 19) = result;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x40000) == 0)
  {
LABEL_31:
    if ((v2 & 0x20000000000) == 0)
      goto LABEL_32;
    goto LABEL_76;
  }
LABEL_75:
  result = *((float *)a2 + 24);
  v3 |= 0x40000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((float *)this + 24) = result;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x20000000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x400000000) == 0)
      goto LABEL_33;
    goto LABEL_77;
  }
LABEL_76:
  v16 = *((_BYTE *)a2 + 164);
  v3 |= 0x20000000000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((_BYTE *)this + 164) = v16;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_33:
    if ((v2 & 0x200000000000) == 0)
      goto LABEL_34;
    goto LABEL_78;
  }
LABEL_77:
  v17 = *((_BYTE *)a2 + 157);
  v3 |= 0x400000000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((_BYTE *)this + 157) = v17;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x200000000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x1000000000) == 0)
      goto LABEL_35;
    goto LABEL_79;
  }
LABEL_78:
  v18 = *((_BYTE *)a2 + 168);
  v3 |= 0x200000000000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((_BYTE *)this + 168) = v18;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x1000000000) == 0)
  {
LABEL_35:
    if ((v2 & 0x8000000000) == 0)
      goto LABEL_36;
    goto LABEL_80;
  }
LABEL_79:
  v19 = *((_BYTE *)a2 + 159);
  v3 |= 0x1000000000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((_BYTE *)this + 159) = v19;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x8000000000) == 0)
  {
LABEL_36:
    if ((v2 & 0x2000000000) == 0)
      goto LABEL_37;
    goto LABEL_81;
  }
LABEL_80:
  v20 = *((_BYTE *)a2 + 162);
  v3 |= 0x8000000000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((_BYTE *)this + 162) = v20;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x2000000000) == 0)
  {
LABEL_37:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_38;
    goto LABEL_82;
  }
LABEL_81:
  v21 = *((_BYTE *)a2 + 160);
  v3 |= 0x2000000000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((_BYTE *)this + 160) = v21;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_38:
    if ((v2 & 4) == 0)
      goto LABEL_39;
    goto LABEL_83;
  }
LABEL_82:
  v22 = *((_DWORD *)a2 + 30);
  v3 |= 0x1000000uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((_DWORD *)this + 30) = v22;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 4) == 0)
  {
LABEL_39:
    if ((v2 & 8) == 0)
      goto LABEL_40;
    goto LABEL_84;
  }
LABEL_83:
  v23 = *((_QWORD *)a2 + 3);
  v3 |= 4uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((_QWORD *)this + 3) = v23;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 8) == 0)
  {
LABEL_40:
    if ((v2 & 0x10) == 0)
      goto LABEL_41;
    goto LABEL_85;
  }
LABEL_84:
  v24 = *((_QWORD *)a2 + 4);
  v3 |= 8uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((_QWORD *)this + 4) = v24;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x10) == 0)
  {
LABEL_41:
    if ((v2 & 0x80) == 0)
      goto LABEL_42;
    goto LABEL_86;
  }
LABEL_85:
  result = *((float *)a2 + 10);
  v3 |= 0x10uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((float *)this + 10) = result;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x80) == 0)
  {
LABEL_42:
    if ((v2 & 0x100) == 0)
      goto LABEL_43;
    goto LABEL_87;
  }
LABEL_86:
  result = *((float *)a2 + 13);
  v3 |= 0x80uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((float *)this + 13) = result;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x100) == 0)
  {
LABEL_43:
    if ((v2 & 0x800) == 0)
      goto LABEL_44;
    goto LABEL_88;
  }
LABEL_87:
  result = *((float *)a2 + 14);
  v3 |= 0x100uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((float *)this + 14) = result;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x800) == 0)
  {
LABEL_44:
    if ((v2 & 1) == 0)
      goto LABEL_45;
    goto LABEL_89;
  }
LABEL_88:
  result = *((float *)a2 + 17);
  v3 |= 0x800uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((float *)this + 17) = result;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 1) == 0)
  {
LABEL_45:
    if ((v2 & 2) == 0)
      goto LABEL_46;
    goto LABEL_90;
  }
LABEL_89:
  v25 = *((_QWORD *)a2 + 1);
  v3 |= 1uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((_QWORD *)this + 1) = v25;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 2) == 0)
  {
LABEL_46:
    if ((v2 & 0x20) == 0)
      goto LABEL_47;
    goto LABEL_91;
  }
LABEL_90:
  v26 = *((_QWORD *)a2 + 2);
  v3 |= 2uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((_QWORD *)this + 2) = v26;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x20) == 0)
  {
LABEL_47:
    if ((v2 & 0x40) == 0)
      goto LABEL_48;
    goto LABEL_92;
  }
LABEL_91:
  result = *((float *)a2 + 11);
  v3 |= 0x20uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((float *)this + 11) = result;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x40) == 0)
  {
LABEL_48:
    if ((v2 & 0x200) == 0)
      goto LABEL_49;
    goto LABEL_93;
  }
LABEL_92:
  result = *((float *)a2 + 12);
  v3 |= 0x40uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((float *)this + 12) = result;
  v2 = *(_QWORD *)((char *)a2 + 172);
  if ((v2 & 0x200) == 0)
  {
LABEL_49:
    if ((v2 & 0x400) == 0)
      return result;
LABEL_94:
    result = *((float *)a2 + 16);
    *(_QWORD *)((char *)this + 172) = v3 | 0x400;
    *((float *)this + 16) = result;
    return result;
  }
LABEL_93:
  result = *((float *)a2 + 15);
  v3 |= 0x200uLL;
  *(_QWORD *)((char *)this + 172) = v3;
  *((float *)this + 15) = result;
  if ((*(_QWORD *)((_BYTE *)a2 + 172) & 0x400) != 0)
    goto LABEL_94;
  return result;
}

CMMsl *CMMsl::KappaLocalAudioResult::operator=(CMMsl *a1, const CMMsl::KappaLocalAudioResult *a2)
{
  CMMsl::KappaLocalAudioResult *v3;
  _BYTE v5[184];

  if (a1 != a2)
  {
    CMMsl::KappaLocalAudioResult::KappaLocalAudioResult((CMMsl::KappaLocalAudioResult *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaLocalAudioResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaLocalAudioResult *a2, CMMsl::KappaLocalAudioResult *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  float result;

  v3 = *(_QWORD *)((char *)this + 172);
  *(_QWORD *)((char *)this + 172) = *(_QWORD *)((char *)a2 + 172);
  *(_QWORD *)((char *)a2 + 172) = v3;
  v4 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v4;
  v5 = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v5;
  v6 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v6;
  v7 = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v7;
  LODWORD(v3) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v3;
  LODWORD(v3) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v3;
  v8 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v8;
  v9 = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v9;
  v10 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v10;
  v11 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v11;
  v12 = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v12;
  LODWORD(v3) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v3;
  LODWORD(v3) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 165);
  *((_BYTE *)this + 165) = *((_BYTE *)a2 + 165);
  *((_BYTE *)a2 + 165) = v3;
  v13 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v13;
  v14 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v14;
  v15 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v15;
  v16 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v16;
  LOBYTE(v3) = *((_BYTE *)this + 163);
  *((_BYTE *)this + 163) = *((_BYTE *)a2 + 163);
  *((_BYTE *)a2 + 163) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 156);
  *((_BYTE *)this + 156) = *((_BYTE *)a2 + 156);
  *((_BYTE *)a2 + 156) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 167);
  *((_BYTE *)this + 167) = *((_BYTE *)a2 + 167);
  *((_BYTE *)a2 + 167) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 158);
  *((_BYTE *)this + 158) = *((_BYTE *)a2 + 158);
  *((_BYTE *)a2 + 158) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 161);
  *((_BYTE *)this + 161) = *((_BYTE *)a2 + 161);
  *((_BYTE *)a2 + 161) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 166);
  *((_BYTE *)this + 166) = *((_BYTE *)a2 + 166);
  *((_BYTE *)a2 + 166) = v3;
  v17 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v17;
  v18 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v18;
  v19 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v19;
  LOBYTE(v3) = *((_BYTE *)this + 164);
  *((_BYTE *)this + 164) = *((_BYTE *)a2 + 164);
  *((_BYTE *)a2 + 164) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 157);
  *((_BYTE *)this + 157) = *((_BYTE *)a2 + 157);
  *((_BYTE *)a2 + 157) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 168);
  *((_BYTE *)this + 168) = *((_BYTE *)a2 + 168);
  *((_BYTE *)a2 + 168) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 159);
  *((_BYTE *)this + 159) = *((_BYTE *)a2 + 159);
  *((_BYTE *)a2 + 159) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 162);
  *((_BYTE *)this + 162) = *((_BYTE *)a2 + 162);
  *((_BYTE *)a2 + 162) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 160);
  *((_BYTE *)this + 160) = *((_BYTE *)a2 + 160);
  *((_BYTE *)a2 + 160) = v3;
  LODWORD(v3) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v3;
  v20 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v20;
  v21 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v21;
  v22 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v22;
  v23 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v23;
  v24 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v24;
  v25 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v25;
  v26 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v26;
  v27 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v27;
  v28 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v28;
  v29 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v29;
  v30 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v30;
  result = *((float *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((float *)a2 + 16) = result;
  return result;
}

float CMMsl::KappaLocalAudioResult::KappaLocalAudioResult(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_1003520B8;
  *(_QWORD *)(a1 + 172) = *(_QWORD *)(a2 + 172);
  *(_QWORD *)(a2 + 172) = 0;
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 165) = *(_BYTE *)(a2 + 165);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_BYTE *)(a1 + 163) = *(_BYTE *)(a2 + 163);
  *(_BYTE *)(a1 + 156) = *(_BYTE *)(a2 + 156);
  *(_BYTE *)(a1 + 167) = *(_BYTE *)(a2 + 167);
  *(_BYTE *)(a1 + 158) = *(_BYTE *)(a2 + 158);
  *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
  *(_BYTE *)(a1 + 166) = *(_BYTE *)(a2 + 166);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 164) = *(_BYTE *)(a2 + 164);
  *(_BYTE *)(a1 + 157) = *(_BYTE *)(a2 + 157);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_BYTE *)(a1 + 159) = *(_BYTE *)(a2 + 159);
  *(_BYTE *)(a1 + 162) = *(_BYTE *)(a2 + 162);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  result = *(float *)(a2 + 64);
  *(float *)(a1 + 64) = result;
  return result;
}

CMMsl *CMMsl::KappaLocalAudioResult::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::KappaLocalAudioResult *v3;
  _BYTE v5[184];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaLocalAudioResult::KappaLocalAudioResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaLocalAudioResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaLocalAudioResult::formatText(CMMsl::KappaLocalAudioResult *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "chaosAtMaxEnergy", *((float *)this + 10));
    v5 = *(_QWORD *)((char *)this + 172);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_51;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "chaosAtMaxEnergyRollover", *((float *)this + 11));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "chaosAtMaxEnergyRolloverTimestamp", *((float *)this + 12));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_6;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "chaosAtMaxEnergyTimestamp", *((float *)this + 13));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_6:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_7;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "chaosMet", *((_BYTE *)this + 156));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_7:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_8;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "chaosMetRollover", *((_BYTE *)this + 157));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_8:
    if ((v5 & 0x1000000000) == 0)
      goto LABEL_9;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "chaosOrSaturationMet", *((_BYTE *)this + 158));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x1000000000) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000000000) == 0)
      goto LABEL_10;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "chaosOrSaturationMetRollover", *((_BYTE *)this + 159));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x2000000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000000000) == 0)
      goto LABEL_11;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "didProcess", *((_BYTE *)this + 160));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x4000000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000000000) == 0)
      goto LABEL_12;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "energyAndChaosOrSaturationMet", *((_BYTE *)this + 161));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x8000000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "energyAndChaosOrSaturationMetRollover", *((_BYTE *)this + 162));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x100) == 0)
  {
LABEL_13:
    if ((v5 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "energyAtMaxChaos", *((float *)this + 14));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x200) == 0)
  {
LABEL_14:
    if ((v5 & 0x400) == 0)
      goto LABEL_15;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "energyAtMaxChaosRollover", *((float *)this + 15));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "energyAtMaxChaosRolloverTimestamp", *((float *)this + 16));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000000000) == 0)
      goto LABEL_17;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "energyAtMaxChaosTimestamp", *((float *)this + 17));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x10000000000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000000000) == 0)
      goto LABEL_18;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "energyMet", *((_BYTE *)this + 163));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x20000000000) == 0)
  {
LABEL_18:
    if ((v5 & 1) == 0)
      goto LABEL_19;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "energyMetRollover", *((_BYTE *)this + 164));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 1) == 0)
  {
LABEL_19:
    if ((v5 & 2) == 0)
      goto LABEL_20;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "epochFirstTimestamp", *((_QWORD *)this + 1));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 2) == 0)
  {
LABEL_20:
    if ((v5 & 0x1000) == 0)
      goto LABEL_21;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "epochLastTimestamp", *((_QWORD *)this + 2));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x1000) == 0)
  {
LABEL_21:
    if ((v5 & 0x2000) == 0)
      goto LABEL_22;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "maxChaos", *((float *)this + 18));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x2000) == 0)
  {
LABEL_22:
    if ((v5 & 0x4000) == 0)
      goto LABEL_23;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "maxChaosRollover", *((float *)this + 19));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x4000) == 0)
  {
LABEL_23:
    if ((v5 & 0x8000) == 0)
      goto LABEL_24;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "maxEnergy", *((float *)this + 20));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x8000) == 0)
  {
LABEL_24:
    if ((v5 & 0x10000) == 0)
      goto LABEL_25;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "maxEnergyRollover", *((float *)this + 21));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x10000) == 0)
  {
LABEL_25:
    if ((v5 & 0x20000) == 0)
      goto LABEL_26;
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "maxRMS", *((float *)this + 22));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x20000) == 0)
  {
LABEL_26:
    if ((v5 & 0x40000) == 0)
      goto LABEL_27;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "maxSaturation", *((float *)this + 23));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x40000) == 0)
  {
LABEL_27:
    if ((v5 & 0x80000) == 0)
      goto LABEL_28;
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(a2, "maxSaturationRollover", *((float *)this + 24));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x80000) == 0)
  {
LABEL_28:
    if ((v5 & 0x100000) == 0)
      goto LABEL_29;
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(a2, "parameterRollingEnergyWindowSize", *((_DWORD *)this + 25));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x100000) == 0)
  {
LABEL_29:
    if ((v5 & 0x200000) == 0)
      goto LABEL_30;
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(a2, "parameterRollingPercentileWindowSize", *((_DWORD *)this + 26));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x200000) == 0)
  {
LABEL_30:
    if ((v5 & 0x400000) == 0)
      goto LABEL_31;
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(a2, "parameterRolloverRollingEnergyWindowSize", *((_DWORD *)this + 27));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x400000) == 0)
  {
LABEL_31:
    if ((v5 & 0x800000) == 0)
      goto LABEL_32;
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(a2, "parameterRolloverRollingPercentileWindowSize", *((_DWORD *)this + 28));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x800000) == 0)
  {
LABEL_32:
    if ((v5 & 0x40000000000) == 0)
      goto LABEL_33;
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(a2, "parameterSaturationY", *((float *)this + 29));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x40000000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x80000000000) == 0)
      goto LABEL_34;
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(a2, "passThru", *((_BYTE *)this + 165));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x80000000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_35;
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(a2, "passThruRollover", *((_BYTE *)this + 166));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x100000000000) == 0)
      goto LABEL_36;
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(a2, "rmsSampleCount", *((_DWORD *)this + 30));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x100000000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x200000000000) == 0)
      goto LABEL_37;
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(a2, "saturationMet", *((_BYTE *)this + 167));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x200000000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_38;
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(a2, "saturationMetRollover", *((_BYTE *)this + 168));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_38:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_39;
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(a2, "thresholdChaos", *((float *)this + 31));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_39:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_40;
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(a2, "thresholdChaosRollover", *((float *)this + 32));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_40:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_41;
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(a2, "thresholdEnergy", *((float *)this + 33));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_41:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_42;
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(a2, "thresholdEnergyRollover", *((float *)this + 34));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_42:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_43;
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(a2, "thresholdMaxRMS", *((float *)this + 35));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_43:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_44;
    goto LABEL_91;
  }
LABEL_90:
  PB::TextFormatter::format(a2, "thresholdMaxRMSRollover", *((float *)this + 36));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_44:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_45;
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(a2, "thresholdSaturationTime", *((float *)this + 37));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_45:
    if ((v5 & 4) == 0)
      goto LABEL_46;
LABEL_93:
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 3));
    if ((*(_QWORD *)((_BYTE *)this + 172) & 8) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_47;
  }
LABEL_92:
  PB::TextFormatter::format(a2, "thresholdSaturationTimeRollover", *((float *)this + 38));
  v5 = *(_QWORD *)((char *)this + 172);
  if ((v5 & 4) != 0)
    goto LABEL_93;
LABEL_46:
  if ((v5 & 8) != 0)
LABEL_47:
    PB::TextFormatter::format(a2, "triggerTimestamp", *((_QWORD *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaLocalAudioResult::readFrom(CMMsl::KappaLocalAudioResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  BOOL v29;
  uint64_t result;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  BOOL v78;
  unint64_t v79;
  unint64_t v80;
  int v81;
  BOOL v82;
  unint64_t v83;
  unint64_t v84;
  int v85;
  BOOL v86;
  unint64_t v87;
  unint64_t v88;
  int v89;
  BOOL v90;
  unint64_t v91;
  unint64_t v92;
  int v93;
  BOOL v94;
  unint64_t v95;
  unint64_t v96;
  int v97;
  BOOL v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  int v104;
  BOOL v105;
  unint64_t v106;
  unint64_t v107;
  int v108;
  BOOL v109;
  unint64_t v110;
  unint64_t v111;
  int v112;
  BOOL v113;
  unint64_t v114;
  unint64_t v115;
  int v116;
  BOOL v117;
  unint64_t v118;
  unint64_t v119;
  int v120;
  BOOL v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  char v125;
  unsigned int v126;
  uint64_t v127;
  unint64_t v128;
  char v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  char v133;
  unsigned int v134;
  uint64_t v135;
  unint64_t v136;
  char v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  char v141;
  unsigned int v142;
  uint64_t v143;
  unint64_t v144;
  char v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  char v153;
  unsigned int v154;
  uint64_t v155;
  unint64_t v156;
  char v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  char v161;
  unsigned int v162;
  uint64_t v163;
  unint64_t v164;
  char v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  char v170;
  unsigned int v171;
  unint64_t v172;
  char v173;
  char v174;
  unsigned int v175;
  unint64_t v176;
  char v177;
  char v178;
  unsigned int v179;
  unint64_t v180;
  char v181;
  char v182;
  unsigned int v183;
  unint64_t v184;
  char v185;
  char v186;
  unsigned int v187;
  unint64_t v188;
  char v189;
  char v190;
  unsigned int v191;
  unint64_t v192;
  char v193;
  char v194;
  unsigned int v195;
  unint64_t v196;
  char v197;
  char v198;
  unsigned int v199;
  unint64_t v200;
  char v201;
  char v202;
  unsigned int v203;
  unint64_t v204;
  char v205;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      switch((v11 >> 3))
      {
        case 'e':
          *(_QWORD *)((char *)this + 172) |= 0x40000000000uLL;
          v22 = *((_QWORD *)a2 + 1);
          if (v22 >= *((_QWORD *)a2 + 2))
          {
            v25 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v23 = v22 + 1;
            v24 = *(unsigned __int8 *)(*(_QWORD *)a2 + v22);
            *((_QWORD *)a2 + 1) = v23;
            v25 = v24 != 0;
          }
          *((_BYTE *)this + 165) = v25;
          goto LABEL_279;
        case 'f':
          *(_QWORD *)((char *)this + 172) |= 0x10000uLL;
          v71 = *((_QWORD *)a2 + 1);
          if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_187;
          *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v71);
          goto LABEL_278;
        case 'g':
          *(_QWORD *)((char *)this + 172) |= 0x4000uLL;
          v72 = *((_QWORD *)a2 + 1);
          if (v72 > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_187;
          *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v72);
          goto LABEL_278;
        case 'h':
          *(_QWORD *)((char *)this + 172) |= 0x1000uLL;
          v73 = *((_QWORD *)a2 + 1);
          if (v73 > 0xFFFFFFFFFFFFFFFBLL || v73 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_187;
          *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v73);
          goto LABEL_278;
        case 'i':
          *(_QWORD *)((char *)this + 172) |= 0x20000uLL;
          v74 = *((_QWORD *)a2 + 1);
          if (v74 > 0xFFFFFFFFFFFFFFFBLL || v74 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_187;
          *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v74);
          goto LABEL_278;
        case 'j':
          *(_QWORD *)((char *)this + 172) |= 0x10000000000uLL;
          v75 = *((_QWORD *)a2 + 1);
          if (v75 >= *((_QWORD *)a2 + 2))
          {
            v78 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v76 = v75 + 1;
            v77 = *(unsigned __int8 *)(*(_QWORD *)a2 + v75);
            *((_QWORD *)a2 + 1) = v76;
            v78 = v77 != 0;
          }
          *((_BYTE *)this + 163) = v78;
          goto LABEL_279;
        case 'k':
          *(_QWORD *)((char *)this + 172) |= 0x200000000uLL;
          v79 = *((_QWORD *)a2 + 1);
          if (v79 >= *((_QWORD *)a2 + 2))
          {
            v82 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v80 = v79 + 1;
            v81 = *(unsigned __int8 *)(*(_QWORD *)a2 + v79);
            *((_QWORD *)a2 + 1) = v80;
            v82 = v81 != 0;
          }
          *((_BYTE *)this + 156) = v82;
          goto LABEL_279;
        case 'l':
          *(_QWORD *)((char *)this + 172) |= 0x100000000000uLL;
          v83 = *((_QWORD *)a2 + 1);
          if (v83 >= *((_QWORD *)a2 + 2))
          {
            v86 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v84 = v83 + 1;
            v85 = *(unsigned __int8 *)(*(_QWORD *)a2 + v83);
            *((_QWORD *)a2 + 1) = v84;
            v86 = v85 != 0;
          }
          *((_BYTE *)this + 167) = v86;
          goto LABEL_279;
        case 'm':
          *(_QWORD *)((char *)this + 172) |= 0x800000000uLL;
          v87 = *((_QWORD *)a2 + 1);
          if (v87 >= *((_QWORD *)a2 + 2))
          {
            v90 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v88 = v87 + 1;
            v89 = *(unsigned __int8 *)(*(_QWORD *)a2 + v87);
            *((_QWORD *)a2 + 1) = v88;
            v90 = v89 != 0;
          }
          *((_BYTE *)this + 158) = v90;
          goto LABEL_279;
        case 'n':
          *(_QWORD *)((char *)this + 172) |= 0x4000000000uLL;
          v91 = *((_QWORD *)a2 + 1);
          if (v91 >= *((_QWORD *)a2 + 2))
          {
            v94 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v92 = v91 + 1;
            v93 = *(unsigned __int8 *)(*(_QWORD *)a2 + v91);
            *((_QWORD *)a2 + 1) = v92;
            v94 = v93 != 0;
          }
          *((_BYTE *)this + 161) = v94;
          goto LABEL_279;
        case 'o':
          *(_QWORD *)((char *)this + 172) |= 0x80000000000uLL;
          v95 = *((_QWORD *)a2 + 1);
          if (v95 >= *((_QWORD *)a2 + 2))
          {
            v98 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v96 = v95 + 1;
            v97 = *(unsigned __int8 *)(*(_QWORD *)a2 + v95);
            *((_QWORD *)a2 + 1) = v96;
            v98 = v97 != 0;
          }
          *((_BYTE *)this + 166) = v98;
          goto LABEL_279;
        case 'p':
          *(_QWORD *)((char *)this + 172) |= 0x8000uLL;
          v99 = *((_QWORD *)a2 + 1);
          if (v99 > 0xFFFFFFFFFFFFFFFBLL || v99 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_187;
          *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v99);
          goto LABEL_278;
        case 'q':
          *(_QWORD *)((char *)this + 172) |= 0x2000uLL;
          v100 = *((_QWORD *)a2 + 1);
          if (v100 > 0xFFFFFFFFFFFFFFFBLL || v100 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_187;
          *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v100);
          goto LABEL_278;
        case 'r':
          *(_QWORD *)((char *)this + 172) |= 0x40000uLL;
          v101 = *((_QWORD *)a2 + 1);
          if (v101 > 0xFFFFFFFFFFFFFFFBLL || v101 + 4 > *((_QWORD *)a2 + 2))
          {
LABEL_187:
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v101);
LABEL_278:
            *((_QWORD *)a2 + 1) += 4;
          }
          goto LABEL_279;
        case 's':
          *(_QWORD *)((char *)this + 172) |= 0x20000000000uLL;
          v102 = *((_QWORD *)a2 + 1);
          if (v102 >= *((_QWORD *)a2 + 2))
          {
            v105 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v103 = v102 + 1;
            v104 = *(unsigned __int8 *)(*(_QWORD *)a2 + v102);
            *((_QWORD *)a2 + 1) = v103;
            v105 = v104 != 0;
          }
          *((_BYTE *)this + 164) = v105;
          goto LABEL_279;
        case 't':
          *(_QWORD *)((char *)this + 172) |= 0x400000000uLL;
          v106 = *((_QWORD *)a2 + 1);
          if (v106 >= *((_QWORD *)a2 + 2))
          {
            v109 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v107 = v106 + 1;
            v108 = *(unsigned __int8 *)(*(_QWORD *)a2 + v106);
            *((_QWORD *)a2 + 1) = v107;
            v109 = v108 != 0;
          }
          *((_BYTE *)this + 157) = v109;
          goto LABEL_279;
        case 'u':
          *(_QWORD *)((char *)this + 172) |= 0x200000000000uLL;
          v110 = *((_QWORD *)a2 + 1);
          if (v110 >= *((_QWORD *)a2 + 2))
          {
            v113 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v111 = v110 + 1;
            v112 = *(unsigned __int8 *)(*(_QWORD *)a2 + v110);
            *((_QWORD *)a2 + 1) = v111;
            v113 = v112 != 0;
          }
          *((_BYTE *)this + 168) = v113;
          goto LABEL_279;
        case 'v':
          *(_QWORD *)((char *)this + 172) |= 0x1000000000uLL;
          v114 = *((_QWORD *)a2 + 1);
          if (v114 >= *((_QWORD *)a2 + 2))
          {
            v117 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v115 = v114 + 1;
            v116 = *(unsigned __int8 *)(*(_QWORD *)a2 + v114);
            *((_QWORD *)a2 + 1) = v115;
            v117 = v116 != 0;
          }
          *((_BYTE *)this + 159) = v117;
          goto LABEL_279;
        case 'w':
          *(_QWORD *)((char *)this + 172) |= 0x8000000000uLL;
          v118 = *((_QWORD *)a2 + 1);
          if (v118 >= *((_QWORD *)a2 + 2))
          {
            v121 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v119 = v118 + 1;
            v120 = *(unsigned __int8 *)(*(_QWORD *)a2 + v118);
            *((_QWORD *)a2 + 1) = v119;
            v121 = v120 != 0;
          }
          *((_BYTE *)this + 162) = v121;
          goto LABEL_279;
        default:
          switch((int)v20)
          {
            case 201:
              *(_QWORD *)((char *)this + 172) |= 0x2000000000uLL;
              v26 = *((_QWORD *)a2 + 1);
              if (v26 >= *((_QWORD *)a2 + 2))
              {
                v29 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v27 = v26 + 1;
                v28 = *(unsigned __int8 *)(*(_QWORD *)a2 + v26);
                *((_QWORD *)a2 + 1) = v27;
                v29 = v28 != 0;
              }
              *((_BYTE *)this + 160) = v29;
              goto LABEL_279;
            case 202:
              *(_QWORD *)((char *)this + 172) |= 0x1000000uLL;
              v122 = *((_QWORD *)a2 + 1);
              v123 = *((_QWORD *)a2 + 2);
              v124 = *(_QWORD *)a2;
              if (v122 <= 0xFFFFFFFFFFFFFFF5 && v122 + 10 <= v123)
              {
                v125 = 0;
                v126 = 0;
                v127 = 0;
                do
                {
                  v128 = v122 + 1;
                  *((_QWORD *)a2 + 1) = v122 + 1;
                  v129 = *(_BYTE *)(v124 + v122);
                  v127 |= (unint64_t)(v129 & 0x7F) << v125;
                  if ((v129 & 0x80) == 0)
                    goto LABEL_303;
                  v125 += 7;
                  v122 = v128;
                  v14 = v126++ > 8;
                }
                while (!v14);
LABEL_248:
                LODWORD(v127) = 0;
                goto LABEL_303;
              }
              v186 = 0;
              v187 = 0;
              v127 = 0;
              if (v123 <= v122)
                v123 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v123 == v122)
                {
                  LODWORD(v127) = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v188 = v122 + 1;
                  v189 = *(_BYTE *)(v124 + v122);
                  *((_QWORD *)a2 + 1) = v188;
                  v127 |= (unint64_t)(v189 & 0x7F) << v186;
                  if (v189 < 0)
                  {
                    v186 += 7;
                    v122 = v188;
                    v14 = v187++ > 8;
                    if (v14)
                      goto LABEL_248;
                    continue;
                  }
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v127) = 0;
                }
                break;
              }
LABEL_303:
              *((_DWORD *)this + 30) = v127;
              goto LABEL_279;
            case 203:
              *(_QWORD *)((char *)this + 172) |= 4uLL;
              v130 = *((_QWORD *)a2 + 1);
              v131 = *((_QWORD *)a2 + 2);
              v132 = *(_QWORD *)a2;
              if (v130 <= 0xFFFFFFFFFFFFFFF5 && v130 + 10 <= v131)
              {
                v133 = 0;
                v134 = 0;
                v135 = 0;
                do
                {
                  v136 = v130 + 1;
                  *((_QWORD *)a2 + 1) = v130 + 1;
                  v137 = *(_BYTE *)(v132 + v130);
                  v135 |= (unint64_t)(v137 & 0x7F) << v133;
                  if ((v137 & 0x80) == 0)
                    goto LABEL_307;
                  v133 += 7;
                  v130 = v136;
                  v14 = v134++ > 8;
                }
                while (!v14);
LABEL_255:
                v135 = 0;
                goto LABEL_307;
              }
              v190 = 0;
              v191 = 0;
              v135 = 0;
              if (v131 <= v130)
                v131 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v131 == v130)
                {
                  v135 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v192 = v130 + 1;
                  v193 = *(_BYTE *)(v132 + v130);
                  *((_QWORD *)a2 + 1) = v192;
                  v135 |= (unint64_t)(v193 & 0x7F) << v190;
                  if (v193 < 0)
                  {
                    v190 += 7;
                    v130 = v192;
                    v14 = v191++ > 8;
                    if (v14)
                      goto LABEL_255;
                    continue;
                  }
                  if (*((_BYTE *)a2 + 24))
                    v135 = 0;
                }
                break;
              }
LABEL_307:
              *((_QWORD *)this + 3) = v135;
              goto LABEL_279;
            case 204:
              *(_QWORD *)((char *)this + 172) |= 8uLL;
              v138 = *((_QWORD *)a2 + 1);
              v139 = *((_QWORD *)a2 + 2);
              v140 = *(_QWORD *)a2;
              if (v138 <= 0xFFFFFFFFFFFFFFF5 && v138 + 10 <= v139)
              {
                v141 = 0;
                v142 = 0;
                v143 = 0;
                do
                {
                  v144 = v138 + 1;
                  *((_QWORD *)a2 + 1) = v138 + 1;
                  v145 = *(_BYTE *)(v140 + v138);
                  v143 |= (unint64_t)(v145 & 0x7F) << v141;
                  if ((v145 & 0x80) == 0)
                    goto LABEL_311;
                  v141 += 7;
                  v138 = v144;
                  v14 = v142++ > 8;
                }
                while (!v14);
LABEL_262:
                v143 = 0;
                goto LABEL_311;
              }
              v194 = 0;
              v195 = 0;
              v143 = 0;
              if (v139 <= v138)
                v139 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v139 == v138)
                {
                  v143 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v196 = v138 + 1;
                  v197 = *(_BYTE *)(v140 + v138);
                  *((_QWORD *)a2 + 1) = v196;
                  v143 |= (unint64_t)(v197 & 0x7F) << v194;
                  if (v197 < 0)
                  {
                    v194 += 7;
                    v138 = v196;
                    v14 = v195++ > 8;
                    if (v14)
                      goto LABEL_262;
                    continue;
                  }
                  if (*((_BYTE *)a2 + 24))
                    v143 = 0;
                }
                break;
              }
LABEL_311:
              *((_QWORD *)this + 4) = v143;
              goto LABEL_279;
            case 205:
              *(_QWORD *)((char *)this + 172) |= 0x10uLL;
              v146 = *((_QWORD *)a2 + 1);
              if (v146 > 0xFFFFFFFFFFFFFFFBLL || v146 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_187;
              *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v146);
              goto LABEL_278;
            case 206:
              *(_QWORD *)((char *)this + 172) |= 0x80uLL;
              v147 = *((_QWORD *)a2 + 1);
              if (v147 > 0xFFFFFFFFFFFFFFFBLL || v147 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_187;
              *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v147);
              goto LABEL_278;
            case 207:
              *(_QWORD *)((char *)this + 172) |= 0x100uLL;
              v148 = *((_QWORD *)a2 + 1);
              if (v148 > 0xFFFFFFFFFFFFFFFBLL || v148 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_187;
              *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v148);
              goto LABEL_278;
            case 208:
              *(_QWORD *)((char *)this + 172) |= 0x800uLL;
              v149 = *((_QWORD *)a2 + 1);
              if (v149 > 0xFFFFFFFFFFFFFFFBLL || v149 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_187;
              *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v149);
              goto LABEL_278;
            case 209:
              *(_QWORD *)((char *)this + 172) |= 1uLL;
              v150 = *((_QWORD *)a2 + 1);
              v151 = *((_QWORD *)a2 + 2);
              v152 = *(_QWORD *)a2;
              if (v150 <= 0xFFFFFFFFFFFFFFF5 && v150 + 10 <= v151)
              {
                v153 = 0;
                v154 = 0;
                v155 = 0;
                do
                {
                  v156 = v150 + 1;
                  *((_QWORD *)a2 + 1) = v150 + 1;
                  v157 = *(_BYTE *)(v152 + v150);
                  v155 |= (unint64_t)(v157 & 0x7F) << v153;
                  if ((v157 & 0x80) == 0)
                    goto LABEL_315;
                  v153 += 7;
                  v150 = v156;
                  v14 = v154++ > 8;
                }
                while (!v14);
LABEL_269:
                v155 = 0;
                goto LABEL_315;
              }
              v198 = 0;
              v199 = 0;
              v155 = 0;
              if (v151 <= v150)
                v151 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v151 == v150)
                {
                  v155 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v200 = v150 + 1;
                  v201 = *(_BYTE *)(v152 + v150);
                  *((_QWORD *)a2 + 1) = v200;
                  v155 |= (unint64_t)(v201 & 0x7F) << v198;
                  if (v201 < 0)
                  {
                    v198 += 7;
                    v150 = v200;
                    v14 = v199++ > 8;
                    if (v14)
                      goto LABEL_269;
                    continue;
                  }
                  if (*((_BYTE *)a2 + 24))
                    v155 = 0;
                }
                break;
              }
LABEL_315:
              *((_QWORD *)this + 1) = v155;
              goto LABEL_279;
            case 210:
              *(_QWORD *)((char *)this + 172) |= 2uLL;
              v158 = *((_QWORD *)a2 + 1);
              v159 = *((_QWORD *)a2 + 2);
              v160 = *(_QWORD *)a2;
              if (v158 <= 0xFFFFFFFFFFFFFFF5 && v158 + 10 <= v159)
              {
                v161 = 0;
                v162 = 0;
                v163 = 0;
                do
                {
                  v164 = v158 + 1;
                  *((_QWORD *)a2 + 1) = v158 + 1;
                  v165 = *(_BYTE *)(v160 + v158);
                  v163 |= (unint64_t)(v165 & 0x7F) << v161;
                  if ((v165 & 0x80) == 0)
                    goto LABEL_319;
                  v161 += 7;
                  v158 = v164;
                  v14 = v162++ > 8;
                }
                while (!v14);
LABEL_276:
                v163 = 0;
                goto LABEL_319;
              }
              v202 = 0;
              v203 = 0;
              v163 = 0;
              if (v159 <= v158)
                v159 = *((_QWORD *)a2 + 1);
              while (2)
              {
                if (v159 == v158)
                {
                  v163 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v204 = v158 + 1;
                  v205 = *(_BYTE *)(v160 + v158);
                  *((_QWORD *)a2 + 1) = v204;
                  v163 |= (unint64_t)(v205 & 0x7F) << v202;
                  if (v205 < 0)
                  {
                    v202 += 7;
                    v158 = v204;
                    v14 = v203++ > 8;
                    if (v14)
                      goto LABEL_276;
                    continue;
                  }
                  if (*((_BYTE *)a2 + 24))
                    v163 = 0;
                }
                break;
              }
LABEL_319:
              *((_QWORD *)this + 2) = v163;
              goto LABEL_279;
            case 211:
              *(_QWORD *)((char *)this + 172) |= 0x20uLL;
              v166 = *((_QWORD *)a2 + 1);
              if (v166 > 0xFFFFFFFFFFFFFFFBLL || v166 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_187;
              *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v166);
              goto LABEL_278;
            case 212:
              *(_QWORD *)((char *)this + 172) |= 0x40uLL;
              v167 = *((_QWORD *)a2 + 1);
              if (v167 > 0xFFFFFFFFFFFFFFFBLL || v167 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_187;
              *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v167);
              goto LABEL_278;
            case 213:
              *(_QWORD *)((char *)this + 172) |= 0x200uLL;
              v168 = *((_QWORD *)a2 + 1);
              if (v168 > 0xFFFFFFFFFFFFFFFBLL || v168 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_187;
              *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v168);
              goto LABEL_278;
            case 214:
              *(_QWORD *)((char *)this + 172) |= 0x400uLL;
              v169 = *((_QWORD *)a2 + 1);
              if (v169 > 0xFFFFFFFFFFFFFFFBLL || v169 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_187;
              *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v169);
              goto LABEL_278;
            default:
              switch((int)v20)
              {
                case 1:
                  *(_QWORD *)((char *)this + 172) |= 0x20000000uLL;
                  v21 = *((_QWORD *)a2 + 1);
                  if (v21 > 0xFFFFFFFFFFFFFFFBLL || v21 + 4 > *((_QWORD *)a2 + 2))
                    goto LABEL_187;
                  *((_DWORD *)this + 35) = *(_DWORD *)(*(_QWORD *)a2 + v21);
                  goto LABEL_278;
                case 2:
                  *(_QWORD *)((char *)this + 172) |= 0x8000000uLL;
                  v31 = *((_QWORD *)a2 + 1);
                  if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((_QWORD *)a2 + 2))
                    goto LABEL_187;
                  *((_DWORD *)this + 33) = *(_DWORD *)(*(_QWORD *)a2 + v31);
                  goto LABEL_278;
                case 3:
                  *(_QWORD *)((char *)this + 172) |= 0x2000000uLL;
                  v32 = *((_QWORD *)a2 + 1);
                  if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((_QWORD *)a2 + 2))
                    goto LABEL_187;
                  *((_DWORD *)this + 31) = *(_DWORD *)(*(_QWORD *)a2 + v32);
                  goto LABEL_278;
                case 4:
                  *(_QWORD *)((char *)this + 172) |= 0x80000000uLL;
                  v33 = *((_QWORD *)a2 + 1);
                  if (v33 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((_QWORD *)a2 + 2))
                    goto LABEL_187;
                  *((_DWORD *)this + 37) = *(_DWORD *)(*(_QWORD *)a2 + v33);
                  goto LABEL_278;
                case 5:
                  *(_QWORD *)((char *)this + 172) |= 0x100000uLL;
                  v34 = *((_QWORD *)a2 + 1);
                  v35 = *((_QWORD *)a2 + 2);
                  v36 = *(_QWORD *)a2;
                  if (v34 <= 0xFFFFFFFFFFFFFFF5 && v34 + 10 <= v35)
                  {
                    v37 = 0;
                    v38 = 0;
                    v39 = 0;
                    do
                    {
                      v40 = v34 + 1;
                      *((_QWORD *)a2 + 1) = v34 + 1;
                      v41 = *(_BYTE *)(v36 + v34);
                      v39 |= (unint64_t)(v41 & 0x7F) << v37;
                      if ((v41 & 0x80) == 0)
                        goto LABEL_287;
                      v37 += 7;
                      v34 = v40;
                      v14 = v38++ > 8;
                    }
                    while (!v14);
LABEL_198:
                    LODWORD(v39) = 0;
                    goto LABEL_287;
                  }
                  v170 = 0;
                  v171 = 0;
                  v39 = 0;
                  if (v35 <= v34)
                    v35 = *((_QWORD *)a2 + 1);
                  while (2)
                  {
                    if (v35 == v34)
                    {
                      LODWORD(v39) = 0;
                      *((_BYTE *)a2 + 24) = 1;
                    }
                    else
                    {
                      v172 = v34 + 1;
                      v173 = *(_BYTE *)(v36 + v34);
                      *((_QWORD *)a2 + 1) = v172;
                      v39 |= (unint64_t)(v173 & 0x7F) << v170;
                      if (v173 < 0)
                      {
                        v170 += 7;
                        v34 = v172;
                        v14 = v171++ > 8;
                        if (v14)
                          goto LABEL_198;
                        continue;
                      }
                      if (*((_BYTE *)a2 + 24))
                        LODWORD(v39) = 0;
                    }
                    break;
                  }
LABEL_287:
                  *((_DWORD *)this + 26) = v39;
                  goto LABEL_279;
                case 6:
                  *(_QWORD *)((char *)this + 172) |= 0x80000uLL;
                  v42 = *((_QWORD *)a2 + 1);
                  v43 = *((_QWORD *)a2 + 2);
                  v44 = *(_QWORD *)a2;
                  if (v42 <= 0xFFFFFFFFFFFFFFF5 && v42 + 10 <= v43)
                  {
                    v45 = 0;
                    v46 = 0;
                    v47 = 0;
                    do
                    {
                      v48 = v42 + 1;
                      *((_QWORD *)a2 + 1) = v42 + 1;
                      v49 = *(_BYTE *)(v44 + v42);
                      v47 |= (unint64_t)(v49 & 0x7F) << v45;
                      if ((v49 & 0x80) == 0)
                        goto LABEL_291;
                      v45 += 7;
                      v42 = v48;
                      v14 = v46++ > 8;
                    }
                    while (!v14);
LABEL_205:
                    LODWORD(v47) = 0;
                    goto LABEL_291;
                  }
                  v174 = 0;
                  v175 = 0;
                  v47 = 0;
                  if (v43 <= v42)
                    v43 = *((_QWORD *)a2 + 1);
                  while (2)
                  {
                    if (v43 == v42)
                    {
                      LODWORD(v47) = 0;
                      *((_BYTE *)a2 + 24) = 1;
                    }
                    else
                    {
                      v176 = v42 + 1;
                      v177 = *(_BYTE *)(v44 + v42);
                      *((_QWORD *)a2 + 1) = v176;
                      v47 |= (unint64_t)(v177 & 0x7F) << v174;
                      if (v177 < 0)
                      {
                        v174 += 7;
                        v42 = v176;
                        v14 = v175++ > 8;
                        if (v14)
                          goto LABEL_205;
                        continue;
                      }
                      if (*((_BYTE *)a2 + 24))
                        LODWORD(v47) = 0;
                    }
                    break;
                  }
LABEL_291:
                  *((_DWORD *)this + 25) = v47;
                  goto LABEL_279;
                case 7:
                  *(_QWORD *)((char *)this + 172) |= 0x800000uLL;
                  v50 = *((_QWORD *)a2 + 1);
                  if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((_QWORD *)a2 + 2))
                    goto LABEL_187;
                  *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v50);
                  goto LABEL_278;
                case 8:
                  *(_QWORD *)((char *)this + 172) |= 0x40000000uLL;
                  v51 = *((_QWORD *)a2 + 1);
                  if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((_QWORD *)a2 + 2))
                    goto LABEL_187;
                  *((_DWORD *)this + 36) = *(_DWORD *)(*(_QWORD *)a2 + v51);
                  goto LABEL_278;
                case 9:
                  *(_QWORD *)((char *)this + 172) |= 0x10000000uLL;
                  v52 = *((_QWORD *)a2 + 1);
                  if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((_QWORD *)a2 + 2))
                    goto LABEL_187;
                  *((_DWORD *)this + 34) = *(_DWORD *)(*(_QWORD *)a2 + v52);
                  goto LABEL_278;
                case 10:
                  *(_QWORD *)((char *)this + 172) |= 0x4000000uLL;
                  v53 = *((_QWORD *)a2 + 1);
                  if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((_QWORD *)a2 + 2))
                    goto LABEL_187;
                  *((_DWORD *)this + 32) = *(_DWORD *)(*(_QWORD *)a2 + v53);
                  goto LABEL_278;
                case 11:
                  *(_QWORD *)((char *)this + 172) |= (unint64_t)&_mh_execute_header;
                  v54 = *((_QWORD *)a2 + 1);
                  if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((_QWORD *)a2 + 2))
                    goto LABEL_187;
                  *((_DWORD *)this + 38) = *(_DWORD *)(*(_QWORD *)a2 + v54);
                  goto LABEL_278;
                case 12:
                  *(_QWORD *)((char *)this + 172) |= 0x200000uLL;
                  v55 = *((_QWORD *)a2 + 1);
                  v56 = *((_QWORD *)a2 + 2);
                  v57 = *(_QWORD *)a2;
                  if (v55 <= 0xFFFFFFFFFFFFFFF5 && v55 + 10 <= v56)
                  {
                    v58 = 0;
                    v59 = 0;
                    v60 = 0;
                    do
                    {
                      v61 = v55 + 1;
                      *((_QWORD *)a2 + 1) = v55 + 1;
                      v62 = *(_BYTE *)(v57 + v55);
                      v60 |= (unint64_t)(v62 & 0x7F) << v58;
                      if ((v62 & 0x80) == 0)
                        goto LABEL_295;
                      v58 += 7;
                      v55 = v61;
                      v14 = v59++ > 8;
                    }
                    while (!v14);
LABEL_212:
                    LODWORD(v60) = 0;
                    goto LABEL_295;
                  }
                  v178 = 0;
                  v179 = 0;
                  v60 = 0;
                  if (v56 <= v55)
                    v56 = *((_QWORD *)a2 + 1);
                  while (2)
                  {
                    if (v56 == v55)
                    {
                      LODWORD(v60) = 0;
                      *((_BYTE *)a2 + 24) = 1;
                    }
                    else
                    {
                      v180 = v55 + 1;
                      v181 = *(_BYTE *)(v57 + v55);
                      *((_QWORD *)a2 + 1) = v180;
                      v60 |= (unint64_t)(v181 & 0x7F) << v178;
                      if (v181 < 0)
                      {
                        v178 += 7;
                        v55 = v180;
                        v14 = v179++ > 8;
                        if (v14)
                          goto LABEL_212;
                        continue;
                      }
                      if (*((_BYTE *)a2 + 24))
                        LODWORD(v60) = 0;
                    }
                    break;
                  }
LABEL_295:
                  *((_DWORD *)this + 27) = v60;
                  goto LABEL_279;
                case 13:
                  *(_QWORD *)((char *)this + 172) |= 0x400000uLL;
                  v63 = *((_QWORD *)a2 + 1);
                  v64 = *((_QWORD *)a2 + 2);
                  v65 = *(_QWORD *)a2;
                  if (v63 <= 0xFFFFFFFFFFFFFFF5 && v63 + 10 <= v64)
                  {
                    v66 = 0;
                    v67 = 0;
                    v68 = 0;
                    do
                    {
                      v69 = v63 + 1;
                      *((_QWORD *)a2 + 1) = v63 + 1;
                      v70 = *(_BYTE *)(v65 + v63);
                      v68 |= (unint64_t)(v70 & 0x7F) << v66;
                      if ((v70 & 0x80) == 0)
                        goto LABEL_299;
                      v66 += 7;
                      v63 = v69;
                      v14 = v67++ > 8;
                    }
                    while (!v14);
LABEL_219:
                    LODWORD(v68) = 0;
                    goto LABEL_299;
                  }
                  v182 = 0;
                  v183 = 0;
                  v68 = 0;
                  if (v64 <= v63)
                    v64 = *((_QWORD *)a2 + 1);
                  break;
                default:
                  result = PB::Reader::skip(a2, v20, v11 & 7, 0);
                  if ((_DWORD)result)
                    goto LABEL_279;
                  return result;
              }
              break;
          }
          break;
      }
      while (1)
      {
        if (v64 == v63)
        {
          LODWORD(v68) = 0;
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_299;
        }
        v184 = v63 + 1;
        v185 = *(_BYTE *)(v65 + v63);
        *((_QWORD *)a2 + 1) = v184;
        v68 |= (unint64_t)(v185 & 0x7F) << v182;
        if ((v185 & 0x80) == 0)
          break;
        v182 += 7;
        v63 = v184;
        v14 = v183++ > 8;
        if (v14)
          goto LABEL_219;
      }
      if (*((_BYTE *)a2 + 24))
        LODWORD(v68) = 0;
LABEL_299:
      *((_DWORD *)this + 28) = v68;
LABEL_279:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaLocalAudioResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = this;
  v4 = *(_QWORD *)(this + 172);
  if ((v4 & 0x20000000) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 140), 1u);
    v4 = *(_QWORD *)(v3 + 172);
    if ((v4 & 0x8000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x2000000) == 0)
        goto LABEL_4;
      goto LABEL_50;
    }
  }
  else if ((v4 & 0x8000000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 132), 2u);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_4:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 124), 3u);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v4 & 0x100000) == 0)
      goto LABEL_6;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(float *)(v3 + 148), 4u);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x100000) == 0)
  {
LABEL_6:
    if ((v4 & 0x80000) == 0)
      goto LABEL_7;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 104), 5u);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x80000) == 0)
  {
LABEL_7:
    if ((v4 & 0x800000) == 0)
      goto LABEL_8;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 100), 6u);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x800000) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_9;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(float *)(v3 + 116), 7u);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_10;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(float *)(v3 + 144), 8u);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_11;
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::write(a2, *(float *)(v3 + 136), 9u);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_12;
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(float *)(v3 + 128), 0xAu);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x200000) == 0)
      goto LABEL_13;
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(float *)(v3 + 152), 0xBu);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x200000) == 0)
  {
LABEL_13:
    if ((v4 & 0x400000) == 0)
      goto LABEL_14;
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 108), 0xCu);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x400000) == 0)
  {
LABEL_14:
    if ((v4 & 0x40000000000) == 0)
      goto LABEL_15;
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 112), 0xDu);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x40000000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x10000) == 0)
      goto LABEL_16;
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 165), 0x65u);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x10000) == 0)
  {
LABEL_16:
    if ((v4 & 0x4000) == 0)
      goto LABEL_17;
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 0x66u);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x4000) == 0)
  {
LABEL_17:
    if ((v4 & 0x1000) == 0)
      goto LABEL_18;
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0x67u);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x1000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0x68u);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x20000) == 0)
  {
LABEL_19:
    if ((v4 & 0x10000000000) == 0)
      goto LABEL_20;
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::write(a2, *(float *)(v3 + 92), 0x69u);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x10000000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_21;
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 163), 0x6Au);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x100000000000) == 0)
      goto LABEL_22;
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 156), 0x6Bu);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x100000000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_23;
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 167), 0x6Cu);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x4000000000) == 0)
      goto LABEL_24;
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 158), 0x6Du);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x4000000000) == 0)
  {
LABEL_24:
    if ((v4 & 0x80000000000) == 0)
      goto LABEL_25;
    goto LABEL_71;
  }
LABEL_70:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 161), 0x6Eu);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x80000000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x8000) == 0)
      goto LABEL_26;
    goto LABEL_72;
  }
LABEL_71:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 166), 0x6Fu);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x8000) == 0)
  {
LABEL_26:
    if ((v4 & 0x2000) == 0)
      goto LABEL_27;
    goto LABEL_73;
  }
LABEL_72:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 0x70u);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x2000) == 0)
  {
LABEL_27:
    if ((v4 & 0x40000) == 0)
      goto LABEL_28;
    goto LABEL_74;
  }
LABEL_73:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 0x71u);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x40000) == 0)
  {
LABEL_28:
    if ((v4 & 0x20000000000) == 0)
      goto LABEL_29;
    goto LABEL_75;
  }
LABEL_74:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 0x72u);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x20000000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_30;
    goto LABEL_76;
  }
LABEL_75:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 164), 0x73u);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_30:
    if ((v4 & 0x200000000000) == 0)
      goto LABEL_31;
    goto LABEL_77;
  }
LABEL_76:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 157), 0x74u);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x200000000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_32;
    goto LABEL_78;
  }
LABEL_77:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 168), 0x75u);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x8000000000) == 0)
      goto LABEL_33;
    goto LABEL_79;
  }
LABEL_78:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 159), 0x76u);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x8000000000) == 0)
  {
LABEL_33:
    if ((v4 & 0x2000000000) == 0)
      goto LABEL_34;
    goto LABEL_80;
  }
LABEL_79:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 162), 0x77u);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x2000000000) == 0)
  {
LABEL_34:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_35;
    goto LABEL_81;
  }
LABEL_80:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 160), 0xC9u);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_35:
    if ((v4 & 4) == 0)
      goto LABEL_36;
    goto LABEL_82;
  }
LABEL_81:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 120), 0xCAu);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 4) == 0)
  {
LABEL_36:
    if ((v4 & 8) == 0)
      goto LABEL_37;
    goto LABEL_83;
  }
LABEL_82:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 24), 0xCBu);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 8) == 0)
  {
LABEL_37:
    if ((v4 & 0x10) == 0)
      goto LABEL_38;
    goto LABEL_84;
  }
LABEL_83:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 32), 0xCCu);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x10) == 0)
  {
LABEL_38:
    if ((v4 & 0x80) == 0)
      goto LABEL_39;
    goto LABEL_85;
  }
LABEL_84:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 0xCDu);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x80) == 0)
  {
LABEL_39:
    if ((v4 & 0x100) == 0)
      goto LABEL_40;
    goto LABEL_86;
  }
LABEL_85:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0xCEu);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x100) == 0)
  {
LABEL_40:
    if ((v4 & 0x800) == 0)
      goto LABEL_41;
    goto LABEL_87;
  }
LABEL_86:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 0xCFu);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x800) == 0)
  {
LABEL_41:
    if ((v4 & 1) == 0)
      goto LABEL_42;
    goto LABEL_88;
  }
LABEL_87:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 0xD0u);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 1) == 0)
  {
LABEL_42:
    if ((v4 & 2) == 0)
      goto LABEL_43;
    goto LABEL_89;
  }
LABEL_88:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 8), 0xD1u);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 2) == 0)
  {
LABEL_43:
    if ((v4 & 0x20) == 0)
      goto LABEL_44;
    goto LABEL_90;
  }
LABEL_89:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 16), 0xD2u);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x20) == 0)
  {
LABEL_44:
    if ((v4 & 0x40) == 0)
      goto LABEL_45;
    goto LABEL_91;
  }
LABEL_90:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 0xD3u);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x40) == 0)
  {
LABEL_45:
    if ((v4 & 0x200) == 0)
      goto LABEL_46;
    goto LABEL_92;
  }
LABEL_91:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 0xD4u);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x200) == 0)
  {
LABEL_46:
    if ((v4 & 0x400) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 64), 0xD6u);
  }
LABEL_92:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 0xD5u);
  if ((*(_QWORD *)(v3 + 172) & 0x400) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 64), 0xD6u);
  return this;
}

uint64_t CMMsl::KappaLocalAudioResult::hash_value(CMMsl::KappaLocalAudioResult *this)
{
  uint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  uint64_t v47;
  float v48;
  uint64_t v49;
  float v50;
  uint64_t v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  uint64_t v57;
  float v58;
  uint64_t v59;
  float v60;
  uint64_t v61;
  float v62;
  uint64_t v63;
  float v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v1 = *(_QWORD *)((char *)this + 172);
  if ((v1 & 0x20000000) == 0)
  {
    v2 = 0;
    if ((v1 & 0x8000000) != 0)
      goto LABEL_3;
LABEL_101:
    v84 = 0;
    if ((v1 & 0x2000000) != 0)
      goto LABEL_6;
LABEL_102:
    v83 = 0;
    if ((v1 & 0x80000000) != 0)
      goto LABEL_9;
LABEL_103:
    v82 = 0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_12;
    goto LABEL_104;
  }
  v64 = *((float *)this + 35);
  if (v64 == 0.0)
    v2 = 0;
  else
    v2 = LODWORD(v64);
  if ((v1 & 0x8000000) == 0)
    goto LABEL_101;
LABEL_3:
  v3 = *((float *)this + 33);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  v84 = v4;
  if ((v1 & 0x2000000) == 0)
    goto LABEL_102;
LABEL_6:
  v5 = *((float *)this + 31);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  v83 = v6;
  if ((v1 & 0x80000000) == 0)
    goto LABEL_103;
LABEL_9:
  v7 = *((float *)this + 37);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  v82 = v8;
  if ((v1 & 0x100000) != 0)
  {
LABEL_12:
    v81 = *((int *)this + 26);
    if ((v1 & 0x80000) != 0)
      goto LABEL_13;
    goto LABEL_105;
  }
LABEL_104:
  v81 = 0;
  if ((v1 & 0x80000) != 0)
  {
LABEL_13:
    v80 = *((int *)this + 25);
    if ((v1 & 0x800000) != 0)
      goto LABEL_14;
LABEL_106:
    v79 = 0;
    if ((v1 & 0x40000000) != 0)
      goto LABEL_17;
LABEL_107:
    v78 = 0;
    if ((v1 & 0x10000000) != 0)
      goto LABEL_20;
LABEL_108:
    v77 = 0;
    if ((v1 & 0x4000000) != 0)
      goto LABEL_23;
LABEL_109:
    v76 = 0;
    if ((v1 & 0x100000000) != 0)
      goto LABEL_26;
LABEL_110:
    v75 = 0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_29;
    goto LABEL_111;
  }
LABEL_105:
  v80 = 0;
  if ((v1 & 0x800000) == 0)
    goto LABEL_106;
LABEL_14:
  v9 = *((float *)this + 29);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  v79 = v10;
  if ((v1 & 0x40000000) == 0)
    goto LABEL_107;
LABEL_17:
  v11 = *((float *)this + 36);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  v78 = v12;
  if ((v1 & 0x10000000) == 0)
    goto LABEL_108;
LABEL_20:
  v13 = *((float *)this + 34);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  v77 = v14;
  if ((v1 & 0x4000000) == 0)
    goto LABEL_109;
LABEL_23:
  v15 = *((float *)this + 32);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  v76 = v16;
  if ((v1 & 0x100000000) == 0)
    goto LABEL_110;
LABEL_26:
  v17 = *((float *)this + 38);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  v75 = v18;
  if ((v1 & 0x200000) != 0)
  {
LABEL_29:
    v74 = *((int *)this + 27);
    if ((v1 & 0x400000) != 0)
      goto LABEL_30;
    goto LABEL_112;
  }
LABEL_111:
  v74 = 0;
  if ((v1 & 0x400000) != 0)
  {
LABEL_30:
    v73 = *((int *)this + 28);
    if ((v1 & 0x40000000000) != 0)
      goto LABEL_31;
    goto LABEL_113;
  }
LABEL_112:
  v73 = 0;
  if ((v1 & 0x40000000000) != 0)
  {
LABEL_31:
    v72 = *((unsigned __int8 *)this + 165);
    if ((v1 & 0x10000) != 0)
      goto LABEL_32;
LABEL_114:
    v71 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_35;
LABEL_115:
    v70 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_38;
LABEL_116:
    v69 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_41;
LABEL_117:
    v68 = 0;
    if ((v1 & 0x10000000000) != 0)
      goto LABEL_44;
    goto LABEL_118;
  }
LABEL_113:
  v72 = 0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_114;
LABEL_32:
  v19 = *((float *)this + 22);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  v71 = v20;
  if ((v1 & 0x4000) == 0)
    goto LABEL_115;
LABEL_35:
  v21 = *((float *)this + 20);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  v70 = v22;
  if ((v1 & 0x1000) == 0)
    goto LABEL_116;
LABEL_38:
  v23 = *((float *)this + 18);
  v24 = LODWORD(v23);
  if (v23 == 0.0)
    v24 = 0;
  v69 = v24;
  if ((v1 & 0x20000) == 0)
    goto LABEL_117;
LABEL_41:
  v25 = *((float *)this + 23);
  v26 = LODWORD(v25);
  if (v25 == 0.0)
    v26 = 0;
  v68 = v26;
  if ((v1 & 0x10000000000) != 0)
  {
LABEL_44:
    v67 = *((unsigned __int8 *)this + 163);
    if ((v1 & 0x200000000) != 0)
      goto LABEL_45;
    goto LABEL_119;
  }
LABEL_118:
  v67 = 0;
  if ((v1 & 0x200000000) != 0)
  {
LABEL_45:
    v66 = *((unsigned __int8 *)this + 156);
    if ((v1 & 0x100000000000) != 0)
      goto LABEL_46;
    goto LABEL_120;
  }
LABEL_119:
  v66 = 0;
  if ((v1 & 0x100000000000) != 0)
  {
LABEL_46:
    v27 = *((unsigned __int8 *)this + 167);
    if ((v1 & 0x800000000) != 0)
      goto LABEL_47;
    goto LABEL_121;
  }
LABEL_120:
  v27 = 0;
  if ((v1 & 0x800000000) != 0)
  {
LABEL_47:
    v28 = *((unsigned __int8 *)this + 158);
    if ((v1 & 0x4000000000) != 0)
      goto LABEL_48;
    goto LABEL_122;
  }
LABEL_121:
  v28 = 0;
  if ((v1 & 0x4000000000) != 0)
  {
LABEL_48:
    v29 = *((unsigned __int8 *)this + 161);
    if ((v1 & 0x80000000000) != 0)
      goto LABEL_49;
    goto LABEL_123;
  }
LABEL_122:
  v29 = 0;
  if ((v1 & 0x80000000000) != 0)
  {
LABEL_49:
    v30 = *((unsigned __int8 *)this + 166);
    if ((v1 & 0x8000) != 0)
      goto LABEL_50;
LABEL_124:
    v32 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_54;
LABEL_125:
    v34 = 0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_58;
LABEL_126:
    v36 = 0;
    if ((v1 & 0x20000000000) != 0)
      goto LABEL_62;
    goto LABEL_127;
  }
LABEL_123:
  v30 = 0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_124;
LABEL_50:
  v31 = *((float *)this + 21);
  if (v31 == 0.0)
    v32 = 0;
  else
    v32 = LODWORD(v31);
  if ((v1 & 0x2000) == 0)
    goto LABEL_125;
LABEL_54:
  v33 = *((float *)this + 19);
  if (v33 == 0.0)
    v34 = 0;
  else
    v34 = LODWORD(v33);
  if ((v1 & 0x40000) == 0)
    goto LABEL_126;
LABEL_58:
  v35 = *((float *)this + 24);
  if (v35 == 0.0)
    v36 = 0;
  else
    v36 = LODWORD(v35);
  if ((v1 & 0x20000000000) != 0)
  {
LABEL_62:
    v37 = *((unsigned __int8 *)this + 164);
    if ((v1 & 0x400000000) != 0)
      goto LABEL_63;
    goto LABEL_128;
  }
LABEL_127:
  v37 = 0;
  if ((v1 & 0x400000000) != 0)
  {
LABEL_63:
    v38 = *((unsigned __int8 *)this + 157);
    if ((v1 & 0x200000000000) != 0)
      goto LABEL_64;
    goto LABEL_129;
  }
LABEL_128:
  v38 = 0;
  if ((v1 & 0x200000000000) != 0)
  {
LABEL_64:
    v39 = *((unsigned __int8 *)this + 168);
    if ((v1 & 0x1000000000) != 0)
      goto LABEL_65;
    goto LABEL_130;
  }
LABEL_129:
  v39 = 0;
  if ((v1 & 0x1000000000) != 0)
  {
LABEL_65:
    v40 = *((unsigned __int8 *)this + 159);
    if ((v1 & 0x8000000000) != 0)
      goto LABEL_66;
    goto LABEL_131;
  }
LABEL_130:
  v40 = 0;
  if ((v1 & 0x8000000000) != 0)
  {
LABEL_66:
    v41 = *((unsigned __int8 *)this + 162);
    if ((v1 & 0x2000000000) != 0)
      goto LABEL_67;
    goto LABEL_132;
  }
LABEL_131:
  v41 = 0;
  if ((v1 & 0x2000000000) != 0)
  {
LABEL_67:
    v42 = *((unsigned __int8 *)this + 160);
    if ((v1 & 0x1000000) != 0)
      goto LABEL_68;
    goto LABEL_133;
  }
LABEL_132:
  v42 = 0;
  if ((v1 & 0x1000000) != 0)
  {
LABEL_68:
    v43 = *((int *)this + 30);
    if ((v1 & 4) != 0)
      goto LABEL_69;
    goto LABEL_134;
  }
LABEL_133:
  v43 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_69:
    v44 = *((_QWORD *)this + 3);
    if ((v1 & 8) != 0)
      goto LABEL_70;
    goto LABEL_135;
  }
LABEL_134:
  v44 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_70:
    v45 = *((_QWORD *)this + 4);
    if ((v1 & 0x10) != 0)
      goto LABEL_71;
LABEL_136:
    v47 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_74;
LABEL_137:
    v49 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_77;
LABEL_138:
    v51 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_80;
LABEL_139:
    v53 = 0;
    if ((v1 & 1) != 0)
      goto LABEL_83;
    goto LABEL_140;
  }
LABEL_135:
  v45 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_136;
LABEL_71:
  v46 = *((float *)this + 10);
  v47 = LODWORD(v46);
  if (v46 == 0.0)
    v47 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_137;
LABEL_74:
  v48 = *((float *)this + 13);
  v49 = LODWORD(v48);
  if (v48 == 0.0)
    v49 = 0;
  if ((v1 & 0x100) == 0)
    goto LABEL_138;
LABEL_77:
  v50 = *((float *)this + 14);
  v51 = LODWORD(v50);
  if (v50 == 0.0)
    v51 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_139;
LABEL_80:
  v52 = *((float *)this + 17);
  v53 = LODWORD(v52);
  if (v52 == 0.0)
    v53 = 0;
  if ((v1 & 1) != 0)
  {
LABEL_83:
    v54 = *((_QWORD *)this + 1);
    if ((v1 & 2) != 0)
      goto LABEL_84;
    goto LABEL_141;
  }
LABEL_140:
  v54 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_84:
    v55 = *((_QWORD *)this + 2);
    if ((v1 & 0x20) != 0)
      goto LABEL_85;
LABEL_142:
    v57 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_88;
LABEL_143:
    v59 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_91;
    goto LABEL_144;
  }
LABEL_141:
  v55 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_142;
LABEL_85:
  v56 = *((float *)this + 11);
  v57 = LODWORD(v56);
  if (v56 == 0.0)
    v57 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_143;
LABEL_88:
  v58 = *((float *)this + 12);
  v59 = LODWORD(v58);
  if (v58 == 0.0)
    v59 = 0;
  if ((v1 & 0x200) != 0)
  {
LABEL_91:
    v60 = *((float *)this + 15);
    v61 = LODWORD(v60);
    if (v60 == 0.0)
      v61 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_94;
LABEL_145:
    v63 = 0;
    return v84 ^ v2 ^ v83 ^ v82 ^ v81 ^ v80 ^ v79 ^ v78 ^ v77 ^ v76 ^ v75 ^ v74 ^ v73 ^ v72 ^ v71 ^ v70 ^ v69 ^ v68 ^ v67 ^ v66 ^ v27 ^ v28 ^ v29 ^ v30 ^ v32 ^ v34 ^ v36 ^ v37 ^ v38 ^ v39 ^ v40 ^ v41 ^ v42 ^ v43 ^ v44 ^ v45 ^ v47 ^ v49 ^ v51 ^ v53 ^ v54 ^ v55 ^ v57 ^ v59 ^ v61 ^ v63;
  }
LABEL_144:
  v61 = 0;
  if ((v1 & 0x400) == 0)
    goto LABEL_145;
LABEL_94:
  v62 = *((float *)this + 16);
  v63 = LODWORD(v62);
  if (v62 == 0.0)
    v63 = 0;
  return v84 ^ v2 ^ v83 ^ v82 ^ v81 ^ v80 ^ v79 ^ v78 ^ v77 ^ v76 ^ v75 ^ v74 ^ v73 ^ v72 ^ v71 ^ v70 ^ v69 ^ v68 ^ v67 ^ v66 ^ v27 ^ v28 ^ v29 ^ v30 ^ v32 ^ v34 ^ v36 ^ v37 ^ v38 ^ v39 ^ v40 ^ v41 ^ v42 ^ v43 ^ v44 ^ v45 ^ v47 ^ v49 ^ v51 ^ v53 ^ v54 ^ v55 ^ v57 ^ v59 ^ v61 ^ v63;
}

void CMMsl::KappaMildImpactResult::~KappaMildImpactResult(CMMsl::KappaMildImpactResult *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::KappaMildImpactResult::KappaMildImpactResult(uint64_t this, const CMMsl::KappaMildImpactResult *a2)
{
  char v2;
  char v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;

  *(_QWORD *)this = off_1003520F0;
  *(_DWORD *)(this + 28) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *((_DWORD *)a2 + 2);
    v3 = 1;
    *(_BYTE *)(this + 28) = 1;
    *(_DWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 8) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 5);
    v3 |= 8u;
    *(_BYTE *)(this + 28) = v3;
    *(_DWORD *)(this + 20) = v5;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    v6 = *((_DWORD *)a2 + 6);
    v3 |= 0x10u;
    *(_BYTE *)(this + 28) = v3;
    *(_DWORD *)(this + 24) = v6;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        return this;
LABEL_12:
      v8 = *((_DWORD *)a2 + 4);
      *(_BYTE *)(this + 28) = v3 | 4;
      *(_DWORD *)(this + 16) = v8;
      return this;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 3);
  v3 |= 2u;
  *(_BYTE *)(this + 28) = v3;
  *(_DWORD *)(this + 12) = v7;
  if ((*((_BYTE *)a2 + 28) & 4) != 0)
    goto LABEL_12;
  return this;
}

uint64_t CMMsl::KappaMildImpactResult::operator=(uint64_t a1, const CMMsl::KappaMildImpactResult *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;

  if ((const CMMsl::KappaMildImpactResult *)a1 != a2)
  {
    CMMsl::KappaMildImpactResult::KappaMildImpactResult((uint64_t)&v8, a2);
    v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v11;
    v11 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v12;
    v12 = v4;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v9 = v5;
    v6 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v10;
    v10 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaMildImpactResult *a2, CMMsl::KappaMildImpactResult *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  float result;
  int v8;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  v5 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v5;
  v6 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v6;
  result = *((float *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((float *)a2 + 3) = result;
  v8 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v8;
  return result;
}

float CMMsl::KappaMildImpactResult::KappaMildImpactResult(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_1003520F0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_1003520F0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::KappaMildImpactResult::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD v10[2];
  int v11;
  int v12;
  uint64_t v13;

  if (a1 != a2)
  {
    v10[0] = off_1003520F0;
    v3 = *(_DWORD *)(a2 + 20);
    v4 = *(_DWORD *)(a2 + 16);
    v5 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 28) = 0;
    v12 = *(_DWORD *)(a1 + 20);
    v13 = *(_QWORD *)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 20) = v3;
    *(_QWORD *)(a1 + 24) = v5;
    *(_QWORD *)(a1 + 8) = v7;
    v10[1] = v6;
    v8 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v4;
    v11 = v8;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::KappaMildImpactResult::formatText(CMMsl::KappaMildImpactResult *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "configThreshold1", *((float *)this + 2));
    v5 = *((_BYTE *)this + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "debugX", *((float *)this + 3));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "outputA", *((float *)this + 5));
    if ((*((_BYTE *)this + 28) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "debugY", *((_DWORD *)this + 4));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 8) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "outputB", *((_DWORD *)this + 6));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaMildImpactResult::readFrom(CMMsl::KappaMildImpactResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 0x186A0u:
              *((_BYTE *)this + 28) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_39;
              *((_DWORD *)this + 2) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_62;
            case 0x186A1u:
              *((_BYTE *)this + 28) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_39;
              *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_62;
            case 0x186A2u:
              *((_BYTE *)this + 28) |= 0x10u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v33 = 0;
                v34 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_67;
                  }
                  v35 = v21++;
                  v36 = *(_BYTE *)(v22 + v35);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0)
                    break;
                  v33 += 7;
                  v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_66:
                    v2 = v35 + 1;
                    goto LABEL_67;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_66;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_67;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_67:
              *((_DWORD *)this + 6) = v25;
              goto LABEL_73;
            case 0x186A3u:
              *((_BYTE *)this + 28) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 3) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_62:
                v2 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_39:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_73;
            case 0x186A4u:
              *((_BYTE *)this + 28) |= 4u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_72;
                  }
                  v39 = v27++;
                  v40 = *(_BYTE *)(v28 + v39);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_71:
                    v2 = v39 + 1;
                    goto LABEL_72;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_71;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_72;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_72:
              *((_DWORD *)this + 4) = v31;
LABEL_73:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_73;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaMildImpactResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 8), 0x186A0u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 0x186A1u);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 0x186A2u);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 0x186A4u);
  }
LABEL_10:
  this = PB::Writer::write(a2, *(float *)(v3 + 12), 0x186A3u);
  if ((*(_BYTE *)(v3 + 28) & 4) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 0x186A4u);
  return this;
}

uint64_t CMMsl::KappaMildImpactResult::hash_value(CMMsl::KappaMildImpactResult *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  float v8;

  if ((*((_BYTE *)this + 28) & 1) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 28) & 8) != 0)
      goto LABEL_3;
LABEL_14:
    v3 = 0;
    if ((*((_BYTE *)this + 28) & 0x10) != 0)
      goto LABEL_6;
    goto LABEL_15;
  }
  v8 = *((float *)this + 2);
  v1 = LODWORD(v8);
  if (v8 == 0.0)
    v1 = 0;
  if ((*((_BYTE *)this + 28) & 8) == 0)
    goto LABEL_14;
LABEL_3:
  v2 = *((float *)this + 5);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 28) & 0x10) != 0)
  {
LABEL_6:
    v4 = *((int *)this + 6);
    if ((*((_BYTE *)this + 28) & 2) != 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  v4 = 0;
  if ((*((_BYTE *)this + 28) & 2) != 0)
  {
LABEL_7:
    v5 = *((float *)this + 3);
    v6 = LODWORD(v5);
    if (v5 == 0.0)
      v6 = 0;
    if ((*((_BYTE *)this + 28) & 4) != 0)
      goto LABEL_10;
LABEL_17:
    v7 = 0;
    return v3 ^ v1 ^ v4 ^ v6 ^ v7;
  }
LABEL_16:
  v6 = 0;
  if ((*((_BYTE *)this + 28) & 4) == 0)
    goto LABEL_17;
LABEL_10:
  v7 = *((int *)this + 4);
  return v3 ^ v1 ^ v4 ^ v6 ^ v7;
}

void CMMsl::KappaPeakDetectorMapMagTimestamps::~KappaPeakDetectorMapMagTimestamps(CMMsl::KappaPeakDetectorMapMagTimestamps *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::KappaPeakDetectorMapMagTimestamps::KappaPeakDetectorMapMagTimestamps(uint64_t this, const CMMsl::KappaPeakDetectorMapMagTimestamps *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  *(_QWORD *)this = off_100352128;
  *(_DWORD *)(this + 44) = 0;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 8) != 0)
  {
    v4 = *((_QWORD *)a2 + 4);
    v3 = 8;
    *(_BYTE *)(this + 44) = 8;
    *(_QWORD *)(this + 32) = v4;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 44) & 1) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 1);
    v3 |= 1u;
    *(_BYTE *)(this + 44) = v3;
    *(_QWORD *)(this + 8) = v5;
    v2 = *((_BYTE *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *(_BYTE *)(this + 44) = v3;
    *(_QWORD *)(this + 16) = v6;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        return this;
LABEL_12:
      v8 = *((_QWORD *)a2 + 3);
      *(_BYTE *)(this + 44) = v3 | 4;
      *(_QWORD *)(this + 24) = v8;
      return this;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 10);
  v3 |= 0x10u;
  *(_BYTE *)(this + 44) = v3;
  *(_DWORD *)(this + 40) = v7;
  if ((*((_BYTE *)a2 + 44) & 4) != 0)
    goto LABEL_12;
  return this;
}

uint64_t CMMsl::KappaPeakDetectorMapMagTimestamps::operator=(uint64_t a1, const CMMsl::KappaPeakDetectorMapMagTimestamps *a2)
{
  int v3;
  __int128 v4;
  int v5;
  __int128 v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  int v11;
  int v12;

  if ((const CMMsl::KappaPeakDetectorMapMagTimestamps *)a1 != a2)
  {
    CMMsl::KappaPeakDetectorMapMagTimestamps::KappaPeakDetectorMapMagTimestamps((uint64_t)&v8, a2);
    v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v12;
    v12 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v4;
    v5 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v11;
    v11 = v5;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    v10 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaPeakDetectorMapMagTimestamps *a2, CMMsl::KappaPeakDetectorMapMagTimestamps *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float result;
  uint64_t v8;

  v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  result = *((float *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((float *)a2 + 10) = result;
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  return result;
}

float CMMsl::KappaPeakDetectorMapMagTimestamps::KappaPeakDetectorMapMagTimestamps(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100352128;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(float *)(a2 + 40);
  *(float *)(a1 + 40) = result;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_100352128;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(float *)(a2 + 40);
  *(float *)(a1 + 40) = result;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return result;
}

uint64_t CMMsl::KappaPeakDetectorMapMagTimestamps::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  __int128 v5;
  int v6;
  __int128 v7;
  __int128 v8;
  void (**v10)(CMMsl::KappaPeakDetectorMapMagTimestamps *__hidden);
  __int128 v11;
  __int128 v12;
  int v13;
  int v14;

  if (a1 != a2)
  {
    v10 = off_100352128;
    v3 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a2 + 44) = 0;
    v4 = *(_DWORD *)(a2 + 40);
    v14 = *(_DWORD *)(a1 + 44);
    v5 = *(_OWORD *)(a2 + 8);
    v11 = *(_OWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v4;
    v13 = v6;
    v7 = *(_OWORD *)(a1 + 24);
    v8 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 44) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    *(_OWORD *)(a1 + 24) = v8;
    v12 = v7;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::KappaPeakDetectorMapMagTimestamps::formatText(CMMsl::KappaPeakDetectorMapMagTimestamps *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "epochFirstTimestamp", *((_QWORD *)this + 1));
    v5 = *((_BYTE *)this + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 44) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "epochLastTimestamp", *((_QWORD *)this + 2));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "maxNormValue", *((float *)this + 10));
    if ((*((_BYTE *)this + 44) & 8) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "maxNormTimestamp", *((_QWORD *)this + 3));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 8) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaPeakDetectorMapMagTimestamps::readFrom(CMMsl::KappaPeakDetectorMapMagTimestamps *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 44) |= 8u;
              v20 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v21 = *(_QWORD *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v45 = 0;
                v46 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_88;
                  }
                  v47 = v20++;
                  v48 = *(_BYTE *)(v21 + v47);
                  *((_QWORD *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0)
                    break;
                  v45 += 7;
                  v14 = v46++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_87;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v24 = 0;
LABEL_87:
                v2 = v47 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)a2 + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_88;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_88:
              *((_QWORD *)this + 4) = v24;
              goto LABEL_104;
            case 2u:
              *((_BYTE *)this + 44) |= 1u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_93;
                  }
                  v51 = v27++;
                  v52 = *(_BYTE *)(v28 + v51);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_92:
                    v2 = v51 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v31 = 0;
                goto LABEL_92;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_93;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_93:
              *((_QWORD *)this + 1) = v31;
              goto LABEL_104;
            case 3u:
              *((_BYTE *)this + 44) |= 2u;
              v33 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    v37 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_98;
                  }
                  v55 = v33++;
                  v56 = *(_BYTE *)(v34 + v55);
                  *((_QWORD *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    v37 = 0;
LABEL_97:
                    v2 = v55 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v37 = 0;
                goto LABEL_97;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)a2 + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_98;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              v37 = 0;
LABEL_98:
              *((_QWORD *)this + 2) = v37;
              goto LABEL_104;
            case 4u:
              *((_BYTE *)this + 44) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
                v2 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_104;
            case 5u:
              *((_BYTE *)this + 44) |= 4u;
              v39 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v40 = *(_QWORD *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    v43 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_103;
                  }
                  v59 = v39++;
                  v60 = *(_BYTE *)(v40 + v59);
                  *((_QWORD *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    v43 = 0;
LABEL_102:
                    v2 = v59 + 1;
                    goto LABEL_103;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v43 = 0;
                goto LABEL_102;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)a2 + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_103;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              v43 = 0;
LABEL_103:
              *((_QWORD *)this + 3) = v43;
LABEL_104:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_104;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaPeakDetectorMapMagTimestamps::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 44);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 32), 1u);
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 44) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 8), 2u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 16), 3u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 24), 5u);
  }
LABEL_10:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 4u);
  if ((*(_BYTE *)(v3 + 44) & 4) != 0)
    return PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 24), 5u);
  return this;
}

uint64_t CMMsl::KappaPeakDetectorMapMagTimestamps::hash_value(CMMsl::KappaPeakDetectorMapMagTimestamps *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  uint64_t v6;

  if ((*((_BYTE *)this + 44) & 8) != 0)
  {
    v1 = *((_QWORD *)this + 4);
    if ((*((_BYTE *)this + 44) & 1) != 0)
    {
LABEL_3:
      v2 = *((_QWORD *)this + 1);
      if ((*((_BYTE *)this + 44) & 2) != 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 44) & 1) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 44) & 2) != 0)
  {
LABEL_4:
    v3 = *((_QWORD *)this + 2);
    if ((*((_BYTE *)this + 44) & 0x10) != 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  v3 = 0;
  if ((*((_BYTE *)this + 44) & 0x10) != 0)
  {
LABEL_5:
    v4 = *((float *)this + 10);
    v5 = LODWORD(v4);
    if (v4 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 44) & 4) != 0)
      goto LABEL_8;
LABEL_13:
    v6 = 0;
    return v2 ^ v1 ^ v3 ^ v5 ^ v6;
  }
LABEL_12:
  v5 = 0;
  if ((*((_BYTE *)this + 44) & 4) == 0)
    goto LABEL_13;
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  return v2 ^ v1 ^ v3 ^ v5 ^ v6;
}

void CMMsl::KappaPeakDetectorMapResult::~KappaPeakDetectorMapResult(CMMsl::KappaPeakDetectorMapResult *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_100352160;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::KappaPeakDetectorMapResult::~KappaPeakDetectorMapResult(this);
  operator delete();
}

CMMsl::KappaPeakDetectorMapResult *CMMsl::KappaPeakDetectorMapResult::KappaPeakDetectorMapResult(CMMsl::KappaPeakDetectorMapResult *this, const CMMsl::KappaPeakDetectorMapResult *a2)
{
  char *v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  char v11;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)this = off_100352160;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *((_DWORD *)this + 38) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  v5 = *((_DWORD *)a2 + 38);
  if ((v5 & 0x80) != 0)
  {
    v7 = *((_DWORD *)a2 + 28);
    v6 = 128;
    *((_DWORD *)this + 38) = 128;
    *((_DWORD *)this + 28) = v7;
    v5 = *((_DWORD *)a2 + 38);
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((v5 & 8) != 0)
  {
LABEL_5:
    v8 = *((_QWORD *)a2 + 10);
    v6 |= 8u;
    *((_DWORD *)this + 38) = v6;
    *((_QWORD *)this + 10) = v8;
    v5 = *((_DWORD *)a2 + 38);
  }
LABEL_6:
  if ((v5 & 0x800) != 0)
  {
    v13 = *((_DWORD *)a2 + 32);
    v6 |= 0x800u;
    *((_DWORD *)this + 38) = v6;
    *((_DWORD *)this + 32) = v13;
    v5 = *((_DWORD *)a2 + 38);
    if ((v5 & 0x10) == 0)
    {
LABEL_8:
      if ((v5 & 0x4000) == 0)
        goto LABEL_9;
      goto LABEL_29;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v14 = *((_QWORD *)a2 + 11);
  v6 |= 0x10u;
  *((_DWORD *)this + 38) = v6;
  *((_QWORD *)this + 11) = v14;
  v5 = *((_DWORD *)a2 + 38);
  if ((v5 & 0x4000) == 0)
  {
LABEL_9:
    if ((v5 & 0x8000) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  v15 = *((_DWORD *)a2 + 35);
  v6 |= 0x4000u;
  *((_DWORD *)this + 38) = v6;
  *((_DWORD *)this + 35) = v15;
  v5 = *((_DWORD *)a2 + 38);
  if ((v5 & 0x8000) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  v16 = *((_DWORD *)a2 + 36);
  v6 |= 0x8000u;
  *((_DWORD *)this + 38) = v6;
  *((_DWORD *)this + 36) = v16;
  v5 = *((_DWORD *)a2 + 38);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  v17 = *((_DWORD *)a2 + 30);
  v6 |= 0x200u;
  *((_DWORD *)this + 38) = v6;
  *((_DWORD *)this + 30) = v17;
  v5 = *((_DWORD *)a2 + 38);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  v18 = *((_DWORD *)a2 + 31);
  v6 |= 0x400u;
  *((_DWORD *)this + 38) = v6;
  *((_DWORD *)this + 31) = v18;
  v5 = *((_DWORD *)a2 + 38);
  if ((v5 & 0x20) == 0)
  {
LABEL_13:
    if ((v5 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  v19 = *((_QWORD *)a2 + 12);
  v6 |= 0x20u;
  *((_DWORD *)this + 38) = v6;
  *((_QWORD *)this + 12) = v19;
  v5 = *((_DWORD *)a2 + 38);
  if ((v5 & 0x100) == 0)
  {
LABEL_14:
    if ((v5 & 0x10000) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  v20 = *((_DWORD *)a2 + 29);
  v6 |= 0x100u;
  *((_DWORD *)this + 38) = v6;
  *((_DWORD *)this + 29) = v20;
  v5 = *((_DWORD *)a2 + 38);
  if ((v5 & 0x10000) == 0)
  {
LABEL_15:
    if ((v5 & 0x40) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  v21 = *((_BYTE *)a2 + 148);
  v6 |= 0x10000u;
  *((_DWORD *)this + 38) = v6;
  *((_BYTE *)this + 148) = v21;
  v5 = *((_DWORD *)a2 + 38);
  if ((v5 & 0x40) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  v22 = *((_QWORD *)a2 + 13);
  v6 |= 0x40u;
  *((_DWORD *)this + 38) = v6;
  *((_QWORD *)this + 13) = v22;
  v5 = *((_DWORD *)a2 + 38);
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 4) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  v23 = *((_DWORD *)a2 + 33);
  v6 |= 0x1000u;
  *((_DWORD *)this + 38) = v6;
  *((_DWORD *)this + 33) = v23;
  v5 = *((_DWORD *)a2 + 38);
  if ((v5 & 4) == 0)
  {
LABEL_18:
    if ((v5 & 0x2000) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_38:
  v24 = *((_QWORD *)a2 + 9);
  v6 |= 4u;
  *((_DWORD *)this + 38) = v6;
  *((_QWORD *)this + 9) = v24;
  if ((*((_DWORD *)a2 + 38) & 0x2000) != 0)
  {
LABEL_19:
    v9 = *((_DWORD *)a2 + 34);
    *((_DWORD *)this + 38) = v6 | 0x2000;
    *((_DWORD *)this + 34) = v9;
  }
LABEL_20:
  if (this != a2)
  {
    sub_100239350(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
    sub_100020CE4((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
  }
  v10 = *((_DWORD *)a2 + 38);
  if ((v10 & 1) == 0)
  {
    if ((v10 & 2) == 0)
      goto LABEL_24;
LABEL_41:
    v26 = *((_QWORD *)a2 + 8);
    *((_DWORD *)this + 38) |= 2u;
    *((_QWORD *)this + 8) = v26;
    if ((*((_DWORD *)a2 + 38) & 0x20000) == 0)
      return this;
    goto LABEL_25;
  }
  v25 = *((_QWORD *)a2 + 7);
  *((_DWORD *)this + 38) |= 1u;
  *((_QWORD *)this + 7) = v25;
  v10 = *((_DWORD *)a2 + 38);
  if ((v10 & 2) != 0)
    goto LABEL_41;
LABEL_24:
  if ((v10 & 0x20000) != 0)
  {
LABEL_25:
    v11 = *((_BYTE *)a2 + 149);
    *((_DWORD *)this + 38) |= 0x20000u;
    *((_BYTE *)this + 149) = v11;
  }
  return this;
}

CMMsl *CMMsl::KappaPeakDetectorMapResult::operator=(CMMsl *a1, const CMMsl::KappaPeakDetectorMapResult *a2)
{
  CMMsl::KappaPeakDetectorMapResult *v3;
  _BYTE v5[160];

  if (a1 != a2)
  {
    CMMsl::KappaPeakDetectorMapResult::KappaPeakDetectorMapResult((CMMsl::KappaPeakDetectorMapResult *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaPeakDetectorMapResult *)v5, v3);
    CMMsl::KappaPeakDetectorMapResult::~KappaPeakDetectorMapResult((CMMsl::KappaPeakDetectorMapResult *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaPeakDetectorMapResult *a2, CMMsl::KappaPeakDetectorMapResult *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  float result;
  uint64_t v24;

  v3 = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v3;
  v4 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v4;
  v5 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v5;
  v6 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 148);
  *((_BYTE *)this + 148) = *((_BYTE *)a2 + 148);
  *((_BYTE *)a2 + 148) = v6;
  v7 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v7;
  LODWORD(v7) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v7;
  v8 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v8;
  v9 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v9;
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v10;
  v11 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v11;
  v12 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v12;
  v13 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v13;
  v14 = *((_QWORD *)this + 6);
  v15 = *((_QWORD *)this + 7);
  v16 = *((_QWORD *)a2 + 7);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)this + 7) = v16;
  v17 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v17;
  v18 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v18;
  v19 = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v19;
  v20 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v20;
  v21 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v21;
  v22 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v22;
  result = *((float *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((float *)a2 + 34) = result;
  *((_QWORD *)a2 + 6) = v14;
  *((_QWORD *)a2 + 7) = v15;
  v24 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v24;
  LOBYTE(v24) = *((_BYTE *)this + 149);
  *((_BYTE *)this + 149) = *((_BYTE *)a2 + 149);
  *((_BYTE *)a2 + 149) = v24;
  return result;
}

uint64_t CMMsl::KappaPeakDetectorMapResult::KappaPeakDetectorMapResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = off_100352160;
  v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a2 + 152) = 0;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_BYTE *)(a1 + 148) = *(_BYTE *)(a2 + 148);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  sub_100239458(v4, (__n128 *)(a2 + 32));
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 149) = *(_BYTE *)(a2 + 149);
  return a1;
}

CMMsl *CMMsl::KappaPeakDetectorMapResult::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::KappaPeakDetectorMapResult *v3;
  _BYTE v5[160];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaPeakDetectorMapResult::KappaPeakDetectorMapResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaPeakDetectorMapResult *)v5, v3);
    CMMsl::KappaPeakDetectorMapResult::~KappaPeakDetectorMapResult((CMMsl::KappaPeakDetectorMapResult *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaPeakDetectorMapResult::formatText(CMMsl::KappaPeakDetectorMapResult *this, PB::TextFormatter *a2, const char *a3)
{
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  float *v8;
  float *v9;
  float v10;
  int v11;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 152) & 0x80) != 0)
    PB::TextFormatter::format(a2, "accelPeakThreshold", *((float *)this + 28));
  v5 = (unint64_t *)*((_QWORD *)this + 1);
  v6 = (unint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "allMaxNormTimestamps", v7);
  }
  v8 = (float *)*((_QWORD *)this + 4);
  v9 = (float *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "allMaxNormValues", v10);
  }
  v11 = *((_DWORD *)this + 38);
  if ((v11 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "epochFirstTimestamp", *((_QWORD *)this + 7));
    v11 = *((_DWORD *)this + 38);
    if ((v11 & 2) == 0)
    {
LABEL_9:
      if ((v11 & 0x10000) == 0)
        goto LABEL_10;
      goto LABEL_28;
    }
  }
  else if ((v11 & 2) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(a2, "epochLastTimestamp", *((_QWORD *)this + 8));
  v11 = *((_DWORD *)this + 38);
  if ((v11 & 0x10000) == 0)
  {
LABEL_10:
    if ((v11 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "isMAPDetected", *((_BYTE *)this + 148));
  v11 = *((_DWORD *)this + 38);
  if ((v11 & 0x100) == 0)
  {
LABEL_11:
    if ((v11 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "magnitudePercentileThreshold", *((float *)this + 29));
  v11 = *((_DWORD *)this + 38);
  if ((v11 & 0x200) == 0)
  {
LABEL_12:
    if ((v11 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "magnitudePeriodicityLowerPercentile", *((float *)this + 30));
  v11 = *((_DWORD *)this + 38);
  if ((v11 & 0x400) == 0)
  {
LABEL_13:
    if ((v11 & 0x800) == 0)
      goto LABEL_14;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "magnitudePeriodicityUpperPercentile", *((float *)this + 31));
  v11 = *((_DWORD *)this + 38);
  if ((v11 & 0x800) == 0)
  {
LABEL_14:
    if ((v11 & 0x1000) == 0)
      goto LABEL_15;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "minNumPeaks", *((_DWORD *)this + 32));
  v11 = *((_DWORD *)this + 38);
  if ((v11 & 0x1000) == 0)
  {
LABEL_15:
    if ((v11 & 0x2000) == 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "numPeaks", *((_DWORD *)this + 33));
  v11 = *((_DWORD *)this + 38);
  if ((v11 & 0x2000) == 0)
  {
LABEL_16:
    if ((v11 & 0x20000) == 0)
      goto LABEL_17;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "peakMagnitudePercentileDiff", *((float *)this + 34));
  v11 = *((_DWORD *)this + 38);
  if ((v11 & 0x20000) == 0)
  {
LABEL_17:
    if ((v11 & 4) == 0)
      goto LABEL_18;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "peakSeparation", *((_BYTE *)this + 149));
  v11 = *((_DWORD *)this + 38);
  if ((v11 & 4) == 0)
  {
LABEL_18:
    if ((v11 & 8) == 0)
      goto LABEL_19;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "peakTimeDeltaPercentileDiff", *((_QWORD *)this + 9));
  v11 = *((_DWORD *)this + 38);
  if ((v11 & 8) == 0)
  {
LABEL_19:
    if ((v11 & 0x10) == 0)
      goto LABEL_20;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "peakToPeakMinimumSeparation", *((_QWORD *)this + 10));
  v11 = *((_DWORD *)this + 38);
  if ((v11 & 0x10) == 0)
  {
LABEL_20:
    if ((v11 & 0x20) == 0)
      goto LABEL_21;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "peakToPeakSeparationThreshold", *((_QWORD *)this + 11));
  v11 = *((_DWORD *)this + 38);
  if ((v11 & 0x20) == 0)
  {
LABEL_21:
    if ((v11 & 0x4000) == 0)
      goto LABEL_22;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "timePercentileDiffThreshold", *((_QWORD *)this + 12));
  v11 = *((_DWORD *)this + 38);
  if ((v11 & 0x4000) == 0)
  {
LABEL_22:
    if ((v11 & 0x8000) == 0)
      goto LABEL_23;
LABEL_41:
    PB::TextFormatter::format(a2, "timePeriodicityUpperPercentile", *((float *)this + 36));
    if ((*((_DWORD *)this + 38) & 0x40) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_24;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "timePeriodicityLowerPercentile", *((float *)this + 35));
  v11 = *((_DWORD *)this + 38);
  if ((v11 & 0x8000) != 0)
    goto LABEL_41;
LABEL_23:
  if ((v11 & 0x40) != 0)
LABEL_24:
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 13));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::KappaPeakDetectorMapResult::readFrom(CMMsl::KappaPeakDetectorMapResult *this, PB::Reader *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  void **v9;
  char *v10;
  void **v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char v62;
  unsigned int v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  BOOL v103;
  char v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  char v109;
  unsigned int v110;
  uint64_t v111;
  unint64_t v112;
  char v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  char *v118;
  _DWORD *v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  int v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  char v132;
  unsigned int v133;
  uint64_t v134;
  unint64_t v135;
  char v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  char v140;
  unsigned int v141;
  uint64_t v142;
  unint64_t v143;
  char v144;
  unint64_t v145;
  unint64_t v146;
  int v147;
  BOOL v148;
  unint64_t v149;
  unint64_t v150;
  int v151;
  BOOL v152;
  char v153;
  unsigned int v154;
  unint64_t v155;
  char v156;
  char v157;
  unsigned int v158;
  unint64_t v159;
  char v160;
  char v161;
  unsigned int v162;
  unint64_t v163;
  char v164;
  char v165;
  unsigned int v166;
  unint64_t v167;
  char v168;
  char v169;
  unsigned int v170;
  unint64_t v171;
  char v172;
  char v173;
  unsigned int v174;
  unint64_t v175;
  char v176;
  char v177;
  unsigned int v178;
  unint64_t v179;
  char v180;
  void **v181;
  uint64_t v182;
  unint64_t v183;
  char *v184;
  _QWORD *v185;
  unint64_t v186;
  char *v187;
  _DWORD *v188;
  char v189;
  unsigned int v190;
  unint64_t v191;
  char v192;
  char v193;
  unsigned int v194;
  unint64_t v195;
  char v196;
  char *v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t v207;
  char *v208;
  char *v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  char v214;
  unsigned int v215;
  unint64_t v217;
  char v218;
  uint64_t v219;
  unint64_t v220;
  char v221;
  char *v222;
  int v223;
  unint64_t v224;
  _BYTE v227[16];

  v3 = *((_QWORD *)a2 + 1);
  v4 = *((_QWORD *)a2 + 2);
  v5 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v4 && v5 == 0)
  {
    v9 = (void **)((char *)this + 32);
    v10 = (char *)this + 48;
    v11 = (void **)((char *)this + 8);
    v12 = (_QWORD *)((char *)this + 24);
    while (1)
    {
      v13 = *(_QWORD *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v4)
        break;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      while (1)
      {
        v17 = v3 + 1;
        *((_QWORD *)a2 + 1) = v3 + 1;
        v18 = *(_BYTE *)(v13 + v3);
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0)
          break;
        v14 += 7;
        v3 = v17;
        v103 = v15++ > 8;
        if (v103)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v16 & 7;
      if (v24 == 4)
      {
        v5 = 0;
        return v5 == 0;
      }
      v25 = v16 >> 3;
      if ((int)(v16 >> 3) > 100)
      {
        switch((int)v25)
        {
          case 201:
            *((_DWORD *)this + 38) |= 0x1000u;
            v27 = *((_QWORD *)a2 + 1);
            v28 = *((_QWORD *)a2 + 2);
            v29 = *(_QWORD *)a2;
            if (v27 <= 0xFFFFFFFFFFFFFFF5 && v27 + 10 <= v28)
            {
              v30 = 0;
              v31 = 0;
              v32 = 0;
              do
              {
                v33 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v34 = *(_BYTE *)(v29 + v27);
                v32 |= (unint64_t)(v34 & 0x7F) << v30;
                if ((v34 & 0x80) == 0)
                  goto LABEL_288;
                v30 += 7;
                v27 = v33;
                v103 = v31++ > 8;
              }
              while (!v103);
LABEL_192:
              LODWORD(v32) = 0;
              goto LABEL_288;
            }
            v153 = 0;
            v154 = 0;
            v32 = 0;
            if (v28 <= v27)
              v28 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v28 == v27)
              {
                LODWORD(v32) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v155 = v27 + 1;
                v156 = *(_BYTE *)(v29 + v27);
                *((_QWORD *)a2 + 1) = v155;
                v32 |= (unint64_t)(v156 & 0x7F) << v153;
                if (v156 < 0)
                {
                  v153 += 7;
                  v27 = v155;
                  v103 = v154++ > 8;
                  if (v103)
                    goto LABEL_192;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v32) = 0;
              }
              break;
            }
LABEL_288:
            *((_DWORD *)this + 33) = v32;
            break;
          case 202:
            *((_DWORD *)this + 38) |= 4u;
            v80 = *((_QWORD *)a2 + 1);
            v81 = *((_QWORD *)a2 + 2);
            v82 = *(_QWORD *)a2;
            if (v80 <= 0xFFFFFFFFFFFFFFF5 && v80 + 10 <= v81)
            {
              v83 = 0;
              v84 = 0;
              v85 = 0;
              do
              {
                v86 = v80 + 1;
                *((_QWORD *)a2 + 1) = v80 + 1;
                v87 = *(_BYTE *)(v82 + v80);
                v85 |= (unint64_t)(v87 & 0x7F) << v83;
                if ((v87 & 0x80) == 0)
                  goto LABEL_306;
                v83 += 7;
                v80 = v86;
                v103 = v84++ > 8;
              }
              while (!v103);
LABEL_234:
              v85 = 0;
              goto LABEL_306;
            }
            v177 = 0;
            v178 = 0;
            v85 = 0;
            if (v81 <= v80)
              v81 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v81 == v80)
              {
                v85 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v179 = v80 + 1;
                v180 = *(_BYTE *)(v82 + v80);
                *((_QWORD *)a2 + 1) = v179;
                v85 |= (unint64_t)(v180 & 0x7F) << v177;
                if (v180 < 0)
                {
                  v177 += 7;
                  v80 = v179;
                  v103 = v178++ > 8;
                  if (v103)
                    goto LABEL_234;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v85 = 0;
              }
              break;
            }
LABEL_306:
            *((_QWORD *)this + 9) = v85;
            break;
          case 203:
            *((_DWORD *)this + 38) |= 0x2000u;
            v88 = *((_QWORD *)a2 + 1);
            if (v88 <= 0xFFFFFFFFFFFFFFFBLL && v88 + 4 <= *((_QWORD *)a2 + 2))
            {
              *((_DWORD *)this + 34) = *(_DWORD *)(*(_QWORD *)a2 + v88);
LABEL_258:
              *((_QWORD *)a2 + 1) += 4;
            }
            else
            {
LABEL_96:
              *((_BYTE *)a2 + 24) = 1;
            }
            break;
          case 204:
            if (v24 == 2)
            {
              if ((PB::Reader::placeMark(a2, v227) & 1) != 0)
                return 0;
              if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
              {
                v89 = (char *)*((_QWORD *)this + 2);
                do
                {
                  if ((unint64_t)v89 >= *v12)
                  {
                    v90 = v2;
                    v91 = (char *)*v11;
                    v92 = (v89 - (_BYTE *)*v11) >> 3;
                    v93 = v92 + 1;
                    if ((unint64_t)(v92 + 1) >> 61)
                      goto LABEL_363;
                    v94 = *v12 - (_QWORD)v91;
                    if (v94 >> 2 > v93)
                      v93 = v94 >> 2;
                    if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8)
                      v95 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v95 = v93;
                    if (v95)
                    {
                      v96 = (char *)sub_10000D60C((uint64_t)v12, v95);
                      v91 = (char *)*((_QWORD *)this + 1);
                      v89 = (char *)*((_QWORD *)this + 2);
                    }
                    else
                    {
                      v96 = 0;
                    }
                    v97 = &v96[8 * v92];
                    *(_QWORD *)v97 = 0;
                    v98 = v97 + 8;
                    while (v89 != v91)
                    {
                      v99 = *((_QWORD *)v89 - 1);
                      v89 -= 8;
                      *((_QWORD *)v97 - 1) = v99;
                      v97 -= 8;
                    }
                    *((_QWORD *)this + 1) = v97;
                    *((_QWORD *)this + 2) = v98;
                    *((_QWORD *)this + 3) = &v96[8 * v95];
                    if (v91)
                      operator delete(v91);
                    v89 = v98;
                    v2 = v90;
                  }
                  else
                  {
                    *(_QWORD *)v89 = 0;
                    v89 += 8;
                  }
                  *((_QWORD *)this + 2) = v89;
                  v101 = *((_QWORD *)a2 + 1);
                  v100 = *((_QWORD *)a2 + 2);
                  v102 = *(_QWORD *)a2;
                  v103 = v101 > 0xFFFFFFFFFFFFFFF5 || v101 + 10 > v100;
                  if (!v103)
                  {
                    v109 = 0;
                    v110 = 0;
                    v111 = 0;
                    while (1)
                    {
                      v112 = v101 + 1;
                      *((_QWORD *)a2 + 1) = v101 + 1;
                      v113 = *(_BYTE *)(v102 + v101);
                      v111 |= (unint64_t)(v113 & 0x7F) << v109;
                      if ((v113 & 0x80) == 0)
                        goto LABEL_139;
                      v109 += 7;
                      v101 = v112;
                      v103 = v110++ > 8;
                      if (v103)
                      {
                        v111 = 0;
                        goto LABEL_139;
                      }
                    }
                  }
                  v104 = 0;
                  v105 = 0;
                  v111 = 0;
                  if (v100 <= v101)
                    v106 = *((_QWORD *)a2 + 1);
                  else
                    v106 = *((_QWORD *)a2 + 2);
                  while (1)
                  {
                    if (v106 == v101)
                    {
                      *((_BYTE *)a2 + 24) = 1;
                      *((_QWORD *)v89 - 1) = 0;
                      goto LABEL_276;
                    }
                    v107 = v101++;
                    v108 = *(_BYTE *)(v102 + v107);
                    *((_QWORD *)a2 + 1) = v101;
                    v111 |= (unint64_t)(v108 & 0x7F) << v104;
                    if ((v108 & 0x80) == 0)
                      break;
                    v104 += 7;
                    v103 = v105++ > 8;
                    if (v103)
                    {
                      v111 = 0;
                      goto LABEL_138;
                    }
                  }
                  if (*((_BYTE *)a2 + 24))
                    v111 = 0;
LABEL_138:
                  v112 = v107 + 1;
LABEL_139:
                  *((_QWORD *)v89 - 1) = v111;
                }
                while (v112 < v100 && !*((_BYTE *)a2 + 24));
              }
LABEL_276:
              PB::Reader::recallMark(a2, v227);
            }
            else
            {
              v181 = v9;
              v182 = v2;
              v184 = (char *)*((_QWORD *)this + 2);
              v183 = *((_QWORD *)this + 3);
              if ((unint64_t)v184 >= v183)
              {
                v197 = (char *)*v11;
                v198 = (v184 - (_BYTE *)*v11) >> 3;
                v199 = v198 + 1;
                if ((unint64_t)(v198 + 1) >> 61)
LABEL_363:
                  sub_10000D5F8();
                v200 = v183 - (_QWORD)v197;
                if (v200 >> 2 > v199)
                  v199 = v200 >> 2;
                if ((unint64_t)v200 >= 0x7FFFFFFFFFFFFFF8)
                  v201 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v201 = v199;
                if (v201)
                {
                  v202 = (char *)sub_10000D60C((uint64_t)v12, v201);
                  v197 = (char *)*((_QWORD *)this + 1);
                  v184 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v202 = 0;
                }
                v209 = &v202[8 * v198];
                *(_QWORD *)v209 = 0;
                v185 = v209 + 8;
                while (v184 != v197)
                {
                  v210 = *((_QWORD *)v184 - 1);
                  v184 -= 8;
                  *((_QWORD *)v209 - 1) = v210;
                  v209 -= 8;
                }
                *((_QWORD *)this + 1) = v209;
                *((_QWORD *)this + 2) = v185;
                *((_QWORD *)this + 3) = &v202[8 * v201];
                if (v197)
                  operator delete(v197);
              }
              else
              {
                *(_QWORD *)v184 = 0;
                v185 = v184 + 8;
              }
              *((_QWORD *)this + 2) = v185;
              v211 = *((_QWORD *)a2 + 1);
              v212 = *((_QWORD *)a2 + 2);
              v213 = *(_QWORD *)a2;
              v214 = 0;
              v215 = 0;
              if (v211 > 0xFFFFFFFFFFFFFFF5 || v211 + 10 > v212)
              {
                v219 = 0;
                if (v212 <= v211)
                  v212 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v212 == v211)
                  {
                    v219 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_351;
                  }
                  v217 = v211 + 1;
                  v218 = *(_BYTE *)(v213 + v211);
                  *((_QWORD *)a2 + 1) = v217;
                  v219 |= (unint64_t)(v218 & 0x7F) << v214;
                  if ((v218 & 0x80) == 0)
                    break;
                  v214 += 7;
                  v211 = v217;
                  v103 = v215++ > 8;
                  if (v103)
                  {
LABEL_336:
                    v219 = 0;
                    goto LABEL_351;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v219 = 0;
              }
              else
              {
                v219 = 0;
                while (1)
                {
                  v220 = v211 + 1;
                  *((_QWORD *)a2 + 1) = v211 + 1;
                  v221 = *(_BYTE *)(v213 + v211);
                  v219 |= (unint64_t)(v221 & 0x7F) << v214;
                  if ((v221 & 0x80) == 0)
                    break;
                  v214 += 7;
                  v211 = v220;
                  v103 = v215++ > 8;
                  if (v103)
                    goto LABEL_336;
                }
              }
LABEL_351:
              *(v185 - 1) = v219;
              v2 = v182;
              v9 = v181;
            }
            break;
          case 205:
            if (v24 == 2)
            {
              if ((PB::Reader::placeMark(a2, v227) & 1) != 0)
                return 0;
              v114 = v2;
              v115 = *((_QWORD *)a2 + 1);
              v116 = *((_QWORD *)a2 + 2);
              while (v115 < v116 && !*((_BYTE *)a2 + 24))
              {
                v118 = (char *)*((_QWORD *)this + 5);
                v117 = *((_QWORD *)this + 6);
                if ((unint64_t)v118 >= v117)
                {
                  v120 = (char *)*v9;
                  v121 = (v118 - (_BYTE *)*v9) >> 2;
                  v122 = v121 + 1;
                  if ((unint64_t)(v121 + 1) >> 62)
                    goto LABEL_362;
                  v123 = v117 - (_QWORD)v120;
                  if (v123 >> 1 > v122)
                    v122 = v123 >> 1;
                  if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFFCLL)
                    v124 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v124 = v122;
                  if (v124)
                  {
                    v125 = (char *)sub_100020E2C((uint64_t)v10, v124);
                    v120 = (char *)*((_QWORD *)this + 4);
                    v118 = (char *)*((_QWORD *)this + 5);
                  }
                  else
                  {
                    v125 = 0;
                  }
                  v126 = &v125[4 * v121];
                  *(_DWORD *)v126 = 0;
                  v119 = v126 + 4;
                  while (v118 != v120)
                  {
                    v127 = *((_DWORD *)v118 - 1);
                    v118 -= 4;
                    *((_DWORD *)v126 - 1) = v127;
                    v126 -= 4;
                  }
                  *((_QWORD *)this + 4) = v126;
                  *((_QWORD *)this + 5) = v119;
                  *((_QWORD *)this + 6) = &v125[4 * v124];
                  if (v120)
                    operator delete(v120);
                }
                else
                {
                  *(_DWORD *)v118 = 0;
                  v119 = v118 + 4;
                }
                *((_QWORD *)this + 5) = v119;
                v128 = *((_QWORD *)a2 + 1);
                if (v128 > 0xFFFFFFFFFFFFFFFBLL || v128 + 4 > *((_QWORD *)a2 + 2))
                {
                  *((_BYTE *)a2 + 24) = 1;
                  break;
                }
                *(v119 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v128);
                v116 = *((_QWORD *)a2 + 2);
                v115 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v115;
              }
              PB::Reader::recallMark(a2, v227);
            }
            else
            {
              v114 = v2;
              v187 = (char *)*((_QWORD *)this + 5);
              v186 = *((_QWORD *)this + 6);
              if ((unint64_t)v187 >= v186)
              {
                v203 = (char *)*v9;
                v204 = (v187 - (_BYTE *)*v9) >> 2;
                v205 = v204 + 1;
                if ((unint64_t)(v204 + 1) >> 62)
LABEL_362:
                  sub_10000D5F8();
                v206 = v186 - (_QWORD)v203;
                if (v206 >> 1 > v205)
                  v205 = v206 >> 1;
                if ((unint64_t)v206 >= 0x7FFFFFFFFFFFFFFCLL)
                  v207 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v207 = v205;
                if (v207)
                {
                  v208 = (char *)sub_100020E2C((uint64_t)v10, v207);
                  v203 = (char *)*((_QWORD *)this + 4);
                  v187 = (char *)*((_QWORD *)this + 5);
                }
                else
                {
                  v208 = 0;
                }
                v222 = &v208[4 * v204];
                *(_DWORD *)v222 = 0;
                v188 = v222 + 4;
                while (v187 != v203)
                {
                  v223 = *((_DWORD *)v187 - 1);
                  v187 -= 4;
                  *((_DWORD *)v222 - 1) = v223;
                  v222 -= 4;
                }
                *((_QWORD *)this + 4) = v222;
                *((_QWORD *)this + 5) = v188;
                *((_QWORD *)this + 6) = &v208[4 * v207];
                if (v203)
                  operator delete(v203);
              }
              else
              {
                *(_DWORD *)v187 = 0;
                v188 = v187 + 4;
              }
              *((_QWORD *)this + 5) = v188;
              v224 = *((_QWORD *)a2 + 1);
              if (v224 <= 0xFFFFFFFFFFFFFFFBLL && v224 + 4 <= *((_QWORD *)a2 + 2))
              {
                *(v188 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v224);
                *((_QWORD *)a2 + 1) += 4;
              }
              else
              {
                *((_BYTE *)a2 + 24) = 1;
              }
            }
            v2 = v114;
            break;
          case 206:
            *((_DWORD *)this + 38) |= 1u;
            v129 = *((_QWORD *)a2 + 1);
            v130 = *((_QWORD *)a2 + 2);
            v131 = *(_QWORD *)a2;
            if (v129 <= 0xFFFFFFFFFFFFFFF5 && v129 + 10 <= v130)
            {
              v132 = 0;
              v133 = 0;
              v134 = 0;
              do
              {
                v135 = v129 + 1;
                *((_QWORD *)a2 + 1) = v129 + 1;
                v136 = *(_BYTE *)(v131 + v129);
                v134 |= (unint64_t)(v136 & 0x7F) << v132;
                if ((v136 & 0x80) == 0)
                  goto LABEL_309;
                v132 += 7;
                v129 = v135;
                v103 = v133++ > 8;
              }
              while (!v103);
LABEL_245:
              v134 = 0;
              goto LABEL_309;
            }
            v189 = 0;
            v190 = 0;
            v134 = 0;
            if (v130 <= v129)
              v130 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v130 == v129)
              {
                v134 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v191 = v129 + 1;
                v192 = *(_BYTE *)(v131 + v129);
                *((_QWORD *)a2 + 1) = v191;
                v134 |= (unint64_t)(v192 & 0x7F) << v189;
                if (v192 < 0)
                {
                  v189 += 7;
                  v129 = v191;
                  v103 = v190++ > 8;
                  if (v103)
                    goto LABEL_245;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v134 = 0;
              }
              break;
            }
LABEL_309:
            *((_QWORD *)this + 7) = v134;
            break;
          case 207:
            *((_DWORD *)this + 38) |= 2u;
            v137 = *((_QWORD *)a2 + 1);
            v138 = *((_QWORD *)a2 + 2);
            v139 = *(_QWORD *)a2;
            if (v137 <= 0xFFFFFFFFFFFFFFF5 && v137 + 10 <= v138)
            {
              v140 = 0;
              v141 = 0;
              v142 = 0;
              do
              {
                v143 = v137 + 1;
                *((_QWORD *)a2 + 1) = v137 + 1;
                v144 = *(_BYTE *)(v139 + v137);
                v142 |= (unint64_t)(v144 & 0x7F) << v140;
                if ((v144 & 0x80) == 0)
                  goto LABEL_312;
                v140 += 7;
                v137 = v143;
                v103 = v141++ > 8;
              }
              while (!v103);
LABEL_252:
              v142 = 0;
              goto LABEL_312;
            }
            v193 = 0;
            v194 = 0;
            v142 = 0;
            if (v138 <= v137)
              v138 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v138 == v137)
              {
                v142 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v195 = v137 + 1;
                v196 = *(_BYTE *)(v139 + v137);
                *((_QWORD *)a2 + 1) = v195;
                v142 |= (unint64_t)(v196 & 0x7F) << v193;
                if (v196 < 0)
                {
                  v193 += 7;
                  v137 = v195;
                  v103 = v194++ > 8;
                  if (v103)
                    goto LABEL_252;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v142 = 0;
              }
              break;
            }
LABEL_312:
            *((_QWORD *)this + 8) = v142;
            break;
          case 208:
            *((_DWORD *)this + 38) |= 0x20000u;
            v145 = *((_QWORD *)a2 + 1);
            if (v145 >= *((_QWORD *)a2 + 2))
            {
              v148 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v146 = v145 + 1;
              v147 = *(unsigned __int8 *)(*(_QWORD *)a2 + v145);
              *((_QWORD *)a2 + 1) = v146;
              v148 = v147 != 0;
            }
            *((_BYTE *)this + 149) = v148;
            break;
          default:
            if ((_DWORD)v25 == 101)
            {
              *((_DWORD *)this + 38) |= 0x10000u;
              v149 = *((_QWORD *)a2 + 1);
              if (v149 >= *((_QWORD *)a2 + 2))
              {
                v152 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v150 = v149 + 1;
                v151 = *(unsigned __int8 *)(*(_QWORD *)a2 + v149);
                *((_QWORD *)a2 + 1) = v150;
                v152 = v151 != 0;
              }
              *((_BYTE *)this + 148) = v152;
            }
            else if ((_DWORD)v25 == 102)
            {
              *((_DWORD *)this + 38) |= 0x40u;
              v35 = *((_QWORD *)a2 + 1);
              v36 = *((_QWORD *)a2 + 2);
              v37 = *(_QWORD *)a2;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v36)
              {
                v157 = 0;
                v158 = 0;
                v40 = 0;
                if (v36 <= v35)
                  v36 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v36 == v35)
                  {
                    v40 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_291;
                  }
                  v159 = v35 + 1;
                  v160 = *(_BYTE *)(v37 + v35);
                  *((_QWORD *)a2 + 1) = v159;
                  v40 |= (unint64_t)(v160 & 0x7F) << v157;
                  if ((v160 & 0x80) == 0)
                    break;
                  v157 += 7;
                  v35 = v159;
                  v103 = v158++ > 8;
                  if (v103)
                  {
LABEL_199:
                    v40 = 0;
                    goto LABEL_291;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v40 = 0;
              }
              else
              {
                v38 = 0;
                v39 = 0;
                v40 = 0;
                while (1)
                {
                  v41 = v35 + 1;
                  *((_QWORD *)a2 + 1) = v35 + 1;
                  v42 = *(_BYTE *)(v37 + v35);
                  v40 |= (unint64_t)(v42 & 0x7F) << v38;
                  if ((v42 & 0x80) == 0)
                    break;
                  v38 += 7;
                  v35 = v41;
                  v103 = v39++ > 8;
                  if (v103)
                    goto LABEL_199;
                }
              }
LABEL_291:
              *((_QWORD *)this + 13) = v40;
            }
            else
            {
LABEL_184:
              if ((PB::Reader::skip(a2, v25, v24, 0) & 1) == 0)
                return 0;
            }
            break;
        }
      }
      else
      {
        switch((int)v25)
        {
          case 1:
            *((_DWORD *)this + 38) |= 0x80u;
            v26 = *((_QWORD *)a2 + 1);
            if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_96;
            *((_DWORD *)this + 28) = *(_DWORD *)(*(_QWORD *)a2 + v26);
            goto LABEL_258;
          case 2:
            *((_DWORD *)this + 38) |= 8u;
            v43 = *((_QWORD *)a2 + 1);
            v44 = *((_QWORD *)a2 + 2);
            v45 = *(_QWORD *)a2;
            if (v43 <= 0xFFFFFFFFFFFFFFF5 && v43 + 10 <= v44)
            {
              v46 = 0;
              v47 = 0;
              v48 = 0;
              do
              {
                v49 = v43 + 1;
                *((_QWORD *)a2 + 1) = v43 + 1;
                v50 = *(_BYTE *)(v45 + v43);
                v48 |= (unint64_t)(v50 & 0x7F) << v46;
                if ((v50 & 0x80) == 0)
                  goto LABEL_294;
                v46 += 7;
                v43 = v49;
                v103 = v47++ > 8;
              }
              while (!v103);
LABEL_206:
              v48 = 0;
              goto LABEL_294;
            }
            v161 = 0;
            v162 = 0;
            v48 = 0;
            if (v44 <= v43)
              v44 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v44 == v43)
              {
                v48 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v163 = v43 + 1;
                v164 = *(_BYTE *)(v45 + v43);
                *((_QWORD *)a2 + 1) = v163;
                v48 |= (unint64_t)(v164 & 0x7F) << v161;
                if (v164 < 0)
                {
                  v161 += 7;
                  v43 = v163;
                  v103 = v162++ > 8;
                  if (v103)
                    goto LABEL_206;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v48 = 0;
              }
              break;
            }
LABEL_294:
            *((_QWORD *)this + 10) = v48;
            goto LABEL_352;
          case 3:
            *((_DWORD *)this + 38) |= 0x800u;
            v51 = *((_QWORD *)a2 + 1);
            v52 = *((_QWORD *)a2 + 2);
            v53 = *(_QWORD *)a2;
            if (v51 <= 0xFFFFFFFFFFFFFFF5 && v51 + 10 <= v52)
            {
              v54 = 0;
              v55 = 0;
              v56 = 0;
              do
              {
                v57 = v51 + 1;
                *((_QWORD *)a2 + 1) = v51 + 1;
                v58 = *(_BYTE *)(v53 + v51);
                v56 |= (unint64_t)(v58 & 0x7F) << v54;
                if ((v58 & 0x80) == 0)
                  goto LABEL_297;
                v54 += 7;
                v51 = v57;
                v103 = v55++ > 8;
              }
              while (!v103);
LABEL_213:
              LODWORD(v56) = 0;
              goto LABEL_297;
            }
            v165 = 0;
            v166 = 0;
            v56 = 0;
            if (v52 <= v51)
              v52 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v52 == v51)
              {
                LODWORD(v56) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v167 = v51 + 1;
                v168 = *(_BYTE *)(v53 + v51);
                *((_QWORD *)a2 + 1) = v167;
                v56 |= (unint64_t)(v168 & 0x7F) << v165;
                if (v168 < 0)
                {
                  v165 += 7;
                  v51 = v167;
                  v103 = v166++ > 8;
                  if (v103)
                    goto LABEL_213;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v56) = 0;
              }
              break;
            }
LABEL_297:
            *((_DWORD *)this + 32) = v56;
            goto LABEL_352;
          case 4:
            *((_DWORD *)this + 38) |= 0x10u;
            v59 = *((_QWORD *)a2 + 1);
            v60 = *((_QWORD *)a2 + 2);
            v61 = *(_QWORD *)a2;
            if (v59 <= 0xFFFFFFFFFFFFFFF5 && v59 + 10 <= v60)
            {
              v62 = 0;
              v63 = 0;
              v64 = 0;
              do
              {
                v65 = v59 + 1;
                *((_QWORD *)a2 + 1) = v59 + 1;
                v66 = *(_BYTE *)(v61 + v59);
                v64 |= (unint64_t)(v66 & 0x7F) << v62;
                if ((v66 & 0x80) == 0)
                  goto LABEL_300;
                v62 += 7;
                v59 = v65;
                v103 = v63++ > 8;
              }
              while (!v103);
LABEL_220:
              v64 = 0;
              goto LABEL_300;
            }
            v169 = 0;
            v170 = 0;
            v64 = 0;
            if (v60 <= v59)
              v60 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v60 == v59)
              {
                v64 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v171 = v59 + 1;
                v172 = *(_BYTE *)(v61 + v59);
                *((_QWORD *)a2 + 1) = v171;
                v64 |= (unint64_t)(v172 & 0x7F) << v169;
                if (v172 < 0)
                {
                  v169 += 7;
                  v59 = v171;
                  v103 = v170++ > 8;
                  if (v103)
                    goto LABEL_220;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v64 = 0;
              }
              break;
            }
LABEL_300:
            *((_QWORD *)this + 11) = v64;
            goto LABEL_352;
          case 5:
            *((_DWORD *)this + 38) |= 0x4000u;
            v67 = *((_QWORD *)a2 + 1);
            if (v67 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_96;
            *((_DWORD *)this + 35) = *(_DWORD *)(*(_QWORD *)a2 + v67);
            goto LABEL_258;
          case 6:
            *((_DWORD *)this + 38) |= 0x8000u;
            v68 = *((_QWORD *)a2 + 1);
            if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_96;
            *((_DWORD *)this + 36) = *(_DWORD *)(*(_QWORD *)a2 + v68);
            goto LABEL_258;
          case 7:
            *((_DWORD *)this + 38) |= 0x200u;
            v69 = *((_QWORD *)a2 + 1);
            if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_96;
            *((_DWORD *)this + 30) = *(_DWORD *)(*(_QWORD *)a2 + v69);
            goto LABEL_258;
          case 8:
            *((_DWORD *)this + 38) |= 0x400u;
            v70 = *((_QWORD *)a2 + 1);
            if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_96;
            *((_DWORD *)this + 31) = *(_DWORD *)(*(_QWORD *)a2 + v70);
            goto LABEL_258;
          case 9:
            *((_DWORD *)this + 38) |= 0x20u;
            v71 = *((_QWORD *)a2 + 1);
            v72 = *((_QWORD *)a2 + 2);
            v73 = *(_QWORD *)a2;
            if (v71 <= 0xFFFFFFFFFFFFFFF5 && v71 + 10 <= v72)
            {
              v74 = 0;
              v75 = 0;
              v76 = 0;
              do
              {
                v77 = v71 + 1;
                *((_QWORD *)a2 + 1) = v71 + 1;
                v78 = *(_BYTE *)(v73 + v71);
                v76 |= (unint64_t)(v78 & 0x7F) << v74;
                if ((v78 & 0x80) == 0)
                  goto LABEL_303;
                v74 += 7;
                v71 = v77;
                v103 = v75++ > 8;
              }
              while (!v103);
LABEL_227:
              v76 = 0;
              goto LABEL_303;
            }
            v173 = 0;
            v174 = 0;
            v76 = 0;
            if (v72 <= v71)
              v72 = *((_QWORD *)a2 + 1);
            break;
          case 10:
            *((_DWORD *)this + 38) |= 0x100u;
            v79 = *((_QWORD *)a2 + 1);
            if (v79 > 0xFFFFFFFFFFFFFFFBLL || v79 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_96;
            *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v79);
            goto LABEL_258;
          default:
            goto LABEL_184;
        }
        while (1)
        {
          if (v72 == v71)
          {
            v76 = 0;
            *((_BYTE *)a2 + 24) = 1;
            goto LABEL_303;
          }
          v175 = v71 + 1;
          v176 = *(_BYTE *)(v73 + v71);
          *((_QWORD *)a2 + 1) = v175;
          v76 |= (unint64_t)(v176 & 0x7F) << v173;
          if ((v176 & 0x80) == 0)
            break;
          v173 += 7;
          v71 = v175;
          v103 = v174++ > 8;
          if (v103)
            goto LABEL_227;
        }
        if (*((_BYTE *)a2 + 24))
          v76 = 0;
LABEL_303:
        *((_QWORD *)this + 12) = v76;
      }
LABEL_352:
      v3 = *((_QWORD *)a2 + 1);
      v4 = *((_QWORD *)a2 + 2);
      v5 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v4 || v5 != 0)
        return v5 == 0;
    }
    v19 = 0;
    v20 = 0;
    v16 = 0;
    if (v3 > v4)
      v4 = v3;
    while (v4 != v3)
    {
      v21 = v3 + 1;
      v22 = *(_BYTE *)(v13 + v3);
      *((_QWORD *)a2 + 1) = v21;
      v16 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v3 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v16 = 0;
        goto LABEL_21;
      }
    }
    v5 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v5 == 0;
}

uint64_t CMMsl::KappaPeakDetectorMapResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  float *v8;
  float *v9;
  float v10;
  int v11;

  v3 = this;
  v4 = *(_DWORD *)(this + 152);
  if ((v4 & 0x80) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 112), 1u);
    v4 = *(_DWORD *)(v3 + 152);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x800) == 0)
        goto LABEL_4;
      goto LABEL_29;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 80), 2u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x800) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 128), 3u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 0x4000) == 0)
      goto LABEL_6;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 88), 4u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x4000) == 0)
  {
LABEL_6:
    if ((v4 & 0x8000) == 0)
      goto LABEL_7;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 140), 5u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x8000) == 0)
  {
LABEL_7:
    if ((v4 & 0x200) == 0)
      goto LABEL_8;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 144), 6u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x200) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0)
      goto LABEL_9;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 120), 7u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 124), 8u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 96), 9u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x10000) == 0)
      goto LABEL_12;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 116), 0xAu);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x10000) == 0)
  {
LABEL_12:
    if ((v4 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 148), 0x65u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x40) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 104), 0x66u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x1000) == 0)
  {
LABEL_14:
    if ((v4 & 4) == 0)
      goto LABEL_15;
LABEL_40:
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 72), 0xCAu);
    if ((*(_DWORD *)(v3 + 152) & 0x2000) == 0)
      goto LABEL_17;
    goto LABEL_16;
  }
LABEL_39:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 132), 0xC9u);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 4) != 0)
    goto LABEL_40;
LABEL_15:
  if ((v4 & 0x2000) != 0)
LABEL_16:
    this = PB::Writer::write(a2, *(float *)(v3 + 136), 0xCBu);
LABEL_17:
  v5 = *(unint64_t **)(v3 + 8);
  v6 = *(unint64_t **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::writeVarInt(a2, v7, 0xCCu);
  }
  v8 = *(float **)(v3 + 32);
  v9 = *(float **)(v3 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    this = PB::Writer::write(a2, v10, 0xCDu);
  }
  v11 = *(_DWORD *)(v3 + 152);
  if ((v11 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 56), 0xCEu);
    v11 = *(_DWORD *)(v3 + 152);
    if ((v11 & 2) == 0)
    {
LABEL_25:
      if ((v11 & 0x20000) == 0)
        return this;
      return PB::Writer::write(a2, *(_BYTE *)(v3 + 149), 0xD0u);
    }
  }
  else if ((v11 & 2) == 0)
  {
    goto LABEL_25;
  }
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 64), 0xCFu);
  if ((*(_DWORD *)(v3 + 152) & 0x20000) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 149), 0xD0u);
  return this;
}

uint64_t CMMsl::KappaPeakDetectorMapResult::hash_value(CMMsl::KappaPeakDetectorMapResult *this)
{
  int v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = *((_DWORD *)this + 38);
  if ((v2 & 0x80) != 0)
  {
    v20 = *((float *)this + 28);
    v21 = LODWORD(v20);
    if (v20 == 0.0)
      v21 = 0;
    v35 = v21;
    if ((v2 & 8) != 0)
    {
LABEL_3:
      v34 = *((_QWORD *)this + 10);
      if ((v2 & 0x800) != 0)
        goto LABEL_4;
      goto LABEL_35;
    }
  }
  else
  {
    v35 = 0;
    if ((v2 & 8) != 0)
      goto LABEL_3;
  }
  v34 = 0;
  if ((v2 & 0x800) != 0)
  {
LABEL_4:
    v33 = *((unsigned int *)this + 32);
    if ((v2 & 0x10) != 0)
      goto LABEL_5;
    goto LABEL_36;
  }
LABEL_35:
  v33 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    v32 = *((_QWORD *)this + 11);
    if ((v2 & 0x4000) != 0)
      goto LABEL_6;
LABEL_37:
    v31 = 0;
    if ((v2 & 0x8000) != 0)
      goto LABEL_9;
LABEL_38:
    v30 = 0;
    if ((v2 & 0x200) != 0)
      goto LABEL_12;
LABEL_39:
    v29 = 0;
    if ((v2 & 0x400) != 0)
      goto LABEL_15;
LABEL_40:
    v10 = 0;
    if ((v2 & 0x20) != 0)
      goto LABEL_19;
    goto LABEL_41;
  }
LABEL_36:
  v32 = 0;
  if ((v2 & 0x4000) == 0)
    goto LABEL_37;
LABEL_6:
  v3 = *((float *)this + 35);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  v31 = v4;
  if ((v2 & 0x8000) == 0)
    goto LABEL_38;
LABEL_9:
  v5 = *((float *)this + 36);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  v30 = v6;
  if ((v2 & 0x200) == 0)
    goto LABEL_39;
LABEL_12:
  v7 = *((float *)this + 30);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  v29 = v8;
  if ((v2 & 0x400) == 0)
    goto LABEL_40;
LABEL_15:
  v9 = *((float *)this + 31);
  if (v9 == 0.0)
    v10 = 0;
  else
    v10 = LODWORD(v9);
  if ((v2 & 0x20) != 0)
  {
LABEL_19:
    v11 = *((_QWORD *)this + 12);
    if ((v2 & 0x100) != 0)
      goto LABEL_20;
LABEL_42:
    v13 = 0;
    if ((v2 & 0x10000) != 0)
      goto LABEL_24;
    goto LABEL_43;
  }
LABEL_41:
  v11 = 0;
  if ((v2 & 0x100) == 0)
    goto LABEL_42;
LABEL_20:
  v12 = *((float *)this + 29);
  if (v12 == 0.0)
    v13 = 0;
  else
    v13 = LODWORD(v12);
  if ((v2 & 0x10000) != 0)
  {
LABEL_24:
    v14 = *((unsigned __int8 *)this + 148);
    if ((v2 & 0x40) != 0)
      goto LABEL_25;
    goto LABEL_44;
  }
LABEL_43:
  v14 = 0;
  if ((v2 & 0x40) != 0)
  {
LABEL_25:
    v15 = *((_QWORD *)this + 13);
    if ((v2 & 0x1000) != 0)
      goto LABEL_26;
    goto LABEL_45;
  }
LABEL_44:
  v15 = 0;
  if ((v2 & 0x1000) != 0)
  {
LABEL_26:
    v16 = *((int *)this + 33);
    if ((v2 & 4) != 0)
      goto LABEL_27;
    goto LABEL_46;
  }
LABEL_45:
  v16 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_27:
    v17 = *((_QWORD *)this + 9);
    if ((v2 & 0x2000) != 0)
      goto LABEL_28;
LABEL_47:
    v19 = 0;
    goto LABEL_48;
  }
LABEL_46:
  v17 = 0;
  if ((v2 & 0x2000) == 0)
    goto LABEL_47;
LABEL_28:
  v18 = *((float *)this + 34);
  if (v18 == 0.0)
    v19 = 0;
  else
    v19 = LODWORD(v18);
LABEL_48:
  v22 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  v23 = PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
  v24 = *((_DWORD *)this + 38);
  if ((v24 & 1) == 0)
  {
    v25 = 0;
    if ((v24 & 2) != 0)
      goto LABEL_50;
LABEL_53:
    v26 = 0;
    if ((v24 & 0x20000) != 0)
      goto LABEL_51;
LABEL_54:
    v27 = 0;
    return v34 ^ v35 ^ v33 ^ v32 ^ v31 ^ v30 ^ v29 ^ v10 ^ v11 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v19 ^ v22 ^ v23 ^ v25 ^ v26 ^ v27;
  }
  v25 = *((_QWORD *)this + 7);
  if ((v24 & 2) == 0)
    goto LABEL_53;
LABEL_50:
  v26 = *((_QWORD *)this + 8);
  if ((v24 & 0x20000) == 0)
    goto LABEL_54;
LABEL_51:
  v27 = *((unsigned __int8 *)this + 149);
  return v34 ^ v35 ^ v33 ^ v32 ^ v31 ^ v30 ^ v29 ^ v10 ^ v11 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v19 ^ v22 ^ v23 ^ v25 ^ v26 ^ v27;
}

void CMMsl::KappaPulseDeltaV::~KappaPulseDeltaV(CMMsl::KappaPulseDeltaV *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::KappaPulseDeltaV::KappaPulseDeltaV(uint64_t this, const CMMsl::KappaPulseDeltaV *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)this = off_100352198;
  *(_DWORD *)(this + 72) = 0;
  *(_DWORD *)(this + 112) = 0;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x40) != 0)
  {
    v4 = *((_QWORD *)a2 + 7);
    v3 = 64;
    *(_DWORD *)(this + 112) = 64;
    *(_QWORD *)(this + 56) = v4;
    v2 = *((_DWORD *)a2 + 28);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 8) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 4);
    v3 |= 8u;
    *(_DWORD *)(this + 112) = v3;
    *(_QWORD *)(this + 32) = v5;
    v2 = *((_DWORD *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    v6 = *((_QWORD *)a2 + 1);
    v3 |= 1u;
    *(_DWORD *)(this + 112) = v3;
    *(_QWORD *)(this + 8) = v6;
    v2 = *((_DWORD *)a2 + 28);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 0x1000) == 0)
        goto LABEL_9;
      goto LABEL_26;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 16);
  v3 |= 0x80u;
  *(_DWORD *)(this + 112) = v3;
  *(_DWORD *)(this + 64) = v7;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x1000) == 0)
  {
LABEL_9:
    if ((v2 & 0x4000) == 0)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  v8 = *((_DWORD *)a2 + 21);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 112) = v3;
  *(_DWORD *)(this + 84) = v8;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x4000) == 0)
  {
LABEL_10:
    if ((v2 & 0x10000) == 0)
      goto LABEL_11;
    goto LABEL_28;
  }
LABEL_27:
  v9 = *((_DWORD *)a2 + 23);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 112) = v3;
  *(_DWORD *)(this + 92) = v9;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x10000) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_28:
  v10 = *((_DWORD *)a2 + 25);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 112) = v3;
  *(_DWORD *)(this + 100) = v10;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  v11 = *((_DWORD *)a2 + 19);
  v3 |= 0x400u;
  *(_DWORD *)(this + 112) = v3;
  *(_DWORD *)(this + 76) = v11;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 0x8000) == 0)
      goto LABEL_14;
    goto LABEL_31;
  }
LABEL_30:
  v12 = *((_DWORD *)a2 + 22);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 112) = v3;
  *(_DWORD *)(this + 88) = v12;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x8000) == 0)
  {
LABEL_14:
    if ((v2 & 0x20000) == 0)
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_31:
  v13 = *((_DWORD *)a2 + 24);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 112) = v3;
  *(_DWORD *)(this + 96) = v13;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x20000) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_33;
  }
LABEL_32:
  v14 = *((_DWORD *)a2 + 26);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 112) = v3;
  *(_DWORD *)(this + 104) = v14;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x800) == 0)
  {
LABEL_16:
    if ((v2 & 0x100) == 0)
      goto LABEL_17;
    goto LABEL_34;
  }
LABEL_33:
  v15 = *((_DWORD *)a2 + 20);
  v3 |= 0x800u;
  *(_DWORD *)(this + 112) = v3;
  *(_DWORD *)(this + 80) = v15;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x100) == 0)
  {
LABEL_17:
    if ((v2 & 0x40000) == 0)
      goto LABEL_18;
    goto LABEL_35;
  }
LABEL_34:
  v16 = *((_DWORD *)a2 + 17);
  v3 |= 0x100u;
  *(_DWORD *)(this + 112) = v3;
  *(_DWORD *)(this + 68) = v16;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x40000) == 0)
  {
LABEL_18:
    if ((v2 & 0x200) == 0)
      goto LABEL_19;
    goto LABEL_36;
  }
LABEL_35:
  v17 = *((_BYTE *)a2 + 108);
  v3 |= 0x40000u;
  *(_DWORD *)(this + 112) = v3;
  *(_BYTE *)(this + 108) = v17;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x200) == 0)
  {
LABEL_19:
    if ((v2 & 2) == 0)
      goto LABEL_20;
    goto LABEL_37;
  }
LABEL_36:
  v18 = *((_DWORD *)a2 + 18);
  v3 |= 0x200u;
  *(_DWORD *)(this + 112) = v3;
  *(_DWORD *)(this + 72) = v18;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 2) == 0)
  {
LABEL_20:
    if ((v2 & 0x20) == 0)
      goto LABEL_21;
    goto LABEL_38;
  }
LABEL_37:
  v19 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 112) = v3;
  *(_QWORD *)(this + 16) = v19;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x20) == 0)
  {
LABEL_21:
    if ((v2 & 0x10) == 0)
      goto LABEL_22;
    goto LABEL_39;
  }
LABEL_38:
  v20 = *((_QWORD *)a2 + 6);
  v3 |= 0x20u;
  *(_DWORD *)(this + 112) = v3;
  *(_QWORD *)(this + 48) = v20;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x10) == 0)
  {
LABEL_22:
    if ((v2 & 4) == 0)
      return this;
LABEL_40:
    v22 = *((_QWORD *)a2 + 3);
    *(_DWORD *)(this + 112) = v3 | 4;
    *(_QWORD *)(this + 24) = v22;
    return this;
  }
LABEL_39:
  v21 = *((_QWORD *)a2 + 5);
  v3 |= 0x10u;
  *(_DWORD *)(this + 112) = v3;
  *(_QWORD *)(this + 40) = v21;
  if ((*((_DWORD *)a2 + 28) & 4) != 0)
    goto LABEL_40;
  return this;
}

CMMsl *CMMsl::KappaPulseDeltaV::operator=(CMMsl *a1, const CMMsl::KappaPulseDeltaV *a2)
{
  CMMsl::KappaPulseDeltaV *v3;
  _BYTE v5[120];

  if (a1 != a2)
  {
    CMMsl::KappaPulseDeltaV::KappaPulseDeltaV((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaPulseDeltaV *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaPulseDeltaV *a2, CMMsl::KappaPulseDeltaV *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  float result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v3;
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v4;
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  v7 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v7;
  v8 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v8;
  v9 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v9;
  v10 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v10;
  v11 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v11;
  v12 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v12;
  v13 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v13;
  v14 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v14;
  v15 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v15;
  result = *((float *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((float *)a2 + 17) = result;
  LOBYTE(v6) = *((_BYTE *)this + 108);
  *((_BYTE *)this + 108) = *((_BYTE *)a2 + 108);
  *((_BYTE *)a2 + 108) = v6;
  LODWORD(v6) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v6;
  v17 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v17;
  v18 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v18;
  v19 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v19;
  v20 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v20;
  return result;
}

float CMMsl::KappaPulseDeltaV::KappaPulseDeltaV(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100352198;
  *(_DWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  result = *(float *)(a2 + 68);
  *(float *)(a1 + 68) = result;
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return result;
}

CMMsl *CMMsl::KappaPulseDeltaV::operator=(CMMsl *this, uint64_t a2, CMMsl::KappaPulseDeltaV *a3)
{
  __int128 v4;
  __int128 v5;
  void (**v7)(CMMsl::KappaPulseDeltaV *__hidden);
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  __int128 v15;
  char v16;
  int v17;

  if (this != (CMMsl *)a2)
  {
    v7 = off_100352198;
    v17 = *(_DWORD *)(a2 + 112);
    *(_DWORD *)(a2 + 112) = 0;
    v11 = *(_QWORD *)(a2 + 56);
    v15 = *(_OWORD *)(a2 + 92);
    v14 = *(_OWORD *)(a2 + 76);
    v12 = *(_QWORD *)(a2 + 64);
    v16 = *(_BYTE *)(a2 + 108);
    v13 = *(_DWORD *)(a2 + 72);
    v4 = *(_OWORD *)(a2 + 8);
    v10 = *(_OWORD *)(a2 + 40);
    v5 = *(_OWORD *)(a2 + 24);
    v8 = v4;
    v9 = v5;
    CMMsl::swap(this, (CMMsl::KappaPulseDeltaV *)&v7, a3);
    PB::Base::~Base((PB::Base *)&v7);
  }
  return this;
}

uint64_t CMMsl::KappaPulseDeltaV::formatText(CMMsl::KappaPulseDeltaV *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x80) != 0)
  {
    PB::TextFormatter::format(a2, "accelMagnitude", *((float *)this + 16));
    v5 = *((_DWORD *)this + 28);
    if ((v5 & 0x100) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_24;
    }
  }
  else if ((v5 & 0x100) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "deltaVThisImpact", *((float *)this + 17));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0)
      goto LABEL_5;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "dimensions", *((_QWORD *)this + 1));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "epochCounter", *((_QWORD *)this + 2));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0)
      goto LABEL_7;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "jHG", *((_QWORD *)this + 3));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "jImpactStart", *((_QWORD *)this + 4));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "jLG", *((_QWORD *)this + 5));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40000) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "nextTimestamp", *((_QWORD *)this + 6));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x40000) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "partOfHgPath", *((_BYTE *)this + 108));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "pointType", *((_DWORD *)this + 18));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "runningArclengthOverEpoch", *((float *)this + 19));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "runningArclengthThisImpact", *((float *)this + 20));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "runningDeltaVXOverEpoch", *((float *)this + 21));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "runningDeltaVXThisImpact", *((float *)this + 22));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "runningDeltaVYOverEpoch", *((float *)this + 23));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "runningDeltaVYThisImpact", *((float *)this + 24));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0)
      goto LABEL_19;
LABEL_39:
    PB::TextFormatter::format(a2, "runningDeltaVZThisImpact", *((float *)this + 26));
    if ((*((_DWORD *)this + 28) & 0x40) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_20;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "runningDeltaVZOverEpoch", *((float *)this + 25));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x20000) != 0)
    goto LABEL_39;
LABEL_19:
  if ((v5 & 0x40) != 0)
LABEL_20:
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 7));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaPulseDeltaV::readFrom(CMMsl::KappaPulseDeltaV *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  int v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  char v58;
  unint64_t v59;
  uint64_t v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  char v64;
  unint64_t v65;
  uint64_t v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  unint64_t v81;
  char v82;
  char v83;
  unsigned int v84;
  unint64_t v85;
  char v86;
  char v87;
  unsigned int v88;
  unint64_t v89;
  char v90;
  char v91;
  unsigned int v92;
  unint64_t v93;
  char v94;
  char v95;
  unsigned int v96;
  unint64_t v97;
  char v98;
  char v99;
  unsigned int v100;
  unint64_t v101;
  char v102;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 28) |= 0x40u;
              v20 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v21 = *(_QWORD *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v71 = 0;
                v72 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_176;
                  }
                  v73 = v20++;
                  v74 = *(_BYTE *)(v21 + v73);
                  *((_QWORD *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0)
                    break;
                  v71 += 7;
                  v14 = v72++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_175;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v24 = 0;
LABEL_175:
                v2 = v73 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)a2 + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_176;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_176:
              *((_QWORD *)this + 7) = v24;
              goto LABEL_212;
            case 2u:
              *((_DWORD *)this + 28) |= 8u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v75 = 0;
                v76 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_181;
                  }
                  v77 = v27++;
                  v78 = *(_BYTE *)(v28 + v77);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0)
                    break;
                  v75 += 7;
                  v14 = v76++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_180:
                    v2 = v77 + 1;
                    goto LABEL_181;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v31 = 0;
                goto LABEL_180;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_181;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_181:
              *((_QWORD *)this + 4) = -(v31 & 1) ^ (v31 >> 1);
              goto LABEL_212;
            case 3u:
              *((_DWORD *)this + 28) |= 1u;
              v33 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v79 = 0;
                v80 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    v37 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_186;
                  }
                  v81 = v33++;
                  v82 = *(_BYTE *)(v34 + v81);
                  *((_QWORD *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0)
                    break;
                  v79 += 7;
                  v14 = v80++ > 8;
                  if (v14)
                  {
                    v37 = 0;
LABEL_185:
                    v2 = v81 + 1;
                    goto LABEL_186;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v37 = 0;
                goto LABEL_185;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)a2 + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_186;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              v37 = 0;
LABEL_186:
              *((_QWORD *)this + 1) = v37;
              goto LABEL_212;
            case 4u:
              *((_DWORD *)this + 28) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_74;
              *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_171;
            case 5u:
              *((_DWORD *)this + 28) |= 0x1000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_74;
              *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_171;
            case 6u:
              *((_DWORD *)this + 28) |= 0x4000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_74;
              *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_171;
            case 7u:
              *((_DWORD *)this + 28) |= 0x10000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_74;
              *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_171;
            case 8u:
              *((_DWORD *)this + 28) |= 0x400u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_74;
              *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_171;
            case 9u:
              *((_DWORD *)this + 28) |= 0x2000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_74;
              *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_171;
            case 0xAu:
              *((_DWORD *)this + 28) |= 0x8000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_74;
              *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_171;
            case 0xBu:
              *((_DWORD *)this + 28) |= 0x20000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_74;
              *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_171;
            case 0xCu:
              *((_DWORD *)this + 28) |= 0x800u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_74;
              *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_171;
            case 0xDu:
              *((_DWORD *)this + 28) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_171:
                v2 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_74:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_212;
            case 0xEu:
              *((_DWORD *)this + 28) |= 0x40000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v40 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v39 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v40 = v39 != 0;
              }
              *((_BYTE *)this + 108) = v40;
              goto LABEL_212;
            case 0xFu:
              *((_DWORD *)this + 28) |= 0x200u;
              v41 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v42 = *(_QWORD *)a2;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                v83 = 0;
                v84 = 0;
                v45 = 0;
                if (v2 <= v41)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_191;
                  }
                  v85 = v41++;
                  v86 = *(_BYTE *)(v42 + v85);
                  *((_QWORD *)a2 + 1) = v41;
                  v45 |= (unint64_t)(v86 & 0x7F) << v83;
                  if ((v86 & 0x80) == 0)
                    break;
                  v83 += 7;
                  v14 = v84++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_190:
                    v2 = v85 + 1;
                    goto LABEL_191;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v45) = 0;
                goto LABEL_190;
              }
              v43 = 0;
              v44 = 0;
              v45 = 0;
              do
              {
                v2 = v41 + 1;
                *((_QWORD *)a2 + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0)
                  goto LABEL_191;
                v43 += 7;
                v41 = v2;
                v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_191:
              *((_DWORD *)this + 18) = v45;
              goto LABEL_212;
            case 0x10u:
              *((_DWORD *)this + 28) |= 2u;
              v47 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v48 = *(_QWORD *)a2;
              if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
              {
                v87 = 0;
                v88 = 0;
                v51 = 0;
                if (v2 <= v47)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v47)
                  {
                    v51 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_196;
                  }
                  v89 = v47++;
                  v90 = *(_BYTE *)(v48 + v89);
                  *((_QWORD *)a2 + 1) = v47;
                  v51 |= (unint64_t)(v90 & 0x7F) << v87;
                  if ((v90 & 0x80) == 0)
                    break;
                  v87 += 7;
                  v14 = v88++ > 8;
                  if (v14)
                  {
                    v51 = 0;
LABEL_195:
                    v2 = v89 + 1;
                    goto LABEL_196;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v51 = 0;
                goto LABEL_195;
              }
              v49 = 0;
              v50 = 0;
              v51 = 0;
              do
              {
                v2 = v47 + 1;
                *((_QWORD *)a2 + 1) = v47 + 1;
                v52 = *(_BYTE *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0)
                  goto LABEL_196;
                v49 += 7;
                v47 = v2;
                v14 = v50++ > 8;
              }
              while (!v14);
              v51 = 0;
LABEL_196:
              *((_QWORD *)this + 2) = v51;
              goto LABEL_212;
            case 0x11u:
              *((_DWORD *)this + 28) |= 0x20u;
              v53 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v54 = *(_QWORD *)a2;
              if (v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v2)
              {
                v91 = 0;
                v92 = 0;
                v57 = 0;
                if (v2 <= v53)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v53)
                  {
                    v57 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_201;
                  }
                  v93 = v53++;
                  v94 = *(_BYTE *)(v54 + v93);
                  *((_QWORD *)a2 + 1) = v53;
                  v57 |= (unint64_t)(v94 & 0x7F) << v91;
                  if ((v94 & 0x80) == 0)
                    break;
                  v91 += 7;
                  v14 = v92++ > 8;
                  if (v14)
                  {
                    v57 = 0;
LABEL_200:
                    v2 = v93 + 1;
                    goto LABEL_201;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v57 = 0;
                goto LABEL_200;
              }
              v55 = 0;
              v56 = 0;
              v57 = 0;
              do
              {
                v2 = v53 + 1;
                *((_QWORD *)a2 + 1) = v53 + 1;
                v58 = *(_BYTE *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0)
                  goto LABEL_201;
                v55 += 7;
                v53 = v2;
                v14 = v56++ > 8;
              }
              while (!v14);
              v57 = 0;
LABEL_201:
              *((_QWORD *)this + 6) = v57;
              goto LABEL_212;
            case 0x12u:
              *((_DWORD *)this + 28) |= 0x10u;
              v59 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v60 = *(_QWORD *)a2;
              if (v59 > 0xFFFFFFFFFFFFFFF5 || v59 + 10 > v2)
              {
                v95 = 0;
                v96 = 0;
                v63 = 0;
                if (v2 <= v59)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v59)
                  {
                    v63 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_206;
                  }
                  v97 = v59++;
                  v98 = *(_BYTE *)(v60 + v97);
                  *((_QWORD *)a2 + 1) = v59;
                  v63 |= (unint64_t)(v98 & 0x7F) << v95;
                  if ((v98 & 0x80) == 0)
                    break;
                  v95 += 7;
                  v14 = v96++ > 8;
                  if (v14)
                  {
                    v63 = 0;
LABEL_205:
                    v2 = v97 + 1;
                    goto LABEL_206;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v63 = 0;
                goto LABEL_205;
              }
              v61 = 0;
              v62 = 0;
              v63 = 0;
              do
              {
                v2 = v59 + 1;
                *((_QWORD *)a2 + 1) = v59 + 1;
                v64 = *(_BYTE *)(v60 + v59);
                v63 |= (unint64_t)(v64 & 0x7F) << v61;
                if ((v64 & 0x80) == 0)
                  goto LABEL_206;
                v61 += 7;
                v59 = v2;
                v14 = v62++ > 8;
              }
              while (!v14);
              v63 = 0;
LABEL_206:
              *((_QWORD *)this + 5) = v63;
              goto LABEL_212;
            case 0x13u:
              *((_DWORD *)this + 28) |= 4u;
              v65 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v66 = *(_QWORD *)a2;
              if (v65 > 0xFFFFFFFFFFFFFFF5 || v65 + 10 > v2)
              {
                v99 = 0;
                v100 = 0;
                v69 = 0;
                if (v2 <= v65)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v65)
                  {
                    v69 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_211;
                  }
                  v101 = v65++;
                  v102 = *(_BYTE *)(v66 + v101);
                  *((_QWORD *)a2 + 1) = v65;
                  v69 |= (unint64_t)(v102 & 0x7F) << v99;
                  if ((v102 & 0x80) == 0)
                    break;
                  v99 += 7;
                  v14 = v100++ > 8;
                  if (v14)
                  {
                    v69 = 0;
LABEL_210:
                    v2 = v101 + 1;
                    goto LABEL_211;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v69 = 0;
                goto LABEL_210;
              }
              v67 = 0;
              v68 = 0;
              v69 = 0;
              do
              {
                v2 = v65 + 1;
                *((_QWORD *)a2 + 1) = v65 + 1;
                v70 = *(_BYTE *)(v66 + v65);
                v69 |= (unint64_t)(v70 & 0x7F) << v67;
                if ((v70 & 0x80) == 0)
                  goto LABEL_211;
                v67 += 7;
                v65 = v2;
                v14 = v68++ > 8;
              }
              while (!v14);
              v69 = 0;
LABEL_211:
              *((_QWORD *)this + 3) = v69;
LABEL_212:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_212;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaPulseDeltaV::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 112);
  if ((v4 & 0x40) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 56), 1u);
    v4 = *(_DWORD *)(v3 + 112);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_23;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeSInt(a2, *(_QWORD *)(v3 + 32), 2u);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 8), 3u);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x1000) == 0)
      goto LABEL_6;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 4u);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x1000) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000) == 0)
      goto LABEL_7;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 5u);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x4000) == 0)
  {
LABEL_7:
    if ((v4 & 0x10000) == 0)
      goto LABEL_8;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 92), 6u);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x10000) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0)
      goto LABEL_9;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 7u);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 8u);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x8000) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 9u);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x8000) == 0)
  {
LABEL_11:
    if ((v4 & 0x20000) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 0xAu);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x20000) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 0xBu);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0xCu);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x100) == 0)
  {
LABEL_14:
    if ((v4 & 0x40000) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 0xDu);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x40000) == 0)
  {
LABEL_15:
    if ((v4 & 0x200) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 108), 0xEu);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x200) == 0)
  {
LABEL_16:
    if ((v4 & 2) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 72), 0xFu);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 2) == 0)
  {
LABEL_17:
    if ((v4 & 0x20) == 0)
      goto LABEL_18;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 16), 0x10u);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x20) == 0)
  {
LABEL_18:
    if ((v4 & 0x10) == 0)
      goto LABEL_19;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 48), 0x11u);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x10) == 0)
  {
LABEL_19:
    if ((v4 & 4) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 24), 0x13u);
  }
LABEL_38:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 40), 0x12u);
  if ((*(_DWORD *)(v3 + 112) & 4) != 0)
    return PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 24), 0x13u);
  return this;
}

uint64_t CMMsl::KappaPulseDeltaV::hash_value(CMMsl::KappaPulseDeltaV *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *((_DWORD *)this + 28);
  if ((v1 & 0x40) != 0)
  {
    v2 = *((_QWORD *)this + 7);
    if ((v1 & 8) != 0)
    {
LABEL_3:
      v3 = *((_QWORD *)this + 4);
      if ((v1 & 1) != 0)
        goto LABEL_4;
      goto LABEL_43;
    }
  }
  else
  {
    v2 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((v1 & 1) != 0)
  {
LABEL_4:
    v4 = *((_QWORD *)this + 1);
    if ((v1 & 0x80) != 0)
      goto LABEL_5;
LABEL_44:
    v6 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_8;
LABEL_45:
    v8 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_11;
LABEL_46:
    v10 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_14;
LABEL_47:
    v12 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_17;
LABEL_48:
    v14 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_20;
LABEL_49:
    v16 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_23;
LABEL_50:
    v18 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_26;
LABEL_51:
    v20 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_29;
LABEL_52:
    v22 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_32;
LABEL_53:
    v24 = 0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_35;
    goto LABEL_54;
  }
LABEL_43:
  v4 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_44;
LABEL_5:
  v5 = *((float *)this + 16);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_45;
LABEL_8:
  v7 = *((float *)this + 21);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_46;
LABEL_11:
  v9 = *((float *)this + 23);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_47;
LABEL_14:
  v11 = *((float *)this + 25);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((v1 & 0x400) == 0)
    goto LABEL_48;
LABEL_17:
  v13 = *((float *)this + 19);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_49;
LABEL_20:
  v15 = *((float *)this + 22);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_50;
LABEL_23:
  v17 = *((float *)this + 24);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v1 & 0x20000) == 0)
    goto LABEL_51;
LABEL_26:
  v19 = *((float *)this + 26);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_52;
LABEL_29:
  v21 = *((float *)this + 20);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  if ((v1 & 0x100) == 0)
    goto LABEL_53;
LABEL_32:
  v23 = *((float *)this + 17);
  v24 = LODWORD(v23);
  if (v23 == 0.0)
    v24 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_35:
    v25 = *((unsigned __int8 *)this + 108);
    if ((v1 & 0x200) != 0)
      goto LABEL_36;
    goto LABEL_55;
  }
LABEL_54:
  v25 = 0;
  if ((v1 & 0x200) != 0)
  {
LABEL_36:
    v26 = *((int *)this + 18);
    if ((v1 & 2) != 0)
      goto LABEL_37;
    goto LABEL_56;
  }
LABEL_55:
  v26 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_37:
    v27 = *((_QWORD *)this + 2);
    if ((v1 & 0x20) != 0)
      goto LABEL_38;
    goto LABEL_57;
  }
LABEL_56:
  v27 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_38:
    v28 = *((_QWORD *)this + 6);
    if ((v1 & 0x10) != 0)
      goto LABEL_39;
LABEL_58:
    v29 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_40;
LABEL_59:
    v30 = 0;
    return v3 ^ v2 ^ v4 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30;
  }
LABEL_57:
  v28 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_58;
LABEL_39:
  v29 = *((_QWORD *)this + 5);
  if ((v1 & 4) == 0)
    goto LABEL_59;
LABEL_40:
  v30 = *((_QWORD *)this + 3);
  return v3 ^ v2 ^ v4 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30;
}

void CMMsl::KappaPulseInertialAccel::~KappaPulseInertialAccel(CMMsl::KappaPulseInertialAccel *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::KappaPulseInertialAccel::KappaPulseInertialAccel(CMMsl::KappaPulseInertialAccel *this, const CMMsl::KappaPulseInertialAccel *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  double result;
  uint64_t v6;

  *(_QWORD *)this = off_1003521D0;
  *((_DWORD *)this + 20) = 0;
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x100) != 0)
  {
    v4 = *((_QWORD *)a2 + 9);
    v3 = 256;
    *((_WORD *)this + 40) = 256;
    *((_QWORD *)this + 9) = v4;
    v2 = *((_WORD *)a2 + 40);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_WORD *)this + 40) = v3;
    *((double *)this + 2) = result;
    v2 = *((_WORD *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    result = *((double *)a2 + 3);
    v3 |= 4u;
    *((_WORD *)this + 40) = v3;
    *((double *)this + 3) = result;
    v2 = *((_WORD *)a2 + 40);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_WORD *)this + 40) = v3;
  *((double *)this + 4) = result;
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_17;
  }
LABEL_16:
  v6 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *((_WORD *)this + 40) = v3;
  *((_QWORD *)this + 1) = v6;
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_18;
  }
LABEL_17:
  result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((_WORD *)this + 40) = v3;
  *((double *)this + 6) = result;
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_19;
  }
LABEL_18:
  result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_WORD *)this + 40) = v3;
  *((double *)this + 7) = result;
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 0x10) == 0)
      return result;
LABEL_20:
    result = *((double *)a2 + 5);
    *((_WORD *)this + 40) = v3 | 0x10;
    *((double *)this + 5) = result;
    return result;
  }
LABEL_19:
  result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_WORD *)this + 40) = v3;
  *((double *)this + 8) = result;
  if ((*((_WORD *)a2 + 40) & 0x10) != 0)
    goto LABEL_20;
  return result;
}

uint64_t CMMsl::KappaPulseInertialAccel::operator=(uint64_t a1, const CMMsl::KappaPulseInertialAccel *a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[8];
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  if ((const CMMsl::KappaPulseInertialAccel *)a1 != a2)
  {
    CMMsl::KappaPulseInertialAccel::KappaPulseInertialAccel((CMMsl::KappaPulseInertialAccel *)v12, a2);
    v3 = v16;
    v4 = *(_OWORD *)(a1 + 32);
    v16 = *(_OWORD *)(a1 + 48);
    v5 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v17;
    v17 = v5;
    v6 = v15;
    v7 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v14;
    *(_OWORD *)(a1 + 32) = v6;
    *(_OWORD *)(a1 + 48) = v3;
    v8 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a1 + 80) = v19;
    v19 = v8;
    v9 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v18;
    v18 = v9;
    v10 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v13;
    v13 = v10;
    v14 = v7;
    v15 = v4;
    PB::Base::~Base((PB::Base *)v12);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::KappaPulseInertialAccel *a2, CMMsl::KappaPulseInertialAccel *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  v3 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v3;
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v7;
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  v9 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v9;
  v10 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v10;
  v11 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v11;
  result = *((double *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((double *)a2 + 5) = result;
  return result;
}

double CMMsl::KappaPulseInertialAccel::KappaPulseInertialAccel(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_1003521D0;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  result = *(double *)(a2 + 40);
  *(double *)(a1 + 40) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_1003521D0;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  result = *(double *)(a2 + 40);
  *(double *)(a1 + 40) = result;
  return result;
}

uint64_t CMMsl::KappaPulseInertialAccel::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD v14[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 80);
    *(_DWORD *)(a2 + 80) = 0;
    v4 = *(_QWORD *)(a2 + 72);
    v5 = *(_QWORD *)(a2 + 8);
    v6 = *(_QWORD *)(a2 + 64);
    v20 = *(_DWORD *)(a1 + 80);
    v7 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v4;
    v19 = v7;
    v8 = *(_OWORD *)(a2 + 16);
    v9 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v5;
    v14[0] = off_1003521D0;
    v14[1] = v9;
    v10 = *(_OWORD *)(a1 + 32);
    v17 = *(_OWORD *)(a1 + 48);
    v18 = *(_QWORD *)(a1 + 64);
    v11 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v11;
    v12 = *(_OWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 80) = v3;
    *(_QWORD *)(a1 + 64) = v6;
    *(_OWORD *)(a1 + 16) = v8;
    v15 = v12;
    v16 = v10;
    PB::Base::~Base((PB::Base *)v14);
  }
  return a1;
}

uint64_t CMMsl::KappaPulseInertialAccel::formatText(CMMsl::KappaPulseInertialAccel *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "epochCounter", *((_QWORD *)this + 1));
    v5 = *((_WORD *)this + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "inertialAccelX", *((double *)this + 2));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "inertialAccelY", *((double *)this + 3));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "inertialAccelZ", *((double *)this + 4));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "quaternionW", *((double *)this + 5));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "quaternionX", *((double *)this + 6));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
LABEL_19:
    PB::TextFormatter::format(a2, "quaternionZ", *((double *)this + 8));
    if ((*((_WORD *)this + 40) & 0x100) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_10;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "quaternionY", *((double *)this + 7));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 0x80) != 0)
    goto LABEL_19;
LABEL_9:
  if ((v5 & 0x100) != 0)
LABEL_10:
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 9));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaPulseInertialAccel::readFrom(CMMsl::KappaPulseInertialAccel *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 40) |= 0x100u;
              v20 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v21 = *(_QWORD *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v33 = 0;
                v34 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_79;
                  }
                  v35 = v20++;
                  v36 = *(_BYTE *)(v21 + v35);
                  *((_QWORD *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0)
                    break;
                  v33 += 7;
                  v14 = v34++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_78;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v24 = 0;
LABEL_78:
                v2 = v35 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)a2 + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_79;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_79:
              *((_QWORD *)this + 9) = v24;
              goto LABEL_85;
            case 2u:
              *((_WORD *)this + 40) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_58;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_74;
            case 3u:
              *((_WORD *)this + 40) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_58;
              *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_74;
            case 4u:
              *((_WORD *)this + 40) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_58;
              *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_74;
            case 5u:
              *((_WORD *)this + 40) |= 1u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_84;
                  }
                  v39 = v27++;
                  v40 = *(_BYTE *)(v28 + v39);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_83:
                    v2 = v39 + 1;
                    goto LABEL_84;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v31 = 0;
                goto LABEL_83;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_84;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_84:
              *((_QWORD *)this + 1) = v31;
LABEL_85:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 6u:
              *((_WORD *)this + 40) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_58;
              *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_74;
            case 7u:
              *((_WORD *)this + 40) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_58;
              *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_74;
            case 8u:
              *((_WORD *)this + 40) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_58;
              *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_74;
            case 9u:
              *((_WORD *)this + 40) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_74:
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_58:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_85;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_85;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaPulseInertialAccel::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 80);
  if ((v4 & 0x100) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 72), 1u);
    v4 = *(_WORD *)(v3 + 80);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 3u);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 4u);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 8), 5u);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 6u);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 7u);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 40), 9u);
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 8u);
  if ((*(_WORD *)(v3 + 80) & 0x10) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 40), 9u);
  return this;
}

uint64_t CMMsl::KappaPulseInertialAccel::hash_value(CMMsl::KappaPulseInertialAccel *this)
{
  __int16 v1;
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;

  v1 = *((_WORD *)this + 40);
  if ((v1 & 0x100) == 0)
  {
    v2 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_3;
LABEL_26:
    v3 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_6;
LABEL_27:
    v4 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_9;
LABEL_28:
    v5 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_12;
    goto LABEL_29;
  }
  v2 = *((_QWORD *)this + 9);
  if ((v1 & 2) == 0)
    goto LABEL_26;
LABEL_3:
  v3 = *((double *)this + 2);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_27;
LABEL_6:
  v4 = *((double *)this + 3);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_28;
LABEL_9:
  v5 = *((double *)this + 4);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 1) != 0)
  {
LABEL_12:
    v6 = *((_QWORD *)this + 1);
    if ((v1 & 0x20) != 0)
      goto LABEL_13;
LABEL_30:
    v7 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_16;
LABEL_31:
    v8 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_19;
    goto LABEL_32;
  }
LABEL_29:
  v6 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_30;
LABEL_13:
  v7 = *((double *)this + 6);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v1 & 0x40) == 0)
    goto LABEL_31;
LABEL_16:
  v8 = *((double *)this + 7);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((v1 & 0x80) != 0)
  {
LABEL_19:
    v9 = *((double *)this + 8);
    if (v9 == 0.0)
      v9 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_22;
LABEL_33:
    v10 = 0.0;
    return *(_QWORD *)&v3 ^ v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10;
  }
LABEL_32:
  v9 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_33;
LABEL_22:
  v10 = *((double *)this + 5);
  if (v10 == 0.0)
    v10 = 0.0;
  return *(_QWORD *)&v3 ^ v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10;
}

void CMMsl::KappaPulseInertialHgAccel::~KappaPulseInertialHgAccel(CMMsl::KappaPulseInertialHgAccel *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::KappaPulseInertialHgAccel::KappaPulseInertialHgAccel(CMMsl::KappaPulseInertialHgAccel *this, const CMMsl::KappaPulseInertialHgAccel *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  double result;
  uint64_t v6;

  *(_QWORD *)this = off_100352208;
  *((_DWORD *)this + 26) = 0;
  v2 = *((_WORD *)a2 + 52);
  if ((v2 & 0x800) != 0)
  {
    v4 = *((_QWORD *)a2 + 12);
    v3 = 2048;
    *((_WORD *)this + 52) = 2048;
    *((_QWORD *)this + 12) = v4;
    v2 = *((_WORD *)a2 + 52);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 5);
    v3 |= 0x10u;
    *((_WORD *)this + 52) = v3;
    *((double *)this + 5) = result;
    v2 = *((_WORD *)a2 + 52);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    result = *((double *)a2 + 6);
    v3 |= 0x20u;
    *((_WORD *)this + 52) = v3;
    *((double *)this + 6) = result;
    v2 = *((_WORD *)a2 + 52);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_19;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_WORD *)this + 52) = v3;
  *((double *)this + 7) = result;
  v2 = *((_WORD *)a2 + 52);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  v6 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *((_WORD *)this + 52) = v3;
  *((_QWORD *)this + 4) = v6;
  v2 = *((_WORD *)a2 + 52);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_WORD *)this + 52) = v3;
  *((double *)this + 9) = result;
  v2 = *((_WORD *)a2 + 52);
  if ((v2 & 0x200) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_22;
  }
LABEL_21:
  result = *((double *)a2 + 10);
  v3 |= 0x200u;
  *((_WORD *)this + 52) = v3;
  *((double *)this + 10) = result;
  v2 = *((_WORD *)a2 + 52);
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_23;
  }
LABEL_22:
  result = *((double *)a2 + 11);
  v3 |= 0x400u;
  *((_WORD *)this + 52) = v3;
  *((double *)this + 11) = result;
  v2 = *((_WORD *)a2 + 52);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 1) == 0)
      goto LABEL_14;
    goto LABEL_24;
  }
LABEL_23:
  result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_WORD *)this + 52) = v3;
  *((double *)this + 8) = result;
  v2 = *((_WORD *)a2 + 52);
  if ((v2 & 1) == 0)
  {
LABEL_14:
    if ((v2 & 2) == 0)
      goto LABEL_15;
    goto LABEL_25;
  }
LABEL_24:
  result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_WORD *)this + 52) = v3;
  *((double *)this + 1) = result;
  v2 = *((_WORD *)a2 + 52);
  if ((v2 & 2) == 0)
  {
LABEL_15:
    if ((v2 & 4) == 0)
      return result;
LABEL_26:
    result = *((double *)a2 + 3);
    *((_WORD *)this + 52) = v3 | 4;
    *((double *)this + 3) = result;
    return result;
  }
LABEL_25:
  result = *((double *)a2 + 2);
  v3 |= 2u;
  *((_WORD *)this + 52) = v3;
  *((double *)this + 2) = result;
  if ((*((_WORD *)a2 + 52) & 4) != 0)
    goto LABEL_26;
  return result;
}

CMMsl *CMMsl::KappaPulseInertialHgAccel::operator=(CMMsl *a1, const CMMsl::KappaPulseInertialHgAccel *a2)
{
  CMMsl::KappaPulseInertialHgAccel *v3;
  _BYTE v5[112];

  if (a1 != a2)
  {
    CMMsl::KappaPulseInertialHgAccel::KappaPulseInertialHgAccel((CMMsl::KappaPulseInertialHgAccel *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaPulseInertialHgAccel *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::KappaPulseInertialHgAccel *a2, CMMsl::KappaPulseInertialHgAccel *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double result;

  v3 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v3;
  v4 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v4;
  v5 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v5;
  v6 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v6;
  v7 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v7;
  v8 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v8;
  v9 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v9;
  v10 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v10;
  v11 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v11;
  v12 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v12;
  v13 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v13;
  v14 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v14;
  result = *((double *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((double *)a2 + 3) = result;
  return result;
}

double CMMsl::KappaPulseInertialHgAccel::KappaPulseInertialHgAccel(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100352208;
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

CMMsl *CMMsl::KappaPulseInertialHgAccel::operator=(CMMsl *this, uint64_t a2, CMMsl::KappaPulseInertialHgAccel *a3)
{
  void (**v5)(CMMsl::KappaPulseInertialHgAccel *__hidden);
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  if (this != (CMMsl *)a2)
  {
    v5 = off_100352208;
    v14 = *(_DWORD *)(a2 + 104);
    *(_DWORD *)(a2 + 104) = 0;
    v13 = *(_QWORD *)(a2 + 96);
    v9 = *(_OWORD *)(a2 + 40);
    v8 = *(_QWORD *)(a2 + 32);
    v11 = *(_OWORD *)(a2 + 72);
    v12 = *(_QWORD *)(a2 + 88);
    v10 = *(_OWORD *)(a2 + 56);
    v6 = *(_OWORD *)(a2 + 8);
    v7 = *(_QWORD *)(a2 + 24);
    CMMsl::swap(this, (CMMsl::KappaPulseInertialHgAccel *)&v5, a3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return this;
}

uint64_t CMMsl::KappaPulseInertialHgAccel::formatText(CMMsl::KappaPulseInertialHgAccel *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 52);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "bodyAccelX", *((double *)this + 1));
    v5 = *((_WORD *)this + 52);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "bodyAccelY", *((double *)this + 2));
  v5 = *((_WORD *)this + 52);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "bodyAccelZ", *((double *)this + 3));
  v5 = *((_WORD *)this + 52);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "epochCounter", *((_QWORD *)this + 4));
  v5 = *((_WORD *)this + 52);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "inertialAccelX", *((double *)this + 5));
  v5 = *((_WORD *)this + 52);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "inertialAccelY", *((double *)this + 6));
  v5 = *((_WORD *)this + 52);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "inertialAccelZ", *((double *)this + 7));
  v5 = *((_WORD *)this + 52);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "quaternionW", *((double *)this + 8));
  v5 = *((_WORD *)this + 52);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "quaternionX", *((double *)this + 9));
  v5 = *((_WORD *)this + 52);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
LABEL_25:
    PB::TextFormatter::format(a2, "quaternionZ", *((double *)this + 11));
    if ((*((_WORD *)this + 52) & 0x800) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_13;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "quaternionY", *((double *)this + 10));
  v5 = *((_WORD *)this + 52);
  if ((v5 & 0x400) != 0)
    goto LABEL_25;
LABEL_12:
  if ((v5 & 0x800) != 0)
LABEL_13:
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 12));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaPulseInertialHgAccel::readFrom(CMMsl::KappaPulseInertialHgAccel *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 52) |= 0x800u;
              v20 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v21 = *(_QWORD *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v33 = 0;
                v34 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_88;
                  }
                  v35 = v20++;
                  v36 = *(_BYTE *)(v21 + v35);
                  *((_QWORD *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0)
                    break;
                  v33 += 7;
                  v14 = v34++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_87;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v24 = 0;
LABEL_87:
                v2 = v35 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)a2 + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_88;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_88:
              *((_QWORD *)this + 12) = v24;
              goto LABEL_94;
            case 2u:
              *((_WORD *)this + 52) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_67;
              *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_83;
            case 3u:
              *((_WORD *)this + 52) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_67;
              *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_83;
            case 4u:
              *((_WORD *)this + 52) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_67;
              *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_83;
            case 5u:
              *((_WORD *)this + 52) |= 8u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_93;
                  }
                  v39 = v27++;
                  v40 = *(_BYTE *)(v28 + v39);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_92:
                    v2 = v39 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v31 = 0;
                goto LABEL_92;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_93;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_93:
              *((_QWORD *)this + 4) = v31;
LABEL_94:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 6u:
              *((_WORD *)this + 52) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_67;
              *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_83;
            case 7u:
              *((_WORD *)this + 52) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_67;
              *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_83;
            case 8u:
              *((_WORD *)this + 52) |= 0x400u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_67;
              *((_QWORD *)this + 11) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_83;
            case 9u:
              *((_WORD *)this + 52) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_67;
              *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_83;
            case 0xAu:
              *((_WORD *)this + 52) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_67;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_83;
            case 0xBu:
              *((_WORD *)this + 52) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_67;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_83;
            case 0xCu:
              *((_WORD *)this + 52) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_83:
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_67:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_94;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_94;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaPulseInertialHgAccel::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 104);
  if ((v4 & 0x800) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 96), 1u);
    v4 = *(_WORD *)(v3 + 104);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 2u);
  v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 3u);
  v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 4u);
  v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 32), 5u);
  v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x200) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 6u);
  v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 0x200) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 80), 7u);
  v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 88), 8u);
  v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 1) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 9u);
  v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 1) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 0xAu);
  v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 2) == 0)
  {
LABEL_12:
    if ((v4 & 4) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 24), 0xCu);
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 0xBu);
  if ((*(_WORD *)(v3 + 104) & 4) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 24), 0xCu);
  return this;
}

uint64_t CMMsl::KappaPulseInertialHgAccel::hash_value(CMMsl::KappaPulseInertialHgAccel *this)
{
  __int16 v1;
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;

  v1 = *((_WORD *)this + 52);
  if ((v1 & 0x800) == 0)
  {
    v2 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_3;
LABEL_35:
    v3 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_6;
LABEL_36:
    v4 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_9;
LABEL_37:
    v5 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_12;
    goto LABEL_38;
  }
  v2 = *((_QWORD *)this + 12);
  if ((v1 & 0x10) == 0)
    goto LABEL_35;
LABEL_3:
  v3 = *((double *)this + 5);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_36;
LABEL_6:
  v4 = *((double *)this + 6);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 0x40) == 0)
    goto LABEL_37;
LABEL_9:
  v5 = *((double *)this + 7);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 8) != 0)
  {
LABEL_12:
    v6 = *((_QWORD *)this + 4);
    if ((*((_WORD *)this + 52) & 0x100) != 0)
      goto LABEL_13;
LABEL_39:
    v7 = 0.0;
    if ((*((_WORD *)this + 52) & 0x200) != 0)
      goto LABEL_16;
LABEL_40:
    v8 = 0.0;
    if ((*((_WORD *)this + 52) & 0x400) != 0)
      goto LABEL_19;
LABEL_41:
    v9 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_22;
LABEL_42:
    v10 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_25;
LABEL_43:
    v11 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_28;
    goto LABEL_44;
  }
LABEL_38:
  v6 = 0;
  if ((*((_WORD *)this + 52) & 0x100) == 0)
    goto LABEL_39;
LABEL_13:
  v7 = *((double *)this + 9);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((*((_WORD *)this + 52) & 0x200) == 0)
    goto LABEL_40;
LABEL_16:
  v8 = *((double *)this + 10);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((*((_WORD *)this + 52) & 0x400) == 0)
    goto LABEL_41;
LABEL_19:
  v9 = *((double *)this + 11);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((v1 & 0x80) == 0)
    goto LABEL_42;
LABEL_22:
  v10 = *((double *)this + 8);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_43;
LABEL_25:
  v11 = *((double *)this + 1);
  if (v11 == 0.0)
    v11 = 0.0;
  if ((v1 & 2) != 0)
  {
LABEL_28:
    v12 = *((double *)this + 2);
    if (v12 == 0.0)
      v12 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_31;
LABEL_45:
    v13 = 0.0;
    return *(_QWORD *)&v3 ^ v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13;
  }
LABEL_44:
  v12 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_45;
LABEL_31:
  v13 = *((double *)this + 3);
  if (v13 == 0.0)
    v13 = 0.0;
  return *(_QWORD *)&v3 ^ v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ *(_QWORD *)&v11 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13;
}

void CMMsl::KappaPulseResult::~KappaPulseResult(CMMsl::KappaPulseResult *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::KappaPulseResult::KappaPulseResult(CMMsl::KappaPulseResult *this, const CMMsl::KappaPulseResult *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  float result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)this = off_100352240;
  v2 = (uint64_t *)((char *)this + 316);
  *((_DWORD *)this + 81) = 0;
  *(_QWORD *)((char *)this + 316) = 0;
  v3 = (uint64_t *)((char *)a2 + 316);
  v4 = *((_BYTE *)a2 + 324);
  if ((v4 & 8) != 0)
  {
    v5 = 0;
    v8 = *((_BYTE *)a2 + 312);
    *v2 = 0;
    v6 = 8;
    *((_BYTE *)this + 324) = 8;
    *((_BYTE *)this + 312) = v8;
    v7 = *v3;
    v4 = *((_BYTE *)a2 + 324);
    if ((v4 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 0;
  v6 = 0;
  v7 = *v3;
  if ((*((_BYTE *)a2 + 324) & 2) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 76);
    v6 |= 2u;
    *v2 = 0;
    *((_BYTE *)this + 324) = v6;
    *((float *)this + 76) = result;
    v7 = *v3;
    v4 = *((_BYTE *)a2 + 324);
  }
LABEL_6:
  if ((v4 & 4) != 0)
  {
    result = *((float *)a2 + 77);
    v6 |= 4u;
    *v2 = 0;
    *((_BYTE *)this + 324) = v6;
    *((float *)this + 77) = result;
    v7 = *v3;
    v4 = *((_BYTE *)a2 + 324);
    if ((*v3 & 0x20) == 0)
    {
LABEL_8:
      if ((v7 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_75;
    }
  }
  else if ((v7 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  v10 = *((_QWORD *)a2 + 6);
  v5 = 32;
  *v2 = 32;
  *((_BYTE *)this + 324) = v6;
  *((_QWORD *)this + 6) = v10;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x40) == 0)
  {
LABEL_9:
    if ((v7 & 1) == 0)
      goto LABEL_10;
    goto LABEL_76;
  }
LABEL_75:
  v11 = *((_QWORD *)a2 + 7);
  v5 |= 0x40uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((_QWORD *)this + 7) = v11;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 1) == 0)
  {
LABEL_10:
    if ((v7 & 0x8000) == 0)
      goto LABEL_11;
    goto LABEL_77;
  }
LABEL_76:
  v12 = *((_QWORD *)a2 + 1);
  v5 |= 1uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((_QWORD *)this + 1) = v12;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x8000) == 0)
  {
LABEL_11:
    if ((v7 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_78;
  }
LABEL_77:
  result = *((float *)a2 + 26);
  v5 |= 0x8000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 26) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x80) == 0)
  {
LABEL_12:
    if ((v7 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_79;
  }
LABEL_78:
  v13 = *((_QWORD *)a2 + 8);
  v5 |= 0x80uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((_QWORD *)this + 8) = v13;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x100) == 0)
  {
LABEL_13:
    if ((v7 & 0x20000) == 0)
      goto LABEL_14;
    goto LABEL_80;
  }
LABEL_79:
  v14 = *((_QWORD *)a2 + 9);
  v5 |= 0x100uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((_QWORD *)this + 9) = v14;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x20000) == 0)
  {
LABEL_14:
    if ((v7 & 0x10000) == 0)
      goto LABEL_15;
    goto LABEL_81;
  }
LABEL_80:
  result = *((float *)a2 + 28);
  v5 |= 0x20000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 28) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x10000) == 0)
  {
LABEL_15:
    if ((v7 & 0x2000000) == 0)
      goto LABEL_16;
    goto LABEL_82;
  }
LABEL_81:
  result = *((float *)a2 + 27);
  v5 |= 0x10000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 27) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x2000000) == 0)
  {
LABEL_16:
    if ((v7 & 0x200) == 0)
      goto LABEL_17;
    goto LABEL_83;
  }
LABEL_82:
  result = *((float *)a2 + 36);
  v5 |= 0x2000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 36) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x200) == 0)
  {
LABEL_17:
    if ((v7 & 0x400) == 0)
      goto LABEL_18;
    goto LABEL_84;
  }
LABEL_83:
  result = *((float *)a2 + 20);
  v5 |= 0x200uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 20) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x400) == 0)
  {
LABEL_18:
    if ((v7 & 0x800000) == 0)
      goto LABEL_19;
    goto LABEL_85;
  }
LABEL_84:
  result = *((float *)a2 + 21);
  v5 |= 0x400uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 21) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x800000) == 0)
  {
LABEL_19:
    if ((v7 & 0x4000) == 0)
      goto LABEL_20;
    goto LABEL_86;
  }
LABEL_85:
  result = *((float *)a2 + 34);
  v5 |= 0x800000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 34) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x4000) == 0)
  {
LABEL_20:
    if ((v7 & 0x400000) == 0)
      goto LABEL_21;
    goto LABEL_87;
  }
LABEL_86:
  result = *((float *)a2 + 25);
  v5 |= 0x4000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 25) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x400000) == 0)
  {
LABEL_21:
    if ((v7 & 0x2000) == 0)
      goto LABEL_22;
    goto LABEL_88;
  }
LABEL_87:
  result = *((float *)a2 + 33);
  v5 |= 0x400000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 33) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x2000) == 0)
  {
LABEL_22:
    if ((v7 & 0x8000000) == 0)
      goto LABEL_23;
    goto LABEL_89;
  }
LABEL_88:
  result = *((float *)a2 + 24);
  v5 |= 0x2000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 24) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x8000000) == 0)
  {
LABEL_23:
    if ((v7 & 0x100000) == 0)
      goto LABEL_24;
    goto LABEL_90;
  }
LABEL_89:
  result = *((float *)a2 + 38);
  v5 |= 0x8000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 38) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x100000) == 0)
  {
LABEL_24:
    if ((v7 & 0x1000) == 0)
      goto LABEL_25;
    goto LABEL_91;
  }
LABEL_90:
  result = *((float *)a2 + 31);
  v5 |= 0x100000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 31) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x1000) == 0)
  {
LABEL_25:
    if ((v7 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_92;
  }
LABEL_91:
  result = *((float *)a2 + 23);
  v5 |= 0x1000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 23) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x80000) == 0)
  {
LABEL_26:
    if ((v7 & 0x800) == 0)
      goto LABEL_27;
    goto LABEL_93;
  }
LABEL_92:
  result = *((float *)a2 + 30);
  v5 |= 0x80000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 30) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x800) == 0)
  {
LABEL_27:
    if ((v7 & 0x4000000) == 0)
      goto LABEL_28;
    goto LABEL_94;
  }
LABEL_93:
  result = *((float *)a2 + 22);
  v5 |= 0x800uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 22) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v7 & 0x40000000000000) == 0)
      goto LABEL_29;
    goto LABEL_95;
  }
LABEL_94:
  result = *((float *)a2 + 37);
  v5 |= 0x4000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 37) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x40000000000000) == 0)
  {
LABEL_29:
    if ((v7 & 0x20000000000000) == 0)
      goto LABEL_30;
    goto LABEL_96;
  }
LABEL_95:
  result = *((float *)a2 + 65);
  v5 |= 0x40000000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 65) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x20000000000000) == 0)
  {
LABEL_30:
    if ((v7 & 0x4000000000000000) == 0)
      goto LABEL_31;
    goto LABEL_97;
  }
LABEL_96:
  result = *((float *)a2 + 64);
  v5 |= 0x20000000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 64) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x4000000000000000) == 0)
  {
LABEL_31:
    if ((v7 & 0x800000000000) == 0)
      goto LABEL_32;
    goto LABEL_98;
  }
LABEL_97:
  result = *((float *)a2 + 73);
  v5 |= 0x4000000000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 73) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x800000000000) == 0)
  {
LABEL_32:
    if ((v7 & 0x1000000000000) == 0)
      goto LABEL_33;
    goto LABEL_99;
  }
LABEL_98:
  result = *((float *)a2 + 58);
  v5 |= 0x800000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 58) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x1000000000000) == 0)
  {
LABEL_33:
    if ((v7 & 0x1000000000000000) == 0)
      goto LABEL_34;
    goto LABEL_100;
  }
LABEL_99:
  result = *((float *)a2 + 59);
  v5 |= 0x1000000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 59) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x1000000000000000) == 0)
  {
LABEL_34:
    if ((v7 & 0x10000000000000) == 0)
      goto LABEL_35;
    goto LABEL_101;
  }
LABEL_100:
  result = *((float *)a2 + 71);
  v5 |= 0x1000000000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 71) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x10000000000000) == 0)
  {
LABEL_35:
    if ((v7 & 0x800000000000000) == 0)
      goto LABEL_36;
    goto LABEL_102;
  }
LABEL_101:
  result = *((float *)a2 + 63);
  v5 |= 0x10000000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 63) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x800000000000000) == 0)
  {
LABEL_36:
    if ((v7 & 0x8000000000000) == 0)
      goto LABEL_37;
    goto LABEL_103;
  }
LABEL_102:
  result = *((float *)a2 + 70);
  v5 |= 0x800000000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 70) = result;
  v7 = *v3;
  v4 = *((_BYTE *)a2 + 324);
  if ((*v3 & 0x8000000000000) == 0)
  {
LABEL_37:
    if ((v4 & 1) == 0)
      goto LABEL_38;
    goto LABEL_104;
  }
LABEL_103:
  result = *((float *)a2 + 62);
  v5 |= 0x8000000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 62) = result;
  v7 = *v3;
  if ((*((_BYTE *)a2 + 324) & 1) == 0)
  {
LABEL_38:
    if ((v7 & 0x200000000000000) == 0)
      goto LABEL_39;
    goto LABEL_105;
  }
LABEL_104:
  result = *((float *)a2 + 75);
  v6 |= 1u;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 75) = result;
  v7 = *v3;
  if ((*v3 & 0x200000000000000) == 0)
  {
LABEL_39:
    if ((v7 & 0x4000000000000) == 0)
      goto LABEL_40;
    goto LABEL_106;
  }
LABEL_105:
  result = *((float *)a2 + 68);
  v5 |= 0x200000000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 68) = result;
  v7 = *v3;
  if ((*v3 & 0x4000000000000) == 0)
  {
LABEL_40:
    if ((v7 & 0x100000000000000) == 0)
      goto LABEL_41;
    goto LABEL_107;
  }
LABEL_106:
  result = *((float *)a2 + 61);
  v5 |= 0x4000000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 61) = result;
  v7 = *v3;
  if ((*v3 & 0x100000000000000) == 0)
  {
LABEL_41:
    if ((v7 & 0x2000000000000) == 0)
      goto LABEL_42;
    goto LABEL_108;
  }
LABEL_107:
  result = *((float *)a2 + 67);
  v5 |= 0x100000000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 67) = result;
  v7 = *v3;
  if ((*v3 & 0x2000000000000) == 0)
  {
LABEL_42:
    if ((v7 & 0x8000000000000000) == 0)
      goto LABEL_43;
    goto LABEL_109;
  }
LABEL_108:
  result = *((float *)a2 + 60);
  v5 |= 0x2000000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 60) = result;
  v7 = *v3;
  if ((*v3 & 0x8000000000000000) == 0)
  {
LABEL_43:
    if ((v7 & 0x800000000) == 0)
      goto LABEL_44;
    goto LABEL_110;
  }
LABEL_109:
  result = *((float *)a2 + 74);
  v5 |= 0x8000000000000000;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 74) = result;
  v7 = *v3;
  if ((*v3 & 0x800000000) == 0)
  {
LABEL_44:
    if ((v7 & 0x400000000) == 0)
      goto LABEL_45;
    goto LABEL_111;
  }
LABEL_110:
  result = *((float *)a2 + 46);
  v5 |= 0x800000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 46) = result;
  v7 = *v3;
  if ((*v3 & 0x400000000) == 0)
  {
LABEL_45:
    if ((v7 & 0x80000000000) == 0)
      goto LABEL_46;
    goto LABEL_112;
  }
LABEL_111:
  result = *((float *)a2 + 45);
  v5 |= 0x400000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 45) = result;
  v7 = *v3;
  if ((*v3 & 0x80000000000) == 0)
  {
LABEL_46:
    if ((v7 & 0x10000000) == 0)
      goto LABEL_47;
    goto LABEL_113;
  }
LABEL_112:
  result = *((float *)a2 + 54);
  v5 |= 0x80000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 54) = result;
  v7 = *v3;
  if ((*v3 & 0x10000000) == 0)
  {
LABEL_47:
    if ((v7 & 0x20000000) == 0)
      goto LABEL_48;
    goto LABEL_114;
  }
LABEL_113:
  result = *((float *)a2 + 39);
  v5 |= 0x10000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 39) = result;
  v7 = *v3;
  if ((*v3 & 0x20000000) == 0)
  {
LABEL_48:
    if ((v7 & 0x20000000000) == 0)
      goto LABEL_49;
    goto LABEL_115;
  }
LABEL_114:
  result = *((float *)a2 + 40);
  v5 |= 0x20000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 40) = result;
  v7 = *v3;
  if ((*v3 & 0x20000000000) == 0)
  {
LABEL_49:
    if ((v7 & 0x200000000) == 0)
      goto LABEL_50;
    goto LABEL_116;
  }
LABEL_115:
  result = *((float *)a2 + 52);
  v5 |= 0x20000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 52) = result;
  v7 = *v3;
  if ((*v3 & 0x200000000) == 0)
  {
LABEL_50:
    if ((v7 & 0x10000000000) == 0)
      goto LABEL_51;
    goto LABEL_117;
  }
LABEL_116:
  result = *((float *)a2 + 44);
  v5 |= 0x200000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 44) = result;
  v7 = *v3;
  if ((*v3 & 0x10000000000) == 0)
  {
LABEL_51:
    if ((v7 & 0x100000000) == 0)
      goto LABEL_52;
    goto LABEL_118;
  }
LABEL_117:
  result = *((float *)a2 + 51);
  v5 |= 0x10000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 51) = result;
  v7 = *v3;
  if ((*v3 & 0x100000000) == 0)
  {
LABEL_52:
    if ((v7 & 0x200000000000) == 0)
      goto LABEL_53;
    goto LABEL_119;
  }
LABEL_118:
  result = *((float *)a2 + 43);
  v5 |= (unint64_t)&_mh_execute_header;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 43) = result;
  v7 = *v3;
  if ((*v3 & 0x200000000000) == 0)
  {
LABEL_53:
    if ((v7 & 0x4000000000) == 0)
      goto LABEL_54;
    goto LABEL_120;
  }
LABEL_119:
  result = *((float *)a2 + 56);
  v5 |= 0x200000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 56) = result;
  v7 = *v3;
  if ((*v3 & 0x4000000000) == 0)
  {
LABEL_54:
    if ((v7 & 0x80000000) == 0)
      goto LABEL_55;
    goto LABEL_121;
  }
LABEL_120:
  result = *((float *)a2 + 49);
  v5 |= 0x4000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 49) = result;
  v7 = *v3;
  if ((*v3 & 0x80000000) == 0)
  {
LABEL_55:
    if ((v7 & 0x2000000000) == 0)
      goto LABEL_56;
    goto LABEL_122;
  }
LABEL_121:
  result = *((float *)a2 + 42);
  v5 |= 0x80000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 42) = result;
  v7 = *v3;
  if ((*v3 & 0x2000000000) == 0)
  {
LABEL_56:
    if ((v7 & 0x40000000) == 0)
      goto LABEL_57;
    goto LABEL_123;
  }
LABEL_122:
  result = *((float *)a2 + 48);
  v5 |= 0x2000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 48) = result;
  v7 = *v3;
  if ((*v3 & 0x40000000) == 0)
  {
LABEL_57:
    if ((v7 & 0x100000000000) == 0)
      goto LABEL_58;
    goto LABEL_124;
  }
LABEL_123:
  result = *((float *)a2 + 41);
  v5 |= 0x40000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 41) = result;
  v7 = *v3;
  if ((*v3 & 0x100000000000) == 0)
  {
LABEL_58:
    if ((v7 & 8) == 0)
      goto LABEL_59;
    goto LABEL_125;
  }
LABEL_124:
  result = *((float *)a2 + 55);
  v5 |= 0x100000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 55) = result;
  v7 = *v3;
  if ((*v3 & 8) == 0)
  {
LABEL_59:
    if ((v7 & 0x10) == 0)
      goto LABEL_60;
    goto LABEL_126;
  }
LABEL_125:
  v15 = *((_QWORD *)a2 + 4);
  v5 |= 8uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((_QWORD *)this + 4) = v15;
  v7 = *v3;
  if ((*v3 & 0x10) == 0)
  {
LABEL_60:
    if ((v7 & 0x1000000) == 0)
      goto LABEL_61;
    goto LABEL_127;
  }
LABEL_126:
  v16 = *((_QWORD *)a2 + 5);
  v5 |= 0x10uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((_QWORD *)this + 5) = v16;
  v7 = *v3;
  if ((*v3 & 0x1000000) == 0)
  {
LABEL_61:
    if ((v7 & 0x2000000000000000) == 0)
      goto LABEL_62;
    goto LABEL_128;
  }
LABEL_127:
  result = *((float *)a2 + 35);
  v5 |= 0x1000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 35) = result;
  v7 = *v3;
  if ((*v3 & 0x2000000000000000) == 0)
  {
LABEL_62:
    if ((v7 & 0x40000000000) == 0)
      goto LABEL_63;
    goto LABEL_129;
  }
LABEL_128:
  result = *((float *)a2 + 72);
  v5 |= 0x2000000000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 72) = result;
  v7 = *v3;
  if ((*v3 & 0x40000000000) == 0)
  {
LABEL_63:
    if ((v7 & 0x40000) == 0)
      goto LABEL_64;
    goto LABEL_130;
  }
LABEL_129:
  result = *((float *)a2 + 53);
  v5 |= 0x40000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 53) = result;
  v7 = *v3;
  if ((*v3 & 0x40000) == 0)
  {
LABEL_64:
    if ((v7 & 0x80000000000000) == 0)
      goto LABEL_65;
    goto LABEL_131;
  }
LABEL_130:
  result = *((float *)a2 + 29);
  v5 |= 0x40000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 29) = result;
  v7 = *v3;
  if ((*v3 & 0x80000000000000) == 0)
  {
LABEL_65:
    if ((v7 & 0x1000000000) == 0)
      goto LABEL_66;
    goto LABEL_132;
  }
LABEL_131:
  result = *((float *)a2 + 66);
  v5 |= 0x80000000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 66) = result;
  v7 = *v3;
  if ((*v3 & 0x1000000000) == 0)
  {
LABEL_66:
    if ((v7 & 0x200000) == 0)
      goto LABEL_67;
    goto LABEL_133;
  }
LABEL_132:
  result = *((float *)a2 + 47);
  v5 |= 0x1000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 47) = result;
  v7 = *v3;
  if ((*v3 & 0x200000) == 0)
  {
LABEL_67:
    if ((v7 & 0x400000000000000) == 0)
      goto LABEL_68;
    goto LABEL_134;
  }
LABEL_133:
  result = *((float *)a2 + 32);
  v5 |= 0x200000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 32) = result;
  v7 = *v3;
  if ((*v3 & 0x400000000000000) == 0)
  {
LABEL_68:
    if ((v7 & 0x8000000000) == 0)
      goto LABEL_69;
    goto LABEL_135;
  }
LABEL_134:
  result = *((float *)a2 + 69);
  v5 |= 0x400000000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 69) = result;
  v7 = *v3;
  if ((*v3 & 0x8000000000) == 0)
  {
LABEL_69:
    if ((v7 & 2) == 0)
      goto LABEL_70;
    goto LABEL_136;
  }
LABEL_135:
  result = *((float *)a2 + 50);
  v5 |= 0x8000000000uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((float *)this + 50) = result;
  v7 = *v3;
  if ((*v3 & 2) == 0)
  {
LABEL_70:
    if ((v7 & 4) == 0)
      goto LABEL_71;
    goto LABEL_137;
  }
LABEL_136:
  v17 = *((_QWORD *)a2 + 2);
  v5 |= 2uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((_QWORD *)this + 2) = v17;
  v7 = *v3;
  if ((*v3 & 4) == 0)
  {
LABEL_71:
    if ((v7 & 0x400000000000) == 0)
      return result;
LABEL_138:
    result = *((float *)a2 + 57);
    *v2 = v5 | 0x400000000000;
    *((_BYTE *)this + 324) = v6;
    *((float *)this + 57) = result;
    return result;
  }
LABEL_137:
  v18 = *((_QWORD *)a2 + 3);
  v5 |= 4uLL;
  *v2 = v5;
  *((_BYTE *)this + 324) = v6;
  *((_QWORD *)this + 3) = v18;
  if ((*v3 & 0x400000000000) != 0)
    goto LABEL_138;
  return result;
}

CMMsl *CMMsl::KappaPulseResult::operator=(CMMsl *a1, const CMMsl::KappaPulseResult *a2)
{
  CMMsl::KappaPulseResult *v3;
  _BYTE v5[328];

  if (a1 != a2)
  {
    CMMsl::KappaPulseResult::KappaPulseResult((CMMsl::KappaPulseResult *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaPulseResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaPulseResult *a2, CMMsl::KappaPulseResult *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  char v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  float result;

  v3 = *((_DWORD *)this + 81);
  v4 = *(_QWORD *)((char *)this + 316);
  v5 = *((_DWORD *)a2 + 81);
  *(_QWORD *)((char *)this + 316) = *(_QWORD *)((char *)a2 + 316);
  *((_DWORD *)this + 81) = v5;
  *(_QWORD *)((char *)a2 + 316) = v4;
  *((_DWORD *)a2 + 81) = v3;
  v6 = *((_BYTE *)this + 312);
  *((_BYTE *)this + 312) = *((_BYTE *)a2 + 312);
  *((_BYTE *)a2 + 312) = v6;
  v7 = *((_DWORD *)this + 76);
  *((_DWORD *)this + 76) = *((_DWORD *)a2 + 76);
  *((_DWORD *)a2 + 76) = v7;
  v8 = *((_DWORD *)this + 77);
  *((_DWORD *)this + 77) = *((_DWORD *)a2 + 77);
  *((_DWORD *)a2 + 77) = v8;
  v9 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v9;
  v10 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v10;
  v11 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v11;
  v12 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v12;
  v13 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v13;
  v14 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v14;
  v15 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v15;
  v16 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v16;
  v17 = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v17;
  v18 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v18;
  v19 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v19;
  v20 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v20;
  v21 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v21;
  v22 = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v22;
  v23 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v23;
  v24 = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v24;
  v25 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v25;
  v26 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v26;
  v27 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v27;
  v28 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v28;
  v29 = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v29;
  v30 = *((_DWORD *)this + 65);
  *((_DWORD *)this + 65) = *((_DWORD *)a2 + 65);
  *((_DWORD *)a2 + 65) = v30;
  v31 = *((_DWORD *)this + 64);
  *((_DWORD *)this + 64) = *((_DWORD *)a2 + 64);
  *((_DWORD *)a2 + 64) = v31;
  v32 = *((_DWORD *)this + 73);
  *((_DWORD *)this + 73) = *((_DWORD *)a2 + 73);
  *((_DWORD *)a2 + 73) = v32;
  v33 = *((_DWORD *)this + 58);
  *((_DWORD *)this + 58) = *((_DWORD *)a2 + 58);
  *((_DWORD *)a2 + 58) = v33;
  v34 = *((_DWORD *)this + 59);
  *((_DWORD *)this + 59) = *((_DWORD *)a2 + 59);
  *((_DWORD *)a2 + 59) = v34;
  v35 = *((_DWORD *)this + 71);
  *((_DWORD *)this + 71) = *((_DWORD *)a2 + 71);
  *((_DWORD *)a2 + 71) = v35;
  v36 = *((_DWORD *)this + 63);
  *((_DWORD *)this + 63) = *((_DWORD *)a2 + 63);
  *((_DWORD *)a2 + 63) = v36;
  v37 = *((_DWORD *)this + 70);
  *((_DWORD *)this + 70) = *((_DWORD *)a2 + 70);
  *((_DWORD *)a2 + 70) = v37;
  v38 = *((_DWORD *)this + 62);
  *((_DWORD *)this + 62) = *((_DWORD *)a2 + 62);
  *((_DWORD *)a2 + 62) = v38;
  v39 = *((_DWORD *)this + 75);
  *((_DWORD *)this + 75) = *((_DWORD *)a2 + 75);
  *((_DWORD *)a2 + 75) = v39;
  v40 = *((_DWORD *)this + 68);
  *((_DWORD *)this + 68) = *((_DWORD *)a2 + 68);
  *((_DWORD *)a2 + 68) = v40;
  v41 = *((_DWORD *)this + 61);
  *((_DWORD *)this + 61) = *((_DWORD *)a2 + 61);
  *((_DWORD *)a2 + 61) = v41;
  v42 = *((_DWORD *)this + 67);
  *((_DWORD *)this + 67) = *((_DWORD *)a2 + 67);
  *((_DWORD *)a2 + 67) = v42;
  v43 = *((_DWORD *)this + 60);
  *((_DWORD *)this + 60) = *((_DWORD *)a2 + 60);
  *((_DWORD *)a2 + 60) = v43;
  v44 = *((_DWORD *)this + 74);
  *((_DWORD *)this + 74) = *((_DWORD *)a2 + 74);
  *((_DWORD *)a2 + 74) = v44;
  v45 = *((_DWORD *)this + 46);
  *((_DWORD *)this + 46) = *((_DWORD *)a2 + 46);
  *((_DWORD *)a2 + 46) = v45;
  v46 = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v46;
  v47 = *((_DWORD *)this + 54);
  *((_DWORD *)this + 54) = *((_DWORD *)a2 + 54);
  *((_DWORD *)a2 + 54) = v47;
  v48 = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v48;
  v49 = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v49;
  v50 = *((_DWORD *)this + 52);
  *((_DWORD *)this + 52) = *((_DWORD *)a2 + 52);
  *((_DWORD *)a2 + 52) = v50;
  v51 = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v51;
  v52 = *((_DWORD *)this + 51);
  *((_DWORD *)this + 51) = *((_DWORD *)a2 + 51);
  *((_DWORD *)a2 + 51) = v52;
  v53 = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v53;
  v54 = *((_DWORD *)this + 56);
  *((_DWORD *)this + 56) = *((_DWORD *)a2 + 56);
  *((_DWORD *)a2 + 56) = v54;
  v55 = *((_DWORD *)this + 49);
  *((_DWORD *)this + 49) = *((_DWORD *)a2 + 49);
  *((_DWORD *)a2 + 49) = v55;
  v56 = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v56;
  v57 = *((_DWORD *)this + 48);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_DWORD *)a2 + 48) = v57;
  v58 = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v58;
  v59 = *((_DWORD *)this + 55);
  *((_DWORD *)this + 55) = *((_DWORD *)a2 + 55);
  *((_DWORD *)a2 + 55) = v59;
  v60 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v60;
  v61 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v61;
  v62 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v62;
  v63 = *((_DWORD *)this + 72);
  *((_DWORD *)this + 72) = *((_DWORD *)a2 + 72);
  *((_DWORD *)a2 + 72) = v63;
  v64 = *((_DWORD *)this + 53);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 53);
  *((_DWORD *)a2 + 53) = v64;
  v65 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v65;
  v66 = *((_DWORD *)this + 66);
  *((_DWORD *)this + 66) = *((_DWORD *)a2 + 66);
  *((_DWORD *)a2 + 66) = v66;
  v67 = *((_DWORD *)this + 47);
  *((_DWORD *)this + 47) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = v67;
  v68 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v68;
  v69 = *((_DWORD *)this + 69);
  *((_DWORD *)this + 69) = *((_DWORD *)a2 + 69);
  *((_DWORD *)a2 + 69) = v69;
  v70 = *((_DWORD *)this + 50);
  *((_DWORD *)this + 50) = *((_DWORD *)a2 + 50);
  *((_DWORD *)a2 + 50) = v70;
  v71 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v71;
  v72 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v72;
  result = *((float *)this + 57);
  *((_DWORD *)this + 57) = *((_DWORD *)a2 + 57);
  *((float *)a2 + 57) = result;
  return result;
}

float CMMsl::KappaPulseResult::KappaPulseResult(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float result;

  *(_QWORD *)a1 = off_100352240;
  v2 = *(_QWORD *)(a2 + 316);
  *(_DWORD *)(a1 + 324) = *(_DWORD *)(a2 + 324);
  *(_QWORD *)(a1 + 316) = v2;
  *(_DWORD *)(a2 + 324) = 0;
  *(_QWORD *)(a2 + 316) = 0;
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(_DWORD *)(a1 + 304) = *(_DWORD *)(a2 + 304);
  *(_DWORD *)(a1 + 308) = *(_DWORD *)(a2 + 308);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 260);
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
  *(_DWORD *)(a1 + 292) = *(_DWORD *)(a2 + 292);
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
  *(_DWORD *)(a1 + 236) = *(_DWORD *)(a2 + 236);
  *(_DWORD *)(a1 + 284) = *(_DWORD *)(a2 + 284);
  *(_DWORD *)(a1 + 252) = *(_DWORD *)(a2 + 252);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(_DWORD *)(a1 + 300) = *(_DWORD *)(a2 + 300);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
  *(_DWORD *)(a1 + 268) = *(_DWORD *)(a2 + 268);
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  result = *(float *)(a2 + 228);
  *(float *)(a1 + 228) = result;
  return result;
}

CMMsl *CMMsl::KappaPulseResult::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::KappaPulseResult *v3;
  _BYTE v5[328];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaPulseResult::KappaPulseResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaPulseResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaPulseResult::formatText(CMMsl::KappaPulseResult *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t v6;
  char v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)((char *)this + 316);
  v6 = *(_QWORD *)((char *)this + 316);
  if ((v6 & 0x200) != 0)
  {
    PB::TextFormatter::format(a2, "arclengthXYBiggestImpact", *((float *)this + 20));
    v6 = *v5;
    v7 = *((_BYTE *)this + 324);
    if ((*v5 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = *((_BYTE *)this + 324);
  if ((v6 & 0x400) != 0)
  {
LABEL_5:
    PB::TextFormatter::format(a2, "arclengthXYOverEpoch", *((float *)this + 21));
    v6 = *v5;
    v7 = *((_BYTE *)this + 324);
  }
LABEL_6:
  if ((v6 & 0x800) != 0)
  {
    PB::TextFormatter::format(a2, "arclengthXYZBiggestImpact", *((float *)this + 22));
    v6 = *v5;
    v7 = *((_BYTE *)this + 324);
    if ((*v5 & 0x1000) == 0)
    {
LABEL_8:
      if ((v6 & 0x2000) == 0)
        goto LABEL_9;
      goto LABEL_76;
    }
  }
  else if ((v6 & 0x1000) == 0)
  {
    goto LABEL_8;
  }
  PB::TextFormatter::format(a2, "arclengthXYZOverEpoch", *((float *)this + 23));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x2000) == 0)
  {
LABEL_9:
    if ((v6 & 0x4000) == 0)
      goto LABEL_10;
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(a2, "arclengthZBiggestImpact", *((float *)this + 24));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x4000) == 0)
  {
LABEL_10:
    if ((v6 & 0x8000) == 0)
      goto LABEL_11;
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(a2, "arclengthZOverEpoch", *((float *)this + 25));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x8000) == 0)
  {
LABEL_11:
    if ((v6 & 1) == 0)
      goto LABEL_12;
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(a2, "configDecelPulseThreshold", *((float *)this + 26));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 1) == 0)
  {
LABEL_12:
    if ((v6 & 0x10000) == 0)
      goto LABEL_13;
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(a2, "deltaTriggerTime", *((_QWORD *)this + 1));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x10000) == 0)
  {
LABEL_13:
    if ((v6 & 0x20000) == 0)
      goto LABEL_14;
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(a2, "deltaVXYBiggestImpact", *((float *)this + 27));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x20000) == 0)
  {
LABEL_14:
    if ((v6 & 0x40000) == 0)
      goto LABEL_15;
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(a2, "deltaVXYOverEpoch", *((float *)this + 28));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x40000) == 0)
  {
LABEL_15:
    if ((v6 & 0x80000) == 0)
      goto LABEL_16;
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(a2, "deltaVXYUnconditional", *((float *)this + 29));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x80000) == 0)
  {
LABEL_16:
    if ((v6 & 0x100000) == 0)
      goto LABEL_17;
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(a2, "deltaVXYZBiggestImpact", *((float *)this + 30));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x100000) == 0)
  {
LABEL_17:
    if ((v6 & 0x200000) == 0)
      goto LABEL_18;
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(a2, "deltaVXYZOverEpoch", *((float *)this + 31));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x200000) == 0)
  {
LABEL_18:
    if ((v6 & 0x400000) == 0)
      goto LABEL_19;
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(a2, "deltaVXYZUnconditional", *((float *)this + 32));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x400000) == 0)
  {
LABEL_19:
    if ((v6 & 0x800000) == 0)
      goto LABEL_20;
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(a2, "deltaVZBiggestImpact", *((float *)this + 33));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x800000) == 0)
  {
LABEL_20:
    if ((v6 & 0x1000000) == 0)
      goto LABEL_21;
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(a2, "deltaVZOverEpoch", *((float *)this + 34));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x1000000) == 0)
  {
LABEL_21:
    if ((v6 & 0x2000000) == 0)
      goto LABEL_22;
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(a2, "deltaVZUnconditional", *((float *)this + 35));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x2000000) == 0)
  {
LABEL_22:
    if ((v6 & 0x4000000) == 0)
      goto LABEL_23;
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(a2, "durationXYBiggestImpact", *((float *)this + 36));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x4000000) == 0)
  {
LABEL_23:
    if ((v6 & 0x8000000) == 0)
      goto LABEL_24;
    goto LABEL_91;
  }
LABEL_90:
  PB::TextFormatter::format(a2, "durationXYZBiggestImpact", *((float *)this + 37));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x8000000) == 0)
  {
LABEL_24:
    if ((v6 & 2) == 0)
      goto LABEL_25;
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(a2, "durationZBiggestImpact", *((float *)this + 38));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 2) == 0)
  {
LABEL_25:
    if ((v6 & 4) == 0)
      goto LABEL_26;
    goto LABEL_93;
  }
LABEL_92:
  PB::TextFormatter::format(a2, "epochFirstTimestamp", *((_QWORD *)this + 2));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 4) == 0)
  {
LABEL_26:
    if ((v6 & 8) == 0)
      goto LABEL_27;
    goto LABEL_94;
  }
LABEL_93:
  PB::TextFormatter::format(a2, "epochLastTimestamp", *((_QWORD *)this + 3));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 8) == 0)
  {
LABEL_27:
    if ((v6 & 0x10) == 0)
      goto LABEL_28;
    goto LABEL_95;
  }
LABEL_94:
  PB::TextFormatter::format(a2, "faultCounter", *((_QWORD *)this + 4));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x10) == 0)
  {
LABEL_28:
    if ((v6 & 0x10000000) == 0)
      goto LABEL_29;
    goto LABEL_96;
  }
LABEL_95:
  PB::TextFormatter::format(a2, "hgAccelBufferSize", *((_QWORD *)this + 5));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v6 & 0x20000000) == 0)
      goto LABEL_30;
    goto LABEL_97;
  }
LABEL_96:
  PB::TextFormatter::format(a2, "hgArclengthXYBiggestImpact", *((float *)this + 39));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x20000000) == 0)
  {
LABEL_30:
    if ((v6 & 0x40000000) == 0)
      goto LABEL_31;
    goto LABEL_98;
  }
LABEL_97:
  PB::TextFormatter::format(a2, "hgArclengthXYOverEpoch", *((float *)this + 40));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x40000000) == 0)
  {
LABEL_31:
    if ((v6 & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_99;
  }
LABEL_98:
  PB::TextFormatter::format(a2, "hgArclengthXYZBiggestImpact", *((float *)this + 41));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x80000000) == 0)
  {
LABEL_32:
    if ((v6 & 0x100000000) == 0)
      goto LABEL_33;
    goto LABEL_100;
  }
LABEL_99:
  PB::TextFormatter::format(a2, "hgArclengthXYZOverEpoch", *((float *)this + 42));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x100000000) == 0)
  {
LABEL_33:
    if ((v6 & 0x200000000) == 0)
      goto LABEL_34;
    goto LABEL_101;
  }
LABEL_100:
  PB::TextFormatter::format(a2, "hgArclengthZBiggestImpact", *((float *)this + 43));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x200000000) == 0)
  {
LABEL_34:
    if ((v6 & 0x400000000) == 0)
      goto LABEL_35;
    goto LABEL_102;
  }
LABEL_101:
  PB::TextFormatter::format(a2, "hgArclengthZOverEpoch", *((float *)this + 44));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x400000000) == 0)
  {
LABEL_35:
    if ((v6 & 0x800000000) == 0)
      goto LABEL_36;
    goto LABEL_103;
  }
LABEL_102:
  PB::TextFormatter::format(a2, "hgDeltaVXYBiggestImpact", *((float *)this + 45));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x800000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x1000000000) == 0)
      goto LABEL_37;
    goto LABEL_104;
  }
LABEL_103:
  PB::TextFormatter::format(a2, "hgDeltaVXYOverEpoch", *((float *)this + 46));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x1000000000) == 0)
  {
LABEL_37:
    if ((v6 & 0x2000000000) == 0)
      goto LABEL_38;
    goto LABEL_105;
  }
LABEL_104:
  PB::TextFormatter::format(a2, "hgDeltaVXYUnconditional", *((float *)this + 47));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x2000000000) == 0)
  {
LABEL_38:
    if ((v6 & 0x4000000000) == 0)
      goto LABEL_39;
    goto LABEL_106;
  }
LABEL_105:
  PB::TextFormatter::format(a2, "hgDeltaVXYZBiggestImpact", *((float *)this + 48));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x4000000000) == 0)
  {
LABEL_39:
    if ((v6 & 0x8000000000) == 0)
      goto LABEL_40;
    goto LABEL_107;
  }
LABEL_106:
  PB::TextFormatter::format(a2, "hgDeltaVXYZOverEpoch", *((float *)this + 49));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x8000000000) == 0)
  {
LABEL_40:
    if ((v6 & 0x10000000000) == 0)
      goto LABEL_41;
    goto LABEL_108;
  }
LABEL_107:
  PB::TextFormatter::format(a2, "hgDeltaVXYZUnconditional", *((float *)this + 50));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x10000000000) == 0)
  {
LABEL_41:
    if ((v6 & 0x20000000000) == 0)
      goto LABEL_42;
    goto LABEL_109;
  }
LABEL_108:
  PB::TextFormatter::format(a2, "hgDeltaVZBiggestImpact", *((float *)this + 51));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x20000000000) == 0)
  {
LABEL_42:
    if ((v6 & 0x40000000000) == 0)
      goto LABEL_43;
    goto LABEL_110;
  }
LABEL_109:
  PB::TextFormatter::format(a2, "hgDeltaVZOverEpoch", *((float *)this + 52));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x40000000000) == 0)
  {
LABEL_43:
    if ((v6 & 0x80000000000) == 0)
      goto LABEL_44;
    goto LABEL_111;
  }
LABEL_110:
  PB::TextFormatter::format(a2, "hgDeltaVZUnconditional", *((float *)this + 53));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x80000000000) == 0)
  {
LABEL_44:
    if ((v6 & 0x100000000000) == 0)
      goto LABEL_45;
    goto LABEL_112;
  }
LABEL_111:
  PB::TextFormatter::format(a2, "hgDurationXYBiggestImpact", *((float *)this + 54));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x100000000000) == 0)
  {
LABEL_45:
    if ((v6 & 0x200000000000) == 0)
      goto LABEL_46;
    goto LABEL_113;
  }
LABEL_112:
  PB::TextFormatter::format(a2, "hgDurationXYZBiggestImpact", *((float *)this + 55));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x200000000000) == 0)
  {
LABEL_46:
    if ((v6 & 0x400000000000) == 0)
      goto LABEL_47;
    goto LABEL_114;
  }
LABEL_113:
  PB::TextFormatter::format(a2, "hgDurationZBiggestImpact", *((float *)this + 56));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x400000000000) == 0)
  {
LABEL_47:
    if ((v7 & 8) == 0)
      goto LABEL_48;
    goto LABEL_115;
  }
LABEL_114:
  PB::TextFormatter::format(a2, "hgWeightCoeff", *((float *)this + 57));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((v7 & 8) == 0)
  {
LABEL_48:
    if ((v6 & 0x800000000000) == 0)
      goto LABEL_49;
    goto LABEL_116;
  }
LABEL_115:
  PB::TextFormatter::format(a2, "isPulseDetected", *((_BYTE *)this + 312));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x800000000000) == 0)
  {
LABEL_49:
    if ((v6 & 0x1000000000000) == 0)
      goto LABEL_50;
    goto LABEL_117;
  }
LABEL_116:
  PB::TextFormatter::format(a2, "lgArclengthXYBiggestImpact", *((float *)this + 58));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x1000000000000) == 0)
  {
LABEL_50:
    if ((v6 & 0x2000000000000) == 0)
      goto LABEL_51;
    goto LABEL_118;
  }
LABEL_117:
  PB::TextFormatter::format(a2, "lgArclengthXYOverEpoch", *((float *)this + 59));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x2000000000000) == 0)
  {
LABEL_51:
    if ((v6 & 0x4000000000000) == 0)
      goto LABEL_52;
    goto LABEL_119;
  }
LABEL_118:
  PB::TextFormatter::format(a2, "lgArclengthXYZBiggestImpact", *((float *)this + 60));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x4000000000000) == 0)
  {
LABEL_52:
    if ((v6 & 0x8000000000000) == 0)
      goto LABEL_53;
    goto LABEL_120;
  }
LABEL_119:
  PB::TextFormatter::format(a2, "lgArclengthXYZOverEpoch", *((float *)this + 61));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x8000000000000) == 0)
  {
LABEL_53:
    if ((v6 & 0x10000000000000) == 0)
      goto LABEL_54;
    goto LABEL_121;
  }
LABEL_120:
  PB::TextFormatter::format(a2, "lgArclengthZBiggestImpact", *((float *)this + 62));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x10000000000000) == 0)
  {
LABEL_54:
    if ((v6 & 0x20000000000000) == 0)
      goto LABEL_55;
    goto LABEL_122;
  }
LABEL_121:
  PB::TextFormatter::format(a2, "lgArclengthZOverEpoch", *((float *)this + 63));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x20000000000000) == 0)
  {
LABEL_55:
    if ((v6 & 0x40000000000000) == 0)
      goto LABEL_56;
    goto LABEL_123;
  }
LABEL_122:
  PB::TextFormatter::format(a2, "lgDeltaVXYBiggestImpact", *((float *)this + 64));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x40000000000000) == 0)
  {
LABEL_56:
    if ((v6 & 0x80000000000000) == 0)
      goto LABEL_57;
    goto LABEL_124;
  }
LABEL_123:
  PB::TextFormatter::format(a2, "lgDeltaVXYOverEpoch", *((float *)this + 65));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x80000000000000) == 0)
  {
LABEL_57:
    if ((v6 & 0x100000000000000) == 0)
      goto LABEL_58;
    goto LABEL_125;
  }
LABEL_124:
  PB::TextFormatter::format(a2, "lgDeltaVXYUnconditional", *((float *)this + 66));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x100000000000000) == 0)
  {
LABEL_58:
    if ((v6 & 0x200000000000000) == 0)
      goto LABEL_59;
    goto LABEL_126;
  }
LABEL_125:
  PB::TextFormatter::format(a2, "lgDeltaVXYZBiggestImpact", *((float *)this + 67));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x200000000000000) == 0)
  {
LABEL_59:
    if ((v6 & 0x400000000000000) == 0)
      goto LABEL_60;
    goto LABEL_127;
  }
LABEL_126:
  PB::TextFormatter::format(a2, "lgDeltaVXYZOverEpoch", *((float *)this + 68));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x400000000000000) == 0)
  {
LABEL_60:
    if ((v6 & 0x800000000000000) == 0)
      goto LABEL_61;
    goto LABEL_128;
  }
LABEL_127:
  PB::TextFormatter::format(a2, "lgDeltaVXYZUnconditional", *((float *)this + 69));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x800000000000000) == 0)
  {
LABEL_61:
    if ((v6 & 0x1000000000000000) == 0)
      goto LABEL_62;
    goto LABEL_129;
  }
LABEL_128:
  PB::TextFormatter::format(a2, "lgDeltaVZBiggestImpact", *((float *)this + 70));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x1000000000000000) == 0)
  {
LABEL_62:
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_63;
    goto LABEL_130;
  }
LABEL_129:
  PB::TextFormatter::format(a2, "lgDeltaVZOverEpoch", *((float *)this + 71));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x2000000000000000) == 0)
  {
LABEL_63:
    if ((v6 & 0x4000000000000000) == 0)
      goto LABEL_64;
    goto LABEL_131;
  }
LABEL_130:
  PB::TextFormatter::format(a2, "lgDeltaVZUnconditional", *((float *)this + 72));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x4000000000000000) == 0)
  {
LABEL_64:
    if ((v6 & 0x8000000000000000) == 0)
      goto LABEL_65;
    goto LABEL_132;
  }
LABEL_131:
  PB::TextFormatter::format(a2, "lgDurationXYBiggestImpact", *((float *)this + 73));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((*v5 & 0x8000000000000000) == 0)
  {
LABEL_65:
    if ((v7 & 1) == 0)
      goto LABEL_66;
    goto LABEL_133;
  }
LABEL_132:
  PB::TextFormatter::format(a2, "lgDurationXYZBiggestImpact", *((float *)this + 74));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((v7 & 1) == 0)
  {
LABEL_66:
    if ((v7 & 2) == 0)
      goto LABEL_67;
    goto LABEL_134;
  }
LABEL_133:
  PB::TextFormatter::format(a2, "lgDurationZBiggestImpact", *((float *)this + 75));
  v6 = *v5;
  v7 = *((_BYTE *)this + 324);
  if ((v7 & 2) == 0)
  {
LABEL_67:
    if ((v7 & 4) == 0)
      goto LABEL_68;
    goto LABEL_135;
  }
LABEL_134:
  PB::TextFormatter::format(a2, "maxPulse", *((float *)this + 76));
  v6 = *v5;
  if ((*((_BYTE *)this + 324) & 4) == 0)
  {
LABEL_68:
    if ((v6 & 0x20) == 0)
      goto LABEL_69;
    goto LABEL_136;
  }
LABEL_135:
  PB::TextFormatter::format(a2, "maxPulseHeight", *((float *)this + 77));
  v6 = *v5;
  if ((*v5 & 0x20) == 0)
  {
LABEL_69:
    if ((v6 & 0x40) == 0)
      goto LABEL_70;
    goto LABEL_137;
  }
LABEL_136:
  PB::TextFormatter::format(a2, "maxPulseStartTime", *((_QWORD *)this + 6));
  v6 = *v5;
  if ((*v5 & 0x40) == 0)
  {
LABEL_70:
    if ((v6 & 0x80) == 0)
      goto LABEL_71;
LABEL_138:
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 8));
    if ((*v5 & 0x100) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_72;
  }
LABEL_137:
  PB::TextFormatter::format(a2, "maxPulseTime", *((_QWORD *)this + 7));
  v6 = *v5;
  if ((*v5 & 0x80) != 0)
    goto LABEL_138;
LABEL_71:
  if ((v6 & 0x100) != 0)
LABEL_72:
    PB::TextFormatter::format(a2, "triggerTimestamp", *((_QWORD *)this + 9));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaPulseResult::readFrom(CMMsl::KappaPulseResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  char *v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  char v118;
  unsigned int v119;
  uint64_t v120;
  unint64_t v121;
  char v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  char v126;
  unsigned int v127;
  uint64_t v128;
  unint64_t v129;
  char v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  char v143;
  unsigned int v144;
  uint64_t v145;
  unint64_t v146;
  char v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  char v151;
  unsigned int v152;
  uint64_t v153;
  unint64_t v154;
  char v155;
  uint64_t result;
  char v157;
  unsigned int v158;
  unint64_t v159;
  char v160;
  char v161;
  unsigned int v162;
  unint64_t v163;
  char v164;
  char v165;
  unsigned int v166;
  unint64_t v167;
  char v168;
  char v169;
  unsigned int v170;
  unint64_t v171;
  char v172;
  char v173;
  unsigned int v174;
  unint64_t v175;
  char v176;
  char v177;
  unsigned int v178;
  unint64_t v179;
  char v180;
  char v181;
  unsigned int v182;
  unint64_t v183;
  char v184;
  char v185;
  unsigned int v186;
  unint64_t v187;
  char v188;
  char v189;
  unsigned int v190;
  unint64_t v191;
  char v192;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (char *)this + 316;
    while (1)
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_20;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v21 = v12 >> 3;
      if ((int)(v12 >> 3) > 200)
      {
        switch((_DWORD)v21)
        {
          case 0xC9:
            *(_QWORD *)v8 |= 2uLL;
            v140 = *((_QWORD *)a2 + 1);
            v141 = *((_QWORD *)a2 + 2);
            v142 = *(_QWORD *)a2;
            if (v140 > 0xFFFFFFFFFFFFFFF5 || v140 + 10 > v141)
            {
              v185 = 0;
              v186 = 0;
              v145 = 0;
              if (v141 <= v140)
                v141 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v141 == v140)
                {
                  v145 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_372;
                }
                v187 = v140 + 1;
                v188 = *(_BYTE *)(v142 + v140);
                *((_QWORD *)a2 + 1) = v187;
                v145 |= (unint64_t)(v188 & 0x7F) << v185;
                if ((v188 & 0x80) == 0)
                  break;
                v185 += 7;
                v140 = v187;
                v15 = v186++ > 8;
                if (v15)
                {
LABEL_325:
                  v145 = 0;
                  goto LABEL_372;
                }
              }
              if (*((_BYTE *)a2 + 24))
                v145 = 0;
            }
            else
            {
              v143 = 0;
              v144 = 0;
              v145 = 0;
              while (1)
              {
                v146 = v140 + 1;
                *((_QWORD *)a2 + 1) = v140 + 1;
                v147 = *(_BYTE *)(v142 + v140);
                v145 |= (unint64_t)(v147 & 0x7F) << v143;
                if ((v147 & 0x80) == 0)
                  break;
                v143 += 7;
                v140 = v146;
                v15 = v144++ > 8;
                if (v15)
                  goto LABEL_325;
              }
            }
LABEL_372:
            *((_QWORD *)this + 2) = v145;
            break;
          case 0xCA:
            *(_QWORD *)v8 |= 4uLL;
            v148 = *((_QWORD *)a2 + 1);
            v149 = *((_QWORD *)a2 + 2);
            v150 = *(_QWORD *)a2;
            if (v148 > 0xFFFFFFFFFFFFFFF5 || v148 + 10 > v149)
            {
              v189 = 0;
              v190 = 0;
              v153 = 0;
              if (v149 <= v148)
                v149 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v149 == v148)
                {
                  v153 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_376;
                }
                v191 = v148 + 1;
                v192 = *(_BYTE *)(v150 + v148);
                *((_QWORD *)a2 + 1) = v191;
                v153 |= (unint64_t)(v192 & 0x7F) << v189;
                if ((v192 & 0x80) == 0)
                  break;
                v189 += 7;
                v148 = v191;
                v15 = v190++ > 8;
                if (v15)
                {
LABEL_332:
                  v153 = 0;
                  goto LABEL_376;
                }
              }
              if (*((_BYTE *)a2 + 24))
                v153 = 0;
            }
            else
            {
              v151 = 0;
              v152 = 0;
              v153 = 0;
              while (1)
              {
                v154 = v148 + 1;
                *((_QWORD *)a2 + 1) = v148 + 1;
                v155 = *(_BYTE *)(v150 + v148);
                v153 |= (unint64_t)(v155 & 0x7F) << v151;
                if ((v155 & 0x80) == 0)
                  break;
                v151 += 7;
                v148 = v154;
                v15 = v152++ > 8;
                if (v15)
                  goto LABEL_332;
              }
            }
LABEL_376:
            *((_QWORD *)this + 3) = v153;
            break;
          case 0x12D:
            *(_QWORD *)v8 |= 0x400000000000uLL;
            v26 = *((_QWORD *)a2 + 1);
            if (v26 <= 0xFFFFFFFFFFFFFFFBLL && v26 + 4 <= *((_QWORD *)a2 + 2))
            {
              *((_DWORD *)this + 57) = *(_DWORD *)(*(_QWORD *)a2 + v26);
LABEL_335:
              *((_QWORD *)a2 + 1) += 4;
            }
            else
            {
              *((_BYTE *)a2 + 24) = 1;
            }
            break;
          default:
LABEL_266:
            result = PB::Reader::skip(a2, v21, v12 & 7, 0);
            if (!(_DWORD)result)
              return result;
            break;
        }
      }
      else
      {
        switch((int)v21)
        {
          case 1:
            v8[8] |= 8u;
            v22 = *((_QWORD *)a2 + 1);
            if (v22 >= *((_QWORD *)a2 + 2))
            {
              v25 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v23 = v22 + 1;
              v24 = *(unsigned __int8 *)(*(_QWORD *)a2 + v22);
              *((_QWORD *)a2 + 1) = v23;
              v25 = v24 != 0;
            }
            *((_BYTE *)this + 312) = v25;
            goto LABEL_336;
          case 2:
            v8[8] |= 2u;
            v27 = *((_QWORD *)a2 + 1);
            if (v27 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 76) = *(_DWORD *)(*(_QWORD *)a2 + v27);
            goto LABEL_335;
          case 3:
            v8[8] |= 4u;
            v28 = *((_QWORD *)a2 + 1);
            if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 77) = *(_DWORD *)(*(_QWORD *)a2 + v28);
            goto LABEL_335;
          case 4:
            *(_QWORD *)v8 |= 0x20uLL;
            v29 = *((_QWORD *)a2 + 1);
            v30 = *((_QWORD *)a2 + 2);
            v31 = *(_QWORD *)a2;
            if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
            {
              v32 = 0;
              v33 = 0;
              v34 = 0;
              do
              {
                v35 = v29 + 1;
                *((_QWORD *)a2 + 1) = v29 + 1;
                v36 = *(_BYTE *)(v31 + v29);
                v34 |= (unint64_t)(v36 & 0x7F) << v32;
                if ((v36 & 0x80) == 0)
                  goto LABEL_344;
                v32 += 7;
                v29 = v35;
                v15 = v33++ > 8;
              }
              while (!v15);
LABEL_276:
              v34 = 0;
              goto LABEL_344;
            }
            v157 = 0;
            v158 = 0;
            v34 = 0;
            if (v30 <= v29)
              v30 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v30 == v29)
              {
                v34 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v159 = v29 + 1;
                v160 = *(_BYTE *)(v31 + v29);
                *((_QWORD *)a2 + 1) = v159;
                v34 |= (unint64_t)(v160 & 0x7F) << v157;
                if (v160 < 0)
                {
                  v157 += 7;
                  v29 = v159;
                  v15 = v158++ > 8;
                  if (v15)
                    goto LABEL_276;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v34 = 0;
              }
              break;
            }
LABEL_344:
            *((_QWORD *)this + 6) = v34;
            goto LABEL_336;
          case 5:
            *(_QWORD *)v8 |= 0x40uLL;
            v37 = *((_QWORD *)a2 + 1);
            v38 = *((_QWORD *)a2 + 2);
            v39 = *(_QWORD *)a2;
            if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
            {
              v40 = 0;
              v41 = 0;
              v42 = 0;
              do
              {
                v43 = v37 + 1;
                *((_QWORD *)a2 + 1) = v37 + 1;
                v44 = *(_BYTE *)(v39 + v37);
                v42 |= (unint64_t)(v44 & 0x7F) << v40;
                if ((v44 & 0x80) == 0)
                  goto LABEL_348;
                v40 += 7;
                v37 = v43;
                v15 = v41++ > 8;
              }
              while (!v15);
LABEL_283:
              v42 = 0;
              goto LABEL_348;
            }
            v161 = 0;
            v162 = 0;
            v42 = 0;
            if (v38 <= v37)
              v38 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v38 == v37)
              {
                v42 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v163 = v37 + 1;
                v164 = *(_BYTE *)(v39 + v37);
                *((_QWORD *)a2 + 1) = v163;
                v42 |= (unint64_t)(v164 & 0x7F) << v161;
                if (v164 < 0)
                {
                  v161 += 7;
                  v37 = v163;
                  v15 = v162++ > 8;
                  if (v15)
                    goto LABEL_283;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v42 = 0;
              }
              break;
            }
LABEL_348:
            *((_QWORD *)this + 7) = v42;
            goto LABEL_336;
          case 6:
            *(_QWORD *)v8 |= 1uLL;
            v45 = *((_QWORD *)a2 + 1);
            v46 = *((_QWORD *)a2 + 2);
            v47 = *(_QWORD *)a2;
            if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
            {
              v48 = 0;
              v49 = 0;
              v50 = 0;
              do
              {
                v51 = v45 + 1;
                *((_QWORD *)a2 + 1) = v45 + 1;
                v52 = *(_BYTE *)(v47 + v45);
                v50 |= (unint64_t)(v52 & 0x7F) << v48;
                if ((v52 & 0x80) == 0)
                  goto LABEL_352;
                v48 += 7;
                v45 = v51;
                v15 = v49++ > 8;
              }
              while (!v15);
LABEL_290:
              v50 = 0;
              goto LABEL_352;
            }
            v165 = 0;
            v166 = 0;
            v50 = 0;
            if (v46 <= v45)
              v46 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v46 == v45)
              {
                v50 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v167 = v45 + 1;
                v168 = *(_BYTE *)(v47 + v45);
                *((_QWORD *)a2 + 1) = v167;
                v50 |= (unint64_t)(v168 & 0x7F) << v165;
                if (v168 < 0)
                {
                  v165 += 7;
                  v45 = v167;
                  v15 = v166++ > 8;
                  if (v15)
                    goto LABEL_290;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v50 = 0;
              }
              break;
            }
LABEL_352:
            *((_QWORD *)this + 1) = v50;
            goto LABEL_336;
          case 7:
            *(_QWORD *)v8 |= 0x8000uLL;
            v53 = *((_QWORD *)a2 + 1);
            if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v53);
            goto LABEL_335;
          case 8:
            *(_QWORD *)v8 |= 0x80uLL;
            v54 = *((_QWORD *)a2 + 1);
            v55 = *((_QWORD *)a2 + 2);
            v56 = *(_QWORD *)a2;
            if (v54 <= 0xFFFFFFFFFFFFFFF5 && v54 + 10 <= v55)
            {
              v57 = 0;
              v58 = 0;
              v59 = 0;
              do
              {
                v60 = v54 + 1;
                *((_QWORD *)a2 + 1) = v54 + 1;
                v61 = *(_BYTE *)(v56 + v54);
                v59 |= (unint64_t)(v61 & 0x7F) << v57;
                if ((v61 & 0x80) == 0)
                  goto LABEL_356;
                v57 += 7;
                v54 = v60;
                v15 = v58++ > 8;
              }
              while (!v15);
LABEL_297:
              v59 = 0;
              goto LABEL_356;
            }
            v169 = 0;
            v170 = 0;
            v59 = 0;
            if (v55 <= v54)
              v55 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v55 == v54)
              {
                v59 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v171 = v54 + 1;
                v172 = *(_BYTE *)(v56 + v54);
                *((_QWORD *)a2 + 1) = v171;
                v59 |= (unint64_t)(v172 & 0x7F) << v169;
                if (v172 < 0)
                {
                  v169 += 7;
                  v54 = v171;
                  v15 = v170++ > 8;
                  if (v15)
                    goto LABEL_297;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v59 = 0;
              }
              break;
            }
LABEL_356:
            *((_QWORD *)this + 8) = v59;
            goto LABEL_336;
          case 9:
            *(_QWORD *)v8 |= 0x100uLL;
            v62 = *((_QWORD *)a2 + 1);
            v63 = *((_QWORD *)a2 + 2);
            v64 = *(_QWORD *)a2;
            if (v62 <= 0xFFFFFFFFFFFFFFF5 && v62 + 10 <= v63)
            {
              v65 = 0;
              v66 = 0;
              v67 = 0;
              do
              {
                v68 = v62 + 1;
                *((_QWORD *)a2 + 1) = v62 + 1;
                v69 = *(_BYTE *)(v64 + v62);
                v67 |= (unint64_t)(v69 & 0x7F) << v65;
                if ((v69 & 0x80) == 0)
                  goto LABEL_360;
                v65 += 7;
                v62 = v68;
                v15 = v66++ > 8;
              }
              while (!v15);
LABEL_304:
              v67 = 0;
              goto LABEL_360;
            }
            v173 = 0;
            v174 = 0;
            v67 = 0;
            if (v63 <= v62)
              v63 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v63 == v62)
              {
                v67 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v175 = v62 + 1;
                v176 = *(_BYTE *)(v64 + v62);
                *((_QWORD *)a2 + 1) = v175;
                v67 |= (unint64_t)(v176 & 0x7F) << v173;
                if (v176 < 0)
                {
                  v173 += 7;
                  v62 = v175;
                  v15 = v174++ > 8;
                  if (v15)
                    goto LABEL_304;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v67 = 0;
              }
              break;
            }
LABEL_360:
            *((_QWORD *)this + 9) = v67;
            goto LABEL_336;
          case 10:
            *(_QWORD *)v8 |= 0x20000uLL;
            v70 = *((_QWORD *)a2 + 1);
            if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 28) = *(_DWORD *)(*(_QWORD *)a2 + v70);
            goto LABEL_335;
          case 11:
            *(_QWORD *)v8 |= 0x10000uLL;
            v71 = *((_QWORD *)a2 + 1);
            if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v71);
            goto LABEL_335;
          case 12:
            *(_QWORD *)v8 |= 0x2000000uLL;
            v72 = *((_QWORD *)a2 + 1);
            if (v72 > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 36) = *(_DWORD *)(*(_QWORD *)a2 + v72);
            goto LABEL_335;
          case 13:
            *(_QWORD *)v8 |= 0x200uLL;
            v73 = *((_QWORD *)a2 + 1);
            if (v73 > 0xFFFFFFFFFFFFFFFBLL || v73 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v73);
            goto LABEL_335;
          case 14:
            *(_QWORD *)v8 |= 0x400uLL;
            v74 = *((_QWORD *)a2 + 1);
            if (v74 > 0xFFFFFFFFFFFFFFFBLL || v74 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v74);
            goto LABEL_335;
          case 15:
            *(_QWORD *)v8 |= 0x800000uLL;
            v75 = *((_QWORD *)a2 + 1);
            if (v75 > 0xFFFFFFFFFFFFFFFBLL || v75 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 34) = *(_DWORD *)(*(_QWORD *)a2 + v75);
            goto LABEL_335;
          case 16:
            *(_QWORD *)v8 |= 0x4000uLL;
            v76 = *((_QWORD *)a2 + 1);
            if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v76);
            goto LABEL_335;
          case 17:
            *(_QWORD *)v8 |= 0x400000uLL;
            v77 = *((_QWORD *)a2 + 1);
            if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 33) = *(_DWORD *)(*(_QWORD *)a2 + v77);
            goto LABEL_335;
          case 18:
            *(_QWORD *)v8 |= 0x2000uLL;
            v78 = *((_QWORD *)a2 + 1);
            if (v78 > 0xFFFFFFFFFFFFFFFBLL || v78 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v78);
            goto LABEL_335;
          case 19:
            *(_QWORD *)v8 |= 0x8000000uLL;
            v79 = *((_QWORD *)a2 + 1);
            if (v79 > 0xFFFFFFFFFFFFFFFBLL || v79 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 38) = *(_DWORD *)(*(_QWORD *)a2 + v79);
            goto LABEL_335;
          case 20:
            *(_QWORD *)v8 |= 0x100000uLL;
            v80 = *((_QWORD *)a2 + 1);
            if (v80 > 0xFFFFFFFFFFFFFFFBLL || v80 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 31) = *(_DWORD *)(*(_QWORD *)a2 + v80);
            goto LABEL_335;
          case 21:
            *(_QWORD *)v8 |= 0x1000uLL;
            v81 = *((_QWORD *)a2 + 1);
            if (v81 > 0xFFFFFFFFFFFFFFFBLL || v81 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v81);
            goto LABEL_335;
          case 22:
            *(_QWORD *)v8 |= 0x80000uLL;
            v82 = *((_QWORD *)a2 + 1);
            if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 30) = *(_DWORD *)(*(_QWORD *)a2 + v82);
            goto LABEL_335;
          case 23:
            *(_QWORD *)v8 |= 0x800uLL;
            v83 = *((_QWORD *)a2 + 1);
            if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v83);
            goto LABEL_335;
          case 24:
            *(_QWORD *)v8 |= 0x4000000uLL;
            v84 = *((_QWORD *)a2 + 1);
            if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 37) = *(_DWORD *)(*(_QWORD *)a2 + v84);
            goto LABEL_335;
          case 25:
            *(_QWORD *)v8 |= 0x40000000000000uLL;
            v85 = *((_QWORD *)a2 + 1);
            if (v85 > 0xFFFFFFFFFFFFFFFBLL || v85 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 65) = *(_DWORD *)(*(_QWORD *)a2 + v85);
            goto LABEL_335;
          case 26:
            *(_QWORD *)v8 |= 0x20000000000000uLL;
            v86 = *((_QWORD *)a2 + 1);
            if (v86 > 0xFFFFFFFFFFFFFFFBLL || v86 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 64) = *(_DWORD *)(*(_QWORD *)a2 + v86);
            goto LABEL_335;
          case 27:
            *(_QWORD *)v8 |= 0x4000000000000000uLL;
            v87 = *((_QWORD *)a2 + 1);
            if (v87 > 0xFFFFFFFFFFFFFFFBLL || v87 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 73) = *(_DWORD *)(*(_QWORD *)a2 + v87);
            goto LABEL_335;
          case 28:
            *(_QWORD *)v8 |= 0x800000000000uLL;
            v88 = *((_QWORD *)a2 + 1);
            if (v88 > 0xFFFFFFFFFFFFFFFBLL || v88 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 58) = *(_DWORD *)(*(_QWORD *)a2 + v88);
            goto LABEL_335;
          case 29:
            *(_QWORD *)v8 |= 0x1000000000000uLL;
            v89 = *((_QWORD *)a2 + 1);
            if (v89 > 0xFFFFFFFFFFFFFFFBLL || v89 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 59) = *(_DWORD *)(*(_QWORD *)a2 + v89);
            goto LABEL_335;
          case 30:
            *(_QWORD *)v8 |= 0x1000000000000000uLL;
            v90 = *((_QWORD *)a2 + 1);
            if (v90 > 0xFFFFFFFFFFFFFFFBLL || v90 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 71) = *(_DWORD *)(*(_QWORD *)a2 + v90);
            goto LABEL_335;
          case 31:
            *(_QWORD *)v8 |= 0x10000000000000uLL;
            v91 = *((_QWORD *)a2 + 1);
            if (v91 > 0xFFFFFFFFFFFFFFFBLL || v91 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 63) = *(_DWORD *)(*(_QWORD *)a2 + v91);
            goto LABEL_335;
          case 32:
            *(_QWORD *)v8 |= 0x800000000000000uLL;
            v92 = *((_QWORD *)a2 + 1);
            if (v92 > 0xFFFFFFFFFFFFFFFBLL || v92 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 70) = *(_DWORD *)(*(_QWORD *)a2 + v92);
            goto LABEL_335;
          case 33:
            *(_QWORD *)v8 |= 0x8000000000000uLL;
            v93 = *((_QWORD *)a2 + 1);
            if (v93 > 0xFFFFFFFFFFFFFFFBLL || v93 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 62) = *(_DWORD *)(*(_QWORD *)a2 + v93);
            goto LABEL_335;
          case 34:
            v8[8] |= 1u;
            v94 = *((_QWORD *)a2 + 1);
            if (v94 > 0xFFFFFFFFFFFFFFFBLL || v94 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 75) = *(_DWORD *)(*(_QWORD *)a2 + v94);
            goto LABEL_335;
          case 35:
            *(_QWORD *)v8 |= 0x200000000000000uLL;
            v95 = *((_QWORD *)a2 + 1);
            if (v95 > 0xFFFFFFFFFFFFFFFBLL || v95 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 68) = *(_DWORD *)(*(_QWORD *)a2 + v95);
            goto LABEL_335;
          case 36:
            *(_QWORD *)v8 |= 0x4000000000000uLL;
            v96 = *((_QWORD *)a2 + 1);
            if (v96 > 0xFFFFFFFFFFFFFFFBLL || v96 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 61) = *(_DWORD *)(*(_QWORD *)a2 + v96);
            goto LABEL_335;
          case 37:
            *(_QWORD *)v8 |= 0x100000000000000uLL;
            v97 = *((_QWORD *)a2 + 1);
            if (v97 > 0xFFFFFFFFFFFFFFFBLL || v97 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 67) = *(_DWORD *)(*(_QWORD *)a2 + v97);
            goto LABEL_335;
          case 38:
            *(_QWORD *)v8 |= 0x2000000000000uLL;
            v98 = *((_QWORD *)a2 + 1);
            if (v98 > 0xFFFFFFFFFFFFFFFBLL || v98 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 60) = *(_DWORD *)(*(_QWORD *)a2 + v98);
            goto LABEL_335;
          case 39:
            *(_QWORD *)v8 |= 0x8000000000000000;
            v99 = *((_QWORD *)a2 + 1);
            if (v99 > 0xFFFFFFFFFFFFFFFBLL || v99 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 74) = *(_DWORD *)(*(_QWORD *)a2 + v99);
            goto LABEL_335;
          case 40:
            *(_QWORD *)v8 |= 0x800000000uLL;
            v100 = *((_QWORD *)a2 + 1);
            if (v100 > 0xFFFFFFFFFFFFFFFBLL || v100 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 46) = *(_DWORD *)(*(_QWORD *)a2 + v100);
            goto LABEL_335;
          case 41:
            *(_QWORD *)v8 |= 0x400000000uLL;
            v101 = *((_QWORD *)a2 + 1);
            if (v101 > 0xFFFFFFFFFFFFFFFBLL || v101 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 45) = *(_DWORD *)(*(_QWORD *)a2 + v101);
            goto LABEL_335;
          case 42:
            *(_QWORD *)v8 |= 0x80000000000uLL;
            v102 = *((_QWORD *)a2 + 1);
            if (v102 > 0xFFFFFFFFFFFFFFFBLL || v102 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 54) = *(_DWORD *)(*(_QWORD *)a2 + v102);
            goto LABEL_335;
          case 43:
            *(_QWORD *)v8 |= 0x10000000uLL;
            v103 = *((_QWORD *)a2 + 1);
            if (v103 > 0xFFFFFFFFFFFFFFFBLL || v103 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 39) = *(_DWORD *)(*(_QWORD *)a2 + v103);
            goto LABEL_335;
          case 44:
            *(_QWORD *)v8 |= 0x20000000uLL;
            v104 = *((_QWORD *)a2 + 1);
            if (v104 > 0xFFFFFFFFFFFFFFFBLL || v104 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 40) = *(_DWORD *)(*(_QWORD *)a2 + v104);
            goto LABEL_335;
          case 45:
            *(_QWORD *)v8 |= 0x20000000000uLL;
            v105 = *((_QWORD *)a2 + 1);
            if (v105 > 0xFFFFFFFFFFFFFFFBLL || v105 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 52) = *(_DWORD *)(*(_QWORD *)a2 + v105);
            goto LABEL_335;
          case 46:
            *(_QWORD *)v8 |= 0x200000000uLL;
            v106 = *((_QWORD *)a2 + 1);
            if (v106 > 0xFFFFFFFFFFFFFFFBLL || v106 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 44) = *(_DWORD *)(*(_QWORD *)a2 + v106);
            goto LABEL_335;
          case 47:
            *(_QWORD *)v8 |= 0x10000000000uLL;
            v107 = *((_QWORD *)a2 + 1);
            if (v107 > 0xFFFFFFFFFFFFFFFBLL || v107 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 51) = *(_DWORD *)(*(_QWORD *)a2 + v107);
            goto LABEL_335;
          case 48:
            *(_QWORD *)v8 |= (unint64_t)&_mh_execute_header;
            v108 = *((_QWORD *)a2 + 1);
            if (v108 > 0xFFFFFFFFFFFFFFFBLL || v108 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 43) = *(_DWORD *)(*(_QWORD *)a2 + v108);
            goto LABEL_335;
          case 49:
            *(_QWORD *)v8 |= 0x200000000000uLL;
            v109 = *((_QWORD *)a2 + 1);
            if (v109 > 0xFFFFFFFFFFFFFFFBLL || v109 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 56) = *(_DWORD *)(*(_QWORD *)a2 + v109);
            goto LABEL_335;
          case 50:
            *(_QWORD *)v8 |= 0x4000000000uLL;
            v110 = *((_QWORD *)a2 + 1);
            if (v110 > 0xFFFFFFFFFFFFFFFBLL || v110 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 49) = *(_DWORD *)(*(_QWORD *)a2 + v110);
            goto LABEL_335;
          case 51:
            *(_QWORD *)v8 |= 0x80000000uLL;
            v111 = *((_QWORD *)a2 + 1);
            if (v111 > 0xFFFFFFFFFFFFFFFBLL || v111 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 42) = *(_DWORD *)(*(_QWORD *)a2 + v111);
            goto LABEL_335;
          case 52:
            *(_QWORD *)v8 |= 0x2000000000uLL;
            v112 = *((_QWORD *)a2 + 1);
            if (v112 > 0xFFFFFFFFFFFFFFFBLL || v112 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 48) = *(_DWORD *)(*(_QWORD *)a2 + v112);
            goto LABEL_335;
          case 53:
            *(_QWORD *)v8 |= 0x40000000uLL;
            v113 = *((_QWORD *)a2 + 1);
            if (v113 > 0xFFFFFFFFFFFFFFFBLL || v113 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 41) = *(_DWORD *)(*(_QWORD *)a2 + v113);
            goto LABEL_335;
          case 54:
            *(_QWORD *)v8 |= 0x100000000000uLL;
            v114 = *((_QWORD *)a2 + 1);
            if (v114 > 0xFFFFFFFFFFFFFFFBLL || v114 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 55) = *(_DWORD *)(*(_QWORD *)a2 + v114);
            goto LABEL_335;
          case 55:
            *(_QWORD *)v8 |= 8uLL;
            v115 = *((_QWORD *)a2 + 1);
            v116 = *((_QWORD *)a2 + 2);
            v117 = *(_QWORD *)a2;
            if (v115 <= 0xFFFFFFFFFFFFFFF5 && v115 + 10 <= v116)
            {
              v118 = 0;
              v119 = 0;
              v120 = 0;
              do
              {
                v121 = v115 + 1;
                *((_QWORD *)a2 + 1) = v115 + 1;
                v122 = *(_BYTE *)(v117 + v115);
                v120 |= (unint64_t)(v122 & 0x7F) << v118;
                if ((v122 & 0x80) == 0)
                  goto LABEL_364;
                v118 += 7;
                v115 = v121;
                v15 = v119++ > 8;
              }
              while (!v15);
LABEL_311:
              v120 = 0;
              goto LABEL_364;
            }
            v177 = 0;
            v178 = 0;
            v120 = 0;
            if (v116 <= v115)
              v116 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v116 == v115)
              {
                v120 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v179 = v115 + 1;
                v180 = *(_BYTE *)(v117 + v115);
                *((_QWORD *)a2 + 1) = v179;
                v120 |= (unint64_t)(v180 & 0x7F) << v177;
                if (v180 < 0)
                {
                  v177 += 7;
                  v115 = v179;
                  v15 = v178++ > 8;
                  if (v15)
                    goto LABEL_311;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v120 = 0;
              }
              break;
            }
LABEL_364:
            *((_QWORD *)this + 4) = v120;
            goto LABEL_336;
          case 56:
            *(_QWORD *)v8 |= 0x10uLL;
            v123 = *((_QWORD *)a2 + 1);
            v124 = *((_QWORD *)a2 + 2);
            v125 = *(_QWORD *)a2;
            if (v123 <= 0xFFFFFFFFFFFFFFF5 && v123 + 10 <= v124)
            {
              v126 = 0;
              v127 = 0;
              v128 = 0;
              do
              {
                v129 = v123 + 1;
                *((_QWORD *)a2 + 1) = v123 + 1;
                v130 = *(_BYTE *)(v125 + v123);
                v128 |= (unint64_t)(v130 & 0x7F) << v126;
                if ((v130 & 0x80) == 0)
                  goto LABEL_368;
                v126 += 7;
                v123 = v129;
                v15 = v127++ > 8;
              }
              while (!v15);
LABEL_318:
              v128 = 0;
              goto LABEL_368;
            }
            v181 = 0;
            v182 = 0;
            v128 = 0;
            if (v124 <= v123)
              v124 = *((_QWORD *)a2 + 1);
            break;
          case 57:
            *(_QWORD *)v8 |= 0x1000000uLL;
            v131 = *((_QWORD *)a2 + 1);
            if (v131 > 0xFFFFFFFFFFFFFFFBLL || v131 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 35) = *(_DWORD *)(*(_QWORD *)a2 + v131);
            goto LABEL_335;
          case 58:
            *(_QWORD *)v8 |= 0x2000000000000000uLL;
            v132 = *((_QWORD *)a2 + 1);
            if (v132 > 0xFFFFFFFFFFFFFFFBLL || v132 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 72) = *(_DWORD *)(*(_QWORD *)a2 + v132);
            goto LABEL_335;
          case 59:
            *(_QWORD *)v8 |= 0x40000000000uLL;
            v133 = *((_QWORD *)a2 + 1);
            if (v133 > 0xFFFFFFFFFFFFFFFBLL || v133 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 53) = *(_DWORD *)(*(_QWORD *)a2 + v133);
            goto LABEL_335;
          case 60:
            *(_QWORD *)v8 |= 0x40000uLL;
            v134 = *((_QWORD *)a2 + 1);
            if (v134 > 0xFFFFFFFFFFFFFFFBLL || v134 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v134);
            goto LABEL_335;
          case 61:
            *(_QWORD *)v8 |= 0x80000000000000uLL;
            v135 = *((_QWORD *)a2 + 1);
            if (v135 > 0xFFFFFFFFFFFFFFFBLL || v135 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 66) = *(_DWORD *)(*(_QWORD *)a2 + v135);
            goto LABEL_335;
          case 62:
            *(_QWORD *)v8 |= 0x1000000000uLL;
            v136 = *((_QWORD *)a2 + 1);
            if (v136 > 0xFFFFFFFFFFFFFFFBLL || v136 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 47) = *(_DWORD *)(*(_QWORD *)a2 + v136);
            goto LABEL_335;
          case 63:
            *(_QWORD *)v8 |= 0x200000uLL;
            v137 = *((_QWORD *)a2 + 1);
            if (v137 > 0xFFFFFFFFFFFFFFFBLL || v137 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 32) = *(_DWORD *)(*(_QWORD *)a2 + v137);
            goto LABEL_335;
          case 64:
            *(_QWORD *)v8 |= 0x400000000000000uLL;
            v138 = *((_QWORD *)a2 + 1);
            if (v138 > 0xFFFFFFFFFFFFFFFBLL || v138 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_251;
            *((_DWORD *)this + 69) = *(_DWORD *)(*(_QWORD *)a2 + v138);
            goto LABEL_335;
          case 65:
            *(_QWORD *)v8 |= 0x8000000000uLL;
            v139 = *((_QWORD *)a2 + 1);
            if (v139 > 0xFFFFFFFFFFFFFFFBLL || v139 + 4 > *((_QWORD *)a2 + 2))
            {
LABEL_251:
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_336;
            }
            *((_DWORD *)this + 50) = *(_DWORD *)(*(_QWORD *)a2 + v139);
            goto LABEL_335;
          default:
            goto LABEL_266;
        }
        while (1)
        {
          if (v124 == v123)
          {
            v128 = 0;
            *((_BYTE *)a2 + 24) = 1;
            goto LABEL_368;
          }
          v183 = v123 + 1;
          v184 = *(_BYTE *)(v125 + v123);
          *((_QWORD *)a2 + 1) = v183;
          v128 |= (unint64_t)(v184 & 0x7F) << v181;
          if ((v184 & 0x80) == 0)
            break;
          v181 += 7;
          v123 = v183;
          v15 = v182++ > 8;
          if (v15)
            goto LABEL_318;
        }
        if (*((_BYTE *)a2 + 24))
          v128 = 0;
LABEL_368:
        *((_QWORD *)this + 5) = v128;
      }
LABEL_336:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)a2 + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        v12 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaPulseResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  uint64_t *v4;
  char v5;
  uint64_t v6;

  v3 = this;
  v4 = (uint64_t *)(this + 316);
  v5 = *(_BYTE *)(this + 324);
  if ((v5 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(_BYTE *)(this + 312), 1u);
    v6 = *v4;
    v5 = *((_BYTE *)v4 + 8);
    if ((v5 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = *v4;
  if ((*(_BYTE *)(this + 324) & 2) != 0)
  {
LABEL_5:
    this = PB::Writer::write(a2, *(float *)(v3 + 304), 2u);
    v6 = *v4;
    v5 = *((_BYTE *)v4 + 8);
  }
LABEL_6:
  if ((v5 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 308), 3u);
    v6 = *v4;
    v5 = *((_BYTE *)v4 + 8);
    if ((*v4 & 0x20) == 0)
    {
LABEL_8:
      if ((v6 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_75;
    }
  }
  else if ((v6 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 48), 4u);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v6 & 1) == 0)
      goto LABEL_10;
    goto LABEL_76;
  }
LABEL_75:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 56), 5u);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 1) == 0)
  {
LABEL_10:
    if ((v6 & 0x8000) == 0)
      goto LABEL_11;
    goto LABEL_77;
  }
LABEL_76:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 8), 6u);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x8000) == 0)
  {
LABEL_11:
    if ((v6 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_78;
  }
LABEL_77:
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 7u);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x80) == 0)
  {
LABEL_12:
    if ((v6 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_79;
  }
LABEL_78:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 64), 8u);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x100) == 0)
  {
LABEL_13:
    if ((v6 & 0x20000) == 0)
      goto LABEL_14;
    goto LABEL_80;
  }
LABEL_79:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 72), 9u);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x20000) == 0)
  {
LABEL_14:
    if ((v6 & 0x10000) == 0)
      goto LABEL_15;
    goto LABEL_81;
  }
LABEL_80:
  this = PB::Writer::write(a2, *(float *)(v3 + 112), 0xAu);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x10000) == 0)
  {
LABEL_15:
    if ((v6 & 0x2000000) == 0)
      goto LABEL_16;
    goto LABEL_82;
  }
LABEL_81:
  this = PB::Writer::write(a2, *(float *)(v3 + 108), 0xBu);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x2000000) == 0)
  {
LABEL_16:
    if ((v6 & 0x200) == 0)
      goto LABEL_17;
    goto LABEL_83;
  }
LABEL_82:
  this = PB::Writer::write(a2, *(float *)(v3 + 144), 0xCu);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x200) == 0)
  {
LABEL_17:
    if ((v6 & 0x400) == 0)
      goto LABEL_18;
    goto LABEL_84;
  }
LABEL_83:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0xDu);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x400) == 0)
  {
LABEL_18:
    if ((v6 & 0x800000) == 0)
      goto LABEL_19;
    goto LABEL_85;
  }
LABEL_84:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 0xEu);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x800000) == 0)
  {
LABEL_19:
    if ((v6 & 0x4000) == 0)
      goto LABEL_20;
    goto LABEL_86;
  }
LABEL_85:
  this = PB::Writer::write(a2, *(float *)(v3 + 136), 0xFu);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x4000) == 0)
  {
LABEL_20:
    if ((v6 & 0x400000) == 0)
      goto LABEL_21;
    goto LABEL_87;
  }
LABEL_86:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 0x10u);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x400000) == 0)
  {
LABEL_21:
    if ((v6 & 0x2000) == 0)
      goto LABEL_22;
    goto LABEL_88;
  }
LABEL_87:
  this = PB::Writer::write(a2, *(float *)(v3 + 132), 0x11u);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x2000) == 0)
  {
LABEL_22:
    if ((v6 & 0x8000000) == 0)
      goto LABEL_23;
    goto LABEL_89;
  }
LABEL_88:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 0x12u);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x8000000) == 0)
  {
LABEL_23:
    if ((v6 & 0x100000) == 0)
      goto LABEL_24;
    goto LABEL_90;
  }
LABEL_89:
  this = PB::Writer::write(a2, *(float *)(v3 + 152), 0x13u);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x100000) == 0)
  {
LABEL_24:
    if ((v6 & 0x1000) == 0)
      goto LABEL_25;
    goto LABEL_91;
  }
LABEL_90:
  this = PB::Writer::write(a2, *(float *)(v3 + 124), 0x14u);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x1000) == 0)
  {
LABEL_25:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_92;
  }
LABEL_91:
  this = PB::Writer::write(a2, *(float *)(v3 + 92), 0x15u);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x80000) == 0)
  {
LABEL_26:
    if ((v6 & 0x800) == 0)
      goto LABEL_27;
    goto LABEL_93;
  }
LABEL_92:
  this = PB::Writer::write(a2, *(float *)(v3 + 120), 0x16u);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x800) == 0)
  {
LABEL_27:
    if ((v6 & 0x4000000) == 0)
      goto LABEL_28;
    goto LABEL_94;
  }
LABEL_93:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 0x17u);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v6 & 0x40000000000000) == 0)
      goto LABEL_29;
    goto LABEL_95;
  }
LABEL_94:
  this = PB::Writer::write(a2, *(float *)(v3 + 148), 0x18u);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x40000000000000) == 0)
  {
LABEL_29:
    if ((v6 & 0x20000000000000) == 0)
      goto LABEL_30;
    goto LABEL_96;
  }
LABEL_95:
  this = PB::Writer::write(a2, *(float *)(v3 + 260), 0x19u);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x20000000000000) == 0)
  {
LABEL_30:
    if ((v6 & 0x4000000000000000) == 0)
      goto LABEL_31;
    goto LABEL_97;
  }
LABEL_96:
  this = PB::Writer::write(a2, *(float *)(v3 + 256), 0x1Au);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x4000000000000000) == 0)
  {
LABEL_31:
    if ((v6 & 0x800000000000) == 0)
      goto LABEL_32;
    goto LABEL_98;
  }
LABEL_97:
  this = PB::Writer::write(a2, *(float *)(v3 + 292), 0x1Bu);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x800000000000) == 0)
  {
LABEL_32:
    if ((v6 & 0x1000000000000) == 0)
      goto LABEL_33;
    goto LABEL_99;
  }
LABEL_98:
  this = PB::Writer::write(a2, *(float *)(v3 + 232), 0x1Cu);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x1000000000000) == 0)
  {
LABEL_33:
    if ((v6 & 0x1000000000000000) == 0)
      goto LABEL_34;
    goto LABEL_100;
  }
LABEL_99:
  this = PB::Writer::write(a2, *(float *)(v3 + 236), 0x1Du);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x1000000000000000) == 0)
  {
LABEL_34:
    if ((v6 & 0x10000000000000) == 0)
      goto LABEL_35;
    goto LABEL_101;
  }
LABEL_100:
  this = PB::Writer::write(a2, *(float *)(v3 + 284), 0x1Eu);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x10000000000000) == 0)
  {
LABEL_35:
    if ((v6 & 0x800000000000000) == 0)
      goto LABEL_36;
    goto LABEL_102;
  }
LABEL_101:
  this = PB::Writer::write(a2, *(float *)(v3 + 252), 0x1Fu);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x800000000000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x8000000000000) == 0)
      goto LABEL_37;
    goto LABEL_103;
  }
LABEL_102:
  this = PB::Writer::write(a2, *(float *)(v3 + 280), 0x20u);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x8000000000000) == 0)
  {
LABEL_37:
    if ((v5 & 1) == 0)
      goto LABEL_38;
    goto LABEL_104;
  }
LABEL_103:
  this = PB::Writer::write(a2, *(float *)(v3 + 248), 0x21u);
  v6 = *v4;
  if ((v4[1] & 1) == 0)
  {
LABEL_38:
    if ((v6 & 0x200000000000000) == 0)
      goto LABEL_39;
    goto LABEL_105;
  }
LABEL_104:
  this = PB::Writer::write(a2, *(float *)(v3 + 300), 0x22u);
  v6 = *v4;
  if ((*v4 & 0x200000000000000) == 0)
  {
LABEL_39:
    if ((v6 & 0x4000000000000) == 0)
      goto LABEL_40;
    goto LABEL_106;
  }
LABEL_105:
  this = PB::Writer::write(a2, *(float *)(v3 + 272), 0x23u);
  v6 = *v4;
  if ((*v4 & 0x4000000000000) == 0)
  {
LABEL_40:
    if ((v6 & 0x100000000000000) == 0)
      goto LABEL_41;
    goto LABEL_107;
  }
LABEL_106:
  this = PB::Writer::write(a2, *(float *)(v3 + 244), 0x24u);
  v6 = *v4;
  if ((*v4 & 0x100000000000000) == 0)
  {
LABEL_41:
    if ((v6 & 0x2000000000000) == 0)
      goto LABEL_42;
    goto LABEL_108;
  }
LABEL_107:
  this = PB::Writer::write(a2, *(float *)(v3 + 268), 0x25u);
  v6 = *v4;
  if ((*v4 & 0x2000000000000) == 0)
  {
LABEL_42:
    if ((v6 & 0x8000000000000000) == 0)
      goto LABEL_43;
    goto LABEL_109;
  }
LABEL_108:
  this = PB::Writer::write(a2, *(float *)(v3 + 240), 0x26u);
  v6 = *v4;
  if ((*v4 & 0x8000000000000000) == 0)
  {
LABEL_43:
    if ((v6 & 0x800000000) == 0)
      goto LABEL_44;
    goto LABEL_110;
  }
LABEL_109:
  this = PB::Writer::write(a2, *(float *)(v3 + 296), 0x27u);
  v6 = *v4;
  if ((*v4 & 0x800000000) == 0)
  {
LABEL_44:
    if ((v6 & 0x400000000) == 0)
      goto LABEL_45;
    goto LABEL_111;
  }
LABEL_110:
  this = PB::Writer::write(a2, *(float *)(v3 + 184), 0x28u);
  v6 = *v4;
  if ((*v4 & 0x400000000) == 0)
  {
LABEL_45:
    if ((v6 & 0x80000000000) == 0)
      goto LABEL_46;
    goto LABEL_112;
  }
LABEL_111:
  this = PB::Writer::write(a2, *(float *)(v3 + 180), 0x29u);
  v6 = *v4;
  if ((*v4 & 0x80000000000) == 0)
  {
LABEL_46:
    if ((v6 & 0x10000000) == 0)
      goto LABEL_47;
    goto LABEL_113;
  }
LABEL_112:
  this = PB::Writer::write(a2, *(float *)(v3 + 216), 0x2Au);
  v6 = *v4;
  if ((*v4 & 0x10000000) == 0)
  {
LABEL_47:
    if ((v6 & 0x20000000) == 0)
      goto LABEL_48;
    goto LABEL_114;
  }
LABEL_113:
  this = PB::Writer::write(a2, *(float *)(v3 + 156), 0x2Bu);
  v6 = *v4;
  if ((*v4 & 0x20000000) == 0)
  {
LABEL_48:
    if ((v6 & 0x20000000000) == 0)
      goto LABEL_49;
    goto LABEL_115;
  }
LABEL_114:
  this = PB::Writer::write(a2, *(float *)(v3 + 160), 0x2Cu);
  v6 = *v4;
  if ((*v4 & 0x20000000000) == 0)
  {
LABEL_49:
    if ((v6 & 0x200000000) == 0)
      goto LABEL_50;
    goto LABEL_116;
  }
LABEL_115:
  this = PB::Writer::write(a2, *(float *)(v3 + 208), 0x2Du);
  v6 = *v4;
  if ((*v4 & 0x200000000) == 0)
  {
LABEL_50:
    if ((v6 & 0x10000000000) == 0)
      goto LABEL_51;
    goto LABEL_117;
  }
LABEL_116:
  this = PB::Writer::write(a2, *(float *)(v3 + 176), 0x2Eu);
  v6 = *v4;
  if ((*v4 & 0x10000000000) == 0)
  {
LABEL_51:
    if ((v6 & 0x100000000) == 0)
      goto LABEL_52;
    goto LABEL_118;
  }
LABEL_117:
  this = PB::Writer::write(a2, *(float *)(v3 + 204), 0x2Fu);
  v6 = *v4;
  if ((*v4 & 0x100000000) == 0)
  {
LABEL_52:
    if ((v6 & 0x200000000000) == 0)
      goto LABEL_53;
    goto LABEL_119;
  }
LABEL_118:
  this = PB::Writer::write(a2, *(float *)(v3 + 172), 0x30u);
  v6 = *v4;
  if ((*v4 & 0x200000000000) == 0)
  {
LABEL_53:
    if ((v6 & 0x4000000000) == 0)
      goto LABEL_54;
    goto LABEL_120;
  }
LABEL_119:
  this = PB::Writer::write(a2, *(float *)(v3 + 224), 0x31u);
  v6 = *v4;
  if ((*v4 & 0x4000000000) == 0)
  {
LABEL_54:
    if ((v6 & 0x80000000) == 0)
      goto LABEL_55;
    goto LABEL_121;
  }
LABEL_120:
  this = PB::Writer::write(a2, *(float *)(v3 + 196), 0x32u);
  v6 = *v4;
  if ((*v4 & 0x80000000) == 0)
  {
LABEL_55:
    if ((v6 & 0x2000000000) == 0)
      goto LABEL_56;
    goto LABEL_122;
  }
LABEL_121:
  this = PB::Writer::write(a2, *(float *)(v3 + 168), 0x33u);
  v6 = *v4;
  if ((*v4 & 0x2000000000) == 0)
  {
LABEL_56:
    if ((v6 & 0x40000000) == 0)
      goto LABEL_57;
    goto LABEL_123;
  }
LABEL_122:
  this = PB::Writer::write(a2, *(float *)(v3 + 192), 0x34u);
  v6 = *v4;
  if ((*v4 & 0x40000000) == 0)
  {
LABEL_57:
    if ((v6 & 0x100000000000) == 0)
      goto LABEL_58;
    goto LABEL_124;
  }
LABEL_123:
  this = PB::Writer::write(a2, *(float *)(v3 + 164), 0x35u);
  v6 = *v4;
  if ((*v4 & 0x100000000000) == 0)
  {
LABEL_58:
    if ((v6 & 8) == 0)
      goto LABEL_59;
    goto LABEL_125;
  }
LABEL_124:
  this = PB::Writer::write(a2, *(float *)(v3 + 220), 0x36u);
  v6 = *v4;
  if ((*v4 & 8) == 0)
  {
LABEL_59:
    if ((v6 & 0x10) == 0)
      goto LABEL_60;
    goto LABEL_126;
  }
LABEL_125:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 32), 0x37u);
  v6 = *v4;
  if ((*v4 & 0x10) == 0)
  {
LABEL_60:
    if ((v6 & 0x1000000) == 0)
      goto LABEL_61;
    goto LABEL_127;
  }
LABEL_126:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 40), 0x38u);
  v6 = *v4;
  if ((*v4 & 0x1000000) == 0)
  {
LABEL_61:
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_62;
    goto LABEL_128;
  }
LABEL_127:
  this = PB::Writer::write(a2, *(float *)(v3 + 140), 0x39u);
  v6 = *v4;
  if ((*v4 & 0x2000000000000000) == 0)
  {
LABEL_62:
    if ((v6 & 0x40000000000) == 0)
      goto LABEL_63;
    goto LABEL_129;
  }
LABEL_128:
  this = PB::Writer::write(a2, *(float *)(v3 + 288), 0x3Au);
  v6 = *v4;
  if ((*v4 & 0x40000000000) == 0)
  {
LABEL_63:
    if ((v6 & 0x40000) == 0)
      goto LABEL_64;
    goto LABEL_130;
  }
LABEL_129:
  this = PB::Writer::write(a2, *(float *)(v3 + 212), 0x3Bu);
  v6 = *v4;
  if ((*v4 & 0x40000) == 0)
  {
LABEL_64:
    if ((v6 & 0x80000000000000) == 0)
      goto LABEL_65;
    goto LABEL_131;
  }
LABEL_130:
  this = PB::Writer::write(a2, *(float *)(v3 + 116), 0x3Cu);
  v6 = *v4;
  if ((*v4 & 0x80000000000000) == 0)
  {
LABEL_65:
    if ((v6 & 0x1000000000) == 0)
      goto LABEL_66;
    goto LABEL_132;
  }
LABEL_131:
  this = PB::Writer::write(a2, *(float *)(v3 + 264), 0x3Du);
  v6 = *v4;
  if ((*v4 & 0x1000000000) == 0)
  {
LABEL_66:
    if ((v6 & 0x200000) == 0)
      goto LABEL_67;
    goto LABEL_133;
  }
LABEL_132:
  this = PB::Writer::write(a2, *(float *)(v3 + 188), 0x3Eu);
  v6 = *v4;
  if ((*v4 & 0x200000) == 0)
  {
LABEL_67:
    if ((v6 & 0x400000000000000) == 0)
      goto LABEL_68;
    goto LABEL_134;
  }
LABEL_133:
  this = PB::Writer::write(a2, *(float *)(v3 + 128), 0x3Fu);
  v6 = *v4;
  if ((*v4 & 0x400000000000000) == 0)
  {
LABEL_68:
    if ((v6 & 0x8000000000) == 0)
      goto LABEL_69;
    goto LABEL_135;
  }
LABEL_134:
  this = PB::Writer::write(a2, *(float *)(v3 + 276), 0x40u);
  v6 = *v4;
  if ((*v4 & 0x8000000000) == 0)
  {
LABEL_69:
    if ((v6 & 2) == 0)
      goto LABEL_70;
    goto LABEL_136;
  }
LABEL_135:
  this = PB::Writer::write(a2, *(float *)(v3 + 200), 0x41u);
  v6 = *v4;
  if ((*v4 & 2) == 0)
  {
LABEL_70:
    if ((v6 & 4) == 0)
      goto LABEL_71;
    goto LABEL_137;
  }
LABEL_136:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 16), 0xC9u);
  v6 = *v4;
  if ((*v4 & 4) == 0)
  {
LABEL_71:
    if ((v6 & 0x400000000000) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 228), 0x12Du);
  }
LABEL_137:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 24), 0xCAu);
  if ((*v4 & 0x400000000000) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 228), 0x12Du);
  return this;
}

uint64_t CMMsl::KappaPulseResult::hash_value(CMMsl::KappaPulseResult *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  float v47;
  uint64_t v48;
  float v49;
  uint64_t v50;
  float v51;
  uint64_t v52;
  float v53;
  uint64_t v54;
  float v55;
  uint64_t v56;
  float v57;
  uint64_t v58;
  float v59;
  uint64_t v60;
  float v61;
  uint64_t v62;
  float v63;
  uint64_t v64;
  float v65;
  uint64_t v66;
  float v67;
  uint64_t v68;
  float v69;
  uint64_t v70;
  float v71;
  uint64_t v72;
  float v73;
  uint64_t v74;
  float v75;
  uint64_t v76;
  float v77;
  uint64_t v78;
  float v79;
  uint64_t v80;
  float v81;
  uint64_t v82;
  float v83;
  uint64_t v84;
  float v85;
  uint64_t v86;
  float v87;
  uint64_t v88;
  float v89;
  uint64_t v90;
  float v91;
  uint64_t v92;
  float v93;
  uint64_t v94;
  float v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  float v99;
  uint64_t v100;
  float v101;
  uint64_t v102;
  float v103;
  uint64_t v104;
  float v105;
  uint64_t v106;
  float v107;
  uint64_t v108;
  float v109;
  uint64_t v110;
  float v111;
  uint64_t v112;
  float v113;
  uint64_t v114;
  float v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  float v119;
  uint64_t v120;
  float v121;
  uint64_t v122;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;

  if ((*((_BYTE *)this + 324) & 8) != 0)
    v1 = *((unsigned __int8 *)this + 312);
  else
    v1 = 0;
  if ((*((_BYTE *)this + 324) & 2) != 0)
  {
    v2 = *((float *)this + 76);
    v3 = LODWORD(v2);
    if (v2 == 0.0)
      v3 = 0;
    v164 = v3;
  }
  else
  {
    v164 = 0;
  }
  v4 = *(_QWORD *)((char *)this + 316);
  if ((*((_BYTE *)this + 324) & 4) != 0)
  {
    v121 = *((float *)this + 77);
    v122 = LODWORD(v121);
    if (v121 == 0.0)
      v122 = 0;
    v163 = v122;
    if ((v4 & 0x20) != 0)
    {
LABEL_11:
      v162 = *((_QWORD *)this + 6);
      if ((v4 & 0x40) != 0)
        goto LABEL_12;
      goto LABEL_204;
    }
  }
  else
  {
    v163 = 0;
    if ((v4 & 0x20) != 0)
      goto LABEL_11;
  }
  v162 = 0;
  if ((v4 & 0x40) != 0)
  {
LABEL_12:
    v161 = *((_QWORD *)this + 7);
    if ((v4 & 1) != 0)
      goto LABEL_13;
    goto LABEL_205;
  }
LABEL_204:
  v161 = 0;
  if ((v4 & 1) != 0)
  {
LABEL_13:
    v160 = *((_QWORD *)this + 1);
    if ((v4 & 0x8000) != 0)
      goto LABEL_14;
LABEL_206:
    v159 = 0;
    if ((v4 & 0x80) != 0)
      goto LABEL_17;
    goto LABEL_207;
  }
LABEL_205:
  v160 = 0;
  if ((v4 & 0x8000) == 0)
    goto LABEL_206;
LABEL_14:
  v5 = *((float *)this + 26);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  v159 = v6;
  if ((v4 & 0x80) != 0)
  {
LABEL_17:
    v158 = *((_QWORD *)this + 8);
    if ((v4 & 0x100) != 0)
      goto LABEL_18;
    goto LABEL_208;
  }
LABEL_207:
  v158 = 0;
  if ((v4 & 0x100) != 0)
  {
LABEL_18:
    v157 = *((_QWORD *)this + 9);
    if ((v4 & 0x20000) != 0)
      goto LABEL_19;
LABEL_209:
    v156 = 0;
    if ((v4 & 0x10000) != 0)
      goto LABEL_22;
LABEL_210:
    v155 = 0;
    if ((v4 & 0x2000000) != 0)
      goto LABEL_25;
LABEL_211:
    v154 = 0;
    if ((v4 & 0x200) != 0)
      goto LABEL_28;
LABEL_212:
    v153 = 0;
    if ((v4 & 0x400) != 0)
      goto LABEL_31;
LABEL_213:
    v152 = 0;
    if ((v4 & 0x800000) != 0)
      goto LABEL_34;
LABEL_214:
    v151 = 0;
    if ((v4 & 0x4000) != 0)
      goto LABEL_37;
LABEL_215:
    v150 = 0;
    if ((v4 & 0x400000) != 0)
      goto LABEL_40;
LABEL_216:
    v149 = 0;
    if ((v4 & 0x2000) != 0)
      goto LABEL_43;
LABEL_217:
    v148 = 0;
    if ((v4 & 0x8000000) != 0)
      goto LABEL_46;
LABEL_218:
    v147 = 0;
    if ((v4 & 0x100000) != 0)
      goto LABEL_49;
LABEL_219:
    v146 = 0;
    if ((v4 & 0x1000) != 0)
      goto LABEL_52;
LABEL_220:
    v145 = 0;
    if ((v4 & 0x80000) != 0)
      goto LABEL_55;
LABEL_221:
    v144 = 0;
    if ((v4 & 0x800) != 0)
      goto LABEL_58;
LABEL_222:
    v143 = 0;
    if ((v4 & 0x4000000) != 0)
      goto LABEL_61;
LABEL_223:
    v142 = 0;
    if ((v4 & 0x40000000000000) != 0)
      goto LABEL_64;
LABEL_224:
    v141 = 0;
    if ((v4 & 0x20000000000000) != 0)
      goto LABEL_67;
LABEL_225:
    v140 = 0;
    if ((v4 & 0x4000000000000000) != 0)
      goto LABEL_70;
LABEL_226:
    v139 = 0;
    if ((v4 & 0x800000000000) != 0)
      goto LABEL_73;
LABEL_227:
    v138 = 0;
    if ((v4 & 0x1000000000000) != 0)
      goto LABEL_76;
LABEL_228:
    v137 = 0;
    if ((v4 & 0x1000000000000000) != 0)
      goto LABEL_79;
LABEL_229:
    v136 = 0;
    if ((v4 & 0x10000000000000) != 0)
      goto LABEL_82;
LABEL_230:
    v135 = 0;
    if ((v4 & 0x800000000000000) != 0)
      goto LABEL_85;
LABEL_231:
    v134 = 0;
    if ((v4 & 0x8000000000000) != 0)
      goto LABEL_88;
LABEL_232:
    v133 = 0;
    if ((*((_BYTE *)this + 324) & 1) != 0)
      goto LABEL_91;
LABEL_233:
    v132 = 0;
    if ((v4 & 0x200000000000000) != 0)
      goto LABEL_94;
LABEL_234:
    v131 = 0;
    if ((v4 & 0x4000000000000) != 0)
      goto LABEL_97;
LABEL_235:
    v130 = 0;
    if ((v4 & 0x100000000000000) != 0)
      goto LABEL_100;
LABEL_236:
    v129 = 0;
    if ((v4 & 0x2000000000000) != 0)
      goto LABEL_103;
LABEL_237:
    v128 = 0;
    if (v4 < 0)
      goto LABEL_106;
LABEL_238:
    v127 = 0;
    if ((v4 & 0x800000000) != 0)
      goto LABEL_109;
LABEL_239:
    v126 = 0;
    if ((v4 & 0x400000000) != 0)
      goto LABEL_112;
LABEL_240:
    v125 = 0;
    if ((v4 & 0x80000000000) != 0)
      goto LABEL_115;
LABEL_241:
    v124 = 0;
    if ((v4 & 0x10000000) != 0)
      goto LABEL_118;
LABEL_242:
    v74 = 0;
    if ((v4 & 0x20000000) != 0)
      goto LABEL_122;
LABEL_243:
    v76 = 0;
    if ((v4 & 0x20000000000) != 0)
      goto LABEL_126;
LABEL_244:
    v78 = 0;
    if ((v4 & 0x200000000) != 0)
      goto LABEL_130;
LABEL_245:
    v80 = 0;
    if ((v4 & 0x10000000000) != 0)
      goto LABEL_134;
LABEL_246:
    v82 = 0;
    if ((v4 & 0x100000000) != 0)
      goto LABEL_138;
LABEL_247:
    v84 = 0;
    if ((v4 & 0x200000000000) != 0)
      goto LABEL_142;
LABEL_248:
    v86 = 0;
    if ((v4 & 0x4000000000) != 0)
      goto LABEL_146;
LABEL_249:
    v88 = 0;
    if ((v4 & 0x80000000) != 0)
      goto LABEL_150;
LABEL_250:
    v90 = 0;
    if ((v4 & 0x2000000000) != 0)
      goto LABEL_154;
LABEL_251:
    v92 = 0;
    if ((v4 & 0x40000000) != 0)
      goto LABEL_158;
LABEL_252:
    v94 = 0;
    if ((v4 & 0x100000000000) != 0)
      goto LABEL_162;
LABEL_253:
    v96 = 0;
    if ((v4 & 8) != 0)
      goto LABEL_166;
    goto LABEL_254;
  }
LABEL_208:
  v157 = 0;
  if ((v4 & 0x20000) == 0)
    goto LABEL_209;
LABEL_19:
  v7 = *((float *)this + 28);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  v156 = v8;
  if ((v4 & 0x10000) == 0)
    goto LABEL_210;
LABEL_22:
  v9 = *((float *)this + 27);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  v155 = v10;
  if ((v4 & 0x2000000) == 0)
    goto LABEL_211;
LABEL_25:
  v11 = *((float *)this + 36);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  v154 = v12;
  if ((v4 & 0x200) == 0)
    goto LABEL_212;
LABEL_28:
  v13 = *((float *)this + 20);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  v153 = v14;
  if ((v4 & 0x400) == 0)
    goto LABEL_213;
LABEL_31:
  v15 = *((float *)this + 21);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  v152 = v16;
  if ((v4 & 0x800000) == 0)
    goto LABEL_214;
LABEL_34:
  v17 = *((float *)this + 34);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  v151 = v18;
  if ((v4 & 0x4000) == 0)
    goto LABEL_215;
LABEL_37:
  v19 = *((float *)this + 25);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  v150 = v20;
  if ((v4 & 0x400000) == 0)
    goto LABEL_216;
LABEL_40:
  v21 = *((float *)this + 33);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  v149 = v22;
  if ((v4 & 0x2000) == 0)
    goto LABEL_217;
LABEL_43:
  v23 = *((float *)this + 24);
  v24 = LODWORD(v23);
  if (v23 == 0.0)
    v24 = 0;
  v148 = v24;
  if ((v4 & 0x8000000) == 0)
    goto LABEL_218;
LABEL_46:
  v25 = *((float *)this + 38);
  v26 = LODWORD(v25);
  if (v25 == 0.0)
    v26 = 0;
  v147 = v26;
  if ((v4 & 0x100000) == 0)
    goto LABEL_219;
LABEL_49:
  v27 = *((float *)this + 31);
  v28 = LODWORD(v27);
  if (v27 == 0.0)
    v28 = 0;
  v146 = v28;
  if ((v4 & 0x1000) == 0)
    goto LABEL_220;
LABEL_52:
  v29 = *((float *)this + 23);
  v30 = LODWORD(v29);
  if (v29 == 0.0)
    v30 = 0;
  v145 = v30;
  if ((v4 & 0x80000) == 0)
    goto LABEL_221;
LABEL_55:
  v31 = *((float *)this + 30);
  v32 = LODWORD(v31);
  if (v31 == 0.0)
    v32 = 0;
  v144 = v32;
  if ((v4 & 0x800) == 0)
    goto LABEL_222;
LABEL_58:
  v33 = *((float *)this + 22);
  v34 = LODWORD(v33);
  if (v33 == 0.0)
    v34 = 0;
  v143 = v34;
  if ((v4 & 0x4000000) == 0)
    goto LABEL_223;
LABEL_61:
  v35 = *((float *)this + 37);
  v36 = LODWORD(v35);
  if (v35 == 0.0)
    v36 = 0;
  v142 = v36;
  if ((v4 & 0x40000000000000) == 0)
    goto LABEL_224;
LABEL_64:
  v37 = *((float *)this + 65);
  v38 = LODWORD(v37);
  if (v37 == 0.0)
    v38 = 0;
  v141 = v38;
  if ((v4 & 0x20000000000000) == 0)
    goto LABEL_225;
LABEL_67:
  v39 = *((float *)this + 64);
  v40 = LODWORD(v39);
  if (v39 == 0.0)
    v40 = 0;
  v140 = v40;
  if ((v4 & 0x4000000000000000) == 0)
    goto LABEL_226;
LABEL_70:
  v41 = *((float *)this + 73);
  v42 = LODWORD(v41);
  if (v41 == 0.0)
    v42 = 0;
  v139 = v42;
  if ((v4 & 0x800000000000) == 0)
    goto LABEL_227;
LABEL_73:
  v43 = *((float *)this + 58);
  v44 = LODWORD(v43);
  if (v43 == 0.0)
    v44 = 0;
  v138 = v44;
  if ((v4 & 0x1000000000000) == 0)
    goto LABEL_228;
LABEL_76:
  v45 = *((float *)this + 59);
  v46 = LODWORD(v45);
  if (v45 == 0.0)
    v46 = 0;
  v137 = v46;
  if ((v4 & 0x1000000000000000) == 0)
    goto LABEL_229;
LABEL_79:
  v47 = *((float *)this + 71);
  v48 = LODWORD(v47);
  if (v47 == 0.0)
    v48 = 0;
  v136 = v48;
  if ((v4 & 0x10000000000000) == 0)
    goto LABEL_230;
LABEL_82:
  v49 = *((float *)this + 63);
  v50 = LODWORD(v49);
  if (v49 == 0.0)
    v50 = 0;
  v135 = v50;
  if ((v4 & 0x800000000000000) == 0)
    goto LABEL_231;
LABEL_85:
  v51 = *((float *)this + 70);
  v52 = LODWORD(v51);
  if (v51 == 0.0)
    v52 = 0;
  v134 = v52;
  if ((v4 & 0x8000000000000) == 0)
    goto LABEL_232;
LABEL_88:
  v53 = *((float *)this + 62);
  v54 = LODWORD(v53);
  if (v53 == 0.0)
    v54 = 0;
  v133 = v54;
  if ((*((_BYTE *)this + 324) & 1) == 0)
    goto LABEL_233;
LABEL_91:
  v55 = *((float *)this + 75);
  v56 = LODWORD(v55);
  if (v55 == 0.0)
    v56 = 0;
  v132 = v56;
  if ((v4 & 0x200000000000000) == 0)
    goto LABEL_234;
LABEL_94:
  v57 = *((float *)this + 68);
  v58 = LODWORD(v57);
  if (v57 == 0.0)
    v58 = 0;
  v131 = v58;
  if ((v4 & 0x4000000000000) == 0)
    goto LABEL_235;
LABEL_97:
  v59 = *((float *)this + 61);
  v60 = LODWORD(v59);
  if (v59 == 0.0)
    v60 = 0;
  v130 = v60;
  if ((v4 & 0x100000000000000) == 0)
    goto LABEL_236;
LABEL_100:
  v61 = *((float *)this + 67);
  v62 = LODWORD(v61);
  if (v61 == 0.0)
    v62 = 0;
  v129 = v62;
  if ((v4 & 0x2000000000000) == 0)
    goto LABEL_237;
LABEL_103:
  v63 = *((float *)this + 60);
  v64 = LODWORD(v63);
  if (v63 == 0.0)
    v64 = 0;
  v128 = v64;
  if ((v4 & 0x8000000000000000) == 0)
    goto LABEL_238;
LABEL_106:
  v65 = *((float *)this + 74);
  v66 = LODWORD(v65);
  if (v65 == 0.0)
    v66 = 0;
  v127 = v66;
  if ((v4 & 0x800000000) == 0)
    goto LABEL_239;
LABEL_109:
  v67 = *((float *)this + 46);
  v68 = LODWORD(v67);
  if (v67 == 0.0)
    v68 = 0;
  v126 = v68;
  if ((v4 & 0x400000000) == 0)
    goto LABEL_240;
LABEL_112:
  v69 = *((float *)this + 45);
  v70 = LODWORD(v69);
  if (v69 == 0.0)
    v70 = 0;
  v125 = v70;
  if ((v4 & 0x80000000000) == 0)
    goto LABEL_241;
LABEL_115:
  v71 = *((float *)this + 54);
  v72 = LODWORD(v71);
  if (v71 == 0.0)
    v72 = 0;
  v124 = v72;
  if ((v4 & 0x10000000) == 0)
    goto LABEL_242;
LABEL_118:
  v73 = *((float *)this + 39);
  if (v73 == 0.0)
    v74 = 0;
  else
    v74 = LODWORD(v73);
  if ((v4 & 0x20000000) == 0)
    goto LABEL_243;
LABEL_122:
  v75 = *((float *)this + 40);
  if (v75 == 0.0)
    v76 = 0;
  else
    v76 = LODWORD(v75);
  if ((v4 & 0x20000000000) == 0)
    goto LABEL_244;
LABEL_126:
  v77 = *((float *)this + 52);
  if (v77 == 0.0)
    v78 = 0;
  else
    v78 = LODWORD(v77);
  if ((v4 & 0x200000000) == 0)
    goto LABEL_245;
LABEL_130:
  v79 = *((float *)this + 44);
  if (v79 == 0.0)
    v80 = 0;
  else
    v80 = LODWORD(v79);
  if ((v4 & 0x10000000000) == 0)
    goto LABEL_246;
LABEL_134:
  v81 = *((float *)this + 51);
  if (v81 == 0.0)
    v82 = 0;
  else
    v82 = LODWORD(v81);
  if ((v4 & 0x100000000) == 0)
    goto LABEL_247;
LABEL_138:
  v83 = *((float *)this + 43);
  if (v83 == 0.0)
    v84 = 0;
  else
    v84 = LODWORD(v83);
  if ((v4 & 0x200000000000) == 0)
    goto LABEL_248;
LABEL_142:
  v85 = *((float *)this + 56);
  if (v85 == 0.0)
    v86 = 0;
  else
    v86 = LODWORD(v85);
  if ((v4 & 0x4000000000) == 0)
    goto LABEL_249;
LABEL_146:
  v87 = *((float *)this + 49);
  if (v87 == 0.0)
    v88 = 0;
  else
    v88 = LODWORD(v87);
  if ((v4 & 0x80000000) == 0)
    goto LABEL_250;
LABEL_150:
  v89 = *((float *)this + 42);
  if (v89 == 0.0)
    v90 = 0;
  else
    v90 = LODWORD(v89);
  if ((v4 & 0x2000000000) == 0)
    goto LABEL_251;
LABEL_154:
  v91 = *((float *)this + 48);
  if (v91 == 0.0)
    v92 = 0;
  else
    v92 = LODWORD(v91);
  if ((v4 & 0x40000000) == 0)
    goto LABEL_252;
LABEL_158:
  v93 = *((float *)this + 41);
  if (v93 == 0.0)
    v94 = 0;
  else
    v94 = LODWORD(v93);
  if ((v4 & 0x100000000000) == 0)
    goto LABEL_253;
LABEL_162:
  v95 = *((float *)this + 55);
  if (v95 == 0.0)
    v96 = 0;
  else
    v96 = LODWORD(v95);
  if ((v4 & 8) != 0)
  {
LABEL_166:
    v97 = *((_QWORD *)this + 4);
    if ((v4 & 0x10) != 0)
      goto LABEL_167;
    goto LABEL_255;
  }
LABEL_254:
  v97 = 0;
  if ((v4 & 0x10) != 0)
  {
LABEL_167:
    v98 = *((_QWORD *)this + 5);
    if ((v4 & 0x1000000) != 0)
      goto LABEL_168;
LABEL_256:
    v100 = 0;
    if ((v4 & 0x2000000000000000) != 0)
      goto LABEL_171;
LABEL_257:
    v102 = 0;
    if ((v4 & 0x40000000000) != 0)
      goto LABEL_174;
LABEL_258:
    v104 = 0;
    if ((v4 & 0x40000) != 0)
      goto LABEL_177;
LABEL_259:
    v106 = 0;
    if ((v4 & 0x80000000000000) != 0)
      goto LABEL_180;
LABEL_260:
    v108 = 0;
    if ((v4 & 0x1000000000) != 0)
      goto LABEL_183;
LABEL_261:
    v110 = 0;
    if ((v4 & 0x200000) != 0)
      goto LABEL_186;
LABEL_262:
    v112 = 0;
    if ((v4 & 0x400000000000000) != 0)
      goto LABEL_189;
LABEL_263:
    v114 = 0;
    if ((v4 & 0x8000000000) != 0)
      goto LABEL_192;
LABEL_264:
    v116 = 0;
    if ((v4 & 2) != 0)
      goto LABEL_195;
    goto LABEL_265;
  }
LABEL_255:
  v98 = 0;
  if ((v4 & 0x1000000) == 0)
    goto LABEL_256;
LABEL_168:
  v99 = *((float *)this + 35);
  v100 = LODWORD(v99);
  if (v99 == 0.0)
    v100 = 0;
  if ((v4 & 0x2000000000000000) == 0)
    goto LABEL_257;
LABEL_171:
  v101 = *((float *)this + 72);
  v102 = LODWORD(v101);
  if (v101 == 0.0)
    v102 = 0;
  if ((v4 & 0x40000000000) == 0)
    goto LABEL_258;
LABEL_174:
  v103 = *((float *)this + 53);
  v104 = LODWORD(v103);
  if (v103 == 0.0)
    v104 = 0;
  if ((v4 & 0x40000) == 0)
    goto LABEL_259;
LABEL_177:
  v105 = *((float *)this + 29);
  v106 = LODWORD(v105);
  if (v105 == 0.0)
    v106 = 0;
  if ((v4 & 0x80000000000000) == 0)
    goto LABEL_260;
LABEL_180:
  v107 = *((float *)this + 66);
  v108 = LODWORD(v107);
  if (v107 == 0.0)
    v108 = 0;
  if ((v4 & 0x1000000000) == 0)
    goto LABEL_261;
LABEL_183:
  v109 = *((float *)this + 47);
  v110 = LODWORD(v109);
  if (v109 == 0.0)
    v110 = 0;
  if ((v4 & 0x200000) == 0)
    goto LABEL_262;
LABEL_186:
  v111 = *((float *)this + 32);
  v112 = LODWORD(v111);
  if (v111 == 0.0)
    v112 = 0;
  if ((v4 & 0x400000000000000) == 0)
    goto LABEL_263;
LABEL_189:
  v113 = *((float *)this + 69);
  v114 = LODWORD(v113);
  if (v113 == 0.0)
    v114 = 0;
  if ((v4 & 0x8000000000) == 0)
    goto LABEL_264;
LABEL_192:
  v115 = *((float *)this + 50);
  v116 = LODWORD(v115);
  if (v115 == 0.0)
    v116 = 0;
  if ((v4 & 2) != 0)
  {
LABEL_195:
    v117 = *((_QWORD *)this + 2);
    if ((v4 & 4) != 0)
      goto LABEL_196;
    goto LABEL_266;
  }
LABEL_265:
  v117 = 0;
  if ((v4 & 4) != 0)
  {
LABEL_196:
    v118 = *((_QWORD *)this + 3);
    if ((v4 & 0x400000000000) != 0)
      goto LABEL_197;
LABEL_267:
    v120 = 0;
    return v164 ^ v1 ^ v163 ^ v162 ^ v161 ^ v160 ^ v159 ^ v158 ^ v157 ^ v156 ^ v155 ^ v154 ^ v153 ^ v152 ^ v151 ^ v150 ^ v149 ^ v148 ^ v147 ^ v146 ^ v145 ^ v144 ^ v143 ^ v142 ^ v141 ^ v140 ^ v139 ^ v138 ^ v137 ^ v136 ^ v135 ^ v134 ^ v133 ^ v132 ^ v131 ^ v130 ^ v129 ^ v128 ^ v127 ^ v126 ^ v125 ^ v124 ^ v74 ^ v76 ^ v78 ^ v80 ^ v82 ^ v84 ^ v86 ^ v88 ^ v90 ^ v92 ^ v94 ^ v96 ^ v97 ^ v98 ^ v100 ^ v102 ^ v104 ^ v106 ^ v108 ^ v110 ^ v112 ^ v114 ^ v116 ^ v117 ^ v118 ^ v120;
  }
LABEL_266:
  v118 = 0;
  if ((v4 & 0x400000000000) == 0)
    goto LABEL_267;
LABEL_197:
  v119 = *((float *)this + 57);
  v120 = LODWORD(v119);
  if (v119 == 0.0)
    v120 = 0;
  return v164 ^ v1 ^ v163 ^ v162 ^ v161 ^ v160 ^ v159 ^ v158 ^ v157 ^ v156 ^ v155 ^ v154 ^ v153 ^ v152 ^ v151 ^ v150 ^ v149 ^ v148 ^ v147 ^ v146 ^ v145 ^ v144 ^ v143 ^ v142 ^ v141 ^ v140 ^ v139 ^ v138 ^ v137 ^ v136 ^ v135 ^ v134 ^ v133 ^ v132 ^ v131 ^ v130 ^ v129 ^ v128 ^ v127 ^ v126 ^ v125 ^ v124 ^ v74 ^ v76 ^ v78 ^ v80 ^ v82 ^ v84 ^ v86 ^ v88 ^ v90 ^ v92 ^ v94 ^ v96 ^ v97 ^ v98 ^ v100 ^ v102 ^ v104 ^ v106 ^ v108 ^ v110 ^ v112 ^ v114 ^ v116 ^ v117 ^ v118 ^ v120;
}

void CMMsl::KappaQuiescenceResult::~KappaQuiescenceResult(CMMsl::KappaQuiescenceResult *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::KappaQuiescenceResult::KappaQuiescenceResult(uint64_t this, const CMMsl::KappaQuiescenceResult *a2)
{
  char v2;
  char v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;

  *(_QWORD *)this = off_100352278;
  *(_DWORD *)(this + 28) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *((_DWORD *)a2 + 2);
    v3 = 1;
    *(_BYTE *)(this + 28) = 1;
    *(_DWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 8) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 5);
    v3 |= 8u;
    *(_BYTE *)(this + 28) = v3;
    *(_DWORD *)(this + 20) = v5;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    v6 = *((_DWORD *)a2 + 6);
    v3 |= 0x10u;
    *(_BYTE *)(this + 28) = v3;
    *(_DWORD *)(this + 24) = v6;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        return this;
LABEL_12:
      v8 = *((_DWORD *)a2 + 4);
      *(_BYTE *)(this + 28) = v3 | 4;
      *(_DWORD *)(this + 16) = v8;
      return this;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 3);
  v3 |= 2u;
  *(_BYTE *)(this + 28) = v3;
  *(_DWORD *)(this + 12) = v7;
  if ((*((_BYTE *)a2 + 28) & 4) != 0)
    goto LABEL_12;
  return this;
}

uint64_t CMMsl::KappaQuiescenceResult::operator=(uint64_t a1, const CMMsl::KappaQuiescenceResult *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;

  if ((const CMMsl::KappaQuiescenceResult *)a1 != a2)
  {
    CMMsl::KappaQuiescenceResult::KappaQuiescenceResult((uint64_t)&v8, a2);
    v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v11;
    v11 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v12;
    v12 = v4;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v9 = v5;
    v6 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v10;
    v10 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaQuiescenceResult *a2, CMMsl::KappaQuiescenceResult *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  float result;
  int v8;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  v5 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v5;
  v6 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v6;
  result = *((float *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((float *)a2 + 3) = result;
  v8 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v8;
  return result;
}

float CMMsl::KappaQuiescenceResult::KappaQuiescenceResult(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100352278;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_100352278;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::KappaQuiescenceResult::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD v10[2];
  int v11;
  int v12;
  uint64_t v13;

  if (a1 != a2)
  {
    v10[0] = off_100352278;
    v3 = *(_DWORD *)(a2 + 20);
    v4 = *(_DWORD *)(a2 + 16);
    v5 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 28) = 0;
    v12 = *(_DWORD *)(a1 + 20);
    v13 = *(_QWORD *)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 20) = v3;
    *(_QWORD *)(a1 + 24) = v5;
    *(_QWORD *)(a1 + 8) = v7;
    v10[1] = v6;
    v8 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v4;
    v11 = v8;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::KappaQuiescenceResult::formatText(CMMsl::KappaQuiescenceResult *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "configThreshold1", *((float *)this + 2));
    v5 = *((_BYTE *)this + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "debugX", *((float *)this + 3));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "outputA", *((float *)this + 5));
    if ((*((_BYTE *)this + 28) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "debugY", *((_DWORD *)this + 4));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 8) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "outputB", *((_DWORD *)this + 6));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaQuiescenceResult::readFrom(CMMsl::KappaQuiescenceResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 0x186A0u:
              *((_BYTE *)this + 28) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_39;
              *((_DWORD *)this + 2) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_62;
            case 0x186A1u:
              *((_BYTE *)this + 28) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_39;
              *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_62;
            case 0x186A2u:
              *((_BYTE *)this + 28) |= 0x10u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v33 = 0;
                v34 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_67;
                  }
                  v35 = v21++;
                  v36 = *(_BYTE *)(v22 + v35);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0)
                    break;
                  v33 += 7;
                  v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_66:
                    v2 = v35 + 1;
                    goto LABEL_67;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_66;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_67;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_67:
              *((_DWORD *)this + 6) = v25;
              goto LABEL_73;
            case 0x186A3u:
              *((_BYTE *)this + 28) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 3) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_62:
                v2 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_39:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_73;
            case 0x186A4u:
              *((_BYTE *)this + 28) |= 4u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_72;
                  }
                  v39 = v27++;
                  v40 = *(_BYTE *)(v28 + v39);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_71:
                    v2 = v39 + 1;
                    goto LABEL_72;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_71;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_72;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_72:
              *((_DWORD *)this + 4) = v31;
LABEL_73:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_73;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaQuiescenceResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 8), 0x186A0u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 0x186A1u);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 0x186A2u);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 0x186A4u);
  }
LABEL_10:
  this = PB::Writer::write(a2, *(float *)(v3 + 12), 0x186A3u);
  if ((*(_BYTE *)(v3 + 28) & 4) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 0x186A4u);
  return this;
}

uint64_t CMMsl::KappaQuiescenceResult::hash_value(CMMsl::KappaQuiescenceResult *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  float v8;

  if ((*((_BYTE *)this + 28) & 1) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 28) & 8) != 0)
      goto LABEL_3;
LABEL_14:
    v3 = 0;
    if ((*((_BYTE *)this + 28) & 0x10) != 0)
      goto LABEL_6;
    goto LABEL_15;
  }
  v8 = *((float *)this + 2);
  v1 = LODWORD(v8);
  if (v8 == 0.0)
    v1 = 0;
  if ((*((_BYTE *)this + 28) & 8) == 0)
    goto LABEL_14;
LABEL_3:
  v2 = *((float *)this + 5);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 28) & 0x10) != 0)
  {
LABEL_6:
    v4 = *((int *)this + 6);
    if ((*((_BYTE *)this + 28) & 2) != 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  v4 = 0;
  if ((*((_BYTE *)this + 28) & 2) != 0)
  {
LABEL_7:
    v5 = *((float *)this + 3);
    v6 = LODWORD(v5);
    if (v5 == 0.0)
      v6 = 0;
    if ((*((_BYTE *)this + 28) & 4) != 0)
      goto LABEL_10;
LABEL_17:
    v7 = 0;
    return v3 ^ v1 ^ v4 ^ v6 ^ v7;
  }
LABEL_16:
  v6 = 0;
  if ((*((_BYTE *)this + 28) & 4) == 0)
    goto LABEL_17;
LABEL_10:
  v7 = *((int *)this + 4);
  return v3 ^ v1 ^ v4 ^ v6 ^ v7;
}

void CMMsl::KappaRecoveryResult::~KappaRecoveryResult(CMMsl::KappaRecoveryResult *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::KappaRecoveryResult::KappaRecoveryResult(uint64_t this, const CMMsl::KappaRecoveryResult *a2)
{
  char v2;
  char v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;

  *(_QWORD *)this = off_1003522B0;
  *(_DWORD *)(this + 28) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *((_DWORD *)a2 + 2);
    v3 = 1;
    *(_BYTE *)(this + 28) = 1;
    *(_DWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 8) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 5);
    v3 |= 8u;
    *(_BYTE *)(this + 28) = v3;
    *(_DWORD *)(this + 20) = v5;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    v6 = *((_DWORD *)a2 + 6);
    v3 |= 0x10u;
    *(_BYTE *)(this + 28) = v3;
    *(_DWORD *)(this + 24) = v6;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        return this;
LABEL_12:
      v8 = *((_DWORD *)a2 + 4);
      *(_BYTE *)(this + 28) = v3 | 4;
      *(_DWORD *)(this + 16) = v8;
      return this;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 3);
  v3 |= 2u;
  *(_BYTE *)(this + 28) = v3;
  *(_DWORD *)(this + 12) = v7;
  if ((*((_BYTE *)a2 + 28) & 4) != 0)
    goto LABEL_12;
  return this;
}

uint64_t CMMsl::KappaRecoveryResult::operator=(uint64_t a1, const CMMsl::KappaRecoveryResult *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;

  if ((const CMMsl::KappaRecoveryResult *)a1 != a2)
  {
    CMMsl::KappaRecoveryResult::KappaRecoveryResult((uint64_t)&v8, a2);
    v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v11;
    v11 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v12;
    v12 = v4;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v9 = v5;
    v6 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v10;
    v10 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaRecoveryResult *a2, CMMsl::KappaRecoveryResult *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  float result;
  int v8;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  v5 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v5;
  v6 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v6;
  result = *((float *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((float *)a2 + 3) = result;
  v8 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v8;
  return result;
}

float CMMsl::KappaRecoveryResult::KappaRecoveryResult(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_1003522B0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_1003522B0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::KappaRecoveryResult::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD v10[2];
  int v11;
  int v12;
  uint64_t v13;

  if (a1 != a2)
  {
    v10[0] = off_1003522B0;
    v3 = *(_DWORD *)(a2 + 20);
    v4 = *(_DWORD *)(a2 + 16);
    v5 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 28) = 0;
    v12 = *(_DWORD *)(a1 + 20);
    v13 = *(_QWORD *)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 20) = v3;
    *(_QWORD *)(a1 + 24) = v5;
    *(_QWORD *)(a1 + 8) = v7;
    v10[1] = v6;
    v8 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v4;
    v11 = v8;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::KappaRecoveryResult::formatText(CMMsl::KappaRecoveryResult *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "configThreshold1", *((float *)this + 2));
    v5 = *((_BYTE *)this + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "debugX", *((float *)this + 3));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "outputA", *((float *)this + 5));
    if ((*((_BYTE *)this + 28) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "debugY", *((_DWORD *)this + 4));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 8) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "outputB", *((_DWORD *)this + 6));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaRecoveryResult::readFrom(CMMsl::KappaRecoveryResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 0x186A0u:
              *((_BYTE *)this + 28) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_39;
              *((_DWORD *)this + 2) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_62;
            case 0x186A1u:
              *((_BYTE *)this + 28) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_39;
              *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_62;
            case 0x186A2u:
              *((_BYTE *)this + 28) |= 0x10u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v33 = 0;
                v34 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_67;
                  }
                  v35 = v21++;
                  v36 = *(_BYTE *)(v22 + v35);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0)
                    break;
                  v33 += 7;
                  v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_66:
                    v2 = v35 + 1;
                    goto LABEL_67;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_66;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_67;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_67:
              *((_DWORD *)this + 6) = v25;
              goto LABEL_73;
            case 0x186A3u:
              *((_BYTE *)this + 28) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 3) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_62:
                v2 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_39:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_73;
            case 0x186A4u:
              *((_BYTE *)this + 28) |= 4u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_72;
                  }
                  v39 = v27++;
                  v40 = *(_BYTE *)(v28 + v39);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_71:
                    v2 = v39 + 1;
                    goto LABEL_72;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_71;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_72;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_72:
              *((_DWORD *)this + 4) = v31;
LABEL_73:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_73;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaRecoveryResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 8), 0x186A0u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 0x186A1u);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 0x186A2u);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 0x186A4u);
  }
LABEL_10:
  this = PB::Writer::write(a2, *(float *)(v3 + 12), 0x186A3u);
  if ((*(_BYTE *)(v3 + 28) & 4) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 0x186A4u);
  return this;
}

uint64_t CMMsl::KappaRecoveryResult::hash_value(CMMsl::KappaRecoveryResult *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  float v8;

  if ((*((_BYTE *)this + 28) & 1) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 28) & 8) != 0)
      goto LABEL_3;
LABEL_14:
    v3 = 0;
    if ((*((_BYTE *)this + 28) & 0x10) != 0)
      goto LABEL_6;
    goto LABEL_15;
  }
  v8 = *((float *)this + 2);
  v1 = LODWORD(v8);
  if (v8 == 0.0)
    v1 = 0;
  if ((*((_BYTE *)this + 28) & 8) == 0)
    goto LABEL_14;
LABEL_3:
  v2 = *((float *)this + 5);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 28) & 0x10) != 0)
  {
LABEL_6:
    v4 = *((int *)this + 6);
    if ((*((_BYTE *)this + 28) & 2) != 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  v4 = 0;
  if ((*((_BYTE *)this + 28) & 2) != 0)
  {
LABEL_7:
    v5 = *((float *)this + 3);
    v6 = LODWORD(v5);
    if (v5 == 0.0)
      v6 = 0;
    if ((*((_BYTE *)this + 28) & 4) != 0)
      goto LABEL_10;
LABEL_17:
    v7 = 0;
    return v3 ^ v1 ^ v4 ^ v6 ^ v7;
  }
LABEL_16:
  v6 = 0;
  if ((*((_BYTE *)this + 28) & 4) == 0)
    goto LABEL_17;
LABEL_10:
  v7 = *((int *)this + 4);
  return v3 ^ v1 ^ v4 ^ v6 ^ v7;
}

void CMMsl::KappaRemoteAudioResult::~KappaRemoteAudioResult(CMMsl::KappaRemoteAudioResult *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::KappaRemoteAudioResult::KappaRemoteAudioResult(uint64_t this, const CMMsl::KappaRemoteAudioResult *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  char v8;
  int v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  char v17;
  char v18;
  char v19;
  unint64_t v20;
  char v21;
  char v22;
  char v23;
  unint64_t v24;
  int v25;
  int v26;
  int v27;
  char v28;
  char v29;
  char v30;
  unint64_t v31;
  char v32;
  char v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  char v41;
  char v42;
  char v43;
  unint64_t v44;
  char v45;
  char v46;
  char v47;
  unint64_t v48;
  int v49;
  int v50;
  int v51;
  char v52;
  char v53;
  char v54;
  unint64_t v55;
  char v56;
  char v57;
  char v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  char v65;
  char v66;
  char v67;
  unint64_t v68;
  char v69;
  char v70;
  char v71;
  unint64_t v72;
  int v73;
  int v74;
  int v75;
  char v76;
  unint64_t v77;
  char v78;
  char v79;
  char v80;
  char v81;
  char v82;
  unint64_t v83;
  int v84;
  int v85;
  int v86;
  char v87;
  char v88;
  char v89;
  unint64_t v90;
  char v91;
  char v92;
  int v93;
  int v94;
  int v95;
  char v96;
  char v97;
  char v98;
  unint64_t v99;
  char v100;
  char v101;

  *(_QWORD *)this = off_1003522E8;
  *(_QWORD *)(this + 204) = 0;
  *(_DWORD *)(this + 212) = 0;
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 1) != 0)
  {
    v4 = 0;
    v6 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 214) = 0;
    *(_WORD *)(this + 212) = 0;
    v3 = 1;
    *(_QWORD *)(this + 204) = 1;
    *(_QWORD *)(this + 8) = v6;
    v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
    v2 = *(_QWORD *)((char *)a2 + 204);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  v4 = 0;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    v7 = *((_DWORD *)a2 + 10);
    v3 |= 0x10uLL;
    *(_QWORD *)(this + 204) = v3;
    *(_WORD *)(this + 212) = 0;
    *(_BYTE *)(this + 214) = 0;
    *(_DWORD *)(this + 40) = v7;
    v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
    v2 = *(_QWORD *)((char *)a2 + 204);
  }
LABEL_6:
  if ((v5 & 2) != 0)
  {
    v8 = *((_BYTE *)a2 + 188);
    v4 = 2;
    *(_QWORD *)(this + 204) = v3;
    *(_BYTE *)(this + 214) = 0;
    *(_WORD *)(this + 212) = 2;
    *(_BYTE *)(this + 188) = v8;
    v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
    v2 = *(_QWORD *)((char *)a2 + 204);
    if ((v2 & 0x200000) == 0)
    {
LABEL_8:
      if ((v5 & 4) == 0)
        goto LABEL_9;
      goto LABEL_88;
    }
  }
  else if ((v2 & 0x200000) == 0)
  {
    goto LABEL_8;
  }
  v9 = *((_DWORD *)a2 + 27);
  v3 |= 0x200000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 108) = v9;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((*((_WORD *)a2 + 106) & 4) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0)
      goto LABEL_10;
    goto LABEL_89;
  }
LABEL_88:
  v10 = *((_BYTE *)a2 + 189);
  v11 = v4 >> 16;
  v4 |= 4uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_BYTE *)(this + 214) = v11;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 189) = v10;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 2) == 0)
  {
LABEL_10:
    if ((v2 & 0x400000) == 0)
      goto LABEL_11;
    goto LABEL_90;
  }
LABEL_89:
  v12 = *((_QWORD *)a2 + 2);
  v3 |= 2uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_QWORD *)(this + 16) = v12;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x400000) == 0)
  {
LABEL_11:
    if ((v2 & 0x4000) == 0)
      goto LABEL_12;
    goto LABEL_91;
  }
LABEL_90:
  v13 = *((_DWORD *)a2 + 28);
  v3 |= 0x400000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 112) = v13;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x4000) == 0)
  {
LABEL_12:
    if ((v2 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_92;
  }
LABEL_91:
  v14 = *((_DWORD *)a2 + 20);
  v3 |= 0x4000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 80) = v14;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x40) == 0)
  {
LABEL_13:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_14;
    goto LABEL_93;
  }
LABEL_92:
  v15 = *((_DWORD *)a2 + 12);
  v3 |= 0x40uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 48) = v15;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x400000000000000) == 0)
      goto LABEL_15;
    goto LABEL_94;
  }
LABEL_93:
  v16 = *((_DWORD *)a2 + 32);
  v3 |= 0x4000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 128) = v16;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x400000000000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x400000000) == 0)
      goto LABEL_16;
    goto LABEL_95;
  }
LABEL_94:
  v17 = *((_BYTE *)a2 + 181);
  v3 |= 0x400000000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 181) = v17;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x400) == 0)
      goto LABEL_17;
    goto LABEL_96;
  }
LABEL_95:
  v18 = *((_BYTE *)a2 + 157);
  v3 |= 0x400000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 157) = v18;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((*((_WORD *)a2 + 106) & 0x400) == 0)
  {
LABEL_17:
    if ((v2 & 0x40000000000) == 0)
      goto LABEL_18;
    goto LABEL_97;
  }
LABEL_96:
  v19 = *((_BYTE *)a2 + 197);
  v20 = v4 >> 16;
  v4 |= 0x400uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_BYTE *)(this + 214) = v20;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 197) = v19;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x40000000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000000000000) == 0)
      goto LABEL_19;
    goto LABEL_98;
  }
LABEL_97:
  v21 = *((_BYTE *)a2 + 165);
  v3 |= 0x40000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 165) = v21;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x4000000000000) == 0)
  {
LABEL_19:
    if ((v5 & 8) == 0)
      goto LABEL_20;
    goto LABEL_99;
  }
LABEL_98:
  v22 = *((_BYTE *)a2 + 173);
  v3 |= 0x4000000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 173) = v22;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((*((_WORD *)a2 + 106) & 8) == 0)
  {
LABEL_20:
    if ((v2 & 0x40000) == 0)
      goto LABEL_21;
    goto LABEL_100;
  }
LABEL_99:
  v23 = *((_BYTE *)a2 + 190);
  v24 = v4 >> 16;
  v4 |= 8uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_BYTE *)(this + 214) = v24;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 190) = v23;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x40000) == 0)
  {
LABEL_21:
    if ((v2 & 0x400) == 0)
      goto LABEL_22;
    goto LABEL_101;
  }
LABEL_100:
  v25 = *((_DWORD *)a2 + 24);
  v3 |= 0x40000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 96) = v25;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x400) == 0)
  {
LABEL_22:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_23;
    goto LABEL_102;
  }
LABEL_101:
  v26 = *((_DWORD *)a2 + 16);
  v3 |= 0x400uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 64) = v26;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x4000000000000000) == 0)
      goto LABEL_24;
    goto LABEL_103;
  }
LABEL_102:
  v27 = *((_DWORD *)a2 + 36);
  v3 |= 0x40000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 144) = v27;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x4000000000000000) == 0)
  {
LABEL_24:
    if ((v2 & 0x4000000000) == 0)
      goto LABEL_25;
    goto LABEL_104;
  }
LABEL_103:
  v28 = *((_BYTE *)a2 + 185);
  v3 |= 0x4000000000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 185) = v28;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x4000000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x4000) == 0)
      goto LABEL_26;
    goto LABEL_105;
  }
LABEL_104:
  v29 = *((_BYTE *)a2 + 161);
  v3 |= 0x4000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 161) = v29;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((*((_WORD *)a2 + 106) & 0x4000) == 0)
  {
LABEL_26:
    if ((v2 & 0x400000000000) == 0)
      goto LABEL_27;
    goto LABEL_106;
  }
LABEL_105:
  v30 = *((_BYTE *)a2 + 201);
  v31 = v4 >> 16;
  v4 |= 0x4000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_BYTE *)(this + 214) = v31;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 201) = v30;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x400000000000) == 0)
  {
LABEL_27:
    if ((v2 & 0x40000000000000) == 0)
      goto LABEL_28;
    goto LABEL_107;
  }
LABEL_106:
  v32 = *((_BYTE *)a2 + 169);
  v3 |= 0x400000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 169) = v32;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x40000000000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x40) == 0)
      goto LABEL_29;
    goto LABEL_108;
  }
LABEL_107:
  v33 = *((_BYTE *)a2 + 177);
  v3 |= 0x40000000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 177) = v33;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((*((_WORD *)a2 + 106) & 0x40) == 0)
  {
LABEL_29:
    if ((v2 & 4) == 0)
      goto LABEL_30;
    goto LABEL_109;
  }
LABEL_108:
  v34 = *((_BYTE *)a2 + 193);
  v35 = v4 >> 16;
  v4 |= 0x40uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_BYTE *)(this + 214) = v35;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 193) = v34;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 4) == 0)
  {
LABEL_30:
    if ((v2 & 0x800000) == 0)
      goto LABEL_31;
    goto LABEL_110;
  }
LABEL_109:
  v36 = *((_QWORD *)a2 + 3);
  v3 |= 4uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_QWORD *)(this + 24) = v36;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x800000) == 0)
  {
LABEL_31:
    if ((v2 & 0x8000) == 0)
      goto LABEL_32;
    goto LABEL_111;
  }
LABEL_110:
  v37 = *((_DWORD *)a2 + 29);
  v3 |= 0x800000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 116) = v37;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x8000) == 0)
  {
LABEL_32:
    if ((v2 & 0x80) == 0)
      goto LABEL_33;
    goto LABEL_112;
  }
LABEL_111:
  v38 = *((_DWORD *)a2 + 21);
  v3 |= 0x8000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 84) = v38;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x80) == 0)
  {
LABEL_33:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_34;
    goto LABEL_113;
  }
LABEL_112:
  v39 = *((_DWORD *)a2 + 13);
  v3 |= 0x80uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 52) = v39;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x800000000000000) == 0)
      goto LABEL_35;
    goto LABEL_114;
  }
LABEL_113:
  v40 = *((_DWORD *)a2 + 33);
  v3 |= 0x8000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 132) = v40;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x800000000000000) == 0)
  {
LABEL_35:
    if ((v2 & 0x800000000) == 0)
      goto LABEL_36;
    goto LABEL_115;
  }
LABEL_114:
  v41 = *((_BYTE *)a2 + 182);
  v3 |= 0x800000000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 182) = v41;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x800) == 0)
      goto LABEL_37;
    goto LABEL_116;
  }
LABEL_115:
  v42 = *((_BYTE *)a2 + 158);
  v3 |= 0x800000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 158) = v42;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((*((_WORD *)a2 + 106) & 0x800) == 0)
  {
LABEL_37:
    if ((v2 & 0x80000000000) == 0)
      goto LABEL_38;
    goto LABEL_117;
  }
LABEL_116:
  v43 = *((_BYTE *)a2 + 198);
  v44 = v4 >> 16;
  v4 |= 0x800uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_BYTE *)(this + 214) = v44;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 198) = v43;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x80000000000) == 0)
  {
LABEL_38:
    if ((v2 & 0x8000000000000) == 0)
      goto LABEL_39;
    goto LABEL_118;
  }
LABEL_117:
  v45 = *((_BYTE *)a2 + 166);
  v3 |= 0x80000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 166) = v45;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x8000000000000) == 0)
  {
LABEL_39:
    if ((v5 & 0x10) == 0)
      goto LABEL_40;
    goto LABEL_119;
  }
LABEL_118:
  v46 = *((_BYTE *)a2 + 174);
  v3 |= 0x8000000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 174) = v46;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((*((_WORD *)a2 + 106) & 0x10) == 0)
  {
LABEL_40:
    if ((v2 & 0x80000) == 0)
      goto LABEL_41;
    goto LABEL_120;
  }
LABEL_119:
  v47 = *((_BYTE *)a2 + 191);
  v48 = v4 >> 16;
  v4 |= 0x10uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_BYTE *)(this + 214) = v48;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 191) = v47;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x80000) == 0)
  {
LABEL_41:
    if ((v2 & 0x800) == 0)
      goto LABEL_42;
    goto LABEL_121;
  }
LABEL_120:
  v49 = *((_DWORD *)a2 + 25);
  v3 |= 0x80000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 100) = v49;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x800) == 0)
  {
LABEL_42:
    if ((v2 & 0x80000000) == 0)
      goto LABEL_43;
    goto LABEL_122;
  }
LABEL_121:
  v50 = *((_DWORD *)a2 + 17);
  v3 |= 0x800uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 68) = v50;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_43:
    if ((v2 & 0x8000000000000000) == 0)
      goto LABEL_44;
    goto LABEL_123;
  }
LABEL_122:
  v51 = *((_DWORD *)a2 + 37);
  v3 |= 0x80000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 148) = v51;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x8000000000000000) == 0)
  {
LABEL_44:
    if ((v2 & 0x8000000000) == 0)
      goto LABEL_45;
    goto LABEL_124;
  }
LABEL_123:
  v52 = *((_BYTE *)a2 + 186);
  v3 |= 0x8000000000000000;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 186) = v52;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x8000000000) == 0)
  {
LABEL_45:
    if ((v5 & 0x8000) == 0)
      goto LABEL_46;
    goto LABEL_125;
  }
LABEL_124:
  v53 = *((_BYTE *)a2 + 162);
  v3 |= 0x8000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 162) = v53;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((*((_WORD *)a2 + 106) & 0x8000) == 0)
  {
LABEL_46:
    if ((v2 & 0x800000000000) == 0)
      goto LABEL_47;
    goto LABEL_126;
  }
LABEL_125:
  v54 = *((_BYTE *)a2 + 202);
  v55 = v4 >> 16;
  v4 |= 0x8000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_BYTE *)(this + 214) = v55;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 202) = v54;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x800000000000) == 0)
  {
LABEL_47:
    if ((v2 & 0x80000000000000) == 0)
      goto LABEL_48;
    goto LABEL_127;
  }
LABEL_126:
  v56 = *((_BYTE *)a2 + 170);
  v3 |= 0x800000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 170) = v56;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x80000000000000) == 0)
  {
LABEL_48:
    if ((v5 & 0x80) == 0)
      goto LABEL_49;
    goto LABEL_128;
  }
LABEL_127:
  v57 = *((_BYTE *)a2 + 178);
  v3 |= 0x80000000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 178) = v57;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((*((_WORD *)a2 + 106) & 0x80) == 0)
  {
LABEL_49:
    if ((v2 & 8) == 0)
      goto LABEL_50;
    goto LABEL_129;
  }
LABEL_128:
  v58 = *((_BYTE *)a2 + 194);
  v59 = v4 >> 16;
  v4 |= 0x80uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_BYTE *)(this + 214) = v59;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 194) = v58;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 8) == 0)
  {
LABEL_50:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_51;
    goto LABEL_130;
  }
LABEL_129:
  v60 = *((_QWORD *)a2 + 4);
  v3 |= 8uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_QWORD *)(this + 32) = v60;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_51:
    if ((v2 & 0x10000) == 0)
      goto LABEL_52;
    goto LABEL_131;
  }
LABEL_130:
  v61 = *((_DWORD *)a2 + 30);
  v3 |= 0x1000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 120) = v61;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x10000) == 0)
  {
LABEL_52:
    if ((v2 & 0x100) == 0)
      goto LABEL_53;
    goto LABEL_132;
  }
LABEL_131:
  v62 = *((_DWORD *)a2 + 22);
  v3 |= 0x10000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 88) = v62;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x100) == 0)
  {
LABEL_53:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_54;
    goto LABEL_133;
  }
LABEL_132:
  v63 = *((_DWORD *)a2 + 14);
  v3 |= 0x100uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 56) = v63;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_54:
    if ((v2 & 0x1000000000000000) == 0)
      goto LABEL_55;
    goto LABEL_134;
  }
LABEL_133:
  v64 = *((_DWORD *)a2 + 34);
  v3 |= 0x10000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 136) = v64;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x1000000000000000) == 0)
  {
LABEL_55:
    if ((v2 & 0x1000000000) == 0)
      goto LABEL_56;
    goto LABEL_135;
  }
LABEL_134:
  v65 = *((_BYTE *)a2 + 183);
  v3 |= 0x1000000000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 183) = v65;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x1000000000) == 0)
  {
LABEL_56:
    if ((v5 & 0x1000) == 0)
      goto LABEL_57;
    goto LABEL_136;
  }
LABEL_135:
  v66 = *((_BYTE *)a2 + 159);
  v3 |= 0x1000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 159) = v66;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((*((_WORD *)a2 + 106) & 0x1000) == 0)
  {
LABEL_57:
    if ((v2 & 0x100000000000) == 0)
      goto LABEL_58;
    goto LABEL_137;
  }
LABEL_136:
  v67 = *((_BYTE *)a2 + 199);
  v68 = v4 >> 16;
  v4 |= 0x1000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_BYTE *)(this + 214) = v68;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 199) = v67;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x100000000000) == 0)
  {
LABEL_58:
    if ((v2 & 0x10000000000000) == 0)
      goto LABEL_59;
    goto LABEL_138;
  }
LABEL_137:
  v69 = *((_BYTE *)a2 + 167);
  v3 |= 0x100000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 167) = v69;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x10000000000000) == 0)
  {
LABEL_59:
    if ((v5 & 0x20) == 0)
      goto LABEL_60;
    goto LABEL_139;
  }
LABEL_138:
  v70 = *((_BYTE *)a2 + 175);
  v3 |= 0x10000000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 175) = v70;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((*((_WORD *)a2 + 106) & 0x20) == 0)
  {
LABEL_60:
    if ((v2 & 0x100000) == 0)
      goto LABEL_61;
    goto LABEL_140;
  }
LABEL_139:
  v71 = *((_BYTE *)a2 + 192);
  v72 = v4 >> 16;
  v4 |= 0x20uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_BYTE *)(this + 214) = v72;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 192) = v71;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x100000) == 0)
  {
LABEL_61:
    if ((v2 & 0x1000) == 0)
      goto LABEL_62;
    goto LABEL_141;
  }
LABEL_140:
  v73 = *((_DWORD *)a2 + 26);
  v3 |= 0x100000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 104) = v73;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x1000) == 0)
  {
LABEL_62:
    if ((v2 & 0x100000000) == 0)
      goto LABEL_63;
    goto LABEL_142;
  }
LABEL_141:
  v74 = *((_DWORD *)a2 + 18);
  v3 |= 0x1000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 72) = v74;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_63:
    if ((v5 & 1) == 0)
      goto LABEL_64;
    goto LABEL_143;
  }
LABEL_142:
  v75 = *((_DWORD *)a2 + 38);
  v3 |= (unint64_t)&_mh_execute_header;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 152) = v75;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((*((_WORD *)a2 + 106) & 1) == 0)
  {
LABEL_64:
    if ((v2 & 0x10000000000) == 0)
      goto LABEL_65;
    goto LABEL_144;
  }
LABEL_143:
  v76 = *((_BYTE *)a2 + 187);
  v77 = v4 >> 16;
  v4 |= 1uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_BYTE *)(this + 214) = v77;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 187) = v76;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x10000000000) == 0)
  {
LABEL_65:
    if ((v5 & 0x10000) == 0)
      goto LABEL_66;
    goto LABEL_145;
  }
LABEL_144:
  v78 = *((_BYTE *)a2 + 163);
  v3 |= 0x10000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 163) = v78;
  v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v5 & 0x10000) == 0)
  {
LABEL_66:
    if ((v2 & 0x1000000000000) == 0)
      goto LABEL_67;
    goto LABEL_146;
  }
LABEL_145:
  v79 = *((_BYTE *)a2 + 203);
  *(_WORD *)(this + 212) = v4;
  v4 |= 0x10000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 203) = v79;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x1000000000000) == 0)
  {
LABEL_67:
    if ((v2 & 0x100000000000000) == 0)
      goto LABEL_68;
    goto LABEL_147;
  }
LABEL_146:
  v80 = *((_BYTE *)a2 + 171);
  v3 |= 0x1000000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 171) = v80;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x100000000000000) == 0)
  {
LABEL_68:
    if ((v5 & 0x100) == 0)
      goto LABEL_69;
    goto LABEL_148;
  }
LABEL_147:
  v81 = *((_BYTE *)a2 + 179);
  v3 |= 0x100000000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 179) = v81;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v5 & 0x100) == 0)
  {
LABEL_69:
    if ((v2 & 0x2000) == 0)
      goto LABEL_70;
    goto LABEL_149;
  }
LABEL_148:
  v82 = *((_BYTE *)a2 + 195);
  v83 = v4 >> 16;
  v4 |= 0x100uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_BYTE *)(this + 214) = v83;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 195) = v82;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x2000) == 0)
  {
LABEL_70:
    if ((v2 & 0x20) == 0)
      goto LABEL_71;
    goto LABEL_150;
  }
LABEL_149:
  v84 = *((_DWORD *)a2 + 19);
  v3 |= 0x2000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 76) = v84;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x20) == 0)
  {
LABEL_71:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_72;
    goto LABEL_151;
  }
LABEL_150:
  v85 = *((_DWORD *)a2 + 11);
  v3 |= 0x20uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 44) = v85;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_72:
    if ((v2 & 0x200000000000000) == 0)
      goto LABEL_73;
    goto LABEL_152;
  }
LABEL_151:
  v86 = *((_DWORD *)a2 + 31);
  v3 |= 0x2000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 124) = v86;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x200000000000000) == 0)
  {
LABEL_73:
    if ((v2 & 0x200000000) == 0)
      goto LABEL_74;
    goto LABEL_153;
  }
LABEL_152:
  v87 = *((_BYTE *)a2 + 180);
  v3 |= 0x200000000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 180) = v87;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_74:
    if ((v5 & 0x200) == 0)
      goto LABEL_75;
    goto LABEL_154;
  }
LABEL_153:
  v88 = *((_BYTE *)a2 + 156);
  v3 |= 0x200000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 156) = v88;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v5 & 0x200) == 0)
  {
LABEL_75:
    if ((v2 & 0x20000000000) == 0)
      goto LABEL_76;
    goto LABEL_155;
  }
LABEL_154:
  v89 = *((_BYTE *)a2 + 196);
  v90 = v4 >> 16;
  v4 |= 0x200uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_BYTE *)(this + 214) = v90;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 196) = v89;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x20000000000) == 0)
  {
LABEL_76:
    if ((v2 & 0x2000000000000) == 0)
      goto LABEL_77;
    goto LABEL_156;
  }
LABEL_155:
  v91 = *((_BYTE *)a2 + 164);
  v3 |= 0x20000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 164) = v91;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x2000000000000) == 0)
  {
LABEL_77:
    if ((v2 & 0x20000) == 0)
      goto LABEL_78;
    goto LABEL_157;
  }
LABEL_156:
  v92 = *((_BYTE *)a2 + 172);
  v3 |= 0x2000000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 172) = v92;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x20000) == 0)
  {
LABEL_78:
    if ((v2 & 0x200) == 0)
      goto LABEL_79;
    goto LABEL_158;
  }
LABEL_157:
  v93 = *((_DWORD *)a2 + 23);
  v3 |= 0x20000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 92) = v93;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x200) == 0)
  {
LABEL_79:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_80;
    goto LABEL_159;
  }
LABEL_158:
  v94 = *((_DWORD *)a2 + 15);
  v3 |= 0x200uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 60) = v94;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_80:
    if ((v2 & 0x2000000000000000) == 0)
      goto LABEL_81;
    goto LABEL_160;
  }
LABEL_159:
  v95 = *((_DWORD *)a2 + 35);
  v3 |= 0x20000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 140) = v95;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x2000000000000000) == 0)
  {
LABEL_81:
    if ((v2 & 0x2000000000) == 0)
      goto LABEL_82;
    goto LABEL_161;
  }
LABEL_160:
  v96 = *((_BYTE *)a2 + 184);
  v3 |= 0x2000000000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 184) = v96;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x2000000000) == 0)
  {
LABEL_82:
    if ((v5 & 0x2000) == 0)
      goto LABEL_83;
    goto LABEL_162;
  }
LABEL_161:
  v97 = *((_BYTE *)a2 + 160);
  v3 |= 0x2000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 160) = v97;
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((*((_WORD *)a2 + 106) & 0x2000) == 0)
  {
LABEL_83:
    if ((v2 & 0x200000000000) == 0)
      goto LABEL_84;
    goto LABEL_163;
  }
LABEL_162:
  v98 = *((_BYTE *)a2 + 200);
  v99 = v4 >> 16;
  LODWORD(v4) = v4 | 0x2000;
  *(_QWORD *)(this + 204) = v3;
  *(_BYTE *)(this + 214) = v99;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 200) = v98;
  v2 = *(_QWORD *)((char *)a2 + 204);
  if ((v2 & 0x200000000000) == 0)
  {
LABEL_84:
    if ((v2 & 0x20000000000000) == 0)
      return this;
LABEL_164:
    v101 = *((_BYTE *)a2 + 176);
    *(_QWORD *)(this + 204) = v3 | 0x20000000000000;
    *(_WORD *)(this + 212) = v4;
    *(_BYTE *)(this + 214) = BYTE2(v4);
    *(_BYTE *)(this + 176) = v101;
    return this;
  }
LABEL_163:
  v100 = *((_BYTE *)a2 + 168);
  v3 |= 0x200000000000uLL;
  *(_QWORD *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(_BYTE *)(this + 214) = BYTE2(v4);
  *(_BYTE *)(this + 168) = v100;
  if ((*(_QWORD *)((_BYTE *)a2 + 204) & 0x20000000000000) != 0)
    goto LABEL_164;
  return this;
}

CMMsl *CMMsl::KappaRemoteAudioResult::operator=(CMMsl *a1, const CMMsl::KappaRemoteAudioResult *a2)
{
  CMMsl::KappaRemoteAudioResult *v3;
  _BYTE v5[216];

  if (a1 != a2)
  {
    CMMsl::KappaRemoteAudioResult::KappaRemoteAudioResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaRemoteAudioResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaRemoteAudioResult *a2, CMMsl::KappaRemoteAudioResult *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  float result;

  v3 = *((_DWORD *)this + 53);
  v4 = *(_QWORD *)((char *)this + 204);
  v5 = *((_DWORD *)a2 + 53);
  *(_QWORD *)((char *)this + 204) = *(_QWORD *)((char *)a2 + 204);
  *((_DWORD *)this + 53) = v5;
  *(_QWORD *)((char *)a2 + 204) = v4;
  *((_DWORD *)a2 + 53) = v3;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  LODWORD(v6) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 188);
  *((_BYTE *)this + 188) = *((_BYTE *)a2 + 188);
  *((_BYTE *)a2 + 188) = v6;
  v7 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v7;
  LOBYTE(v6) = *((_BYTE *)this + 189);
  *((_BYTE *)this + 189) = *((_BYTE *)a2 + 189);
  *((_BYTE *)a2 + 189) = v6;
  v8 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v8;
  v9 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v9;
  v10 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v10;
  v11 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v11;
  v12 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v12;
  LOBYTE(v8) = *((_BYTE *)this + 181);
  *((_BYTE *)this + 181) = *((_BYTE *)a2 + 181);
  *((_BYTE *)a2 + 181) = v8;
  LOBYTE(v8) = *((_BYTE *)this + 157);
  *((_BYTE *)this + 157) = *((_BYTE *)a2 + 157);
  *((_BYTE *)a2 + 157) = v8;
  LOBYTE(v8) = *((_BYTE *)this + 197);
  *((_BYTE *)this + 197) = *((_BYTE *)a2 + 197);
  *((_BYTE *)a2 + 197) = v8;
  LOBYTE(v8) = *((_BYTE *)this + 165);
  *((_BYTE *)this + 165) = *((_BYTE *)a2 + 165);
  *((_BYTE *)a2 + 165) = v8;
  LOBYTE(v8) = *((_BYTE *)this + 173);
  *((_BYTE *)this + 173) = *((_BYTE *)a2 + 173);
  *((_BYTE *)a2 + 173) = v8;
  LOBYTE(v8) = *((_BYTE *)this + 190);
  *((_BYTE *)this + 190) = *((_BYTE *)a2 + 190);
  *((_BYTE *)a2 + 190) = v8;
  v13 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v13;
  v14 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v14;
  v15 = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v15;
  LOBYTE(v8) = *((_BYTE *)this + 185);
  *((_BYTE *)this + 185) = *((_BYTE *)a2 + 185);
  *((_BYTE *)a2 + 185) = v8;
  LOBYTE(v8) = *((_BYTE *)this + 161);
  *((_BYTE *)this + 161) = *((_BYTE *)a2 + 161);
  *((_BYTE *)a2 + 161) = v8;
  LOBYTE(v8) = *((_BYTE *)this + 201);
  *((_BYTE *)this + 201) = *((_BYTE *)a2 + 201);
  *((_BYTE *)a2 + 201) = v8;
  LOBYTE(v8) = *((_BYTE *)this + 169);
  *((_BYTE *)this + 169) = *((_BYTE *)a2 + 169);
  *((_BYTE *)a2 + 169) = v8;
  LOBYTE(v8) = *((_BYTE *)this + 177);
  *((_BYTE *)this + 177) = *((_BYTE *)a2 + 177);
  *((_BYTE *)a2 + 177) = v8;
  LOBYTE(v8) = *((_BYTE *)this + 193);
  *((_BYTE *)this + 193) = *((_BYTE *)a2 + 193);
  *((_BYTE *)a2 + 193) = v8;
  v16 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v16;
  v17 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v17;
  v18 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v18;
  v19 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v19;
  v20 = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v20;
  LOBYTE(v16) = *((_BYTE *)this + 182);
  *((_BYTE *)this + 182) = *((_BYTE *)a2 + 182);
  *((_BYTE *)a2 + 182) = v16;
  LOBYTE(v16) = *((_BYTE *)this + 158);
  *((_BYTE *)this + 158) = *((_BYTE *)a2 + 158);
  *((_BYTE *)a2 + 158) = v16;
  LOBYTE(v16) = *((_BYTE *)this + 198);
  *((_BYTE *)this + 198) = *((_BYTE *)a2 + 198);
  *((_BYTE *)a2 + 198) = v16;
  LOBYTE(v16) = *((_BYTE *)this + 166);
  *((_BYTE *)this + 166) = *((_BYTE *)a2 + 166);
  *((_BYTE *)a2 + 166) = v16;
  LOBYTE(v16) = *((_BYTE *)this + 174);
  *((_BYTE *)this + 174) = *((_BYTE *)a2 + 174);
  *((_BYTE *)a2 + 174) = v16;
  LOBYTE(v16) = *((_BYTE *)this + 191);
  *((_BYTE *)this + 191) = *((_BYTE *)a2 + 191);
  *((_BYTE *)a2 + 191) = v16;
  v21 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v21;
  v22 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v22;
  v23 = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v23;
  LOBYTE(v16) = *((_BYTE *)this + 186);
  *((_BYTE *)this + 186) = *((_BYTE *)a2 + 186);
  *((_BYTE *)a2 + 186) = v16;
  LOBYTE(v16) = *((_BYTE *)this + 162);
  *((_BYTE *)this + 162) = *((_BYTE *)a2 + 162);
  *((_BYTE *)a2 + 162) = v16;
  LOBYTE(v16) = *((_BYTE *)this + 202);
  *((_BYTE *)this + 202) = *((_BYTE *)a2 + 202);
  *((_BYTE *)a2 + 202) = v16;
  LOBYTE(v16) = *((_BYTE *)this + 170);
  *((_BYTE *)this + 170) = *((_BYTE *)a2 + 170);
  *((_BYTE *)a2 + 170) = v16;
  LOBYTE(v16) = *((_BYTE *)this + 178);
  *((_BYTE *)this + 178) = *((_BYTE *)a2 + 178);
  *((_BYTE *)a2 + 178) = v16;
  LOBYTE(v16) = *((_BYTE *)this + 194);
  *((_BYTE *)this + 194) = *((_BYTE *)a2 + 194);
  *((_BYTE *)a2 + 194) = v16;
  v24 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v24;
  v25 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v25;
  v26 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v26;
  v27 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v27;
  v28 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v28;
  LOBYTE(v24) = *((_BYTE *)this + 183);
  *((_BYTE *)this + 183) = *((_BYTE *)a2 + 183);
  *((_BYTE *)a2 + 183) = v24;
  LOBYTE(v24) = *((_BYTE *)this + 159);
  *((_BYTE *)this + 159) = *((_BYTE *)a2 + 159);
  *((_BYTE *)a2 + 159) = v24;
  LOBYTE(v24) = *((_BYTE *)this + 199);
  *((_BYTE *)this + 199) = *((_BYTE *)a2 + 199);
  *((_BYTE *)a2 + 199) = v24;
  LOBYTE(v24) = *((_BYTE *)this + 167);
  *((_BYTE *)this + 167) = *((_BYTE *)a2 + 167);
  *((_BYTE *)a2 + 167) = v24;
  LOBYTE(v24) = *((_BYTE *)this + 175);
  *((_BYTE *)this + 175) = *((_BYTE *)a2 + 175);
  *((_BYTE *)a2 + 175) = v24;
  LOBYTE(v24) = *((_BYTE *)this + 192);
  *((_BYTE *)this + 192) = *((_BYTE *)a2 + 192);
  *((_BYTE *)a2 + 192) = v24;
  v29 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v29;
  v30 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v30;
  v31 = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v31;
  LOBYTE(v24) = *((_BYTE *)this + 187);
  *((_BYTE *)this + 187) = *((_BYTE *)a2 + 187);
  *((_BYTE *)a2 + 187) = v24;
  LOBYTE(v24) = *((_BYTE *)this + 163);
  *((_BYTE *)this + 163) = *((_BYTE *)a2 + 163);
  *((_BYTE *)a2 + 163) = v24;
  LOBYTE(v24) = *((_BYTE *)this + 203);
  *((_BYTE *)this + 203) = *((_BYTE *)a2 + 203);
  *((_BYTE *)a2 + 203) = v24;
  LOBYTE(v24) = *((_BYTE *)this + 171);
  *((_BYTE *)this + 171) = *((_BYTE *)a2 + 171);
  *((_BYTE *)a2 + 171) = v24;
  LOBYTE(v24) = *((_BYTE *)this + 179);
  *((_BYTE *)this + 179) = *((_BYTE *)a2 + 179);
  *((_BYTE *)a2 + 179) = v24;
  LOBYTE(v24) = *((_BYTE *)this + 195);
  *((_BYTE *)this + 195) = *((_BYTE *)a2 + 195);
  *((_BYTE *)a2 + 195) = v24;
  v32 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v32;
  v33 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v33;
  v34 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v34;
  LOBYTE(v24) = *((_BYTE *)this + 180);
  *((_BYTE *)this + 180) = *((_BYTE *)a2 + 180);
  *((_BYTE *)a2 + 180) = v24;
  LOBYTE(v24) = *((_BYTE *)this + 156);
  *((_BYTE *)this + 156) = *((_BYTE *)a2 + 156);
  *((_BYTE *)a2 + 156) = v24;
  LOBYTE(v24) = *((_BYTE *)this + 196);
  *((_BYTE *)this + 196) = *((_BYTE *)a2 + 196);
  *((_BYTE *)a2 + 196) = v24;
  LOBYTE(v24) = *((_BYTE *)this + 164);
  *((_BYTE *)this + 164) = *((_BYTE *)a2 + 164);
  *((_BYTE *)a2 + 164) = v24;
  LOBYTE(v24) = *((_BYTE *)this + 172);
  *((_BYTE *)this + 172) = *((_BYTE *)a2 + 172);
  *((_BYTE *)a2 + 172) = v24;
  v35 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v35;
  v36 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v36;
  result = *((float *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((float *)a2 + 35) = result;
  LOBYTE(v24) = *((_BYTE *)this + 184);
  *((_BYTE *)this + 184) = *((_BYTE *)a2 + 184);
  *((_BYTE *)a2 + 184) = v24;
  LOBYTE(v24) = *((_BYTE *)this + 160);
  *((_BYTE *)this + 160) = *((_BYTE *)a2 + 160);
  *((_BYTE *)a2 + 160) = v24;
  LOBYTE(v24) = *((_BYTE *)this + 200);
  *((_BYTE *)this + 200) = *((_BYTE *)a2 + 200);
  *((_BYTE *)a2 + 200) = v24;
  LOBYTE(v24) = *((_BYTE *)this + 168);
  *((_BYTE *)this + 168) = *((_BYTE *)a2 + 168);
  *((_BYTE *)a2 + 168) = v24;
  LOBYTE(v24) = *((_BYTE *)this + 176);
  *((_BYTE *)this + 176) = *((_BYTE *)a2 + 176);
  *((_BYTE *)a2 + 176) = v24;
  return result;
}

float CMMsl::KappaRemoteAudioResult::KappaRemoteAudioResult(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float result;

  *(_QWORD *)a1 = off_1003522E8;
  v2 = *(_QWORD *)(a2 + 204);
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_QWORD *)(a1 + 204) = v2;
  *(_DWORD *)(a2 + 212) = 0;
  *(_QWORD *)(a2 + 204) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 188) = *(_BYTE *)(a2 + 188);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_BYTE *)(a1 + 189) = *(_BYTE *)(a2 + 189);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 181) = *(_BYTE *)(a2 + 181);
  *(_BYTE *)(a1 + 157) = *(_BYTE *)(a2 + 157);
  *(_BYTE *)(a1 + 197) = *(_BYTE *)(a2 + 197);
  *(_BYTE *)(a1 + 165) = *(_BYTE *)(a2 + 165);
  *(_BYTE *)(a1 + 173) = *(_BYTE *)(a2 + 173);
  *(_BYTE *)(a1 + 190) = *(_BYTE *)(a2 + 190);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 185) = *(_BYTE *)(a2 + 185);
  *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
  *(_BYTE *)(a1 + 201) = *(_BYTE *)(a2 + 201);
  *(_BYTE *)(a1 + 169) = *(_BYTE *)(a2 + 169);
  *(_BYTE *)(a1 + 177) = *(_BYTE *)(a2 + 177);
  *(_BYTE *)(a1 + 193) = *(_BYTE *)(a2 + 193);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_BYTE *)(a1 + 182) = *(_BYTE *)(a2 + 182);
  *(_BYTE *)(a1 + 158) = *(_BYTE *)(a2 + 158);
  *(_BYTE *)(a1 + 198) = *(_BYTE *)(a2 + 198);
  *(_BYTE *)(a1 + 166) = *(_BYTE *)(a2 + 166);
  *(_BYTE *)(a1 + 174) = *(_BYTE *)(a2 + 174);
  *(_BYTE *)(a1 + 191) = *(_BYTE *)(a2 + 191);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_BYTE *)(a1 + 186) = *(_BYTE *)(a2 + 186);
  *(_BYTE *)(a1 + 162) = *(_BYTE *)(a2 + 162);
  *(_BYTE *)(a1 + 202) = *(_BYTE *)(a2 + 202);
  *(_BYTE *)(a1 + 170) = *(_BYTE *)(a2 + 170);
  *(_BYTE *)(a1 + 178) = *(_BYTE *)(a2 + 178);
  *(_BYTE *)(a1 + 194) = *(_BYTE *)(a2 + 194);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 183) = *(_BYTE *)(a2 + 183);
  *(_BYTE *)(a1 + 159) = *(_BYTE *)(a2 + 159);
  *(_BYTE *)(a1 + 199) = *(_BYTE *)(a2 + 199);
  *(_BYTE *)(a1 + 167) = *(_BYTE *)(a2 + 167);
  *(_BYTE *)(a1 + 175) = *(_BYTE *)(a2 + 175);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 187) = *(_BYTE *)(a2 + 187);
  *(_BYTE *)(a1 + 163) = *(_BYTE *)(a2 + 163);
  *(_BYTE *)(a1 + 203) = *(_BYTE *)(a2 + 203);
  *(_BYTE *)(a1 + 171) = *(_BYTE *)(a2 + 171);
  *(_BYTE *)(a1 + 179) = *(_BYTE *)(a2 + 179);
  *(_BYTE *)(a1 + 195) = *(_BYTE *)(a2 + 195);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_BYTE *)(a1 + 180) = *(_BYTE *)(a2 + 180);
  *(_BYTE *)(a1 + 156) = *(_BYTE *)(a2 + 156);
  *(_BYTE *)(a1 + 196) = *(_BYTE *)(a2 + 196);
  *(_BYTE *)(a1 + 164) = *(_BYTE *)(a2 + 164);
  *(_BYTE *)(a1 + 172) = *(_BYTE *)(a2 + 172);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  result = *(float *)(a2 + 140);
  *(float *)(a1 + 140) = result;
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  return result;
}

CMMsl *CMMsl::KappaRemoteAudioResult::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::KappaRemoteAudioResult *v3;
  _BYTE v5[216];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaRemoteAudioResult::KappaRemoteAudioResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaRemoteAudioResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaRemoteAudioResult::formatText(CMMsl::KappaRemoteAudioResult *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  int v6;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x200000000) != 0)
  {
    PB::TextFormatter::format(a2, "chaosMet", *((_BYTE *)this + 156));
    v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
    v5 = *(_QWORD *)((char *)this + 204);
    if ((v5 & 0x400000000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  if ((v5 & 0x400000000) != 0)
  {
LABEL_5:
    PB::TextFormatter::format(a2, "chaosMet0", *((_BYTE *)this + 157));
    v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
    v5 = *(_QWORD *)((char *)this + 204);
  }
LABEL_6:
  if ((v5 & 0x800000000) != 0)
  {
    PB::TextFormatter::format(a2, "chaosMet1", *((_BYTE *)this + 158));
    v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
    v5 = *(_QWORD *)((char *)this + 204);
    if ((v5 & 0x1000000000) == 0)
    {
LABEL_8:
      if ((v5 & 0x2000000000) == 0)
        goto LABEL_9;
      goto LABEL_89;
    }
  }
  else if ((v5 & 0x1000000000) == 0)
  {
    goto LABEL_8;
  }
  PB::TextFormatter::format(a2, "chaosMet2", *((_BYTE *)this + 159));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x2000000000) == 0)
  {
LABEL_9:
    if ((v5 & 0x4000000000) == 0)
      goto LABEL_10;
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(a2, "chaosMetRollover", *((_BYTE *)this + 160));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x4000000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x8000000000) == 0)
      goto LABEL_11;
    goto LABEL_91;
  }
LABEL_90:
  PB::TextFormatter::format(a2, "chaosMetRollover0", *((_BYTE *)this + 161));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x8000000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x10000000000) == 0)
      goto LABEL_12;
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(a2, "chaosMetRollover1", *((_BYTE *)this + 162));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x10000000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x20000000000) == 0)
      goto LABEL_13;
    goto LABEL_93;
  }
LABEL_92:
  PB::TextFormatter::format(a2, "chaosMetRollover2", *((_BYTE *)this + 163));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x20000000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x40000000000) == 0)
      goto LABEL_14;
    goto LABEL_94;
  }
LABEL_93:
  PB::TextFormatter::format(a2, "chaosOrSaturationMet", *((_BYTE *)this + 164));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x40000000000) == 0)
  {
LABEL_14:
    if ((v5 & 0x80000000000) == 0)
      goto LABEL_15;
    goto LABEL_95;
  }
LABEL_94:
  PB::TextFormatter::format(a2, "chaosOrSaturationMet0", *((_BYTE *)this + 165));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x80000000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x100000000000) == 0)
      goto LABEL_16;
    goto LABEL_96;
  }
LABEL_95:
  PB::TextFormatter::format(a2, "chaosOrSaturationMet1", *((_BYTE *)this + 166));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x100000000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x200000000000) == 0)
      goto LABEL_17;
    goto LABEL_97;
  }
LABEL_96:
  PB::TextFormatter::format(a2, "chaosOrSaturationMet2", *((_BYTE *)this + 167));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x200000000000) == 0)
  {
LABEL_17:
    if ((v5 & 0x400000000000) == 0)
      goto LABEL_18;
    goto LABEL_98;
  }
LABEL_97:
  PB::TextFormatter::format(a2, "chaosOrSaturationMetRollover", *((_BYTE *)this + 168));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x400000000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x800000000000) == 0)
      goto LABEL_19;
    goto LABEL_99;
  }
LABEL_98:
  PB::TextFormatter::format(a2, "chaosOrSaturationMetRollover0", *((_BYTE *)this + 169));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x800000000000) == 0)
  {
LABEL_19:
    if ((v5 & 0x1000000000000) == 0)
      goto LABEL_20;
    goto LABEL_100;
  }
LABEL_99:
  PB::TextFormatter::format(a2, "chaosOrSaturationMetRollover1", *((_BYTE *)this + 170));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x1000000000000) == 0)
  {
LABEL_20:
    if ((v5 & 0x2000000000000) == 0)
      goto LABEL_21;
    goto LABEL_101;
  }
LABEL_100:
  PB::TextFormatter::format(a2, "chaosOrSaturationMetRollover2", *((_BYTE *)this + 171));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x2000000000000) == 0)
  {
LABEL_21:
    if ((v5 & 0x4000000000000) == 0)
      goto LABEL_22;
    goto LABEL_102;
  }
LABEL_101:
  PB::TextFormatter::format(a2, "energyAndChaosOrSaturationMet", *((_BYTE *)this + 172));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x4000000000000) == 0)
  {
LABEL_22:
    if ((v5 & 0x8000000000000) == 0)
      goto LABEL_23;
    goto LABEL_103;
  }
LABEL_102:
  PB::TextFormatter::format(a2, "energyAndChaosOrSaturationMet0", *((_BYTE *)this + 173));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x8000000000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x10000000000000) == 0)
      goto LABEL_24;
    goto LABEL_104;
  }
LABEL_103:
  PB::TextFormatter::format(a2, "energyAndChaosOrSaturationMet1", *((_BYTE *)this + 174));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x10000000000000) == 0)
  {
LABEL_24:
    if ((v5 & 0x20000000000000) == 0)
      goto LABEL_25;
    goto LABEL_105;
  }
LABEL_104:
  PB::TextFormatter::format(a2, "energyAndChaosOrSaturationMet2", *((_BYTE *)this + 175));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x20000000000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x40000000000000) == 0)
      goto LABEL_26;
    goto LABEL_106;
  }
LABEL_105:
  PB::TextFormatter::format(a2, "energyAndChaosOrSaturationMetRollover", *((_BYTE *)this + 176));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x40000000000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x80000000000000) == 0)
      goto LABEL_27;
    goto LABEL_107;
  }
LABEL_106:
  PB::TextFormatter::format(a2, "energyAndChaosOrSaturationMetRollover0", *((_BYTE *)this + 177));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x80000000000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x100000000000000) == 0)
      goto LABEL_28;
    goto LABEL_108;
  }
LABEL_107:
  PB::TextFormatter::format(a2, "energyAndChaosOrSaturationMetRollover1", *((_BYTE *)this + 178));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x100000000000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x200000000000000) == 0)
      goto LABEL_29;
    goto LABEL_109;
  }
LABEL_108:
  PB::TextFormatter::format(a2, "energyAndChaosOrSaturationMetRollover2", *((_BYTE *)this + 179));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x200000000000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x400000000000000) == 0)
      goto LABEL_30;
    goto LABEL_110;
  }
LABEL_109:
  PB::TextFormatter::format(a2, "energyMet", *((_BYTE *)this + 180));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x400000000000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x800000000000000) == 0)
      goto LABEL_31;
    goto LABEL_111;
  }
LABEL_110:
  PB::TextFormatter::format(a2, "energyMet0", *((_BYTE *)this + 181));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x800000000000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x1000000000000000) == 0)
      goto LABEL_32;
    goto LABEL_112;
  }
LABEL_111:
  PB::TextFormatter::format(a2, "energyMet1", *((_BYTE *)this + 182));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x1000000000000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_33;
    goto LABEL_113;
  }
LABEL_112:
  PB::TextFormatter::format(a2, "energyMet2", *((_BYTE *)this + 183));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x2000000000000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x4000000000000000) == 0)
      goto LABEL_34;
    goto LABEL_114;
  }
LABEL_113:
  PB::TextFormatter::format(a2, "energyMetRollover", *((_BYTE *)this + 184));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x4000000000000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x8000000000000000) == 0)
      goto LABEL_35;
    goto LABEL_115;
  }
LABEL_114:
  PB::TextFormatter::format(a2, "energyMetRollover0", *((_BYTE *)this + 185));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x8000000000000000) == 0)
  {
LABEL_35:
    if ((v6 & 1) == 0)
      goto LABEL_36;
    goto LABEL_116;
  }
LABEL_115:
  PB::TextFormatter::format(a2, "energyMetRollover1", *((_BYTE *)this + 186));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 1) == 0)
  {
LABEL_36:
    if ((v5 & 0x10) == 0)
      goto LABEL_37;
    goto LABEL_117;
  }
LABEL_116:
  PB::TextFormatter::format(a2, "energyMetRollover2", *((_BYTE *)this + 187));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x10) == 0)
  {
LABEL_37:
    if ((v5 & 0x20) == 0)
      goto LABEL_38;
    goto LABEL_118;
  }
LABEL_117:
  PB::TextFormatter::format(a2, "epochNumber", *((_DWORD *)this + 10));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x20) == 0)
  {
LABEL_38:
    if ((v5 & 0x40) == 0)
      goto LABEL_39;
    goto LABEL_119;
  }
LABEL_118:
  PB::TextFormatter::format(a2, "maxChaos", *((float *)this + 11));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x40) == 0)
  {
LABEL_39:
    if ((v5 & 0x80) == 0)
      goto LABEL_40;
    goto LABEL_120;
  }
LABEL_119:
  PB::TextFormatter::format(a2, "maxChaos0", *((float *)this + 12));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x80) == 0)
  {
LABEL_40:
    if ((v5 & 0x100) == 0)
      goto LABEL_41;
    goto LABEL_121;
  }
LABEL_120:
  PB::TextFormatter::format(a2, "maxChaos1", *((float *)this + 13));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x100) == 0)
  {
LABEL_41:
    if ((v5 & 0x200) == 0)
      goto LABEL_42;
    goto LABEL_122;
  }
LABEL_121:
  PB::TextFormatter::format(a2, "maxChaos2", *((float *)this + 14));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x200) == 0)
  {
LABEL_42:
    if ((v5 & 0x400) == 0)
      goto LABEL_43;
    goto LABEL_123;
  }
LABEL_122:
  PB::TextFormatter::format(a2, "maxChaosRollover", *((float *)this + 15));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x400) == 0)
  {
LABEL_43:
    if ((v5 & 0x800) == 0)
      goto LABEL_44;
    goto LABEL_124;
  }
LABEL_123:
  PB::TextFormatter::format(a2, "maxChaosRollover0", *((float *)this + 16));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x800) == 0)
  {
LABEL_44:
    if ((v5 & 0x1000) == 0)
      goto LABEL_45;
    goto LABEL_125;
  }
LABEL_124:
  PB::TextFormatter::format(a2, "maxChaosRollover1", *((float *)this + 17));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x1000) == 0)
  {
LABEL_45:
    if ((v5 & 0x2000) == 0)
      goto LABEL_46;
    goto LABEL_126;
  }
LABEL_125:
  PB::TextFormatter::format(a2, "maxChaosRollover2", *((float *)this + 18));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x2000) == 0)
  {
LABEL_46:
    if ((v5 & 0x4000) == 0)
      goto LABEL_47;
    goto LABEL_127;
  }
LABEL_126:
  PB::TextFormatter::format(a2, "maxEnergy", *((float *)this + 19));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x4000) == 0)
  {
LABEL_47:
    if ((v5 & 0x8000) == 0)
      goto LABEL_48;
    goto LABEL_128;
  }
LABEL_127:
  PB::TextFormatter::format(a2, "maxEnergy0", *((float *)this + 20));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x8000) == 0)
  {
LABEL_48:
    if ((v5 & 0x10000) == 0)
      goto LABEL_49;
    goto LABEL_129;
  }
LABEL_128:
  PB::TextFormatter::format(a2, "maxEnergy1", *((float *)this + 21));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x10000) == 0)
  {
LABEL_49:
    if ((v5 & 0x20000) == 0)
      goto LABEL_50;
    goto LABEL_130;
  }
LABEL_129:
  PB::TextFormatter::format(a2, "maxEnergy2", *((float *)this + 22));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x20000) == 0)
  {
LABEL_50:
    if ((v5 & 0x40000) == 0)
      goto LABEL_51;
    goto LABEL_131;
  }
LABEL_130:
  PB::TextFormatter::format(a2, "maxEnergyRollover", *((float *)this + 23));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x40000) == 0)
  {
LABEL_51:
    if ((v5 & 0x80000) == 0)
      goto LABEL_52;
    goto LABEL_132;
  }
LABEL_131:
  PB::TextFormatter::format(a2, "maxEnergyRollover0", *((float *)this + 24));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x80000) == 0)
  {
LABEL_52:
    if ((v5 & 0x100000) == 0)
      goto LABEL_53;
    goto LABEL_133;
  }
LABEL_132:
  PB::TextFormatter::format(a2, "maxEnergyRollover1", *((float *)this + 25));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x100000) == 0)
  {
LABEL_53:
    if ((v5 & 0x200000) == 0)
      goto LABEL_54;
    goto LABEL_134;
  }
LABEL_133:
  PB::TextFormatter::format(a2, "maxEnergyRollover2", *((float *)this + 26));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x200000) == 0)
  {
LABEL_54:
    if ((v5 & 0x400000) == 0)
      goto LABEL_55;
    goto LABEL_135;
  }
LABEL_134:
  PB::TextFormatter::format(a2, "maxRMS", *((float *)this + 27));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x400000) == 0)
  {
LABEL_55:
    if ((v5 & 0x800000) == 0)
      goto LABEL_56;
    goto LABEL_136;
  }
LABEL_135:
  PB::TextFormatter::format(a2, "maxRMS0", *((float *)this + 28));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x800000) == 0)
  {
LABEL_56:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_57;
    goto LABEL_137;
  }
LABEL_136:
  PB::TextFormatter::format(a2, "maxRMS1", *((float *)this + 29));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_57:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_58;
    goto LABEL_138;
  }
LABEL_137:
  PB::TextFormatter::format(a2, "maxRMS2", *((float *)this + 30));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_58:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_59;
    goto LABEL_139;
  }
LABEL_138:
  PB::TextFormatter::format(a2, "maxSaturation", *((float *)this + 31));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_59:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_60;
    goto LABEL_140;
  }
LABEL_139:
  PB::TextFormatter::format(a2, "maxSaturation0", *((float *)this + 32));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_60:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_61;
    goto LABEL_141;
  }
LABEL_140:
  PB::TextFormatter::format(a2, "maxSaturation1", *((float *)this + 33));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_61:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_62;
    goto LABEL_142;
  }
LABEL_141:
  PB::TextFormatter::format(a2, "maxSaturation2", *((float *)this + 34));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_62:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_63;
    goto LABEL_143;
  }
LABEL_142:
  PB::TextFormatter::format(a2, "maxSaturationRollover", *((float *)this + 35));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_63:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_64;
    goto LABEL_144;
  }
LABEL_143:
  PB::TextFormatter::format(a2, "maxSaturationRollover0", *((float *)this + 36));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_64:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_65;
    goto LABEL_145;
  }
LABEL_144:
  PB::TextFormatter::format(a2, "maxSaturationRollover1", *((float *)this + 37));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_65:
    if ((v6 & 2) == 0)
      goto LABEL_66;
    goto LABEL_146;
  }
LABEL_145:
  PB::TextFormatter::format(a2, "maxSaturationRollover2", *((float *)this + 38));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 2) == 0)
  {
LABEL_66:
    if ((v6 & 4) == 0)
      goto LABEL_67;
    goto LABEL_147;
  }
LABEL_146:
  PB::TextFormatter::format(a2, "passThru", *((_BYTE *)this + 188));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 4) == 0)
  {
LABEL_67:
    if ((v6 & 8) == 0)
      goto LABEL_68;
    goto LABEL_148;
  }
LABEL_147:
  PB::TextFormatter::format(a2, "passThruRollover", *((_BYTE *)this + 189));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 8) == 0)
  {
LABEL_68:
    if ((v6 & 0x10) == 0)
      goto LABEL_69;
    goto LABEL_149;
  }
LABEL_148:
  PB::TextFormatter::format(a2, "passthru0", *((_BYTE *)this + 190));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 0x10) == 0)
  {
LABEL_69:
    if ((v6 & 0x20) == 0)
      goto LABEL_70;
    goto LABEL_150;
  }
LABEL_149:
  PB::TextFormatter::format(a2, "passthru1", *((_BYTE *)this + 191));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 0x20) == 0)
  {
LABEL_70:
    if ((v6 & 0x40) == 0)
      goto LABEL_71;
    goto LABEL_151;
  }
LABEL_150:
  PB::TextFormatter::format(a2, "passthru2", *((_BYTE *)this + 192));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 0x40) == 0)
  {
LABEL_71:
    if ((v6 & 0x80) == 0)
      goto LABEL_72;
    goto LABEL_152;
  }
LABEL_151:
  PB::TextFormatter::format(a2, "passthruRollover0", *((_BYTE *)this + 193));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 0x80) == 0)
  {
LABEL_72:
    if ((v6 & 0x100) == 0)
      goto LABEL_73;
    goto LABEL_153;
  }
LABEL_152:
  PB::TextFormatter::format(a2, "passthruRollover1", *((_BYTE *)this + 194));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 0x100) == 0)
  {
LABEL_73:
    if ((v6 & 0x200) == 0)
      goto LABEL_74;
    goto LABEL_154;
  }
LABEL_153:
  PB::TextFormatter::format(a2, "passthruRollover2", *((_BYTE *)this + 195));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 0x200) == 0)
  {
LABEL_74:
    if ((v6 & 0x400) == 0)
      goto LABEL_75;
    goto LABEL_155;
  }
LABEL_154:
  PB::TextFormatter::format(a2, "saturationMet", *((_BYTE *)this + 196));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 0x400) == 0)
  {
LABEL_75:
    if ((v6 & 0x800) == 0)
      goto LABEL_76;
    goto LABEL_156;
  }
LABEL_155:
  PB::TextFormatter::format(a2, "saturationMet0", *((_BYTE *)this + 197));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 0x800) == 0)
  {
LABEL_76:
    if ((v6 & 0x1000) == 0)
      goto LABEL_77;
    goto LABEL_157;
  }
LABEL_156:
  PB::TextFormatter::format(a2, "saturationMet1", *((_BYTE *)this + 198));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 0x1000) == 0)
  {
LABEL_77:
    if ((v6 & 0x2000) == 0)
      goto LABEL_78;
    goto LABEL_158;
  }
LABEL_157:
  PB::TextFormatter::format(a2, "saturationMet2", *((_BYTE *)this + 199));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 0x2000) == 0)
  {
LABEL_78:
    if ((v6 & 0x4000) == 0)
      goto LABEL_79;
    goto LABEL_159;
  }
LABEL_158:
  PB::TextFormatter::format(a2, "saturationMetRollover", *((_BYTE *)this + 200));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 0x4000) == 0)
  {
LABEL_79:
    if ((v6 & 0x8000) == 0)
      goto LABEL_80;
    goto LABEL_160;
  }
LABEL_159:
  PB::TextFormatter::format(a2, "saturationMetRollover0", *((_BYTE *)this + 201));
  v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v5 = *(_QWORD *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 0x8000) == 0)
  {
LABEL_80:
    if ((v6 & 0x10000) == 0)
      goto LABEL_81;
    goto LABEL_161;
  }
LABEL_160:
  PB::TextFormatter::format(a2, "saturationMetRollover1", *((_BYTE *)this + 202));
  v5 = *(_QWORD *)((char *)this + 204);
  if (((*((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16)) & 0x10000) == 0)
  {
LABEL_81:
    if ((v5 & 1) == 0)
      goto LABEL_82;
    goto LABEL_162;
  }
LABEL_161:
  PB::TextFormatter::format(a2, "saturationMetRollover2", *((_BYTE *)this + 203));
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 1) == 0)
  {
LABEL_82:
    if ((v5 & 2) == 0)
      goto LABEL_83;
    goto LABEL_163;
  }
LABEL_162:
  PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 1));
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 2) == 0)
  {
LABEL_83:
    if ((v5 & 4) == 0)
      goto LABEL_84;
LABEL_164:
    PB::TextFormatter::format(a2, "timestamp1", *((_QWORD *)this + 3));
    if ((*(_QWORD *)((_BYTE *)this + 204) & 8) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_85;
  }
LABEL_163:
  PB::TextFormatter::format(a2, "timestamp0", *((_QWORD *)this + 2));
  v5 = *(_QWORD *)((char *)this + 204);
  if ((v5 & 4) != 0)
    goto LABEL_164;
LABEL_84:
  if ((v5 & 8) != 0)
LABEL_85:
    PB::TextFormatter::format(a2, "timestamp2", *((_QWORD *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaRemoteAudioResult::readFrom(CMMsl::KappaRemoteAudioResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  char *v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  int v65;
  BOOL v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  int v73;
  BOOL v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  BOOL v78;
  char v79;
  unint64_t v80;
  unint64_t v81;
  int v82;
  BOOL v83;
  unint64_t v84;
  unint64_t v85;
  int v86;
  BOOL v87;
  unint64_t v88;
  unint64_t v89;
  int v90;
  BOOL v91;
  char v92;
  unint64_t v93;
  unint64_t v94;
  int v95;
  BOOL v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  int v102;
  BOOL v103;
  unint64_t v104;
  unint64_t v105;
  int v106;
  BOOL v107;
  char v108;
  unint64_t v109;
  unint64_t v110;
  int v111;
  BOOL v112;
  unint64_t v113;
  unint64_t v114;
  int v115;
  BOOL v116;
  unint64_t v117;
  unint64_t v118;
  int v119;
  BOOL v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  int v127;
  BOOL v128;
  unint64_t v129;
  unint64_t v130;
  int v131;
  BOOL v132;
  char v133;
  unint64_t v134;
  unint64_t v135;
  int v136;
  BOOL v137;
  unint64_t v138;
  unint64_t v139;
  int v140;
  BOOL v141;
  unint64_t v142;
  unint64_t v143;
  int v144;
  BOOL v145;
  char v146;
  unint64_t v147;
  unint64_t v148;
  int v149;
  BOOL v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  char v154;
  unint64_t v155;
  unint64_t v156;
  int v157;
  BOOL v158;
  unint64_t v159;
  unint64_t v160;
  int v161;
  BOOL v162;
  int v163;
  unsigned int v164;
  unint64_t v165;
  unint64_t v166;
  int v167;
  BOOL v168;
  unint64_t v169;
  unint64_t v170;
  int v171;
  BOOL v172;
  unint64_t v173;
  unint64_t v174;
  int v175;
  BOOL v176;
  char v177;
  unint64_t v178;
  unint64_t v179;
  int v180;
  BOOL v181;
  uint64_t result;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  int v189;
  BOOL v190;
  unint64_t v191;
  unint64_t v192;
  int v193;
  BOOL v194;
  char v195;
  unint64_t v196;
  unint64_t v197;
  int v198;
  BOOL v199;
  unint64_t v200;
  unint64_t v201;
  int v202;
  BOOL v203;
  unint64_t v204;
  unint64_t v205;
  int v206;
  BOOL v207;
  char v208;
  unint64_t v209;
  unint64_t v210;
  int v211;
  BOOL v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  int v218;
  BOOL v219;
  unint64_t v220;
  unint64_t v221;
  int v222;
  BOOL v223;
  char v224;
  unint64_t v225;
  unint64_t v226;
  int v227;
  BOOL v228;
  unint64_t v229;
  unint64_t v230;
  int v231;
  BOOL v232;
  unint64_t v233;
  unint64_t v234;
  int v235;
  BOOL v236;
  char v237;
  unint64_t v238;
  unint64_t v239;
  int v240;
  BOOL v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  int v248;
  BOOL v249;
  unint64_t v250;
  unint64_t v251;
  int v252;
  BOOL v253;
  char v254;
  unint64_t v255;
  unint64_t v256;
  int v257;
  BOOL v258;
  unint64_t v259;
  unint64_t v260;
  int v261;
  BOOL v262;
  unint64_t v263;
  unint64_t v264;
  int v265;
  BOOL v266;
  char v267;
  unint64_t v268;
  unint64_t v269;
  int v270;
  BOOL v271;
  unint64_t v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  int v277;
  BOOL v278;
  unint64_t v279;
  unint64_t v280;
  int v281;
  BOOL v282;
  char v283;
  unint64_t v284;
  unint64_t v285;
  int v286;
  BOOL v287;
  unint64_t v288;
  unint64_t v289;
  int v290;
  BOOL v291;
  unint64_t v292;
  unint64_t v293;
  int v294;
  BOOL v295;
  char v296;
  unint64_t v297;
  unint64_t v298;
  int v299;
  BOOL v300;
  char v301;
  unsigned int v302;
  unint64_t v303;
  char v304;
  char v305;
  unsigned int v306;
  unint64_t v307;
  char v308;
  char v309;
  unsigned int v310;
  unint64_t v311;
  char v312;
  char v313;
  unsigned int v314;
  unint64_t v315;
  char v316;
  char v317;
  unsigned int v318;
  unint64_t v319;
  char v320;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (char *)this + 204;
    while (1)
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_20;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v21 = v12 >> 3;
      if ((int)(v12 >> 3) > 1102)
      {
        switch((int)v21)
        {
          case 1103:
            *(_QWORD *)v8 |= 4uLL;
            v46 = *((_QWORD *)a2 + 1);
            v47 = *((_QWORD *)a2 + 2);
            v48 = *(_QWORD *)a2;
            if (v46 <= 0xFFFFFFFFFFFFFFF5 && v46 + 10 <= v47)
            {
              v49 = 0;
              v50 = 0;
              v51 = 0;
              do
              {
                v52 = v46 + 1;
                *((_QWORD *)a2 + 1) = v46 + 1;
                v53 = *(_BYTE *)(v48 + v46);
                v51 |= (unint64_t)(v53 & 0x7F) << v49;
                if ((v53 & 0x80) == 0)
                  goto LABEL_398;
                v49 += 7;
                v46 = v52;
                v15 = v50++ > 8;
              }
              while (!v15);
LABEL_272:
              v51 = 0;
              goto LABEL_398;
            }
            v313 = 0;
            v314 = 0;
            v51 = 0;
            if (v47 <= v46)
              v47 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v47 == v46)
              {
                v51 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v315 = v46 + 1;
                v316 = *(_BYTE *)(v48 + v46);
                *((_QWORD *)a2 + 1) = v315;
                v51 |= (unint64_t)(v316 & 0x7F) << v313;
                if (v316 < 0)
                {
                  v313 += 7;
                  v46 = v315;
                  v15 = v314++ > 8;
                  if (v15)
                    goto LABEL_272;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v51 = 0;
              }
              break;
            }
LABEL_398:
            *((_QWORD *)this + 3) = v51;
            goto LABEL_378;
          case 1104:
            *(_QWORD *)v8 |= 0x800000uLL;
            v242 = *((_QWORD *)a2 + 1);
            if (v242 > 0xFFFFFFFFFFFFFFFBLL || v242 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_232;
            *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v242);
            goto LABEL_377;
          case 1105:
            *(_QWORD *)v8 |= 0x8000uLL;
            v243 = *((_QWORD *)a2 + 1);
            if (v243 > 0xFFFFFFFFFFFFFFFBLL || v243 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_232;
            *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v243);
            goto LABEL_377;
          case 1106:
            *(_QWORD *)v8 |= 0x80uLL;
            v244 = *((_QWORD *)a2 + 1);
            if (v244 > 0xFFFFFFFFFFFFFFFBLL || v244 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_232;
            *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v244);
            goto LABEL_377;
          case 1107:
            *(_QWORD *)v8 |= 0x8000000uLL;
            v245 = *((_QWORD *)a2 + 1);
            if (v245 > 0xFFFFFFFFFFFFFFFBLL || v245 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_232;
            *((_DWORD *)this + 33) = *(_DWORD *)(*(_QWORD *)a2 + v245);
            goto LABEL_377;
          case 1108:
            *(_QWORD *)v8 |= 0x800000000000000uLL;
            v246 = *((_QWORD *)a2 + 1);
            if (v246 >= *((_QWORD *)a2 + 2))
            {
              v249 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v247 = v246 + 1;
              v248 = *(unsigned __int8 *)(*(_QWORD *)a2 + v246);
              *((_QWORD *)a2 + 1) = v247;
              v249 = v248 != 0;
            }
            *((_BYTE *)this + 182) = v249;
            goto LABEL_378;
          case 1109:
            *(_QWORD *)v8 |= 0x800000000uLL;
            v250 = *((_QWORD *)a2 + 1);
            if (v250 >= *((_QWORD *)a2 + 2))
            {
              v253 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v251 = v250 + 1;
              v252 = *(unsigned __int8 *)(*(_QWORD *)a2 + v250);
              *((_QWORD *)a2 + 1) = v251;
              v253 = v252 != 0;
            }
            *((_BYTE *)this + 158) = v253;
            goto LABEL_378;
          case 1110:
            v254 = v8[10];
            *((_WORD *)v8 + 4) |= 0x800u;
            v8[10] = v254;
            v255 = *((_QWORD *)a2 + 1);
            if (v255 >= *((_QWORD *)a2 + 2))
            {
              v258 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v256 = v255 + 1;
              v257 = *(unsigned __int8 *)(*(_QWORD *)a2 + v255);
              *((_QWORD *)a2 + 1) = v256;
              v258 = v257 != 0;
            }
            *((_BYTE *)this + 198) = v258;
            goto LABEL_378;
          case 1111:
            *(_QWORD *)v8 |= 0x80000000000uLL;
            v259 = *((_QWORD *)a2 + 1);
            if (v259 >= *((_QWORD *)a2 + 2))
            {
              v262 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v260 = v259 + 1;
              v261 = *(unsigned __int8 *)(*(_QWORD *)a2 + v259);
              *((_QWORD *)a2 + 1) = v260;
              v262 = v261 != 0;
            }
            *((_BYTE *)this + 166) = v262;
            goto LABEL_378;
          case 1112:
            *(_QWORD *)v8 |= 0x8000000000000uLL;
            v263 = *((_QWORD *)a2 + 1);
            if (v263 >= *((_QWORD *)a2 + 2))
            {
              v266 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v264 = v263 + 1;
              v265 = *(unsigned __int8 *)(*(_QWORD *)a2 + v263);
              *((_QWORD *)a2 + 1) = v264;
              v266 = v265 != 0;
            }
            *((_BYTE *)this + 174) = v266;
            goto LABEL_378;
          case 1113:
            v267 = v8[10];
            *((_WORD *)v8 + 4) |= 0x10u;
            v8[10] = v267;
            v268 = *((_QWORD *)a2 + 1);
            if (v268 >= *((_QWORD *)a2 + 2))
            {
              v271 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v269 = v268 + 1;
              v270 = *(unsigned __int8 *)(*(_QWORD *)a2 + v268);
              *((_QWORD *)a2 + 1) = v269;
              v271 = v270 != 0;
            }
            *((_BYTE *)this + 191) = v271;
            goto LABEL_378;
          case 1114:
            *(_QWORD *)v8 |= 0x80000uLL;
            v272 = *((_QWORD *)a2 + 1);
            if (v272 > 0xFFFFFFFFFFFFFFFBLL || v272 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_232;
            *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v272);
            goto LABEL_377;
          case 1115:
            *(_QWORD *)v8 |= 0x800uLL;
            v273 = *((_QWORD *)a2 + 1);
            if (v273 > 0xFFFFFFFFFFFFFFFBLL || v273 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_232;
            *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v273);
            goto LABEL_377;
          case 1116:
            *(_QWORD *)v8 |= 0x80000000uLL;
            v274 = *((_QWORD *)a2 + 1);
            if (v274 <= 0xFFFFFFFFFFFFFFFBLL && v274 + 4 <= *((_QWORD *)a2 + 2))
            {
              *((_DWORD *)this + 37) = *(_DWORD *)(*(_QWORD *)a2 + v274);
LABEL_377:
              *((_QWORD *)a2 + 1) += 4;
            }
            else
            {
LABEL_232:
              *((_BYTE *)a2 + 24) = 1;
            }
            goto LABEL_378;
          case 1117:
            *(_QWORD *)v8 |= 0x8000000000000000;
            v275 = *((_QWORD *)a2 + 1);
            if (v275 >= *((_QWORD *)a2 + 2))
            {
              v278 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v276 = v275 + 1;
              v277 = *(unsigned __int8 *)(*(_QWORD *)a2 + v275);
              *((_QWORD *)a2 + 1) = v276;
              v278 = v277 != 0;
            }
            *((_BYTE *)this + 186) = v278;
            goto LABEL_378;
          case 1118:
            *(_QWORD *)v8 |= 0x8000000000uLL;
            v279 = *((_QWORD *)a2 + 1);
            if (v279 >= *((_QWORD *)a2 + 2))
            {
              v282 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v280 = v279 + 1;
              v281 = *(unsigned __int8 *)(*(_QWORD *)a2 + v279);
              *((_QWORD *)a2 + 1) = v280;
              v282 = v281 != 0;
            }
            *((_BYTE *)this + 162) = v282;
            goto LABEL_378;
          case 1119:
            v283 = v8[10];
            *((_WORD *)v8 + 4) |= 0x8000u;
            v8[10] = v283;
            v284 = *((_QWORD *)a2 + 1);
            if (v284 >= *((_QWORD *)a2 + 2))
            {
              v287 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v285 = v284 + 1;
              v286 = *(unsigned __int8 *)(*(_QWORD *)a2 + v284);
              *((_QWORD *)a2 + 1) = v285;
              v287 = v286 != 0;
            }
            *((_BYTE *)this + 202) = v287;
            goto LABEL_378;
          case 1120:
            *(_QWORD *)v8 |= 0x800000000000uLL;
            v288 = *((_QWORD *)a2 + 1);
            if (v288 >= *((_QWORD *)a2 + 2))
            {
              v291 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v289 = v288 + 1;
              v290 = *(unsigned __int8 *)(*(_QWORD *)a2 + v288);
              *((_QWORD *)a2 + 1) = v289;
              v291 = v290 != 0;
            }
            *((_BYTE *)this + 170) = v291;
            goto LABEL_378;
          case 1121:
            *(_QWORD *)v8 |= 0x80000000000000uLL;
            v292 = *((_QWORD *)a2 + 1);
            if (v292 >= *((_QWORD *)a2 + 2))
            {
              v295 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v293 = v292 + 1;
              v294 = *(unsigned __int8 *)(*(_QWORD *)a2 + v292);
              *((_QWORD *)a2 + 1) = v293;
              v295 = v294 != 0;
            }
            *((_BYTE *)this + 178) = v295;
            goto LABEL_378;
          case 1122:
            v296 = v8[10];
            *((_WORD *)v8 + 4) |= 0x80u;
            v8[10] = v296;
            v297 = *((_QWORD *)a2 + 1);
            if (v297 >= *((_QWORD *)a2 + 2))
            {
              v300 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v298 = v297 + 1;
              v299 = *(unsigned __int8 *)(*(_QWORD *)a2 + v297);
              *((_QWORD *)a2 + 1) = v298;
              v300 = v299 != 0;
            }
            *((_BYTE *)this + 194) = v300;
            goto LABEL_378;
          default:
            switch((int)v21)
            {
              case 1203:
                *(_QWORD *)v8 |= 8uLL;
                v30 = *((_QWORD *)a2 + 1);
                v31 = *((_QWORD *)a2 + 2);
                v32 = *(_QWORD *)a2;
                if (v30 <= 0xFFFFFFFFFFFFFFF5 && v30 + 10 <= v31)
                {
                  v33 = 0;
                  v34 = 0;
                  v35 = 0;
                  do
                  {
                    v36 = v30 + 1;
                    *((_QWORD *)a2 + 1) = v30 + 1;
                    v37 = *(_BYTE *)(v32 + v30);
                    v35 |= (unint64_t)(v37 & 0x7F) << v33;
                    if ((v37 & 0x80) == 0)
                      goto LABEL_390;
                    v33 += 7;
                    v30 = v36;
                    v15 = v34++ > 8;
                  }
                  while (!v15);
LABEL_258:
                  v35 = 0;
                  goto LABEL_390;
                }
                v305 = 0;
                v306 = 0;
                v35 = 0;
                if (v31 <= v30)
                  v31 = *((_QWORD *)a2 + 1);
                break;
              case 1204:
                *(_QWORD *)v8 |= 0x1000000uLL;
                v121 = *((_QWORD *)a2 + 1);
                if (v121 > 0xFFFFFFFFFFFFFFFBLL || v121 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_232;
                *((_DWORD *)this + 30) = *(_DWORD *)(*(_QWORD *)a2 + v121);
                goto LABEL_377;
              case 1205:
                *(_QWORD *)v8 |= 0x10000uLL;
                v122 = *((_QWORD *)a2 + 1);
                if (v122 > 0xFFFFFFFFFFFFFFFBLL || v122 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_232;
                *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v122);
                goto LABEL_377;
              case 1206:
                *(_QWORD *)v8 |= 0x100uLL;
                v123 = *((_QWORD *)a2 + 1);
                if (v123 > 0xFFFFFFFFFFFFFFFBLL || v123 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_232;
                *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v123);
                goto LABEL_377;
              case 1207:
                *(_QWORD *)v8 |= 0x10000000uLL;
                v124 = *((_QWORD *)a2 + 1);
                if (v124 > 0xFFFFFFFFFFFFFFFBLL || v124 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_232;
                *((_DWORD *)this + 34) = *(_DWORD *)(*(_QWORD *)a2 + v124);
                goto LABEL_377;
              case 1208:
                *(_QWORD *)v8 |= 0x1000000000000000uLL;
                v125 = *((_QWORD *)a2 + 1);
                if (v125 >= *((_QWORD *)a2 + 2))
                {
                  v128 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v126 = v125 + 1;
                  v127 = *(unsigned __int8 *)(*(_QWORD *)a2 + v125);
                  *((_QWORD *)a2 + 1) = v126;
                  v128 = v127 != 0;
                }
                *((_BYTE *)this + 183) = v128;
                goto LABEL_378;
              case 1209:
                *(_QWORD *)v8 |= 0x1000000000uLL;
                v129 = *((_QWORD *)a2 + 1);
                if (v129 >= *((_QWORD *)a2 + 2))
                {
                  v132 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v130 = v129 + 1;
                  v131 = *(unsigned __int8 *)(*(_QWORD *)a2 + v129);
                  *((_QWORD *)a2 + 1) = v130;
                  v132 = v131 != 0;
                }
                *((_BYTE *)this + 159) = v132;
                goto LABEL_378;
              case 1210:
                v133 = v8[10];
                *((_WORD *)v8 + 4) |= 0x1000u;
                v8[10] = v133;
                v134 = *((_QWORD *)a2 + 1);
                if (v134 >= *((_QWORD *)a2 + 2))
                {
                  v137 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v135 = v134 + 1;
                  v136 = *(unsigned __int8 *)(*(_QWORD *)a2 + v134);
                  *((_QWORD *)a2 + 1) = v135;
                  v137 = v136 != 0;
                }
                *((_BYTE *)this + 199) = v137;
                goto LABEL_378;
              case 1211:
                *(_QWORD *)v8 |= 0x100000000000uLL;
                v138 = *((_QWORD *)a2 + 1);
                if (v138 >= *((_QWORD *)a2 + 2))
                {
                  v141 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v139 = v138 + 1;
                  v140 = *(unsigned __int8 *)(*(_QWORD *)a2 + v138);
                  *((_QWORD *)a2 + 1) = v139;
                  v141 = v140 != 0;
                }
                *((_BYTE *)this + 167) = v141;
                goto LABEL_378;
              case 1212:
                *(_QWORD *)v8 |= 0x10000000000000uLL;
                v142 = *((_QWORD *)a2 + 1);
                if (v142 >= *((_QWORD *)a2 + 2))
                {
                  v145 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v143 = v142 + 1;
                  v144 = *(unsigned __int8 *)(*(_QWORD *)a2 + v142);
                  *((_QWORD *)a2 + 1) = v143;
                  v145 = v144 != 0;
                }
                *((_BYTE *)this + 175) = v145;
                goto LABEL_378;
              case 1213:
                v146 = v8[10];
                *((_WORD *)v8 + 4) |= 0x20u;
                v8[10] = v146;
                v147 = *((_QWORD *)a2 + 1);
                if (v147 >= *((_QWORD *)a2 + 2))
                {
                  v150 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v148 = v147 + 1;
                  v149 = *(unsigned __int8 *)(*(_QWORD *)a2 + v147);
                  *((_QWORD *)a2 + 1) = v148;
                  v150 = v149 != 0;
                }
                *((_BYTE *)this + 192) = v150;
                goto LABEL_378;
              case 1214:
                *(_QWORD *)v8 |= 0x100000uLL;
                v151 = *((_QWORD *)a2 + 1);
                if (v151 > 0xFFFFFFFFFFFFFFFBLL || v151 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_232;
                *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v151);
                goto LABEL_377;
              case 1215:
                *(_QWORD *)v8 |= 0x1000uLL;
                v152 = *((_QWORD *)a2 + 1);
                if (v152 > 0xFFFFFFFFFFFFFFFBLL || v152 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_232;
                *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v152);
                goto LABEL_377;
              case 1216:
                *(_QWORD *)v8 |= (unint64_t)&_mh_execute_header;
                v153 = *((_QWORD *)a2 + 1);
                if (v153 > 0xFFFFFFFFFFFFFFFBLL || v153 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_232;
                *((_DWORD *)this + 38) = *(_DWORD *)(*(_QWORD *)a2 + v153);
                goto LABEL_377;
              case 1217:
                v154 = v8[10];
                *((_WORD *)v8 + 4) |= 1u;
                v8[10] = v154;
                v155 = *((_QWORD *)a2 + 1);
                if (v155 >= *((_QWORD *)a2 + 2))
                {
                  v158 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v156 = v155 + 1;
                  v157 = *(unsigned __int8 *)(*(_QWORD *)a2 + v155);
                  *((_QWORD *)a2 + 1) = v156;
                  v158 = v157 != 0;
                }
                *((_BYTE *)this + 187) = v158;
                goto LABEL_378;
              case 1218:
                *(_QWORD *)v8 |= 0x10000000000uLL;
                v159 = *((_QWORD *)a2 + 1);
                if (v159 >= *((_QWORD *)a2 + 2))
                {
                  v162 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v160 = v159 + 1;
                  v161 = *(unsigned __int8 *)(*(_QWORD *)a2 + v159);
                  *((_QWORD *)a2 + 1) = v160;
                  v162 = v161 != 0;
                }
                *((_BYTE *)this + 163) = v162;
                goto LABEL_378;
              case 1219:
                v163 = *((unsigned __int16 *)v8 + 4);
                v164 = (v163 | (v8[10] << 16) | 0x10000u) >> 16;
                *((_WORD *)v8 + 4) = v163;
                v8[10] = v164;
                v165 = *((_QWORD *)a2 + 1);
                if (v165 >= *((_QWORD *)a2 + 2))
                {
                  v168 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v166 = v165 + 1;
                  v167 = *(unsigned __int8 *)(*(_QWORD *)a2 + v165);
                  *((_QWORD *)a2 + 1) = v166;
                  v168 = v167 != 0;
                }
                *((_BYTE *)this + 203) = v168;
                goto LABEL_378;
              case 1220:
                *(_QWORD *)v8 |= 0x1000000000000uLL;
                v169 = *((_QWORD *)a2 + 1);
                if (v169 >= *((_QWORD *)a2 + 2))
                {
                  v172 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v170 = v169 + 1;
                  v171 = *(unsigned __int8 *)(*(_QWORD *)a2 + v169);
                  *((_QWORD *)a2 + 1) = v170;
                  v172 = v171 != 0;
                }
                *((_BYTE *)this + 171) = v172;
                goto LABEL_378;
              case 1221:
                *(_QWORD *)v8 |= 0x100000000000000uLL;
                v173 = *((_QWORD *)a2 + 1);
                if (v173 >= *((_QWORD *)a2 + 2))
                {
                  v176 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v174 = v173 + 1;
                  v175 = *(unsigned __int8 *)(*(_QWORD *)a2 + v173);
                  *((_QWORD *)a2 + 1) = v174;
                  v176 = v175 != 0;
                }
                *((_BYTE *)this + 179) = v176;
                goto LABEL_378;
              case 1222:
                v177 = v8[10];
                *((_WORD *)v8 + 4) |= 0x100u;
                v8[10] = v177;
                v178 = *((_QWORD *)a2 + 1);
                if (v178 >= *((_QWORD *)a2 + 2))
                {
                  v181 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v179 = v178 + 1;
                  v180 = *(unsigned __int8 *)(*(_QWORD *)a2 + v178);
                  *((_QWORD *)a2 + 1) = v179;
                  v181 = v180 != 0;
                }
                *((_BYTE *)this + 195) = v181;
                goto LABEL_378;
              default:
LABEL_153:
                result = PB::Reader::skip(a2, v21, v12 & 7, 0);
                if (!(_DWORD)result)
                  return result;
                goto LABEL_378;
            }
            break;
        }
        while (1)
        {
          if (v31 == v30)
          {
            v35 = 0;
            *((_BYTE *)a2 + 24) = 1;
            goto LABEL_390;
          }
          v307 = v30 + 1;
          v308 = *(_BYTE *)(v32 + v30);
          *((_QWORD *)a2 + 1) = v307;
          v35 |= (unint64_t)(v308 & 0x7F) << v305;
          if ((v308 & 0x80) == 0)
            break;
          v305 += 7;
          v30 = v307;
          v15 = v306++ > 8;
          if (v15)
            goto LABEL_258;
        }
        if (*((_BYTE *)a2 + 24))
          v35 = 0;
LABEL_390:
        *((_QWORD *)this + 4) = v35;
      }
      else
      {
        switch((int)v21)
        {
          case 'e':
            *(_QWORD *)v8 |= 1uLL;
            v22 = *((_QWORD *)a2 + 1);
            v23 = *((_QWORD *)a2 + 2);
            v24 = *(_QWORD *)a2;
            if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
            {
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v28 = v22 + 1;
                *((_QWORD *)a2 + 1) = v22 + 1;
                v29 = *(_BYTE *)(v24 + v22);
                v27 |= (unint64_t)(v29 & 0x7F) << v25;
                if ((v29 & 0x80) == 0)
                  goto LABEL_386;
                v25 += 7;
                v22 = v28;
                v15 = v26++ > 8;
              }
              while (!v15);
LABEL_251:
              v27 = 0;
              goto LABEL_386;
            }
            v301 = 0;
            v302 = 0;
            v27 = 0;
            if (v23 <= v22)
              v23 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v23 == v22)
              {
                v27 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v303 = v22 + 1;
                v304 = *(_BYTE *)(v24 + v22);
                *((_QWORD *)a2 + 1) = v303;
                v27 |= (unint64_t)(v304 & 0x7F) << v301;
                if (v304 < 0)
                {
                  v301 += 7;
                  v22 = v303;
                  v15 = v302++ > 8;
                  if (v15)
                    goto LABEL_251;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  v27 = 0;
              }
              break;
            }
LABEL_386:
            *((_QWORD *)this + 1) = v27;
            goto LABEL_378;
          case 'f':
            *(_QWORD *)v8 |= 0x10uLL;
            v54 = *((_QWORD *)a2 + 1);
            v55 = *((_QWORD *)a2 + 2);
            v56 = *(_QWORD *)a2;
            if (v54 <= 0xFFFFFFFFFFFFFFF5 && v54 + 10 <= v55)
            {
              v57 = 0;
              v58 = 0;
              v59 = 0;
              do
              {
                v60 = v54 + 1;
                *((_QWORD *)a2 + 1) = v54 + 1;
                v61 = *(_BYTE *)(v56 + v54);
                v59 |= (unint64_t)(v61 & 0x7F) << v57;
                if ((v61 & 0x80) == 0)
                  goto LABEL_402;
                v57 += 7;
                v54 = v60;
                v15 = v58++ > 8;
              }
              while (!v15);
LABEL_279:
              LODWORD(v59) = 0;
              goto LABEL_402;
            }
            v317 = 0;
            v318 = 0;
            v59 = 0;
            if (v55 <= v54)
              v55 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v55 == v54)
              {
                LODWORD(v59) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v319 = v54 + 1;
                v320 = *(_BYTE *)(v56 + v54);
                *((_QWORD *)a2 + 1) = v319;
                v59 |= (unint64_t)(v320 & 0x7F) << v317;
                if (v320 < 0)
                {
                  v317 += 7;
                  v54 = v319;
                  v15 = v318++ > 8;
                  if (v15)
                    goto LABEL_279;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v59) = 0;
              }
              break;
            }
LABEL_402:
            *((_DWORD *)this + 10) = v59;
            goto LABEL_378;
          case 'g':
            v62 = v8[10];
            *((_WORD *)v8 + 4) |= 2u;
            v8[10] = v62;
            v63 = *((_QWORD *)a2 + 1);
            if (v63 >= *((_QWORD *)a2 + 2))
            {
              v66 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v64 = v63 + 1;
              v65 = *(unsigned __int8 *)(*(_QWORD *)a2 + v63);
              *((_QWORD *)a2 + 1) = v64;
              v66 = v65 != 0;
            }
            *((_BYTE *)this + 188) = v66;
            goto LABEL_378;
          case 'h':
            *(_QWORD *)v8 |= 0x200000uLL;
            v67 = *((_QWORD *)a2 + 1);
            if (v67 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_232;
            *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v67);
            goto LABEL_377;
          case 'i':
            *(_QWORD *)v8 |= 0x2000uLL;
            v68 = *((_QWORD *)a2 + 1);
            if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_232;
            *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v68);
            goto LABEL_377;
          case 'j':
            *(_QWORD *)v8 |= 0x20uLL;
            v69 = *((_QWORD *)a2 + 1);
            if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_232;
            *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v69);
            goto LABEL_377;
          case 'k':
            *(_QWORD *)v8 |= 0x2000000uLL;
            v70 = *((_QWORD *)a2 + 1);
            if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_232;
            *((_DWORD *)this + 31) = *(_DWORD *)(*(_QWORD *)a2 + v70);
            goto LABEL_377;
          case 'l':
            *(_QWORD *)v8 |= 0x200000000000000uLL;
            v71 = *((_QWORD *)a2 + 1);
            if (v71 >= *((_QWORD *)a2 + 2))
            {
              v74 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v72 = v71 + 1;
              v73 = *(unsigned __int8 *)(*(_QWORD *)a2 + v71);
              *((_QWORD *)a2 + 1) = v72;
              v74 = v73 != 0;
            }
            *((_BYTE *)this + 180) = v74;
            goto LABEL_378;
          case 'm':
            *(_QWORD *)v8 |= 0x200000000uLL;
            v75 = *((_QWORD *)a2 + 1);
            if (v75 >= *((_QWORD *)a2 + 2))
            {
              v78 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v76 = v75 + 1;
              v77 = *(unsigned __int8 *)(*(_QWORD *)a2 + v75);
              *((_QWORD *)a2 + 1) = v76;
              v78 = v77 != 0;
            }
            *((_BYTE *)this + 156) = v78;
            goto LABEL_378;
          case 'n':
            v79 = v8[10];
            *((_WORD *)v8 + 4) |= 0x200u;
            v8[10] = v79;
            v80 = *((_QWORD *)a2 + 1);
            if (v80 >= *((_QWORD *)a2 + 2))
            {
              v83 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v81 = v80 + 1;
              v82 = *(unsigned __int8 *)(*(_QWORD *)a2 + v80);
              *((_QWORD *)a2 + 1) = v81;
              v83 = v82 != 0;
            }
            *((_BYTE *)this + 196) = v83;
            goto LABEL_378;
          case 'o':
            *(_QWORD *)v8 |= 0x20000000000uLL;
            v84 = *((_QWORD *)a2 + 1);
            if (v84 >= *((_QWORD *)a2 + 2))
            {
              v87 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v85 = v84 + 1;
              v86 = *(unsigned __int8 *)(*(_QWORD *)a2 + v84);
              *((_QWORD *)a2 + 1) = v85;
              v87 = v86 != 0;
            }
            *((_BYTE *)this + 164) = v87;
            goto LABEL_378;
          case 'p':
            *(_QWORD *)v8 |= 0x2000000000000uLL;
            v88 = *((_QWORD *)a2 + 1);
            if (v88 >= *((_QWORD *)a2 + 2))
            {
              v91 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v89 = v88 + 1;
              v90 = *(unsigned __int8 *)(*(_QWORD *)a2 + v88);
              *((_QWORD *)a2 + 1) = v89;
              v91 = v90 != 0;
            }
            *((_BYTE *)this + 172) = v91;
            goto LABEL_378;
          case 'q':
            v92 = v8[10];
            *((_WORD *)v8 + 4) |= 4u;
            v8[10] = v92;
            v93 = *((_QWORD *)a2 + 1);
            if (v93 >= *((_QWORD *)a2 + 2))
            {
              v96 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v94 = v93 + 1;
              v95 = *(unsigned __int8 *)(*(_QWORD *)a2 + v93);
              *((_QWORD *)a2 + 1) = v94;
              v96 = v95 != 0;
            }
            *((_BYTE *)this + 189) = v96;
            goto LABEL_378;
          case 'r':
            *(_QWORD *)v8 |= 0x20000uLL;
            v97 = *((_QWORD *)a2 + 1);
            if (v97 > 0xFFFFFFFFFFFFFFFBLL || v97 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_232;
            *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v97);
            goto LABEL_377;
          case 's':
            *(_QWORD *)v8 |= 0x200uLL;
            v98 = *((_QWORD *)a2 + 1);
            if (v98 > 0xFFFFFFFFFFFFFFFBLL || v98 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_232;
            *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v98);
            goto LABEL_377;
          case 't':
            *(_QWORD *)v8 |= 0x20000000uLL;
            v99 = *((_QWORD *)a2 + 1);
            if (v99 > 0xFFFFFFFFFFFFFFFBLL || v99 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_232;
            *((_DWORD *)this + 35) = *(_DWORD *)(*(_QWORD *)a2 + v99);
            goto LABEL_377;
          case 'u':
            *(_QWORD *)v8 |= 0x2000000000000000uLL;
            v100 = *((_QWORD *)a2 + 1);
            if (v100 >= *((_QWORD *)a2 + 2))
            {
              v103 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v101 = v100 + 1;
              v102 = *(unsigned __int8 *)(*(_QWORD *)a2 + v100);
              *((_QWORD *)a2 + 1) = v101;
              v103 = v102 != 0;
            }
            *((_BYTE *)this + 184) = v103;
            goto LABEL_378;
          case 'v':
            *(_QWORD *)v8 |= 0x2000000000uLL;
            v104 = *((_QWORD *)a2 + 1);
            if (v104 >= *((_QWORD *)a2 + 2))
            {
              v107 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v105 = v104 + 1;
              v106 = *(unsigned __int8 *)(*(_QWORD *)a2 + v104);
              *((_QWORD *)a2 + 1) = v105;
              v107 = v106 != 0;
            }
            *((_BYTE *)this + 160) = v107;
            goto LABEL_378;
          case 'w':
            v108 = v8[10];
            *((_WORD *)v8 + 4) |= 0x2000u;
            v8[10] = v108;
            v109 = *((_QWORD *)a2 + 1);
            if (v109 >= *((_QWORD *)a2 + 2))
            {
              v112 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v110 = v109 + 1;
              v111 = *(unsigned __int8 *)(*(_QWORD *)a2 + v109);
              *((_QWORD *)a2 + 1) = v110;
              v112 = v111 != 0;
            }
            *((_BYTE *)this + 200) = v112;
            goto LABEL_378;
          case 'x':
            *(_QWORD *)v8 |= 0x200000000000uLL;
            v113 = *((_QWORD *)a2 + 1);
            if (v113 >= *((_QWORD *)a2 + 2))
            {
              v116 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v114 = v113 + 1;
              v115 = *(unsigned __int8 *)(*(_QWORD *)a2 + v113);
              *((_QWORD *)a2 + 1) = v114;
              v116 = v115 != 0;
            }
            *((_BYTE *)this + 168) = v116;
            goto LABEL_378;
          case 'y':
            *(_QWORD *)v8 |= 0x20000000000000uLL;
            v117 = *((_QWORD *)a2 + 1);
            if (v117 >= *((_QWORD *)a2 + 2))
            {
              v120 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v118 = v117 + 1;
              v119 = *(unsigned __int8 *)(*(_QWORD *)a2 + v117);
              *((_QWORD *)a2 + 1) = v118;
              v120 = v119 != 0;
            }
            *((_BYTE *)this + 176) = v120;
            goto LABEL_378;
          default:
            switch((int)v21)
            {
              case 1003:
                *(_QWORD *)v8 |= 2uLL;
                v38 = *((_QWORD *)a2 + 1);
                v39 = *((_QWORD *)a2 + 2);
                v40 = *(_QWORD *)a2;
                if (v38 <= 0xFFFFFFFFFFFFFFF5 && v38 + 10 <= v39)
                {
                  v41 = 0;
                  v42 = 0;
                  v43 = 0;
                  do
                  {
                    v44 = v38 + 1;
                    *((_QWORD *)a2 + 1) = v38 + 1;
                    v45 = *(_BYTE *)(v40 + v38);
                    v43 |= (unint64_t)(v45 & 0x7F) << v41;
                    if ((v45 & 0x80) == 0)
                      goto LABEL_394;
                    v41 += 7;
                    v38 = v44;
                    v15 = v42++ > 8;
                  }
                  while (!v15);
LABEL_265:
                  v43 = 0;
                  goto LABEL_394;
                }
                v309 = 0;
                v310 = 0;
                v43 = 0;
                if (v39 <= v38)
                  v39 = *((_QWORD *)a2 + 1);
                break;
              case 1004:
                *(_QWORD *)v8 |= 0x400000uLL;
                v183 = *((_QWORD *)a2 + 1);
                if (v183 > 0xFFFFFFFFFFFFFFFBLL || v183 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_232;
                *((_DWORD *)this + 28) = *(_DWORD *)(*(_QWORD *)a2 + v183);
                goto LABEL_377;
              case 1005:
                *(_QWORD *)v8 |= 0x4000uLL;
                v184 = *((_QWORD *)a2 + 1);
                if (v184 > 0xFFFFFFFFFFFFFFFBLL || v184 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_232;
                *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v184);
                goto LABEL_377;
              case 1006:
                *(_QWORD *)v8 |= 0x40uLL;
                v185 = *((_QWORD *)a2 + 1);
                if (v185 > 0xFFFFFFFFFFFFFFFBLL || v185 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_232;
                *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v185);
                goto LABEL_377;
              case 1007:
                *(_QWORD *)v8 |= 0x4000000uLL;
                v186 = *((_QWORD *)a2 + 1);
                if (v186 > 0xFFFFFFFFFFFFFFFBLL || v186 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_232;
                *((_DWORD *)this + 32) = *(_DWORD *)(*(_QWORD *)a2 + v186);
                goto LABEL_377;
              case 1008:
                *(_QWORD *)v8 |= 0x400000000000000uLL;
                v187 = *((_QWORD *)a2 + 1);
                if (v187 >= *((_QWORD *)a2 + 2))
                {
                  v190 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v188 = v187 + 1;
                  v189 = *(unsigned __int8 *)(*(_QWORD *)a2 + v187);
                  *((_QWORD *)a2 + 1) = v188;
                  v190 = v189 != 0;
                }
                *((_BYTE *)this + 181) = v190;
                goto LABEL_378;
              case 1009:
                *(_QWORD *)v8 |= 0x400000000uLL;
                v191 = *((_QWORD *)a2 + 1);
                if (v191 >= *((_QWORD *)a2 + 2))
                {
                  v194 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v192 = v191 + 1;
                  v193 = *(unsigned __int8 *)(*(_QWORD *)a2 + v191);
                  *((_QWORD *)a2 + 1) = v192;
                  v194 = v193 != 0;
                }
                *((_BYTE *)this + 157) = v194;
                goto LABEL_378;
              case 1010:
                v195 = v8[10];
                *((_WORD *)v8 + 4) |= 0x400u;
                v8[10] = v195;
                v196 = *((_QWORD *)a2 + 1);
                if (v196 >= *((_QWORD *)a2 + 2))
                {
                  v199 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v197 = v196 + 1;
                  v198 = *(unsigned __int8 *)(*(_QWORD *)a2 + v196);
                  *((_QWORD *)a2 + 1) = v197;
                  v199 = v198 != 0;
                }
                *((_BYTE *)this + 197) = v199;
                goto LABEL_378;
              case 1011:
                *(_QWORD *)v8 |= 0x40000000000uLL;
                v200 = *((_QWORD *)a2 + 1);
                if (v200 >= *((_QWORD *)a2 + 2))
                {
                  v203 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v201 = v200 + 1;
                  v202 = *(unsigned __int8 *)(*(_QWORD *)a2 + v200);
                  *((_QWORD *)a2 + 1) = v201;
                  v203 = v202 != 0;
                }
                *((_BYTE *)this + 165) = v203;
                goto LABEL_378;
              case 1012:
                *(_QWORD *)v8 |= 0x4000000000000uLL;
                v204 = *((_QWORD *)a2 + 1);
                if (v204 >= *((_QWORD *)a2 + 2))
                {
                  v207 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v205 = v204 + 1;
                  v206 = *(unsigned __int8 *)(*(_QWORD *)a2 + v204);
                  *((_QWORD *)a2 + 1) = v205;
                  v207 = v206 != 0;
                }
                *((_BYTE *)this + 173) = v207;
                goto LABEL_378;
              case 1013:
                v208 = v8[10];
                *((_WORD *)v8 + 4) |= 8u;
                v8[10] = v208;
                v209 = *((_QWORD *)a2 + 1);
                if (v209 >= *((_QWORD *)a2 + 2))
                {
                  v212 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v210 = v209 + 1;
                  v211 = *(unsigned __int8 *)(*(_QWORD *)a2 + v209);
                  *((_QWORD *)a2 + 1) = v210;
                  v212 = v211 != 0;
                }
                *((_BYTE *)this + 190) = v212;
                goto LABEL_378;
              case 1014:
                *(_QWORD *)v8 |= 0x40000uLL;
                v213 = *((_QWORD *)a2 + 1);
                if (v213 > 0xFFFFFFFFFFFFFFFBLL || v213 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_232;
                *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v213);
                goto LABEL_377;
              case 1015:
                *(_QWORD *)v8 |= 0x400uLL;
                v214 = *((_QWORD *)a2 + 1);
                if (v214 > 0xFFFFFFFFFFFFFFFBLL || v214 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_232;
                *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v214);
                goto LABEL_377;
              case 1016:
                *(_QWORD *)v8 |= 0x40000000uLL;
                v215 = *((_QWORD *)a2 + 1);
                if (v215 > 0xFFFFFFFFFFFFFFFBLL || v215 + 4 > *((_QWORD *)a2 + 2))
                  goto LABEL_232;
                *((_DWORD *)this + 36) = *(_DWORD *)(*(_QWORD *)a2 + v215);
                goto LABEL_377;
              case 1017:
                *(_QWORD *)v8 |= 0x4000000000000000uLL;
                v216 = *((_QWORD *)a2 + 1);
                if (v216 >= *((_QWORD *)a2 + 2))
                {
                  v219 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v217 = v216 + 1;
                  v218 = *(unsigned __int8 *)(*(_QWORD *)a2 + v216);
                  *((_QWORD *)a2 + 1) = v217;
                  v219 = v218 != 0;
                }
                *((_BYTE *)this + 185) = v219;
                goto LABEL_378;
              case 1018:
                *(_QWORD *)v8 |= 0x4000000000uLL;
                v220 = *((_QWORD *)a2 + 1);
                if (v220 >= *((_QWORD *)a2 + 2))
                {
                  v223 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v221 = v220 + 1;
                  v222 = *(unsigned __int8 *)(*(_QWORD *)a2 + v220);
                  *((_QWORD *)a2 + 1) = v221;
                  v223 = v222 != 0;
                }
                *((_BYTE *)this + 161) = v223;
                goto LABEL_378;
              case 1019:
                v224 = v8[10];
                *((_WORD *)v8 + 4) |= 0x4000u;
                v8[10] = v224;
                v225 = *((_QWORD *)a2 + 1);
                if (v225 >= *((_QWORD *)a2 + 2))
                {
                  v228 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v226 = v225 + 1;
                  v227 = *(unsigned __int8 *)(*(_QWORD *)a2 + v225);
                  *((_QWORD *)a2 + 1) = v226;
                  v228 = v227 != 0;
                }
                *((_BYTE *)this + 201) = v228;
                goto LABEL_378;
              case 1020:
                *(_QWORD *)v8 |= 0x400000000000uLL;
                v229 = *((_QWORD *)a2 + 1);
                if (v229 >= *((_QWORD *)a2 + 2))
                {
                  v232 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v230 = v229 + 1;
                  v231 = *(unsigned __int8 *)(*(_QWORD *)a2 + v229);
                  *((_QWORD *)a2 + 1) = v230;
                  v232 = v231 != 0;
                }
                *((_BYTE *)this + 169) = v232;
                goto LABEL_378;
              case 1021:
                *(_QWORD *)v8 |= 0x40000000000000uLL;
                v233 = *((_QWORD *)a2 + 1);
                if (v233 >= *((_QWORD *)a2 + 2))
                {
                  v236 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v234 = v233 + 1;
                  v235 = *(unsigned __int8 *)(*(_QWORD *)a2 + v233);
                  *((_QWORD *)a2 + 1) = v234;
                  v236 = v235 != 0;
                }
                *((_BYTE *)this + 177) = v236;
                goto LABEL_378;
              case 1022:
                v237 = v8[10];
                *((_WORD *)v8 + 4) |= 0x40u;
                v8[10] = v237;
                v238 = *((_QWORD *)a2 + 1);
                if (v238 >= *((_QWORD *)a2 + 2))
                {
                  v241 = 0;
                  *((_BYTE *)a2 + 24) = 1;
                }
                else
                {
                  v239 = v238 + 1;
                  v240 = *(unsigned __int8 *)(*(_QWORD *)a2 + v238);
                  *((_QWORD *)a2 + 1) = v239;
                  v241 = v240 != 0;
                }
                *((_BYTE *)this + 193) = v241;
                goto LABEL_378;
              default:
                goto LABEL_153;
            }
            break;
        }
        while (1)
        {
          if (v39 == v38)
          {
            v43 = 0;
            *((_BYTE *)a2 + 24) = 1;
            goto LABEL_394;
          }
          v311 = v38 + 1;
          v312 = *(_BYTE *)(v40 + v38);
          *((_QWORD *)a2 + 1) = v311;
          v43 |= (unint64_t)(v312 & 0x7F) << v309;
          if ((v312 & 0x80) == 0)
            break;
          v309 += 7;
          v38 = v311;
          v15 = v310++ > 8;
          if (v15)
            goto LABEL_265;
        }
        if (*((_BYTE *)a2 + 24))
          v43 = 0;
LABEL_394:
        *((_QWORD *)this + 2) = v43;
      }
LABEL_378:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)a2 + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        v12 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaRemoteAudioResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;

  v3 = this;
  v4 = *(_QWORD *)(this + 204);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 8), 0x65u);
    v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
    v4 = *(_QWORD *)(v3 + 204);
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = *(unsigned __int16 *)(this + 212) | (*(unsigned __int8 *)(this + 214) << 16);
  if ((v4 & 0x10) != 0)
  {
LABEL_5:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 0x66u);
    v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
    v4 = *(_QWORD *)(v3 + 204);
  }
LABEL_6:
  if ((v5 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(_BYTE *)(v3 + 188), 0x67u);
    v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
    v4 = *(_QWORD *)(v3 + 204);
    if ((v4 & 0x200000) == 0)
    {
LABEL_8:
      if ((v4 & 0x2000) == 0)
        goto LABEL_9;
      goto LABEL_88;
    }
  }
  else if ((v4 & 0x200000) == 0)
  {
    goto LABEL_8;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 108), 0x68u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x2000) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_89;
  }
LABEL_88:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 0x69u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_11;
    goto LABEL_90;
  }
LABEL_89:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 0x6Au);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x200000000000000) == 0)
      goto LABEL_12;
    goto LABEL_91;
  }
LABEL_90:
  this = PB::Writer::write(a2, *(float *)(v3 + 124), 0x6Bu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x200000000000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_13;
    goto LABEL_92;
  }
LABEL_91:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 180), 0x6Cu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_93;
  }
LABEL_92:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 156), 0x6Du);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x200) == 0)
  {
LABEL_14:
    if ((v4 & 0x20000000000) == 0)
      goto LABEL_15;
    goto LABEL_94;
  }
LABEL_93:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 196), 0x6Eu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x20000000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x2000000000000) == 0)
      goto LABEL_16;
    goto LABEL_95;
  }
LABEL_94:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 164), 0x6Fu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x2000000000000) == 0)
  {
LABEL_16:
    if ((v5 & 4) == 0)
      goto LABEL_17;
    goto LABEL_96;
  }
LABEL_95:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 172), 0x70u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 4) == 0)
  {
LABEL_17:
    if ((v4 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_97;
  }
LABEL_96:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 189), 0x71u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x20000) == 0)
  {
LABEL_18:
    if ((v4 & 0x200) == 0)
      goto LABEL_19;
    goto LABEL_98;
  }
LABEL_97:
  this = PB::Writer::write(a2, *(float *)(v3 + 92), 0x72u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x200) == 0)
  {
LABEL_19:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_20;
    goto LABEL_99;
  }
LABEL_98:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 0x73u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_21;
    goto LABEL_100;
  }
LABEL_99:
  this = PB::Writer::write(a2, *(float *)(v3 + 140), 0x74u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x2000000000000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x2000000000) == 0)
      goto LABEL_22;
    goto LABEL_101;
  }
LABEL_100:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 184), 0x75u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x2000000000) == 0)
  {
LABEL_22:
    if ((v5 & 0x2000) == 0)
      goto LABEL_23;
    goto LABEL_102;
  }
LABEL_101:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 160), 0x76u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x2000) == 0)
  {
LABEL_23:
    if ((v4 & 0x200000000000) == 0)
      goto LABEL_24;
    goto LABEL_103;
  }
LABEL_102:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 200), 0x77u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x200000000000) == 0)
  {
LABEL_24:
    if ((v4 & 0x20000000000000) == 0)
      goto LABEL_25;
    goto LABEL_104;
  }
LABEL_103:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 168), 0x78u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x20000000000000) == 0)
  {
LABEL_25:
    if ((v4 & 2) == 0)
      goto LABEL_26;
    goto LABEL_105;
  }
LABEL_104:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 176), 0x79u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 2) == 0)
  {
LABEL_26:
    if ((v4 & 0x400000) == 0)
      goto LABEL_27;
    goto LABEL_106;
  }
LABEL_105:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 16), 0x3EBu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x400000) == 0)
  {
LABEL_27:
    if ((v4 & 0x4000) == 0)
      goto LABEL_28;
    goto LABEL_107;
  }
LABEL_106:
  this = PB::Writer::write(a2, *(float *)(v3 + 112), 0x3ECu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x4000) == 0)
  {
LABEL_28:
    if ((v4 & 0x40) == 0)
      goto LABEL_29;
    goto LABEL_108;
  }
LABEL_107:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0x3EDu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x40) == 0)
  {
LABEL_29:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_30;
    goto LABEL_109;
  }
LABEL_108:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 0x3EEu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_30:
    if ((v4 & 0x400000000000000) == 0)
      goto LABEL_31;
    goto LABEL_110;
  }
LABEL_109:
  this = PB::Writer::write(a2, *(float *)(v3 + 128), 0x3EFu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x400000000000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_32;
    goto LABEL_111;
  }
LABEL_110:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 181), 0x3F0u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x400) == 0)
      goto LABEL_33;
    goto LABEL_112;
  }
LABEL_111:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 157), 0x3F1u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x400) == 0)
  {
LABEL_33:
    if ((v4 & 0x40000000000) == 0)
      goto LABEL_34;
    goto LABEL_113;
  }
LABEL_112:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 197), 0x3F2u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x40000000000) == 0)
  {
LABEL_34:
    if ((v4 & 0x4000000000000) == 0)
      goto LABEL_35;
    goto LABEL_114;
  }
LABEL_113:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 165), 0x3F3u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x4000000000000) == 0)
  {
LABEL_35:
    if ((v5 & 8) == 0)
      goto LABEL_36;
    goto LABEL_115;
  }
LABEL_114:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 173), 0x3F4u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 8) == 0)
  {
LABEL_36:
    if ((v4 & 0x40000) == 0)
      goto LABEL_37;
    goto LABEL_116;
  }
LABEL_115:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 190), 0x3F5u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x40000) == 0)
  {
LABEL_37:
    if ((v4 & 0x400) == 0)
      goto LABEL_38;
    goto LABEL_117;
  }
LABEL_116:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 0x3F6u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x400) == 0)
  {
LABEL_38:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_39;
    goto LABEL_118;
  }
LABEL_117:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 0x3F7u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_39:
    if ((v4 & 0x4000000000000000) == 0)
      goto LABEL_40;
    goto LABEL_119;
  }
LABEL_118:
  this = PB::Writer::write(a2, *(float *)(v3 + 144), 0x3F8u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x4000000000000000) == 0)
  {
LABEL_40:
    if ((v4 & 0x4000000000) == 0)
      goto LABEL_41;
    goto LABEL_120;
  }
LABEL_119:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 185), 0x3F9u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x4000000000) == 0)
  {
LABEL_41:
    if ((v5 & 0x4000) == 0)
      goto LABEL_42;
    goto LABEL_121;
  }
LABEL_120:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 161), 0x3FAu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x4000) == 0)
  {
LABEL_42:
    if ((v4 & 0x400000000000) == 0)
      goto LABEL_43;
    goto LABEL_122;
  }
LABEL_121:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 201), 0x3FBu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x400000000000) == 0)
  {
LABEL_43:
    if ((v4 & 0x40000000000000) == 0)
      goto LABEL_44;
    goto LABEL_123;
  }
LABEL_122:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 169), 0x3FCu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x40000000000000) == 0)
  {
LABEL_44:
    if ((v5 & 0x40) == 0)
      goto LABEL_45;
    goto LABEL_124;
  }
LABEL_123:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 177), 0x3FDu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x40) == 0)
  {
LABEL_45:
    if ((v4 & 4) == 0)
      goto LABEL_46;
    goto LABEL_125;
  }
LABEL_124:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 193), 0x3FEu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 4) == 0)
  {
LABEL_46:
    if ((v4 & 0x800000) == 0)
      goto LABEL_47;
    goto LABEL_126;
  }
LABEL_125:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 24), 0x44Fu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x800000) == 0)
  {
LABEL_47:
    if ((v4 & 0x8000) == 0)
      goto LABEL_48;
    goto LABEL_127;
  }
LABEL_126:
  this = PB::Writer::write(a2, *(float *)(v3 + 116), 0x450u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x8000) == 0)
  {
LABEL_48:
    if ((v4 & 0x80) == 0)
      goto LABEL_49;
    goto LABEL_128;
  }
LABEL_127:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 0x451u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x80) == 0)
  {
LABEL_49:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_50;
    goto LABEL_129;
  }
LABEL_128:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0x452u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_50:
    if ((v4 & 0x800000000000000) == 0)
      goto LABEL_51;
    goto LABEL_130;
  }
LABEL_129:
  this = PB::Writer::write(a2, *(float *)(v3 + 132), 0x453u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x800000000000000) == 0)
  {
LABEL_51:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_52;
    goto LABEL_131;
  }
LABEL_130:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 182), 0x454u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_52:
    if ((v5 & 0x800) == 0)
      goto LABEL_53;
    goto LABEL_132;
  }
LABEL_131:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 158), 0x455u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x800) == 0)
  {
LABEL_53:
    if ((v4 & 0x80000000000) == 0)
      goto LABEL_54;
    goto LABEL_133;
  }
LABEL_132:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 198), 0x456u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x80000000000) == 0)
  {
LABEL_54:
    if ((v4 & 0x8000000000000) == 0)
      goto LABEL_55;
    goto LABEL_134;
  }
LABEL_133:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 166), 0x457u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x8000000000000) == 0)
  {
LABEL_55:
    if ((v5 & 0x10) == 0)
      goto LABEL_56;
    goto LABEL_135;
  }
LABEL_134:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 174), 0x458u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x10) == 0)
  {
LABEL_56:
    if ((v4 & 0x80000) == 0)
      goto LABEL_57;
    goto LABEL_136;
  }
LABEL_135:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 191), 0x459u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x80000) == 0)
  {
LABEL_57:
    if ((v4 & 0x800) == 0)
      goto LABEL_58;
    goto LABEL_137;
  }
LABEL_136:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 0x45Au);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x800) == 0)
  {
LABEL_58:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_59;
    goto LABEL_138;
  }
LABEL_137:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 0x45Bu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_59:
    if ((v4 & 0x8000000000000000) == 0)
      goto LABEL_60;
    goto LABEL_139;
  }
LABEL_138:
  this = PB::Writer::write(a2, *(float *)(v3 + 148), 0x45Cu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x8000000000000000) == 0)
  {
LABEL_60:
    if ((v4 & 0x8000000000) == 0)
      goto LABEL_61;
    goto LABEL_140;
  }
LABEL_139:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 186), 0x45Du);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x8000000000) == 0)
  {
LABEL_61:
    if ((v5 & 0x8000) == 0)
      goto LABEL_62;
    goto LABEL_141;
  }
LABEL_140:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 162), 0x45Eu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x8000) == 0)
  {
LABEL_62:
    if ((v4 & 0x800000000000) == 0)
      goto LABEL_63;
    goto LABEL_142;
  }
LABEL_141:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 202), 0x45Fu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x800000000000) == 0)
  {
LABEL_63:
    if ((v4 & 0x80000000000000) == 0)
      goto LABEL_64;
    goto LABEL_143;
  }
LABEL_142:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 170), 0x460u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x80000000000000) == 0)
  {
LABEL_64:
    if ((v5 & 0x80) == 0)
      goto LABEL_65;
    goto LABEL_144;
  }
LABEL_143:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 178), 0x461u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x80) == 0)
  {
LABEL_65:
    if ((v4 & 8) == 0)
      goto LABEL_66;
    goto LABEL_145;
  }
LABEL_144:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 194), 0x462u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 8) == 0)
  {
LABEL_66:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_67;
    goto LABEL_146;
  }
LABEL_145:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 32), 0x4B3u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_67:
    if ((v4 & 0x10000) == 0)
      goto LABEL_68;
    goto LABEL_147;
  }
LABEL_146:
  this = PB::Writer::write(a2, *(float *)(v3 + 120), 0x4B4u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x10000) == 0)
  {
LABEL_68:
    if ((v4 & 0x100) == 0)
      goto LABEL_69;
    goto LABEL_148;
  }
LABEL_147:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 0x4B5u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x100) == 0)
  {
LABEL_69:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_70;
    goto LABEL_149;
  }
LABEL_148:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 0x4B6u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_70:
    if ((v4 & 0x1000000000000000) == 0)
      goto LABEL_71;
    goto LABEL_150;
  }
LABEL_149:
  this = PB::Writer::write(a2, *(float *)(v3 + 136), 0x4B7u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x1000000000000000) == 0)
  {
LABEL_71:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_72;
    goto LABEL_151;
  }
LABEL_150:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 183), 0x4B8u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_72:
    if ((v5 & 0x1000) == 0)
      goto LABEL_73;
    goto LABEL_152;
  }
LABEL_151:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 159), 0x4B9u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x1000) == 0)
  {
LABEL_73:
    if ((v4 & 0x100000000000) == 0)
      goto LABEL_74;
    goto LABEL_153;
  }
LABEL_152:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 199), 0x4BAu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x100000000000) == 0)
  {
LABEL_74:
    if ((v4 & 0x10000000000000) == 0)
      goto LABEL_75;
    goto LABEL_154;
  }
LABEL_153:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 167), 0x4BBu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x10000000000000) == 0)
  {
LABEL_75:
    if ((v5 & 0x20) == 0)
      goto LABEL_76;
    goto LABEL_155;
  }
LABEL_154:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 175), 0x4BCu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x20) == 0)
  {
LABEL_76:
    if ((v4 & 0x100000) == 0)
      goto LABEL_77;
    goto LABEL_156;
  }
LABEL_155:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 192), 0x4BDu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x100000) == 0)
  {
LABEL_77:
    if ((v4 & 0x1000) == 0)
      goto LABEL_78;
    goto LABEL_157;
  }
LABEL_156:
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 0x4BEu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x1000) == 0)
  {
LABEL_78:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_79;
    goto LABEL_158;
  }
LABEL_157:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0x4BFu);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_79:
    if ((v5 & 1) == 0)
      goto LABEL_80;
    goto LABEL_159;
  }
LABEL_158:
  this = PB::Writer::write(a2, *(float *)(v3 + 152), 0x4C0u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 1) == 0)
  {
LABEL_80:
    if ((v4 & 0x10000000000) == 0)
      goto LABEL_81;
    goto LABEL_160;
  }
LABEL_159:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 187), 0x4C1u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x10000000000) == 0)
  {
LABEL_81:
    if ((v5 & 0x10000) == 0)
      goto LABEL_82;
    goto LABEL_161;
  }
LABEL_160:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 163), 0x4C2u);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v5 & 0x10000) == 0)
  {
LABEL_82:
    if ((v4 & 0x1000000000000) == 0)
      goto LABEL_83;
    goto LABEL_162;
  }
LABEL_161:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 203), 0x4C3u);
  LOWORD(v5) = *(_WORD *)(v3 + 212);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x1000000000000) == 0)
  {
LABEL_83:
    if ((v4 & 0x100000000000000) == 0)
      goto LABEL_84;
    goto LABEL_163;
  }
LABEL_162:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 171), 0x4C4u);
  LOWORD(v5) = *(_WORD *)(v3 + 212);
  if ((*(_QWORD *)(v3 + 204) & 0x100000000000000) == 0)
  {
LABEL_84:
    if ((v5 & 0x100) == 0)
      return this;
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 195), 0x4C6u);
  }
LABEL_163:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 179), 0x4C5u);
  if ((*(_WORD *)(v3 + 212) & 0x100) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 195), 0x4C6u);
  return this;
}

uint64_t CMMsl::KappaRemoteAudioResult::hash_value(CMMsl::KappaRemoteAudioResult *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float v55;
  uint64_t v56;
  float v57;
  uint64_t v58;
  float v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  float v66;
  uint64_t v67;
  float v68;
  uint64_t v69;
  float v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;

  v1 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  v2 = *(_QWORD *)((char *)this + 204);
  if ((v2 & 1) != 0)
  {
    v3 = *((_QWORD *)this + 1);
    if ((v2 & 0x10) != 0)
    {
LABEL_3:
      v131 = *((int *)this + 10);
      if ((*((_WORD *)this + 106) & 2) != 0)
        goto LABEL_4;
      goto LABEL_150;
    }
  }
  else
  {
    v3 = 0;
    if ((v2 & 0x10) != 0)
      goto LABEL_3;
  }
  v131 = 0;
  if ((*((_WORD *)this + 106) & 2) != 0)
  {
LABEL_4:
    v130 = *((unsigned __int8 *)this + 188);
    if ((v2 & 0x200000) != 0)
      goto LABEL_5;
LABEL_151:
    v129 = 0;
    if ((*((_WORD *)this + 106) & 4) != 0)
      goto LABEL_8;
    goto LABEL_152;
  }
LABEL_150:
  v130 = 0;
  if ((v2 & 0x200000) == 0)
    goto LABEL_151;
LABEL_5:
  v4 = *((float *)this + 27);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  v129 = v5;
  if ((*((_WORD *)this + 106) & 4) != 0)
  {
LABEL_8:
    v128 = *((unsigned __int8 *)this + 189);
    if ((v2 & 2) != 0)
      goto LABEL_9;
    goto LABEL_153;
  }
LABEL_152:
  v128 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_9:
    v127 = *((_QWORD *)this + 2);
    if ((v2 & 0x400000) != 0)
      goto LABEL_10;
LABEL_154:
    v126 = 0;
    if ((v2 & 0x4000) != 0)
      goto LABEL_13;
LABEL_155:
    v125 = 0;
    if ((v2 & 0x40) != 0)
      goto LABEL_16;
LABEL_156:
    v124 = 0;
    if ((v2 & 0x4000000) != 0)
      goto LABEL_19;
LABEL_157:
    v123 = 0;
    if ((v2 & 0x400000000000000) != 0)
      goto LABEL_22;
    goto LABEL_158;
  }
LABEL_153:
  v127 = 0;
  if ((v2 & 0x400000) == 0)
    goto LABEL_154;
LABEL_10:
  v6 = *((float *)this + 28);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  v126 = v7;
  if ((v2 & 0x4000) == 0)
    goto LABEL_155;
LABEL_13:
  v8 = *((float *)this + 20);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  v125 = v9;
  if ((v2 & 0x40) == 0)
    goto LABEL_156;
LABEL_16:
  v10 = *((float *)this + 12);
  v11 = LODWORD(v10);
  if (v10 == 0.0)
    v11 = 0;
  v124 = v11;
  if ((v2 & 0x4000000) == 0)
    goto LABEL_157;
LABEL_19:
  v12 = *((float *)this + 32);
  v13 = LODWORD(v12);
  if (v12 == 0.0)
    v13 = 0;
  v123 = v13;
  if ((v2 & 0x400000000000000) != 0)
  {
LABEL_22:
    v122 = *((unsigned __int8 *)this + 181);
    if ((v2 & 0x400000000) != 0)
      goto LABEL_23;
    goto LABEL_159;
  }
LABEL_158:
  v122 = 0;
  if ((v2 & 0x400000000) != 0)
  {
LABEL_23:
    v121 = *((unsigned __int8 *)this + 157);
    if ((*((_WORD *)this + 106) & 0x400) != 0)
      goto LABEL_24;
    goto LABEL_160;
  }
LABEL_159:
  v121 = 0;
  if ((*((_WORD *)this + 106) & 0x400) != 0)
  {
LABEL_24:
    v120 = *((unsigned __int8 *)this + 197);
    if ((v2 & 0x40000000000) != 0)
      goto LABEL_25;
    goto LABEL_161;
  }
LABEL_160:
  v120 = 0;
  if ((v2 & 0x40000000000) != 0)
  {
LABEL_25:
    v119 = *((unsigned __int8 *)this + 165);
    if ((v2 & 0x4000000000000) != 0)
      goto LABEL_26;
    goto LABEL_162;
  }
LABEL_161:
  v119 = 0;
  if ((v2 & 0x4000000000000) != 0)
  {
LABEL_26:
    v118 = *((unsigned __int8 *)this + 173);
    if ((*((_WORD *)this + 106) & 8) != 0)
      goto LABEL_27;
    goto LABEL_163;
  }
LABEL_162:
  v118 = 0;
  if ((*((_WORD *)this + 106) & 8) != 0)
  {
LABEL_27:
    v117 = *((unsigned __int8 *)this + 190);
    if ((v2 & 0x40000) != 0)
      goto LABEL_28;
LABEL_164:
    v116 = 0;
    if ((v2 & 0x400) != 0)
      goto LABEL_31;
LABEL_165:
    v115 = 0;
    if ((v2 & 0x40000000) != 0)
      goto LABEL_34;
LABEL_166:
    v114 = 0;
    if ((v2 & 0x4000000000000000) != 0)
      goto LABEL_37;
    goto LABEL_167;
  }
LABEL_163:
  v117 = 0;
  if ((v2 & 0x40000) == 0)
    goto LABEL_164;
LABEL_28:
  v14 = *((float *)this + 24);
  v15 = LODWORD(v14);
  if (v14 == 0.0)
    v15 = 0;
  v116 = v15;
  if ((v2 & 0x400) == 0)
    goto LABEL_165;
LABEL_31:
  v16 = *((float *)this + 16);
  v17 = LODWORD(v16);
  if (v16 == 0.0)
    v17 = 0;
  v115 = v17;
  if ((v2 & 0x40000000) == 0)
    goto LABEL_166;
LABEL_34:
  v18 = *((float *)this + 36);
  v19 = LODWORD(v18);
  if (v18 == 0.0)
    v19 = 0;
  v114 = v19;
  if ((v2 & 0x4000000000000000) != 0)
  {
LABEL_37:
    v113 = *((unsigned __int8 *)this + 185);
    if ((v2 & 0x4000000000) != 0)
      goto LABEL_38;
    goto LABEL_168;
  }
LABEL_167:
  v113 = 0;
  if ((v2 & 0x4000000000) != 0)
  {
LABEL_38:
    v112 = *((unsigned __int8 *)this + 161);
    if ((*((_WORD *)this + 106) & 0x4000) != 0)
      goto LABEL_39;
    goto LABEL_169;
  }
LABEL_168:
  v112 = 0;
  if ((*((_WORD *)this + 106) & 0x4000) != 0)
  {
LABEL_39:
    v111 = *((unsigned __int8 *)this + 201);
    if ((v2 & 0x400000000000) != 0)
      goto LABEL_40;
    goto LABEL_170;
  }
LABEL_169:
  v111 = 0;
  if ((v2 & 0x400000000000) != 0)
  {
LABEL_40:
    v110 = *((unsigned __int8 *)this + 169);
    if ((v2 & 0x40000000000000) != 0)
      goto LABEL_41;
    goto LABEL_171;
  }
LABEL_170:
  v110 = 0;
  if ((v2 & 0x40000000000000) != 0)
  {
LABEL_41:
    v109 = *((unsigned __int8 *)this + 177);
    if ((*((_WORD *)this + 106) & 0x40) != 0)
      goto LABEL_42;
    goto LABEL_172;
  }
LABEL_171:
  v109 = 0;
  if ((*((_WORD *)this + 106) & 0x40) != 0)
  {
LABEL_42:
    v108 = *((unsigned __int8 *)this + 193);
    if ((v2 & 4) != 0)
      goto LABEL_43;
    goto LABEL_173;
  }
LABEL_172:
  v108 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_43:
    v107 = *((_QWORD *)this + 3);
    if ((v2 & 0x800000) != 0)
      goto LABEL_44;
LABEL_174:
    v106 = 0;
    if ((v2 & 0x8000) != 0)
      goto LABEL_47;
LABEL_175:
    v105 = 0;
    if ((v2 & 0x80) != 0)
      goto LABEL_50;
LABEL_176:
    v104 = 0;
    if ((v2 & 0x8000000) != 0)
      goto LABEL_53;
LABEL_177:
    v103 = 0;
    if ((v2 & 0x800000000000000) != 0)
      goto LABEL_56;
    goto LABEL_178;
  }
LABEL_173:
  v107 = 0;
  if ((v2 & 0x800000) == 0)
    goto LABEL_174;
LABEL_44:
  v20 = *((float *)this + 29);
  v21 = LODWORD(v20);
  if (v20 == 0.0)
    v21 = 0;
  v106 = v21;
  if ((v2 & 0x8000) == 0)
    goto LABEL_175;
LABEL_47:
  v22 = *((float *)this + 21);
  v23 = LODWORD(v22);
  if (v22 == 0.0)
    v23 = 0;
  v105 = v23;
  if ((v2 & 0x80) == 0)
    goto LABEL_176;
LABEL_50:
  v24 = *((float *)this + 13);
  v25 = LODWORD(v24);
  if (v24 == 0.0)
    v25 = 0;
  v104 = v25;
  if ((v2 & 0x8000000) == 0)
    goto LABEL_177;
LABEL_53:
  v26 = *((float *)this + 33);
  v27 = LODWORD(v26);
  if (v26 == 0.0)
    v27 = 0;
  v103 = v27;
  if ((v2 & 0x800000000000000) != 0)
  {
LABEL_56:
    v102 = *((unsigned __int8 *)this + 182);
    if ((v2 & 0x800000000) != 0)
      goto LABEL_57;
    goto LABEL_179;
  }
LABEL_178:
  v102 = 0;
  if ((v2 & 0x800000000) != 0)
  {
LABEL_57:
    v101 = *((unsigned __int8 *)this + 158);
    if ((*((_WORD *)this + 106) & 0x800) != 0)
      goto LABEL_58;
    goto LABEL_180;
  }
LABEL_179:
  v101 = 0;
  if ((*((_WORD *)this + 106) & 0x800) != 0)
  {
LABEL_58:
    v100 = *((unsigned __int8 *)this + 198);
    if ((v2 & 0x80000000000) != 0)
      goto LABEL_59;
    goto LABEL_181;
  }
LABEL_180:
  v100 = 0;
  if ((v2 & 0x80000000000) != 0)
  {
LABEL_59:
    v99 = *((unsigned __int8 *)this + 166);
    if ((v2 & 0x8000000000000) != 0)
      goto LABEL_60;
    goto LABEL_182;
  }
LABEL_181:
  v99 = 0;
  if ((v2 & 0x8000000000000) != 0)
  {
LABEL_60:
    v98 = *((unsigned __int8 *)this + 174);
    if ((*((_WORD *)this + 106) & 0x10) != 0)
      goto LABEL_61;
    goto LABEL_183;
  }
LABEL_182:
  v98 = 0;
  if ((*((_WORD *)this + 106) & 0x10) != 0)
  {
LABEL_61:
    v97 = *((unsigned __int8 *)this + 191);
    if ((v2 & 0x80000) != 0)
      goto LABEL_62;
LABEL_184:
    v96 = 0;
    if ((v2 & 0x800) != 0)
      goto LABEL_65;
LABEL_185:
    v95 = 0;
    if ((v2 & 0x80000000) != 0)
      goto LABEL_68;
LABEL_186:
    v94 = 0;
    if (v2 < 0)
      goto LABEL_71;
    goto LABEL_187;
  }
LABEL_183:
  v97 = 0;
  if ((v2 & 0x80000) == 0)
    goto LABEL_184;
LABEL_62:
  v28 = *((float *)this + 25);
  v29 = LODWORD(v28);
  if (v28 == 0.0)
    v29 = 0;
  v96 = v29;
  if ((v2 & 0x800) == 0)
    goto LABEL_185;
LABEL_65:
  v30 = *((float *)this + 17);
  v31 = LODWORD(v30);
  if (v30 == 0.0)
    v31 = 0;
  v95 = v31;
  if ((v2 & 0x80000000) == 0)
    goto LABEL_186;
LABEL_68:
  v32 = *((float *)this + 37);
  v33 = LODWORD(v32);
  if (v32 == 0.0)
    v33 = 0;
  v94 = v33;
  if (v2 < 0)
  {
LABEL_71:
    v93 = *((unsigned __int8 *)this + 186);
    if ((v2 & 0x8000000000) != 0)
      goto LABEL_72;
    goto LABEL_188;
  }
LABEL_187:
  v93 = 0;
  if ((v2 & 0x8000000000) != 0)
  {
LABEL_72:
    v92 = *((unsigned __int8 *)this + 162);
    if ((*((_WORD *)this + 106) & 0x8000) != 0)
      goto LABEL_73;
    goto LABEL_189;
  }
LABEL_188:
  v92 = 0;
  if ((*((_WORD *)this + 106) & 0x8000) != 0)
  {
LABEL_73:
    v91 = *((unsigned __int8 *)this + 202);
    if ((v2 & 0x800000000000) != 0)
      goto LABEL_74;
    goto LABEL_190;
  }
LABEL_189:
  v91 = 0;
  if ((v2 & 0x800000000000) != 0)
  {
LABEL_74:
    v90 = *((unsigned __int8 *)this + 170);
    if ((v2 & 0x80000000000000) != 0)
      goto LABEL_75;
    goto LABEL_191;
  }
LABEL_190:
  v90 = 0;
  if ((v2 & 0x80000000000000) != 0)
  {
LABEL_75:
    v89 = *((unsigned __int8 *)this + 178);
    if ((*((_WORD *)this + 106) & 0x80) != 0)
      goto LABEL_76;
    goto LABEL_192;
  }
LABEL_191:
  v89 = 0;
  if ((*((_WORD *)this + 106) & 0x80) != 0)
  {
LABEL_76:
    v88 = *((unsigned __int8 *)this + 194);
    if ((v2 & 8) != 0)
      goto LABEL_77;
    goto LABEL_193;
  }
LABEL_192:
  v88 = 0;
  if ((v2 & 8) != 0)
  {
LABEL_77:
    v87 = *((_QWORD *)this + 4);
    if ((v2 & 0x1000000) != 0)
      goto LABEL_78;
LABEL_194:
    v86 = 0;
    if ((v2 & 0x10000) != 0)
      goto LABEL_81;
LABEL_195:
    v85 = 0;
    if ((v2 & 0x100) != 0)
      goto LABEL_84;
LABEL_196:
    v84 = 0;
    if ((v2 & 0x10000000) != 0)
      goto LABEL_87;
LABEL_197:
    v83 = 0;
    if ((v2 & 0x1000000000000000) != 0)
      goto LABEL_90;
    goto LABEL_198;
  }
LABEL_193:
  v87 = 0;
  if ((v2 & 0x1000000) == 0)
    goto LABEL_194;
LABEL_78:
  v34 = *((float *)this + 30);
  v35 = LODWORD(v34);
  if (v34 == 0.0)
    v35 = 0;
  v86 = v35;
  if ((v2 & 0x10000) == 0)
    goto LABEL_195;
LABEL_81:
  v36 = *((float *)this + 22);
  v37 = LODWORD(v36);
  if (v36 == 0.0)
    v37 = 0;
  v85 = v37;
  if ((v2 & 0x100) == 0)
    goto LABEL_196;
LABEL_84:
  v38 = *((float *)this + 14);
  v39 = LODWORD(v38);
  if (v38 == 0.0)
    v39 = 0;
  v84 = v39;
  if ((v2 & 0x10000000) == 0)
    goto LABEL_197;
LABEL_87:
  v40 = *((float *)this + 34);
  v41 = LODWORD(v40);
  if (v40 == 0.0)
    v41 = 0;
  v83 = v41;
  if ((v2 & 0x1000000000000000) != 0)
  {
LABEL_90:
    v82 = *((unsigned __int8 *)this + 183);
    if ((v2 & 0x1000000000) != 0)
      goto LABEL_91;
    goto LABEL_199;
  }
LABEL_198:
  v82 = 0;
  if ((v2 & 0x1000000000) != 0)
  {
LABEL_91:
    v81 = *((unsigned __int8 *)this + 159);
    if ((*((_WORD *)this + 106) & 0x1000) != 0)
      goto LABEL_92;
    goto LABEL_200;
  }
LABEL_199:
  v81 = 0;
  if ((*((_WORD *)this + 106) & 0x1000) != 0)
  {
LABEL_92:
    v80 = *((unsigned __int8 *)this + 199);
    if ((v2 & 0x100000000000) != 0)
      goto LABEL_93;
    goto LABEL_201;
  }
LABEL_200:
  v80 = 0;
  if ((v2 & 0x100000000000) != 0)
  {
LABEL_93:
    v79 = *((unsigned __int8 *)this + 167);
    if ((v2 & 0x10000000000000) != 0)
      goto LABEL_94;
    goto LABEL_202;
  }
LABEL_201:
  v79 = 0;
  if ((v2 & 0x10000000000000) != 0)
  {
LABEL_94:
    v78 = *((unsigned __int8 *)this + 175);
    if ((*((_WORD *)this + 106) & 0x20) != 0)
      goto LABEL_95;
    goto LABEL_203;
  }
LABEL_202:
  v78 = 0;
  if ((*((_WORD *)this + 106) & 0x20) != 0)
  {
LABEL_95:
    v42 = *((unsigned __int8 *)this + 192);
    if ((v2 & 0x100000) != 0)
      goto LABEL_96;
LABEL_204:
    v44 = 0;
    if ((v2 & 0x1000) != 0)
      goto LABEL_100;
LABEL_205:
    v46 = 0;
    if ((v2 & 0x100000000) != 0)
      goto LABEL_104;
LABEL_206:
    v48 = 0;
    if ((*((_WORD *)this + 106) & 1) != 0)
      goto LABEL_108;
    goto LABEL_207;
  }
LABEL_203:
  v42 = 0;
  if ((v2 & 0x100000) == 0)
    goto LABEL_204;
LABEL_96:
  v43 = *((float *)this + 26);
  if (v43 == 0.0)
    v44 = 0;
  else
    v44 = LODWORD(v43);
  if ((v2 & 0x1000) == 0)
    goto LABEL_205;
LABEL_100:
  v45 = *((float *)this + 18);
  if (v45 == 0.0)
    v46 = 0;
  else
    v46 = LODWORD(v45);
  if ((v2 & 0x100000000) == 0)
    goto LABEL_206;
LABEL_104:
  v47 = *((float *)this + 38);
  if (v47 == 0.0)
    v48 = 0;
  else
    v48 = LODWORD(v47);
  if ((*((_WORD *)this + 106) & 1) != 0)
  {
LABEL_108:
    v49 = *((unsigned __int8 *)this + 187);
    if ((v2 & 0x10000000000) != 0)
      goto LABEL_109;
    goto LABEL_208;
  }
LABEL_207:
  v49 = 0;
  if ((v2 & 0x10000000000) != 0)
  {
LABEL_109:
    v50 = *((unsigned __int8 *)this + 163);
    if ((v1 & 0x10000) != 0)
      goto LABEL_110;
    goto LABEL_209;
  }
LABEL_208:
  v50 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_110:
    v51 = *((unsigned __int8 *)this + 203);
    if ((v2 & 0x1000000000000) != 0)
      goto LABEL_111;
    goto LABEL_210;
  }
LABEL_209:
  v51 = 0;
  if ((v2 & 0x1000000000000) != 0)
  {
LABEL_111:
    v52 = *((unsigned __int8 *)this + 171);
    if ((v2 & 0x100000000000000) != 0)
      goto LABEL_112;
    goto LABEL_211;
  }
LABEL_210:
  v52 = 0;
  if ((v2 & 0x100000000000000) != 0)
  {
LABEL_112:
    v53 = *((unsigned __int8 *)this + 179);
    if ((*((_WORD *)this + 106) & 0x100) != 0)
      goto LABEL_113;
    goto LABEL_212;
  }
LABEL_211:
  v53 = 0;
  if ((*((_WORD *)this + 106) & 0x100) != 0)
  {
LABEL_113:
    v54 = *((unsigned __int8 *)this + 195);
    if ((v2 & 0x2000) != 0)
      goto LABEL_114;
LABEL_213:
    v56 = 0;
    if ((v2 & 0x20) != 0)
      goto LABEL_118;
LABEL_214:
    v58 = 0;
    if ((v2 & 0x2000000) != 0)
      goto LABEL_122;
LABEL_215:
    v60 = 0;
    if ((v2 & 0x200000000000000) != 0)
      goto LABEL_126;
    goto LABEL_216;
  }
LABEL_212:
  v54 = 0;
  if ((v2 & 0x2000) == 0)
    goto LABEL_213;
LABEL_114:
  v55 = *((float *)this + 19);
  if (v55 == 0.0)
    v56 = 0;
  else
    v56 = LODWORD(v55);
  if ((v2 & 0x20) == 0)
    goto LABEL_214;
LABEL_118:
  v57 = *((float *)this + 11);
  if (v57 == 0.0)
    v58 = 0;
  else
    v58 = LODWORD(v57);
  if ((v2 & 0x2000000) == 0)
    goto LABEL_215;
LABEL_122:
  v59 = *((float *)this + 31);
  if (v59 == 0.0)
    v60 = 0;
  else
    v60 = LODWORD(v59);
  if ((v2 & 0x200000000000000) != 0)
  {
LABEL_126:
    v61 = *((unsigned __int8 *)this + 180);
    if ((v2 & 0x200000000) != 0)
      goto LABEL_127;
    goto LABEL_217;
  }
LABEL_216:
  v61 = 0;
  if ((v2 & 0x200000000) != 0)
  {
LABEL_127:
    v62 = *((unsigned __int8 *)this + 156);
    if ((*((_WORD *)this + 106) & 0x200) != 0)
      goto LABEL_128;
    goto LABEL_218;
  }
LABEL_217:
  v62 = 0;
  if ((*((_WORD *)this + 106) & 0x200) != 0)
  {
LABEL_128:
    v63 = *((unsigned __int8 *)this + 196);
    if ((v2 & 0x20000000000) != 0)
      goto LABEL_129;
    goto LABEL_219;
  }
LABEL_218:
  v63 = 0;
  if ((v2 & 0x20000000000) != 0)
  {
LABEL_129:
    v64 = *((unsigned __int8 *)this + 164);
    if ((v2 & 0x2000000000000) != 0)
      goto LABEL_130;
    goto LABEL_220;
  }
LABEL_219:
  v64 = 0;
  if ((v2 & 0x2000000000000) != 0)
  {
LABEL_130:
    v65 = *((unsigned __int8 *)this + 172);
    if ((v2 & 0x20000) != 0)
      goto LABEL_131;
LABEL_221:
    v67 = 0;
    if ((v2 & 0x200) != 0)
      goto LABEL_135;
LABEL_222:
    v69 = 0;
    if ((v2 & 0x20000000) != 0)
      goto LABEL_139;
LABEL_223:
    v71 = 0;
    if ((v2 & 0x2000000000000000) != 0)
      goto LABEL_143;
    goto LABEL_224;
  }
LABEL_220:
  v65 = 0;
  if ((v2 & 0x20000) == 0)
    goto LABEL_221;
LABEL_131:
  v66 = *((float *)this + 23);
  if (v66 == 0.0)
    v67 = 0;
  else
    v67 = LODWORD(v66);
  if ((v2 & 0x200) == 0)
    goto LABEL_222;
LABEL_135:
  v68 = *((float *)this + 15);
  if (v68 == 0.0)
    v69 = 0;
  else
    v69 = LODWORD(v68);
  if ((v2 & 0x20000000) == 0)
    goto LABEL_223;
LABEL_139:
  v70 = *((float *)this + 35);
  if (v70 == 0.0)
    v71 = 0;
  else
    v71 = LODWORD(v70);
  if ((v2 & 0x2000000000000000) != 0)
  {
LABEL_143:
    v72 = *((unsigned __int8 *)this + 184);
    if ((v2 & 0x2000000000) != 0)
      goto LABEL_144;
    goto LABEL_225;
  }
LABEL_224:
  v72 = 0;
  if ((v2 & 0x2000000000) != 0)
  {
LABEL_144:
    v73 = *((unsigned __int8 *)this + 160);
    if ((*((_WORD *)this + 106) & 0x2000) != 0)
      goto LABEL_145;
    goto LABEL_226;
  }
LABEL_225:
  v73 = 0;
  if ((*((_WORD *)this + 106) & 0x2000) != 0)
  {
LABEL_145:
    v74 = *((unsigned __int8 *)this + 200);
    if ((v2 & 0x200000000000) != 0)
      goto LABEL_146;
LABEL_227:
    v75 = 0;
    if ((v2 & 0x20000000000000) != 0)
      goto LABEL_147;
LABEL_228:
    v76 = 0;
    return v131 ^ v3 ^ v130 ^ v129 ^ v128 ^ v127 ^ v126 ^ v125 ^ v124 ^ v123 ^ v122 ^ v121 ^ v120 ^ v119 ^ v118 ^ v117 ^ v116 ^ v115 ^ v114 ^ v113 ^ v112 ^ v111 ^ v110 ^ v109 ^ v108 ^ v107 ^ v106 ^ v105 ^ v104 ^ v103 ^ v102 ^ v101 ^ v100 ^ v99 ^ v98 ^ v97 ^ v96 ^ v95 ^ v94 ^ v93 ^ v92 ^ v91 ^ v90 ^ v89 ^ v88 ^ v87 ^ v86 ^ v85 ^ v84 ^ v83 ^ v82 ^ v81 ^ v80 ^ v79 ^ v78 ^ v42 ^ v44 ^ v46 ^ v48 ^ v49 ^ v50 ^ v51 ^ v52 ^ v53 ^ v54 ^ v56 ^ v58 ^ v60 ^ v61 ^ v62 ^ v63 ^ v64 ^ v65 ^ v67 ^ v69 ^ v71 ^ v72 ^ v73 ^ v74 ^ v75 ^ v76;
  }
LABEL_226:
  v74 = 0;
  if ((v2 & 0x200000000000) == 0)
    goto LABEL_227;
LABEL_146:
  v75 = *((unsigned __int8 *)this + 168);
  if ((v2 & 0x20000000000000) == 0)
    goto LABEL_228;
LABEL_147:
  v76 = *((unsigned __int8 *)this + 176);
  return v131 ^ v3 ^ v130 ^ v129 ^ v128 ^ v127 ^ v126 ^ v125 ^ v124 ^ v123 ^ v122 ^ v121 ^ v120 ^ v119 ^ v118 ^ v117 ^ v116 ^ v115 ^ v114 ^ v113 ^ v112 ^ v111 ^ v110 ^ v109 ^ v108 ^ v107 ^ v106 ^ v105 ^ v104 ^ v103 ^ v102 ^ v101 ^ v100 ^ v99 ^ v98 ^ v97 ^ v96 ^ v95 ^ v94 ^ v93 ^ v92 ^ v91 ^ v90 ^ v89 ^ v88 ^ v87 ^ v86 ^ v85 ^ v84 ^ v83 ^ v82 ^ v81 ^ v80 ^ v79 ^ v78 ^ v42 ^ v44 ^ v46 ^ v48 ^ v49 ^ v50 ^ v51 ^ v52 ^ v53 ^ v54 ^ v56 ^ v58 ^ v60 ^ v61 ^ v62 ^ v63 ^ v64 ^ v65 ^ v67 ^ v69 ^ v71 ^ v72 ^ v73 ^ v74 ^ v75 ^ v76;
}

void CMMsl::KappaRoads::~KappaRoads(CMMsl::KappaRoads *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::KappaRoads::KappaRoads(uint64_t this, const CMMsl::KappaRoads *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  *(_QWORD *)this = off_100352320;
  *(_DWORD *)(this + 32) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 2) != 0)
  {
    v4 = *((_QWORD *)a2 + 2);
    v3 = 2;
    *(_BYTE *)(this + 32) = 2;
    *(_QWORD *)(this + 16) = v4;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 1) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 1);
    v3 |= 1u;
    *(_BYTE *)(this + 32) = v3;
    *(_QWORD *)(this + 8) = v5;
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0)
      return this;
LABEL_10:
    v7 = *((_DWORD *)a2 + 7);
    *(_BYTE *)(this + 32) = v3 | 8;
    *(_DWORD *)(this + 28) = v7;
    return this;
  }
  v6 = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *(_BYTE *)(this + 32) = v3;
  *(_DWORD *)(this + 24) = v6;
  if ((*((_BYTE *)a2 + 32) & 8) != 0)
    goto LABEL_10;
  return this;
}

uint64_t CMMsl::KappaRoads::operator=(uint64_t a1, const CMMsl::KappaRoads *a2)
{
  __int128 v3;
  int v4;
  _BYTE v6[8];
  __int128 v7;
  int v8;
  uint64_t v9;

  if ((const CMMsl::KappaRoads *)a1 != a2)
  {
    CMMsl::KappaRoads::KappaRoads((uint64_t)v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v3;
    v4 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v8;
    v8 = v4;
    *(_QWORD *)&v3 = *(_QWORD *)(a1 + 28);
    *(_QWORD *)(a1 + 28) = v9;
    v9 = v3;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaRoads *a2, CMMsl::KappaRoads *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  float result;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  LODWORD(v5) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v5;
  return result;
}

float CMMsl::KappaRoads::KappaRoads(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100352320;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_100352320;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  return result;
}

uint64_t CMMsl::KappaRoads::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  void (**v8)(CMMsl::KappaRoads *__hidden);
  __int128 v9;
  int v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v8 = off_100352320;
    v3 = *(_DWORD *)(a2 + 24);
    v4 = *(_QWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 32) = 0;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    v9 = v5;
    LODWORD(v5) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v3;
    v10 = v5;
    v6 = *(_QWORD *)(a1 + 28);
    *(_QWORD *)(a1 + 28) = v4;
    v11 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::KappaRoads::formatText(CMMsl::KappaRoads *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "distanceToNearestRoad", *((float *)this + 6));
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "searchTimestamp", *((_QWORD *)this + 1));
      if ((*((_BYTE *)this + 32) & 2) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "roadClass", *((_DWORD *)this + 7));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaRoads::readFrom(CMMsl::KappaRoads *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 32) |= 2u;
              v20 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v21 = *(_QWORD *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v39 = 0;
                v40 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_74;
                  }
                  v41 = v20++;
                  v42 = *(_BYTE *)(v21 + v41);
                  *((_QWORD *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0)
                    break;
                  v39 += 7;
                  v14 = v40++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_73;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v24 = 0;
LABEL_73:
                v2 = v41 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)a2 + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_74;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_74:
              *((_QWORD *)this + 2) = v24;
              goto LABEL_85;
            case 2u:
              *((_BYTE *)this + 32) |= 1u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v43 = 0;
                v44 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_79;
                  }
                  v45 = v27++;
                  v46 = *(_BYTE *)(v28 + v45);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0)
                    break;
                  v43 += 7;
                  v14 = v44++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_78:
                    v2 = v45 + 1;
                    goto LABEL_79;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v31 = 0;
                goto LABEL_78;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_79;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_79:
              *((_QWORD *)this + 1) = v31;
              goto LABEL_85;
            case 3u:
              *((_BYTE *)this + 32) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
                v2 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_85;
            case 4u:
              *((_BYTE *)this + 32) |= 8u;
              v33 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_84;
                  }
                  v49 = v33++;
                  v50 = *(_BYTE *)(v34 + v49);
                  *((_QWORD *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_83:
                    v2 = v49 + 1;
                    goto LABEL_84;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v37) = 0;
                goto LABEL_83;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)a2 + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_84;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_84:
              *((_DWORD *)this + 7) = v37;
LABEL_85:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_85;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaRoads::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 16), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 8), 2u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 4u);
  }
LABEL_8:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 3u);
  if ((*(_BYTE *)(v3 + 32) & 8) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 4u);
  return this;
}

uint64_t CMMsl::KappaRoads::hash_value(CMMsl::KappaRoads *this)
{
  uint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  uint64_t v5;

  if ((*((_BYTE *)this + 32) & 2) != 0)
  {
    v1 = *((_QWORD *)this + 2);
    if ((*((_BYTE *)this + 32) & 1) != 0)
    {
LABEL_3:
      v2 = *((_QWORD *)this + 1);
      if ((*((_BYTE *)this + 32) & 4) != 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 32) & 1) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 32) & 4) != 0)
  {
LABEL_4:
    v3 = *((float *)this + 6);
    v4 = LODWORD(v3);
    if (v3 == 0.0)
      v4 = 0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
      goto LABEL_7;
LABEL_11:
    v5 = 0;
    return v2 ^ v1 ^ v4 ^ v5;
  }
LABEL_10:
  v4 = 0;
  if ((*((_BYTE *)this + 32) & 8) == 0)
    goto LABEL_11;
LABEL_7:
  v5 = *((unsigned int *)this + 7);
  return v2 ^ v1 ^ v4 ^ v5;
}

void CMMsl::KappaRoadsResult::~KappaRoadsResult(CMMsl::KappaRoadsResult *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::KappaRoadsResult::KappaRoadsResult(uint64_t this, const CMMsl::KappaRoadsResult *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)this = off_100352358;
  *(_DWORD *)(this + 40) = 0;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 4) != 0)
  {
    v4 = *((_QWORD *)a2 + 3);
    v3 = 4;
    *(_BYTE *)(this + 40) = 4;
    *(_QWORD *)(this + 24) = v4;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 40) & 8) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 8);
    v3 |= 8u;
    *(_BYTE *)(this + 40) = v3;
    *(_DWORD *)(this + 32) = v5;
    v2 = *((_BYTE *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    v6 = *((_DWORD *)a2 + 9);
    v3 |= 0x10u;
    *(_BYTE *)(this + 40) = v3;
    *(_DWORD *)(this + 36) = v6;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0)
        return this;
LABEL_12:
      v8 = *((_QWORD *)a2 + 2);
      *(_BYTE *)(this + 40) = v3 | 2;
      *(_QWORD *)(this + 16) = v8;
      return this;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_BYTE *)(this + 40) = v3;
  *(_QWORD *)(this + 8) = v7;
  if ((*((_BYTE *)a2 + 40) & 2) != 0)
    goto LABEL_12;
  return this;
}

uint64_t CMMsl::KappaRoadsResult::operator=(uint64_t a1, const CMMsl::KappaRoadsResult *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  if ((const CMMsl::KappaRoadsResult *)a1 != a2)
  {
    CMMsl::KappaRoadsResult::KappaRoadsResult((uint64_t)&v8, a2);
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v10;
    v10 = v3;
    v4 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v11;
    v11 = v4;
    v5 = *(_QWORD *)(a1 + 36);
    *(_QWORD *)(a1 + 36) = v12;
    v12 = v5;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaRoadsResult *a2, CMMsl::KappaRoadsResult *a3)
{
  int v3;
  uint64_t v4;
  float result;
  uint64_t v6;
  uint64_t v7;

  v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  result = *((float *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((float *)a2 + 8) = result;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  return result;
}

float CMMsl::KappaRoadsResult::KappaRoadsResult(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100352358;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  result = *(float *)(a2 + 32);
  *(float *)(a1 + 32) = result;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_100352358;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  result = *(float *)(a2 + 32);
  *(float *)(a1 + 32) = result;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::KappaRoadsResult::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  __int128 v8;
  void (**v10)(CMMsl::KappaRoadsResult *__hidden);
  __int128 v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  if (a1 != a2)
  {
    v10 = off_100352358;
    v3 = *(_QWORD *)(a2 + 24);
    v4 = *(_DWORD *)(a2 + 32);
    v5 = *(_QWORD *)(a2 + 36);
    *(_DWORD *)(a2 + 40) = 0;
    v12 = *(_QWORD *)(a1 + 24);
    v6 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v4;
    v13 = v6;
    v14 = *(_QWORD *)(a1 + 36);
    v7 = *(_OWORD *)(a1 + 8);
    v8 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = v3;
    *(_QWORD *)(a1 + 36) = v5;
    *(_OWORD *)(a1 + 8) = v8;
    v11 = v7;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::KappaRoadsResult::formatText(CMMsl::KappaRoadsResult *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "distanceToNearestRoad", *((float *)this + 8));
    v5 = *((_BYTE *)this + 40);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 40) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "epochFirstTimestamp", *((_QWORD *)this + 1));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "roadClass", *((_DWORD *)this + 9));
    if ((*((_BYTE *)this + 40) & 4) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "epochLastTimestamp", *((_QWORD *)this + 2));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 4) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 3));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaRoadsResult::readFrom(CMMsl::KappaRoadsResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int i;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  uint64_t result;
  char v46;
  unsigned int v47;
  unint64_t v48;
  char v49;
  char v50;
  unsigned int v51;
  unint64_t v52;
  char v53;
  char v54;
  unsigned int v55;
  unint64_t v56;
  char v57;
  char v58;
  unsigned int v59;
  unint64_t v60;
  char v61;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  for (i = *((unsigned __int8 *)a2 + 24); v2 < v3 && i == 0; i = *((unsigned __int8 *)a2 + 24))
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          v11 = 0;
          goto LABEL_20;
        }
      }
      i = 1;
      *((_BYTE *)a2 + 24) = 1;
      return i == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      i = 0;
      return i == 0;
    }
    v20 = v11 >> 3;
    if ((int)(v11 >> 3) <= 103)
    {
      if ((_DWORD)v20 == 101)
      {
        *((_BYTE *)this + 40) |= 4u;
        v39 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v40 = *(_QWORD *)a2;
        if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
        {
          v58 = 0;
          v59 = 0;
          v43 = 0;
          if (v2 <= v39)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v39)
            {
              v43 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_108;
            }
            v60 = v39++;
            v61 = *(_BYTE *)(v40 + v60);
            *((_QWORD *)a2 + 1) = v39;
            v43 |= (unint64_t)(v61 & 0x7F) << v58;
            if ((v61 & 0x80) == 0)
              break;
            v58 += 7;
            v14 = v59++ > 8;
            if (v14)
            {
              v43 = 0;
              goto LABEL_107;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v43 = 0;
LABEL_107:
          v2 = v60 + 1;
        }
        else
        {
          v41 = 0;
          v42 = 0;
          v43 = 0;
          while (1)
          {
            v2 = v39 + 1;
            *((_QWORD *)a2 + 1) = v39 + 1;
            v44 = *(_BYTE *)(v40 + v39);
            v43 |= (unint64_t)(v44 & 0x7F) << v41;
            if ((v44 & 0x80) == 0)
              break;
            v41 += 7;
            v39 = v2;
            v14 = v42++ > 8;
            if (v14)
            {
              v43 = 0;
              break;
            }
          }
        }
LABEL_108:
        *((_QWORD *)this + 3) = v43;
      }
      else
      {
        if ((_DWORD)v20 != 103)
        {
LABEL_58:
          result = PB::Reader::skip(a2, v20, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          goto LABEL_109;
        }
        *((_BYTE *)this + 40) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
    }
    else
    {
      switch((_DWORD)v20)
      {
        case 0x68:
          *((_BYTE *)this + 40) |= 0x10u;
          v27 = *((_QWORD *)a2 + 1);
          v2 = *((_QWORD *)a2 + 2);
          v28 = *(_QWORD *)a2;
          if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
          {
            v50 = 0;
            v51 = 0;
            v31 = 0;
            if (v2 <= v27)
              v2 = *((_QWORD *)a2 + 1);
            while (1)
            {
              if (v2 == v27)
              {
                LODWORD(v31) = 0;
                *((_BYTE *)a2 + 24) = 1;
                goto LABEL_98;
              }
              v52 = v27++;
              v53 = *(_BYTE *)(v28 + v52);
              *((_QWORD *)a2 + 1) = v27;
              v31 |= (unint64_t)(v53 & 0x7F) << v50;
              if ((v53 & 0x80) == 0)
                break;
              v50 += 7;
              v14 = v51++ > 8;
              if (v14)
              {
                LODWORD(v31) = 0;
                goto LABEL_97;
              }
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v31) = 0;
LABEL_97:
            v2 = v52 + 1;
          }
          else
          {
            v29 = 0;
            v30 = 0;
            v31 = 0;
            while (1)
            {
              v2 = v27 + 1;
              *((_QWORD *)a2 + 1) = v27 + 1;
              v32 = *(_BYTE *)(v28 + v27);
              v31 |= (unint64_t)(v32 & 0x7F) << v29;
              if ((v32 & 0x80) == 0)
                break;
              v29 += 7;
              v27 = v2;
              v14 = v30++ > 8;
              if (v14)
              {
                LODWORD(v31) = 0;
                break;
              }
            }
          }
LABEL_98:
          *((_DWORD *)this + 9) = v31;
          break;
        case 0xC9:
          *((_BYTE *)this + 40) |= 1u;
          v33 = *((_QWORD *)a2 + 1);
          v2 = *((_QWORD *)a2 + 2);
          v34 = *(_QWORD *)a2;
          if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
          {
            v54 = 0;
            v55 = 0;
            v37 = 0;
            if (v2 <= v33)
              v2 = *((_QWORD *)a2 + 1);
            while (1)
            {
              if (v2 == v33)
              {
                v37 = 0;
                *((_BYTE *)a2 + 24) = 1;
                goto LABEL_103;
              }
              v56 = v33++;
              v57 = *(_BYTE *)(v34 + v56);
              *((_QWORD *)a2 + 1) = v33;
              v37 |= (unint64_t)(v57 & 0x7F) << v54;
              if ((v57 & 0x80) == 0)
                break;
              v54 += 7;
              v14 = v55++ > 8;
              if (v14)
              {
                v37 = 0;
                goto LABEL_102;
              }
            }
            if (*((_BYTE *)a2 + 24))
              v37 = 0;
LABEL_102:
            v2 = v56 + 1;
          }
          else
          {
            v35 = 0;
            v36 = 0;
            v37 = 0;
            while (1)
            {
              v2 = v33 + 1;
              *((_QWORD *)a2 + 1) = v33 + 1;
              v38 = *(_BYTE *)(v34 + v33);
              v37 |= (unint64_t)(v38 & 0x7F) << v35;
              if ((v38 & 0x80) == 0)
                break;
              v35 += 7;
              v33 = v2;
              v14 = v36++ > 8;
              if (v14)
              {
                v37 = 0;
                break;
              }
            }
          }
LABEL_103:
          *((_QWORD *)this + 1) = v37;
          break;
        case 0xCA:
          *((_BYTE *)this + 40) |= 2u;
          v21 = *((_QWORD *)a2 + 1);
          v2 = *((_QWORD *)a2 + 2);
          v22 = *(_QWORD *)a2;
          if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
          {
            v46 = 0;
            v47 = 0;
            v25 = 0;
            if (v2 <= v21)
              v2 = *((_QWORD *)a2 + 1);
            while (1)
            {
              if (v2 == v21)
              {
                v25 = 0;
                *((_BYTE *)a2 + 24) = 1;
                goto LABEL_93;
              }
              v48 = v21++;
              v49 = *(_BYTE *)(v22 + v48);
              *((_QWORD *)a2 + 1) = v21;
              v25 |= (unint64_t)(v49 & 0x7F) << v46;
              if ((v49 & 0x80) == 0)
                break;
              v46 += 7;
              v14 = v47++ > 8;
              if (v14)
              {
                v25 = 0;
                goto LABEL_92;
              }
            }
            if (*((_BYTE *)a2 + 24))
              v25 = 0;
LABEL_92:
            v2 = v48 + 1;
          }
          else
          {
            v23 = 0;
            v24 = 0;
            v25 = 0;
            while (1)
            {
              v2 = v21 + 1;
              *((_QWORD *)a2 + 1) = v21 + 1;
              v26 = *(_BYTE *)(v22 + v21);
              v25 |= (unint64_t)(v26 & 0x7F) << v23;
              if ((v26 & 0x80) == 0)
                break;
              v23 += 7;
              v21 = v2;
              v14 = v24++ > 8;
              if (v14)
              {
                v25 = 0;
                break;
              }
            }
          }
LABEL_93:
          *((_QWORD *)this + 2) = v25;
          break;
        default:
          goto LABEL_58;
      }
    }
LABEL_109:
    v3 = *((_QWORD *)a2 + 2);
  }
  return i == 0;
}

uint64_t CMMsl::KappaRoadsResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 40);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 24), 0x65u);
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 40) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 0x67u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 36), 0x68u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 16), 0xCAu);
  }
LABEL_10:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 8), 0xC9u);
  if ((*(_BYTE *)(v3 + 40) & 2) != 0)
    return PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 16), 0xCAu);
  return this;
}

uint64_t CMMsl::KappaRoadsResult::hash_value(CMMsl::KappaRoadsResult *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*((_BYTE *)this + 40) & 4) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 40) & 8) != 0)
      goto LABEL_3;
LABEL_10:
    v3 = 0;
    if ((*((_BYTE *)this + 40) & 0x10) != 0)
      goto LABEL_6;
    goto LABEL_11;
  }
  v1 = *((_QWORD *)this + 3);
  if ((*((_BYTE *)this + 40) & 8) == 0)
    goto LABEL_10;
LABEL_3:
  v2 = *((float *)this + 8);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 40) & 0x10) != 0)
  {
LABEL_6:
    v4 = *((unsigned int *)this + 9);
    if ((*((_BYTE *)this + 40) & 1) != 0)
      goto LABEL_7;
LABEL_12:
    v5 = 0;
    if ((*((_BYTE *)this + 40) & 2) != 0)
      goto LABEL_8;
LABEL_13:
    v6 = 0;
    return v3 ^ v1 ^ v4 ^ v5 ^ v6;
  }
LABEL_11:
  v4 = 0;
  if ((*((_BYTE *)this + 40) & 1) == 0)
    goto LABEL_12;
LABEL_7:
  v5 = *((_QWORD *)this + 1);
  if ((*((_BYTE *)this + 40) & 2) == 0)
    goto LABEL_13;
LABEL_8:
  v6 = *((_QWORD *)this + 2);
  return v3 ^ v1 ^ v4 ^ v5 ^ v6;
}

void CMMsl::KappaRolloverCrashResult::~KappaRolloverCrashResult(CMMsl::KappaRolloverCrashResult *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::KappaRolloverCrashResult::KappaRolloverCrashResult(CMMsl::KappaRolloverCrashResult *this, const CMMsl::KappaRolloverCrashResult *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  char v9;
  char v10;
  float result;
  char v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  int v18;
  char v19;
  unint64_t v20;
  char v21;
  char v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  int v26;
  char v27;
  unint64_t v28;

  *(_QWORD *)this = off_100352390;
  v2 = (uint64_t *)((char *)this + 316);
  *((_DWORD *)this + 81) = 0;
  *(_QWORD *)((char *)this + 316) = 0;
  v3 = (uint64_t *)((char *)a2 + 316);
  v4 = *(_QWORD *)((char *)a2 + 316);
  if ((v4 & 1) != 0)
  {
    v6 = 0;
    v8 = *((_QWORD *)a2 + 1);
    *((_BYTE *)this + 326) = 0;
    *((_WORD *)this + 162) = 0;
    v5 = 1;
    *v2 = 1;
    *((_QWORD *)this + 1) = v8;
    LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
    v4 = *v3;
    if ((*((_WORD *)a2 + 162) & 0x8000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 0;
  v6 = 0;
  v7 = *((unsigned __int16 *)a2 + 162);
  LODWORD(v8) = v7 | (*((unsigned __int8 *)a2 + 326) << 16);
  if ((v7 & 0x8000) != 0)
  {
LABEL_5:
    v9 = *((_BYTE *)a2 + 310);
    v6 = 0x8000;
    *v2 = v5;
    *((_BYTE *)this + 326) = 0;
    *((_WORD *)this + 162) = 0x8000;
    *((_BYTE *)this + 310) = v9;
    LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
    v4 = *v3;
  }
LABEL_6:
  if ((v8 & 0x10000) != 0)
  {
    v10 = *((_BYTE *)a2 + 311);
    *((_WORD *)this + 162) = v6;
    v6 |= 0x10000uLL;
    *v2 = v5;
    *((_BYTE *)this + 326) = BYTE2(v6);
    *((_BYTE *)this + 311) = v10;
    LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
    v4 = *v3;
    if ((*v3 & 0x40000000000) == 0)
    {
LABEL_8:
      if ((v4 & 0x40000) == 0)
        goto LABEL_9;
      goto LABEL_90;
    }
  }
  else if ((v4 & 0x40000000000) == 0)
  {
    goto LABEL_8;
  }
  result = *((float *)a2 + 45);
  v5 |= 0x40000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 45) = result;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  v4 = *v3;
  if ((*v3 & 0x40000) == 0)
  {
LABEL_9:
    if ((v8 & 8) == 0)
      goto LABEL_10;
    goto LABEL_91;
  }
LABEL_90:
  result = *((float *)a2 + 21);
  v5 |= 0x40000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 21) = result;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  v4 = *v3;
  if ((*((_WORD *)a2 + 162) & 8) == 0)
  {
LABEL_10:
    if ((v8 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_92;
  }
LABEL_91:
  result = *((float *)a2 + 70);
  v8 = v6 >> 16;
  v6 |= 8uLL;
  *v2 = v5;
  *((_BYTE *)this + 326) = v8;
  *((_WORD *)this + 162) = v6;
  *((float *)this + 70) = result;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  v4 = *v3;
  if ((*((_WORD *)a2 + 162) & 0x2000) == 0)
  {
LABEL_11:
    if ((v8 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_93;
  }
LABEL_92:
  v12 = *((_BYTE *)a2 + 308);
  v13 = v6 >> 16;
  v6 |= 0x2000uLL;
  *v2 = v5;
  *((_BYTE *)this + 326) = v13;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 308) = v12;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  v4 = *v3;
  if ((*((_WORD *)a2 + 162) & 0x400) == 0)
  {
LABEL_12:
    if ((v8 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_94;
  }
LABEL_93:
  v14 = *((_BYTE *)a2 + 305);
  v15 = v6 >> 16;
  v6 |= 0x400uLL;
  *v2 = v5;
  *((_BYTE *)this + 326) = v15;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 305) = v14;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  v4 = *v3;
  if ((*((_WORD *)a2 + 162) & 0x200) == 0)
  {
LABEL_13:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_14;
    goto LABEL_95;
  }
LABEL_94:
  v16 = *((_BYTE *)a2 + 304);
  v17 = v6 >> 16;
  v6 |= 0x200uLL;
  *v2 = v5;
  *((_BYTE *)this + 326) = v17;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 304) = v16;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  v4 = *v3;
  if ((*v3 & 0x2000000) == 0)
  {
LABEL_14:
    if ((v8 & 0x1000) == 0)
      goto LABEL_15;
    goto LABEL_96;
  }
LABEL_95:
  v18 = *((_DWORD *)a2 + 28);
  v5 |= 0x2000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((_DWORD *)this + 28) = v18;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  v4 = *v3;
  if ((*((_WORD *)a2 + 162) & 0x1000) == 0)
  {
LABEL_15:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_16;
    goto LABEL_97;
  }
LABEL_96:
  v19 = *((_BYTE *)a2 + 307);
  v20 = v6 >> 16;
  v6 |= 0x1000uLL;
  *v2 = v5;
  *((_BYTE *)this + 326) = v20;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 307) = v19;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  v4 = *v3;
  if ((*v3 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x2000000000000) == 0)
      goto LABEL_17;
    goto LABEL_98;
  }
LABEL_97:
  result = *((float *)a2 + 27);
  v5 |= 0x1000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 27) = result;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  v4 = *v3;
  if ((*v3 & 0x2000000000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x1000000000000) == 0)
      goto LABEL_18;
    goto LABEL_99;
  }
LABEL_98:
  result = *((float *)a2 + 52);
  v5 |= 0x2000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 52) = result;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  v4 = *v3;
  if ((*v3 & 0x1000000000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000000000000) == 0)
      goto LABEL_19;
    goto LABEL_100;
  }
LABEL_99:
  result = *((float *)a2 + 51);
  v5 |= 0x1000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 51) = result;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  v4 = *v3;
  if ((*v3 & 0x4000000000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x40) == 0)
      goto LABEL_20;
    goto LABEL_101;
  }
LABEL_100:
  result = *((float *)a2 + 53);
  v5 |= 0x4000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 53) = result;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  v4 = *v3;
  if ((*v3 & 0x40) == 0)
  {
LABEL_20:
    if ((v4 & 2) == 0)
      goto LABEL_21;
    goto LABEL_102;
  }
LABEL_101:
  result = *((float *)a2 + 9);
  v5 |= 0x40uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 9) = result;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  v4 = *v3;
  if ((*v3 & 2) == 0)
  {
LABEL_21:
    if ((v4 & 0x8000) == 0)
      goto LABEL_22;
    goto LABEL_103;
  }
LABEL_102:
  result = *((float *)a2 + 4);
  v5 |= 2uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 4) = result;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  v4 = *v3;
  if ((*v3 & 0x8000) == 0)
  {
LABEL_22:
    if ((v8 & 0x40000) == 0)
      goto LABEL_23;
    goto LABEL_104;
  }
LABEL_103:
  result = *((float *)a2 + 18);
  v5 |= 0x8000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 18) = result;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  v4 = *v3;
  if ((v8 & 0x40000) == 0)
  {
LABEL_23:
    if ((v8 & 0x800) == 0)
      goto LABEL_24;
    goto LABEL_105;
  }
LABEL_104:
  v21 = *((_BYTE *)a2 + 313);
  *((_WORD *)this + 162) = v6;
  v6 |= 0x40000uLL;
  *v2 = v5;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((_BYTE *)this + 313) = v21;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  v4 = *v3;
  if ((*((_WORD *)a2 + 162) & 0x800) == 0)
  {
LABEL_24:
    if ((v8 & 0x4000) == 0)
      goto LABEL_25;
    goto LABEL_106;
  }
LABEL_105:
  v22 = *((_BYTE *)a2 + 306);
  v23 = v6 >> 16;
  v6 |= 0x800uLL;
  *v2 = v5;
  *((_BYTE *)this + 326) = v23;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 306) = v22;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  v4 = *v3;
  if ((*((_WORD *)a2 + 162) & 0x4000) == 0)
  {
LABEL_25:
    if ((v4 & 0x20000000000000) == 0)
      goto LABEL_26;
    goto LABEL_107;
  }
LABEL_106:
  v24 = *((_BYTE *)a2 + 309);
  v25 = v6 >> 16;
  v6 |= 0x4000uLL;
  *v2 = v5;
  *((_BYTE *)this + 326) = v25;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 309) = v24;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  v4 = *v3;
  if ((*v3 & 0x20000000000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x8000000000000) == 0)
      goto LABEL_27;
    goto LABEL_108;
  }
LABEL_107:
  result = *((float *)a2 + 56);
  v5 |= 0x20000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 56) = result;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  v4 = *v3;
  if ((*v3 & 0x8000000000000) == 0)
  {
LABEL_27:
    if ((v4 & 0x10000000000000) == 0)
      goto LABEL_28;
    goto LABEL_109;
  }
LABEL_108:
  result = *((float *)a2 + 54);
  v5 |= 0x8000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 54) = result;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  v4 = *v3;
  if ((*v3 & 0x10000000000000) == 0)
  {
LABEL_28:
    if ((v8 & 0x20000) == 0)
      goto LABEL_29;
    goto LABEL_110;
  }
LABEL_109:
  v26 = *((_DWORD *)a2 + 55);
  v5 |= 0x10000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((_DWORD *)this + 55) = v26;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  v4 = *v3;
  if ((v8 & 0x20000) == 0)
  {
LABEL_29:
    if ((v4 & 0x40000000000000) == 0)
      goto LABEL_30;
    goto LABEL_111;
  }
LABEL_110:
  v27 = *((_BYTE *)a2 + 312);
  *((_WORD *)this + 162) = v6;
  v6 |= 0x20000uLL;
  *v2 = v5;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((_BYTE *)this + 312) = v27;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x40000000000000) == 0)
  {
LABEL_30:
    if ((v4 & 0x800000000000000) == 0)
      goto LABEL_31;
    goto LABEL_112;
  }
LABEL_111:
  result = *((float *)a2 + 57);
  v5 |= 0x40000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 57) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x800000000000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x80000) == 0)
      goto LABEL_32;
    goto LABEL_113;
  }
LABEL_112:
  result = *((float *)a2 + 62);
  v5 |= 0x800000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 62) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x80000) == 0)
  {
LABEL_32:
    if ((v4 & 0x80000000000) == 0)
      goto LABEL_33;
    goto LABEL_114;
  }
LABEL_113:
  result = *((float *)a2 + 22);
  v5 |= 0x80000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 22) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x80000000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x10) == 0)
      goto LABEL_34;
    goto LABEL_115;
  }
LABEL_114:
  result = *((float *)a2 + 46);
  v5 |= 0x80000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 46) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((v8 & 0x10) == 0)
  {
LABEL_34:
    if ((v4 & 0x80000000000000) == 0)
      goto LABEL_35;
    goto LABEL_116;
  }
LABEL_115:
  result = *((float *)a2 + 71);
  v8 = v6 >> 16;
  v6 |= 0x10uLL;
  *v2 = v5;
  *((_BYTE *)this + 326) = v8;
  *((_WORD *)this + 162) = v6;
  *((float *)this + 71) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x80000000000000) == 0)
  {
LABEL_35:
    if ((v4 & 0x1000000000000000) == 0)
      goto LABEL_36;
    goto LABEL_117;
  }
LABEL_116:
  result = *((float *)a2 + 58);
  v5 |= 0x80000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 58) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x1000000000000000) == 0)
  {
LABEL_36:
    if ((v4 & 0x100000) == 0)
      goto LABEL_37;
    goto LABEL_118;
  }
LABEL_117:
  result = *((float *)a2 + 63);
  v5 |= 0x1000000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 63) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x100000) == 0)
  {
LABEL_37:
    if ((v4 & 0x100000000000) == 0)
      goto LABEL_38;
    goto LABEL_119;
  }
LABEL_118:
  result = *((float *)a2 + 23);
  v5 |= 0x100000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 23) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x100000000000) == 0)
  {
LABEL_38:
    if ((v8 & 0x20) == 0)
      goto LABEL_39;
    goto LABEL_120;
  }
LABEL_119:
  result = *((float *)a2 + 47);
  v5 |= 0x100000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 47) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((v8 & 0x20) == 0)
  {
LABEL_39:
    if ((v4 & 0x100000000000000) == 0)
      goto LABEL_40;
    goto LABEL_121;
  }
LABEL_120:
  result = *((float *)a2 + 72);
  v8 = v6 >> 16;
  v6 |= 0x20uLL;
  *v2 = v5;
  *((_BYTE *)this + 326) = v8;
  *((_WORD *)this + 162) = v6;
  *((float *)this + 72) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x100000000000000) == 0)
  {
LABEL_40:
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_41;
    goto LABEL_122;
  }
LABEL_121:
  result = *((float *)a2 + 59);
  v5 |= 0x100000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 59) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x2000000000000000) == 0)
  {
LABEL_41:
    if ((v4 & 0x200000) == 0)
      goto LABEL_42;
    goto LABEL_123;
  }
LABEL_122:
  result = *((float *)a2 + 64);
  v5 |= 0x2000000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 64) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x200000) == 0)
  {
LABEL_42:
    if ((v4 & 0x200000000000) == 0)
      goto LABEL_43;
    goto LABEL_124;
  }
LABEL_123:
  result = *((float *)a2 + 24);
  v5 |= 0x200000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 24) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x200000000000) == 0)
  {
LABEL_43:
    if ((v8 & 0x40) == 0)
      goto LABEL_44;
    goto LABEL_125;
  }
LABEL_124:
  result = *((float *)a2 + 48);
  v5 |= 0x200000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 48) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((v8 & 0x40) == 0)
  {
LABEL_44:
    if ((v4 & 0x80) == 0)
      goto LABEL_45;
    goto LABEL_126;
  }
LABEL_125:
  result = *((float *)a2 + 73);
  v8 = v6 >> 16;
  v6 |= 0x40uLL;
  *v2 = v5;
  *((_BYTE *)this + 326) = v8;
  *((_WORD *)this + 162) = v6;
  *((float *)this + 73) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x80) == 0)
  {
LABEL_45:
    if ((v4 & 0x400) == 0)
      goto LABEL_46;
    goto LABEL_127;
  }
LABEL_126:
  result = *((float *)a2 + 10);
  v5 |= 0x80uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 10) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x400) == 0)
  {
LABEL_46:
    if ((v4 & 0x200) == 0)
      goto LABEL_47;
    goto LABEL_128;
  }
LABEL_127:
  result = *((float *)a2 + 13);
  v5 |= 0x400uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 13) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x200) == 0)
  {
LABEL_47:
    if ((v4 & 0x100) == 0)
      goto LABEL_48;
    goto LABEL_129;
  }
LABEL_128:
  result = *((float *)a2 + 12);
  v5 |= 0x200uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 12) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x100) == 0)
  {
LABEL_48:
    if ((v4 & 4) == 0)
      goto LABEL_49;
    goto LABEL_130;
  }
LABEL_129:
  result = *((float *)a2 + 11);
  v5 |= 0x100uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 11) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 4) == 0)
  {
LABEL_49:
    if ((v4 & 0x20) == 0)
      goto LABEL_50;
    goto LABEL_131;
  }
LABEL_130:
  result = *((float *)a2 + 5);
  v5 |= 4uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 5) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x20) == 0)
  {
LABEL_50:
    if ((v4 & 0x10) == 0)
      goto LABEL_51;
    goto LABEL_132;
  }
LABEL_131:
  result = *((float *)a2 + 8);
  v5 |= 0x20uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 8) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x10) == 0)
  {
LABEL_51:
    if ((v4 & 8) == 0)
      goto LABEL_52;
    goto LABEL_133;
  }
LABEL_132:
  result = *((float *)a2 + 7);
  v5 |= 0x10uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 7) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 8) == 0)
  {
LABEL_52:
    if ((v4 & 0x800) == 0)
      goto LABEL_53;
    goto LABEL_134;
  }
LABEL_133:
  result = *((float *)a2 + 6);
  v5 |= 8uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 6) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x800) == 0)
  {
LABEL_53:
    if ((v4 & 0x4000) == 0)
      goto LABEL_54;
    goto LABEL_135;
  }
LABEL_134:
  result = *((float *)a2 + 14);
  v5 |= 0x800uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 14) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x4000) == 0)
  {
LABEL_54:
    if ((v4 & 0x2000) == 0)
      goto LABEL_55;
    goto LABEL_136;
  }
LABEL_135:
  result = *((float *)a2 + 17);
  v5 |= 0x4000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 17) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x2000) == 0)
  {
LABEL_55:
    if ((v4 & 0x1000) == 0)
      goto LABEL_56;
    goto LABEL_137;
  }
LABEL_136:
  result = *((float *)a2 + 16);
  v5 |= 0x2000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 16) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x1000) == 0)
  {
LABEL_56:
    if ((v4 & 0x10000) == 0)
      goto LABEL_57;
    goto LABEL_138;
  }
LABEL_137:
  result = *((float *)a2 + 15);
  v5 |= 0x1000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 15) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x10000) == 0)
  {
LABEL_57:
    if ((v4 & 0x20000) == 0)
      goto LABEL_58;
    goto LABEL_139;
  }
LABEL_138:
  result = *((float *)a2 + 19);
  v5 |= 0x10000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 19) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x20000) == 0)
  {
LABEL_58:
    if ((v4 & 0x200000000000000) == 0)
      goto LABEL_59;
    goto LABEL_140;
  }
LABEL_139:
  result = *((float *)a2 + 20);
  v5 |= 0x20000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 20) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x200000000000000) == 0)
  {
LABEL_59:
    if ((v4 & 0x4000000000000000) == 0)
      goto LABEL_60;
    goto LABEL_141;
  }
LABEL_140:
  result = *((float *)a2 + 60);
  v5 |= 0x200000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 60) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x4000000000000000) == 0)
  {
LABEL_60:
    if ((v4 & 0x400000) == 0)
      goto LABEL_61;
    goto LABEL_142;
  }
LABEL_141:
  result = *((float *)a2 + 65);
  v5 |= 0x4000000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 65) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x400000) == 0)
  {
LABEL_61:
    if ((v4 & 0x400000000000) == 0)
      goto LABEL_62;
    goto LABEL_143;
  }
LABEL_142:
  result = *((float *)a2 + 25);
  v5 |= 0x400000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 25) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x400000000000) == 0)
  {
LABEL_62:
    if ((v8 & 0x80) == 0)
      goto LABEL_63;
    goto LABEL_144;
  }
LABEL_143:
  result = *((float *)a2 + 49);
  v5 |= 0x400000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 49) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((v8 & 0x80) == 0)
  {
LABEL_63:
    if ((v4 & 0x400000000000000) == 0)
      goto LABEL_64;
    goto LABEL_145;
  }
LABEL_144:
  result = *((float *)a2 + 74);
  v8 = v6 >> 16;
  v6 |= 0x80uLL;
  *v2 = v5;
  *((_BYTE *)this + 326) = v8;
  *((_WORD *)this + 162) = v6;
  *((float *)this + 74) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x400000000000000) == 0)
  {
LABEL_64:
    if ((v4 & 0x8000000000000000) == 0)
      goto LABEL_65;
    goto LABEL_146;
  }
LABEL_145:
  result = *((float *)a2 + 61);
  v5 |= 0x400000000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 61) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x8000000000000000) == 0)
  {
LABEL_65:
    if ((v4 & 0x800000) == 0)
      goto LABEL_66;
    goto LABEL_147;
  }
LABEL_146:
  result = *((float *)a2 + 66);
  v5 |= 0x8000000000000000;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 66) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x800000) == 0)
  {
LABEL_66:
    if ((v4 & 0x800000000000) == 0)
      goto LABEL_67;
    goto LABEL_148;
  }
LABEL_147:
  result = *((float *)a2 + 26);
  v5 |= 0x800000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 26) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x800000000000) == 0)
  {
LABEL_67:
    if ((v8 & 0x100) == 0)
      goto LABEL_68;
    goto LABEL_149;
  }
LABEL_148:
  result = *((float *)a2 + 50);
  v5 |= 0x800000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 50) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((v8 & 0x100) == 0)
  {
LABEL_68:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_69;
    goto LABEL_150;
  }
LABEL_149:
  result = *((float *)a2 + 75);
  v8 = v6 >> 16;
  v6 |= 0x100uLL;
  *v2 = v5;
  *((_BYTE *)this + 326) = v8;
  *((_WORD *)this + 162) = v6;
  *((float *)this + 75) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x100000000) == 0)
  {
LABEL_69:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_70;
    goto LABEL_151;
  }
LABEL_150:
  result = *((float *)a2 + 35);
  v5 |= (unint64_t)&_mh_execute_header;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 35) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x200000000) == 0)
  {
LABEL_70:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_71;
    goto LABEL_152;
  }
LABEL_151:
  result = *((float *)a2 + 36);
  v5 |= 0x200000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 36) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x8000000) == 0)
  {
LABEL_71:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_72;
    goto LABEL_153;
  }
LABEL_152:
  result = *((float *)a2 + 30);
  v5 |= 0x8000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 30) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x4000000) == 0)
  {
LABEL_72:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_73;
    goto LABEL_154;
  }
LABEL_153:
  result = *((float *)a2 + 29);
  v5 |= 0x4000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 29) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x80000000) == 0)
  {
LABEL_73:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_74;
    goto LABEL_155;
  }
LABEL_154:
  result = *((float *)a2 + 34);
  v5 |= 0x80000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 34) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x40000000) == 0)
  {
LABEL_74:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_75;
    goto LABEL_156;
  }
LABEL_155:
  result = *((float *)a2 + 33);
  v5 |= 0x40000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 33) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x20000000) == 0)
  {
LABEL_75:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_76;
    goto LABEL_157;
  }
LABEL_156:
  result = *((float *)a2 + 32);
  v5 |= 0x20000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 32) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x10000000) == 0)
  {
LABEL_76:
    if ((v4 & 0x10000000000) == 0)
      goto LABEL_77;
    goto LABEL_158;
  }
LABEL_157:
  result = *((float *)a2 + 31);
  v5 |= 0x10000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 31) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x10000000000) == 0)
  {
LABEL_77:
    if ((v4 & 0x20000000000) == 0)
      goto LABEL_78;
    goto LABEL_159;
  }
LABEL_158:
  result = *((float *)a2 + 43);
  v5 |= 0x10000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 43) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x20000000000) == 0)
  {
LABEL_78:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_79;
    goto LABEL_160;
  }
LABEL_159:
  result = *((float *)a2 + 44);
  v5 |= 0x20000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 44) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x800000000) == 0)
  {
LABEL_79:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_80;
    goto LABEL_161;
  }
LABEL_160:
  result = *((float *)a2 + 38);
  v5 |= 0x800000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 38) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x400000000) == 0)
  {
LABEL_80:
    if ((v4 & 0x8000000000) == 0)
      goto LABEL_81;
    goto LABEL_162;
  }
LABEL_161:
  result = *((float *)a2 + 37);
  v5 |= 0x400000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 37) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x8000000000) == 0)
  {
LABEL_81:
    if ((v4 & 0x4000000000) == 0)
      goto LABEL_82;
    goto LABEL_163;
  }
LABEL_162:
  result = *((float *)a2 + 42);
  v5 |= 0x8000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 42) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x4000000000) == 0)
  {
LABEL_82:
    if ((v4 & 0x2000000000) == 0)
      goto LABEL_83;
    goto LABEL_164;
  }
LABEL_163:
  result = *((float *)a2 + 41);
  v5 |= 0x4000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 41) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  v4 = *v3;
  if ((*v3 & 0x2000000000) == 0)
  {
LABEL_83:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_84;
    goto LABEL_165;
  }
LABEL_164:
  result = *((float *)a2 + 40);
  v5 |= 0x2000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 40) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  if ((*v3 & 0x1000000000) == 0)
  {
LABEL_84:
    if ((v8 & 2) == 0)
      goto LABEL_85;
    goto LABEL_166;
  }
LABEL_165:
  result = *((float *)a2 + 39);
  v5 |= 0x1000000000uLL;
  *v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((_BYTE *)this + 326) = BYTE2(v6);
  *((float *)this + 39) = result;
  LOBYTE(v8) = *((_WORD *)a2 + 162);
  if ((*((_WORD *)a2 + 162) & 2) == 0)
  {
LABEL_85:
    if ((v8 & 4) == 0)
      goto LABEL_86;
    goto LABEL_167;
  }
LABEL_166:
  result = *((float *)a2 + 68);
  v8 = v6 >> 16;
  v6 |= 2uLL;
  *v2 = v5;
  *((_BYTE *)this + 326) = v8;
  *((_WORD *)this + 162) = v6;
  *((float *)this + 68) = result;
  LOBYTE(v8) = *((_WORD *)a2 + 162);
  if ((*((_WORD *)a2 + 162) & 4) == 0)
  {
LABEL_86:
    if ((v8 & 1) == 0)
      return result;
LABEL_168:
    result = *((float *)a2 + 67);
    *v2 = v5;
    *((_BYTE *)this + 326) = BYTE2(v6);
    *((_WORD *)this + 162) = v6 | 1;
    *((float *)this + 67) = result;
    return result;
  }
LABEL_167:
  result = *((float *)a2 + 69);
  v28 = v6 >> 16;
  LODWORD(v6) = v6 | 4;
  *v2 = v5;
  *((_BYTE *)this + 326) = v28;
  *((_WORD *)this + 162) = v6;
  *((float *)this + 69) = result;
  if ((*((_WORD *)a2 + 162) & 1) != 0)
    goto LABEL_168;
  return result;
}

